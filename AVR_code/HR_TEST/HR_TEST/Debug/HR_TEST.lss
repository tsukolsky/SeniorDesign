
HR_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  000021ba  0000224e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000087  00800126  00800126  00002274  2**0
                  ALLOC
  3 .stab         00002afc  00000000  00000000  00002274  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000710  00000000  00000000  00004d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005480  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001963  00000000  00000000  000055e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004b9  00000000  00000000  00006f43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa0  00000000  00000000  000073fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000714  00000000  00000000  00007e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000993  00000000  00000000  000085b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001368  00000000  00000000  00008f43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000a2ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__ctors_end>
       4:	0c 94 f7 08 	jmp	0x11ee	; 0x11ee <__vector_1>
       8:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
       c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      10:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      14:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      18:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      1c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      20:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      24:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      28:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      2c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      30:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      34:	0c 94 97 08 	jmp	0x112e	; 0x112e <__vector_13>
      38:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <__vector_14>
      3c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      40:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      44:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      48:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      4c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      50:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      54:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      58:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      5c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      60:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      64:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	lds	r16, 0x00
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <_ZN12heartMonitorC1Ev+0x48>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <_ZN8odometer12setWheelSizeEd+0x42>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__SREG__+0x45>
      f4:	ba a5       	lds	r27, 0x6a
      f6:	6f a5       	lds	r22, 0x6f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__SREG__+0x89>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <_ZN8odometer11setOdometerEddddjjjj+0x4a>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <__do_clear_bss+0x6>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__SREG__+0xd1>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <_ZN8odometerC1Ev+0x16>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <__ctors_start>:
     162:	47 0c       	add	r4, r7

00000164 <__ctors_end>:
     164:	11 24       	eor	r1, r1
     166:	1f be       	out	0x3f, r1	; 63
     168:	cf ef       	ldi	r28, 0xFF	; 255
     16a:	d8 e0       	ldi	r29, 0x08	; 8
     16c:	de bf       	out	0x3e, r29	; 62
     16e:	cd bf       	out	0x3d, r28	; 61

00000170 <__do_copy_data>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a0 e0       	ldi	r26, 0x00	; 0
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	ea eb       	ldi	r30, 0xBA	; 186
     178:	f1 e2       	ldi	r31, 0x21	; 33
     17a:	02 c0       	rjmp	.+4      	; 0x180 <__do_copy_data+0x10>
     17c:	05 90       	lpm	r0, Z+
     17e:	0d 92       	st	X+, r0
     180:	a6 32       	cpi	r26, 0x26	; 38
     182:	b1 07       	cpc	r27, r17
     184:	d9 f7       	brne	.-10     	; 0x17c <__do_copy_data+0xc>

00000186 <__do_clear_bss>:
     186:	11 e0       	ldi	r17, 0x01	; 1
     188:	a6 e2       	ldi	r26, 0x26	; 38
     18a:	b1 e0       	ldi	r27, 0x01	; 1
     18c:	01 c0       	rjmp	.+2      	; 0x190 <.do_clear_bss_start>

0000018e <.do_clear_bss_loop>:
     18e:	1d 92       	st	X+, r1

00000190 <.do_clear_bss_start>:
     190:	ad 3a       	cpi	r26, 0xAD	; 173
     192:	b1 07       	cpc	r27, r17
     194:	e1 f7       	brne	.-8      	; 0x18e <.do_clear_bss_loop>

00000196 <__do_global_ctors>:
     196:	11 e0       	ldi	r17, 0x01	; 1
     198:	c4 e6       	ldi	r28, 0x64	; 100
     19a:	d1 e0       	ldi	r29, 0x01	; 1
     19c:	04 c0       	rjmp	.+8      	; 0x1a6 <__do_global_ctors+0x10>
     19e:	22 97       	sbiw	r28, 0x02	; 2
     1a0:	fe 01       	movw	r30, r28
     1a2:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <__tablejump__>
     1a6:	c2 36       	cpi	r28, 0x62	; 98
     1a8:	d1 07       	cpc	r29, r17
     1aa:	c9 f7       	brne	.-14     	; 0x19e <__do_global_ctors+0x8>
     1ac:	0e 94 cf 09 	call	0x139e	; 0x139e <main>
     1b0:	0c 94 db 10 	jmp	0x21b6	; 0x21b6 <_exit>

000001b4 <__bad_interrupt>:
     1b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b8 <_ZN8odometerC1Ev>:
		void updateSpeeds();
		void resetOdometer();
};

//For new odometer, initialize everything
odometer::odometer(){
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	00 d0       	rcall	.+0      	; 0x1be <_ZN8odometerC1Ev+0x6>
     1be:	cd b7       	in	r28, 0x3d	; 61
     1c0:	de b7       	in	r29, 0x3e	; 62
     1c2:	9a 83       	std	Y+2, r25	; 0x02
     1c4:	89 83       	std	Y+1, r24	; 0x01
	wheelSize=DEFAULT_WHEEL_SIZE;
     1c6:	29 81       	ldd	r18, Y+1	; 0x01
     1c8:	3a 81       	ldd	r19, Y+2	; 0x02
     1ca:	82 e3       	ldi	r24, 0x32	; 50
     1cc:	96 ef       	ldi	r25, 0xF6	; 246
     1ce:	a5 eb       	ldi	r26, 0xB5	; 181
     1d0:	ba e3       	ldi	r27, 0x3A	; 58
     1d2:	f9 01       	movw	r30, r18
     1d4:	84 87       	std	Z+12, r24	; 0x0c
     1d6:	95 87       	std	Z+13, r25	; 0x0d
     1d8:	a6 87       	std	Z+14, r26	; 0x0e
     1da:	b7 87       	std	Z+15, r27	; 0x0f
	resetOdometer();
     1dc:	89 81       	ldd	r24, Y+1	; 0x01
     1de:	9a 81       	ldd	r25, Y+2	; 0x02
     1e0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_ZN8odometer13resetOdometerEv>
}
     1e4:	0f 90       	pop	r0
     1e6:	0f 90       	pop	r0
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
     1ec:	08 95       	ret

000001ee <_ZN8odometer13resetOdometerEv>:

//How we reset odometer. Everyting is reset except WHEEL SIZE, that's done by the calling function.
void odometer::resetOdometer(){
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
     1f2:	00 d0       	rcall	.+0      	; 0x1f4 <_ZN8odometer13resetOdometerEv+0x6>
     1f4:	00 d0       	rcall	.+0      	; 0x1f6 <_ZN8odometer13resetOdometerEv+0x8>
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
     1fa:	9c 83       	std	Y+4, r25	; 0x04
     1fc:	8b 83       	std	Y+3, r24	; 0x03
	firstRun=fTrue;
     1fe:	8b 81       	ldd	r24, Y+3	; 0x03
     200:	9c 81       	ldd	r25, Y+4	; 0x04
     202:	21 e0       	ldi	r18, 0x01	; 1
     204:	fc 01       	movw	r30, r24
     206:	20 ab       	sts	0x50, r18
	noSpeed=fFalse;
     208:	8b 81       	ldd	r24, Y+3	; 0x03
     20a:	9c 81       	ldd	r25, Y+4	; 0x04
     20c:	fc 01       	movw	r30, r24
     20e:	11 aa       	sts	0x91, r17
	aveSpeed=0;
     210:	2b 81       	ldd	r18, Y+3	; 0x03
     212:	3c 81       	ldd	r19, Y+4	; 0x04
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	dc 01       	movw	r26, r24
     21a:	f9 01       	movw	r30, r18
     21c:	80 83       	st	Z, r24
     21e:	91 83       	std	Z+1, r25	; 0x01
     220:	a2 83       	std	Z+2, r26	; 0x02
     222:	b3 83       	std	Z+3, r27	; 0x03
	distance=0;
     224:	2b 81       	ldd	r18, Y+3	; 0x03
     226:	3c 81       	ldd	r19, Y+4	; 0x04
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	dc 01       	movw	r26, r24
     22e:	f9 01       	movw	r30, r18
     230:	84 83       	std	Z+4, r24	; 0x04
     232:	95 83       	std	Z+5, r25	; 0x05
     234:	a6 83       	std	Z+6, r26	; 0x06
     236:	b7 83       	std	Z+7, r27	; 0x07
	currentSpeed=0;
     238:	2b 81       	ldd	r18, Y+3	; 0x03
     23a:	3c 81       	ldd	r19, Y+4	; 0x04
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	dc 01       	movw	r26, r24
     242:	f9 01       	movw	r30, r18
     244:	80 87       	std	Z+8, r24	; 0x08
     246:	91 87       	std	Z+9, r25	; 0x09
     248:	a2 87       	std	Z+10, r26	; 0x0a
     24a:	b3 87       	std	Z+11, r27	; 0x0b
	speedWeight=0;
     24c:	2b 81       	ldd	r18, Y+3	; 0x03
     24e:	3c 81       	ldd	r19, Y+4	; 0x04
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	dc 01       	movw	r26, r24
     256:	f9 01       	movw	r30, r18
     258:	80 8b       	std	Z+16, r24	; 0x10
     25a:	91 8b       	std	Z+17, r25	; 0x11
     25c:	a2 8b       	std	Z+18, r26	; 0x12
     25e:	b3 8b       	std	Z+19, r27	; 0x13
	speedPoints=0;
     260:	8b 81       	ldd	r24, Y+3	; 0x03
     262:	9c 81       	ldd	r25, Y+4	; 0x04
     264:	fc 01       	movw	r30, r24
     266:	17 a6       	lds	r17, 0xb7
     268:	16 a6       	lds	r17, 0xb6
	sDate=0;
     26a:	8b 81       	ldd	r24, Y+3	; 0x03
     26c:	9c 81       	ldd	r25, Y+4	; 0x04
     26e:	fc 01       	movw	r30, r24
     270:	15 8a       	std	Z+21, r1	; 0x15
     272:	14 8a       	std	Z+20, r1	; 0x14
	sTime=0;
     274:	8b 81       	ldd	r24, Y+3	; 0x03
     276:	9c 81       	ldd	r25, Y+4	; 0x04
     278:	fc 01       	movw	r30, r24
     27a:	17 8a       	std	Z+23, r1	; 0x17
     27c:	16 8a       	std	Z+22, r1	; 0x16
	timeElapsed=0;
     27e:	8b 81       	ldd	r24, Y+3	; 0x03
     280:	9c 81       	ldd	r25, Y+4	; 0x04
     282:	fc 01       	movw	r30, r24
     284:	11 8e       	std	Z+25, r1	; 0x19
     286:	10 8e       	std	Z+24, r1	; 0x18
	for (volatile int i=0; i<10; i++){
     288:	1a 82       	std	Y+2, r1	; 0x02
     28a:	19 82       	std	Y+1, r1	; 0x01
     28c:	11 c0       	rjmp	.+34     	; 0x2b0 <_ZN8odometer13resetOdometerEv+0xc2>
		dataPoints[i]=0;
     28e:	89 81       	ldd	r24, Y+1	; 0x01
     290:	9a 81       	ldd	r25, Y+2	; 0x02
     292:	2b 81       	ldd	r18, Y+3	; 0x03
     294:	3c 81       	ldd	r19, Y+4	; 0x04
     296:	0d 96       	adiw	r24, 0x0d	; 13
     298:	88 0f       	add	r24, r24
     29a:	99 1f       	adc	r25, r25
     29c:	82 0f       	add	r24, r18
     29e:	93 1f       	adc	r25, r19
     2a0:	fc 01       	movw	r30, r24
     2a2:	11 82       	std	Z+1, r1	; 0x01
     2a4:	10 82       	st	Z, r1
	speedWeight=0;
	speedPoints=0;
	sDate=0;
	sTime=0;
	timeElapsed=0;
	for (volatile int i=0; i<10; i++){
     2a6:	89 81       	ldd	r24, Y+1	; 0x01
     2a8:	9a 81       	ldd	r25, Y+2	; 0x02
     2aa:	01 96       	adiw	r24, 0x01	; 1
     2ac:	9a 83       	std	Y+2, r25	; 0x02
     2ae:	89 83       	std	Y+1, r24	; 0x01
     2b0:	89 81       	ldd	r24, Y+1	; 0x01
     2b2:	9a 81       	ldd	r25, Y+2	; 0x02
     2b4:	21 e0       	ldi	r18, 0x01	; 1
     2b6:	8a 30       	cpi	r24, 0x0A	; 10
     2b8:	91 05       	cpc	r25, r1
     2ba:	0c f0       	brlt	.+2      	; 0x2be <_ZN8odometer13resetOdometerEv+0xd0>
     2bc:	20 e0       	ldi	r18, 0x00	; 0
     2be:	22 23       	and	r18, r18
     2c0:	31 f7       	brne	.-52     	; 0x28e <_ZN8odometer13resetOdometerEv+0xa0>
		dataPoints[i]=0;
	}
}
     2c2:	0f 90       	pop	r0
     2c4:	0f 90       	pop	r0
     2c6:	0f 90       	pop	r0
     2c8:	0f 90       	pop	r0
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	08 95       	ret

000002d0 <_ZN8odometer20setNewOdometerWOtimeEd>:


//New odometer with wheel size.
void odometer::setNewOdometerWOtime(double wheelSize){
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	00 d0       	rcall	.+0      	; 0x2d6 <_ZN8odometer20setNewOdometerWOtimeEd+0x6>
     2d6:	00 d0       	rcall	.+0      	; 0x2d8 <_ZN8odometer20setNewOdometerWOtimeEd+0x8>
     2d8:	00 d0       	rcall	.+0      	; 0x2da <_ZN8odometer20setNewOdometerWOtimeEd+0xa>
     2da:	cd b7       	in	r28, 0x3d	; 61
     2dc:	de b7       	in	r29, 0x3e	; 62
     2de:	9a 83       	std	Y+2, r25	; 0x02
     2e0:	89 83       	std	Y+1, r24	; 0x01
     2e2:	4b 83       	std	Y+3, r20	; 0x03
     2e4:	5c 83       	std	Y+4, r21	; 0x04
     2e6:	6d 83       	std	Y+5, r22	; 0x05
     2e8:	7e 83       	std	Y+6, r23	; 0x06
	this->wheelSize=wheelSize;
     2ea:	29 81       	ldd	r18, Y+1	; 0x01
     2ec:	3a 81       	ldd	r19, Y+2	; 0x02
     2ee:	8b 81       	ldd	r24, Y+3	; 0x03
     2f0:	9c 81       	ldd	r25, Y+4	; 0x04
     2f2:	ad 81       	ldd	r26, Y+5	; 0x05
     2f4:	be 81       	ldd	r27, Y+6	; 0x06
     2f6:	f9 01       	movw	r30, r18
     2f8:	84 87       	std	Z+12, r24	; 0x0c
     2fa:	95 87       	std	Z+13, r25	; 0x0d
     2fc:	a6 87       	std	Z+14, r26	; 0x0e
     2fe:	b7 87       	std	Z+15, r27	; 0x0f
	resetOdometer();
     300:	89 81       	ldd	r24, Y+1	; 0x01
     302:	9a 81       	ldd	r25, Y+2	; 0x02
     304:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_ZN8odometer13resetOdometerEv>
}
     308:	26 96       	adiw	r28, 0x06	; 6
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	f8 94       	cli
     30e:	de bf       	out	0x3e, r29	; 62
     310:	0f be       	out	0x3f, r0	; 63
     312:	cd bf       	out	0x3d, r28	; 61
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	08 95       	ret

0000031a <_ZN8odometer19setNewOdometerWtimeEdjj>:

//New Odometer with wheel size and accurate/valid date and time.
void odometer::setNewOdometerWtime(double wheelSize, unsigned int sDate, unsigned int sTime){
     31a:	0f 93       	push	r16
     31c:	1f 93       	push	r17
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62
     326:	2a 97       	sbiw	r28, 0x0a	; 10
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	f8 94       	cli
     32c:	de bf       	out	0x3e, r29	; 62
     32e:	0f be       	out	0x3f, r0	; 63
     330:	cd bf       	out	0x3d, r28	; 61
     332:	9a 83       	std	Y+2, r25	; 0x02
     334:	89 83       	std	Y+1, r24	; 0x01
     336:	4b 83       	std	Y+3, r20	; 0x03
     338:	5c 83       	std	Y+4, r21	; 0x04
     33a:	6d 83       	std	Y+5, r22	; 0x05
     33c:	7e 83       	std	Y+6, r23	; 0x06
     33e:	38 87       	std	Y+8, r19	; 0x08
     340:	2f 83       	std	Y+7, r18	; 0x07
     342:	1a 87       	std	Y+10, r17	; 0x0a
     344:	09 87       	std	Y+9, r16	; 0x09
	this->wheelSize=wheelSize;
     346:	29 81       	ldd	r18, Y+1	; 0x01
     348:	3a 81       	ldd	r19, Y+2	; 0x02
     34a:	8b 81       	ldd	r24, Y+3	; 0x03
     34c:	9c 81       	ldd	r25, Y+4	; 0x04
     34e:	ad 81       	ldd	r26, Y+5	; 0x05
     350:	be 81       	ldd	r27, Y+6	; 0x06
     352:	f9 01       	movw	r30, r18
     354:	84 87       	std	Z+12, r24	; 0x0c
     356:	95 87       	std	Z+13, r25	; 0x0d
     358:	a6 87       	std	Z+14, r26	; 0x0e
     35a:	b7 87       	std	Z+15, r27	; 0x0f
	this->sDate=sDate;
     35c:	89 81       	ldd	r24, Y+1	; 0x01
     35e:	9a 81       	ldd	r25, Y+2	; 0x02
     360:	2f 81       	ldd	r18, Y+7	; 0x07
     362:	38 85       	ldd	r19, Y+8	; 0x08
     364:	fc 01       	movw	r30, r24
     366:	35 8b       	std	Z+21, r19	; 0x15
     368:	24 8b       	std	Z+20, r18	; 0x14
	this->sTime=sTime;
     36a:	89 81       	ldd	r24, Y+1	; 0x01
     36c:	9a 81       	ldd	r25, Y+2	; 0x02
     36e:	29 85       	ldd	r18, Y+9	; 0x09
     370:	3a 85       	ldd	r19, Y+10	; 0x0a
     372:	fc 01       	movw	r30, r24
     374:	37 8b       	std	Z+23, r19	; 0x17
     376:	26 8b       	std	Z+22, r18	; 0x16
	resetOdometer();
     378:	89 81       	ldd	r24, Y+1	; 0x01
     37a:	9a 81       	ldd	r25, Y+2	; 0x02
     37c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_ZN8odometer13resetOdometerEv>
	
}
     380:	2a 96       	adiw	r28, 0x0a	; 10
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	f8 94       	cli
     386:	de bf       	out	0x3e, r29	; 62
     388:	0f be       	out	0x3f, r0	; 63
     38a:	cd bf       	out	0x3d, r28	; 61
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	1f 91       	pop	r17
     392:	0f 91       	pop	r16
     394:	08 95       	ret

00000396 <_ZN8odometer11setOdometerEddddjjjj>:

//Restart of the module, need to set everything.
void odometer::setOdometer(double swapAveSpeed, double swapDistance, double swapCurrentSpeed, double swapWheelSize, unsigned int swapSpeedPoints,unsigned int swapTimeElapsed,unsigned int swapSDate, unsigned int swapSTime){
     396:	8f 92       	push	r8
     398:	9f 92       	push	r9
     39a:	af 92       	push	r10
     39c:	bf 92       	push	r11
     39e:	cf 92       	push	r12
     3a0:	df 92       	push	r13
     3a2:	ef 92       	push	r14
     3a4:	ff 92       	push	r15
     3a6:	0f 93       	push	r16
     3a8:	1f 93       	push	r17
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
     3b2:	62 97       	sbiw	r28, 0x12	; 18
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	f8 94       	cli
     3b8:	de bf       	out	0x3e, r29	; 62
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	cd bf       	out	0x3d, r28	; 61
     3be:	9a 83       	std	Y+2, r25	; 0x02
     3c0:	89 83       	std	Y+1, r24	; 0x01
     3c2:	4b 83       	std	Y+3, r20	; 0x03
     3c4:	5c 83       	std	Y+4, r21	; 0x04
     3c6:	6d 83       	std	Y+5, r22	; 0x05
     3c8:	7e 83       	std	Y+6, r23	; 0x06
     3ca:	0f 83       	std	Y+7, r16	; 0x07
     3cc:	18 87       	std	Y+8, r17	; 0x08
     3ce:	29 87       	std	Y+9, r18	; 0x09
     3d0:	3a 87       	std	Y+10, r19	; 0x0a
     3d2:	cb 86       	std	Y+11, r12	; 0x0b
     3d4:	dc 86       	std	Y+12, r13	; 0x0c
     3d6:	ed 86       	std	Y+13, r14	; 0x0d
     3d8:	fe 86       	std	Y+14, r15	; 0x0e
     3da:	8f 86       	std	Y+15, r8	; 0x0f
     3dc:	98 8a       	std	Y+16, r9	; 0x10
     3de:	a9 8a       	std	Y+17, r10	; 0x11
     3e0:	ba 8a       	std	Y+18, r11	; 0x12
	aveSpeed=swapAveSpeed;
     3e2:	29 81       	ldd	r18, Y+1	; 0x01
     3e4:	3a 81       	ldd	r19, Y+2	; 0x02
     3e6:	8b 81       	ldd	r24, Y+3	; 0x03
     3e8:	9c 81       	ldd	r25, Y+4	; 0x04
     3ea:	ad 81       	ldd	r26, Y+5	; 0x05
     3ec:	be 81       	ldd	r27, Y+6	; 0x06
     3ee:	f9 01       	movw	r30, r18
     3f0:	80 83       	st	Z, r24
     3f2:	91 83       	std	Z+1, r25	; 0x01
     3f4:	a2 83       	std	Z+2, r26	; 0x02
     3f6:	b3 83       	std	Z+3, r27	; 0x03
	distance=swapDistance;
     3f8:	29 81       	ldd	r18, Y+1	; 0x01
     3fa:	3a 81       	ldd	r19, Y+2	; 0x02
     3fc:	8f 81       	ldd	r24, Y+7	; 0x07
     3fe:	98 85       	ldd	r25, Y+8	; 0x08
     400:	a9 85       	ldd	r26, Y+9	; 0x09
     402:	ba 85       	ldd	r27, Y+10	; 0x0a
     404:	f9 01       	movw	r30, r18
     406:	84 83       	std	Z+4, r24	; 0x04
     408:	95 83       	std	Z+5, r25	; 0x05
     40a:	a6 83       	std	Z+6, r26	; 0x06
     40c:	b7 83       	std	Z+7, r27	; 0x07
	currentSpeed=swapCurrentSpeed;
     40e:	29 81       	ldd	r18, Y+1	; 0x01
     410:	3a 81       	ldd	r19, Y+2	; 0x02
     412:	8b 85       	ldd	r24, Y+11	; 0x0b
     414:	9c 85       	ldd	r25, Y+12	; 0x0c
     416:	ad 85       	ldd	r26, Y+13	; 0x0d
     418:	be 85       	ldd	r27, Y+14	; 0x0e
     41a:	f9 01       	movw	r30, r18
     41c:	80 87       	std	Z+8, r24	; 0x08
     41e:	91 87       	std	Z+9, r25	; 0x09
     420:	a2 87       	std	Z+10, r26	; 0x0a
     422:	b3 87       	std	Z+11, r27	; 0x0b
	wheelSize=swapWheelSize;
     424:	29 81       	ldd	r18, Y+1	; 0x01
     426:	3a 81       	ldd	r19, Y+2	; 0x02
     428:	8f 85       	ldd	r24, Y+15	; 0x0f
     42a:	98 89       	ldd	r25, Y+16	; 0x10
     42c:	a9 89       	ldd	r26, Y+17	; 0x11
     42e:	ba 89       	ldd	r27, Y+18	; 0x12
     430:	f9 01       	movw	r30, r18
     432:	84 87       	std	Z+12, r24	; 0x0c
     434:	95 87       	std	Z+13, r25	; 0x0d
     436:	a6 87       	std	Z+14, r26	; 0x0e
     438:	b7 87       	std	Z+15, r27	; 0x0f
	speedPoints=swapSpeedPoints;
     43a:	89 81       	ldd	r24, Y+1	; 0x01
     43c:	9a 81       	ldd	r25, Y+2	; 0x02
     43e:	29 a1       	lds	r18, 0x49
     440:	3a a1       	lds	r19, 0x4a
     442:	fc 01       	movw	r30, r24
     444:	37 a7       	lds	r19, 0x77
     446:	26 a7       	lds	r18, 0x76
	timeElapsed=swapTimeElapsed;
     448:	89 81       	ldd	r24, Y+1	; 0x01
     44a:	9a 81       	ldd	r25, Y+2	; 0x02
     44c:	2b a1       	lds	r18, 0x4b
     44e:	3c a1       	lds	r19, 0x4c
     450:	fc 01       	movw	r30, r24
     452:	31 8f       	std	Z+25, r19	; 0x19
     454:	20 8f       	std	Z+24, r18	; 0x18
	sDate=swapSDate;
     456:	89 81       	ldd	r24, Y+1	; 0x01
     458:	9a 81       	ldd	r25, Y+2	; 0x02
     45a:	2d a1       	lds	r18, 0x4d
     45c:	3e a1       	lds	r19, 0x4e
     45e:	fc 01       	movw	r30, r24
     460:	35 8b       	std	Z+21, r19	; 0x15
     462:	24 8b       	std	Z+20, r18	; 0x14
	sTime=swapSTime;
     464:	89 81       	ldd	r24, Y+1	; 0x01
     466:	9a 81       	ldd	r25, Y+2	; 0x02
     468:	2f a1       	lds	r18, 0x4f
     46a:	38 a5       	lds	r19, 0x68
     46c:	fc 01       	movw	r30, r24
     46e:	37 8b       	std	Z+23, r19	; 0x17
     470:	26 8b       	std	Z+22, r18	; 0x16
	firstRun=fTrue;
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	9a 81       	ldd	r25, Y+2	; 0x02
     476:	21 e0       	ldi	r18, 0x01	; 1
     478:	fc 01       	movw	r30, r24
     47a:	20 ab       	sts	0x50, r18
}
     47c:	62 96       	adiw	r28, 0x12	; 18
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	de bf       	out	0x3e, r29	; 62
     484:	0f be       	out	0x3f, r0	; 63
     486:	cd bf       	out	0x3d, r28	; 61
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	ff 90       	pop	r15
     492:	ef 90       	pop	r14
     494:	df 90       	pop	r13
     496:	cf 90       	pop	r12
     498:	bf 90       	pop	r11
     49a:	af 90       	pop	r10
     49c:	9f 90       	pop	r9
     49e:	8f 90       	pop	r8
     4a0:	08 95       	ret

000004a2 <_ZN8odometer17addSpeedDataPointEj>:

//New speed data point
void odometer::addSpeedDataPoint(unsigned int newDataPoint){
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
     4aa:	28 97       	sbiw	r28, 0x08	; 8
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	f8 94       	cli
     4b0:	de bf       	out	0x3e, r29	; 62
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	cd bf       	out	0x3d, r28	; 61
     4b6:	9e 83       	std	Y+6, r25	; 0x06
     4b8:	8d 83       	std	Y+5, r24	; 0x05
     4ba:	78 87       	std	Y+8, r23	; 0x08
     4bc:	6f 83       	std	Y+7, r22	; 0x07
	//If this is first point or new wheelsize, or whatever, need to initialize all data points.
	if (firstRun || noSpeed){
     4be:	8d 81       	ldd	r24, Y+5	; 0x05
     4c0:	9e 81       	ldd	r25, Y+6	; 0x06
     4c2:	fc 01       	movw	r30, r24
     4c4:	80 a9       	sts	0x40, r24
     4c6:	88 23       	and	r24, r24
     4c8:	31 f4       	brne	.+12     	; 0x4d6 <_ZN8odometer17addSpeedDataPointEj+0x34>
     4ca:	8d 81       	ldd	r24, Y+5	; 0x05
     4cc:	9e 81       	ldd	r25, Y+6	; 0x06
     4ce:	fc 01       	movw	r30, r24
     4d0:	81 a9       	sts	0x41, r24
     4d2:	88 23       	and	r24, r24
     4d4:	41 f1       	breq	.+80     	; 0x526 <_ZN8odometer17addSpeedDataPointEj+0x84>
		for (volatile int j=0; j<10;j++){
     4d6:	1a 82       	std	Y+2, r1	; 0x02
     4d8:	19 82       	std	Y+1, r1	; 0x01
     4da:	13 c0       	rjmp	.+38     	; 0x502 <_ZN8odometer17addSpeedDataPointEj+0x60>
			dataPoints[j]=newDataPoint;
     4dc:	89 81       	ldd	r24, Y+1	; 0x01
     4de:	9a 81       	ldd	r25, Y+2	; 0x02
     4e0:	2d 81       	ldd	r18, Y+5	; 0x05
     4e2:	3e 81       	ldd	r19, Y+6	; 0x06
     4e4:	0d 96       	adiw	r24, 0x0d	; 13
     4e6:	88 0f       	add	r24, r24
     4e8:	99 1f       	adc	r25, r25
     4ea:	82 0f       	add	r24, r18
     4ec:	93 1f       	adc	r25, r19
     4ee:	2f 81       	ldd	r18, Y+7	; 0x07
     4f0:	38 85       	ldd	r19, Y+8	; 0x08
     4f2:	fc 01       	movw	r30, r24
     4f4:	31 83       	std	Z+1, r19	; 0x01
     4f6:	20 83       	st	Z, r18

//New speed data point
void odometer::addSpeedDataPoint(unsigned int newDataPoint){
	//If this is first point or new wheelsize, or whatever, need to initialize all data points.
	if (firstRun || noSpeed){
		for (volatile int j=0; j<10;j++){
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	9a 81       	ldd	r25, Y+2	; 0x02
     4fc:	01 96       	adiw	r24, 0x01	; 1
     4fe:	9a 83       	std	Y+2, r25	; 0x02
     500:	89 83       	std	Y+1, r24	; 0x01
     502:	89 81       	ldd	r24, Y+1	; 0x01
     504:	9a 81       	ldd	r25, Y+2	; 0x02
     506:	21 e0       	ldi	r18, 0x01	; 1
     508:	8a 30       	cpi	r24, 0x0A	; 10
     50a:	91 05       	cpc	r25, r1
     50c:	0c f0       	brlt	.+2      	; 0x510 <_ZN8odometer17addSpeedDataPointEj+0x6e>
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	22 23       	and	r18, r18
     512:	21 f7       	brne	.-56     	; 0x4dc <_ZN8odometer17addSpeedDataPointEj+0x3a>
			dataPoints[j]=newDataPoint;
		}
		firstRun=fFalse;				//reset flags
     514:	8d 81       	ldd	r24, Y+5	; 0x05
     516:	9e 81       	ldd	r25, Y+6	; 0x06
     518:	fc 01       	movw	r30, r24
     51a:	10 aa       	sts	0x90, r17
		noSpeed=fFalse;
     51c:	8d 81       	ldd	r24, Y+5	; 0x05
     51e:	9e 81       	ldd	r25, Y+6	; 0x06
     520:	fc 01       	movw	r30, r24
     522:	11 aa       	sts	0x91, r17
     524:	33 c0       	rjmp	.+102    	; 0x58c <_ZN8odometer17addSpeedDataPointEj+0xea>
	//Normal data point. shift back and add new one.
	} else {
		//Shift data back one
		for (volatile int i=0; i<9; i++){
     526:	1c 82       	std	Y+4, r1	; 0x04
     528:	1b 82       	std	Y+3, r1	; 0x03
     52a:	20 c0       	rjmp	.+64     	; 0x56c <_ZN8odometer17addSpeedDataPointEj+0xca>
			dataPoints[i]=dataPoints[i+1];	//shift down by one
     52c:	8b 81       	ldd	r24, Y+3	; 0x03
     52e:	9c 81       	ldd	r25, Y+4	; 0x04
     530:	2b 81       	ldd	r18, Y+3	; 0x03
     532:	3c 81       	ldd	r19, Y+4	; 0x04
     534:	2f 5f       	subi	r18, 0xFF	; 255
     536:	3f 4f       	sbci	r19, 0xFF	; 255
     538:	4d 81       	ldd	r20, Y+5	; 0x05
     53a:	5e 81       	ldd	r21, Y+6	; 0x06
     53c:	23 5f       	subi	r18, 0xF3	; 243
     53e:	3f 4f       	sbci	r19, 0xFF	; 255
     540:	22 0f       	add	r18, r18
     542:	33 1f       	adc	r19, r19
     544:	24 0f       	add	r18, r20
     546:	35 1f       	adc	r19, r21
     548:	f9 01       	movw	r30, r18
     54a:	20 81       	ld	r18, Z
     54c:	31 81       	ldd	r19, Z+1	; 0x01
     54e:	4d 81       	ldd	r20, Y+5	; 0x05
     550:	5e 81       	ldd	r21, Y+6	; 0x06
     552:	0d 96       	adiw	r24, 0x0d	; 13
     554:	88 0f       	add	r24, r24
     556:	99 1f       	adc	r25, r25
     558:	84 0f       	add	r24, r20
     55a:	95 1f       	adc	r25, r21
     55c:	fc 01       	movw	r30, r24
     55e:	31 83       	std	Z+1, r19	; 0x01
     560:	20 83       	st	Z, r18
		firstRun=fFalse;				//reset flags
		noSpeed=fFalse;
	//Normal data point. shift back and add new one.
	} else {
		//Shift data back one
		for (volatile int i=0; i<9; i++){
     562:	8b 81       	ldd	r24, Y+3	; 0x03
     564:	9c 81       	ldd	r25, Y+4	; 0x04
     566:	01 96       	adiw	r24, 0x01	; 1
     568:	9c 83       	std	Y+4, r25	; 0x04
     56a:	8b 83       	std	Y+3, r24	; 0x03
     56c:	8b 81       	ldd	r24, Y+3	; 0x03
     56e:	9c 81       	ldd	r25, Y+4	; 0x04
     570:	21 e0       	ldi	r18, 0x01	; 1
     572:	89 30       	cpi	r24, 0x09	; 9
     574:	91 05       	cpc	r25, r1
     576:	0c f0       	brlt	.+2      	; 0x57a <_ZN8odometer17addSpeedDataPointEj+0xd8>
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	22 23       	and	r18, r18
     57c:	b9 f6       	brne	.-82     	; 0x52c <_ZN8odometer17addSpeedDataPointEj+0x8a>
			dataPoints[i]=dataPoints[i+1];	//shift down by one
		}
		dataPoints[9]=newDataPoint;		//add new data point
     57e:	8d 81       	ldd	r24, Y+5	; 0x05
     580:	9e 81       	ldd	r25, Y+6	; 0x06
     582:	2f 81       	ldd	r18, Y+7	; 0x07
     584:	38 85       	ldd	r19, Y+8	; 0x08
     586:	fc 01       	movw	r30, r24
     588:	35 a7       	lds	r19, 0x75
     58a:	24 a7       	lds	r18, 0x74
	}
	speedPoints++;					//increment speed points
     58c:	8d 81       	ldd	r24, Y+5	; 0x05
     58e:	9e 81       	ldd	r25, Y+6	; 0x06
     590:	fc 01       	movw	r30, r24
     592:	86 a5       	lds	r24, 0x66
     594:	97 a5       	lds	r25, 0x67
     596:	9c 01       	movw	r18, r24
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	8d 81       	ldd	r24, Y+5	; 0x05
     59e:	9e 81       	ldd	r25, Y+6	; 0x06
     5a0:	fc 01       	movw	r30, r24
     5a2:	37 a7       	lds	r19, 0x77
     5a4:	26 a7       	lds	r18, 0x76
	distance+=wheelSize;			//increment distance.
     5a6:	8d 81       	ldd	r24, Y+5	; 0x05
     5a8:	9e 81       	ldd	r25, Y+6	; 0x06
     5aa:	fc 01       	movw	r30, r24
     5ac:	84 81       	ldd	r24, Z+4	; 0x04
     5ae:	95 81       	ldd	r25, Z+5	; 0x05
     5b0:	a6 81       	ldd	r26, Z+6	; 0x06
     5b2:	b7 81       	ldd	r27, Z+7	; 0x07
     5b4:	2d 81       	ldd	r18, Y+5	; 0x05
     5b6:	3e 81       	ldd	r19, Y+6	; 0x06
     5b8:	f9 01       	movw	r30, r18
     5ba:	24 85       	ldd	r18, Z+12	; 0x0c
     5bc:	35 85       	ldd	r19, Z+13	; 0x0d
     5be:	46 85       	ldd	r20, Z+14	; 0x0e
     5c0:	57 85       	ldd	r21, Z+15	; 0x0f
     5c2:	bc 01       	movw	r22, r24
     5c4:	cd 01       	movw	r24, r26
     5c6:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__addsf3>
     5ca:	dc 01       	movw	r26, r24
     5cc:	cb 01       	movw	r24, r22
     5ce:	2d 81       	ldd	r18, Y+5	; 0x05
     5d0:	3e 81       	ldd	r19, Y+6	; 0x06
     5d2:	f9 01       	movw	r30, r18
     5d4:	84 83       	std	Z+4, r24	; 0x04
     5d6:	95 83       	std	Z+5, r25	; 0x05
     5d8:	a6 83       	std	Z+6, r26	; 0x06
     5da:	b7 83       	std	Z+7, r27	; 0x07

	//With new point we need to update all the statistics.
	updateSpeeds();
     5dc:	8d 81       	ldd	r24, Y+5	; 0x05
     5de:	9e 81       	ldd	r25, Y+6	; 0x06
     5e0:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <_ZN8odometer12updateSpeedsEv>
}
     5e4:	28 96       	adiw	r28, 0x08	; 8
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	f8 94       	cli
     5ea:	de bf       	out	0x3e, r29	; 62
     5ec:	0f be       	out	0x3f, r0	; 63
     5ee:	cd bf       	out	0x3d, r28	; 61
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	08 95       	ret

000005f6 <_ZN8odometer16resetSpeedPointsEv>:

//The speed went to zero. Need to set flag for startup condition on new speed point, set currentSpeed to 0 so that if we are updating screen
//it won't display old speed, but 0. Reset all speed points.
void odometer::resetSpeedPoints(){
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	00 d0       	rcall	.+0      	; 0x5fc <_ZN8odometer16resetSpeedPointsEv+0x6>
     5fc:	00 d0       	rcall	.+0      	; 0x5fe <_ZN8odometer16resetSpeedPointsEv+0x8>
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
     602:	9c 83       	std	Y+4, r25	; 0x04
     604:	8b 83       	std	Y+3, r24	; 0x03
	noSpeed=fTrue;
     606:	8b 81       	ldd	r24, Y+3	; 0x03
     608:	9c 81       	ldd	r25, Y+4	; 0x04
     60a:	21 e0       	ldi	r18, 0x01	; 1
     60c:	fc 01       	movw	r30, r24
     60e:	21 ab       	sts	0x51, r18
	currentSpeed=0;
     610:	2b 81       	ldd	r18, Y+3	; 0x03
     612:	3c 81       	ldd	r19, Y+4	; 0x04
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	dc 01       	movw	r26, r24
     61a:	f9 01       	movw	r30, r18
     61c:	80 87       	std	Z+8, r24	; 0x08
     61e:	91 87       	std	Z+9, r25	; 0x09
     620:	a2 87       	std	Z+10, r26	; 0x0a
     622:	b3 87       	std	Z+11, r27	; 0x0b
	for (volatile int i=0; i<10; i++){
     624:	1a 82       	std	Y+2, r1	; 0x02
     626:	19 82       	std	Y+1, r1	; 0x01
     628:	11 c0       	rjmp	.+34     	; 0x64c <_ZN8odometer16resetSpeedPointsEv+0x56>
		dataPoints[i]=0;
     62a:	89 81       	ldd	r24, Y+1	; 0x01
     62c:	9a 81       	ldd	r25, Y+2	; 0x02
     62e:	2b 81       	ldd	r18, Y+3	; 0x03
     630:	3c 81       	ldd	r19, Y+4	; 0x04
     632:	0d 96       	adiw	r24, 0x0d	; 13
     634:	88 0f       	add	r24, r24
     636:	99 1f       	adc	r25, r25
     638:	82 0f       	add	r24, r18
     63a:	93 1f       	adc	r25, r19
     63c:	fc 01       	movw	r30, r24
     63e:	11 82       	std	Z+1, r1	; 0x01
     640:	10 82       	st	Z, r1
//The speed went to zero. Need to set flag for startup condition on new speed point, set currentSpeed to 0 so that if we are updating screen
//it won't display old speed, but 0. Reset all speed points.
void odometer::resetSpeedPoints(){
	noSpeed=fTrue;
	currentSpeed=0;
	for (volatile int i=0; i<10; i++){
     642:	89 81       	ldd	r24, Y+1	; 0x01
     644:	9a 81       	ldd	r25, Y+2	; 0x02
     646:	01 96       	adiw	r24, 0x01	; 1
     648:	9a 83       	std	Y+2, r25	; 0x02
     64a:	89 83       	std	Y+1, r24	; 0x01
     64c:	89 81       	ldd	r24, Y+1	; 0x01
     64e:	9a 81       	ldd	r25, Y+2	; 0x02
     650:	21 e0       	ldi	r18, 0x01	; 1
     652:	8a 30       	cpi	r24, 0x0A	; 10
     654:	91 05       	cpc	r25, r1
     656:	0c f0       	brlt	.+2      	; 0x65a <_ZN8odometer16resetSpeedPointsEv+0x64>
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	22 23       	and	r18, r18
     65c:	31 f7       	brne	.-52     	; 0x62a <_ZN8odometer16resetSpeedPointsEv+0x34>
		dataPoints[i]=0;
	}
}
     65e:	0f 90       	pop	r0
     660:	0f 90       	pop	r0
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	08 95       	ret

0000066c <_ZN8odometer12setWheelSizeEd>:

//Updating wheel size. Don't reset anything, but initialize first run to eliminate old speeds. 
void odometer::setWheelSize(double wheelSize){
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	00 d0       	rcall	.+0      	; 0x672 <_ZN8odometer12setWheelSizeEd+0x6>
     672:	00 d0       	rcall	.+0      	; 0x674 <_ZN8odometer12setWheelSizeEd+0x8>
     674:	00 d0       	rcall	.+0      	; 0x676 <_ZN8odometer12setWheelSizeEd+0xa>
     676:	cd b7       	in	r28, 0x3d	; 61
     678:	de b7       	in	r29, 0x3e	; 62
     67a:	9a 83       	std	Y+2, r25	; 0x02
     67c:	89 83       	std	Y+1, r24	; 0x01
     67e:	4b 83       	std	Y+3, r20	; 0x03
     680:	5c 83       	std	Y+4, r21	; 0x04
     682:	6d 83       	std	Y+5, r22	; 0x05
     684:	7e 83       	std	Y+6, r23	; 0x06
	firstRun=fTrue;
     686:	89 81       	ldd	r24, Y+1	; 0x01
     688:	9a 81       	ldd	r25, Y+2	; 0x02
     68a:	21 e0       	ldi	r18, 0x01	; 1
     68c:	fc 01       	movw	r30, r24
     68e:	20 ab       	sts	0x50, r18
	this->wheelSize=wheelSize;
     690:	29 81       	ldd	r18, Y+1	; 0x01
     692:	3a 81       	ldd	r19, Y+2	; 0x02
     694:	8b 81       	ldd	r24, Y+3	; 0x03
     696:	9c 81       	ldd	r25, Y+4	; 0x04
     698:	ad 81       	ldd	r26, Y+5	; 0x05
     69a:	be 81       	ldd	r27, Y+6	; 0x06
     69c:	f9 01       	movw	r30, r18
     69e:	84 87       	std	Z+12, r24	; 0x0c
     6a0:	95 87       	std	Z+13, r25	; 0x0d
     6a2:	a6 87       	std	Z+14, r26	; 0x0e
     6a4:	b7 87       	std	Z+15, r27	; 0x0f
}
     6a6:	26 96       	adiw	r28, 0x06	; 6
     6a8:	0f b6       	in	r0, 0x3f	; 63
     6aa:	f8 94       	cli
     6ac:	de bf       	out	0x3e, r29	; 62
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	cd bf       	out	0x3d, r28	; 61
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	08 95       	ret

000006b8 <_ZN8odometer12updateSpeedsEv>:

//Just got another data point, update all the statistics
void odometer::updateSpeeds(){
     6b8:	af 92       	push	r10
     6ba:	bf 92       	push	r11
     6bc:	cf 92       	push	r12
     6be:	df 92       	push	r13
     6c0:	ef 92       	push	r14
     6c2:	ff 92       	push	r15
     6c4:	0f 93       	push	r16
     6c6:	1f 93       	push	r17
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	00 d0       	rcall	.+0      	; 0x6ce <_ZN8odometer12updateSpeedsEv+0x16>
     6ce:	00 d0       	rcall	.+0      	; 0x6d0 <_ZN8odometer12updateSpeedsEv+0x18>
     6d0:	00 d0       	rcall	.+0      	; 0x6d2 <_ZN8odometer12updateSpeedsEv+0x1a>
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
     6d6:	9e 83       	std	Y+6, r25	; 0x06
     6d8:	8d 83       	std	Y+5, r24	; 0x05

	//Update current speed
	unsigned int sum;
	for (volatile int i=0; i<10; i++){
     6da:	1c 82       	std	Y+4, r1	; 0x04
     6dc:	1b 82       	std	Y+3, r1	; 0x03
     6de:	17 c0       	rjmp	.+46     	; 0x70e <_ZN8odometer12updateSpeedsEv+0x56>
		sum += dataPoints[i];
     6e0:	8b 81       	ldd	r24, Y+3	; 0x03
     6e2:	9c 81       	ldd	r25, Y+4	; 0x04
     6e4:	2d 81       	ldd	r18, Y+5	; 0x05
     6e6:	3e 81       	ldd	r19, Y+6	; 0x06
     6e8:	0d 96       	adiw	r24, 0x0d	; 13
     6ea:	88 0f       	add	r24, r24
     6ec:	99 1f       	adc	r25, r25
     6ee:	82 0f       	add	r24, r18
     6f0:	93 1f       	adc	r25, r19
     6f2:	fc 01       	movw	r30, r24
     6f4:	80 81       	ld	r24, Z
     6f6:	91 81       	ldd	r25, Z+1	; 0x01
     6f8:	29 81       	ldd	r18, Y+1	; 0x01
     6fa:	3a 81       	ldd	r19, Y+2	; 0x02
     6fc:	82 0f       	add	r24, r18
     6fe:	93 1f       	adc	r25, r19
     700:	9a 83       	std	Y+2, r25	; 0x02
     702:	89 83       	std	Y+1, r24	; 0x01
//Just got another data point, update all the statistics
void odometer::updateSpeeds(){

	//Update current speed
	unsigned int sum;
	for (volatile int i=0; i<10; i++){
     704:	8b 81       	ldd	r24, Y+3	; 0x03
     706:	9c 81       	ldd	r25, Y+4	; 0x04
     708:	01 96       	adiw	r24, 0x01	; 1
     70a:	9c 83       	std	Y+4, r25	; 0x04
     70c:	8b 83       	std	Y+3, r24	; 0x03
     70e:	8b 81       	ldd	r24, Y+3	; 0x03
     710:	9c 81       	ldd	r25, Y+4	; 0x04
     712:	21 e0       	ldi	r18, 0x01	; 1
     714:	8a 30       	cpi	r24, 0x0A	; 10
     716:	91 05       	cpc	r25, r1
     718:	0c f0       	brlt	.+2      	; 0x71c <_ZN8odometer12updateSpeedsEv+0x64>
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	22 23       	and	r18, r18
     71e:	01 f7       	brne	.-64     	; 0x6e0 <_ZN8odometer12updateSpeedsEv+0x28>
		sum += dataPoints[i];
	}
	currentSpeed=10.0*SECONDS_IN_HOUR*wheelSize/(sum*TIMER1_CLOCK_sec);		//calculate and update currentSpeed.
     720:	8d 81       	ldd	r24, Y+5	; 0x05
     722:	9e 81       	ldd	r25, Y+6	; 0x06
     724:	fc 01       	movw	r30, r24
     726:	84 85       	ldd	r24, Z+12	; 0x0c
     728:	95 85       	ldd	r25, Z+13	; 0x0d
     72a:	a6 85       	ldd	r26, Z+14	; 0x0e
     72c:	b7 85       	ldd	r27, Z+15	; 0x0f
     72e:	bc 01       	movw	r22, r24
     730:	cd 01       	movw	r24, r26
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	30 ea       	ldi	r19, 0xA0	; 160
     736:	4c e0       	ldi	r20, 0x0C	; 12
     738:	57 e4       	ldi	r21, 0x47	; 71
     73a:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <__mulsf3>
     73e:	dc 01       	movw	r26, r24
     740:	cb 01       	movw	r24, r22
     742:	7c 01       	movw	r14, r24
     744:	8d 01       	movw	r16, r26
     746:	89 81       	ldd	r24, Y+1	; 0x01
     748:	9a 81       	ldd	r25, Y+2	; 0x02
     74a:	cc 01       	movw	r24, r24
     74c:	a0 e0       	ldi	r26, 0x00	; 0
     74e:	b0 e0       	ldi	r27, 0x00	; 0
     750:	bc 01       	movw	r22, r24
     752:	cd 01       	movw	r24, r26
     754:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__floatunsisf>
     758:	dc 01       	movw	r26, r24
     75a:	cb 01       	movw	r24, r22
     75c:	bc 01       	movw	r22, r24
     75e:	cd 01       	movw	r24, r26
     760:	2d eb       	ldi	r18, 0xBD	; 189
     762:	37 e3       	ldi	r19, 0x37	; 55
     764:	46 e0       	ldi	r20, 0x06	; 6
     766:	58 e3       	ldi	r21, 0x38	; 56
     768:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <__mulsf3>
     76c:	dc 01       	movw	r26, r24
     76e:	cb 01       	movw	r24, r22
     770:	9c 01       	movw	r18, r24
     772:	ad 01       	movw	r20, r26
     774:	c8 01       	movw	r24, r16
     776:	b7 01       	movw	r22, r14
     778:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__divsf3>
     77c:	dc 01       	movw	r26, r24
     77e:	cb 01       	movw	r24, r22
     780:	2d 81       	ldd	r18, Y+5	; 0x05
     782:	3e 81       	ldd	r19, Y+6	; 0x06
     784:	f9 01       	movw	r30, r18
     786:	80 87       	std	Z+8, r24	; 0x08
     788:	91 87       	std	Z+9, r25	; 0x09
     78a:	a2 87       	std	Z+10, r26	; 0x0a
     78c:	b3 87       	std	Z+11, r27	; 0x0b
	
	//Update average speed
	__calculateSpeedWeight();
     78e:	8d 81       	ldd	r24, Y+5	; 0x05
     790:	9e 81       	ldd	r25, Y+6	; 0x06
     792:	fc 01       	movw	r30, r24
     794:	26 a5       	lds	r18, 0x66
     796:	37 a5       	lds	r19, 0x67
     798:	8d 81       	ldd	r24, Y+5	; 0x05
     79a:	9e 81       	ldd	r25, Y+6	; 0x06
     79c:	fc 01       	movw	r30, r24
     79e:	46 a5       	lds	r20, 0x66
     7a0:	57 a5       	lds	r21, 0x67
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	ba 01       	movw	r22, r20
     7a8:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__udivmodhi4>
     7ac:	ab 01       	movw	r20, r22
     7ae:	ca 01       	movw	r24, r20
     7b0:	a9 01       	movw	r20, r18
     7b2:	48 1b       	sub	r20, r24
     7b4:	59 0b       	sbc	r21, r25
     7b6:	ca 01       	movw	r24, r20
     7b8:	cc 01       	movw	r24, r24
     7ba:	a0 e0       	ldi	r26, 0x00	; 0
     7bc:	b0 e0       	ldi	r27, 0x00	; 0
     7be:	bc 01       	movw	r22, r24
     7c0:	cd 01       	movw	r24, r26
     7c2:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__floatunsisf>
     7c6:	dc 01       	movw	r26, r24
     7c8:	cb 01       	movw	r24, r22
     7ca:	2d 81       	ldd	r18, Y+5	; 0x05
     7cc:	3e 81       	ldd	r19, Y+6	; 0x06
     7ce:	f9 01       	movw	r30, r18
     7d0:	80 8b       	std	Z+16, r24	; 0x10
     7d2:	91 8b       	std	Z+17, r25	; 0x11
     7d4:	a2 8b       	std	Z+18, r26	; 0x12
     7d6:	b3 8b       	std	Z+19, r27	; 0x13
	aveSpeed=aveSpeed*speedWeight + currentSpeed/speedPoints;
     7d8:	8d 81       	ldd	r24, Y+5	; 0x05
     7da:	9e 81       	ldd	r25, Y+6	; 0x06
     7dc:	fc 01       	movw	r30, r24
     7de:	80 81       	ld	r24, Z
     7e0:	91 81       	ldd	r25, Z+1	; 0x01
     7e2:	a2 81       	ldd	r26, Z+2	; 0x02
     7e4:	b3 81       	ldd	r27, Z+3	; 0x03
     7e6:	2d 81       	ldd	r18, Y+5	; 0x05
     7e8:	3e 81       	ldd	r19, Y+6	; 0x06
     7ea:	f9 01       	movw	r30, r18
     7ec:	20 89       	ldd	r18, Z+16	; 0x10
     7ee:	31 89       	ldd	r19, Z+17	; 0x11
     7f0:	42 89       	ldd	r20, Z+18	; 0x12
     7f2:	53 89       	ldd	r21, Z+19	; 0x13
     7f4:	bc 01       	movw	r22, r24
     7f6:	cd 01       	movw	r24, r26
     7f8:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <__mulsf3>
     7fc:	dc 01       	movw	r26, r24
     7fe:	cb 01       	movw	r24, r22
     800:	7c 01       	movw	r14, r24
     802:	8d 01       	movw	r16, r26
     804:	8d 81       	ldd	r24, Y+5	; 0x05
     806:	9e 81       	ldd	r25, Y+6	; 0x06
     808:	fc 01       	movw	r30, r24
     80a:	a0 84       	ldd	r10, Z+8	; 0x08
     80c:	b1 84       	ldd	r11, Z+9	; 0x09
     80e:	c2 84       	ldd	r12, Z+10	; 0x0a
     810:	d3 84       	ldd	r13, Z+11	; 0x0b
     812:	8d 81       	ldd	r24, Y+5	; 0x05
     814:	9e 81       	ldd	r25, Y+6	; 0x06
     816:	fc 01       	movw	r30, r24
     818:	86 a5       	lds	r24, 0x66
     81a:	97 a5       	lds	r25, 0x67
     81c:	cc 01       	movw	r24, r24
     81e:	a0 e0       	ldi	r26, 0x00	; 0
     820:	b0 e0       	ldi	r27, 0x00	; 0
     822:	bc 01       	movw	r22, r24
     824:	cd 01       	movw	r24, r26
     826:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__floatunsisf>
     82a:	9b 01       	movw	r18, r22
     82c:	ac 01       	movw	r20, r24
     82e:	c6 01       	movw	r24, r12
     830:	b5 01       	movw	r22, r10
     832:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__divsf3>
     836:	dc 01       	movw	r26, r24
     838:	cb 01       	movw	r24, r22
     83a:	9c 01       	movw	r18, r24
     83c:	ad 01       	movw	r20, r26
     83e:	c8 01       	movw	r24, r16
     840:	b7 01       	movw	r22, r14
     842:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__addsf3>
     846:	dc 01       	movw	r26, r24
     848:	cb 01       	movw	r24, r22
     84a:	2d 81       	ldd	r18, Y+5	; 0x05
     84c:	3e 81       	ldd	r19, Y+6	; 0x06
     84e:	f9 01       	movw	r30, r18
     850:	80 83       	st	Z, r24
     852:	91 83       	std	Z+1, r25	; 0x01
     854:	a2 83       	std	Z+2, r26	; 0x02
     856:	b3 83       	std	Z+3, r27	; 0x03
}
     858:	26 96       	adiw	r28, 0x06	; 6
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	f8 94       	cli
     85e:	de bf       	out	0x3e, r29	; 62
     860:	0f be       	out	0x3f, r0	; 63
     862:	cd bf       	out	0x3d, r28	; 61
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	1f 91       	pop	r17
     86a:	0f 91       	pop	r16
     86c:	ff 90       	pop	r15
     86e:	ef 90       	pop	r14
     870:	df 90       	pop	r13
     872:	cf 90       	pop	r12
     874:	bf 90       	pop	r11
     876:	af 90       	pop	r10
     878:	08 95       	ret

0000087a <_ZN8odometer15getCurrentSpeedEv>:

//Get the current speed
double odometer::getCurrentSpeed(){
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	00 d0       	rcall	.+0      	; 0x880 <_ZN8odometer15getCurrentSpeedEv+0x6>
     880:	cd b7       	in	r28, 0x3d	; 61
     882:	de b7       	in	r29, 0x3e	; 62
     884:	9a 83       	std	Y+2, r25	; 0x02
     886:	89 83       	std	Y+1, r24	; 0x01
	return currentSpeed;
     888:	89 81       	ldd	r24, Y+1	; 0x01
     88a:	9a 81       	ldd	r25, Y+2	; 0x02
     88c:	fc 01       	movw	r30, r24
     88e:	80 85       	ldd	r24, Z+8	; 0x08
     890:	91 85       	ldd	r25, Z+9	; 0x09
     892:	a2 85       	ldd	r26, Z+10	; 0x0a
     894:	b3 85       	ldd	r27, Z+11	; 0x0b
}
     896:	bc 01       	movw	r22, r24
     898:	cd 01       	movw	r24, r26
     89a:	0f 90       	pop	r0
     89c:	0f 90       	pop	r0
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret

000008a4 <_ZN8odometer15getAverageSpeedEv>:

//Get the average speed
double odometer::getAverageSpeed(){
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	00 d0       	rcall	.+0      	; 0x8aa <_ZN8odometer15getAverageSpeedEv+0x6>
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62
     8ae:	9a 83       	std	Y+2, r25	; 0x02
     8b0:	89 83       	std	Y+1, r24	; 0x01
	return aveSpeed;
     8b2:	89 81       	ldd	r24, Y+1	; 0x01
     8b4:	9a 81       	ldd	r25, Y+2	; 0x02
     8b6:	fc 01       	movw	r30, r24
     8b8:	80 81       	ld	r24, Z
     8ba:	91 81       	ldd	r25, Z+1	; 0x01
     8bc:	a2 81       	ldd	r26, Z+2	; 0x02
     8be:	b3 81       	ldd	r27, Z+3	; 0x03
}
     8c0:	bc 01       	movw	r22, r24
     8c2:	cd 01       	movw	r24, r26
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	08 95       	ret

000008ce <_ZN8odometer11getDistanceEv>:

//Get the distance travelled thus far in miles 
double odometer::getDistance(){
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	00 d0       	rcall	.+0      	; 0x8d4 <_ZN8odometer11getDistanceEv+0x6>
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
     8d8:	9a 83       	std	Y+2, r25	; 0x02
     8da:	89 83       	std	Y+1, r24	; 0x01
	return distance;
     8dc:	89 81       	ldd	r24, Y+1	; 0x01
     8de:	9a 81       	ldd	r25, Y+2	; 0x02
     8e0:	fc 01       	movw	r30, r24
     8e2:	84 81       	ldd	r24, Z+4	; 0x04
     8e4:	95 81       	ldd	r25, Z+5	; 0x05
     8e6:	a6 81       	ldd	r26, Z+6	; 0x06
     8e8:	b7 81       	ldd	r27, Z+7	; 0x07
}
     8ea:	bc 01       	movw	r22, r24
     8ec:	cd 01       	movw	r24, r26
     8ee:	0f 90       	pop	r0
     8f0:	0f 90       	pop	r0
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	08 95       	ret

000008f8 <_ZN8odometer12getWheelSizeEv>:

double odometer::getWheelSize(){
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	00 d0       	rcall	.+0      	; 0x8fe <_ZN8odometer12getWheelSizeEv+0x6>
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
     902:	9a 83       	std	Y+2, r25	; 0x02
     904:	89 83       	std	Y+1, r24	; 0x01
	return wheelSize;
     906:	89 81       	ldd	r24, Y+1	; 0x01
     908:	9a 81       	ldd	r25, Y+2	; 0x02
     90a:	fc 01       	movw	r30, r24
     90c:	84 85       	ldd	r24, Z+12	; 0x0c
     90e:	95 85       	ldd	r25, Z+13	; 0x0d
     910:	a6 85       	ldd	r26, Z+14	; 0x0e
     912:	b7 85       	ldd	r27, Z+15	; 0x0f
}
     914:	bc 01       	movw	r22, r24
     916:	cd 01       	movw	r24, r26
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	08 95       	ret

00000922 <_ZN8odometer14getSpeedPointsEv>:
	
unsigned int odometer::getSpeedPoints(){
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	00 d0       	rcall	.+0      	; 0x928 <_ZN8odometer14getSpeedPointsEv+0x6>
     928:	cd b7       	in	r28, 0x3d	; 61
     92a:	de b7       	in	r29, 0x3e	; 62
     92c:	9a 83       	std	Y+2, r25	; 0x02
     92e:	89 83       	std	Y+1, r24	; 0x01
	return speedPoints;
     930:	89 81       	ldd	r24, Y+1	; 0x01
     932:	9a 81       	ldd	r25, Y+2	; 0x02
     934:	fc 01       	movw	r30, r24
     936:	86 a5       	lds	r24, 0x66
     938:	97 a5       	lds	r25, 0x67
}
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	08 95       	ret

00000944 <_ZN8odometer12getTotalTimeEjj>:

unsigned int odometer::getTotalTime(unsigned int eDate, unsigned int eTime){
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	00 d0       	rcall	.+0      	; 0x94a <_ZN8odometer12getTotalTimeEjj+0x6>
     94a:	00 d0       	rcall	.+0      	; 0x94c <_ZN8odometer12getTotalTimeEjj+0x8>
     94c:	00 d0       	rcall	.+0      	; 0x94e <_ZN8odometer12getTotalTimeEjj+0xa>
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
     952:	9a 83       	std	Y+2, r25	; 0x02
     954:	89 83       	std	Y+1, r24	; 0x01
     956:	7c 83       	std	Y+4, r23	; 0x04
     958:	6b 83       	std	Y+3, r22	; 0x03
     95a:	5e 83       	std	Y+6, r21	; 0x06
     95c:	4d 83       	std	Y+5, r20	; 0x05
	//Compute time between sDate/Time and eDate/Time, then add time elapsed.
	return timeElapsed;
     95e:	89 81       	ldd	r24, Y+1	; 0x01
     960:	9a 81       	ldd	r25, Y+2	; 0x02
     962:	fc 01       	movw	r30, r24
     964:	80 8d       	ldd	r24, Z+24	; 0x18
     966:	91 8d       	ldd	r25, Z+25	; 0x19
}
     968:	26 96       	adiw	r28, 0x06	; 6
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	f8 94       	cli
     96e:	de bf       	out	0x3e, r29	; 62
     970:	0f be       	out	0x3f, r0	; 63
     972:	cd bf       	out	0x3d, r28	; 61
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	08 95       	ret

0000097a <_ZN12heartMonitorC1Ev>:
		WORD rate[10];
		void addNewBeat();
		
};

heartMonitor::heartMonitor(){
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	00 d0       	rcall	.+0      	; 0x980 <_ZN12heartMonitorC1Ev+0x6>
     980:	cd b7       	in	r28, 0x3d	; 61
     982:	de b7       	in	r29, 0x3e	; 62
     984:	9a 83       	std	Y+2, r25	; 0x02
     986:	89 83       	std	Y+1, r24	; 0x01
	aveHR=0;
     988:	29 81       	ldd	r18, Y+1	; 0x01
     98a:	3a 81       	ldd	r19, Y+2	; 0x02
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	dc 01       	movw	r26, r24
     992:	f9 01       	movw	r30, r18
     994:	80 83       	st	Z, r24
     996:	91 83       	std	Z+1, r25	; 0x01
     998:	a2 83       	std	Z+2, r26	; 0x02
     99a:	b3 83       	std	Z+3, r27	; 0x03
	numReadings=0;
     99c:	89 81       	ldd	r24, Y+1	; 0x01
     99e:	9a 81       	ldd	r25, Y+2	; 0x02
     9a0:	fc 01       	movw	r30, r24
     9a2:	15 86       	std	Z+13, r1	; 0x0d
     9a4:	14 86       	std	Z+12, r1	; 0x0c
	__calculateHRWeight();
     9a6:	89 81       	ldd	r24, Y+1	; 0x01
     9a8:	9a 81       	ldd	r25, Y+2	; 0x02
     9aa:	fc 01       	movw	r30, r24
     9ac:	84 85       	ldd	r24, Z+12	; 0x0c
     9ae:	95 85       	ldd	r25, Z+13	; 0x0d
     9b0:	01 97       	sbiw	r24, 0x01	; 1
     9b2:	29 81       	ldd	r18, Y+1	; 0x01
     9b4:	3a 81       	ldd	r19, Y+2	; 0x02
     9b6:	f9 01       	movw	r30, r18
     9b8:	24 85       	ldd	r18, Z+12	; 0x0c
     9ba:	35 85       	ldd	r19, Z+13	; 0x0d
     9bc:	b9 01       	movw	r22, r18
     9be:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__udivmodhi4>
     9c2:	9b 01       	movw	r18, r22
     9c4:	c9 01       	movw	r24, r18
     9c6:	cc 01       	movw	r24, r24
     9c8:	a0 e0       	ldi	r26, 0x00	; 0
     9ca:	b0 e0       	ldi	r27, 0x00	; 0
     9cc:	bc 01       	movw	r22, r24
     9ce:	cd 01       	movw	r24, r26
     9d0:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__floatunsisf>
     9d4:	dc 01       	movw	r26, r24
     9d6:	cb 01       	movw	r24, r22
     9d8:	29 81       	ldd	r18, Y+1	; 0x01
     9da:	3a 81       	ldd	r19, Y+2	; 0x02
     9dc:	f9 01       	movw	r30, r18
     9de:	80 87       	std	Z+8, r24	; 0x08
     9e0:	91 87       	std	Z+9, r25	; 0x09
     9e2:	a2 87       	std	Z+10, r26	; 0x0a
     9e4:	b3 87       	std	Z+11, r27	; 0x0b
	resetMonitor();
     9e6:	89 81       	ldd	r24, Y+1	; 0x01
     9e8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ea:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <_ZN12heartMonitor12resetMonitorEv>
}
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	08 95       	ret

000009f8 <_ZN12heartMonitor12resetMonitorEv>:

//Resets everythin except number of readings and aveHR
void heartMonitor::resetMonitor(){
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	00 d0       	rcall	.+0      	; 0x9fe <_ZN12heartMonitor12resetMonitorEv+0x6>
     9fe:	00 d0       	rcall	.+0      	; 0xa00 <_ZN12heartMonitor12resetMonitorEv+0x8>
     a00:	cd b7       	in	r28, 0x3d	; 61
     a02:	de b7       	in	r29, 0x3e	; 62
     a04:	9c 83       	std	Y+4, r25	; 0x04
     a06:	8b 83       	std	Y+3, r24	; 0x03
	currentHR=0;
     a08:	2b 81       	ldd	r18, Y+3	; 0x03
     a0a:	3c 81       	ldd	r19, Y+4	; 0x04
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	dc 01       	movw	r26, r24
     a12:	f9 01       	movw	r30, r18
     a14:	84 83       	std	Z+4, r24	; 0x04
     a16:	95 83       	std	Z+5, r25	; 0x05
     a18:	a6 83       	std	Z+6, r26	; 0x06
     a1a:	b7 83       	std	Z+7, r27	; 0x07
	pulseThresh=512;
     a1c:	8b 81       	ldd	r24, Y+3	; 0x03
     a1e:	9c 81       	ldd	r25, Y+4	; 0x04
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	32 e0       	ldi	r19, 0x02	; 2
     a24:	fc 01       	movw	r30, r24
     a26:	33 8b       	std	Z+19, r19	; 0x13
     a28:	22 8b       	std	Z+18, r18	; 0x12
	peak=512;
     a2a:	8b 81       	ldd	r24, Y+3	; 0x03
     a2c:	9c 81       	ldd	r25, Y+4	; 0x04
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	32 e0       	ldi	r19, 0x02	; 2
     a32:	fc 01       	movw	r30, r24
     a34:	35 8b       	std	Z+21, r19	; 0x15
     a36:	24 8b       	std	Z+20, r18	; 0x14
	trough=512;
     a38:	8b 81       	ldd	r24, Y+3	; 0x03
     a3a:	9c 81       	ldd	r25, Y+4	; 0x04
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	32 e0       	ldi	r19, 0x02	; 2
     a40:	fc 01       	movw	r30, r24
     a42:	37 8b       	std	Z+23, r19	; 0x17
     a44:	26 8b       	std	Z+22, r18	; 0x16
	firstBeat=fTrue;
     a46:	8b 81       	ldd	r24, Y+3	; 0x03
     a48:	9c 81       	ldd	r25, Y+4	; 0x04
     a4a:	21 e0       	ldi	r18, 0x01	; 1
     a4c:	fc 01       	movw	r30, r24
     a4e:	20 8f       	std	Z+24, r18	; 0x18
	secondBeat=fTrue;
     a50:	8b 81       	ldd	r24, Y+3	; 0x03
     a52:	9c 81       	ldd	r25, Y+4	; 0x04
     a54:	21 e0       	ldi	r18, 0x01	; 1
     a56:	fc 01       	movw	r30, r24
     a58:	21 8f       	std	Z+25, r18	; 0x19
	pulse=fFalse;
     a5a:	8b 81       	ldd	r24, Y+3	; 0x03
     a5c:	9c 81       	ldd	r25, Y+4	; 0x04
     a5e:	fc 01       	movw	r30, r24
     a60:	12 8e       	std	Z+26, r1	; 0x1a
	timeBetweenPoints=0;
     a62:	8b 81       	ldd	r24, Y+3	; 0x03
     a64:	9c 81       	ldd	r25, Y+4	; 0x04
     a66:	fc 01       	movw	r30, r24
     a68:	17 86       	std	Z+15, r1	; 0x0f
     a6a:	16 86       	std	Z+14, r1	; 0x0e
	lastInterval=0;
     a6c:	8b 81       	ldd	r24, Y+3	; 0x03
     a6e:	9c 81       	ldd	r25, Y+4	; 0x04
     a70:	fc 01       	movw	r30, r24
     a72:	11 8a       	std	Z+17, r1	; 0x11
     a74:	10 8a       	std	Z+16, r1	; 0x10
	for (int i=0; i< 10; i++){
     a76:	1a 82       	std	Y+2, r1	; 0x02
     a78:	19 82       	std	Y+1, r1	; 0x01
     a7a:	11 c0       	rjmp	.+34     	; 0xa9e <_ZN12heartMonitor12resetMonitorEv+0xa6>
		rate[i]=0;
     a7c:	2b 81       	ldd	r18, Y+3	; 0x03
     a7e:	3c 81       	ldd	r19, Y+4	; 0x04
     a80:	89 81       	ldd	r24, Y+1	; 0x01
     a82:	9a 81       	ldd	r25, Y+2	; 0x02
     a84:	88 0f       	add	r24, r24
     a86:	99 1f       	adc	r25, r25
     a88:	82 0f       	add	r24, r18
     a8a:	93 1f       	adc	r25, r19
     a8c:	4b 96       	adiw	r24, 0x1b	; 27
     a8e:	fc 01       	movw	r30, r24
     a90:	11 82       	std	Z+1, r1	; 0x01
     a92:	10 82       	st	Z, r1
	firstBeat=fTrue;
	secondBeat=fTrue;
	pulse=fFalse;
	timeBetweenPoints=0;
	lastInterval=0;
	for (int i=0; i< 10; i++){
     a94:	89 81       	ldd	r24, Y+1	; 0x01
     a96:	9a 81       	ldd	r25, Y+2	; 0x02
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	9a 83       	std	Y+2, r25	; 0x02
     a9c:	89 83       	std	Y+1, r24	; 0x01
     a9e:	21 e0       	ldi	r18, 0x01	; 1
     aa0:	89 81       	ldd	r24, Y+1	; 0x01
     aa2:	9a 81       	ldd	r25, Y+2	; 0x02
     aa4:	8a 30       	cpi	r24, 0x0A	; 10
     aa6:	91 05       	cpc	r25, r1
     aa8:	0c f0       	brlt	.+2      	; 0xaac <_ZN12heartMonitor12resetMonitorEv+0xb4>
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	22 23       	and	r18, r18
     aae:	31 f7       	brne	.-52     	; 0xa7c <_ZN12heartMonitor12resetMonitorEv+0x84>
		rate[i]=0;
	}
}
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	0f 90       	pop	r0
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	08 95       	ret

00000abe <_ZN12heartMonitor15setHeartMonitorEdj>:

void heartMonitor::setHeartMonitor(double aveHR, unsigned int numReadings){
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	cd b7       	in	r28, 0x3d	; 61
     ac4:	de b7       	in	r29, 0x3e	; 62
     ac6:	28 97       	sbiw	r28, 0x08	; 8
     ac8:	0f b6       	in	r0, 0x3f	; 63
     aca:	f8 94       	cli
     acc:	de bf       	out	0x3e, r29	; 62
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	cd bf       	out	0x3d, r28	; 61
     ad2:	9a 83       	std	Y+2, r25	; 0x02
     ad4:	89 83       	std	Y+1, r24	; 0x01
     ad6:	4b 83       	std	Y+3, r20	; 0x03
     ad8:	5c 83       	std	Y+4, r21	; 0x04
     ada:	6d 83       	std	Y+5, r22	; 0x05
     adc:	7e 83       	std	Y+6, r23	; 0x06
     ade:	38 87       	std	Y+8, r19	; 0x08
     ae0:	2f 83       	std	Y+7, r18	; 0x07
	this->aveHR=aveHR;
     ae2:	29 81       	ldd	r18, Y+1	; 0x01
     ae4:	3a 81       	ldd	r19, Y+2	; 0x02
     ae6:	8b 81       	ldd	r24, Y+3	; 0x03
     ae8:	9c 81       	ldd	r25, Y+4	; 0x04
     aea:	ad 81       	ldd	r26, Y+5	; 0x05
     aec:	be 81       	ldd	r27, Y+6	; 0x06
     aee:	f9 01       	movw	r30, r18
     af0:	80 83       	st	Z, r24
     af2:	91 83       	std	Z+1, r25	; 0x01
     af4:	a2 83       	std	Z+2, r26	; 0x02
     af6:	b3 83       	std	Z+3, r27	; 0x03
	this->numReadings=numReadings;
     af8:	89 81       	ldd	r24, Y+1	; 0x01
     afa:	9a 81       	ldd	r25, Y+2	; 0x02
     afc:	2f 81       	ldd	r18, Y+7	; 0x07
     afe:	38 85       	ldd	r19, Y+8	; 0x08
     b00:	fc 01       	movw	r30, r24
     b02:	35 87       	std	Z+13, r19	; 0x0d
     b04:	24 87       	std	Z+12, r18	; 0x0c
	resetMonitor();
     b06:	89 81       	ldd	r24, Y+1	; 0x01
     b08:	9a 81       	ldd	r25, Y+2	; 0x02
     b0a:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <_ZN12heartMonitor12resetMonitorEv>
}
     b0e:	28 96       	adiw	r28, 0x08	; 8
     b10:	0f b6       	in	r0, 0x3f	; 63
     b12:	f8 94       	cli
     b14:	de bf       	out	0x3e, r29	; 62
     b16:	0f be       	out	0x3f, r0	; 63
     b18:	cd bf       	out	0x3d, r28	; 61
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	08 95       	ret

00000b20 <_ZN12heartMonitor8setAveHREd>:

void heartMonitor::setAveHR(double aveHR){
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	00 d0       	rcall	.+0      	; 0xb26 <_ZN12heartMonitor8setAveHREd+0x6>
     b26:	00 d0       	rcall	.+0      	; 0xb28 <_ZN12heartMonitor8setAveHREd+0x8>
     b28:	00 d0       	rcall	.+0      	; 0xb2a <_ZN12heartMonitor8setAveHREd+0xa>
     b2a:	cd b7       	in	r28, 0x3d	; 61
     b2c:	de b7       	in	r29, 0x3e	; 62
     b2e:	9a 83       	std	Y+2, r25	; 0x02
     b30:	89 83       	std	Y+1, r24	; 0x01
     b32:	4b 83       	std	Y+3, r20	; 0x03
     b34:	5c 83       	std	Y+4, r21	; 0x04
     b36:	6d 83       	std	Y+5, r22	; 0x05
     b38:	7e 83       	std	Y+6, r23	; 0x06
	this->aveHR=aveHR;
     b3a:	29 81       	ldd	r18, Y+1	; 0x01
     b3c:	3a 81       	ldd	r19, Y+2	; 0x02
     b3e:	8b 81       	ldd	r24, Y+3	; 0x03
     b40:	9c 81       	ldd	r25, Y+4	; 0x04
     b42:	ad 81       	ldd	r26, Y+5	; 0x05
     b44:	be 81       	ldd	r27, Y+6	; 0x06
     b46:	f9 01       	movw	r30, r18
     b48:	80 83       	st	Z, r24
     b4a:	91 83       	std	Z+1, r25	; 0x01
     b4c:	a2 83       	std	Z+2, r26	; 0x02
     b4e:	b3 83       	std	Z+3, r27	; 0x03
}
     b50:	26 96       	adiw	r28, 0x06	; 6
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	f8 94       	cli
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	cd bf       	out	0x3d, r28	; 61
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	08 95       	ret

00000b62 <_ZN12heartMonitor14setNumReadingsEj>:

void heartMonitor::setNumReadings(unsigned int numReadings){
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	00 d0       	rcall	.+0      	; 0xb68 <_ZN12heartMonitor14setNumReadingsEj+0x6>
     b68:	00 d0       	rcall	.+0      	; 0xb6a <_ZN12heartMonitor14setNumReadingsEj+0x8>
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	9a 83       	std	Y+2, r25	; 0x02
     b70:	89 83       	std	Y+1, r24	; 0x01
     b72:	7c 83       	std	Y+4, r23	; 0x04
     b74:	6b 83       	std	Y+3, r22	; 0x03
	this->numReadings=numReadings;
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	9a 81       	ldd	r25, Y+2	; 0x02
     b7a:	2b 81       	ldd	r18, Y+3	; 0x03
     b7c:	3c 81       	ldd	r19, Y+4	; 0x04
     b7e:	fc 01       	movw	r30, r24
     b80:	35 87       	std	Z+13, r19	; 0x0d
     b82:	24 87       	std	Z+12, r18	; 0x0c
}
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	08 95       	ret

00000b92 <_ZN12heartMonitor12getCurrentHREv>:

double heartMonitor::getCurrentHR(){
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	00 d0       	rcall	.+0      	; 0xb98 <_ZN12heartMonitor12getCurrentHREv+0x6>
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	9a 83       	std	Y+2, r25	; 0x02
     b9e:	89 83       	std	Y+1, r24	; 0x01
	return currentHR;
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	9a 81       	ldd	r25, Y+2	; 0x02
     ba4:	fc 01       	movw	r30, r24
     ba6:	84 81       	ldd	r24, Z+4	; 0x04
     ba8:	95 81       	ldd	r25, Z+5	; 0x05
     baa:	a6 81       	ldd	r26, Z+6	; 0x06
     bac:	b7 81       	ldd	r27, Z+7	; 0x07
}
     bae:	bc 01       	movw	r22, r24
     bb0:	cd 01       	movw	r24, r26
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	08 95       	ret

00000bbc <_ZN12heartMonitor8getAveHREv>:

double heartMonitor::getAveHR(){
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	00 d0       	rcall	.+0      	; 0xbc2 <_ZN12heartMonitor8getAveHREv+0x6>
     bc2:	cd b7       	in	r28, 0x3d	; 61
     bc4:	de b7       	in	r29, 0x3e	; 62
     bc6:	9a 83       	std	Y+2, r25	; 0x02
     bc8:	89 83       	std	Y+1, r24	; 0x01
	return aveHR;
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	9a 81       	ldd	r25, Y+2	; 0x02
     bce:	fc 01       	movw	r30, r24
     bd0:	80 81       	ld	r24, Z
     bd2:	91 81       	ldd	r25, Z+1	; 0x01
     bd4:	a2 81       	ldd	r26, Z+2	; 0x02
     bd6:	b3 81       	ldd	r27, Z+3	; 0x03
}
     bd8:	bc 01       	movw	r22, r24
     bda:	cd 01       	movw	r24, r26
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	08 95       	ret

00000be6 <_ZN12heartMonitor14getNumReadingsEv>:

unsigned int heartMonitor::getNumReadings(){
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	00 d0       	rcall	.+0      	; 0xbec <_ZN12heartMonitor14getNumReadingsEv+0x6>
     bec:	cd b7       	in	r28, 0x3d	; 61
     bee:	de b7       	in	r29, 0x3e	; 62
     bf0:	9a 83       	std	Y+2, r25	; 0x02
     bf2:	89 83       	std	Y+1, r24	; 0x01
	return numReadings;
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	9a 81       	ldd	r25, Y+2	; 0x02
     bf8:	fc 01       	movw	r30, r24
     bfa:	84 85       	ldd	r24, Z+12	; 0x0c
     bfc:	95 85       	ldd	r25, Z+13	; 0x0d
}
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	08 95       	ret

00000c08 <_ZN12heartMonitor11newHRSampleEjj>:

void heartMonitor::newHRSample(WORD adcReading, unsigned int timeSinceLast){
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	00 d0       	rcall	.+0      	; 0xc0e <_ZN12heartMonitor11newHRSampleEjj+0x6>
     c0e:	00 d0       	rcall	.+0      	; 0xc10 <_ZN12heartMonitor11newHRSampleEjj+0x8>
     c10:	00 d0       	rcall	.+0      	; 0xc12 <_ZN12heartMonitor11newHRSampleEjj+0xa>
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	9a 83       	std	Y+2, r25	; 0x02
     c18:	89 83       	std	Y+1, r24	; 0x01
     c1a:	7c 83       	std	Y+4, r23	; 0x04
     c1c:	6b 83       	std	Y+3, r22	; 0x03
     c1e:	5e 83       	std	Y+6, r21	; 0x06
     c20:	4d 83       	std	Y+5, r20	; 0x05
	//Update timeBetweenPoints
	timeBetweenPoints+=timeSinceLast;
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	9a 81       	ldd	r25, Y+2	; 0x02
     c26:	dc 01       	movw	r26, r24
     c28:	1e 96       	adiw	r26, 0x0e	; 14
     c2a:	2d 91       	ld	r18, X+
     c2c:	3c 91       	ld	r19, X
     c2e:	1f 97       	sbiw	r26, 0x0f	; 15
     c30:	8d 81       	ldd	r24, Y+5	; 0x05
     c32:	9e 81       	ldd	r25, Y+6	; 0x06
     c34:	28 0f       	add	r18, r24
     c36:	39 1f       	adc	r19, r25
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	9a 81       	ldd	r25, Y+2	; 0x02
     c3c:	fc 01       	movw	r30, r24
     c3e:	37 87       	std	Z+15, r19	; 0x0f
     c40:	26 87       	std	Z+14, r18	; 0x0e
	
	//Adjust Peak and Trough Accordingly
	if (adcReading < pulseThresh && timeBetweenPoints > (lastInterval/5)*3){		//adcReadings less than pulseThresh, time inbetween is more than last interval * 3/5
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	9a 81       	ldd	r25, Y+2	; 0x02
     c46:	dc 01       	movw	r26, r24
     c48:	52 96       	adiw	r26, 0x12	; 18
     c4a:	2d 91       	ld	r18, X+
     c4c:	3c 91       	ld	r19, X
     c4e:	53 97       	sbiw	r26, 0x13	; 19
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	9c 81       	ldd	r25, Y+4	; 0x04
     c54:	82 17       	cp	r24, r18
     c56:	93 07       	cpc	r25, r19
     c58:	08 f0       	brcs	.+2      	; 0xc5c <_ZN12heartMonitor11newHRSampleEjj+0x54>
     c5a:	4c c0       	rjmp	.+152    	; 0xcf4 <_ZN12heartMonitor11newHRSampleEjj+0xec>
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
     c5e:	9a 81       	ldd	r25, Y+2	; 0x02
     c60:	dc 01       	movw	r26, r24
     c62:	1e 96       	adiw	r26, 0x0e	; 14
     c64:	ed 91       	ld	r30, X+
     c66:	fc 91       	ld	r31, X
     c68:	1f 97       	sbiw	r26, 0x0f	; 15
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	9a 81       	ldd	r25, Y+2	; 0x02
     c6e:	dc 01       	movw	r26, r24
     c70:	50 96       	adiw	r26, 0x10	; 16
     c72:	8d 91       	ld	r24, X+
     c74:	9c 91       	ld	r25, X
     c76:	51 97       	sbiw	r26, 0x11	; 17
     c78:	25 e0       	ldi	r18, 0x05	; 5
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	b9 01       	movw	r22, r18
     c7e:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__udivmodhi4>
     c82:	9b 01       	movw	r18, r22
     c84:	c9 01       	movw	r24, r18
     c86:	88 0f       	add	r24, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	82 0f       	add	r24, r18
     c8c:	93 1f       	adc	r25, r19
     c8e:	8e 17       	cp	r24, r30
     c90:	9f 07       	cpc	r25, r31
     c92:	80 f5       	brcc	.+96     	; 0xcf4 <_ZN12heartMonitor11newHRSampleEjj+0xec>
		if (adcReading < trough){
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	9a 81       	ldd	r25, Y+2	; 0x02
     c98:	fc 01       	movw	r30, r24
     c9a:	26 89       	ldd	r18, Z+22	; 0x16
     c9c:	37 89       	ldd	r19, Z+23	; 0x17
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	9c 81       	ldd	r25, Y+4	; 0x04
     ca2:	82 17       	cp	r24, r18
     ca4:	93 07       	cpc	r25, r19
     ca6:	48 f4       	brcc	.+18     	; 0xcba <_ZN12heartMonitor11newHRSampleEjj+0xb2>
			trough = adcReading;
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	9a 81       	ldd	r25, Y+2	; 0x02
     cac:	2b 81       	ldd	r18, Y+3	; 0x03
     cae:	3c 81       	ldd	r19, Y+4	; 0x04
     cb0:	dc 01       	movw	r26, r24
     cb2:	57 96       	adiw	r26, 0x17	; 23
     cb4:	3c 93       	st	X, r19
     cb6:	2e 93       	st	-X, r18
     cb8:	56 97       	sbiw	r26, 0x16	; 22
		}		

		if (adcReading > pulseThresh && adcReading > peak){
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	9a 81       	ldd	r25, Y+2	; 0x02
     cbe:	fc 01       	movw	r30, r24
     cc0:	22 89       	ldd	r18, Z+18	; 0x12
     cc2:	33 89       	ldd	r19, Z+19	; 0x13
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	9c 81       	ldd	r25, Y+4	; 0x04
     cc8:	28 17       	cp	r18, r24
     cca:	39 07       	cpc	r19, r25
     ccc:	98 f4       	brcc	.+38     	; 0xcf4 <_ZN12heartMonitor11newHRSampleEjj+0xec>
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	9a 81       	ldd	r25, Y+2	; 0x02
     cd2:	dc 01       	movw	r26, r24
     cd4:	54 96       	adiw	r26, 0x14	; 20
     cd6:	2d 91       	ld	r18, X+
     cd8:	3c 91       	ld	r19, X
     cda:	55 97       	sbiw	r26, 0x15	; 21
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
     cde:	9c 81       	ldd	r25, Y+4	; 0x04
     ce0:	28 17       	cp	r18, r24
     ce2:	39 07       	cpc	r19, r25
     ce4:	38 f4       	brcc	.+14     	; 0xcf4 <_ZN12heartMonitor11newHRSampleEjj+0xec>
			peak = adcReading;
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	9a 81       	ldd	r25, Y+2	; 0x02
     cea:	2b 81       	ldd	r18, Y+3	; 0x03
     cec:	3c 81       	ldd	r19, Y+4	; 0x04
     cee:	fc 01       	movw	r30, r24
     cf0:	35 8b       	std	Z+21, r19	; 0x15
     cf2:	24 8b       	std	Z+20, r18	; 0x14
		}			
	}
	
	//If time since last read is more than 250, see if adcReading is above pulseThresh and time is good.
	if (timeBetweenPoints>250){
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	9a 81       	ldd	r25, Y+2	; 0x02
     cf8:	dc 01       	movw	r26, r24
     cfa:	1e 96       	adiw	r26, 0x0e	; 14
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	1f 97       	sbiw	r26, 0x0f	; 15
     d02:	8b 3f       	cpi	r24, 0xFB	; 251
     d04:	91 05       	cpc	r25, r1
     d06:	08 f4       	brcc	.+2      	; 0xd0a <_ZN12heartMonitor11newHRSampleEjj+0x102>
     d08:	45 c0       	rjmp	.+138    	; 0xd94 <_ZN12heartMonitor11newHRSampleEjj+0x18c>
		if ((adcReading > pulseThresh) && !pulse && (timeBetweenPoints>((lastInterval/5)*3)) && !firstBeat){	//send pulse high
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	9a 81       	ldd	r25, Y+2	; 0x02
     d0e:	fc 01       	movw	r30, r24
     d10:	22 89       	ldd	r18, Z+18	; 0x12
     d12:	33 89       	ldd	r19, Z+19	; 0x13
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	9c 81       	ldd	r25, Y+4	; 0x04
     d18:	28 17       	cp	r18, r24
     d1a:	39 07       	cpc	r19, r25
     d1c:	78 f5       	brcc	.+94     	; 0xd7c <_ZN12heartMonitor11newHRSampleEjj+0x174>
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	9a 81       	ldd	r25, Y+2	; 0x02
     d22:	dc 01       	movw	r26, r24
     d24:	5a 96       	adiw	r26, 0x1a	; 26
     d26:	8c 91       	ld	r24, X
     d28:	5a 97       	sbiw	r26, 0x1a	; 26
     d2a:	88 23       	and	r24, r24
     d2c:	39 f5       	brne	.+78     	; 0xd7c <_ZN12heartMonitor11newHRSampleEjj+0x174>
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	9a 81       	ldd	r25, Y+2	; 0x02
     d32:	dc 01       	movw	r26, r24
     d34:	1e 96       	adiw	r26, 0x0e	; 14
     d36:	ed 91       	ld	r30, X+
     d38:	fc 91       	ld	r31, X
     d3a:	1f 97       	sbiw	r26, 0x0f	; 15
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	9a 81       	ldd	r25, Y+2	; 0x02
     d40:	dc 01       	movw	r26, r24
     d42:	50 96       	adiw	r26, 0x10	; 16
     d44:	8d 91       	ld	r24, X+
     d46:	9c 91       	ld	r25, X
     d48:	51 97       	sbiw	r26, 0x11	; 17
     d4a:	25 e0       	ldi	r18, 0x05	; 5
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	b9 01       	movw	r22, r18
     d50:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__udivmodhi4>
     d54:	9b 01       	movw	r18, r22
     d56:	c9 01       	movw	r24, r18
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	82 0f       	add	r24, r18
     d5e:	93 1f       	adc	r25, r19
     d60:	8e 17       	cp	r24, r30
     d62:	9f 07       	cpc	r25, r31
     d64:	58 f4       	brcc	.+22     	; 0xd7c <_ZN12heartMonitor11newHRSampleEjj+0x174>
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	9a 81       	ldd	r25, Y+2	; 0x02
     d6a:	fc 01       	movw	r30, r24
     d6c:	80 8d       	ldd	r24, Z+24	; 0x18
     d6e:	88 23       	and	r24, r24
     d70:	29 f4       	brne	.+10     	; 0xd7c <_ZN12heartMonitor11newHRSampleEjj+0x174>
			addNewBeat();
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	9a 81       	ldd	r25, Y+2	; 0x02
     d76:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZN12heartMonitor10addNewBeatEv>
     d7a:	0c c0       	rjmp	.+24     	; 0xd94 <_ZN12heartMonitor11newHRSampleEjj+0x18c>
		} else if (firstBeat){
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
     d7e:	9a 81       	ldd	r25, Y+2	; 0x02
     d80:	dc 01       	movw	r26, r24
     d82:	58 96       	adiw	r26, 0x18	; 24
     d84:	8c 91       	ld	r24, X
     d86:	58 97       	sbiw	r26, 0x18	; 24
     d88:	88 23       	and	r24, r24
     d8a:	21 f0       	breq	.+8      	; 0xd94 <_ZN12heartMonitor11newHRSampleEjj+0x18c>
			firstBeat=fFalse;
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	9a 81       	ldd	r25, Y+2	; 0x02
     d90:	fc 01       	movw	r30, r24
     d92:	10 8e       	std	Z+24, r1	; 0x18
		}		
	}//end if N>250
				
	//No pulse after last interrupt/pulse, send adcReading low again, reset things.
	if (adcReading < pulseThresh && pulse){
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	9a 81       	ldd	r25, Y+2	; 0x02
     d98:	dc 01       	movw	r26, r24
     d9a:	52 96       	adiw	r26, 0x12	; 18
     d9c:	2d 91       	ld	r18, X+
     d9e:	3c 91       	ld	r19, X
     da0:	53 97       	sbiw	r26, 0x13	; 19
     da2:	8b 81       	ldd	r24, Y+3	; 0x03
     da4:	9c 81       	ldd	r25, Y+4	; 0x04
     da6:	82 17       	cp	r24, r18
     da8:	93 07       	cpc	r25, r19
     daa:	a8 f5       	brcc	.+106    	; 0xe16 <_ZN12heartMonitor11newHRSampleEjj+0x20e>
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	9a 81       	ldd	r25, Y+2	; 0x02
     db0:	fc 01       	movw	r30, r24
     db2:	82 8d       	ldd	r24, Z+26	; 0x1a
     db4:	88 23       	and	r24, r24
     db6:	79 f1       	breq	.+94     	; 0xe16 <_ZN12heartMonitor11newHRSampleEjj+0x20e>
		prtLED &= ~(1 << bnLED);
     db8:	88 e2       	ldi	r24, 0x28	; 40
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	28 e2       	ldi	r18, 0x28	; 40
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	d9 01       	movw	r26, r18
     dc2:	2c 91       	ld	r18, X
     dc4:	2f 7d       	andi	r18, 0xDF	; 223
     dc6:	fc 01       	movw	r30, r24
     dc8:	20 83       	st	Z, r18
		pulse=fFalse;
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	9a 81       	ldd	r25, Y+2	; 0x02
     dce:	dc 01       	movw	r26, r24
     dd0:	5a 96       	adiw	r26, 0x1a	; 26
     dd2:	1c 92       	st	X, r1
		pulseThresh=(peak-trough)/2+trough;
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	9a 81       	ldd	r25, Y+2	; 0x02
     dd8:	fc 01       	movw	r30, r24
     dda:	24 89       	ldd	r18, Z+20	; 0x14
     ddc:	35 89       	ldd	r19, Z+21	; 0x15
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	9a 81       	ldd	r25, Y+2	; 0x02
     de2:	dc 01       	movw	r26, r24
     de4:	56 96       	adiw	r26, 0x16	; 22
     de6:	8d 91       	ld	r24, X+
     de8:	9c 91       	ld	r25, X
     dea:	57 97       	sbiw	r26, 0x17	; 23
     dec:	f9 01       	movw	r30, r18
     dee:	e8 1b       	sub	r30, r24
     df0:	f9 0b       	sbc	r31, r25
     df2:	cf 01       	movw	r24, r30
     df4:	9c 01       	movw	r18, r24
     df6:	36 95       	lsr	r19
     df8:	27 95       	ror	r18
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	9a 81       	ldd	r25, Y+2	; 0x02
     dfe:	dc 01       	movw	r26, r24
     e00:	56 96       	adiw	r26, 0x16	; 22
     e02:	8d 91       	ld	r24, X+
     e04:	9c 91       	ld	r25, X
     e06:	57 97       	sbiw	r26, 0x17	; 23
     e08:	28 0f       	add	r18, r24
     e0a:	39 1f       	adc	r19, r25
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	9a 81       	ldd	r25, Y+2	; 0x02
     e10:	fc 01       	movw	r30, r24
     e12:	33 8b       	std	Z+19, r19	; 0x13
     e14:	22 8b       	std	Z+18, r18	; 0x12
		//peak=pulseThresh;
		//trough=pulseThresh;
	}
		
	//Wow, not getting a pulse, reset things
	if (timeBetweenPoints>=20000){
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	9a 81       	ldd	r25, Y+2	; 0x02
     e1a:	dc 01       	movw	r26, r24
     e1c:	1e 96       	adiw	r26, 0x0e	; 14
     e1e:	8d 91       	ld	r24, X+
     e20:	9c 91       	ld	r25, X
     e22:	1f 97       	sbiw	r26, 0x0f	; 15
     e24:	be e4       	ldi	r27, 0x4E	; 78
     e26:	80 32       	cpi	r24, 0x20	; 32
     e28:	9b 07       	cpc	r25, r27
     e2a:	20 f0       	brcs	.+8      	; 0xe34 <_ZN12heartMonitor11newHRSampleEjj+0x22c>
		//Print0("-TIMEOUT-");
		resetMonitor();
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	9a 81       	ldd	r25, Y+2	; 0x02
     e30:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <_ZN12heartMonitor12resetMonitorEv>
	}
}		
     e34:	26 96       	adiw	r28, 0x06	; 6
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	de bf       	out	0x3e, r29	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	cd bf       	out	0x3d, r28	; 61
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	08 95       	ret

00000e46 <_ZN12heartMonitor10addNewBeatEv>:

//There was a new beat, add it.
void heartMonitor::addNewBeat(){
     e46:	af 92       	push	r10
     e48:	bf 92       	push	r11
     e4a:	cf 92       	push	r12
     e4c:	df 92       	push	r13
     e4e:	ef 92       	push	r14
     e50:	ff 92       	push	r15
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	28 97       	sbiw	r28, 0x08	; 8
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	cd bf       	out	0x3d, r28	; 61
     e6a:	98 87       	std	Y+8, r25	; 0x08
     e6c:	8f 83       	std	Y+7, r24	; 0x07
	//Variables needed to calculate new HR
	volatile WORD runningTotal=0;
     e6e:	1e 82       	std	Y+6, r1	; 0x06
     e70:	1d 82       	std	Y+5, r1	; 0x05

	//Update number of readings
	numReadings++;
     e72:	8f 81       	ldd	r24, Y+7	; 0x07
     e74:	98 85       	ldd	r25, Y+8	; 0x08
     e76:	fc 01       	movw	r30, r24
     e78:	84 85       	ldd	r24, Z+12	; 0x0c
     e7a:	95 85       	ldd	r25, Z+13	; 0x0d
     e7c:	9c 01       	movw	r18, r24
     e7e:	2f 5f       	subi	r18, 0xFF	; 255
     e80:	3f 4f       	sbci	r19, 0xFF	; 255
     e82:	8f 81       	ldd	r24, Y+7	; 0x07
     e84:	98 85       	ldd	r25, Y+8	; 0x08
     e86:	fc 01       	movw	r30, r24
     e88:	35 87       	std	Z+13, r19	; 0x0d
     e8a:	24 87       	std	Z+12, r18	; 0x0c
	
	//Logic for new HR. Send pulse high, update the "lastInterval" variable. 
	pulse=fTrue;
     e8c:	8f 81       	ldd	r24, Y+7	; 0x07
     e8e:	98 85       	ldd	r25, Y+8	; 0x08
     e90:	21 e0       	ldi	r18, 0x01	; 1
     e92:	fc 01       	movw	r30, r24
     e94:	22 8f       	std	Z+26, r18	; 0x1a
	prtLED |= (1 << bnLED);		//turn LED on
     e96:	88 e2       	ldi	r24, 0x28	; 40
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	28 e2       	ldi	r18, 0x28	; 40
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	f9 01       	movw	r30, r18
     ea0:	20 81       	ld	r18, Z
     ea2:	20 62       	ori	r18, 0x20	; 32
     ea4:	fc 01       	movw	r30, r24
     ea6:	20 83       	st	Z, r18
	lastInterval=timeBetweenPoints;
     ea8:	8f 81       	ldd	r24, Y+7	; 0x07
     eaa:	98 85       	ldd	r25, Y+8	; 0x08
     eac:	fc 01       	movw	r30, r24
     eae:	26 85       	ldd	r18, Z+14	; 0x0e
     eb0:	37 85       	ldd	r19, Z+15	; 0x0f
     eb2:	8f 81       	ldd	r24, Y+7	; 0x07
     eb4:	98 85       	ldd	r25, Y+8	; 0x08
     eb6:	fc 01       	movw	r30, r24
     eb8:	31 8b       	std	Z+17, r19	; 0x11
     eba:	20 8b       	std	Z+16, r18	; 0x10
	timeBetweenPoints=0;
     ebc:	8f 81       	ldd	r24, Y+7	; 0x07
     ebe:	98 85       	ldd	r25, Y+8	; 0x08
     ec0:	fc 01       	movw	r30, r24
     ec2:	17 86       	std	Z+15, r1	; 0x0f
     ec4:	16 86       	std	Z+14, r1	; 0x0e
	//If second beat, everything needs to be initialized up to 10.
	if (secondBeat){
     ec6:	8f 81       	ldd	r24, Y+7	; 0x07
     ec8:	98 85       	ldd	r25, Y+8	; 0x08
     eca:	fc 01       	movw	r30, r24
     ecc:	81 8d       	ldd	r24, Z+25	; 0x19
     ece:	88 23       	and	r24, r24
     ed0:	91 f1       	breq	.+100    	; 0xf36 <_ZN12heartMonitor10addNewBeatEv+0xf0>
		secondBeat=fFalse;
     ed2:	8f 81       	ldd	r24, Y+7	; 0x07
     ed4:	98 85       	ldd	r25, Y+8	; 0x08
     ed6:	fc 01       	movw	r30, r24
     ed8:	11 8e       	std	Z+25, r1	; 0x19
		for (int i=0; i < 10; i++){
     eda:	1a 82       	std	Y+2, r1	; 0x02
     edc:	19 82       	std	Y+1, r1	; 0x01
     ede:	21 c0       	rjmp	.+66     	; 0xf22 <_ZN12heartMonitor10addNewBeatEv+0xdc>
			rate[i]=lastInterval;
     ee0:	8f 81       	ldd	r24, Y+7	; 0x07
     ee2:	98 85       	ldd	r25, Y+8	; 0x08
     ee4:	fc 01       	movw	r30, r24
     ee6:	20 89       	ldd	r18, Z+16	; 0x10
     ee8:	31 89       	ldd	r19, Z+17	; 0x11
     eea:	4f 81       	ldd	r20, Y+7	; 0x07
     eec:	58 85       	ldd	r21, Y+8	; 0x08
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	9a 81       	ldd	r25, Y+2	; 0x02
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	84 0f       	add	r24, r20
     ef8:	95 1f       	adc	r25, r21
     efa:	4b 96       	adiw	r24, 0x1b	; 27
     efc:	fc 01       	movw	r30, r24
     efe:	31 83       	std	Z+1, r19	; 0x01
     f00:	20 83       	st	Z, r18
			runningTotal+=lastInterval;
     f02:	8f 81       	ldd	r24, Y+7	; 0x07
     f04:	98 85       	ldd	r25, Y+8	; 0x08
     f06:	fc 01       	movw	r30, r24
     f08:	20 89       	ldd	r18, Z+16	; 0x10
     f0a:	31 89       	ldd	r19, Z+17	; 0x11
     f0c:	8d 81       	ldd	r24, Y+5	; 0x05
     f0e:	9e 81       	ldd	r25, Y+6	; 0x06
     f10:	82 0f       	add	r24, r18
     f12:	93 1f       	adc	r25, r19
     f14:	9e 83       	std	Y+6, r25	; 0x06
     f16:	8d 83       	std	Y+5, r24	; 0x05
	lastInterval=timeBetweenPoints;
	timeBetweenPoints=0;
	//If second beat, everything needs to be initialized up to 10.
	if (secondBeat){
		secondBeat=fFalse;
		for (int i=0; i < 10; i++){
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	9a 81       	ldd	r25, Y+2	; 0x02
     f1c:	01 96       	adiw	r24, 0x01	; 1
     f1e:	9a 83       	std	Y+2, r25	; 0x02
     f20:	89 83       	std	Y+1, r24	; 0x01
     f22:	21 e0       	ldi	r18, 0x01	; 1
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	9a 81       	ldd	r25, Y+2	; 0x02
     f28:	8a 30       	cpi	r24, 0x0A	; 10
     f2a:	91 05       	cpc	r25, r1
     f2c:	0c f0       	brlt	.+2      	; 0xf30 <_ZN12heartMonitor10addNewBeatEv+0xea>
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	22 23       	and	r18, r18
     f32:	b1 f6       	brne	.-84     	; 0xee0 <_ZN12heartMonitor10addNewBeatEv+0x9a>
     f34:	51 c0       	rjmp	.+162    	; 0xfd8 <_ZN12heartMonitor10addNewBeatEv+0x192>
			rate[i]=lastInterval;
			runningTotal+=lastInterval;
		}
	} else {
		for (int i=0; i< 9; i++){
     f36:	1c 82       	std	Y+4, r1	; 0x04
     f38:	1b 82       	std	Y+3, r1	; 0x03
     f3a:	30 c0       	rjmp	.+96     	; 0xf9c <_ZN12heartMonitor10addNewBeatEv+0x156>
			rate[i]=rate[i+1];
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	9c 81       	ldd	r25, Y+4	; 0x04
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	2f 81       	ldd	r18, Y+7	; 0x07
     f44:	38 85       	ldd	r19, Y+8	; 0x08
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	82 0f       	add	r24, r18
     f4c:	93 1f       	adc	r25, r19
     f4e:	4b 96       	adiw	r24, 0x1b	; 27
     f50:	fc 01       	movw	r30, r24
     f52:	20 81       	ld	r18, Z
     f54:	31 81       	ldd	r19, Z+1	; 0x01
     f56:	4f 81       	ldd	r20, Y+7	; 0x07
     f58:	58 85       	ldd	r21, Y+8	; 0x08
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	9c 81       	ldd	r25, Y+4	; 0x04
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	84 0f       	add	r24, r20
     f64:	95 1f       	adc	r25, r21
     f66:	4b 96       	adiw	r24, 0x1b	; 27
     f68:	fc 01       	movw	r30, r24
     f6a:	31 83       	std	Z+1, r19	; 0x01
     f6c:	20 83       	st	Z, r18
			runningTotal+=rate[i];
     f6e:	2f 81       	ldd	r18, Y+7	; 0x07
     f70:	38 85       	ldd	r19, Y+8	; 0x08
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	9c 81       	ldd	r25, Y+4	; 0x04
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	82 0f       	add	r24, r18
     f7c:	93 1f       	adc	r25, r19
     f7e:	4b 96       	adiw	r24, 0x1b	; 27
     f80:	fc 01       	movw	r30, r24
     f82:	20 81       	ld	r18, Z
     f84:	31 81       	ldd	r19, Z+1	; 0x01
     f86:	8d 81       	ldd	r24, Y+5	; 0x05
     f88:	9e 81       	ldd	r25, Y+6	; 0x06
     f8a:	82 0f       	add	r24, r18
     f8c:	93 1f       	adc	r25, r19
     f8e:	9e 83       	std	Y+6, r25	; 0x06
     f90:	8d 83       	std	Y+5, r24	; 0x05
		for (int i=0; i < 10; i++){
			rate[i]=lastInterval;
			runningTotal+=lastInterval;
		}
	} else {
		for (int i=0; i< 9; i++){
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	9c 81       	ldd	r25, Y+4	; 0x04
     f96:	01 96       	adiw	r24, 0x01	; 1
     f98:	9c 83       	std	Y+4, r25	; 0x04
     f9a:	8b 83       	std	Y+3, r24	; 0x03
     f9c:	21 e0       	ldi	r18, 0x01	; 1
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	9c 81       	ldd	r25, Y+4	; 0x04
     fa2:	89 30       	cpi	r24, 0x09	; 9
     fa4:	91 05       	cpc	r25, r1
     fa6:	0c f0       	brlt	.+2      	; 0xfaa <_ZN12heartMonitor10addNewBeatEv+0x164>
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	22 23       	and	r18, r18
     fac:	39 f6       	brne	.-114    	; 0xf3c <_ZN12heartMonitor10addNewBeatEv+0xf6>
			rate[i]=rate[i+1];
			runningTotal+=rate[i];
		}
		rate[9]=lastInterval;
     fae:	8f 81       	ldd	r24, Y+7	; 0x07
     fb0:	98 85       	ldd	r25, Y+8	; 0x08
     fb2:	fc 01       	movw	r30, r24
     fb4:	20 89       	ldd	r18, Z+16	; 0x10
     fb6:	31 89       	ldd	r19, Z+17	; 0x11
     fb8:	8f 81       	ldd	r24, Y+7	; 0x07
     fba:	98 85       	ldd	r25, Y+8	; 0x08
     fbc:	fc 01       	movw	r30, r24
     fbe:	36 a7       	lds	r19, 0x76
     fc0:	25 a7       	lds	r18, 0x75
		runningTotal+=lastInterval;
     fc2:	8f 81       	ldd	r24, Y+7	; 0x07
     fc4:	98 85       	ldd	r25, Y+8	; 0x08
     fc6:	fc 01       	movw	r30, r24
     fc8:	20 89       	ldd	r18, Z+16	; 0x10
     fca:	31 89       	ldd	r19, Z+17	; 0x11
     fcc:	8d 81       	ldd	r24, Y+5	; 0x05
     fce:	9e 81       	ldd	r25, Y+6	; 0x06
     fd0:	82 0f       	add	r24, r18
     fd2:	93 1f       	adc	r25, r19
     fd4:	9e 83       	std	Y+6, r25	; 0x06
     fd6:	8d 83       	std	Y+5, r24	; 0x05
	}
	
	//Divide by 10 for average over these data points
	runningTotal/=10;			//time it took all of them in milliseconds
     fd8:	8d 81       	ldd	r24, Y+5	; 0x05
     fda:	9e 81       	ldd	r25, Y+6	; 0x06
     fdc:	2a e0       	ldi	r18, 0x0A	; 10
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	b9 01       	movw	r22, r18
     fe2:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__udivmodhi4>
     fe6:	9b 01       	movw	r18, r22
     fe8:	c9 01       	movw	r24, r18
     fea:	9e 83       	std	Y+6, r25	; 0x06
     fec:	8d 83       	std	Y+5, r24	; 0x05
	currentHR=60000.0/runningTotal;		//60 seconds in minute, 1000ms in second. Gives BPM
     fee:	8d 81       	ldd	r24, Y+5	; 0x05
     ff0:	9e 81       	ldd	r25, Y+6	; 0x06
     ff2:	cc 01       	movw	r24, r24
     ff4:	a0 e0       	ldi	r26, 0x00	; 0
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	bc 01       	movw	r22, r24
     ffa:	cd 01       	movw	r24, r26
     ffc:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__floatunsisf>
    1000:	9b 01       	movw	r18, r22
    1002:	ac 01       	movw	r20, r24
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	70 e6       	ldi	r23, 0x60	; 96
    1008:	8a e6       	ldi	r24, 0x6A	; 106
    100a:	97 e4       	ldi	r25, 0x47	; 71
    100c:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__divsf3>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	2f 81       	ldd	r18, Y+7	; 0x07
    1016:	38 85       	ldd	r19, Y+8	; 0x08
    1018:	f9 01       	movw	r30, r18
    101a:	84 83       	std	Z+4, r24	; 0x04
    101c:	95 83       	std	Z+5, r25	; 0x05
    101e:	a6 83       	std	Z+6, r26	; 0x06
    1020:	b7 83       	std	Z+7, r27	; 0x07
	
	//Calculate weighting factor then make new HR.
	__calculateHRWeight();
    1022:	8f 81       	ldd	r24, Y+7	; 0x07
    1024:	98 85       	ldd	r25, Y+8	; 0x08
    1026:	fc 01       	movw	r30, r24
    1028:	84 85       	ldd	r24, Z+12	; 0x0c
    102a:	95 85       	ldd	r25, Z+13	; 0x0d
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	2f 81       	ldd	r18, Y+7	; 0x07
    1030:	38 85       	ldd	r19, Y+8	; 0x08
    1032:	f9 01       	movw	r30, r18
    1034:	24 85       	ldd	r18, Z+12	; 0x0c
    1036:	35 85       	ldd	r19, Z+13	; 0x0d
    1038:	b9 01       	movw	r22, r18
    103a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__udivmodhi4>
    103e:	9b 01       	movw	r18, r22
    1040:	c9 01       	movw	r24, r18
    1042:	cc 01       	movw	r24, r24
    1044:	a0 e0       	ldi	r26, 0x00	; 0
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	bc 01       	movw	r22, r24
    104a:	cd 01       	movw	r24, r26
    104c:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__floatunsisf>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	2f 81       	ldd	r18, Y+7	; 0x07
    1056:	38 85       	ldd	r19, Y+8	; 0x08
    1058:	f9 01       	movw	r30, r18
    105a:	80 87       	std	Z+8, r24	; 0x08
    105c:	91 87       	std	Z+9, r25	; 0x09
    105e:	a2 87       	std	Z+10, r26	; 0x0a
    1060:	b3 87       	std	Z+11, r27	; 0x0b
	aveHR=aveHR*hrWeight + currentHR/numReadings;
    1062:	8f 81       	ldd	r24, Y+7	; 0x07
    1064:	98 85       	ldd	r25, Y+8	; 0x08
    1066:	fc 01       	movw	r30, r24
    1068:	80 81       	ld	r24, Z
    106a:	91 81       	ldd	r25, Z+1	; 0x01
    106c:	a2 81       	ldd	r26, Z+2	; 0x02
    106e:	b3 81       	ldd	r27, Z+3	; 0x03
    1070:	2f 81       	ldd	r18, Y+7	; 0x07
    1072:	38 85       	ldd	r19, Y+8	; 0x08
    1074:	f9 01       	movw	r30, r18
    1076:	20 85       	ldd	r18, Z+8	; 0x08
    1078:	31 85       	ldd	r19, Z+9	; 0x09
    107a:	42 85       	ldd	r20, Z+10	; 0x0a
    107c:	53 85       	ldd	r21, Z+11	; 0x0b
    107e:	bc 01       	movw	r22, r24
    1080:	cd 01       	movw	r24, r26
    1082:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <__mulsf3>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	7c 01       	movw	r14, r24
    108c:	8d 01       	movw	r16, r26
    108e:	8f 81       	ldd	r24, Y+7	; 0x07
    1090:	98 85       	ldd	r25, Y+8	; 0x08
    1092:	fc 01       	movw	r30, r24
    1094:	a4 80       	ldd	r10, Z+4	; 0x04
    1096:	b5 80       	ldd	r11, Z+5	; 0x05
    1098:	c6 80       	ldd	r12, Z+6	; 0x06
    109a:	d7 80       	ldd	r13, Z+7	; 0x07
    109c:	8f 81       	ldd	r24, Y+7	; 0x07
    109e:	98 85       	ldd	r25, Y+8	; 0x08
    10a0:	fc 01       	movw	r30, r24
    10a2:	84 85       	ldd	r24, Z+12	; 0x0c
    10a4:	95 85       	ldd	r25, Z+13	; 0x0d
    10a6:	cc 01       	movw	r24, r24
    10a8:	a0 e0       	ldi	r26, 0x00	; 0
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	bc 01       	movw	r22, r24
    10ae:	cd 01       	movw	r24, r26
    10b0:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__floatunsisf>
    10b4:	9b 01       	movw	r18, r22
    10b6:	ac 01       	movw	r20, r24
    10b8:	c6 01       	movw	r24, r12
    10ba:	b5 01       	movw	r22, r10
    10bc:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__divsf3>
    10c0:	dc 01       	movw	r26, r24
    10c2:	cb 01       	movw	r24, r22
    10c4:	9c 01       	movw	r18, r24
    10c6:	ad 01       	movw	r20, r26
    10c8:	c8 01       	movw	r24, r16
    10ca:	b7 01       	movw	r22, r14
    10cc:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__addsf3>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	2f 81       	ldd	r18, Y+7	; 0x07
    10d6:	38 85       	ldd	r19, Y+8	; 0x08
    10d8:	f9 01       	movw	r30, r18
    10da:	80 83       	st	Z, r24
    10dc:	91 83       	std	Z+1, r25	; 0x01
    10de:	a2 83       	std	Z+2, r26	; 0x02
    10e0:	b3 83       	std	Z+3, r27	; 0x03
}
    10e2:	28 96       	adiw	r28, 0x08	; 8
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	1f 91       	pop	r17
    10f4:	0f 91       	pop	r16
    10f6:	ff 90       	pop	r15
    10f8:	ef 90       	pop	r14
    10fa:	df 90       	pop	r13
    10fc:	cf 90       	pop	r12
    10fe:	bf 90       	pop	r11
    1100:	af 90       	pop	r10
    1102:	08 95       	ret

00001104 <_ZN4tripC1Ev>:
		trip();		
		
};

//Default/no-arg constructor
trip::trip():odometer(), heartMonitor(){
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
    1108:	00 d0       	rcall	.+0      	; 0x110a <_ZN4tripC1Ev+0x6>
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	9a 83       	std	Y+2, r25	; 0x02
    1110:	89 83       	std	Y+1, r24	; 0x01
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	9a 81       	ldd	r25, Y+2	; 0x02
    1116:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN8odometerC1Ev>
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	9a 81       	ldd	r25, Y+2	; 0x02
    111e:	c2 96       	adiw	r24, 0x32	; 50
    1120:	0e 94 bd 04 	call	0x97a	; 0x97a <_ZN12heartMonitorC1Ev>
	//Do nothing in this, only important because it's a mix of heartMonitor and odometer.
}
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	08 95       	ret

0000112e <__vector_13>:

//Global trip 
trip globalTrip;

//ISR
ISR(TIMER1_OVF_vect){
    112e:	1f 92       	push	r1
    1130:	0f 92       	push	r0
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	0f 92       	push	r0
    1136:	11 24       	eor	r1, r1
    1138:	2f 93       	push	r18
    113a:	3f 93       	push	r19
    113c:	4f 93       	push	r20
    113e:	5f 93       	push	r21
    1140:	6f 93       	push	r22
    1142:	7f 93       	push	r23
    1144:	8f 93       	push	r24
    1146:	9f 93       	push	r25
    1148:	af 93       	push	r26
    114a:	bf 93       	push	r27
    114c:	ef 93       	push	r30
    114e:	ff 93       	push	r31
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
	cli();
    1158:	f8 94       	cli
	//Check to see if we are going to slow to care.
	if (numberOfSpeedOverflows++ > BAD_SPEED_THRESH && !flagNoSpeed){
    115a:	80 91 26 01 	lds	r24, 0x0126
    115e:	90 91 27 01 	lds	r25, 0x0127
    1162:	21 e0       	ldi	r18, 0x01	; 1
    1164:	85 30       	cpi	r24, 0x05	; 5
    1166:	91 05       	cpc	r25, r1
    1168:	08 f4       	brcc	.+2      	; 0x116c <__vector_13+0x3e>
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	01 96       	adiw	r24, 0x01	; 1
    116e:	90 93 27 01 	sts	0x0127, r25
    1172:	80 93 26 01 	sts	0x0126, r24
    1176:	22 23       	and	r18, r18
    1178:	31 f0       	breq	.+12     	; 0x1186 <__vector_13+0x58>
    117a:	80 91 00 01 	lds	r24, 0x0100
    117e:	88 23       	and	r24, r24
    1180:	11 f4       	brne	.+4      	; 0x1186 <__vector_13+0x58>
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	01 c0       	rjmp	.+2      	; 0x1188 <__vector_13+0x5a>
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	88 23       	and	r24, r24
    118a:	39 f0       	breq	.+14     	; 0x119a <__vector_13+0x6c>
		//Let the INT0 know that on next interrupt it shouldn't calc speed, but initialize "speedPoints" in odometer class.
		flagNoSpeed=fTrue;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	80 93 00 01 	sts	0x0100, r24
		globalTrip.resetSpeedPoints();
    1192:	86 e4       	ldi	r24, 0x46	; 70
    1194:	91 e0       	ldi	r25, 0x01	; 1
    1196:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN8odometer16resetSpeedPointsEv>
	}

	//SHow me that is happened with LED;
	prtLED |= (1 << bnLED);
    119a:	88 e2       	ldi	r24, 0x28	; 40
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	28 e2       	ldi	r18, 0x28	; 40
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	f9 01       	movw	r30, r18
    11a4:	20 81       	ld	r18, Z
    11a6:	20 62       	ori	r18, 0x20	; 32
    11a8:	fc 01       	movw	r30, r24
    11aa:	20 83       	st	Z, r18
	Wait_ms(2);
    11ac:	82 e0       	ldi	r24, 0x02	; 2
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 8d 0b 	call	0x171a	; 0x171a <_Z7Wait_msi>
	prtLED &= ~(1 << bnLED);
    11b4:	88 e2       	ldi	r24, 0x28	; 40
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	28 e2       	ldi	r18, 0x28	; 40
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	f9 01       	movw	r30, r18
    11be:	20 81       	ld	r18, Z
    11c0:	2f 7d       	andi	r18, 0xDF	; 223
    11c2:	fc 01       	movw	r30, r24
    11c4:	20 83       	st	Z, r18
	
	sei();
    11c6:	78 94       	sei
}
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	ff 91       	pop	r31
    11ce:	ef 91       	pop	r30
    11d0:	bf 91       	pop	r27
    11d2:	af 91       	pop	r26
    11d4:	9f 91       	pop	r25
    11d6:	8f 91       	pop	r24
    11d8:	7f 91       	pop	r23
    11da:	6f 91       	pop	r22
    11dc:	5f 91       	pop	r21
    11de:	4f 91       	pop	r20
    11e0:	3f 91       	pop	r19
    11e2:	2f 91       	pop	r18
    11e4:	0f 90       	pop	r0
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	0f 90       	pop	r0
    11ea:	1f 90       	pop	r1
    11ec:	18 95       	reti

000011ee <__vector_1>:

//This is hit when there is a speed magnet hit.
ISR(INT0_vect){
    11ee:	1f 92       	push	r1
    11f0:	0f 92       	push	r0
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	0f 92       	push	r0
    11f6:	11 24       	eor	r1, r1
    11f8:	2f 93       	push	r18
    11fa:	3f 93       	push	r19
    11fc:	4f 93       	push	r20
    11fe:	5f 93       	push	r21
    1200:	6f 93       	push	r22
    1202:	7f 93       	push	r23
    1204:	8f 93       	push	r24
    1206:	9f 93       	push	r25
    1208:	af 93       	push	r26
    120a:	bf 93       	push	r27
    120c:	ef 93       	push	r30
    120e:	ff 93       	push	r31
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	00 d0       	rcall	.+0      	; 0x1216 <__vector_1+0x28>
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
	cli();
    121a:	f8 94       	cli
	volatile static unsigned int interruptsSinceLastCalc=0;
	unsigned int value=TCNT1;
    121c:	84 e8       	ldi	r24, 0x84	; 132
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	fc 01       	movw	r30, r24
    1222:	80 81       	ld	r24, Z
    1224:	91 81       	ldd	r25, Z+1	; 0x01
    1226:	9a 83       	std	Y+2, r25	; 0x02
    1228:	89 83       	std	Y+1, r24	; 0x01

	/**********************************************************************************************/
	//THis should be replaced by a flag that every second is sent high to calculate the speed. At 16MHz, will hit before an issue
	//happens. Could also just have screen pull speed data before updating screen.
	if (interruptsSinceLastCalc++ > CALC_SPEED_THRESH){
    122a:	80 91 ab 01 	lds	r24, 0x01AB
    122e:	90 91 ac 01 	lds	r25, 0x01AC
    1232:	21 e0       	ldi	r18, 0x01	; 1
    1234:	84 30       	cpi	r24, 0x04	; 4
    1236:	91 05       	cpc	r25, r1
    1238:	08 f4       	brcc	.+2      	; 0x123c <__vector_1+0x4e>
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	01 96       	adiw	r24, 0x01	; 1
    123e:	90 93 ac 01 	sts	0x01AC, r25
    1242:	80 93 ab 01 	sts	0x01AB, r24
    1246:	22 23       	and	r18, r18
    1248:	39 f0       	breq	.+14     	; 0x1258 <__vector_1+0x6a>
		flagUpdateUserStats=fTrue;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	80 93 2d 01 	sts	0x012D, r24
		interruptsSinceLastCalc=0;
    1250:	10 92 ac 01 	sts	0x01AC, r1
    1254:	10 92 ab 01 	sts	0x01AB, r1
	}
	/**********************************************************************************************/
	
	//Show me that it saw an interrupt.
	prtLED |= (1 << bnSPEEDLED);
    1258:	88 e2       	ldi	r24, 0x28	; 40
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	28 e2       	ldi	r18, 0x28	; 40
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	f9 01       	movw	r30, r18
    1262:	20 81       	ld	r18, Z
    1264:	20 61       	ori	r18, 0x10	; 16
    1266:	fc 01       	movw	r30, r24
    1268:	20 83       	st	Z, r18
	Wait_ms(2);
    126a:	82 e0       	ldi	r24, 0x02	; 2
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 8d 0b 	call	0x171a	; 0x171a <_Z7Wait_msi>
	prtLED &= ~(1 << bnSPEEDLED);
    1272:	88 e2       	ldi	r24, 0x28	; 40
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	28 e2       	ldi	r18, 0x28	; 40
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	f9 01       	movw	r30, r18
    127c:	20 81       	ld	r18, Z
    127e:	2f 7e       	andi	r18, 0xEF	; 239
    1280:	fc 01       	movw	r30, r24
    1282:	20 83       	st	Z, r18
	
	if (flagNoSpeed){
    1284:	90 91 00 01 	lds	r25, 0x0100
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	99 23       	and	r25, r25
    128c:	09 f4       	brne	.+2      	; 0x1290 <__vector_1+0xa2>
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	88 23       	and	r24, r24
    1292:	59 f0       	breq	.+22     	; 0x12aa <__vector_1+0xbc>
		//Something to alert that speed was 0 and print it to screen.
		interruptsSinceLastCalc=0;
    1294:	10 92 ac 01 	sts	0x01AC, r1
    1298:	10 92 ab 01 	sts	0x01AB, r1
		flagNoSpeed=fFalse;
    129c:	10 92 00 01 	sts	0x0100, r1
		globalTrip.resetSpeedPoints();
    12a0:	86 e4       	ldi	r24, 0x46	; 70
    12a2:	91 e0       	ldi	r25, 0x01	; 1
    12a4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN8odometer16resetSpeedPointsEv>
    12a8:	0d c0       	rjmp	.+26     	; 0x12c4 <__vector_1+0xd6>
	} else {
		globalTrip.addSpeedDataPoint(value+(numberOfSpeedOverflows*TIMER1_OFFSET));
    12aa:	80 91 26 01 	lds	r24, 0x0126
    12ae:	90 91 27 01 	lds	r25, 0x0127
    12b2:	29 81       	ldd	r18, Y+1	; 0x01
    12b4:	3a 81       	ldd	r19, Y+2	; 0x02
    12b6:	28 1b       	sub	r18, r24
    12b8:	39 0b       	sbc	r19, r25
    12ba:	86 e4       	ldi	r24, 0x46	; 70
    12bc:	91 e0       	ldi	r25, 0x01	; 1
    12be:	b9 01       	movw	r22, r18
    12c0:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN8odometer17addSpeedDataPointEj>
	}

	//Reset TCNT1
	TCNT1=0x00;
    12c4:	84 e8       	ldi	r24, 0x84	; 132
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	fc 01       	movw	r30, r24
    12ca:	11 82       	std	Z+1, r1	; 0x01
    12cc:	10 82       	st	Z, r1
	sei();	
    12ce:	78 94       	sei
}
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	ff 91       	pop	r31
    12da:	ef 91       	pop	r30
    12dc:	bf 91       	pop	r27
    12de:	af 91       	pop	r26
    12e0:	9f 91       	pop	r25
    12e2:	8f 91       	pop	r24
    12e4:	7f 91       	pop	r23
    12e6:	6f 91       	pop	r22
    12e8:	5f 91       	pop	r21
    12ea:	4f 91       	pop	r20
    12ec:	3f 91       	pop	r19
    12ee:	2f 91       	pop	r18
    12f0:	0f 90       	pop	r0
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	0f 90       	pop	r0
    12f6:	1f 90       	pop	r1
    12f8:	18 95       	reti

000012fa <__vector_14>:


//Toggled every 4ms roughly. 1/(8MHz/128/248)
ISR(TIMER0_COMPA_vect){
    12fa:	1f 92       	push	r1
    12fc:	0f 92       	push	r0
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	0f 92       	push	r0
    1302:	11 24       	eor	r1, r1
    1304:	2f 93       	push	r18
    1306:	3f 93       	push	r19
    1308:	4f 93       	push	r20
    130a:	5f 93       	push	r21
    130c:	6f 93       	push	r22
    130e:	7f 93       	push	r23
    1310:	8f 93       	push	r24
    1312:	9f 93       	push	r25
    1314:	af 93       	push	r26
    1316:	bf 93       	push	r27
    1318:	ef 93       	push	r30
    131a:	ff 93       	push	r31
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	00 d0       	rcall	.+0      	; 0x1322 <__vector_14+0x28>
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
	cli();
    1326:	f8 94       	cli
	//Declare variables
	WORD signal=0;
    1328:	1a 82       	std	Y+2, r1	; 0x02
    132a:	19 82       	std	Y+1, r1	; 0x01
	volatile static unsigned int N=0;
	
	//Increment N (time should reflect number of ms between timer interrupts), get ADC reading, see if newSample is good for anything.
	N+=4;
    132c:	80 91 a9 01 	lds	r24, 0x01A9
    1330:	90 91 aa 01 	lds	r25, 0x01AA
    1334:	04 96       	adiw	r24, 0x04	; 4
    1336:	90 93 aa 01 	sts	0x01AA, r25
    133a:	80 93 a9 01 	sts	0x01A9, r24
	signal = GetADC();		//retrieves ADC reading on ADC0
    133e:	0e 94 12 0b 	call	0x1624	; 0x1624 <_Z6GetADCv>
    1342:	9a 83       	std	Y+2, r25	; 0x02
    1344:	89 83       	std	Y+1, r24	; 0x01
	if (signal > MINIMUM_HR_THRESH){
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	9a 81       	ldd	r25, Y+2	; 0x02
    134a:	21 e0       	ldi	r18, 0x01	; 1
    134c:	81 39       	cpi	r24, 0x91	; 145
    134e:	92 07       	cpc	r25, r18
    1350:	80 f0       	brcs	.+32     	; 0x1372 <__vector_14+0x78>
		globalTrip.newHRSample(signal, N);
    1352:	20 91 a9 01 	lds	r18, 0x01A9
    1356:	30 91 aa 01 	lds	r19, 0x01AA
    135a:	88 e7       	ldi	r24, 0x78	; 120
    135c:	91 e0       	ldi	r25, 0x01	; 1
    135e:	49 81       	ldd	r20, Y+1	; 0x01
    1360:	5a 81       	ldd	r21, Y+2	; 0x02
    1362:	ba 01       	movw	r22, r20
    1364:	a9 01       	movw	r20, r18
    1366:	0e 94 04 06 	call	0xc08	; 0xc08 <_ZN12heartMonitor11newHRSampleEjj>
		N=0;
    136a:	10 92 aa 01 	sts	0x01AA, r1
    136e:	10 92 a9 01 	sts	0x01A9, r1
	}	

	//Re-enable interrupts
	sei();
    1372:	78 94       	sei
}
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	df 91       	pop	r29
    137a:	cf 91       	pop	r28
    137c:	ff 91       	pop	r31
    137e:	ef 91       	pop	r30
    1380:	bf 91       	pop	r27
    1382:	af 91       	pop	r26
    1384:	9f 91       	pop	r25
    1386:	8f 91       	pop	r24
    1388:	7f 91       	pop	r23
    138a:	6f 91       	pop	r22
    138c:	5f 91       	pop	r21
    138e:	4f 91       	pop	r20
    1390:	3f 91       	pop	r19
    1392:	2f 91       	pop	r18
    1394:	0f 90       	pop	r0
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	0f 90       	pop	r0
    139a:	1f 90       	pop	r1
    139c:	18 95       	reti

0000139e <main>:

//Main Program
int main(void){
    139e:	0f 93       	push	r16
    13a0:	1f 93       	push	r17
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	68 97       	sbiw	r28, 0x18	; 24
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
	DeviceInit();
    13b6:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <_Z10DeviceInitv>
	AppInit(MYUBRR);
    13ba:	83 e3       	ldi	r24, 0x33	; 51
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <_Z7AppInitj>
	Print0("Hello...");
    13c2:	83 e0       	ldi	r24, 0x03	; 3
    13c4:	91 e0       	ldi	r25, 0x01	; 1
    13c6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <_Z6Print0Pc>
	Wait_ms(500);
    13ca:	84 ef       	ldi	r24, 0xF4	; 244
    13cc:	91 e0       	ldi	r25, 0x01	; 1
    13ce:	0e 94 8d 0b 	call	0x171a	; 0x171a <_Z7Wait_msi>
	initHRSensing();	
    13d2:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <_Z13initHRSensingv>
	initSpeedSensing();
    13d6:	0e 94 cf 0a 	call	0x159e	; 0x159e <_Z16initSpeedSensingv>
	sei();
    13da:	78 94       	sei
    13dc:	01 c0       	rjmp	.+2      	; 0x13e0 <main+0x42>
	while (fTrue){
    13de:	00 00       	nop
		if (flagUpdateUserStats){
    13e0:	90 91 2d 01 	lds	r25, 0x012D
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	99 23       	and	r25, r25
    13e8:	09 f4       	brne	.+2      	; 0x13ec <main+0x4e>
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	88 23       	and	r24, r24
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <main+0x54>
    13f0:	4c c0       	rjmp	.+152    	; 0x148a <main+0xec>
			cli();
    13f2:	f8 94       	cli
			//Declare variables
			double speed, currentHR;
			char speedString[8], BPMstring[8];
			
			//Do work on HR
			Print0("Processing...");
    13f4:	8c e0       	ldi	r24, 0x0C	; 12
    13f6:	91 e0       	ldi	r25, 0x01	; 1
    13f8:	0e 94 de 0b 	call	0x17bc	; 0x17bc <_Z6Print0Pc>
			currentHR = globalTrip.getCurrentHR();
    13fc:	88 e7       	ldi	r24, 0x78	; 120
    13fe:	91 e0       	ldi	r25, 0x01	; 1
    1400:	0e 94 c9 05 	call	0xb92	; 0xb92 <_ZN12heartMonitor12getCurrentHREv>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	89 83       	std	Y+1, r24	; 0x01
    140a:	9a 83       	std	Y+2, r25	; 0x02
    140c:	ab 83       	std	Y+3, r26	; 0x03
    140e:	bc 83       	std	Y+4, r27	; 0x04
			dtostrf(currentHR, 5, 2, BPMstring);
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	9a 81       	ldd	r25, Y+2	; 0x02
    1414:	ab 81       	ldd	r26, Y+3	; 0x03
    1416:	bc 81       	ldd	r27, Y+4	; 0x04
    1418:	fe 01       	movw	r30, r28
    141a:	71 96       	adiw	r30, 0x11	; 17
    141c:	bc 01       	movw	r22, r24
    141e:	cd 01       	movw	r24, r26
    1420:	45 e0       	ldi	r20, 0x05	; 5
    1422:	22 e0       	ldi	r18, 0x02	; 2
    1424:	8f 01       	movw	r16, r30
    1426:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <dtostrf>
			BPMstring[9]='\0';
    142a:	1a 8e       	std	Y+26, r1	; 0x1a
			BPMstring[8]='.';
    142c:	8e e2       	ldi	r24, 0x2E	; 46
    142e:	89 8f       	std	Y+25, r24	; 0x19
			Print0("BPM:");
    1430:	8a e1       	ldi	r24, 0x1A	; 26
    1432:	91 e0       	ldi	r25, 0x01	; 1
    1434:	0e 94 de 0b 	call	0x17bc	; 0x17bc <_Z6Print0Pc>
			Print0(BPMstring);
    1438:	ce 01       	movw	r24, r28
    143a:	41 96       	adiw	r24, 0x11	; 17
    143c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <_Z6Print0Pc>

			//Calculate speed using data points.
			speed = globalTrip.getCurrentSpeed();
    1440:	86 e4       	ldi	r24, 0x46	; 70
    1442:	91 e0       	ldi	r25, 0x01	; 1
    1444:	0e 94 3d 04 	call	0x87a	; 0x87a <_ZN8odometer15getCurrentSpeedEv>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	8d 83       	std	Y+5, r24	; 0x05
    144e:	9e 83       	std	Y+6, r25	; 0x06
    1450:	af 83       	std	Y+7, r26	; 0x07
    1452:	b8 87       	std	Y+8, r27	; 0x08
			dtostrf(speed,5,2,speedString);
    1454:	8d 81       	ldd	r24, Y+5	; 0x05
    1456:	9e 81       	ldd	r25, Y+6	; 0x06
    1458:	af 81       	ldd	r26, Y+7	; 0x07
    145a:	b8 85       	ldd	r27, Y+8	; 0x08
    145c:	fe 01       	movw	r30, r28
    145e:	39 96       	adiw	r30, 0x09	; 9
    1460:	bc 01       	movw	r22, r24
    1462:	cd 01       	movw	r24, r26
    1464:	45 e0       	ldi	r20, 0x05	; 5
    1466:	22 e0       	ldi	r18, 0x02	; 2
    1468:	8f 01       	movw	r16, r30
    146a:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <dtostrf>
			speedString[6]='.';
    146e:	8e e2       	ldi	r24, 0x2E	; 46
    1470:	8f 87       	std	Y+15, r24	; 0x0f
			speedString[7]='\0';
    1472:	18 8a       	std	Y+16, r1	; 0x10
			Print0("Speed:");
    1474:	8f e1       	ldi	r24, 0x1F	; 31
    1476:	91 e0       	ldi	r25, 0x01	; 1
    1478:	0e 94 de 0b 	call	0x17bc	; 0x17bc <_Z6Print0Pc>
			Print0(speedString);
    147c:	ce 01       	movw	r24, r28
    147e:	09 96       	adiw	r24, 0x09	; 9
    1480:	0e 94 de 0b 	call	0x17bc	; 0x17bc <_Z6Print0Pc>
			//Reset Flag
			flagUpdateUserStats=fFalse;
    1484:	10 92 2d 01 	sts	0x012D, r1
			sei();
    1488:	78 94       	sei
		}//end calc speed	
		
		if (dead){
    148a:	90 91 2e 01 	lds	r25, 0x012E
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	99 23       	and	r25, r25
    1492:	09 f4       	brne	.+2      	; 0x1496 <main+0xf8>
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	88 23       	and	r24, r24
    1498:	09 f4       	brne	.+2      	; 0x149c <main+0xfe>
    149a:	a1 cf       	rjmp	.-190    	; 0x13de <main+0x40>
			return 1; 
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
			//Setup to sleep
			powerDown();
		}
	}//end while True	
	return 0;
}//end main
    14a0:	68 96       	adiw	r28, 0x18	; 24
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	1f 91       	pop	r17
    14b2:	0f 91       	pop	r16
    14b4:	08 95       	ret

000014b6 <_Z10DeviceInitv>:

/*************************************************************************************************************/
void DeviceInit(){
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
	//Set all ports to input with no pull
	DDRB = 0;
    14be:	84 e2       	ldi	r24, 0x24	; 36
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	fc 01       	movw	r30, r24
    14c4:	10 82       	st	Z, r1
	DDRC = 0;
    14c6:	87 e2       	ldi	r24, 0x27	; 39
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	fc 01       	movw	r30, r24
    14cc:	10 82       	st	Z, r1
	DDRD = 0;
    14ce:	8a e2       	ldi	r24, 0x2A	; 42
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	fc 01       	movw	r30, r24
    14d4:	10 82       	st	Z, r1
	
	PORTB = 0;
    14d6:	85 e2       	ldi	r24, 0x25	; 37
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	fc 01       	movw	r30, r24
    14dc:	10 82       	st	Z, r1
	PORTC = 0;
    14de:	88 e2       	ldi	r24, 0x28	; 40
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	fc 01       	movw	r30, r24
    14e4:	10 82       	st	Z, r1
	PORTD = 0;
    14e6:	8b e2       	ldi	r24, 0x2B	; 43
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	fc 01       	movw	r30, r24
    14ec:	10 82       	st	Z, r1
}
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	08 95       	ret

000014f4 <_Z7AppInitj>:
/*************************************************************************************************************/
void AppInit(unsigned int ubrr){
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <_Z7AppInitj+0x6>
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	9a 83       	std	Y+2, r25	; 0x02
    1500:	89 83       	std	Y+1, r24	; 0x01
	
	//Set high and low byte of baud rate, then enable pins and functions
	UBRR0L = ubrr;
    1502:	84 ec       	ldi	r24, 0xC4	; 196
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	29 81       	ldd	r18, Y+1	; 0x01
    1508:	fc 01       	movw	r30, r24
    150a:	20 83       	st	Z, r18
	UBRR0H |= (ubrr >> 8);
    150c:	85 ec       	ldi	r24, 0xC5	; 197
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	25 ec       	ldi	r18, 0xC5	; 197
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	f9 01       	movw	r30, r18
    1516:	40 81       	ld	r20, Z
    1518:	29 81       	ldd	r18, Y+1	; 0x01
    151a:	3a 81       	ldd	r19, Y+2	; 0x02
    151c:	23 2f       	mov	r18, r19
    151e:	33 27       	eor	r19, r19
    1520:	24 2b       	or	r18, r20
    1522:	fc 01       	movw	r30, r24
    1524:	20 83       	st	Z, r18
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);		//Enable TX0 and RX0
    1526:	81 ec       	ldi	r24, 0xC1	; 193
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	28 e1       	ldi	r18, 0x18	; 24
    152c:	fc 01       	movw	r30, r24
    152e:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);		//Async, 8 data bits no parity
    1530:	82 ec       	ldi	r24, 0xC2	; 194
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	26 e0       	ldi	r18, 0x06	; 6
    1536:	fc 01       	movw	r30, r24
    1538:	20 83       	st	Z, r18
	
	//Disable power to certain modules
	PRR |= (1 << PRTWI)|(1 << PRTIM2)|(1 << PRSPI);  //Turn off everything 
    153a:	84 e6       	ldi	r24, 0x64	; 100
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	24 e6       	ldi	r18, 0x64	; 100
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	f9 01       	movw	r30, r18
    1544:	20 81       	ld	r18, Z
    1546:	24 6c       	ori	r18, 0xC4	; 196
    1548:	fc 01       	movw	r30, r24
    154a:	20 83       	st	Z, r18

	//Setup ADC
	ADCSRA |= (1 << ADEN)|(1 << ADPS1)|(1 << ADPS0);		//enable ADC with clock division factor of 8
    154c:	8a e7       	ldi	r24, 0x7A	; 122
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	2a e7       	ldi	r18, 0x7A	; 122
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	f9 01       	movw	r30, r18
    1556:	20 81       	ld	r18, Z
    1558:	23 68       	ori	r18, 0x83	; 131
    155a:	fc 01       	movw	r30, r24
    155c:	20 83       	st	Z, r18
	ADMUX |= (1 << REFS0)|(1 << MUX1);		//internal 3.3V reference on AVCC, channel ADC2
    155e:	8c e7       	ldi	r24, 0x7C	; 124
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	2c e7       	ldi	r18, 0x7C	; 124
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	f9 01       	movw	r30, r18
    1568:	20 81       	ld	r18, Z
    156a:	22 64       	ori	r18, 0x42	; 66
    156c:	fc 01       	movw	r30, r24
    156e:	20 83       	st	Z, r18
	
	//Setup LED Blinking Port
	ddrLED |= (1 << bnLED)|(1 << bnSPEEDLED);
    1570:	87 e2       	ldi	r24, 0x27	; 39
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	27 e2       	ldi	r18, 0x27	; 39
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	f9 01       	movw	r30, r18
    157a:	20 81       	ld	r18, Z
    157c:	20 63       	ori	r18, 0x30	; 48
    157e:	fc 01       	movw	r30, r24
    1580:	20 83       	st	Z, r18
	prtLED &= ~((1 << bnSPEEDLED)|(1 << bnLED));	//off initially.
    1582:	88 e2       	ldi	r24, 0x28	; 40
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	28 e2       	ldi	r18, 0x28	; 40
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	f9 01       	movw	r30, r18
    158c:	20 81       	ld	r18, Z
    158e:	2f 7c       	andi	r18, 0xCF	; 207
    1590:	fc 01       	movw	r30, r24
    1592:	20 83       	st	Z, r18
		
}
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	08 95       	ret

0000159e <_Z16initSpeedSensingv>:
/*************************************************************************************************************/
void initSpeedSensing(){
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
	//Initialize Timer 1(16-bit), counter is read on an interrupt to measure speed. assumes rider is going  above a certain speed for initial test.
	TCCR1B |= (1 << CS12); 				//Prescaler of 256 for system clock
    15a6:	81 e8       	ldi	r24, 0x81	; 129
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	21 e8       	ldi	r18, 0x81	; 129
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	f9 01       	movw	r30, r18
    15b0:	20 81       	ld	r18, Z
    15b2:	24 60       	ori	r18, 0x04	; 4
    15b4:	fc 01       	movw	r30, r24
    15b6:	20 83       	st	Z, r18
	TIFR1= (1 << TOV2);					//Make sure the overflow flag is not already set
    15b8:	86 e3       	ldi	r24, 0x36	; 54
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	21 e0       	ldi	r18, 0x01	; 1
    15be:	fc 01       	movw	r30, r24
    15c0:	20 83       	st	Z, r18
	TCNT1 = 0x00;
    15c2:	84 e8       	ldi	r24, 0x84	; 132
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	fc 01       	movw	r30, r24
    15c8:	11 82       	std	Z+1, r1	; 0x01
    15ca:	10 82       	st	Z, r1
	TIMSK1=(1 << TOIE2);
    15cc:	8f e6       	ldi	r24, 0x6F	; 111
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	21 e0       	ldi	r18, 0x01	; 1
    15d2:	fc 01       	movw	r30, r24
    15d4:	20 83       	st	Z, r18
	
	//Enable SPeed interrupt
	EICRA = (1 << ISC01)|(1 << ISC00);
    15d6:	89 e6       	ldi	r24, 0x69	; 105
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	23 e0       	ldi	r18, 0x03	; 3
    15dc:	fc 01       	movw	r30, r24
    15de:	20 83       	st	Z, r18
	//EIMSK = (1 << INT0);
	
}
    15e0:	df 91       	pop	r29
    15e2:	cf 91       	pop	r28
    15e4:	08 95       	ret

000015e6 <_Z13initHRSensingv>:

/*************************************************************************************************************/
void initHRSensing(){
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
	//Initialize timer 2, counter compare on TCNTA compare equals
	TCCR0A = (1 << WGM01);				//OCRA good, TOV set on top. TCNT2 cleared when match occurs
    15ee:	84 e4       	ldi	r24, 0x44	; 68
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	22 e0       	ldi	r18, 0x02	; 2
    15f4:	fc 01       	movw	r30, r24
    15f6:	20 83       	st	Z, r18
	TCCR0B = (1 << CS02)|(1 << CS00);	//clk/128
    15f8:	85 e4       	ldi	r24, 0x45	; 69
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	25 e0       	ldi	r18, 0x05	; 5
    15fe:	fc 01       	movw	r30, r24
    1600:	20 83       	st	Z, r18
	OCR0A = (0x7c)*2;						//248
    1602:	87 e4       	ldi	r24, 0x47	; 71
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	28 ef       	ldi	r18, 0xF8	; 248
    1608:	fc 01       	movw	r30, r24
    160a:	20 83       	st	Z, r18
	TCNT0 = 0x00;						//Initialize
    160c:	86 e4       	ldi	r24, 0x46	; 70
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	fc 01       	movw	r30, r24
    1612:	10 82       	st	Z, r1
	TIMSK0 = (1 << OCIE0A);			//enable OCIE2A
    1614:	8e e6       	ldi	r24, 0x6E	; 110
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	22 e0       	ldi	r18, 0x02	; 2
    161a:	fc 01       	movw	r30, r24
    161c:	20 83       	st	Z, r18
}
    161e:	df 91       	pop	r29
    1620:	cf 91       	pop	r28
    1622:	08 95       	ret

00001624 <_Z6GetADCv>:


/*************************************************************************************************************/

WORD GetADC(){
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	2e 97       	sbiw	r28, 0x0e	; 14
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	f8 94       	cli
    1632:	de bf       	out	0x3e, r29	; 62
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	cd bf       	out	0x3d, r28	; 61
	//Disable global interrupts; declare variables.
	//cli();		//GLOBAL INTERRUPTS ALREADY DISABLED
	volatile WORD ADCreading=0;
    1638:	1c 82       	std	Y+4, r1	; 0x04
    163a:	1b 82       	std	Y+3, r1	; 0x03
	volatile static unsigned int reps=0;
	
	//Take two ADC readings, throw the first one out.
	for (int i=0; i<2; i++){ADCSRA |= (1 << ADSC); while (ADCSRA & (1 << ADSC));} //does two
    163c:	1a 82       	std	Y+2, r1	; 0x02
    163e:	19 82       	std	Y+1, r1	; 0x01
    1640:	1c c0       	rjmp	.+56     	; 0x167a <_Z6GetADCv+0x56>
    1642:	8a e7       	ldi	r24, 0x7A	; 122
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	2a e7       	ldi	r18, 0x7A	; 122
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	f9 01       	movw	r30, r18
    164c:	20 81       	ld	r18, Z
    164e:	20 64       	ori	r18, 0x40	; 64
    1650:	fc 01       	movw	r30, r24
    1652:	20 83       	st	Z, r18
    1654:	8a e7       	ldi	r24, 0x7A	; 122
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	fc 01       	movw	r30, r24
    165a:	80 81       	ld	r24, Z
    165c:	88 2f       	mov	r24, r24
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	80 74       	andi	r24, 0x40	; 64
    1662:	90 70       	andi	r25, 0x00	; 0
    1664:	21 e0       	ldi	r18, 0x01	; 1
    1666:	00 97       	sbiw	r24, 0x00	; 0
    1668:	09 f4       	brne	.+2      	; 0x166c <_Z6GetADCv+0x48>
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	22 23       	and	r18, r18
    166e:	91 f7       	brne	.-28     	; 0x1654 <_Z6GetADCv+0x30>
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	9a 81       	ldd	r25, Y+2	; 0x02
    1674:	01 96       	adiw	r24, 0x01	; 1
    1676:	9a 83       	std	Y+2, r25	; 0x02
    1678:	89 83       	std	Y+1, r24	; 0x01
    167a:	21 e0       	ldi	r18, 0x01	; 1
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	9a 81       	ldd	r25, Y+2	; 0x02
    1680:	82 30       	cpi	r24, 0x02	; 2
    1682:	91 05       	cpc	r25, r1
    1684:	0c f0       	brlt	.+2      	; 0x1688 <_Z6GetADCv+0x64>
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	22 23       	and	r18, r18
    168a:	d9 f6       	brne	.-74     	; 0x1642 <_Z6GetADCv+0x1e>

	//Get the last ADC reading.	
	ADCreading = ADCL;
    168c:	88 e7       	ldi	r24, 0x78	; 120
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	fc 01       	movw	r30, r24
    1692:	80 81       	ld	r24, Z
    1694:	88 2f       	mov	r24, r24
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	9c 83       	std	Y+4, r25	; 0x04
    169a:	8b 83       	std	Y+3, r24	; 0x03
	ADCreading |= (ADCH << 8);
    169c:	89 e7       	ldi	r24, 0x79	; 121
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	fc 01       	movw	r30, r24
    16a2:	80 81       	ld	r24, Z
    16a4:	88 2f       	mov	r24, r24
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	98 2f       	mov	r25, r24
    16aa:	88 27       	eor	r24, r24
    16ac:	9c 01       	movw	r18, r24
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	9c 81       	ldd	r25, Y+4	; 0x04
    16b2:	82 2b       	or	r24, r18
    16b4:	93 2b       	or	r25, r19
    16b6:	9c 83       	std	Y+4, r25	; 0x04
    16b8:	8b 83       	std	Y+3, r24	; 0x03
	
	/*****Debugging******/
	if (reps++>50){
    16ba:	80 91 a7 01 	lds	r24, 0x01A7
    16be:	90 91 a8 01 	lds	r25, 0x01A8
    16c2:	21 e0       	ldi	r18, 0x01	; 1
    16c4:	83 33       	cpi	r24, 0x33	; 51
    16c6:	91 05       	cpc	r25, r1
    16c8:	08 f4       	brcc	.+2      	; 0x16cc <_Z6GetADCv+0xa8>
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	01 96       	adiw	r24, 0x01	; 1
    16ce:	90 93 a8 01 	sts	0x01A8, r25
    16d2:	80 93 a7 01 	sts	0x01A7, r24
    16d6:	22 23       	and	r18, r18
    16d8:	a9 f0       	breq	.+42     	; 0x1704 <_Z6GetADCv+0xe0>
		char tempString[10];
		utoa(ADCreading,tempString,10);
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	9c 81       	ldd	r25, Y+4	; 0x04
    16de:	9e 01       	movw	r18, r28
    16e0:	2b 5f       	subi	r18, 0xFB	; 251
    16e2:	3f 4f       	sbci	r19, 0xFF	; 255
    16e4:	b9 01       	movw	r22, r18
    16e6:	4a e0       	ldi	r20, 0x0A	; 10
    16e8:	50 e0       	ldi	r21, 0x00	; 0
    16ea:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <utoa>
		tempString[8]='-';	
    16ee:	8d e2       	ldi	r24, 0x2D	; 45
    16f0:	8d 87       	std	Y+13, r24	; 0x0d
		tempString[9]='\0';
    16f2:	1e 86       	std	Y+14, r1	; 0x0e
		Print0(tempString);
    16f4:	ce 01       	movw	r24, r28
    16f6:	05 96       	adiw	r24, 0x05	; 5
    16f8:	0e 94 de 0b 	call	0x17bc	; 0x17bc <_Z6Print0Pc>
		reps=0;
    16fc:	10 92 a8 01 	sts	0x01A8, r1
    1700:	10 92 a7 01 	sts	0x01A7, r1
	}	
	/********************/
	
	//Re-enable global interrupts. 
	//sei();
	return ADCreading;
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1708:	2e 96       	adiw	r28, 0x0e	; 14
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	08 95       	ret

0000171a <_Z7Wait_msi>:
	
/*************************************************************************************************************/
void Wait_ms(volatile int delay){
    171a:	cf 93       	push	r28
    171c:	df 93       	push	r29
    171e:	00 d0       	rcall	.+0      	; 0x1720 <_Z7Wait_msi+0x6>
    1720:	00 d0       	rcall	.+0      	; 0x1722 <_Z7Wait_msi+0x8>
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	9c 83       	std	Y+4, r25	; 0x04
    1728:	8b 83       	std	Y+3, r24	; 0x03
	volatile int i=0;
    172a:	1a 82       	std	Y+2, r1	; 0x02
    172c:	19 82       	std	Y+1, r1	; 0x01
	while (delay > 0){
    172e:	18 c0       	rjmp	.+48     	; 0x1760 <_Z7Wait_msi+0x46>
		for (i=0; i < 400; i++){
    1730:	1a 82       	std	Y+2, r1	; 0x02
    1732:	19 82       	std	Y+1, r1	; 0x01
    1734:	06 c0       	rjmp	.+12     	; 0x1742 <_Z7Wait_msi+0x28>
			asm volatile("nop");
    1736:	00 00       	nop
	
/*************************************************************************************************************/
void Wait_ms(volatile int delay){
	volatile int i=0;
	while (delay > 0){
		for (i=0; i < 400; i++){
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	9a 81       	ldd	r25, Y+2	; 0x02
    173c:	01 96       	adiw	r24, 0x01	; 1
    173e:	9a 83       	std	Y+2, r25	; 0x02
    1740:	89 83       	std	Y+1, r24	; 0x01
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	9a 81       	ldd	r25, Y+2	; 0x02
    1746:	21 e0       	ldi	r18, 0x01	; 1
    1748:	31 e0       	ldi	r19, 0x01	; 1
    174a:	80 39       	cpi	r24, 0x90	; 144
    174c:	93 07       	cpc	r25, r19
    174e:	0c f0       	brlt	.+2      	; 0x1752 <_Z7Wait_msi+0x38>
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	22 23       	and	r18, r18
    1754:	81 f7       	brne	.-32     	; 0x1736 <_Z7Wait_msi+0x1c>
			asm volatile("nop");
		}
		delay--;
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	9c 81       	ldd	r25, Y+4	; 0x04
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	9c 83       	std	Y+4, r25	; 0x04
    175e:	8b 83       	std	Y+3, r24	; 0x03
}
	
/*************************************************************************************************************/
void Wait_ms(volatile int delay){
	volatile int i=0;
	while (delay > 0){
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	9c 81       	ldd	r25, Y+4	; 0x04
    1764:	21 e0       	ldi	r18, 0x01	; 1
    1766:	18 16       	cp	r1, r24
    1768:	19 06       	cpc	r1, r25
    176a:	0c f0       	brlt	.+2      	; 0x176e <_Z7Wait_msi+0x54>
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	22 23       	and	r18, r18
    1770:	f9 f6       	brne	.-66     	; 0x1730 <_Z7Wait_msi+0x16>
		for (i=0; i < 400; i++){
			asm volatile("nop");
		}
		delay--;
	}	
}
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	df 91       	pop	r29
    177c:	cf 91       	pop	r28
    177e:	08 95       	ret

00001780 <_Z10PutUart0Chc>:
/*************************************************************************************************************/
void PutUart0Ch(char ch){
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	0f 92       	push	r0
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSR0A & (1 << UDRE0)));
    178c:	00 00       	nop
    178e:	80 ec       	ldi	r24, 0xC0	; 192
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	fc 01       	movw	r30, r24
    1794:	80 81       	ld	r24, Z
    1796:	88 2f       	mov	r24, r24
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	80 72       	andi	r24, 0x20	; 32
    179c:	90 70       	andi	r25, 0x00	; 0
    179e:	21 e0       	ldi	r18, 0x01	; 1
    17a0:	00 97       	sbiw	r24, 0x00	; 0
    17a2:	09 f0       	breq	.+2      	; 0x17a6 <_Z10PutUart0Chc+0x26>
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	22 23       	and	r18, r18
    17a8:	91 f7       	brne	.-28     	; 0x178e <_Z10PutUart0Chc+0xe>
	UDR0=ch;
    17aa:	86 ec       	ldi	r24, 0xC6	; 198
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	29 81       	ldd	r18, Y+1	; 0x01
    17b0:	fc 01       	movw	r30, r24
    17b2:	20 83       	st	Z, r18
}
    17b4:	0f 90       	pop	r0
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	08 95       	ret

000017bc <_Z6Print0Pc>:
/*************************************************************************************************************/
void Print0(char string[]){
    17bc:	cf 93       	push	r28
    17be:	df 93       	push	r29
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <_Z6Print0Pc+0x6>
    17c2:	0f 92       	push	r0
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	9b 83       	std	Y+3, r25	; 0x03
    17ca:	8a 83       	std	Y+2, r24	; 0x02
	BYTE i=0;
    17cc:	19 82       	std	Y+1, r1	; 0x01
	
	while (string[i]){
    17ce:	0e c0       	rjmp	.+28     	; 0x17ec <_Z6Print0Pc+0x30>
		PutUart0Ch(string[i++]);
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	88 2f       	mov	r24, r24
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	2a 81       	ldd	r18, Y+2	; 0x02
    17d8:	3b 81       	ldd	r19, Y+3	; 0x03
    17da:	82 0f       	add	r24, r18
    17dc:	93 1f       	adc	r25, r19
    17de:	fc 01       	movw	r30, r24
    17e0:	80 81       	ld	r24, Z
    17e2:	99 81       	ldd	r25, Y+1	; 0x01
    17e4:	9f 5f       	subi	r25, 0xFF	; 255
    17e6:	99 83       	std	Y+1, r25	; 0x01
    17e8:	0e 94 c0 0b 	call	0x1780	; 0x1780 <_Z10PutUart0Chc>
}
/*************************************************************************************************************/
void Print0(char string[]){
	BYTE i=0;
	
	while (string[i]){
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	88 2f       	mov	r24, r24
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	2a 81       	ldd	r18, Y+2	; 0x02
    17f4:	3b 81       	ldd	r19, Y+3	; 0x03
    17f6:	82 0f       	add	r24, r18
    17f8:	93 1f       	adc	r25, r19
    17fa:	fc 01       	movw	r30, r24
    17fc:	90 81       	ld	r25, Z
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	99 23       	and	r25, r25
    1802:	09 f4       	brne	.+2      	; 0x1806 <_Z6Print0Pc+0x4a>
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	88 23       	and	r24, r24
    1808:	19 f7       	brne	.-58     	; 0x17d0 <_Z6Print0Pc+0x14>
		PutUart0Ch(string[i++]);
	}
}		
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	08 95       	ret

00001816 <_Z9powerDownv>:
/*************************************************************************************************************/
void powerDown(){
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
	cli();
    181e:	f8 94       	cli
	SMCR = (1 << SM1);	//Power down.
    1820:	83 e5       	ldi	r24, 0x53	; 83
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	24 e0       	ldi	r18, 0x04	; 4
    1826:	fc 01       	movw	r30, r24
    1828:	20 83       	st	Z, r18
	SMCR |= (1 << SE);	//Enable sleep
    182a:	83 e5       	ldi	r24, 0x53	; 83
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	23 e5       	ldi	r18, 0x53	; 83
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	f9 01       	movw	r30, r18
    1834:	20 81       	ld	r18, Z
    1836:	21 60       	ori	r18, 0x01	; 1
    1838:	fc 01       	movw	r30, r24
    183a:	20 83       	st	Z, r18
	Wait_ms(1);
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	0e 94 8d 0b 	call	0x171a	; 0x171a <_Z7Wait_msi>
	sei();	//allow it to be woken up on an int from WAVR.
    1844:	78 94       	sei
	asm volatile("SLEEP");	//Go to sleep/power down
    1846:	88 95       	sleep
	
}
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	08 95       	ret

0000184e <_Z41__static_initialization_and_destruction_0ii>:
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	00 d0       	rcall	.+0      	; 0x1854 <_Z41__static_initialization_and_destruction_0ii+0x6>
    1854:	00 d0       	rcall	.+0      	; 0x1856 <_Z41__static_initialization_and_destruction_0ii+0x8>
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	9a 83       	std	Y+2, r25	; 0x02
    185c:	89 83       	std	Y+1, r24	; 0x01
    185e:	7c 83       	std	Y+4, r23	; 0x04
    1860:	6b 83       	std	Y+3, r22	; 0x03
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	9a 81       	ldd	r25, Y+2	; 0x02
    1866:	81 30       	cpi	r24, 0x01	; 1
    1868:	91 05       	cpc	r25, r1
    186a:	51 f4       	brne	.+20     	; 0x1880 <_Z41__static_initialization_and_destruction_0ii+0x32>
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	9c 81       	ldd	r25, Y+4	; 0x04
    1870:	2f ef       	ldi	r18, 0xFF	; 255
    1872:	8f 3f       	cpi	r24, 0xFF	; 255
    1874:	92 07       	cpc	r25, r18
    1876:	21 f4       	brne	.+8      	; 0x1880 <_Z41__static_initialization_and_destruction_0ii+0x32>
volatile WORD N=0;
volatile BOOL firstBeat=fTrue, secondBeat=fTrue, pulse=fFalse;
volatile WORD rate[10];

//Global trip 
trip globalTrip;
    1878:	86 e4       	ldi	r24, 0x46	; 70
    187a:	91 e0       	ldi	r25, 0x01	; 1
    187c:	0e 94 82 08 	call	0x1104	; 0x1104 <_ZN4tripC1Ev>
	SMCR |= (1 << SE);	//Enable sleep
	Wait_ms(1);
	sei();	//allow it to be woken up on an int from WAVR.
	asm volatile("SLEEP");	//Go to sleep/power down
	
}
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	df 91       	pop	r29
    188a:	cf 91       	pop	r28
    188c:	08 95       	ret

0000188e <_GLOBAL__sub_I__ZN8odometerC2Ev>:
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	6f ef       	ldi	r22, 0xFF	; 255
    189c:	7f ef       	ldi	r23, 0xFF	; 255
    189e:	0e 94 27 0c 	call	0x184e	; 0x184e <_Z41__static_initialization_and_destruction_0ii>
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	08 95       	ret

000018a8 <__subsf3>:
    18a8:	50 58       	subi	r21, 0x80	; 128

000018aa <__addsf3>:
    18aa:	bb 27       	eor	r27, r27
    18ac:	aa 27       	eor	r26, r26
    18ae:	0e d0       	rcall	.+28     	; 0x18cc <__addsf3x>
    18b0:	1c c1       	rjmp	.+568    	; 0x1aea <__fp_round>
    18b2:	0d d1       	rcall	.+538    	; 0x1ace <__fp_pscA>
    18b4:	30 f0       	brcs	.+12     	; 0x18c2 <__addsf3+0x18>
    18b6:	12 d1       	rcall	.+548    	; 0x1adc <__fp_pscB>
    18b8:	20 f0       	brcs	.+8      	; 0x18c2 <__addsf3+0x18>
    18ba:	31 f4       	brne	.+12     	; 0x18c8 <__addsf3+0x1e>
    18bc:	9f 3f       	cpi	r25, 0xFF	; 255
    18be:	11 f4       	brne	.+4      	; 0x18c4 <__addsf3+0x1a>
    18c0:	1e f4       	brtc	.+6      	; 0x18c8 <__addsf3+0x1e>
    18c2:	02 c1       	rjmp	.+516    	; 0x1ac8 <__fp_nan>
    18c4:	0e f4       	brtc	.+2      	; 0x18c8 <__addsf3+0x1e>
    18c6:	e0 95       	com	r30
    18c8:	e7 fb       	bst	r30, 7
    18ca:	f8 c0       	rjmp	.+496    	; 0x1abc <__fp_inf>

000018cc <__addsf3x>:
    18cc:	e9 2f       	mov	r30, r25
    18ce:	1e d1       	rcall	.+572    	; 0x1b0c <__fp_split3>
    18d0:	80 f3       	brcs	.-32     	; 0x18b2 <__addsf3+0x8>
    18d2:	ba 17       	cp	r27, r26
    18d4:	62 07       	cpc	r22, r18
    18d6:	73 07       	cpc	r23, r19
    18d8:	84 07       	cpc	r24, r20
    18da:	95 07       	cpc	r25, r21
    18dc:	18 f0       	brcs	.+6      	; 0x18e4 <__addsf3x+0x18>
    18de:	71 f4       	brne	.+28     	; 0x18fc <__addsf3x+0x30>
    18e0:	9e f5       	brtc	.+102    	; 0x1948 <__addsf3x+0x7c>
    18e2:	36 c1       	rjmp	.+620    	; 0x1b50 <__fp_zero>
    18e4:	0e f4       	brtc	.+2      	; 0x18e8 <__addsf3x+0x1c>
    18e6:	e0 95       	com	r30
    18e8:	0b 2e       	mov	r0, r27
    18ea:	ba 2f       	mov	r27, r26
    18ec:	a0 2d       	mov	r26, r0
    18ee:	0b 01       	movw	r0, r22
    18f0:	b9 01       	movw	r22, r18
    18f2:	90 01       	movw	r18, r0
    18f4:	0c 01       	movw	r0, r24
    18f6:	ca 01       	movw	r24, r20
    18f8:	a0 01       	movw	r20, r0
    18fa:	11 24       	eor	r1, r1
    18fc:	ff 27       	eor	r31, r31
    18fe:	59 1b       	sub	r21, r25
    1900:	99 f0       	breq	.+38     	; 0x1928 <__addsf3x+0x5c>
    1902:	59 3f       	cpi	r21, 0xF9	; 249
    1904:	50 f4       	brcc	.+20     	; 0x191a <__addsf3x+0x4e>
    1906:	50 3e       	cpi	r21, 0xE0	; 224
    1908:	68 f1       	brcs	.+90     	; 0x1964 <__addsf3x+0x98>
    190a:	1a 16       	cp	r1, r26
    190c:	f0 40       	sbci	r31, 0x00	; 0
    190e:	a2 2f       	mov	r26, r18
    1910:	23 2f       	mov	r18, r19
    1912:	34 2f       	mov	r19, r20
    1914:	44 27       	eor	r20, r20
    1916:	58 5f       	subi	r21, 0xF8	; 248
    1918:	f3 cf       	rjmp	.-26     	; 0x1900 <__addsf3x+0x34>
    191a:	46 95       	lsr	r20
    191c:	37 95       	ror	r19
    191e:	27 95       	ror	r18
    1920:	a7 95       	ror	r26
    1922:	f0 40       	sbci	r31, 0x00	; 0
    1924:	53 95       	inc	r21
    1926:	c9 f7       	brne	.-14     	; 0x191a <__addsf3x+0x4e>
    1928:	7e f4       	brtc	.+30     	; 0x1948 <__addsf3x+0x7c>
    192a:	1f 16       	cp	r1, r31
    192c:	ba 0b       	sbc	r27, r26
    192e:	62 0b       	sbc	r22, r18
    1930:	73 0b       	sbc	r23, r19
    1932:	84 0b       	sbc	r24, r20
    1934:	ba f0       	brmi	.+46     	; 0x1964 <__addsf3x+0x98>
    1936:	91 50       	subi	r25, 0x01	; 1
    1938:	a1 f0       	breq	.+40     	; 0x1962 <__addsf3x+0x96>
    193a:	ff 0f       	add	r31, r31
    193c:	bb 1f       	adc	r27, r27
    193e:	66 1f       	adc	r22, r22
    1940:	77 1f       	adc	r23, r23
    1942:	88 1f       	adc	r24, r24
    1944:	c2 f7       	brpl	.-16     	; 0x1936 <__addsf3x+0x6a>
    1946:	0e c0       	rjmp	.+28     	; 0x1964 <__addsf3x+0x98>
    1948:	ba 0f       	add	r27, r26
    194a:	62 1f       	adc	r22, r18
    194c:	73 1f       	adc	r23, r19
    194e:	84 1f       	adc	r24, r20
    1950:	48 f4       	brcc	.+18     	; 0x1964 <__addsf3x+0x98>
    1952:	87 95       	ror	r24
    1954:	77 95       	ror	r23
    1956:	67 95       	ror	r22
    1958:	b7 95       	ror	r27
    195a:	f7 95       	ror	r31
    195c:	9e 3f       	cpi	r25, 0xFE	; 254
    195e:	08 f0       	brcs	.+2      	; 0x1962 <__addsf3x+0x96>
    1960:	b3 cf       	rjmp	.-154    	; 0x18c8 <__addsf3+0x1e>
    1962:	93 95       	inc	r25
    1964:	88 0f       	add	r24, r24
    1966:	08 f0       	brcs	.+2      	; 0x196a <__addsf3x+0x9e>
    1968:	99 27       	eor	r25, r25
    196a:	ee 0f       	add	r30, r30
    196c:	97 95       	ror	r25
    196e:	87 95       	ror	r24
    1970:	08 95       	ret

00001972 <__divsf3>:
    1972:	0c d0       	rcall	.+24     	; 0x198c <__divsf3x>
    1974:	ba c0       	rjmp	.+372    	; 0x1aea <__fp_round>
    1976:	b2 d0       	rcall	.+356    	; 0x1adc <__fp_pscB>
    1978:	40 f0       	brcs	.+16     	; 0x198a <__divsf3+0x18>
    197a:	a9 d0       	rcall	.+338    	; 0x1ace <__fp_pscA>
    197c:	30 f0       	brcs	.+12     	; 0x198a <__divsf3+0x18>
    197e:	21 f4       	brne	.+8      	; 0x1988 <__divsf3+0x16>
    1980:	5f 3f       	cpi	r21, 0xFF	; 255
    1982:	19 f0       	breq	.+6      	; 0x198a <__divsf3+0x18>
    1984:	9b c0       	rjmp	.+310    	; 0x1abc <__fp_inf>
    1986:	51 11       	cpse	r21, r1
    1988:	e4 c0       	rjmp	.+456    	; 0x1b52 <__fp_szero>
    198a:	9e c0       	rjmp	.+316    	; 0x1ac8 <__fp_nan>

0000198c <__divsf3x>:
    198c:	bf d0       	rcall	.+382    	; 0x1b0c <__fp_split3>
    198e:	98 f3       	brcs	.-26     	; 0x1976 <__divsf3+0x4>

00001990 <__divsf3_pse>:
    1990:	99 23       	and	r25, r25
    1992:	c9 f3       	breq	.-14     	; 0x1986 <__divsf3+0x14>
    1994:	55 23       	and	r21, r21
    1996:	b1 f3       	breq	.-20     	; 0x1984 <__divsf3+0x12>
    1998:	95 1b       	sub	r25, r21
    199a:	55 0b       	sbc	r21, r21
    199c:	bb 27       	eor	r27, r27
    199e:	aa 27       	eor	r26, r26
    19a0:	62 17       	cp	r22, r18
    19a2:	73 07       	cpc	r23, r19
    19a4:	84 07       	cpc	r24, r20
    19a6:	38 f0       	brcs	.+14     	; 0x19b6 <__divsf3_pse+0x26>
    19a8:	9f 5f       	subi	r25, 0xFF	; 255
    19aa:	5f 4f       	sbci	r21, 0xFF	; 255
    19ac:	22 0f       	add	r18, r18
    19ae:	33 1f       	adc	r19, r19
    19b0:	44 1f       	adc	r20, r20
    19b2:	aa 1f       	adc	r26, r26
    19b4:	a9 f3       	breq	.-22     	; 0x19a0 <__divsf3_pse+0x10>
    19b6:	33 d0       	rcall	.+102    	; 0x1a1e <__divsf3_pse+0x8e>
    19b8:	0e 2e       	mov	r0, r30
    19ba:	3a f0       	brmi	.+14     	; 0x19ca <__divsf3_pse+0x3a>
    19bc:	e0 e8       	ldi	r30, 0x80	; 128
    19be:	30 d0       	rcall	.+96     	; 0x1a20 <__divsf3_pse+0x90>
    19c0:	91 50       	subi	r25, 0x01	; 1
    19c2:	50 40       	sbci	r21, 0x00	; 0
    19c4:	e6 95       	lsr	r30
    19c6:	00 1c       	adc	r0, r0
    19c8:	ca f7       	brpl	.-14     	; 0x19bc <__divsf3_pse+0x2c>
    19ca:	29 d0       	rcall	.+82     	; 0x1a1e <__divsf3_pse+0x8e>
    19cc:	fe 2f       	mov	r31, r30
    19ce:	27 d0       	rcall	.+78     	; 0x1a1e <__divsf3_pse+0x8e>
    19d0:	66 0f       	add	r22, r22
    19d2:	77 1f       	adc	r23, r23
    19d4:	88 1f       	adc	r24, r24
    19d6:	bb 1f       	adc	r27, r27
    19d8:	26 17       	cp	r18, r22
    19da:	37 07       	cpc	r19, r23
    19dc:	48 07       	cpc	r20, r24
    19de:	ab 07       	cpc	r26, r27
    19e0:	b0 e8       	ldi	r27, 0x80	; 128
    19e2:	09 f0       	breq	.+2      	; 0x19e6 <__divsf3_pse+0x56>
    19e4:	bb 0b       	sbc	r27, r27
    19e6:	80 2d       	mov	r24, r0
    19e8:	bf 01       	movw	r22, r30
    19ea:	ff 27       	eor	r31, r31
    19ec:	93 58       	subi	r25, 0x83	; 131
    19ee:	5f 4f       	sbci	r21, 0xFF	; 255
    19f0:	2a f0       	brmi	.+10     	; 0x19fc <__divsf3_pse+0x6c>
    19f2:	9e 3f       	cpi	r25, 0xFE	; 254
    19f4:	51 05       	cpc	r21, r1
    19f6:	68 f0       	brcs	.+26     	; 0x1a12 <__divsf3_pse+0x82>
    19f8:	61 c0       	rjmp	.+194    	; 0x1abc <__fp_inf>
    19fa:	ab c0       	rjmp	.+342    	; 0x1b52 <__fp_szero>
    19fc:	5f 3f       	cpi	r21, 0xFF	; 255
    19fe:	ec f3       	brlt	.-6      	; 0x19fa <__divsf3_pse+0x6a>
    1a00:	98 3e       	cpi	r25, 0xE8	; 232
    1a02:	dc f3       	brlt	.-10     	; 0x19fa <__divsf3_pse+0x6a>
    1a04:	86 95       	lsr	r24
    1a06:	77 95       	ror	r23
    1a08:	67 95       	ror	r22
    1a0a:	b7 95       	ror	r27
    1a0c:	f7 95       	ror	r31
    1a0e:	9f 5f       	subi	r25, 0xFF	; 255
    1a10:	c9 f7       	brne	.-14     	; 0x1a04 <__divsf3_pse+0x74>
    1a12:	88 0f       	add	r24, r24
    1a14:	91 1d       	adc	r25, r1
    1a16:	96 95       	lsr	r25
    1a18:	87 95       	ror	r24
    1a1a:	97 f9       	bld	r25, 7
    1a1c:	08 95       	ret
    1a1e:	e1 e0       	ldi	r30, 0x01	; 1
    1a20:	66 0f       	add	r22, r22
    1a22:	77 1f       	adc	r23, r23
    1a24:	88 1f       	adc	r24, r24
    1a26:	bb 1f       	adc	r27, r27
    1a28:	62 17       	cp	r22, r18
    1a2a:	73 07       	cpc	r23, r19
    1a2c:	84 07       	cpc	r24, r20
    1a2e:	ba 07       	cpc	r27, r26
    1a30:	20 f0       	brcs	.+8      	; 0x1a3a <__divsf3_pse+0xaa>
    1a32:	62 1b       	sub	r22, r18
    1a34:	73 0b       	sbc	r23, r19
    1a36:	84 0b       	sbc	r24, r20
    1a38:	ba 0b       	sbc	r27, r26
    1a3a:	ee 1f       	adc	r30, r30
    1a3c:	88 f7       	brcc	.-30     	; 0x1a20 <__divsf3_pse+0x90>
    1a3e:	e0 95       	com	r30
    1a40:	08 95       	ret

00001a42 <__floatunsisf>:
    1a42:	e8 94       	clt
    1a44:	09 c0       	rjmp	.+18     	; 0x1a58 <__floatsisf+0x12>

00001a46 <__floatsisf>:
    1a46:	97 fb       	bst	r25, 7
    1a48:	3e f4       	brtc	.+14     	; 0x1a58 <__floatsisf+0x12>
    1a4a:	90 95       	com	r25
    1a4c:	80 95       	com	r24
    1a4e:	70 95       	com	r23
    1a50:	61 95       	neg	r22
    1a52:	7f 4f       	sbci	r23, 0xFF	; 255
    1a54:	8f 4f       	sbci	r24, 0xFF	; 255
    1a56:	9f 4f       	sbci	r25, 0xFF	; 255
    1a58:	99 23       	and	r25, r25
    1a5a:	a9 f0       	breq	.+42     	; 0x1a86 <__floatsisf+0x40>
    1a5c:	f9 2f       	mov	r31, r25
    1a5e:	96 e9       	ldi	r25, 0x96	; 150
    1a60:	bb 27       	eor	r27, r27
    1a62:	93 95       	inc	r25
    1a64:	f6 95       	lsr	r31
    1a66:	87 95       	ror	r24
    1a68:	77 95       	ror	r23
    1a6a:	67 95       	ror	r22
    1a6c:	b7 95       	ror	r27
    1a6e:	f1 11       	cpse	r31, r1
    1a70:	f8 cf       	rjmp	.-16     	; 0x1a62 <__floatsisf+0x1c>
    1a72:	fa f4       	brpl	.+62     	; 0x1ab2 <__floatsisf+0x6c>
    1a74:	bb 0f       	add	r27, r27
    1a76:	11 f4       	brne	.+4      	; 0x1a7c <__floatsisf+0x36>
    1a78:	60 ff       	sbrs	r22, 0
    1a7a:	1b c0       	rjmp	.+54     	; 0x1ab2 <__floatsisf+0x6c>
    1a7c:	6f 5f       	subi	r22, 0xFF	; 255
    1a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a80:	8f 4f       	sbci	r24, 0xFF	; 255
    1a82:	9f 4f       	sbci	r25, 0xFF	; 255
    1a84:	16 c0       	rjmp	.+44     	; 0x1ab2 <__floatsisf+0x6c>
    1a86:	88 23       	and	r24, r24
    1a88:	11 f0       	breq	.+4      	; 0x1a8e <__floatsisf+0x48>
    1a8a:	96 e9       	ldi	r25, 0x96	; 150
    1a8c:	11 c0       	rjmp	.+34     	; 0x1ab0 <__floatsisf+0x6a>
    1a8e:	77 23       	and	r23, r23
    1a90:	21 f0       	breq	.+8      	; 0x1a9a <__floatsisf+0x54>
    1a92:	9e e8       	ldi	r25, 0x8E	; 142
    1a94:	87 2f       	mov	r24, r23
    1a96:	76 2f       	mov	r23, r22
    1a98:	05 c0       	rjmp	.+10     	; 0x1aa4 <__floatsisf+0x5e>
    1a9a:	66 23       	and	r22, r22
    1a9c:	71 f0       	breq	.+28     	; 0x1aba <__floatsisf+0x74>
    1a9e:	96 e8       	ldi	r25, 0x86	; 134
    1aa0:	86 2f       	mov	r24, r22
    1aa2:	70 e0       	ldi	r23, 0x00	; 0
    1aa4:	60 e0       	ldi	r22, 0x00	; 0
    1aa6:	2a f0       	brmi	.+10     	; 0x1ab2 <__floatsisf+0x6c>
    1aa8:	9a 95       	dec	r25
    1aaa:	66 0f       	add	r22, r22
    1aac:	77 1f       	adc	r23, r23
    1aae:	88 1f       	adc	r24, r24
    1ab0:	da f7       	brpl	.-10     	; 0x1aa8 <__floatsisf+0x62>
    1ab2:	88 0f       	add	r24, r24
    1ab4:	96 95       	lsr	r25
    1ab6:	87 95       	ror	r24
    1ab8:	97 f9       	bld	r25, 7
    1aba:	08 95       	ret

00001abc <__fp_inf>:
    1abc:	97 f9       	bld	r25, 7
    1abe:	9f 67       	ori	r25, 0x7F	; 127
    1ac0:	80 e8       	ldi	r24, 0x80	; 128
    1ac2:	70 e0       	ldi	r23, 0x00	; 0
    1ac4:	60 e0       	ldi	r22, 0x00	; 0
    1ac6:	08 95       	ret

00001ac8 <__fp_nan>:
    1ac8:	9f ef       	ldi	r25, 0xFF	; 255
    1aca:	80 ec       	ldi	r24, 0xC0	; 192
    1acc:	08 95       	ret

00001ace <__fp_pscA>:
    1ace:	00 24       	eor	r0, r0
    1ad0:	0a 94       	dec	r0
    1ad2:	16 16       	cp	r1, r22
    1ad4:	17 06       	cpc	r1, r23
    1ad6:	18 06       	cpc	r1, r24
    1ad8:	09 06       	cpc	r0, r25
    1ada:	08 95       	ret

00001adc <__fp_pscB>:
    1adc:	00 24       	eor	r0, r0
    1ade:	0a 94       	dec	r0
    1ae0:	12 16       	cp	r1, r18
    1ae2:	13 06       	cpc	r1, r19
    1ae4:	14 06       	cpc	r1, r20
    1ae6:	05 06       	cpc	r0, r21
    1ae8:	08 95       	ret

00001aea <__fp_round>:
    1aea:	09 2e       	mov	r0, r25
    1aec:	03 94       	inc	r0
    1aee:	00 0c       	add	r0, r0
    1af0:	11 f4       	brne	.+4      	; 0x1af6 <__fp_round+0xc>
    1af2:	88 23       	and	r24, r24
    1af4:	52 f0       	brmi	.+20     	; 0x1b0a <__fp_round+0x20>
    1af6:	bb 0f       	add	r27, r27
    1af8:	40 f4       	brcc	.+16     	; 0x1b0a <__fp_round+0x20>
    1afa:	bf 2b       	or	r27, r31
    1afc:	11 f4       	brne	.+4      	; 0x1b02 <__fp_round+0x18>
    1afe:	60 ff       	sbrs	r22, 0
    1b00:	04 c0       	rjmp	.+8      	; 0x1b0a <__fp_round+0x20>
    1b02:	6f 5f       	subi	r22, 0xFF	; 255
    1b04:	7f 4f       	sbci	r23, 0xFF	; 255
    1b06:	8f 4f       	sbci	r24, 0xFF	; 255
    1b08:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0a:	08 95       	ret

00001b0c <__fp_split3>:
    1b0c:	57 fd       	sbrc	r21, 7
    1b0e:	90 58       	subi	r25, 0x80	; 128
    1b10:	44 0f       	add	r20, r20
    1b12:	55 1f       	adc	r21, r21
    1b14:	59 f0       	breq	.+22     	; 0x1b2c <__fp_splitA+0x10>
    1b16:	5f 3f       	cpi	r21, 0xFF	; 255
    1b18:	71 f0       	breq	.+28     	; 0x1b36 <__fp_splitA+0x1a>
    1b1a:	47 95       	ror	r20

00001b1c <__fp_splitA>:
    1b1c:	88 0f       	add	r24, r24
    1b1e:	97 fb       	bst	r25, 7
    1b20:	99 1f       	adc	r25, r25
    1b22:	61 f0       	breq	.+24     	; 0x1b3c <__fp_splitA+0x20>
    1b24:	9f 3f       	cpi	r25, 0xFF	; 255
    1b26:	79 f0       	breq	.+30     	; 0x1b46 <__fp_splitA+0x2a>
    1b28:	87 95       	ror	r24
    1b2a:	08 95       	ret
    1b2c:	12 16       	cp	r1, r18
    1b2e:	13 06       	cpc	r1, r19
    1b30:	14 06       	cpc	r1, r20
    1b32:	55 1f       	adc	r21, r21
    1b34:	f2 cf       	rjmp	.-28     	; 0x1b1a <__fp_split3+0xe>
    1b36:	46 95       	lsr	r20
    1b38:	f1 df       	rcall	.-30     	; 0x1b1c <__fp_splitA>
    1b3a:	08 c0       	rjmp	.+16     	; 0x1b4c <__fp_splitA+0x30>
    1b3c:	16 16       	cp	r1, r22
    1b3e:	17 06       	cpc	r1, r23
    1b40:	18 06       	cpc	r1, r24
    1b42:	99 1f       	adc	r25, r25
    1b44:	f1 cf       	rjmp	.-30     	; 0x1b28 <__fp_splitA+0xc>
    1b46:	86 95       	lsr	r24
    1b48:	71 05       	cpc	r23, r1
    1b4a:	61 05       	cpc	r22, r1
    1b4c:	08 94       	sec
    1b4e:	08 95       	ret

00001b50 <__fp_zero>:
    1b50:	e8 94       	clt

00001b52 <__fp_szero>:
    1b52:	bb 27       	eor	r27, r27
    1b54:	66 27       	eor	r22, r22
    1b56:	77 27       	eor	r23, r23
    1b58:	cb 01       	movw	r24, r22
    1b5a:	97 f9       	bld	r25, 7
    1b5c:	08 95       	ret

00001b5e <__mulsf3>:
    1b5e:	0b d0       	rcall	.+22     	; 0x1b76 <__mulsf3x>
    1b60:	c4 cf       	rjmp	.-120    	; 0x1aea <__fp_round>
    1b62:	b5 df       	rcall	.-150    	; 0x1ace <__fp_pscA>
    1b64:	28 f0       	brcs	.+10     	; 0x1b70 <__mulsf3+0x12>
    1b66:	ba df       	rcall	.-140    	; 0x1adc <__fp_pscB>
    1b68:	18 f0       	brcs	.+6      	; 0x1b70 <__mulsf3+0x12>
    1b6a:	95 23       	and	r25, r21
    1b6c:	09 f0       	breq	.+2      	; 0x1b70 <__mulsf3+0x12>
    1b6e:	a6 cf       	rjmp	.-180    	; 0x1abc <__fp_inf>
    1b70:	ab cf       	rjmp	.-170    	; 0x1ac8 <__fp_nan>
    1b72:	11 24       	eor	r1, r1
    1b74:	ee cf       	rjmp	.-36     	; 0x1b52 <__fp_szero>

00001b76 <__mulsf3x>:
    1b76:	ca df       	rcall	.-108    	; 0x1b0c <__fp_split3>
    1b78:	a0 f3       	brcs	.-24     	; 0x1b62 <__mulsf3+0x4>

00001b7a <__mulsf3_pse>:
    1b7a:	95 9f       	mul	r25, r21
    1b7c:	d1 f3       	breq	.-12     	; 0x1b72 <__mulsf3+0x14>
    1b7e:	95 0f       	add	r25, r21
    1b80:	50 e0       	ldi	r21, 0x00	; 0
    1b82:	55 1f       	adc	r21, r21
    1b84:	62 9f       	mul	r22, r18
    1b86:	f0 01       	movw	r30, r0
    1b88:	72 9f       	mul	r23, r18
    1b8a:	bb 27       	eor	r27, r27
    1b8c:	f0 0d       	add	r31, r0
    1b8e:	b1 1d       	adc	r27, r1
    1b90:	63 9f       	mul	r22, r19
    1b92:	aa 27       	eor	r26, r26
    1b94:	f0 0d       	add	r31, r0
    1b96:	b1 1d       	adc	r27, r1
    1b98:	aa 1f       	adc	r26, r26
    1b9a:	64 9f       	mul	r22, r20
    1b9c:	66 27       	eor	r22, r22
    1b9e:	b0 0d       	add	r27, r0
    1ba0:	a1 1d       	adc	r26, r1
    1ba2:	66 1f       	adc	r22, r22
    1ba4:	82 9f       	mul	r24, r18
    1ba6:	22 27       	eor	r18, r18
    1ba8:	b0 0d       	add	r27, r0
    1baa:	a1 1d       	adc	r26, r1
    1bac:	62 1f       	adc	r22, r18
    1bae:	73 9f       	mul	r23, r19
    1bb0:	b0 0d       	add	r27, r0
    1bb2:	a1 1d       	adc	r26, r1
    1bb4:	62 1f       	adc	r22, r18
    1bb6:	83 9f       	mul	r24, r19
    1bb8:	a0 0d       	add	r26, r0
    1bba:	61 1d       	adc	r22, r1
    1bbc:	22 1f       	adc	r18, r18
    1bbe:	74 9f       	mul	r23, r20
    1bc0:	33 27       	eor	r19, r19
    1bc2:	a0 0d       	add	r26, r0
    1bc4:	61 1d       	adc	r22, r1
    1bc6:	23 1f       	adc	r18, r19
    1bc8:	84 9f       	mul	r24, r20
    1bca:	60 0d       	add	r22, r0
    1bcc:	21 1d       	adc	r18, r1
    1bce:	82 2f       	mov	r24, r18
    1bd0:	76 2f       	mov	r23, r22
    1bd2:	6a 2f       	mov	r22, r26
    1bd4:	11 24       	eor	r1, r1
    1bd6:	9f 57       	subi	r25, 0x7F	; 127
    1bd8:	50 40       	sbci	r21, 0x00	; 0
    1bda:	8a f0       	brmi	.+34     	; 0x1bfe <__mulsf3_pse+0x84>
    1bdc:	e1 f0       	breq	.+56     	; 0x1c16 <__mulsf3_pse+0x9c>
    1bde:	88 23       	and	r24, r24
    1be0:	4a f0       	brmi	.+18     	; 0x1bf4 <__mulsf3_pse+0x7a>
    1be2:	ee 0f       	add	r30, r30
    1be4:	ff 1f       	adc	r31, r31
    1be6:	bb 1f       	adc	r27, r27
    1be8:	66 1f       	adc	r22, r22
    1bea:	77 1f       	adc	r23, r23
    1bec:	88 1f       	adc	r24, r24
    1bee:	91 50       	subi	r25, 0x01	; 1
    1bf0:	50 40       	sbci	r21, 0x00	; 0
    1bf2:	a9 f7       	brne	.-22     	; 0x1bde <__mulsf3_pse+0x64>
    1bf4:	9e 3f       	cpi	r25, 0xFE	; 254
    1bf6:	51 05       	cpc	r21, r1
    1bf8:	70 f0       	brcs	.+28     	; 0x1c16 <__mulsf3_pse+0x9c>
    1bfa:	60 cf       	rjmp	.-320    	; 0x1abc <__fp_inf>
    1bfc:	aa cf       	rjmp	.-172    	; 0x1b52 <__fp_szero>
    1bfe:	5f 3f       	cpi	r21, 0xFF	; 255
    1c00:	ec f3       	brlt	.-6      	; 0x1bfc <__mulsf3_pse+0x82>
    1c02:	98 3e       	cpi	r25, 0xE8	; 232
    1c04:	dc f3       	brlt	.-10     	; 0x1bfc <__mulsf3_pse+0x82>
    1c06:	86 95       	lsr	r24
    1c08:	77 95       	ror	r23
    1c0a:	67 95       	ror	r22
    1c0c:	b7 95       	ror	r27
    1c0e:	f7 95       	ror	r31
    1c10:	e7 95       	ror	r30
    1c12:	9f 5f       	subi	r25, 0xFF	; 255
    1c14:	c1 f7       	brne	.-16     	; 0x1c06 <__mulsf3_pse+0x8c>
    1c16:	fe 2b       	or	r31, r30
    1c18:	88 0f       	add	r24, r24
    1c1a:	91 1d       	adc	r25, r1
    1c1c:	96 95       	lsr	r25
    1c1e:	87 95       	ror	r24
    1c20:	97 f9       	bld	r25, 7
    1c22:	08 95       	ret

00001c24 <__udivmodhi4>:
    1c24:	aa 1b       	sub	r26, r26
    1c26:	bb 1b       	sub	r27, r27
    1c28:	51 e1       	ldi	r21, 0x11	; 17
    1c2a:	07 c0       	rjmp	.+14     	; 0x1c3a <__udivmodhi4_ep>

00001c2c <__udivmodhi4_loop>:
    1c2c:	aa 1f       	adc	r26, r26
    1c2e:	bb 1f       	adc	r27, r27
    1c30:	a6 17       	cp	r26, r22
    1c32:	b7 07       	cpc	r27, r23
    1c34:	10 f0       	brcs	.+4      	; 0x1c3a <__udivmodhi4_ep>
    1c36:	a6 1b       	sub	r26, r22
    1c38:	b7 0b       	sbc	r27, r23

00001c3a <__udivmodhi4_ep>:
    1c3a:	88 1f       	adc	r24, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	5a 95       	dec	r21
    1c40:	a9 f7       	brne	.-22     	; 0x1c2c <__udivmodhi4_loop>
    1c42:	80 95       	com	r24
    1c44:	90 95       	com	r25
    1c46:	bc 01       	movw	r22, r24
    1c48:	cd 01       	movw	r24, r26
    1c4a:	08 95       	ret

00001c4c <__tablejump2__>:
    1c4c:	ee 0f       	add	r30, r30
    1c4e:	ff 1f       	adc	r31, r31

00001c50 <__tablejump__>:
    1c50:	05 90       	lpm	r0, Z+
    1c52:	f4 91       	lpm	r31, Z
    1c54:	e0 2d       	mov	r30, r0
    1c56:	09 94       	ijmp

00001c58 <dtostrf>:
    1c58:	ef 92       	push	r14
    1c5a:	0f 93       	push	r16
    1c5c:	1f 93       	push	r17
    1c5e:	cf 93       	push	r28
    1c60:	32 2f       	mov	r19, r18
    1c62:	c0 2f       	mov	r28, r16
    1c64:	47 ff       	sbrs	r20, 7
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <dtostrf+0x14>
    1c68:	a4 e1       	ldi	r26, 0x14	; 20
    1c6a:	01 c0       	rjmp	.+2      	; 0x1c6e <dtostrf+0x16>
    1c6c:	a4 e0       	ldi	r26, 0x04	; 4
    1c6e:	e4 2f       	mov	r30, r20
    1c70:	ff 27       	eor	r31, r31
    1c72:	e7 fd       	sbrc	r30, 7
    1c74:	f0 95       	com	r31
    1c76:	f7 ff       	sbrs	r31, 7
    1c78:	03 c0       	rjmp	.+6      	; 0x1c80 <dtostrf+0x28>
    1c7a:	f0 95       	com	r31
    1c7c:	e1 95       	neg	r30
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	4c 2f       	mov	r20, r28
    1c82:	51 2f       	mov	r21, r17
    1c84:	2e 2f       	mov	r18, r30
    1c86:	03 2f       	mov	r16, r19
    1c88:	ea 2e       	mov	r14, r26
    1c8a:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dtoa_prf>
    1c8e:	8c 2f       	mov	r24, r28
    1c90:	91 2f       	mov	r25, r17
    1c92:	cf 91       	pop	r28
    1c94:	1f 91       	pop	r17
    1c96:	0f 91       	pop	r16
    1c98:	ef 90       	pop	r14
    1c9a:	08 95       	ret

00001c9c <utoa>:
    1c9c:	fb 01       	movw	r30, r22
    1c9e:	9f 01       	movw	r18, r30
    1ca0:	42 30       	cpi	r20, 0x02	; 2
    1ca2:	74 f0       	brlt	.+28     	; 0x1cc0 <utoa+0x24>
    1ca4:	45 32       	cpi	r20, 0x25	; 37
    1ca6:	64 f4       	brge	.+24     	; 0x1cc0 <utoa+0x24>
    1ca8:	64 2f       	mov	r22, r20
    1caa:	77 27       	eor	r23, r23
    1cac:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__udivmodhi4>
    1cb0:	80 5d       	subi	r24, 0xD0	; 208
    1cb2:	8a 33       	cpi	r24, 0x3A	; 58
    1cb4:	0c f0       	brlt	.+2      	; 0x1cb8 <utoa+0x1c>
    1cb6:	89 5d       	subi	r24, 0xD9	; 217
    1cb8:	81 93       	st	Z+, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	00 97       	sbiw	r24, 0x00	; 0
    1cbe:	a1 f7       	brne	.-24     	; 0x1ca8 <utoa+0xc>
    1cc0:	10 82       	st	Z, r1
    1cc2:	c9 01       	movw	r24, r18
    1cc4:	0c 94 94 10 	jmp	0x2128	; 0x2128 <strrev>

00001cc8 <dtoa_prf>:
    1cc8:	a9 e0       	ldi	r26, 0x09	; 9
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	ea e6       	ldi	r30, 0x6A	; 106
    1cce:	fe e0       	ldi	r31, 0x0E	; 14
    1cd0:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__prologue_saves__+0x8>
    1cd4:	6a 01       	movw	r12, r20
    1cd6:	12 2f       	mov	r17, r18
    1cd8:	f0 2e       	mov	r15, r16
    1cda:	2b e3       	ldi	r18, 0x3B	; 59
    1cdc:	20 17       	cp	r18, r16
    1cde:	18 f0       	brcs	.+6      	; 0x1ce6 <dtoa_prf+0x1e>
    1ce0:	b0 2e       	mov	r11, r16
    1ce2:	b3 94       	inc	r11
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <dtoa_prf+0x22>
    1ce6:	3c e3       	ldi	r19, 0x3C	; 60
    1ce8:	b3 2e       	mov	r11, r19
    1cea:	ae 01       	movw	r20, r28
    1cec:	4f 5f       	subi	r20, 0xFF	; 255
    1cee:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf0:	27 e0       	ldi	r18, 0x07	; 7
    1cf2:	0b 2d       	mov	r16, r11
    1cf4:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <__ftoa_engine>
    1cf8:	bc 01       	movw	r22, r24
    1cfa:	a9 81       	ldd	r26, Y+1	; 0x01
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	cd 01       	movw	r24, r26
    1d00:	89 70       	andi	r24, 0x09	; 9
    1d02:	90 70       	andi	r25, 0x00	; 0
    1d04:	81 30       	cpi	r24, 0x01	; 1
    1d06:	91 05       	cpc	r25, r1
    1d08:	31 f0       	breq	.+12     	; 0x1d16 <dtoa_prf+0x4e>
    1d0a:	e1 fc       	sbrc	r14, 1
    1d0c:	06 c0       	rjmp	.+12     	; 0x1d1a <dtoa_prf+0x52>
    1d0e:	e0 fe       	sbrs	r14, 0
    1d10:	06 c0       	rjmp	.+12     	; 0x1d1e <dtoa_prf+0x56>
    1d12:	40 e2       	ldi	r20, 0x20	; 32
    1d14:	05 c0       	rjmp	.+10     	; 0x1d20 <dtoa_prf+0x58>
    1d16:	4d e2       	ldi	r20, 0x2D	; 45
    1d18:	03 c0       	rjmp	.+6      	; 0x1d20 <dtoa_prf+0x58>
    1d1a:	4b e2       	ldi	r20, 0x2B	; 43
    1d1c:	01 c0       	rjmp	.+2      	; 0x1d20 <dtoa_prf+0x58>
    1d1e:	40 e0       	ldi	r20, 0x00	; 0
    1d20:	a3 ff       	sbrs	r26, 3
    1d22:	36 c0       	rjmp	.+108    	; 0x1d90 <dtoa_prf+0xc8>
    1d24:	44 23       	and	r20, r20
    1d26:	11 f0       	breq	.+4      	; 0x1d2c <dtoa_prf+0x64>
    1d28:	84 e0       	ldi	r24, 0x04	; 4
    1d2a:	01 c0       	rjmp	.+2      	; 0x1d2e <dtoa_prf+0x66>
    1d2c:	83 e0       	ldi	r24, 0x03	; 3
    1d2e:	81 17       	cp	r24, r17
    1d30:	10 f4       	brcc	.+4      	; 0x1d36 <dtoa_prf+0x6e>
    1d32:	18 1b       	sub	r17, r24
    1d34:	01 c0       	rjmp	.+2      	; 0x1d38 <dtoa_prf+0x70>
    1d36:	10 e0       	ldi	r17, 0x00	; 0
    1d38:	e4 fc       	sbrc	r14, 4
    1d3a:	0b c0       	rjmp	.+22     	; 0x1d52 <dtoa_prf+0x8a>
    1d3c:	91 2f       	mov	r25, r17
    1d3e:	f6 01       	movw	r30, r12
    1d40:	80 e2       	ldi	r24, 0x20	; 32
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <dtoa_prf+0x80>
    1d44:	81 93       	st	Z+, r24
    1d46:	91 50       	subi	r25, 0x01	; 1
    1d48:	99 23       	and	r25, r25
    1d4a:	e1 f7       	brne	.-8      	; 0x1d44 <dtoa_prf+0x7c>
    1d4c:	c1 0e       	add	r12, r17
    1d4e:	d1 1c       	adc	r13, r1
    1d50:	10 e0       	ldi	r17, 0x00	; 0
    1d52:	44 23       	and	r20, r20
    1d54:	19 f0       	breq	.+6      	; 0x1d5c <dtoa_prf+0x94>
    1d56:	f6 01       	movw	r30, r12
    1d58:	41 93       	st	Z+, r20
    1d5a:	6f 01       	movw	r12, r30
    1d5c:	e2 fe       	sbrs	r14, 2
    1d5e:	05 c0       	rjmp	.+10     	; 0x1d6a <dtoa_prf+0xa2>
    1d60:	8e e4       	ldi	r24, 0x4E	; 78
    1d62:	f6 01       	movw	r30, r12
    1d64:	80 83       	st	Z, r24
    1d66:	91 e4       	ldi	r25, 0x41	; 65
    1d68:	04 c0       	rjmp	.+8      	; 0x1d72 <dtoa_prf+0xaa>
    1d6a:	8e e6       	ldi	r24, 0x6E	; 110
    1d6c:	f6 01       	movw	r30, r12
    1d6e:	80 83       	st	Z, r24
    1d70:	91 e6       	ldi	r25, 0x61	; 97
    1d72:	91 83       	std	Z+1, r25	; 0x01
    1d74:	82 83       	std	Z+2, r24	; 0x02
    1d76:	83 e0       	ldi	r24, 0x03	; 3
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	c8 0e       	add	r12, r24
    1d7c:	d9 1e       	adc	r13, r25
    1d7e:	81 2f       	mov	r24, r17
    1d80:	f6 01       	movw	r30, r12
    1d82:	90 e2       	ldi	r25, 0x20	; 32
    1d84:	02 c0       	rjmp	.+4      	; 0x1d8a <dtoa_prf+0xc2>
    1d86:	91 93       	st	Z+, r25
    1d88:	81 50       	subi	r24, 0x01	; 1
    1d8a:	88 23       	and	r24, r24
    1d8c:	e1 f7       	brne	.-8      	; 0x1d86 <dtoa_prf+0xbe>
    1d8e:	3a c0       	rjmp	.+116    	; 0x1e04 <dtoa_prf+0x13c>
    1d90:	a2 ff       	sbrs	r26, 2
    1d92:	3f c0       	rjmp	.+126    	; 0x1e12 <dtoa_prf+0x14a>
    1d94:	44 23       	and	r20, r20
    1d96:	11 f0       	breq	.+4      	; 0x1d9c <dtoa_prf+0xd4>
    1d98:	84 e0       	ldi	r24, 0x04	; 4
    1d9a:	01 c0       	rjmp	.+2      	; 0x1d9e <dtoa_prf+0xd6>
    1d9c:	83 e0       	ldi	r24, 0x03	; 3
    1d9e:	81 17       	cp	r24, r17
    1da0:	10 f4       	brcc	.+4      	; 0x1da6 <dtoa_prf+0xde>
    1da2:	18 1b       	sub	r17, r24
    1da4:	01 c0       	rjmp	.+2      	; 0x1da8 <dtoa_prf+0xe0>
    1da6:	10 e0       	ldi	r17, 0x00	; 0
    1da8:	e4 fc       	sbrc	r14, 4
    1daa:	0b c0       	rjmp	.+22     	; 0x1dc2 <dtoa_prf+0xfa>
    1dac:	91 2f       	mov	r25, r17
    1dae:	f6 01       	movw	r30, r12
    1db0:	80 e2       	ldi	r24, 0x20	; 32
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <dtoa_prf+0xf0>
    1db4:	81 93       	st	Z+, r24
    1db6:	91 50       	subi	r25, 0x01	; 1
    1db8:	99 23       	and	r25, r25
    1dba:	e1 f7       	brne	.-8      	; 0x1db4 <dtoa_prf+0xec>
    1dbc:	c1 0e       	add	r12, r17
    1dbe:	d1 1c       	adc	r13, r1
    1dc0:	10 e0       	ldi	r17, 0x00	; 0
    1dc2:	44 23       	and	r20, r20
    1dc4:	19 f0       	breq	.+6      	; 0x1dcc <dtoa_prf+0x104>
    1dc6:	f6 01       	movw	r30, r12
    1dc8:	41 93       	st	Z+, r20
    1dca:	6f 01       	movw	r12, r30
    1dcc:	e2 fe       	sbrs	r14, 2
    1dce:	07 c0       	rjmp	.+14     	; 0x1dde <dtoa_prf+0x116>
    1dd0:	89 e4       	ldi	r24, 0x49	; 73
    1dd2:	f6 01       	movw	r30, r12
    1dd4:	80 83       	st	Z, r24
    1dd6:	8e e4       	ldi	r24, 0x4E	; 78
    1dd8:	81 83       	std	Z+1, r24	; 0x01
    1dda:	86 e4       	ldi	r24, 0x46	; 70
    1ddc:	06 c0       	rjmp	.+12     	; 0x1dea <dtoa_prf+0x122>
    1dde:	89 e6       	ldi	r24, 0x69	; 105
    1de0:	f6 01       	movw	r30, r12
    1de2:	80 83       	st	Z, r24
    1de4:	8e e6       	ldi	r24, 0x6E	; 110
    1de6:	81 83       	std	Z+1, r24	; 0x01
    1de8:	86 e6       	ldi	r24, 0x66	; 102
    1dea:	82 83       	std	Z+2, r24	; 0x02
    1dec:	83 e0       	ldi	r24, 0x03	; 3
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	c8 0e       	add	r12, r24
    1df2:	d9 1e       	adc	r13, r25
    1df4:	81 2f       	mov	r24, r17
    1df6:	f6 01       	movw	r30, r12
    1df8:	90 e2       	ldi	r25, 0x20	; 32
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <dtoa_prf+0x138>
    1dfc:	91 93       	st	Z+, r25
    1dfe:	81 50       	subi	r24, 0x01	; 1
    1e00:	88 23       	and	r24, r24
    1e02:	e1 f7       	brne	.-8      	; 0x1dfc <dtoa_prf+0x134>
    1e04:	c1 0e       	add	r12, r17
    1e06:	d1 1c       	adc	r13, r1
    1e08:	f6 01       	movw	r30, r12
    1e0a:	10 82       	st	Z, r1
    1e0c:	8e ef       	ldi	r24, 0xFE	; 254
    1e0e:	9f ef       	ldi	r25, 0xFF	; 255
    1e10:	af c0       	rjmp	.+350    	; 0x1f70 <dtoa_prf+0x2a8>
    1e12:	21 e0       	ldi	r18, 0x01	; 1
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	44 23       	and	r20, r20
    1e18:	11 f4       	brne	.+4      	; 0x1e1e <dtoa_prf+0x156>
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	16 16       	cp	r1, r22
    1e20:	17 06       	cpc	r1, r23
    1e22:	1c f4       	brge	.+6      	; 0x1e2a <dtoa_prf+0x162>
    1e24:	cb 01       	movw	r24, r22
    1e26:	01 96       	adiw	r24, 0x01	; 1
    1e28:	02 c0       	rjmp	.+4      	; 0x1e2e <dtoa_prf+0x166>
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	28 0f       	add	r18, r24
    1e30:	39 1f       	adc	r19, r25
    1e32:	ff 20       	and	r15, r15
    1e34:	21 f0       	breq	.+8      	; 0x1e3e <dtoa_prf+0x176>
    1e36:	8f 2d       	mov	r24, r15
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	01 96       	adiw	r24, 0x01	; 1
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <dtoa_prf+0x17a>
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	82 0f       	add	r24, r18
    1e44:	93 1f       	adc	r25, r19
    1e46:	21 2f       	mov	r18, r17
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	82 17       	cp	r24, r18
    1e4c:	93 07       	cpc	r25, r19
    1e4e:	1c f4       	brge	.+6      	; 0x1e56 <dtoa_prf+0x18e>
    1e50:	51 2f       	mov	r21, r17
    1e52:	58 1b       	sub	r21, r24
    1e54:	01 c0       	rjmp	.+2      	; 0x1e58 <dtoa_prf+0x190>
    1e56:	50 e0       	ldi	r21, 0x00	; 0
    1e58:	8e 2d       	mov	r24, r14
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	9c 01       	movw	r18, r24
    1e5e:	20 71       	andi	r18, 0x10	; 16
    1e60:	30 70       	andi	r19, 0x00	; 0
    1e62:	e4 fc       	sbrc	r14, 4
    1e64:	0d c0       	rjmp	.+26     	; 0x1e80 <dtoa_prf+0x1b8>
    1e66:	e3 fc       	sbrc	r14, 3
    1e68:	0b c0       	rjmp	.+22     	; 0x1e80 <dtoa_prf+0x1b8>
    1e6a:	85 2f       	mov	r24, r21
    1e6c:	f6 01       	movw	r30, r12
    1e6e:	90 e2       	ldi	r25, 0x20	; 32
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <dtoa_prf+0x1ae>
    1e72:	91 93       	st	Z+, r25
    1e74:	81 50       	subi	r24, 0x01	; 1
    1e76:	88 23       	and	r24, r24
    1e78:	e1 f7       	brne	.-8      	; 0x1e72 <dtoa_prf+0x1aa>
    1e7a:	c5 0e       	add	r12, r21
    1e7c:	d1 1c       	adc	r13, r1
    1e7e:	50 e0       	ldi	r21, 0x00	; 0
    1e80:	44 23       	and	r20, r20
    1e82:	19 f0       	breq	.+6      	; 0x1e8a <dtoa_prf+0x1c2>
    1e84:	f6 01       	movw	r30, r12
    1e86:	41 93       	st	Z+, r20
    1e88:	6f 01       	movw	r12, r30
    1e8a:	21 15       	cp	r18, r1
    1e8c:	31 05       	cpc	r19, r1
    1e8e:	59 f4       	brne	.+22     	; 0x1ea6 <dtoa_prf+0x1de>
    1e90:	85 2f       	mov	r24, r21
    1e92:	f6 01       	movw	r30, r12
    1e94:	90 e3       	ldi	r25, 0x30	; 48
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <dtoa_prf+0x1d4>
    1e98:	91 93       	st	Z+, r25
    1e9a:	81 50       	subi	r24, 0x01	; 1
    1e9c:	88 23       	and	r24, r24
    1e9e:	e1 f7       	brne	.-8      	; 0x1e98 <dtoa_prf+0x1d0>
    1ea0:	c5 0e       	add	r12, r21
    1ea2:	d1 1c       	adc	r13, r1
    1ea4:	50 e0       	ldi	r21, 0x00	; 0
    1ea6:	b6 0e       	add	r11, r22
    1ea8:	4a 81       	ldd	r20, Y+2	; 0x02
    1eaa:	20 e1       	ldi	r18, 0x10	; 16
    1eac:	62 2e       	mov	r6, r18
    1eae:	71 2c       	mov	r7, r1
    1eb0:	6a 22       	and	r6, r26
    1eb2:	7b 22       	and	r7, r27
    1eb4:	a4 ff       	sbrs	r26, 4
    1eb6:	03 c0       	rjmp	.+6      	; 0x1ebe <dtoa_prf+0x1f6>
    1eb8:	41 33       	cpi	r20, 0x31	; 49
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <dtoa_prf+0x1f6>
    1ebc:	ba 94       	dec	r11
    1ebe:	1b 14       	cp	r1, r11
    1ec0:	2c f4       	brge	.+10     	; 0x1ecc <dtoa_prf+0x204>
    1ec2:	8b 2d       	mov	r24, r11
    1ec4:	89 30       	cpi	r24, 0x09	; 9
    1ec6:	18 f0       	brcs	.+6      	; 0x1ece <dtoa_prf+0x206>
    1ec8:	88 e0       	ldi	r24, 0x08	; 8
    1eca:	01 c0       	rjmp	.+2      	; 0x1ece <dtoa_prf+0x206>
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	9b 01       	movw	r18, r22
    1ed0:	77 ff       	sbrs	r23, 7
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <dtoa_prf+0x210>
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	a0 e0       	ldi	r26, 0x00	; 0
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	9e e2       	ldi	r25, 0x2E	; 46
    1ede:	e9 2e       	mov	r14, r25
    1ee0:	4b 01       	movw	r8, r22
    1ee2:	88 1a       	sub	r8, r24
    1ee4:	91 08       	sbc	r9, r1
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	82 1b       	sub	r24, r18
    1eea:	93 0b       	sbc	r25, r19
    1eec:	8e 01       	movw	r16, r28
    1eee:	0f 5f       	subi	r16, 0xFF	; 255
    1ef0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef2:	08 0f       	add	r16, r24
    1ef4:	19 1f       	adc	r17, r25
    1ef6:	8f 2d       	mov	r24, r15
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	aa 24       	eor	r10, r10
    1efc:	bb 24       	eor	r11, r11
    1efe:	a8 1a       	sub	r10, r24
    1f00:	b9 0a       	sbc	r11, r25
    1f02:	ff ef       	ldi	r31, 0xFF	; 255
    1f04:	2f 3f       	cpi	r18, 0xFF	; 255
    1f06:	3f 07       	cpc	r19, r31
    1f08:	19 f4       	brne	.+6      	; 0x1f10 <dtoa_prf+0x248>
    1f0a:	f6 01       	movw	r30, r12
    1f0c:	e1 92       	st	Z+, r14
    1f0e:	6f 01       	movw	r12, r30
    1f10:	62 17       	cp	r22, r18
    1f12:	73 07       	cpc	r23, r19
    1f14:	44 f0       	brlt	.+16     	; 0x1f26 <dtoa_prf+0x25e>
    1f16:	82 16       	cp	r8, r18
    1f18:	93 06       	cpc	r9, r19
    1f1a:	2c f4       	brge	.+10     	; 0x1f26 <dtoa_prf+0x25e>
    1f1c:	f8 01       	movw	r30, r16
    1f1e:	ea 0f       	add	r30, r26
    1f20:	fb 1f       	adc	r31, r27
    1f22:	81 81       	ldd	r24, Z+1	; 0x01
    1f24:	01 c0       	rjmp	.+2      	; 0x1f28 <dtoa_prf+0x260>
    1f26:	80 e3       	ldi	r24, 0x30	; 48
    1f28:	21 50       	subi	r18, 0x01	; 1
    1f2a:	30 40       	sbci	r19, 0x00	; 0
    1f2c:	11 96       	adiw	r26, 0x01	; 1
    1f2e:	2a 15       	cp	r18, r10
    1f30:	3b 05       	cpc	r19, r11
    1f32:	24 f0       	brlt	.+8      	; 0x1f3c <dtoa_prf+0x274>
    1f34:	f6 01       	movw	r30, r12
    1f36:	81 93       	st	Z+, r24
    1f38:	6f 01       	movw	r12, r30
    1f3a:	e3 cf       	rjmp	.-58     	; 0x1f02 <dtoa_prf+0x23a>
    1f3c:	26 17       	cp	r18, r22
    1f3e:	37 07       	cpc	r19, r23
    1f40:	41 f4       	brne	.+16     	; 0x1f52 <dtoa_prf+0x28a>
    1f42:	46 33       	cpi	r20, 0x36	; 54
    1f44:	28 f4       	brcc	.+10     	; 0x1f50 <dtoa_prf+0x288>
    1f46:	45 33       	cpi	r20, 0x35	; 53
    1f48:	21 f4       	brne	.+8      	; 0x1f52 <dtoa_prf+0x28a>
    1f4a:	61 14       	cp	r6, r1
    1f4c:	71 04       	cpc	r7, r1
    1f4e:	09 f4       	brne	.+2      	; 0x1f52 <dtoa_prf+0x28a>
    1f50:	81 e3       	ldi	r24, 0x31	; 49
    1f52:	f6 01       	movw	r30, r12
    1f54:	81 93       	st	Z+, r24
    1f56:	85 2f       	mov	r24, r21
    1f58:	df 01       	movw	r26, r30
    1f5a:	90 e2       	ldi	r25, 0x20	; 32
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <dtoa_prf+0x29a>
    1f5e:	9d 93       	st	X+, r25
    1f60:	81 50       	subi	r24, 0x01	; 1
    1f62:	88 23       	and	r24, r24
    1f64:	e1 f7       	brne	.-8      	; 0x1f5e <dtoa_prf+0x296>
    1f66:	e5 0f       	add	r30, r21
    1f68:	f1 1d       	adc	r31, r1
    1f6a:	10 82       	st	Z, r1
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	29 96       	adiw	r28, 0x09	; 9
    1f72:	ee e0       	ldi	r30, 0x0E	; 14
    1f74:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__epilogue_restores__+0x8>

00001f78 <__ftoa_engine>:
    1f78:	28 30       	cpi	r18, 0x08	; 8
    1f7a:	08 f0       	brcs	.+2      	; 0x1f7e <__ftoa_engine+0x6>
    1f7c:	27 e0       	ldi	r18, 0x07	; 7
    1f7e:	33 27       	eor	r19, r19
    1f80:	da 01       	movw	r26, r20
    1f82:	99 0f       	add	r25, r25
    1f84:	31 1d       	adc	r19, r1
    1f86:	87 fd       	sbrc	r24, 7
    1f88:	91 60       	ori	r25, 0x01	; 1
    1f8a:	00 96       	adiw	r24, 0x00	; 0
    1f8c:	61 05       	cpc	r22, r1
    1f8e:	71 05       	cpc	r23, r1
    1f90:	39 f4       	brne	.+14     	; 0x1fa0 <__ftoa_engine+0x28>
    1f92:	32 60       	ori	r19, 0x02	; 2
    1f94:	2e 5f       	subi	r18, 0xFE	; 254
    1f96:	3d 93       	st	X+, r19
    1f98:	30 e3       	ldi	r19, 0x30	; 48
    1f9a:	2a 95       	dec	r18
    1f9c:	e1 f7       	brne	.-8      	; 0x1f96 <__ftoa_engine+0x1e>
    1f9e:	08 95       	ret
    1fa0:	9f 3f       	cpi	r25, 0xFF	; 255
    1fa2:	30 f0       	brcs	.+12     	; 0x1fb0 <__ftoa_engine+0x38>
    1fa4:	80 38       	cpi	r24, 0x80	; 128
    1fa6:	71 05       	cpc	r23, r1
    1fa8:	61 05       	cpc	r22, r1
    1faa:	09 f0       	breq	.+2      	; 0x1fae <__ftoa_engine+0x36>
    1fac:	3c 5f       	subi	r19, 0xFC	; 252
    1fae:	3c 5f       	subi	r19, 0xFC	; 252
    1fb0:	3d 93       	st	X+, r19
    1fb2:	91 30       	cpi	r25, 0x01	; 1
    1fb4:	08 f0       	brcs	.+2      	; 0x1fb8 <__ftoa_engine+0x40>
    1fb6:	80 68       	ori	r24, 0x80	; 128
    1fb8:	91 1d       	adc	r25, r1
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	1f 93       	push	r17
    1fc0:	0f 93       	push	r16
    1fc2:	ff 92       	push	r15
    1fc4:	ef 92       	push	r14
    1fc6:	19 2f       	mov	r17, r25
    1fc8:	98 7f       	andi	r25, 0xF8	; 248
    1fca:	96 95       	lsr	r25
    1fcc:	e9 2f       	mov	r30, r25
    1fce:	96 95       	lsr	r25
    1fd0:	96 95       	lsr	r25
    1fd2:	e9 0f       	add	r30, r25
    1fd4:	ff 27       	eor	r31, r31
    1fd6:	ee 53       	subi	r30, 0x3E	; 62
    1fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fda:	99 27       	eor	r25, r25
    1fdc:	33 27       	eor	r19, r19
    1fde:	ee 24       	eor	r14, r14
    1fe0:	ff 24       	eor	r15, r15
    1fe2:	a7 01       	movw	r20, r14
    1fe4:	e7 01       	movw	r28, r14
    1fe6:	05 90       	lpm	r0, Z+
    1fe8:	08 94       	sec
    1fea:	07 94       	ror	r0
    1fec:	28 f4       	brcc	.+10     	; 0x1ff8 <__ftoa_engine+0x80>
    1fee:	36 0f       	add	r19, r22
    1ff0:	e7 1e       	adc	r14, r23
    1ff2:	f8 1e       	adc	r15, r24
    1ff4:	49 1f       	adc	r20, r25
    1ff6:	51 1d       	adc	r21, r1
    1ff8:	66 0f       	add	r22, r22
    1ffa:	77 1f       	adc	r23, r23
    1ffc:	88 1f       	adc	r24, r24
    1ffe:	99 1f       	adc	r25, r25
    2000:	06 94       	lsr	r0
    2002:	a1 f7       	brne	.-24     	; 0x1fec <__ftoa_engine+0x74>
    2004:	05 90       	lpm	r0, Z+
    2006:	07 94       	ror	r0
    2008:	28 f4       	brcc	.+10     	; 0x2014 <__ftoa_engine+0x9c>
    200a:	e7 0e       	add	r14, r23
    200c:	f8 1e       	adc	r15, r24
    200e:	49 1f       	adc	r20, r25
    2010:	56 1f       	adc	r21, r22
    2012:	c1 1d       	adc	r28, r1
    2014:	77 0f       	add	r23, r23
    2016:	88 1f       	adc	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	66 1f       	adc	r22, r22
    201c:	06 94       	lsr	r0
    201e:	a1 f7       	brne	.-24     	; 0x2008 <__ftoa_engine+0x90>
    2020:	05 90       	lpm	r0, Z+
    2022:	07 94       	ror	r0
    2024:	28 f4       	brcc	.+10     	; 0x2030 <__ftoa_engine+0xb8>
    2026:	f8 0e       	add	r15, r24
    2028:	49 1f       	adc	r20, r25
    202a:	56 1f       	adc	r21, r22
    202c:	c7 1f       	adc	r28, r23
    202e:	d1 1d       	adc	r29, r1
    2030:	88 0f       	add	r24, r24
    2032:	99 1f       	adc	r25, r25
    2034:	66 1f       	adc	r22, r22
    2036:	77 1f       	adc	r23, r23
    2038:	06 94       	lsr	r0
    203a:	a1 f7       	brne	.-24     	; 0x2024 <__ftoa_engine+0xac>
    203c:	05 90       	lpm	r0, Z+
    203e:	07 94       	ror	r0
    2040:	20 f4       	brcc	.+8      	; 0x204a <__ftoa_engine+0xd2>
    2042:	49 0f       	add	r20, r25
    2044:	56 1f       	adc	r21, r22
    2046:	c7 1f       	adc	r28, r23
    2048:	d8 1f       	adc	r29, r24
    204a:	99 0f       	add	r25, r25
    204c:	66 1f       	adc	r22, r22
    204e:	77 1f       	adc	r23, r23
    2050:	88 1f       	adc	r24, r24
    2052:	06 94       	lsr	r0
    2054:	a9 f7       	brne	.-22     	; 0x2040 <__ftoa_engine+0xc8>
    2056:	84 91       	lpm	r24, Z
    2058:	10 95       	com	r17
    205a:	17 70       	andi	r17, 0x07	; 7
    205c:	41 f0       	breq	.+16     	; 0x206e <__ftoa_engine+0xf6>
    205e:	d6 95       	lsr	r29
    2060:	c7 95       	ror	r28
    2062:	57 95       	ror	r21
    2064:	47 95       	ror	r20
    2066:	f7 94       	ror	r15
    2068:	e7 94       	ror	r14
    206a:	1a 95       	dec	r17
    206c:	c1 f7       	brne	.-16     	; 0x205e <__ftoa_engine+0xe6>
    206e:	e8 e6       	ldi	r30, 0x68	; 104
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	68 94       	set
    2074:	15 90       	lpm	r1, Z+
    2076:	15 91       	lpm	r17, Z+
    2078:	35 91       	lpm	r19, Z+
    207a:	65 91       	lpm	r22, Z+
    207c:	95 91       	lpm	r25, Z+
    207e:	05 90       	lpm	r0, Z+
    2080:	7f e2       	ldi	r23, 0x2F	; 47
    2082:	73 95       	inc	r23
    2084:	e1 18       	sub	r14, r1
    2086:	f1 0a       	sbc	r15, r17
    2088:	43 0b       	sbc	r20, r19
    208a:	56 0b       	sbc	r21, r22
    208c:	c9 0b       	sbc	r28, r25
    208e:	d0 09       	sbc	r29, r0
    2090:	c0 f7       	brcc	.-16     	; 0x2082 <__ftoa_engine+0x10a>
    2092:	e1 0c       	add	r14, r1
    2094:	f1 1e       	adc	r15, r17
    2096:	43 1f       	adc	r20, r19
    2098:	56 1f       	adc	r21, r22
    209a:	c9 1f       	adc	r28, r25
    209c:	d0 1d       	adc	r29, r0
    209e:	7e f4       	brtc	.+30     	; 0x20be <__ftoa_engine+0x146>
    20a0:	70 33       	cpi	r23, 0x30	; 48
    20a2:	11 f4       	brne	.+4      	; 0x20a8 <__ftoa_engine+0x130>
    20a4:	8a 95       	dec	r24
    20a6:	e6 cf       	rjmp	.-52     	; 0x2074 <__ftoa_engine+0xfc>
    20a8:	e8 94       	clt
    20aa:	01 50       	subi	r16, 0x01	; 1
    20ac:	30 f0       	brcs	.+12     	; 0x20ba <__ftoa_engine+0x142>
    20ae:	08 0f       	add	r16, r24
    20b0:	0a f4       	brpl	.+2      	; 0x20b4 <__ftoa_engine+0x13c>
    20b2:	00 27       	eor	r16, r16
    20b4:	02 17       	cp	r16, r18
    20b6:	08 f4       	brcc	.+2      	; 0x20ba <__ftoa_engine+0x142>
    20b8:	20 2f       	mov	r18, r16
    20ba:	23 95       	inc	r18
    20bc:	02 2f       	mov	r16, r18
    20be:	7a 33       	cpi	r23, 0x3A	; 58
    20c0:	28 f0       	brcs	.+10     	; 0x20cc <__ftoa_engine+0x154>
    20c2:	79 e3       	ldi	r23, 0x39	; 57
    20c4:	7d 93       	st	X+, r23
    20c6:	2a 95       	dec	r18
    20c8:	e9 f7       	brne	.-6      	; 0x20c4 <__ftoa_engine+0x14c>
    20ca:	10 c0       	rjmp	.+32     	; 0x20ec <__ftoa_engine+0x174>
    20cc:	7d 93       	st	X+, r23
    20ce:	2a 95       	dec	r18
    20d0:	89 f6       	brne	.-94     	; 0x2074 <__ftoa_engine+0xfc>
    20d2:	06 94       	lsr	r0
    20d4:	97 95       	ror	r25
    20d6:	67 95       	ror	r22
    20d8:	37 95       	ror	r19
    20da:	17 95       	ror	r17
    20dc:	17 94       	ror	r1
    20de:	e1 18       	sub	r14, r1
    20e0:	f1 0a       	sbc	r15, r17
    20e2:	43 0b       	sbc	r20, r19
    20e4:	56 0b       	sbc	r21, r22
    20e6:	c9 0b       	sbc	r28, r25
    20e8:	d0 09       	sbc	r29, r0
    20ea:	98 f0       	brcs	.+38     	; 0x2112 <__ftoa_engine+0x19a>
    20ec:	23 95       	inc	r18
    20ee:	7e 91       	ld	r23, -X
    20f0:	73 95       	inc	r23
    20f2:	7a 33       	cpi	r23, 0x3A	; 58
    20f4:	08 f0       	brcs	.+2      	; 0x20f8 <__ftoa_engine+0x180>
    20f6:	70 e3       	ldi	r23, 0x30	; 48
    20f8:	7c 93       	st	X, r23
    20fa:	20 13       	cpse	r18, r16
    20fc:	b8 f7       	brcc	.-18     	; 0x20ec <__ftoa_engine+0x174>
    20fe:	7e 91       	ld	r23, -X
    2100:	70 61       	ori	r23, 0x10	; 16
    2102:	7d 93       	st	X+, r23
    2104:	30 f0       	brcs	.+12     	; 0x2112 <__ftoa_engine+0x19a>
    2106:	83 95       	inc	r24
    2108:	71 e3       	ldi	r23, 0x31	; 49
    210a:	7d 93       	st	X+, r23
    210c:	70 e3       	ldi	r23, 0x30	; 48
    210e:	2a 95       	dec	r18
    2110:	e1 f7       	brne	.-8      	; 0x210a <__ftoa_engine+0x192>
    2112:	11 24       	eor	r1, r1
    2114:	ef 90       	pop	r14
    2116:	ff 90       	pop	r15
    2118:	0f 91       	pop	r16
    211a:	1f 91       	pop	r17
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	99 27       	eor	r25, r25
    2122:	87 fd       	sbrc	r24, 7
    2124:	90 95       	com	r25
    2126:	08 95       	ret

00002128 <strrev>:
    2128:	dc 01       	movw	r26, r24
    212a:	fc 01       	movw	r30, r24
    212c:	67 2f       	mov	r22, r23
    212e:	71 91       	ld	r23, Z+
    2130:	77 23       	and	r23, r23
    2132:	e1 f7       	brne	.-8      	; 0x212c <strrev+0x4>
    2134:	32 97       	sbiw	r30, 0x02	; 2
    2136:	04 c0       	rjmp	.+8      	; 0x2140 <strrev+0x18>
    2138:	7c 91       	ld	r23, X
    213a:	6d 93       	st	X+, r22
    213c:	70 83       	st	Z, r23
    213e:	62 91       	ld	r22, -Z
    2140:	ae 17       	cp	r26, r30
    2142:	bf 07       	cpc	r27, r31
    2144:	c8 f3       	brcs	.-14     	; 0x2138 <strrev+0x10>
    2146:	08 95       	ret

00002148 <__prologue_saves__>:
    2148:	2f 92       	push	r2
    214a:	3f 92       	push	r3
    214c:	4f 92       	push	r4
    214e:	5f 92       	push	r5
    2150:	6f 92       	push	r6
    2152:	7f 92       	push	r7
    2154:	8f 92       	push	r8
    2156:	9f 92       	push	r9
    2158:	af 92       	push	r10
    215a:	bf 92       	push	r11
    215c:	cf 92       	push	r12
    215e:	df 92       	push	r13
    2160:	ef 92       	push	r14
    2162:	ff 92       	push	r15
    2164:	0f 93       	push	r16
    2166:	1f 93       	push	r17
    2168:	cf 93       	push	r28
    216a:	df 93       	push	r29
    216c:	cd b7       	in	r28, 0x3d	; 61
    216e:	de b7       	in	r29, 0x3e	; 62
    2170:	ca 1b       	sub	r28, r26
    2172:	db 0b       	sbc	r29, r27
    2174:	0f b6       	in	r0, 0x3f	; 63
    2176:	f8 94       	cli
    2178:	de bf       	out	0x3e, r29	; 62
    217a:	0f be       	out	0x3f, r0	; 63
    217c:	cd bf       	out	0x3d, r28	; 61
    217e:	09 94       	ijmp

00002180 <__epilogue_restores__>:
    2180:	2a 88       	ldd	r2, Y+18	; 0x12
    2182:	39 88       	ldd	r3, Y+17	; 0x11
    2184:	48 88       	ldd	r4, Y+16	; 0x10
    2186:	5f 84       	ldd	r5, Y+15	; 0x0f
    2188:	6e 84       	ldd	r6, Y+14	; 0x0e
    218a:	7d 84       	ldd	r7, Y+13	; 0x0d
    218c:	8c 84       	ldd	r8, Y+12	; 0x0c
    218e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2190:	aa 84       	ldd	r10, Y+10	; 0x0a
    2192:	b9 84       	ldd	r11, Y+9	; 0x09
    2194:	c8 84       	ldd	r12, Y+8	; 0x08
    2196:	df 80       	ldd	r13, Y+7	; 0x07
    2198:	ee 80       	ldd	r14, Y+6	; 0x06
    219a:	fd 80       	ldd	r15, Y+5	; 0x05
    219c:	0c 81       	ldd	r16, Y+4	; 0x04
    219e:	1b 81       	ldd	r17, Y+3	; 0x03
    21a0:	aa 81       	ldd	r26, Y+2	; 0x02
    21a2:	b9 81       	ldd	r27, Y+1	; 0x01
    21a4:	ce 0f       	add	r28, r30
    21a6:	d1 1d       	adc	r29, r1
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	f8 94       	cli
    21ac:	de bf       	out	0x3e, r29	; 62
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	cd bf       	out	0x3d, r28	; 61
    21b2:	ed 01       	movw	r28, r26
    21b4:	08 95       	ret

000021b6 <_exit>:
    21b6:	f8 94       	cli

000021b8 <__stop_program>:
    21b8:	ff cf       	rjmp	.-2      	; 0x21b8 <__stop_program>
