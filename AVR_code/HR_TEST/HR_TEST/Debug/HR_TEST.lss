
HR_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00001e5c  00001ef0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000078  0080013e  0080013e  00001f2e  2**0
                  ALLOC
  3 .stab         00002afc  00000000  00000000  00001f30  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000710  00000000  00000000  00004a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00005140  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000192c  00000000  00000000  000052e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004f7  00000000  00000000  00006c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb4  00000000  00000000  00007103  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000608  00000000  00000000  00007cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000812  00000000  00000000  000082c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001122  00000000  00000000  00008ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00009bf4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__ctors_end>
       4:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__vector_1>
       8:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
       c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      10:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      14:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      18:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      1c:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__vector_7>
      20:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      24:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      28:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      2c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      30:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      34:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <__vector_13>
      38:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      3c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      40:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      44:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      48:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      4c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      50:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      54:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      58:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      5c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      60:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      64:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	lds	r16, 0x00
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <_ZN12heartMonitor8setAveHREf+0x2c>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <_ZN8odometer11updateStatsEv+0xc2>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__SREG__+0x45>
      f4:	ba a5       	lds	r27, 0x6a
      f6:	6f a5       	lds	r22, 0x6f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__SREG__+0x89>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <_ZN8odometer11setOdometerEffffjjjj+0x52>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <__do_clear_bss+0x6>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__SREG__+0xd1>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <_ZN8odometerC1Ev+0x16>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <__ctors_start>:
     162:	5b 0a       	sbc	r5, r27

00000164 <__ctors_end>:
     164:	11 24       	eor	r1, r1
     166:	1f be       	out	0x3f, r1	; 63
     168:	cf ef       	ldi	r28, 0xFF	; 255
     16a:	d8 e0       	ldi	r29, 0x08	; 8
     16c:	de bf       	out	0x3e, r29	; 62
     16e:	cd bf       	out	0x3d, r28	; 61

00000170 <__do_copy_data>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a0 e0       	ldi	r26, 0x00	; 0
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	ec e5       	ldi	r30, 0x5C	; 92
     178:	fe e1       	ldi	r31, 0x1E	; 30
     17a:	02 c0       	rjmp	.+4      	; 0x180 <__do_copy_data+0x10>
     17c:	05 90       	lpm	r0, Z+
     17e:	0d 92       	st	X+, r0
     180:	ae 33       	cpi	r26, 0x3E	; 62
     182:	b1 07       	cpc	r27, r17
     184:	d9 f7       	brne	.-10     	; 0x17c <__do_copy_data+0xc>

00000186 <__do_clear_bss>:
     186:	11 e0       	ldi	r17, 0x01	; 1
     188:	ae e3       	ldi	r26, 0x3E	; 62
     18a:	b1 e0       	ldi	r27, 0x01	; 1
     18c:	01 c0       	rjmp	.+2      	; 0x190 <.do_clear_bss_start>

0000018e <.do_clear_bss_loop>:
     18e:	1d 92       	st	X+, r1

00000190 <.do_clear_bss_start>:
     190:	a6 3b       	cpi	r26, 0xB6	; 182
     192:	b1 07       	cpc	r27, r17
     194:	e1 f7       	brne	.-8      	; 0x18e <.do_clear_bss_loop>

00000196 <__do_global_ctors>:
     196:	11 e0       	ldi	r17, 0x01	; 1
     198:	c4 e6       	ldi	r28, 0x64	; 100
     19a:	d1 e0       	ldi	r29, 0x01	; 1
     19c:	04 c0       	rjmp	.+8      	; 0x1a6 <__do_global_ctors+0x10>
     19e:	22 97       	sbiw	r28, 0x02	; 2
     1a0:	fe 01       	movw	r30, r28
     1a2:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__tablejump__>
     1a6:	c2 36       	cpi	r28, 0x62	; 98
     1a8:	d1 07       	cpc	r29, r17
     1aa:	c9 f7       	brne	.-14     	; 0x19e <__do_global_ctors+0x8>
     1ac:	0e 94 18 08 	call	0x1030	; 0x1030 <main>
     1b0:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <_exit>

000001b4 <__bad_interrupt>:
     1b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b8 <_ZN8odometerC1Ev>:
		void resetOdometer();
		
};

//For new odometer, initialize everything
odometer::odometer(){
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	00 d0       	rcall	.+0      	; 0x1be <_ZN8odometerC1Ev+0x6>
     1be:	cd b7       	in	r28, 0x3d	; 61
     1c0:	de b7       	in	r29, 0x3e	; 62
     1c2:	9a 83       	std	Y+2, r25	; 0x02
     1c4:	89 83       	std	Y+1, r24	; 0x01
	wheelSize=DEFAULT_WHEEL_SIZE;
     1c6:	29 81       	ldd	r18, Y+1	; 0x01
     1c8:	3a 81       	ldd	r19, Y+2	; 0x02
     1ca:	82 e3       	ldi	r24, 0x32	; 50
     1cc:	96 ef       	ldi	r25, 0xF6	; 246
     1ce:	a5 eb       	ldi	r26, 0xB5	; 181
     1d0:	ba e3       	ldi	r27, 0x3A	; 58
     1d2:	f9 01       	movw	r30, r18
     1d4:	84 87       	std	Z+12, r24	; 0x0c
     1d6:	95 87       	std	Z+13, r25	; 0x0d
     1d8:	a6 87       	std	Z+14, r26	; 0x0e
     1da:	b7 87       	std	Z+15, r27	; 0x0f
	resetOdometer();
     1dc:	89 81       	ldd	r24, Y+1	; 0x01
     1de:	9a 81       	ldd	r25, Y+2	; 0x02
     1e0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_ZN8odometer13resetOdometerEv>
}
     1e4:	0f 90       	pop	r0
     1e6:	0f 90       	pop	r0
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
     1ec:	08 95       	ret

000001ee <_ZN8odometer13resetOdometerEv>:

//How we reset odometer. Everyting is reset except WHEEL SIZE, that's done by the calling function.
void odometer::resetOdometer(){
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
     1f2:	00 d0       	rcall	.+0      	; 0x1f4 <_ZN8odometer13resetOdometerEv+0x6>
     1f4:	00 d0       	rcall	.+0      	; 0x1f6 <_ZN8odometer13resetOdometerEv+0x8>
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
     1fa:	9c 83       	std	Y+4, r25	; 0x04
     1fc:	8b 83       	std	Y+3, r24	; 0x03
	firstRun=fTrue;
     1fe:	8b 81       	ldd	r24, Y+3	; 0x03
     200:	9c 81       	ldd	r25, Y+4	; 0x04
     202:	21 e0       	ldi	r18, 0x01	; 1
     204:	fc 01       	movw	r30, r24
     206:	24 ab       	sts	0x54, r18
	aveSpeed=0;
     208:	2b 81       	ldd	r18, Y+3	; 0x03
     20a:	3c 81       	ldd	r19, Y+4	; 0x04
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	dc 01       	movw	r26, r24
     212:	f9 01       	movw	r30, r18
     214:	80 83       	st	Z, r24
     216:	91 83       	std	Z+1, r25	; 0x01
     218:	a2 83       	std	Z+2, r26	; 0x02
     21a:	b3 83       	std	Z+3, r27	; 0x03
	distance=0;
     21c:	2b 81       	ldd	r18, Y+3	; 0x03
     21e:	3c 81       	ldd	r19, Y+4	; 0x04
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	dc 01       	movw	r26, r24
     226:	f9 01       	movw	r30, r18
     228:	84 83       	std	Z+4, r24	; 0x04
     22a:	95 83       	std	Z+5, r25	; 0x05
     22c:	a6 83       	std	Z+6, r26	; 0x06
     22e:	b7 83       	std	Z+7, r27	; 0x07
	currentSpeed=0;
     230:	2b 81       	ldd	r18, Y+3	; 0x03
     232:	3c 81       	ldd	r19, Y+4	; 0x04
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	dc 01       	movw	r26, r24
     23a:	f9 01       	movw	r30, r18
     23c:	80 87       	std	Z+8, r24	; 0x08
     23e:	91 87       	std	Z+9, r25	; 0x09
     240:	a2 87       	std	Z+10, r26	; 0x0a
     242:	b3 87       	std	Z+11, r27	; 0x0b
	speedWeight=0;
     244:	2b 81       	ldd	r18, Y+3	; 0x03
     246:	3c 81       	ldd	r19, Y+4	; 0x04
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	dc 01       	movw	r26, r24
     24e:	f9 01       	movw	r30, r18
     250:	80 8b       	std	Z+16, r24	; 0x10
     252:	91 8b       	std	Z+17, r25	; 0x11
     254:	a2 8b       	std	Z+18, r26	; 0x12
     256:	b3 8b       	std	Z+19, r27	; 0x13
	speedPoints=0;
     258:	8b 81       	ldd	r24, Y+3	; 0x03
     25a:	9c 81       	ldd	r25, Y+4	; 0x04
     25c:	fc 01       	movw	r30, r24
     25e:	13 aa       	sts	0x93, r17
     260:	12 aa       	sts	0x92, r17
	sDate=0;
     262:	8b 81       	ldd	r24, Y+3	; 0x03
     264:	9c 81       	ldd	r25, Y+4	; 0x04
     266:	fc 01       	movw	r30, r24
     268:	15 8a       	std	Z+21, r1	; 0x15
     26a:	14 8a       	std	Z+20, r1	; 0x14
	sTime=0;
     26c:	8b 81       	ldd	r24, Y+3	; 0x03
     26e:	9c 81       	ldd	r25, Y+4	; 0x04
     270:	fc 01       	movw	r30, r24
     272:	17 8a       	std	Z+23, r1	; 0x17
     274:	16 8a       	std	Z+22, r1	; 0x16
	timeElapsed=0;
     276:	8b 81       	ldd	r24, Y+3	; 0x03
     278:	9c 81       	ldd	r25, Y+4	; 0x04
     27a:	fc 01       	movw	r30, r24
     27c:	15 8e       	std	Z+29, r1	; 0x1d
     27e:	14 8e       	std	Z+28, r1	; 0x1c
	for (int i=0; i<10; i++){
     280:	1a 82       	std	Y+2, r1	; 0x02
     282:	19 82       	std	Y+1, r1	; 0x01
     284:	11 c0       	rjmp	.+34     	; 0x2a8 <_ZN8odometer13resetOdometerEv+0xba>
		dataPoints[i]=0;
     286:	2b 81       	ldd	r18, Y+3	; 0x03
     288:	3c 81       	ldd	r19, Y+4	; 0x04
     28a:	89 81       	ldd	r24, Y+1	; 0x01
     28c:	9a 81       	ldd	r25, Y+2	; 0x02
     28e:	0f 96       	adiw	r24, 0x0f	; 15
     290:	88 0f       	add	r24, r24
     292:	99 1f       	adc	r25, r25
     294:	82 0f       	add	r24, r18
     296:	93 1f       	adc	r25, r19
     298:	fc 01       	movw	r30, r24
     29a:	11 82       	std	Z+1, r1	; 0x01
     29c:	10 82       	st	Z, r1
	speedWeight=0;
	speedPoints=0;
	sDate=0;
	sTime=0;
	timeElapsed=0;
	for (int i=0; i<10; i++){
     29e:	89 81       	ldd	r24, Y+1	; 0x01
     2a0:	9a 81       	ldd	r25, Y+2	; 0x02
     2a2:	01 96       	adiw	r24, 0x01	; 1
     2a4:	9a 83       	std	Y+2, r25	; 0x02
     2a6:	89 83       	std	Y+1, r24	; 0x01
     2a8:	21 e0       	ldi	r18, 0x01	; 1
     2aa:	89 81       	ldd	r24, Y+1	; 0x01
     2ac:	9a 81       	ldd	r25, Y+2	; 0x02
     2ae:	8a 30       	cpi	r24, 0x0A	; 10
     2b0:	91 05       	cpc	r25, r1
     2b2:	0c f0       	brlt	.+2      	; 0x2b6 <_ZN8odometer13resetOdometerEv+0xc8>
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	22 23       	and	r18, r18
     2b8:	31 f7       	brne	.-52     	; 0x286 <_ZN8odometer13resetOdometerEv+0x98>
		dataPoints[i]=0;
	}
}
     2ba:	0f 90       	pop	r0
     2bc:	0f 90       	pop	r0
     2be:	0f 90       	pop	r0
     2c0:	0f 90       	pop	r0
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	08 95       	ret

000002c8 <_ZN8odometer20setNewOdometerWOtimeEf>:


//New odometer with wheel size.
void odometer::setNewOdometerWOtime(float wheelSize){
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	00 d0       	rcall	.+0      	; 0x2ce <_ZN8odometer20setNewOdometerWOtimeEf+0x6>
     2ce:	00 d0       	rcall	.+0      	; 0x2d0 <_ZN8odometer20setNewOdometerWOtimeEf+0x8>
     2d0:	00 d0       	rcall	.+0      	; 0x2d2 <_ZN8odometer20setNewOdometerWOtimeEf+0xa>
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
     2d6:	9a 83       	std	Y+2, r25	; 0x02
     2d8:	89 83       	std	Y+1, r24	; 0x01
     2da:	4b 83       	std	Y+3, r20	; 0x03
     2dc:	5c 83       	std	Y+4, r21	; 0x04
     2de:	6d 83       	std	Y+5, r22	; 0x05
     2e0:	7e 83       	std	Y+6, r23	; 0x06
	this->wheelSize=wheelSize;
     2e2:	29 81       	ldd	r18, Y+1	; 0x01
     2e4:	3a 81       	ldd	r19, Y+2	; 0x02
     2e6:	8b 81       	ldd	r24, Y+3	; 0x03
     2e8:	9c 81       	ldd	r25, Y+4	; 0x04
     2ea:	ad 81       	ldd	r26, Y+5	; 0x05
     2ec:	be 81       	ldd	r27, Y+6	; 0x06
     2ee:	f9 01       	movw	r30, r18
     2f0:	84 87       	std	Z+12, r24	; 0x0c
     2f2:	95 87       	std	Z+13, r25	; 0x0d
     2f4:	a6 87       	std	Z+14, r26	; 0x0e
     2f6:	b7 87       	std	Z+15, r27	; 0x0f
	resetOdometer();
     2f8:	89 81       	ldd	r24, Y+1	; 0x01
     2fa:	9a 81       	ldd	r25, Y+2	; 0x02
     2fc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_ZN8odometer13resetOdometerEv>
}
     300:	26 96       	adiw	r28, 0x06	; 6
     302:	0f b6       	in	r0, 0x3f	; 63
     304:	f8 94       	cli
     306:	de bf       	out	0x3e, r29	; 62
     308:	0f be       	out	0x3f, r0	; 63
     30a:	cd bf       	out	0x3d, r28	; 61
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	08 95       	ret

00000312 <_ZN8odometer19setNewOdometerWtimeEfjj>:

//New Odometer with wheel size and accurate/valid date and time.
void odometer::setNewOdometerWtime(float wheelSize, unsigned int sDate, unsigned int sTime){
     312:	0f 93       	push	r16
     314:	1f 93       	push	r17
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	2a 97       	sbiw	r28, 0x0a	; 10
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	f8 94       	cli
     324:	de bf       	out	0x3e, r29	; 62
     326:	0f be       	out	0x3f, r0	; 63
     328:	cd bf       	out	0x3d, r28	; 61
     32a:	9a 83       	std	Y+2, r25	; 0x02
     32c:	89 83       	std	Y+1, r24	; 0x01
     32e:	4b 83       	std	Y+3, r20	; 0x03
     330:	5c 83       	std	Y+4, r21	; 0x04
     332:	6d 83       	std	Y+5, r22	; 0x05
     334:	7e 83       	std	Y+6, r23	; 0x06
     336:	38 87       	std	Y+8, r19	; 0x08
     338:	2f 83       	std	Y+7, r18	; 0x07
     33a:	1a 87       	std	Y+10, r17	; 0x0a
     33c:	09 87       	std	Y+9, r16	; 0x09
	this->wheelSize=wheelSize;
     33e:	29 81       	ldd	r18, Y+1	; 0x01
     340:	3a 81       	ldd	r19, Y+2	; 0x02
     342:	8b 81       	ldd	r24, Y+3	; 0x03
     344:	9c 81       	ldd	r25, Y+4	; 0x04
     346:	ad 81       	ldd	r26, Y+5	; 0x05
     348:	be 81       	ldd	r27, Y+6	; 0x06
     34a:	f9 01       	movw	r30, r18
     34c:	84 87       	std	Z+12, r24	; 0x0c
     34e:	95 87       	std	Z+13, r25	; 0x0d
     350:	a6 87       	std	Z+14, r26	; 0x0e
     352:	b7 87       	std	Z+15, r27	; 0x0f
	this->sDate=sDate;
     354:	89 81       	ldd	r24, Y+1	; 0x01
     356:	9a 81       	ldd	r25, Y+2	; 0x02
     358:	2f 81       	ldd	r18, Y+7	; 0x07
     35a:	38 85       	ldd	r19, Y+8	; 0x08
     35c:	fc 01       	movw	r30, r24
     35e:	35 8b       	std	Z+21, r19	; 0x15
     360:	24 8b       	std	Z+20, r18	; 0x14
	this->sTime=sTime;
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	9a 81       	ldd	r25, Y+2	; 0x02
     366:	29 85       	ldd	r18, Y+9	; 0x09
     368:	3a 85       	ldd	r19, Y+10	; 0x0a
     36a:	fc 01       	movw	r30, r24
     36c:	37 8b       	std	Z+23, r19	; 0x17
     36e:	26 8b       	std	Z+22, r18	; 0x16
	resetOdometer();
     370:	89 81       	ldd	r24, Y+1	; 0x01
     372:	9a 81       	ldd	r25, Y+2	; 0x02
     374:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_ZN8odometer13resetOdometerEv>
	
}
     378:	2a 96       	adiw	r28, 0x0a	; 10
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	f8 94       	cli
     37e:	de bf       	out	0x3e, r29	; 62
     380:	0f be       	out	0x3f, r0	; 63
     382:	cd bf       	out	0x3d, r28	; 61
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	1f 91       	pop	r17
     38a:	0f 91       	pop	r16
     38c:	08 95       	ret

0000038e <_ZN8odometer11setOdometerEffffjjjj>:

//Restart of the module, need to set everything.
void odometer::setOdometer(float swapAveSpeed, float swapDistance, float swapCurrentSpeed, float swapWheelSize, unsigned int swapSpeedPoints,unsigned int swapTimeElapsed,unsigned int swapSDate, unsigned int swapSTime){
     38e:	8f 92       	push	r8
     390:	9f 92       	push	r9
     392:	af 92       	push	r10
     394:	bf 92       	push	r11
     396:	cf 92       	push	r12
     398:	df 92       	push	r13
     39a:	ef 92       	push	r14
     39c:	ff 92       	push	r15
     39e:	0f 93       	push	r16
     3a0:	1f 93       	push	r17
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	cd b7       	in	r28, 0x3d	; 61
     3a8:	de b7       	in	r29, 0x3e	; 62
     3aa:	62 97       	sbiw	r28, 0x12	; 18
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	f8 94       	cli
     3b0:	de bf       	out	0x3e, r29	; 62
     3b2:	0f be       	out	0x3f, r0	; 63
     3b4:	cd bf       	out	0x3d, r28	; 61
     3b6:	9a 83       	std	Y+2, r25	; 0x02
     3b8:	89 83       	std	Y+1, r24	; 0x01
     3ba:	4b 83       	std	Y+3, r20	; 0x03
     3bc:	5c 83       	std	Y+4, r21	; 0x04
     3be:	6d 83       	std	Y+5, r22	; 0x05
     3c0:	7e 83       	std	Y+6, r23	; 0x06
     3c2:	0f 83       	std	Y+7, r16	; 0x07
     3c4:	18 87       	std	Y+8, r17	; 0x08
     3c6:	29 87       	std	Y+9, r18	; 0x09
     3c8:	3a 87       	std	Y+10, r19	; 0x0a
     3ca:	cb 86       	std	Y+11, r12	; 0x0b
     3cc:	dc 86       	std	Y+12, r13	; 0x0c
     3ce:	ed 86       	std	Y+13, r14	; 0x0d
     3d0:	fe 86       	std	Y+14, r15	; 0x0e
     3d2:	8f 86       	std	Y+15, r8	; 0x0f
     3d4:	98 8a       	std	Y+16, r9	; 0x10
     3d6:	a9 8a       	std	Y+17, r10	; 0x11
     3d8:	ba 8a       	std	Y+18, r11	; 0x12
	aveSpeed=swapAveSpeed;
     3da:	29 81       	ldd	r18, Y+1	; 0x01
     3dc:	3a 81       	ldd	r19, Y+2	; 0x02
     3de:	8b 81       	ldd	r24, Y+3	; 0x03
     3e0:	9c 81       	ldd	r25, Y+4	; 0x04
     3e2:	ad 81       	ldd	r26, Y+5	; 0x05
     3e4:	be 81       	ldd	r27, Y+6	; 0x06
     3e6:	f9 01       	movw	r30, r18
     3e8:	80 83       	st	Z, r24
     3ea:	91 83       	std	Z+1, r25	; 0x01
     3ec:	a2 83       	std	Z+2, r26	; 0x02
     3ee:	b3 83       	std	Z+3, r27	; 0x03
	distance=swapDistance;
     3f0:	29 81       	ldd	r18, Y+1	; 0x01
     3f2:	3a 81       	ldd	r19, Y+2	; 0x02
     3f4:	8f 81       	ldd	r24, Y+7	; 0x07
     3f6:	98 85       	ldd	r25, Y+8	; 0x08
     3f8:	a9 85       	ldd	r26, Y+9	; 0x09
     3fa:	ba 85       	ldd	r27, Y+10	; 0x0a
     3fc:	f9 01       	movw	r30, r18
     3fe:	84 83       	std	Z+4, r24	; 0x04
     400:	95 83       	std	Z+5, r25	; 0x05
     402:	a6 83       	std	Z+6, r26	; 0x06
     404:	b7 83       	std	Z+7, r27	; 0x07
	currentSpeed=swapCurrentSpeed;
     406:	29 81       	ldd	r18, Y+1	; 0x01
     408:	3a 81       	ldd	r19, Y+2	; 0x02
     40a:	8b 85       	ldd	r24, Y+11	; 0x0b
     40c:	9c 85       	ldd	r25, Y+12	; 0x0c
     40e:	ad 85       	ldd	r26, Y+13	; 0x0d
     410:	be 85       	ldd	r27, Y+14	; 0x0e
     412:	f9 01       	movw	r30, r18
     414:	80 87       	std	Z+8, r24	; 0x08
     416:	91 87       	std	Z+9, r25	; 0x09
     418:	a2 87       	std	Z+10, r26	; 0x0a
     41a:	b3 87       	std	Z+11, r27	; 0x0b
	wheelSize=swapWheelSize;
     41c:	29 81       	ldd	r18, Y+1	; 0x01
     41e:	3a 81       	ldd	r19, Y+2	; 0x02
     420:	8f 85       	ldd	r24, Y+15	; 0x0f
     422:	98 89       	ldd	r25, Y+16	; 0x10
     424:	a9 89       	ldd	r26, Y+17	; 0x11
     426:	ba 89       	ldd	r27, Y+18	; 0x12
     428:	f9 01       	movw	r30, r18
     42a:	84 87       	std	Z+12, r24	; 0x0c
     42c:	95 87       	std	Z+13, r25	; 0x0d
     42e:	a6 87       	std	Z+14, r26	; 0x0e
     430:	b7 87       	std	Z+15, r27	; 0x0f
	speedPoints=swapSpeedPoints;
     432:	89 81       	ldd	r24, Y+1	; 0x01
     434:	9a 81       	ldd	r25, Y+2	; 0x02
     436:	29 a1       	lds	r18, 0x49
     438:	3a a1       	lds	r19, 0x4a
     43a:	fc 01       	movw	r30, r24
     43c:	33 ab       	sts	0x53, r19
     43e:	22 ab       	sts	0x52, r18
	timeElapsed=swapTimeElapsed;
     440:	89 81       	ldd	r24, Y+1	; 0x01
     442:	9a 81       	ldd	r25, Y+2	; 0x02
     444:	2b a1       	lds	r18, 0x4b
     446:	3c a1       	lds	r19, 0x4c
     448:	fc 01       	movw	r30, r24
     44a:	35 8f       	std	Z+29, r19	; 0x1d
     44c:	24 8f       	std	Z+28, r18	; 0x1c
	sDate=swapSDate;
     44e:	89 81       	ldd	r24, Y+1	; 0x01
     450:	9a 81       	ldd	r25, Y+2	; 0x02
     452:	2d a1       	lds	r18, 0x4d
     454:	3e a1       	lds	r19, 0x4e
     456:	fc 01       	movw	r30, r24
     458:	35 8b       	std	Z+21, r19	; 0x15
     45a:	24 8b       	std	Z+20, r18	; 0x14
	sTime=swapSTime;
     45c:	89 81       	ldd	r24, Y+1	; 0x01
     45e:	9a 81       	ldd	r25, Y+2	; 0x02
     460:	2f a1       	lds	r18, 0x4f
     462:	38 a5       	lds	r19, 0x68
     464:	fc 01       	movw	r30, r24
     466:	37 8b       	std	Z+23, r19	; 0x17
     468:	26 8b       	std	Z+22, r18	; 0x16
	firstRun=fTrue;
     46a:	89 81       	ldd	r24, Y+1	; 0x01
     46c:	9a 81       	ldd	r25, Y+2	; 0x02
     46e:	21 e0       	ldi	r18, 0x01	; 1
     470:	fc 01       	movw	r30, r24
     472:	24 ab       	sts	0x54, r18
}
     474:	62 96       	adiw	r28, 0x12	; 18
     476:	0f b6       	in	r0, 0x3f	; 63
     478:	f8 94       	cli
     47a:	de bf       	out	0x3e, r29	; 62
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	cd bf       	out	0x3d, r28	; 61
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	1f 91       	pop	r17
     486:	0f 91       	pop	r16
     488:	ff 90       	pop	r15
     48a:	ef 90       	pop	r14
     48c:	df 90       	pop	r13
     48e:	cf 90       	pop	r12
     490:	bf 90       	pop	r11
     492:	af 90       	pop	r10
     494:	9f 90       	pop	r9
     496:	8f 90       	pop	r8
     498:	08 95       	ret

0000049a <_ZN8odometer12addDataPointEj>:

//New speed data point
void odometer::addDataPoint(unsigned int newDataPoint){
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	28 97       	sbiw	r28, 0x08	; 8
     4a4:	0f b6       	in	r0, 0x3f	; 63
     4a6:	f8 94       	cli
     4a8:	de bf       	out	0x3e, r29	; 62
     4aa:	0f be       	out	0x3f, r0	; 63
     4ac:	cd bf       	out	0x3d, r28	; 61
     4ae:	9e 83       	std	Y+6, r25	; 0x06
     4b0:	8d 83       	std	Y+5, r24	; 0x05
     4b2:	78 87       	std	Y+8, r23	; 0x08
     4b4:	6f 83       	std	Y+7, r22	; 0x07
	//If this is first point or new wheelsize, or whatever, need to initialize all data points.
	if (firstRun){
     4b6:	8d 81       	ldd	r24, Y+5	; 0x05
     4b8:	9e 81       	ldd	r25, Y+6	; 0x06
     4ba:	fc 01       	movw	r30, r24
     4bc:	84 a9       	sts	0x44, r24
     4be:	88 23       	and	r24, r24
     4c0:	21 f1       	breq	.+72     	; 0x50a <_ZN8odometer12addDataPointEj+0x70>
		for (int j=0; j<10;j++){
     4c2:	1a 82       	std	Y+2, r1	; 0x02
     4c4:	19 82       	std	Y+1, r1	; 0x01
     4c6:	13 c0       	rjmp	.+38     	; 0x4ee <_ZN8odometer12addDataPointEj+0x54>
			dataPoints[j]=newDataPoint;
     4c8:	2d 81       	ldd	r18, Y+5	; 0x05
     4ca:	3e 81       	ldd	r19, Y+6	; 0x06
     4cc:	89 81       	ldd	r24, Y+1	; 0x01
     4ce:	9a 81       	ldd	r25, Y+2	; 0x02
     4d0:	0f 96       	adiw	r24, 0x0f	; 15
     4d2:	88 0f       	add	r24, r24
     4d4:	99 1f       	adc	r25, r25
     4d6:	82 0f       	add	r24, r18
     4d8:	93 1f       	adc	r25, r19
     4da:	2f 81       	ldd	r18, Y+7	; 0x07
     4dc:	38 85       	ldd	r19, Y+8	; 0x08
     4de:	fc 01       	movw	r30, r24
     4e0:	31 83       	std	Z+1, r19	; 0x01
     4e2:	20 83       	st	Z, r18

//New speed data point
void odometer::addDataPoint(unsigned int newDataPoint){
	//If this is first point or new wheelsize, or whatever, need to initialize all data points.
	if (firstRun){
		for (int j=0; j<10;j++){
     4e4:	89 81       	ldd	r24, Y+1	; 0x01
     4e6:	9a 81       	ldd	r25, Y+2	; 0x02
     4e8:	01 96       	adiw	r24, 0x01	; 1
     4ea:	9a 83       	std	Y+2, r25	; 0x02
     4ec:	89 83       	std	Y+1, r24	; 0x01
     4ee:	21 e0       	ldi	r18, 0x01	; 1
     4f0:	89 81       	ldd	r24, Y+1	; 0x01
     4f2:	9a 81       	ldd	r25, Y+2	; 0x02
     4f4:	8a 30       	cpi	r24, 0x0A	; 10
     4f6:	91 05       	cpc	r25, r1
     4f8:	0c f0       	brlt	.+2      	; 0x4fc <_ZN8odometer12addDataPointEj+0x62>
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	22 23       	and	r18, r18
     4fe:	21 f7       	brne	.-56     	; 0x4c8 <_ZN8odometer12addDataPointEj+0x2e>
			dataPoints[j]=newDataPoint;
		}
		firstRun=fFalse;				//reset flag
     500:	8d 81       	ldd	r24, Y+5	; 0x05
     502:	9e 81       	ldd	r25, Y+6	; 0x06
     504:	fc 01       	movw	r30, r24
     506:	14 aa       	sts	0x94, r17
     508:	31 c0       	rjmp	.+98     	; 0x56c <_ZN8odometer12addDataPointEj+0xd2>
	} else {
		//Shift data back one
		for (int i=0; i<9; i++){
     50a:	1c 82       	std	Y+4, r1	; 0x04
     50c:	1b 82       	std	Y+3, r1	; 0x03
     50e:	1e c0       	rjmp	.+60     	; 0x54c <_ZN8odometer12addDataPointEj+0xb2>
			dataPoints[i]=dataPoints[i+1];	//shift down by one
     510:	8b 81       	ldd	r24, Y+3	; 0x03
     512:	9c 81       	ldd	r25, Y+4	; 0x04
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	2d 81       	ldd	r18, Y+5	; 0x05
     518:	3e 81       	ldd	r19, Y+6	; 0x06
     51a:	0f 96       	adiw	r24, 0x0f	; 15
     51c:	88 0f       	add	r24, r24
     51e:	99 1f       	adc	r25, r25
     520:	82 0f       	add	r24, r18
     522:	93 1f       	adc	r25, r19
     524:	fc 01       	movw	r30, r24
     526:	20 81       	ld	r18, Z
     528:	31 81       	ldd	r19, Z+1	; 0x01
     52a:	4d 81       	ldd	r20, Y+5	; 0x05
     52c:	5e 81       	ldd	r21, Y+6	; 0x06
     52e:	8b 81       	ldd	r24, Y+3	; 0x03
     530:	9c 81       	ldd	r25, Y+4	; 0x04
     532:	0f 96       	adiw	r24, 0x0f	; 15
     534:	88 0f       	add	r24, r24
     536:	99 1f       	adc	r25, r25
     538:	84 0f       	add	r24, r20
     53a:	95 1f       	adc	r25, r21
     53c:	fc 01       	movw	r30, r24
     53e:	31 83       	std	Z+1, r19	; 0x01
     540:	20 83       	st	Z, r18
			dataPoints[j]=newDataPoint;
		}
		firstRun=fFalse;				//reset flag
	} else {
		//Shift data back one
		for (int i=0; i<9; i++){
     542:	8b 81       	ldd	r24, Y+3	; 0x03
     544:	9c 81       	ldd	r25, Y+4	; 0x04
     546:	01 96       	adiw	r24, 0x01	; 1
     548:	9c 83       	std	Y+4, r25	; 0x04
     54a:	8b 83       	std	Y+3, r24	; 0x03
     54c:	21 e0       	ldi	r18, 0x01	; 1
     54e:	8b 81       	ldd	r24, Y+3	; 0x03
     550:	9c 81       	ldd	r25, Y+4	; 0x04
     552:	89 30       	cpi	r24, 0x09	; 9
     554:	91 05       	cpc	r25, r1
     556:	0c f0       	brlt	.+2      	; 0x55a <_ZN8odometer12addDataPointEj+0xc0>
     558:	20 e0       	ldi	r18, 0x00	; 0
     55a:	22 23       	and	r18, r18
     55c:	c9 f6       	brne	.-78     	; 0x510 <_ZN8odometer12addDataPointEj+0x76>
			dataPoints[i]=dataPoints[i+1];	//shift down by one
		}
		dataPoints[9]=newDataPoint;		//add new data point
     55e:	8d 81       	ldd	r24, Y+5	; 0x05
     560:	9e 81       	ldd	r25, Y+6	; 0x06
     562:	2f 81       	ldd	r18, Y+7	; 0x07
     564:	38 85       	ldd	r19, Y+8	; 0x08
     566:	fc 01       	movw	r30, r24
     568:	31 ab       	sts	0x51, r19
     56a:	20 ab       	sts	0x50, r18
	}
	speedPoints++;					//increment speed points
     56c:	8d 81       	ldd	r24, Y+5	; 0x05
     56e:	9e 81       	ldd	r25, Y+6	; 0x06
     570:	fc 01       	movw	r30, r24
     572:	82 a9       	sts	0x42, r24
     574:	93 a9       	sts	0x43, r25
     576:	9c 01       	movw	r18, r24
     578:	2f 5f       	subi	r18, 0xFF	; 255
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	8d 81       	ldd	r24, Y+5	; 0x05
     57e:	9e 81       	ldd	r25, Y+6	; 0x06
     580:	fc 01       	movw	r30, r24
     582:	33 ab       	sts	0x53, r19
     584:	22 ab       	sts	0x52, r18

	//With new point we need to update all the statistics.
	updateStats();
     586:	8d 81       	ldd	r24, Y+5	; 0x05
     588:	9e 81       	ldd	r25, Y+6	; 0x06
     58a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_ZN8odometer11updateStatsEv>
}
     58e:	28 96       	adiw	r28, 0x08	; 8
     590:	0f b6       	in	r0, 0x3f	; 63
     592:	f8 94       	cli
     594:	de bf       	out	0x3e, r29	; 62
     596:	0f be       	out	0x3f, r0	; 63
     598:	cd bf       	out	0x3d, r28	; 61
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <_ZN8odometer12setWheelSizeEf>:

//Updating wheel size. Don't reset anything, but initialize first run to eliminate old speeds. 
void odometer::setWheelSize(float wheelSize){
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	00 d0       	rcall	.+0      	; 0x5a6 <_ZN8odometer12setWheelSizeEf+0x6>
     5a6:	00 d0       	rcall	.+0      	; 0x5a8 <_ZN8odometer12setWheelSizeEf+0x8>
     5a8:	00 d0       	rcall	.+0      	; 0x5aa <_ZN8odometer12setWheelSizeEf+0xa>
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
     5ae:	9a 83       	std	Y+2, r25	; 0x02
     5b0:	89 83       	std	Y+1, r24	; 0x01
     5b2:	4b 83       	std	Y+3, r20	; 0x03
     5b4:	5c 83       	std	Y+4, r21	; 0x04
     5b6:	6d 83       	std	Y+5, r22	; 0x05
     5b8:	7e 83       	std	Y+6, r23	; 0x06
	firstRun=fTrue;
     5ba:	89 81       	ldd	r24, Y+1	; 0x01
     5bc:	9a 81       	ldd	r25, Y+2	; 0x02
     5be:	21 e0       	ldi	r18, 0x01	; 1
     5c0:	fc 01       	movw	r30, r24
     5c2:	24 ab       	sts	0x54, r18
	this->wheelSize=wheelSize;
     5c4:	29 81       	ldd	r18, Y+1	; 0x01
     5c6:	3a 81       	ldd	r19, Y+2	; 0x02
     5c8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ca:	9c 81       	ldd	r25, Y+4	; 0x04
     5cc:	ad 81       	ldd	r26, Y+5	; 0x05
     5ce:	be 81       	ldd	r27, Y+6	; 0x06
     5d0:	f9 01       	movw	r30, r18
     5d2:	84 87       	std	Z+12, r24	; 0x0c
     5d4:	95 87       	std	Z+13, r25	; 0x0d
     5d6:	a6 87       	std	Z+14, r26	; 0x0e
     5d8:	b7 87       	std	Z+15, r27	; 0x0f
}
     5da:	26 96       	adiw	r28, 0x06	; 6
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	f8 94       	cli
     5e0:	de bf       	out	0x3e, r29	; 62
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	cd bf       	out	0x3d, r28	; 61
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	08 95       	ret

000005ec <_ZN8odometer11updateStatsEv>:

//Just got another data point, update all the statistics
void odometer::updateStats(){
     5ec:	af 92       	push	r10
     5ee:	bf 92       	push	r11
     5f0:	cf 92       	push	r12
     5f2:	df 92       	push	r13
     5f4:	ef 92       	push	r14
     5f6:	ff 92       	push	r15
     5f8:	0f 93       	push	r16
     5fa:	1f 93       	push	r17
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	00 d0       	rcall	.+0      	; 0x602 <_ZN8odometer11updateStatsEv+0x16>
     602:	00 d0       	rcall	.+0      	; 0x604 <_ZN8odometer11updateStatsEv+0x18>
     604:	00 d0       	rcall	.+0      	; 0x606 <_ZN8odometer11updateStatsEv+0x1a>
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	9e 83       	std	Y+6, r25	; 0x06
     60c:	8d 83       	std	Y+5, r24	; 0x05
	//Update distance
	distance += wheelSize;
     60e:	8d 81       	ldd	r24, Y+5	; 0x05
     610:	9e 81       	ldd	r25, Y+6	; 0x06
     612:	fc 01       	movw	r30, r24
     614:	84 81       	ldd	r24, Z+4	; 0x04
     616:	95 81       	ldd	r25, Z+5	; 0x05
     618:	a6 81       	ldd	r26, Z+6	; 0x06
     61a:	b7 81       	ldd	r27, Z+7	; 0x07
     61c:	2d 81       	ldd	r18, Y+5	; 0x05
     61e:	3e 81       	ldd	r19, Y+6	; 0x06
     620:	f9 01       	movw	r30, r18
     622:	24 85       	ldd	r18, Z+12	; 0x0c
     624:	35 85       	ldd	r19, Z+13	; 0x0d
     626:	46 85       	ldd	r20, Z+14	; 0x0e
     628:	57 85       	ldd	r21, Z+15	; 0x0f
     62a:	bc 01       	movw	r22, r24
     62c:	cd 01       	movw	r24, r26
     62e:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__addsf3>
     632:	dc 01       	movw	r26, r24
     634:	cb 01       	movw	r24, r22
     636:	2d 81       	ldd	r18, Y+5	; 0x05
     638:	3e 81       	ldd	r19, Y+6	; 0x06
     63a:	f9 01       	movw	r30, r18
     63c:	84 83       	std	Z+4, r24	; 0x04
     63e:	95 83       	std	Z+5, r25	; 0x05
     640:	a6 83       	std	Z+6, r26	; 0x06
     642:	b7 83       	std	Z+7, r27	; 0x07
	
	//Update current speed
	unsigned int sum;
	for (int i=0; i<10; i++){
     644:	1c 82       	std	Y+4, r1	; 0x04
     646:	1b 82       	std	Y+3, r1	; 0x03
     648:	1e c0       	rjmp	.+60     	; 0x686 <_ZN8odometer11updateStatsEv+0x9a>
		sum += dataPoints[i]/10;
     64a:	2d 81       	ldd	r18, Y+5	; 0x05
     64c:	3e 81       	ldd	r19, Y+6	; 0x06
     64e:	8b 81       	ldd	r24, Y+3	; 0x03
     650:	9c 81       	ldd	r25, Y+4	; 0x04
     652:	0f 96       	adiw	r24, 0x0f	; 15
     654:	88 0f       	add	r24, r24
     656:	99 1f       	adc	r25, r25
     658:	82 0f       	add	r24, r18
     65a:	93 1f       	adc	r25, r19
     65c:	fc 01       	movw	r30, r24
     65e:	80 81       	ld	r24, Z
     660:	91 81       	ldd	r25, Z+1	; 0x01
     662:	2a e0       	ldi	r18, 0x0A	; 10
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	b9 01       	movw	r22, r18
     668:	0e 94 26 0c 	call	0x184c	; 0x184c <__udivmodhi4>
     66c:	9b 01       	movw	r18, r22
     66e:	c9 01       	movw	r24, r18
     670:	29 81       	ldd	r18, Y+1	; 0x01
     672:	3a 81       	ldd	r19, Y+2	; 0x02
     674:	82 0f       	add	r24, r18
     676:	93 1f       	adc	r25, r19
     678:	9a 83       	std	Y+2, r25	; 0x02
     67a:	89 83       	std	Y+1, r24	; 0x01
	//Update distance
	distance += wheelSize;
	
	//Update current speed
	unsigned int sum;
	for (int i=0; i<10; i++){
     67c:	8b 81       	ldd	r24, Y+3	; 0x03
     67e:	9c 81       	ldd	r25, Y+4	; 0x04
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	9c 83       	std	Y+4, r25	; 0x04
     684:	8b 83       	std	Y+3, r24	; 0x03
     686:	21 e0       	ldi	r18, 0x01	; 1
     688:	8b 81       	ldd	r24, Y+3	; 0x03
     68a:	9c 81       	ldd	r25, Y+4	; 0x04
     68c:	8a 30       	cpi	r24, 0x0A	; 10
     68e:	91 05       	cpc	r25, r1
     690:	0c f0       	brlt	.+2      	; 0x694 <_ZN8odometer11updateStatsEv+0xa8>
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	22 23       	and	r18, r18
     696:	c9 f6       	brne	.-78     	; 0x64a <_ZN8odometer11updateStatsEv+0x5e>
		sum += dataPoints[i]/10;
	}
	currentSpeed=SECONDS_IN_HOUR*wheelSize/(sum*TIMER1_CLOCK_sec);
     698:	8d 81       	ldd	r24, Y+5	; 0x05
     69a:	9e 81       	ldd	r25, Y+6	; 0x06
     69c:	fc 01       	movw	r30, r24
     69e:	84 85       	ldd	r24, Z+12	; 0x0c
     6a0:	95 85       	ldd	r25, Z+13	; 0x0d
     6a2:	a6 85       	ldd	r26, Z+14	; 0x0e
     6a4:	b7 85       	ldd	r27, Z+15	; 0x0f
     6a6:	bc 01       	movw	r22, r24
     6a8:	cd 01       	movw	r24, r26
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	41 e6       	ldi	r20, 0x61	; 97
     6b0:	55 e4       	ldi	r21, 0x45	; 69
     6b2:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__mulsf3>
     6b6:	dc 01       	movw	r26, r24
     6b8:	cb 01       	movw	r24, r22
     6ba:	7c 01       	movw	r14, r24
     6bc:	8d 01       	movw	r16, r26
     6be:	89 81       	ldd	r24, Y+1	; 0x01
     6c0:	9a 81       	ldd	r25, Y+2	; 0x02
     6c2:	cc 01       	movw	r24, r24
     6c4:	a0 e0       	ldi	r26, 0x00	; 0
     6c6:	b0 e0       	ldi	r27, 0x00	; 0
     6c8:	bc 01       	movw	r22, r24
     6ca:	cd 01       	movw	r24, r26
     6cc:	0e 94 35 0b 	call	0x166a	; 0x166a <__floatunsisf>
     6d0:	dc 01       	movw	r26, r24
     6d2:	cb 01       	movw	r24, r22
     6d4:	bc 01       	movw	r22, r24
     6d6:	cd 01       	movw	r24, r26
     6d8:	2d eb       	ldi	r18, 0xBD	; 189
     6da:	37 e3       	ldi	r19, 0x37	; 55
     6dc:	46 e0       	ldi	r20, 0x06	; 6
     6de:	58 e3       	ldi	r21, 0x38	; 56
     6e0:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__mulsf3>
     6e4:	dc 01       	movw	r26, r24
     6e6:	cb 01       	movw	r24, r22
     6e8:	9c 01       	movw	r18, r24
     6ea:	ad 01       	movw	r20, r26
     6ec:	c8 01       	movw	r24, r16
     6ee:	b7 01       	movw	r22, r14
     6f0:	0e 94 cd 0a 	call	0x159a	; 0x159a <__divsf3>
     6f4:	dc 01       	movw	r26, r24
     6f6:	cb 01       	movw	r24, r22
     6f8:	2d 81       	ldd	r18, Y+5	; 0x05
     6fa:	3e 81       	ldd	r19, Y+6	; 0x06
     6fc:	f9 01       	movw	r30, r18
     6fe:	80 87       	std	Z+8, r24	; 0x08
     700:	91 87       	std	Z+9, r25	; 0x09
     702:	a2 87       	std	Z+10, r26	; 0x0a
     704:	b3 87       	std	Z+11, r27	; 0x0b
	
	//Update average speed
	__calculateSpeedWeight();
     706:	8d 81       	ldd	r24, Y+5	; 0x05
     708:	9e 81       	ldd	r25, Y+6	; 0x06
     70a:	fc 01       	movw	r30, r24
     70c:	22 a9       	sts	0x42, r18
     70e:	33 a9       	sts	0x43, r19
     710:	8d 81       	ldd	r24, Y+5	; 0x05
     712:	9e 81       	ldd	r25, Y+6	; 0x06
     714:	fc 01       	movw	r30, r24
     716:	42 a9       	sts	0x42, r20
     718:	53 a9       	sts	0x43, r21
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	ba 01       	movw	r22, r20
     720:	0e 94 26 0c 	call	0x184c	; 0x184c <__udivmodhi4>
     724:	ab 01       	movw	r20, r22
     726:	ca 01       	movw	r24, r20
     728:	a9 01       	movw	r20, r18
     72a:	48 1b       	sub	r20, r24
     72c:	59 0b       	sbc	r21, r25
     72e:	ca 01       	movw	r24, r20
     730:	cc 01       	movw	r24, r24
     732:	a0 e0       	ldi	r26, 0x00	; 0
     734:	b0 e0       	ldi	r27, 0x00	; 0
     736:	bc 01       	movw	r22, r24
     738:	cd 01       	movw	r24, r26
     73a:	0e 94 35 0b 	call	0x166a	; 0x166a <__floatunsisf>
     73e:	dc 01       	movw	r26, r24
     740:	cb 01       	movw	r24, r22
     742:	2d 81       	ldd	r18, Y+5	; 0x05
     744:	3e 81       	ldd	r19, Y+6	; 0x06
     746:	f9 01       	movw	r30, r18
     748:	80 8b       	std	Z+16, r24	; 0x10
     74a:	91 8b       	std	Z+17, r25	; 0x11
     74c:	a2 8b       	std	Z+18, r26	; 0x12
     74e:	b3 8b       	std	Z+19, r27	; 0x13
	aveSpeed=aveSpeed*speedWeight + currentSpeed/speedPoints;
     750:	8d 81       	ldd	r24, Y+5	; 0x05
     752:	9e 81       	ldd	r25, Y+6	; 0x06
     754:	fc 01       	movw	r30, r24
     756:	80 81       	ld	r24, Z
     758:	91 81       	ldd	r25, Z+1	; 0x01
     75a:	a2 81       	ldd	r26, Z+2	; 0x02
     75c:	b3 81       	ldd	r27, Z+3	; 0x03
     75e:	2d 81       	ldd	r18, Y+5	; 0x05
     760:	3e 81       	ldd	r19, Y+6	; 0x06
     762:	f9 01       	movw	r30, r18
     764:	20 89       	ldd	r18, Z+16	; 0x10
     766:	31 89       	ldd	r19, Z+17	; 0x11
     768:	42 89       	ldd	r20, Z+18	; 0x12
     76a:	53 89       	ldd	r21, Z+19	; 0x13
     76c:	bc 01       	movw	r22, r24
     76e:	cd 01       	movw	r24, r26
     770:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__mulsf3>
     774:	dc 01       	movw	r26, r24
     776:	cb 01       	movw	r24, r22
     778:	7c 01       	movw	r14, r24
     77a:	8d 01       	movw	r16, r26
     77c:	8d 81       	ldd	r24, Y+5	; 0x05
     77e:	9e 81       	ldd	r25, Y+6	; 0x06
     780:	fc 01       	movw	r30, r24
     782:	a0 84       	ldd	r10, Z+8	; 0x08
     784:	b1 84       	ldd	r11, Z+9	; 0x09
     786:	c2 84       	ldd	r12, Z+10	; 0x0a
     788:	d3 84       	ldd	r13, Z+11	; 0x0b
     78a:	8d 81       	ldd	r24, Y+5	; 0x05
     78c:	9e 81       	ldd	r25, Y+6	; 0x06
     78e:	fc 01       	movw	r30, r24
     790:	82 a9       	sts	0x42, r24
     792:	93 a9       	sts	0x43, r25
     794:	cc 01       	movw	r24, r24
     796:	a0 e0       	ldi	r26, 0x00	; 0
     798:	b0 e0       	ldi	r27, 0x00	; 0
     79a:	bc 01       	movw	r22, r24
     79c:	cd 01       	movw	r24, r26
     79e:	0e 94 35 0b 	call	0x166a	; 0x166a <__floatunsisf>
     7a2:	9b 01       	movw	r18, r22
     7a4:	ac 01       	movw	r20, r24
     7a6:	c6 01       	movw	r24, r12
     7a8:	b5 01       	movw	r22, r10
     7aa:	0e 94 cd 0a 	call	0x159a	; 0x159a <__divsf3>
     7ae:	dc 01       	movw	r26, r24
     7b0:	cb 01       	movw	r24, r22
     7b2:	9c 01       	movw	r18, r24
     7b4:	ad 01       	movw	r20, r26
     7b6:	c8 01       	movw	r24, r16
     7b8:	b7 01       	movw	r22, r14
     7ba:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__addsf3>
     7be:	dc 01       	movw	r26, r24
     7c0:	cb 01       	movw	r24, r22
     7c2:	2d 81       	ldd	r18, Y+5	; 0x05
     7c4:	3e 81       	ldd	r19, Y+6	; 0x06
     7c6:	f9 01       	movw	r30, r18
     7c8:	80 83       	st	Z, r24
     7ca:	91 83       	std	Z+1, r25	; 0x01
     7cc:	a2 83       	std	Z+2, r26	; 0x02
     7ce:	b3 83       	std	Z+3, r27	; 0x03
}
     7d0:	26 96       	adiw	r28, 0x06	; 6
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	f8 94       	cli
     7d6:	de bf       	out	0x3e, r29	; 62
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	cd bf       	out	0x3d, r28	; 61
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	1f 91       	pop	r17
     7e2:	0f 91       	pop	r16
     7e4:	ff 90       	pop	r15
     7e6:	ef 90       	pop	r14
     7e8:	df 90       	pop	r13
     7ea:	cf 90       	pop	r12
     7ec:	bf 90       	pop	r11
     7ee:	af 90       	pop	r10
     7f0:	08 95       	ret

000007f2 <_ZN8odometer15getCurrentSpeedEv>:

//Get the current speed
float odometer::getCurrentSpeed(){
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	00 d0       	rcall	.+0      	; 0x7f8 <_ZN8odometer15getCurrentSpeedEv+0x6>
     7f8:	cd b7       	in	r28, 0x3d	; 61
     7fa:	de b7       	in	r29, 0x3e	; 62
     7fc:	9a 83       	std	Y+2, r25	; 0x02
     7fe:	89 83       	std	Y+1, r24	; 0x01
	return currentSpeed;
     800:	89 81       	ldd	r24, Y+1	; 0x01
     802:	9a 81       	ldd	r25, Y+2	; 0x02
     804:	fc 01       	movw	r30, r24
     806:	80 85       	ldd	r24, Z+8	; 0x08
     808:	91 85       	ldd	r25, Z+9	; 0x09
     80a:	a2 85       	ldd	r26, Z+10	; 0x0a
     80c:	b3 85       	ldd	r27, Z+11	; 0x0b
}
     80e:	bc 01       	movw	r22, r24
     810:	cd 01       	movw	r24, r26
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	08 95       	ret

0000081c <_ZN8odometer15getAverageSpeedEv>:

//Get the average speed
float odometer::getAverageSpeed(){
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	00 d0       	rcall	.+0      	; 0x822 <_ZN8odometer15getAverageSpeedEv+0x6>
     822:	cd b7       	in	r28, 0x3d	; 61
     824:	de b7       	in	r29, 0x3e	; 62
     826:	9a 83       	std	Y+2, r25	; 0x02
     828:	89 83       	std	Y+1, r24	; 0x01
	return aveSpeed;
     82a:	89 81       	ldd	r24, Y+1	; 0x01
     82c:	9a 81       	ldd	r25, Y+2	; 0x02
     82e:	fc 01       	movw	r30, r24
     830:	80 81       	ld	r24, Z
     832:	91 81       	ldd	r25, Z+1	; 0x01
     834:	a2 81       	ldd	r26, Z+2	; 0x02
     836:	b3 81       	ldd	r27, Z+3	; 0x03
}
     838:	bc 01       	movw	r22, r24
     83a:	cd 01       	movw	r24, r26
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	08 95       	ret

00000846 <_ZN8odometer11getDistanceEv>:

//Get the distance travelled thus far in miles 
float odometer::getDistance(){
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	00 d0       	rcall	.+0      	; 0x84c <_ZN8odometer11getDistanceEv+0x6>
     84c:	cd b7       	in	r28, 0x3d	; 61
     84e:	de b7       	in	r29, 0x3e	; 62
     850:	9a 83       	std	Y+2, r25	; 0x02
     852:	89 83       	std	Y+1, r24	; 0x01
	return distance;
     854:	89 81       	ldd	r24, Y+1	; 0x01
     856:	9a 81       	ldd	r25, Y+2	; 0x02
     858:	fc 01       	movw	r30, r24
     85a:	84 81       	ldd	r24, Z+4	; 0x04
     85c:	95 81       	ldd	r25, Z+5	; 0x05
     85e:	a6 81       	ldd	r26, Z+6	; 0x06
     860:	b7 81       	ldd	r27, Z+7	; 0x07
}
     862:	bc 01       	movw	r22, r24
     864:	cd 01       	movw	r24, r26
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	08 95       	ret

00000870 <_ZN8odometer12getWheelSizeEv>:

float odometer::getWheelSize(){
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	00 d0       	rcall	.+0      	; 0x876 <_ZN8odometer12getWheelSizeEv+0x6>
     876:	cd b7       	in	r28, 0x3d	; 61
     878:	de b7       	in	r29, 0x3e	; 62
     87a:	9a 83       	std	Y+2, r25	; 0x02
     87c:	89 83       	std	Y+1, r24	; 0x01
	return wheelSize;
     87e:	89 81       	ldd	r24, Y+1	; 0x01
     880:	9a 81       	ldd	r25, Y+2	; 0x02
     882:	fc 01       	movw	r30, r24
     884:	84 85       	ldd	r24, Z+12	; 0x0c
     886:	95 85       	ldd	r25, Z+13	; 0x0d
     888:	a6 85       	ldd	r26, Z+14	; 0x0e
     88a:	b7 85       	ldd	r27, Z+15	; 0x0f
}
     88c:	bc 01       	movw	r22, r24
     88e:	cd 01       	movw	r24, r26
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	08 95       	ret

0000089a <_ZN8odometer14getSpeedPointsEv>:
	
unsigned int odometer::getSpeedPoints(){
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	00 d0       	rcall	.+0      	; 0x8a0 <_ZN8odometer14getSpeedPointsEv+0x6>
     8a0:	cd b7       	in	r28, 0x3d	; 61
     8a2:	de b7       	in	r29, 0x3e	; 62
     8a4:	9a 83       	std	Y+2, r25	; 0x02
     8a6:	89 83       	std	Y+1, r24	; 0x01
	return speedPoints;
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
     8aa:	9a 81       	ldd	r25, Y+2	; 0x02
     8ac:	fc 01       	movw	r30, r24
     8ae:	82 a9       	sts	0x42, r24
     8b0:	93 a9       	sts	0x43, r25
}
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	08 95       	ret

000008bc <_ZN8odometer12getTotalTimeEjj>:

unsigned int odometer::getTotalTime(unsigned int eDate, unsigned int eTime){
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <_ZN8odometer12getTotalTimeEjj+0x6>
     8c2:	00 d0       	rcall	.+0      	; 0x8c4 <_ZN8odometer12getTotalTimeEjj+0x8>
     8c4:	00 d0       	rcall	.+0      	; 0x8c6 <_ZN8odometer12getTotalTimeEjj+0xa>
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
     8ca:	9a 83       	std	Y+2, r25	; 0x02
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	7c 83       	std	Y+4, r23	; 0x04
     8d0:	6b 83       	std	Y+3, r22	; 0x03
     8d2:	5e 83       	std	Y+6, r21	; 0x06
     8d4:	4d 83       	std	Y+5, r20	; 0x05
	//Compute time between sDate/Time and eDate/Time, then add time elapsed.
	return timeElapsed;
     8d6:	89 81       	ldd	r24, Y+1	; 0x01
     8d8:	9a 81       	ldd	r25, Y+2	; 0x02
     8da:	fc 01       	movw	r30, r24
     8dc:	84 8d       	ldd	r24, Z+28	; 0x1c
     8de:	95 8d       	ldd	r25, Z+29	; 0x1d
}
     8e0:	26 96       	adiw	r28, 0x06	; 6
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	f8 94       	cli
     8e6:	de bf       	out	0x3e, r29	; 62
     8e8:	0f be       	out	0x3f, r0	; 63
     8ea:	cd bf       	out	0x3d, r28	; 61
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	08 95       	ret

000008f2 <_ZN12heartMonitorC1Ev>:
		float aveHR, currentHR;
		unsigned int numReadings;
		
};

heartMonitor::heartMonitor(){
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	00 d0       	rcall	.+0      	; 0x8f8 <_ZN12heartMonitorC1Ev+0x6>
     8f8:	cd b7       	in	r28, 0x3d	; 61
     8fa:	de b7       	in	r29, 0x3e	; 62
     8fc:	9a 83       	std	Y+2, r25	; 0x02
     8fe:	89 83       	std	Y+1, r24	; 0x01
	aveHR=0;
     900:	29 81       	ldd	r18, Y+1	; 0x01
     902:	3a 81       	ldd	r19, Y+2	; 0x02
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	dc 01       	movw	r26, r24
     90a:	f9 01       	movw	r30, r18
     90c:	80 83       	st	Z, r24
     90e:	91 83       	std	Z+1, r25	; 0x01
     910:	a2 83       	std	Z+2, r26	; 0x02
     912:	b3 83       	std	Z+3, r27	; 0x03
	currentHR=0;
     914:	29 81       	ldd	r18, Y+1	; 0x01
     916:	3a 81       	ldd	r19, Y+2	; 0x02
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	dc 01       	movw	r26, r24
     91e:	f9 01       	movw	r30, r18
     920:	84 83       	std	Z+4, r24	; 0x04
     922:	95 83       	std	Z+5, r25	; 0x05
     924:	a6 83       	std	Z+6, r26	; 0x06
     926:	b7 83       	std	Z+7, r27	; 0x07
	numReadings=0;
     928:	89 81       	ldd	r24, Y+1	; 0x01
     92a:	9a 81       	ldd	r25, Y+2	; 0x02
     92c:	fc 01       	movw	r30, r24
     92e:	11 86       	std	Z+9, r1	; 0x09
     930:	10 86       	std	Z+8, r1	; 0x08
}
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	08 95       	ret

0000093c <_ZN12heartMonitor15setHeartMonitorEfj>:

void heartMonitor::setHeartMonitor(float aveHR, unsigned int numReadings){
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	cd b7       	in	r28, 0x3d	; 61
     942:	de b7       	in	r29, 0x3e	; 62
     944:	28 97       	sbiw	r28, 0x08	; 8
     946:	0f b6       	in	r0, 0x3f	; 63
     948:	f8 94       	cli
     94a:	de bf       	out	0x3e, r29	; 62
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	cd bf       	out	0x3d, r28	; 61
     950:	9a 83       	std	Y+2, r25	; 0x02
     952:	89 83       	std	Y+1, r24	; 0x01
     954:	4b 83       	std	Y+3, r20	; 0x03
     956:	5c 83       	std	Y+4, r21	; 0x04
     958:	6d 83       	std	Y+5, r22	; 0x05
     95a:	7e 83       	std	Y+6, r23	; 0x06
     95c:	38 87       	std	Y+8, r19	; 0x08
     95e:	2f 83       	std	Y+7, r18	; 0x07
	this->aveHR=aveHR;
     960:	29 81       	ldd	r18, Y+1	; 0x01
     962:	3a 81       	ldd	r19, Y+2	; 0x02
     964:	8b 81       	ldd	r24, Y+3	; 0x03
     966:	9c 81       	ldd	r25, Y+4	; 0x04
     968:	ad 81       	ldd	r26, Y+5	; 0x05
     96a:	be 81       	ldd	r27, Y+6	; 0x06
     96c:	f9 01       	movw	r30, r18
     96e:	80 83       	st	Z, r24
     970:	91 83       	std	Z+1, r25	; 0x01
     972:	a2 83       	std	Z+2, r26	; 0x02
     974:	b3 83       	std	Z+3, r27	; 0x03
	this->numReadings=numReadings;
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	9a 81       	ldd	r25, Y+2	; 0x02
     97a:	2f 81       	ldd	r18, Y+7	; 0x07
     97c:	38 85       	ldd	r19, Y+8	; 0x08
     97e:	fc 01       	movw	r30, r24
     980:	31 87       	std	Z+9, r19	; 0x09
     982:	20 87       	std	Z+8, r18	; 0x08
}
     984:	28 96       	adiw	r28, 0x08	; 8
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	f8 94       	cli
     98a:	de bf       	out	0x3e, r29	; 62
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	cd bf       	out	0x3d, r28	; 61
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	08 95       	ret

00000996 <_ZN12heartMonitor8setAveHREf>:

void heartMonitor::setAveHR(float aveHR){
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	00 d0       	rcall	.+0      	; 0x99c <_ZN12heartMonitor8setAveHREf+0x6>
     99c:	00 d0       	rcall	.+0      	; 0x99e <_ZN12heartMonitor8setAveHREf+0x8>
     99e:	00 d0       	rcall	.+0      	; 0x9a0 <_ZN12heartMonitor8setAveHREf+0xa>
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
     9a4:	9a 83       	std	Y+2, r25	; 0x02
     9a6:	89 83       	std	Y+1, r24	; 0x01
     9a8:	4b 83       	std	Y+3, r20	; 0x03
     9aa:	5c 83       	std	Y+4, r21	; 0x04
     9ac:	6d 83       	std	Y+5, r22	; 0x05
     9ae:	7e 83       	std	Y+6, r23	; 0x06
	this->aveHR=aveHR;
     9b0:	29 81       	ldd	r18, Y+1	; 0x01
     9b2:	3a 81       	ldd	r19, Y+2	; 0x02
     9b4:	8b 81       	ldd	r24, Y+3	; 0x03
     9b6:	9c 81       	ldd	r25, Y+4	; 0x04
     9b8:	ad 81       	ldd	r26, Y+5	; 0x05
     9ba:	be 81       	ldd	r27, Y+6	; 0x06
     9bc:	f9 01       	movw	r30, r18
     9be:	80 83       	st	Z, r24
     9c0:	91 83       	std	Z+1, r25	; 0x01
     9c2:	a2 83       	std	Z+2, r26	; 0x02
     9c4:	b3 83       	std	Z+3, r27	; 0x03
}
     9c6:	26 96       	adiw	r28, 0x06	; 6
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	f8 94       	cli
     9cc:	de bf       	out	0x3e, r29	; 62
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	cd bf       	out	0x3d, r28	; 61
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	08 95       	ret

000009d8 <_ZN12heartMonitor14setNumReadingsEj>:

void heartMonitor::setNumReadings(unsigned int numReadings){
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	00 d0       	rcall	.+0      	; 0x9de <_ZN12heartMonitor14setNumReadingsEj+0x6>
     9de:	00 d0       	rcall	.+0      	; 0x9e0 <_ZN12heartMonitor14setNumReadingsEj+0x8>
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
     9e4:	9a 83       	std	Y+2, r25	; 0x02
     9e6:	89 83       	std	Y+1, r24	; 0x01
     9e8:	7c 83       	std	Y+4, r23	; 0x04
     9ea:	6b 83       	std	Y+3, r22	; 0x03
	this->numReadings=numReadings;
     9ec:	89 81       	ldd	r24, Y+1	; 0x01
     9ee:	9a 81       	ldd	r25, Y+2	; 0x02
     9f0:	2b 81       	ldd	r18, Y+3	; 0x03
     9f2:	3c 81       	ldd	r19, Y+4	; 0x04
     9f4:	fc 01       	movw	r30, r24
     9f6:	31 87       	std	Z+9, r19	; 0x09
     9f8:	20 87       	std	Z+8, r18	; 0x08
}
     9fa:	0f 90       	pop	r0
     9fc:	0f 90       	pop	r0
     9fe:	0f 90       	pop	r0
     a00:	0f 90       	pop	r0
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	08 95       	ret

00000a08 <_ZN12heartMonitor8getAveHREv>:

float heartMonitor::getAveHR(){
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	00 d0       	rcall	.+0      	; 0xa0e <_ZN12heartMonitor8getAveHREv+0x6>
     a0e:	cd b7       	in	r28, 0x3d	; 61
     a10:	de b7       	in	r29, 0x3e	; 62
     a12:	9a 83       	std	Y+2, r25	; 0x02
     a14:	89 83       	std	Y+1, r24	; 0x01
	return aveHR;
     a16:	89 81       	ldd	r24, Y+1	; 0x01
     a18:	9a 81       	ldd	r25, Y+2	; 0x02
     a1a:	fc 01       	movw	r30, r24
     a1c:	80 81       	ld	r24, Z
     a1e:	91 81       	ldd	r25, Z+1	; 0x01
     a20:	a2 81       	ldd	r26, Z+2	; 0x02
     a22:	b3 81       	ldd	r27, Z+3	; 0x03
}
     a24:	bc 01       	movw	r22, r24
     a26:	cd 01       	movw	r24, r26
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	08 95       	ret

00000a32 <_ZN12heartMonitor14getNumReadingsEv>:

unsigned int heartMonitor::getNumReadings(){
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	00 d0       	rcall	.+0      	; 0xa38 <_ZN12heartMonitor14getNumReadingsEv+0x6>
     a38:	cd b7       	in	r28, 0x3d	; 61
     a3a:	de b7       	in	r29, 0x3e	; 62
     a3c:	9a 83       	std	Y+2, r25	; 0x02
     a3e:	89 83       	std	Y+1, r24	; 0x01
	return numReadings;
     a40:	89 81       	ldd	r24, Y+1	; 0x01
     a42:	9a 81       	ldd	r25, Y+2	; 0x02
     a44:	fc 01       	movw	r30, r24
     a46:	80 85       	ldd	r24, Z+8	; 0x08
     a48:	91 85       	ldd	r25, Z+9	; 0x09
}
     a4a:	0f 90       	pop	r0
     a4c:	0f 90       	pop	r0
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	08 95       	ret

00000a54 <_ZN4tripC1Ev>:
		trip();		
		
};

//Default/no-arg constructor
trip::trip():odometer(), heartMonitor(){
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	00 d0       	rcall	.+0      	; 0xa5a <_ZN4tripC1Ev+0x6>
     a5a:	cd b7       	in	r28, 0x3d	; 61
     a5c:	de b7       	in	r29, 0x3e	; 62
     a5e:	9a 83       	std	Y+2, r25	; 0x02
     a60:	89 83       	std	Y+1, r24	; 0x01
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	9a 81       	ldd	r25, Y+2	; 0x02
     a66:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN8odometerC1Ev>
     a6a:	89 81       	ldd	r24, Y+1	; 0x01
     a6c:	9a 81       	ldd	r25, Y+2	; 0x02
     a6e:	c5 96       	adiw	r24, 0x35	; 53
     a70:	0e 94 79 04 	call	0x8f2	; 0x8f2 <_ZN12heartMonitorC1Ev>
	//Do nothing in this, only important because it's a mix of heartMonitor and odometer.
}
     a74:	0f 90       	pop	r0
     a76:	0f 90       	pop	r0
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	08 95       	ret

00000a7e <__vector_13>:

//Global trip 
trip globalTrip;

//ISR
ISR(TIMER1_OVF_vect){
     a7e:	1f 92       	push	r1
     a80:	0f 92       	push	r0
     a82:	0f b6       	in	r0, 0x3f	; 63
     a84:	0f 92       	push	r0
     a86:	11 24       	eor	r1, r1
     a88:	2f 93       	push	r18
     a8a:	3f 93       	push	r19
     a8c:	4f 93       	push	r20
     a8e:	5f 93       	push	r21
     a90:	6f 93       	push	r22
     a92:	7f 93       	push	r23
     a94:	8f 93       	push	r24
     a96:	9f 93       	push	r25
     a98:	af 93       	push	r26
     a9a:	bf 93       	push	r27
     a9c:	ef 93       	push	r30
     a9e:	ff 93       	push	r31
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62
	cli();
     aa8:	f8 94       	cli
	//Do nothing;
	prtLED |= (1 << bnLED);
     aaa:	88 e2       	ldi	r24, 0x28	; 40
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	28 e2       	ldi	r18, 0x28	; 40
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	f9 01       	movw	r30, r18
     ab4:	20 81       	ld	r18, Z
     ab6:	20 62       	ori	r18, 0x20	; 32
     ab8:	fc 01       	movw	r30, r24
     aba:	20 83       	st	Z, r18
	Wait_ms(10);
     abc:	8a e0       	ldi	r24, 0x0A	; 10
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0e 94 bd 09 	call	0x137a	; 0x137a <_Z7Wait_msi>
	prtLED &= ~(1 << bnLED);
     ac4:	88 e2       	ldi	r24, 0x28	; 40
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	28 e2       	ldi	r18, 0x28	; 40
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	f9 01       	movw	r30, r18
     ace:	20 81       	ld	r18, Z
     ad0:	2f 7d       	andi	r18, 0xDF	; 223
     ad2:	fc 01       	movw	r30, r24
     ad4:	20 83       	st	Z, r18
	sei();
     ad6:	78 94       	sei
}
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	ff 91       	pop	r31
     ade:	ef 91       	pop	r30
     ae0:	bf 91       	pop	r27
     ae2:	af 91       	pop	r26
     ae4:	9f 91       	pop	r25
     ae6:	8f 91       	pop	r24
     ae8:	7f 91       	pop	r23
     aea:	6f 91       	pop	r22
     aec:	5f 91       	pop	r21
     aee:	4f 91       	pop	r20
     af0:	3f 91       	pop	r19
     af2:	2f 91       	pop	r18
     af4:	0f 90       	pop	r0
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	0f 90       	pop	r0
     afa:	1f 90       	pop	r1
     afc:	18 95       	reti

00000afe <__vector_1>:

ISR(INT0_vect){
     afe:	1f 92       	push	r1
     b00:	0f 92       	push	r0
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	0f 92       	push	r0
     b06:	11 24       	eor	r1, r1
     b08:	2f 93       	push	r18
     b0a:	3f 93       	push	r19
     b0c:	4f 93       	push	r20
     b0e:	5f 93       	push	r21
     b10:	6f 93       	push	r22
     b12:	7f 93       	push	r23
     b14:	8f 93       	push	r24
     b16:	9f 93       	push	r25
     b18:	af 93       	push	r26
     b1a:	bf 93       	push	r27
     b1c:	ef 93       	push	r30
     b1e:	ff 93       	push	r31
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	00 d0       	rcall	.+0      	; 0xb26 <__vector_1+0x28>
     b26:	00 d0       	rcall	.+0      	; 0xb28 <__vector_1+0x2a>
     b28:	cd b7       	in	r28, 0x3d	; 61
     b2a:	de b7       	in	r29, 0x3e	; 62
	cli();
     b2c:	f8 94       	cli
	volatile static unsigned int lastTime=0,interruptsSinceLastCalc=0;
	volatile unsigned int newTime=0;
     b2e:	1c 82       	std	Y+4, r1	; 0x04
     b30:	1b 82       	std	Y+3, r1	; 0x03

	unsigned int value=TCNT1;
     b32:	84 e8       	ldi	r24, 0x84	; 132
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	fc 01       	movw	r30, r24
     b38:	80 81       	ld	r24, Z
     b3a:	91 81       	ldd	r25, Z+1	; 0x01
     b3c:	9a 83       	std	Y+2, r25	; 0x02
     b3e:	89 83       	std	Y+1, r24	; 0x01

	newTime=value;
     b40:	89 81       	ldd	r24, Y+1	; 0x01
     b42:	9a 81       	ldd	r25, Y+2	; 0x02
     b44:	9c 83       	std	Y+4, r25	; 0x04
     b46:	8b 83       	std	Y+3, r24	; 0x03

	if (interruptsSinceLastCalc++ > 8){
     b48:	80 91 b2 01 	lds	r24, 0x01B2
     b4c:	90 91 b3 01 	lds	r25, 0x01B3
     b50:	21 e0       	ldi	r18, 0x01	; 1
     b52:	89 30       	cpi	r24, 0x09	; 9
     b54:	91 05       	cpc	r25, r1
     b56:	08 f4       	brcc	.+2      	; 0xb5a <__vector_1+0x5c>
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	01 96       	adiw	r24, 0x01	; 1
     b5c:	90 93 b3 01 	sts	0x01B3, r25
     b60:	80 93 b2 01 	sts	0x01B2, r24
     b64:	22 23       	and	r18, r18
     b66:	39 f0       	breq	.+14     	; 0xb76 <__vector_1+0x78>
		flagCalcSpeed=fTrue;
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	80 93 43 01 	sts	0x0143, r24
		interruptsSinceLastCalc=0;
     b6e:	10 92 b3 01 	sts	0x01B3, r1
     b72:	10 92 b2 01 	sts	0x01B2, r1
	}
	
	prtLED |= (1 << bnSPEEDLED);
     b76:	88 e2       	ldi	r24, 0x28	; 40
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	28 e2       	ldi	r18, 0x28	; 40
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	f9 01       	movw	r30, r18
     b80:	20 81       	ld	r18, Z
     b82:	20 61       	ori	r18, 0x10	; 16
     b84:	fc 01       	movw	r30, r24
     b86:	20 83       	st	Z, r18
	Wait_ms(10);
     b88:	8a e0       	ldi	r24, 0x0A	; 10
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 bd 09 	call	0x137a	; 0x137a <_Z7Wait_msi>
	prtLED &= ~(1 << bnSPEEDLED);
     b90:	88 e2       	ldi	r24, 0x28	; 40
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	28 e2       	ldi	r18, 0x28	; 40
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	f9 01       	movw	r30, r18
     b9a:	20 81       	ld	r18, Z
     b9c:	2f 7e       	andi	r18, 0xEF	; 239
     b9e:	fc 01       	movw	r30, r24
     ba0:	20 83       	st	Z, r18
	
	if (newTime < lastTime){
     ba2:	2b 81       	ldd	r18, Y+3	; 0x03
     ba4:	3c 81       	ldd	r19, Y+4	; 0x04
     ba6:	80 91 b4 01 	lds	r24, 0x01B4
     baa:	90 91 b5 01 	lds	r25, 0x01B5
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	28 17       	cp	r18, r24
     bb2:	39 07       	cpc	r19, r25
     bb4:	08 f0       	brcs	.+2      	; 0xbb8 <__vector_1+0xba>
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	44 23       	and	r20, r20
     bba:	99 f0       	breq	.+38     	; 0xbe2 <__vector_1+0xe4>
		globalTrip.addDataPoint(newTime+TIMER_OFFSET-lastTime);
     bbc:	2b 81       	ldd	r18, Y+3	; 0x03
     bbe:	3c 81       	ldd	r19, Y+4	; 0x04
     bc0:	80 91 b4 01 	lds	r24, 0x01B4
     bc4:	90 91 b5 01 	lds	r25, 0x01B5
     bc8:	a9 01       	movw	r20, r18
     bca:	48 1b       	sub	r20, r24
     bcc:	59 0b       	sbc	r21, r25
     bce:	ca 01       	movw	r24, r20
     bd0:	9c 01       	movw	r18, r24
     bd2:	21 50       	subi	r18, 0x01	; 1
     bd4:	30 40       	sbci	r19, 0x00	; 0
     bd6:	8b e5       	ldi	r24, 0x5B	; 91
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	b9 01       	movw	r22, r18
     bdc:	0e 94 4d 02 	call	0x49a	; 0x49a <_ZN8odometer12addDataPointEj>
     be0:	0d c0       	rjmp	.+26     	; 0xbfc <__vector_1+0xfe>
	} else {
		globalTrip.addDataPoint(newTime-lastTime);
     be2:	2b 81       	ldd	r18, Y+3	; 0x03
     be4:	3c 81       	ldd	r19, Y+4	; 0x04
     be6:	80 91 b4 01 	lds	r24, 0x01B4
     bea:	90 91 b5 01 	lds	r25, 0x01B5
     bee:	28 1b       	sub	r18, r24
     bf0:	39 0b       	sbc	r19, r25
     bf2:	8b e5       	ldi	r24, 0x5B	; 91
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	b9 01       	movw	r22, r18
     bf8:	0e 94 4d 02 	call	0x49a	; 0x49a <_ZN8odometer12addDataPointEj>
	}

	//Update last time
	lastTime=newTime;
     bfc:	8b 81       	ldd	r24, Y+3	; 0x03
     bfe:	9c 81       	ldd	r25, Y+4	; 0x04
     c00:	90 93 b5 01 	sts	0x01B5, r25
     c04:	80 93 b4 01 	sts	0x01B4, r24

	sei();	
     c08:	78 94       	sei
}
     c0a:	24 96       	adiw	r28, 0x04	; 4
     c0c:	de bf       	out	0x3e, r29	; 62
     c0e:	cd bf       	out	0x3d, r28	; 61
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	ff 91       	pop	r31
     c16:	ef 91       	pop	r30
     c18:	bf 91       	pop	r27
     c1a:	af 91       	pop	r26
     c1c:	9f 91       	pop	r25
     c1e:	8f 91       	pop	r24
     c20:	7f 91       	pop	r23
     c22:	6f 91       	pop	r22
     c24:	5f 91       	pop	r21
     c26:	4f 91       	pop	r20
     c28:	3f 91       	pop	r19
     c2a:	2f 91       	pop	r18
     c2c:	0f 90       	pop	r0
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	0f 90       	pop	r0
     c32:	1f 90       	pop	r1
     c34:	18 95       	reti

00000c36 <__vector_7>:


//Toggled every 4ms roughly. 1/(8MHz/128/248)
ISR(TIMER2_COMPA_vect){
     c36:	1f 92       	push	r1
     c38:	0f 92       	push	r0
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	0f 92       	push	r0
     c3e:	11 24       	eor	r1, r1
     c40:	2f 93       	push	r18
     c42:	3f 93       	push	r19
     c44:	4f 93       	push	r20
     c46:	5f 93       	push	r21
     c48:	6f 93       	push	r22
     c4a:	7f 93       	push	r23
     c4c:	8f 93       	push	r24
     c4e:	9f 93       	push	r25
     c50:	af 93       	push	r26
     c52:	bf 93       	push	r27
     c54:	ef 93       	push	r30
     c56:	ff 93       	push	r31
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
     c60:	28 97       	sbiw	r28, 0x08	; 8
     c62:	de bf       	out	0x3e, r29	; 62
     c64:	cd bf       	out	0x3d, r28	; 61
	cli();
     c66:	f8 94       	cli
	//Declare variables
	WORD signal=0;
     c68:	1e 82       	std	Y+6, r1	; 0x06
     c6a:	1d 82       	std	Y+5, r1	; 0x05
	volatile static unsigned int rate[10],P=512,T=512,thresh=512,amp=100;
	volatile static WORD N=0;
	
	N+=2;
     c6c:	80 91 9c 01 	lds	r24, 0x019C
     c70:	90 91 9d 01 	lds	r25, 0x019D
     c74:	02 96       	adiw	r24, 0x02	; 2
     c76:	90 93 9d 01 	sts	0x019D, r25
     c7a:	80 93 9c 01 	sts	0x019C, r24
	
	//Implementation: Should be moved to a routine/function in main program where this sends flag up.
	signal = GetADC();		//retrieves ADC reading on ADC0
     c7e:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z6GetADCv>
     c82:	9e 83       	std	Y+6, r25	; 0x06
     c84:	8d 83       	std	Y+5, r24	; 0x05
	
	//Adjust Peak and Trough Accordingly
	if (signal < thresh && N > (IBI/5)*3){		//signals less than thresh, time inbetween is more than last interval * 3/5
     c86:	80 91 36 01 	lds	r24, 0x0136
     c8a:	90 91 37 01 	lds	r25, 0x0137
     c8e:	2d 81       	ldd	r18, Y+5	; 0x05
     c90:	3e 81       	ldd	r19, Y+6	; 0x06
     c92:	28 17       	cp	r18, r24
     c94:	39 07       	cpc	r19, r25
     c96:	c0 f4       	brcc	.+48     	; 0xcc8 <__vector_7+0x92>
     c98:	80 91 40 01 	lds	r24, 0x0140
     c9c:	90 91 41 01 	lds	r25, 0x0141
     ca0:	25 e0       	ldi	r18, 0x05	; 5
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	b9 01       	movw	r22, r18
     ca6:	0e 94 26 0c 	call	0x184c	; 0x184c <__udivmodhi4>
     caa:	9b 01       	movw	r18, r22
     cac:	c9 01       	movw	r24, r18
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	28 0f       	add	r18, r24
     cb4:	39 1f       	adc	r19, r25
     cb6:	80 91 9c 01 	lds	r24, 0x019C
     cba:	90 91 9d 01 	lds	r25, 0x019D
     cbe:	28 17       	cp	r18, r24
     cc0:	39 07       	cpc	r19, r25
     cc2:	10 f4       	brcc	.+4      	; 0xcc8 <__vector_7+0x92>
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	01 c0       	rjmp	.+2      	; 0xcca <__vector_7+0x94>
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	88 23       	and	r24, r24
     ccc:	99 f0       	breq	.+38     	; 0xcf4 <__vector_7+0xbe>
		if (signal < T){
     cce:	80 91 38 01 	lds	r24, 0x0138
     cd2:	90 91 39 01 	lds	r25, 0x0139
     cd6:	41 e0       	ldi	r20, 0x01	; 1
     cd8:	2d 81       	ldd	r18, Y+5	; 0x05
     cda:	3e 81       	ldd	r19, Y+6	; 0x06
     cdc:	28 17       	cp	r18, r24
     cde:	39 07       	cpc	r19, r25
     ce0:	08 f0       	brcs	.+2      	; 0xce4 <__vector_7+0xae>
     ce2:	40 e0       	ldi	r20, 0x00	; 0
     ce4:	44 23       	and	r20, r20
     ce6:	31 f0       	breq	.+12     	; 0xcf4 <__vector_7+0xbe>
			T = signal;
     ce8:	8d 81       	ldd	r24, Y+5	; 0x05
     cea:	9e 81       	ldd	r25, Y+6	; 0x06
     cec:	90 93 39 01 	sts	0x0139, r25
     cf0:	80 93 38 01 	sts	0x0138, r24
		}
	}
	if (signal > thresh && signal > P){
     cf4:	80 91 36 01 	lds	r24, 0x0136
     cf8:	90 91 37 01 	lds	r25, 0x0137
     cfc:	2d 81       	ldd	r18, Y+5	; 0x05
     cfe:	3e 81       	ldd	r19, Y+6	; 0x06
     d00:	82 17       	cp	r24, r18
     d02:	93 07       	cpc	r25, r19
     d04:	58 f4       	brcc	.+22     	; 0xd1c <__vector_7+0xe6>
     d06:	80 91 3a 01 	lds	r24, 0x013A
     d0a:	90 91 3b 01 	lds	r25, 0x013B
     d0e:	2d 81       	ldd	r18, Y+5	; 0x05
     d10:	3e 81       	ldd	r19, Y+6	; 0x06
     d12:	82 17       	cp	r24, r18
     d14:	93 07       	cpc	r25, r19
     d16:	10 f4       	brcc	.+4      	; 0xd1c <__vector_7+0xe6>
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	01 c0       	rjmp	.+2      	; 0xd1e <__vector_7+0xe8>
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	88 23       	and	r24, r24
     d20:	31 f0       	breq	.+12     	; 0xd2e <__vector_7+0xf8>
		P = signal;
     d22:	8d 81       	ldd	r24, Y+5	; 0x05
     d24:	9e 81       	ldd	r25, Y+6	; 0x06
     d26:	90 93 3b 01 	sts	0x013B, r25
     d2a:	80 93 3a 01 	sts	0x013A, r24
	}
	
	//If time since alst read is more than 250, see if signal is above thresh and time is good.
	if (N>250){
     d2e:	80 91 9c 01 	lds	r24, 0x019C
     d32:	90 91 9d 01 	lds	r25, 0x019D
     d36:	21 e0       	ldi	r18, 0x01	; 1
     d38:	8b 3f       	cpi	r24, 0xFB	; 251
     d3a:	91 05       	cpc	r25, r1
     d3c:	08 f4       	brcc	.+2      	; 0xd40 <__vector_7+0x10a>
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	22 23       	and	r18, r18
     d42:	09 f4       	brne	.+2      	; 0xd46 <__vector_7+0x110>
     d44:	e4 c0       	rjmp	.+456    	; 0xf0e <__vector_7+0x2d8>
		if ((signal > thresh) && !pulse && (N>((IBI/5)*3)) && !firstBeat){	//send pulse high
     d46:	80 91 36 01 	lds	r24, 0x0136
     d4a:	90 91 37 01 	lds	r25, 0x0137
     d4e:	2d 81       	ldd	r18, Y+5	; 0x05
     d50:	3e 81       	ldd	r19, Y+6	; 0x06
     d52:	82 17       	cp	r24, r18
     d54:	93 07       	cpc	r25, r19
     d56:	00 f5       	brcc	.+64     	; 0xd98 <__vector_7+0x162>
     d58:	80 91 46 01 	lds	r24, 0x0146
     d5c:	88 23       	and	r24, r24
     d5e:	e1 f4       	brne	.+56     	; 0xd98 <__vector_7+0x162>
     d60:	80 91 40 01 	lds	r24, 0x0140
     d64:	90 91 41 01 	lds	r25, 0x0141
     d68:	25 e0       	ldi	r18, 0x05	; 5
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	b9 01       	movw	r22, r18
     d6e:	0e 94 26 0c 	call	0x184c	; 0x184c <__udivmodhi4>
     d72:	9b 01       	movw	r18, r22
     d74:	c9 01       	movw	r24, r18
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	28 0f       	add	r18, r24
     d7c:	39 1f       	adc	r19, r25
     d7e:	80 91 9c 01 	lds	r24, 0x019C
     d82:	90 91 9d 01 	lds	r25, 0x019D
     d86:	28 17       	cp	r18, r24
     d88:	39 07       	cpc	r19, r25
     d8a:	30 f4       	brcc	.+12     	; 0xd98 <__vector_7+0x162>
     d8c:	80 91 00 01 	lds	r24, 0x0100
     d90:	88 23       	and	r24, r24
     d92:	11 f4       	brne	.+4      	; 0xd98 <__vector_7+0x162>
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	01 c0       	rjmp	.+2      	; 0xd9a <__vector_7+0x164>
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	88 23       	and	r24, r24
     d9c:	09 f4       	brne	.+2      	; 0xda0 <__vector_7+0x16a>
     d9e:	ad c0       	rjmp	.+346    	; 0xefa <__vector_7+0x2c4>
			Print0("-BEAT-");
     da0:	82 e0       	ldi	r24, 0x02	; 2
     da2:	91 e0       	ldi	r25, 0x01	; 1
     da4:	0e 94 0e 0a 	call	0x141c	; 0x141c <_Z6Print0Pc>
			pulse=fTrue;
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	80 93 46 01 	sts	0x0146, r24
			prtLED |= (1 << bnLED);		//turn LED on
     dae:	88 e2       	ldi	r24, 0x28	; 40
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	28 e2       	ldi	r18, 0x28	; 40
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	f9 01       	movw	r30, r18
     db8:	20 81       	ld	r18, Z
     dba:	20 62       	ori	r18, 0x20	; 32
     dbc:	fc 01       	movw	r30, r24
     dbe:	20 83       	st	Z, r18
			IBI=N;
     dc0:	80 91 9c 01 	lds	r24, 0x019C
     dc4:	90 91 9d 01 	lds	r25, 0x019D
     dc8:	90 93 41 01 	sts	0x0141, r25
     dcc:	80 93 40 01 	sts	0x0140, r24
			N=0;
     dd0:	10 92 9d 01 	sts	0x019D, r1
     dd4:	10 92 9c 01 	sts	0x019C, r1
			if (secondBeat){
     dd8:	90 91 01 01 	lds	r25, 0x0101
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	99 23       	and	r25, r25
     de0:	09 f4       	brne	.+2      	; 0xde4 <__vector_7+0x1ae>
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	88 23       	and	r24, r24
     de6:	01 f1       	breq	.+64     	; 0xe28 <__vector_7+0x1f2>
				secondBeat=fFalse;
     de8:	10 92 01 01 	sts	0x0101, r1
				for (int i=0; i < 9; i++){
     dec:	1a 82       	std	Y+2, r1	; 0x02
     dee:	19 82       	std	Y+1, r1	; 0x01
     df0:	12 c0       	rjmp	.+36     	; 0xe16 <__vector_7+0x1e0>
					rate[i]=IBI;
     df2:	20 91 40 01 	lds	r18, 0x0140
     df6:	30 91 41 01 	lds	r19, 0x0141
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	9a 81       	ldd	r25, Y+2	; 0x02
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	82 56       	subi	r24, 0x62	; 98
     e04:	9e 4f       	sbci	r25, 0xFE	; 254
     e06:	fc 01       	movw	r30, r24
     e08:	31 83       	std	Z+1, r19	; 0x01
     e0a:	20 83       	st	Z, r18
			prtLED |= (1 << bnLED);		//turn LED on
			IBI=N;
			N=0;
			if (secondBeat){
				secondBeat=fFalse;
				for (int i=0; i < 9; i++){
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	9a 81       	ldd	r25, Y+2	; 0x02
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	9a 83       	std	Y+2, r25	; 0x02
     e14:	89 83       	std	Y+1, r24	; 0x01
     e16:	21 e0       	ldi	r18, 0x01	; 1
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	9a 81       	ldd	r25, Y+2	; 0x02
     e1c:	89 30       	cpi	r24, 0x09	; 9
     e1e:	91 05       	cpc	r25, r1
     e20:	0c f0       	brlt	.+2      	; 0xe24 <__vector_7+0x1ee>
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	22 23       	and	r18, r18
     e26:	29 f7       	brne	.-54     	; 0xdf2 <__vector_7+0x1bc>
					rate[i]=IBI;
				}
			}
		
			//Calculate the IBI and BPM.
			volatile WORD runningTotal=0;
     e28:	18 86       	std	Y+8, r1	; 0x08
     e2a:	1f 82       	std	Y+7, r1	; 0x07
			for (int i=0; i< 9; i++){
     e2c:	1c 82       	std	Y+4, r1	; 0x04
     e2e:	1b 82       	std	Y+3, r1	; 0x03
     e30:	27 c0       	rjmp	.+78     	; 0xe80 <__vector_7+0x24a>
				rate[i]=rate[i+1];	//shift backwards
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	9c 81       	ldd	r25, Y+4	; 0x04
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	82 56       	subi	r24, 0x62	; 98
     e3e:	9e 4f       	sbci	r25, 0xFE	; 254
     e40:	fc 01       	movw	r30, r24
     e42:	20 81       	ld	r18, Z
     e44:	31 81       	ldd	r19, Z+1	; 0x01
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	9c 81       	ldd	r25, Y+4	; 0x04
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	82 56       	subi	r24, 0x62	; 98
     e50:	9e 4f       	sbci	r25, 0xFE	; 254
     e52:	fc 01       	movw	r30, r24
     e54:	31 83       	std	Z+1, r19	; 0x01
     e56:	20 83       	st	Z, r18
				runningTotal += rate[i];
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	9c 81       	ldd	r25, Y+4	; 0x04
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	82 56       	subi	r24, 0x62	; 98
     e62:	9e 4f       	sbci	r25, 0xFE	; 254
     e64:	fc 01       	movw	r30, r24
     e66:	20 81       	ld	r18, Z
     e68:	31 81       	ldd	r19, Z+1	; 0x01
     e6a:	8f 81       	ldd	r24, Y+7	; 0x07
     e6c:	98 85       	ldd	r25, Y+8	; 0x08
     e6e:	82 0f       	add	r24, r18
     e70:	93 1f       	adc	r25, r19
     e72:	98 87       	std	Y+8, r25	; 0x08
     e74:	8f 83       	std	Y+7, r24	; 0x07
				}
			}
		
			//Calculate the IBI and BPM.
			volatile WORD runningTotal=0;
			for (int i=0; i< 9; i++){
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	9c 81       	ldd	r25, Y+4	; 0x04
     e7a:	01 96       	adiw	r24, 0x01	; 1
     e7c:	9c 83       	std	Y+4, r25	; 0x04
     e7e:	8b 83       	std	Y+3, r24	; 0x03
     e80:	21 e0       	ldi	r18, 0x01	; 1
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	9c 81       	ldd	r25, Y+4	; 0x04
     e86:	89 30       	cpi	r24, 0x09	; 9
     e88:	91 05       	cpc	r25, r1
     e8a:	0c f0       	brlt	.+2      	; 0xe8e <__vector_7+0x258>
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	22 23       	and	r18, r18
     e90:	81 f6       	brne	.-96     	; 0xe32 <__vector_7+0x1fc>
				rate[i]=rate[i+1];	//shift backwards
				runningTotal += rate[i];
			}
			rate[9]=IBI;
     e92:	80 91 40 01 	lds	r24, 0x0140
     e96:	90 91 41 01 	lds	r25, 0x0141
     e9a:	90 93 b1 01 	sts	0x01B1, r25
     e9e:	80 93 b0 01 	sts	0x01B0, r24
			runningTotal+=rate[9];
     ea2:	20 91 b0 01 	lds	r18, 0x01B0
     ea6:	30 91 b1 01 	lds	r19, 0x01B1
     eaa:	8f 81       	ldd	r24, Y+7	; 0x07
     eac:	98 85       	ldd	r25, Y+8	; 0x08
     eae:	82 0f       	add	r24, r18
     eb0:	93 1f       	adc	r25, r19
     eb2:	98 87       	std	Y+8, r25	; 0x08
     eb4:	8f 83       	std	Y+7, r24	; 0x07
			runningTotal/=10;			//time it took all of them in milliseconds
     eb6:	8f 81       	ldd	r24, Y+7	; 0x07
     eb8:	98 85       	ldd	r25, Y+8	; 0x08
     eba:	2a e0       	ldi	r18, 0x0A	; 10
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	b9 01       	movw	r22, r18
     ec0:	0e 94 26 0c 	call	0x184c	; 0x184c <__udivmodhi4>
     ec4:	9b 01       	movw	r18, r22
     ec6:	c9 01       	movw	r24, r18
     ec8:	98 87       	std	Y+8, r25	; 0x08
     eca:	8f 83       	std	Y+7, r24	; 0x07
			BPM=60000/runningTotal;		//60 seconds in minute, 1000ms in second
     ecc:	8f 81       	ldd	r24, Y+7	; 0x07
     ece:	98 85       	ldd	r25, Y+8	; 0x08
     ed0:	9c 01       	movw	r18, r24
     ed2:	40 e0       	ldi	r20, 0x00	; 0
     ed4:	50 e0       	ldi	r21, 0x00	; 0
     ed6:	80 e6       	ldi	r24, 0x60	; 96
     ed8:	9a ee       	ldi	r25, 0xEA	; 234
     eda:	a0 e0       	ldi	r26, 0x00	; 0
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	bc 01       	movw	r22, r24
     ee0:	cd 01       	movw	r24, r26
     ee2:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__divmodsi4>
     ee6:	da 01       	movw	r26, r20
     ee8:	c9 01       	movw	r24, r18
     eea:	90 93 3f 01 	sts	0x013F, r25
     eee:	80 93 3e 01 	sts	0x013E, r24
			QS=fTrue;
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	80 93 42 01 	sts	0x0142, r24
     ef8:	0a c0       	rjmp	.+20     	; 0xf0e <__vector_7+0x2d8>

		} else if (firstBeat){
     efa:	90 91 00 01 	lds	r25, 0x0100
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	99 23       	and	r25, r25
     f02:	09 f4       	brne	.+2      	; 0xf06 <__vector_7+0x2d0>
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	88 23       	and	r24, r24
     f08:	11 f0       	breq	.+4      	; 0xf0e <__vector_7+0x2d8>
				firstBeat=fFalse;
     f0a:	10 92 00 01 	sts	0x0100, r1
		}		
	}//end if N>250
		
	//No pulse after last interrupt/pulse, send signal low again, reset things.
	if (signal < thresh && pulse){
     f0e:	80 91 36 01 	lds	r24, 0x0136
     f12:	90 91 37 01 	lds	r25, 0x0137
     f16:	2d 81       	ldd	r18, Y+5	; 0x05
     f18:	3e 81       	ldd	r19, Y+6	; 0x06
     f1a:	28 17       	cp	r18, r24
     f1c:	39 07       	cpc	r19, r25
     f1e:	30 f4       	brcc	.+12     	; 0xf2c <__vector_7+0x2f6>
     f20:	80 91 46 01 	lds	r24, 0x0146
     f24:	88 23       	and	r24, r24
     f26:	11 f0       	breq	.+4      	; 0xf2c <__vector_7+0x2f6>
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	01 c0       	rjmp	.+2      	; 0xf2e <__vector_7+0x2f8>
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	88 23       	and	r24, r24
     f30:	e1 f1       	breq	.+120    	; 0xfaa <__vector_7+0x374>
		prtLED &= ~(1 << bnLED);
     f32:	88 e2       	ldi	r24, 0x28	; 40
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	28 e2       	ldi	r18, 0x28	; 40
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	f9 01       	movw	r30, r18
     f3c:	20 81       	ld	r18, Z
     f3e:	2f 7d       	andi	r18, 0xDF	; 223
     f40:	fc 01       	movw	r30, r24
     f42:	20 83       	st	Z, r18
		pulse=fFalse;
     f44:	10 92 46 01 	sts	0x0146, r1
		amp=P-T;
     f48:	20 91 3a 01 	lds	r18, 0x013A
     f4c:	30 91 3b 01 	lds	r19, 0x013B
     f50:	80 91 38 01 	lds	r24, 0x0138
     f54:	90 91 39 01 	lds	r25, 0x0139
     f58:	a9 01       	movw	r20, r18
     f5a:	48 1b       	sub	r20, r24
     f5c:	59 0b       	sbc	r21, r25
     f5e:	ca 01       	movw	r24, r20
     f60:	90 93 3d 01 	sts	0x013D, r25
     f64:	80 93 3c 01 	sts	0x013C, r24
		thresh=amp/2+T;
     f68:	80 91 3c 01 	lds	r24, 0x013C
     f6c:	90 91 3d 01 	lds	r25, 0x013D
     f70:	9c 01       	movw	r18, r24
     f72:	36 95       	lsr	r19
     f74:	27 95       	ror	r18
     f76:	80 91 38 01 	lds	r24, 0x0138
     f7a:	90 91 39 01 	lds	r25, 0x0139
     f7e:	82 0f       	add	r24, r18
     f80:	93 1f       	adc	r25, r19
     f82:	90 93 37 01 	sts	0x0137, r25
     f86:	80 93 36 01 	sts	0x0136, r24
		P=thresh;
     f8a:	80 91 36 01 	lds	r24, 0x0136
     f8e:	90 91 37 01 	lds	r25, 0x0137
     f92:	90 93 3b 01 	sts	0x013B, r25
     f96:	80 93 3a 01 	sts	0x013A, r24
		T=thresh;
     f9a:	80 91 36 01 	lds	r24, 0x0136
     f9e:	90 91 37 01 	lds	r25, 0x0137
     fa2:	90 93 39 01 	sts	0x0139, r25
     fa6:	80 93 38 01 	sts	0x0138, r24
	}
	
	//Wow, not getting a pulse, reset things
	if (N>=20000){
     faa:	80 91 9c 01 	lds	r24, 0x019C
     fae:	90 91 9d 01 	lds	r25, 0x019D
     fb2:	21 e0       	ldi	r18, 0x01	; 1
     fb4:	5e e4       	ldi	r21, 0x4E	; 78
     fb6:	80 32       	cpi	r24, 0x20	; 32
     fb8:	95 07       	cpc	r25, r21
     fba:	08 f4       	brcc	.+2      	; 0xfbe <__vector_7+0x388>
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	22 23       	and	r18, r18
     fc0:	01 f1       	breq	.+64     	; 0x1002 <__vector_7+0x3cc>
		Print0("-TIMEOUT-");
     fc2:	89 e0       	ldi	r24, 0x09	; 9
     fc4:	91 e0       	ldi	r25, 0x01	; 1
     fc6:	0e 94 0e 0a 	call	0x141c	; 0x141c <_Z6Print0Pc>
		thresh=512;
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	92 e0       	ldi	r25, 0x02	; 2
     fce:	90 93 37 01 	sts	0x0137, r25
     fd2:	80 93 36 01 	sts	0x0136, r24
		P=512;
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	92 e0       	ldi	r25, 0x02	; 2
     fda:	90 93 3b 01 	sts	0x013B, r25
     fde:	80 93 3a 01 	sts	0x013A, r24
		T=512;
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	92 e0       	ldi	r25, 0x02	; 2
     fe6:	90 93 39 01 	sts	0x0139, r25
     fea:	80 93 38 01 	sts	0x0138, r24
		firstBeat=fTrue;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	80 93 00 01 	sts	0x0100, r24
		secondBeat=fTrue;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	80 93 01 01 	sts	0x0101, r24
		N=0;
     ffa:	10 92 9d 01 	sts	0x019D, r1
     ffe:	10 92 9c 01 	sts	0x019C, r1
	}
	sei();		//dumb as shit
    1002:	78 94       	sei
}
    1004:	28 96       	adiw	r28, 0x08	; 8
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	ff 91       	pop	r31
    1010:	ef 91       	pop	r30
    1012:	bf 91       	pop	r27
    1014:	af 91       	pop	r26
    1016:	9f 91       	pop	r25
    1018:	8f 91       	pop	r24
    101a:	7f 91       	pop	r23
    101c:	6f 91       	pop	r22
    101e:	5f 91       	pop	r21
    1020:	4f 91       	pop	r20
    1022:	3f 91       	pop	r19
    1024:	2f 91       	pop	r18
    1026:	0f 90       	pop	r0
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	0f 90       	pop	r0
    102c:	1f 90       	pop	r1
    102e:	18 95       	reti

00001030 <main>:

//Main Program
int main(void){
    1030:	0f 93       	push	r16
    1032:	1f 93       	push	r17
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	a0 97       	sbiw	r28, 0x20	; 32
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
	DeviceInit();
    1048:	0e 94 97 08 	call	0x112e	; 0x112e <_Z10DeviceInitv>
	AppInit(MYUBRR);
    104c:	83 e3       	ldi	r24, 0x33	; 51
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	0e 94 b6 08 	call	0x116c	; 0x116c <_Z7AppInitj>
	Print0("Hello...");
    1054:	83 e1       	ldi	r24, 0x13	; 19
    1056:	91 e0       	ldi	r25, 0x01	; 1
    1058:	0e 94 0e 0a 	call	0x141c	; 0x141c <_Z6Print0Pc>
	Wait_ms(500);
    105c:	84 ef       	ldi	r24, 0xF4	; 244
    105e:	91 e0       	ldi	r25, 0x01	; 1
    1060:	0e 94 bd 09 	call	0x137a	; 0x137a <_Z7Wait_msi>
	initTimer2();	
    1064:	0e 94 23 09 	call	0x1246	; 0x1246 <_Z10initTimer2v>
	sei();
    1068:	78 94       	sei
    106a:	01 c0       	rjmp	.+2      	; 0x106e <main+0x3e>
	while (fTrue){
    106c:	00 00       	nop
		if (QS){
    106e:	90 91 42 01 	lds	r25, 0x0142
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	99 23       	and	r25, r25
    1076:	09 f4       	brne	.+2      	; 0x107a <main+0x4a>
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	88 23       	and	r24, r24
    107c:	59 f1       	breq	.+86     	; 0x10d4 <main+0xa4>
			cli();
    107e:	f8 94       	cli
			Print0("Processing...");
    1080:	8c e1       	ldi	r24, 0x1C	; 28
    1082:	91 e0       	ldi	r25, 0x01	; 1
    1084:	0e 94 0e 0a 	call	0x141c	; 0x141c <_Z6Print0Pc>
			QS=fFalse;
    1088:	10 92 42 01 	sts	0x0142, r1
			char BMPstring[10];
			char IBIstring[10];
			utoa(BPM,BMPstring,10);
    108c:	80 91 3e 01 	lds	r24, 0x013E
    1090:	90 91 3f 01 	lds	r25, 0x013F
    1094:	9e 01       	movw	r18, r28
    1096:	2b 5f       	subi	r18, 0xFB	; 251
    1098:	3f 4f       	sbci	r19, 0xFF	; 255
    109a:	b9 01       	movw	r22, r18
    109c:	4a e0       	ldi	r20, 0x0A	; 10
    109e:	50 e0       	ldi	r21, 0x00	; 0
    10a0:	0e 94 9f 0c 	call	0x193e	; 0x193e <utoa>
			utoa(IBI,IBIstring,10);
    10a4:	80 91 40 01 	lds	r24, 0x0140
    10a8:	90 91 41 01 	lds	r25, 0x0141
    10ac:	9e 01       	movw	r18, r28
    10ae:	21 5f       	subi	r18, 0xF1	; 241
    10b0:	3f 4f       	sbci	r19, 0xFF	; 255
    10b2:	b9 01       	movw	r22, r18
    10b4:	4a e0       	ldi	r20, 0x0A	; 10
    10b6:	50 e0       	ldi	r21, 0x00	; 0
    10b8:	0e 94 9f 0c 	call	0x193e	; 0x193e <utoa>
			BMPstring[9]='\0';
    10bc:	1e 86       	std	Y+14, r1	; 0x0e
			BMPstring[8]='.';
    10be:	8e e2       	ldi	r24, 0x2E	; 46
    10c0:	8d 87       	std	Y+13, r24	; 0x0d
			Print0("BPM:");
    10c2:	8a e2       	ldi	r24, 0x2A	; 42
    10c4:	91 e0       	ldi	r25, 0x01	; 1
    10c6:	0e 94 0e 0a 	call	0x141c	; 0x141c <_Z6Print0Pc>
			Print0(BMPstring);
    10ca:	ce 01       	movw	r24, r28
    10cc:	05 96       	adiw	r24, 0x05	; 5
    10ce:	0e 94 0e 0a 	call	0x141c	; 0x141c <_Z6Print0Pc>
			sei();
    10d2:	78 94       	sei
		}
		
		if (flagCalcSpeed){
    10d4:	90 91 43 01 	lds	r25, 0x0143
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	99 23       	and	r25, r25
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <main+0xb0>
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	88 23       	and	r24, r24
    10e2:	21 f2       	breq	.-120    	; 0x106c <main+0x3c>
			//Calculate speed using data points.
			float speed;
			char speedString[8];
			speed = globalTrip.getCurrentSpeed();
    10e4:	8b e5       	ldi	r24, 0x5B	; 91
    10e6:	91 e0       	ldi	r25, 0x01	; 1
    10e8:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_ZN8odometer15getCurrentSpeedEv>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	89 83       	std	Y+1, r24	; 0x01
    10f2:	9a 83       	std	Y+2, r25	; 0x02
    10f4:	ab 83       	std	Y+3, r26	; 0x03
    10f6:	bc 83       	std	Y+4, r27	; 0x04
			dtostrf(speed,5,2,speedString);
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	9a 81       	ldd	r25, Y+2	; 0x02
    10fc:	ab 81       	ldd	r26, Y+3	; 0x03
    10fe:	bc 81       	ldd	r27, Y+4	; 0x04
    1100:	fe 01       	movw	r30, r28
    1102:	79 96       	adiw	r30, 0x19	; 25
    1104:	bc 01       	movw	r22, r24
    1106:	cd 01       	movw	r24, r26
    1108:	45 e0       	ldi	r20, 0x05	; 5
    110a:	22 e0       	ldi	r18, 0x02	; 2
    110c:	8f 01       	movw	r16, r30
    110e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <dtostrf>
			speedString[6]='.';
    1112:	8e e2       	ldi	r24, 0x2E	; 46
    1114:	8f 8f       	std	Y+31, r24	; 0x1f
			speedString[7]='\0';
    1116:	18 a2       	lds	r17, 0x98
			Print0("Speed:");
    1118:	8f e2       	ldi	r24, 0x2F	; 47
    111a:	91 e0       	ldi	r25, 0x01	; 1
    111c:	0e 94 0e 0a 	call	0x141c	; 0x141c <_Z6Print0Pc>
			Print0(speedString);
    1120:	ce 01       	movw	r24, r28
    1122:	49 96       	adiw	r24, 0x19	; 25
    1124:	0e 94 0e 0a 	call	0x141c	; 0x141c <_Z6Print0Pc>
			flagCalcSpeed=fFalse;
    1128:	10 92 43 01 	sts	0x0143, r1
	AppInit(MYUBRR);
	Print0("Hello...");
	Wait_ms(500);
	initTimer2();	
	sei();
	while (fTrue){
    112c:	9f cf       	rjmp	.-194    	; 0x106c <main+0x3c>

0000112e <_Z10DeviceInitv>:
		}	
	}
	
}
/*************************************************************************************************************/
void DeviceInit(){
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
	//Set all ports to input with no pull
	DDRB = 0;
    1136:	84 e2       	ldi	r24, 0x24	; 36
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	fc 01       	movw	r30, r24
    113c:	10 82       	st	Z, r1
	DDRC = 0;
    113e:	87 e2       	ldi	r24, 0x27	; 39
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	fc 01       	movw	r30, r24
    1144:	10 82       	st	Z, r1
	DDRD = 0;
    1146:	8a e2       	ldi	r24, 0x2A	; 42
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	fc 01       	movw	r30, r24
    114c:	10 82       	st	Z, r1
	
	PORTB = 0;
    114e:	85 e2       	ldi	r24, 0x25	; 37
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	fc 01       	movw	r30, r24
    1154:	10 82       	st	Z, r1
	PORTC = 0;
    1156:	88 e2       	ldi	r24, 0x28	; 40
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	fc 01       	movw	r30, r24
    115c:	10 82       	st	Z, r1
	PORTD = 0;
    115e:	8b e2       	ldi	r24, 0x2B	; 43
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	fc 01       	movw	r30, r24
    1164:	10 82       	st	Z, r1
}
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	08 95       	ret

0000116c <_Z7AppInitj>:
/*************************************************************************************************************/
void AppInit(unsigned int ubrr){
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	00 d0       	rcall	.+0      	; 0x1172 <_Z7AppInitj+0x6>
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	9a 83       	std	Y+2, r25	; 0x02
    1178:	89 83       	std	Y+1, r24	; 0x01
	
	//Set high and low byte of baud rate, then enable pins and functions
	UBRR0L = ubrr;
    117a:	84 ec       	ldi	r24, 0xC4	; 196
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	29 81       	ldd	r18, Y+1	; 0x01
    1180:	fc 01       	movw	r30, r24
    1182:	20 83       	st	Z, r18
	UBRR0H |= (ubrr >> 8);
    1184:	85 ec       	ldi	r24, 0xC5	; 197
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	25 ec       	ldi	r18, 0xC5	; 197
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	f9 01       	movw	r30, r18
    118e:	40 81       	ld	r20, Z
    1190:	29 81       	ldd	r18, Y+1	; 0x01
    1192:	3a 81       	ldd	r19, Y+2	; 0x02
    1194:	23 2f       	mov	r18, r19
    1196:	33 27       	eor	r19, r19
    1198:	24 2b       	or	r18, r20
    119a:	fc 01       	movw	r30, r24
    119c:	20 83       	st	Z, r18
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);		//Enable TX0 and RX0
    119e:	81 ec       	ldi	r24, 0xC1	; 193
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	28 e1       	ldi	r18, 0x18	; 24
    11a4:	fc 01       	movw	r30, r24
    11a6:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);		//Async, 8 data bits no parity
    11a8:	82 ec       	ldi	r24, 0xC2	; 194
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	26 e0       	ldi	r18, 0x06	; 6
    11ae:	fc 01       	movw	r30, r24
    11b0:	20 83       	st	Z, r18
	
	//Disable power to certain modules
	PRR |= (1 << PRTWI)|(1 << PRTIM0)|(1 << PRSPI);  //Turn off everything 
    11b2:	84 e6       	ldi	r24, 0x64	; 100
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	24 e6       	ldi	r18, 0x64	; 100
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	f9 01       	movw	r30, r18
    11bc:	20 81       	ld	r18, Z
    11be:	24 6a       	ori	r18, 0xA4	; 164
    11c0:	fc 01       	movw	r30, r24
    11c2:	20 83       	st	Z, r18

	ADCSRA |= (1 << ADEN)|(1 << ADPS1)|(1 << ADPS0);		//enable ADC with clock division factor of 8
    11c4:	8a e7       	ldi	r24, 0x7A	; 122
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	2a e7       	ldi	r18, 0x7A	; 122
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	f9 01       	movw	r30, r18
    11ce:	20 81       	ld	r18, Z
    11d0:	23 68       	ori	r18, 0x83	; 131
    11d2:	fc 01       	movw	r30, r24
    11d4:	20 83       	st	Z, r18
	ADMUX |= (1 << REFS0)|(1 << MUX1);		//internal 3.3V reference on AVCC, channel ADC2
    11d6:	8c e7       	ldi	r24, 0x7C	; 124
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	2c e7       	ldi	r18, 0x7C	; 124
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	f9 01       	movw	r30, r18
    11e0:	20 81       	ld	r18, Z
    11e2:	22 64       	ori	r18, 0x42	; 66
    11e4:	fc 01       	movw	r30, r24
    11e6:	20 83       	st	Z, r18


	
	//Initialize Timer 1(16-bit), counter is read on an interrupt to measure speed. assumes rider is going  above a certain speed for initial test.
	TCCR1B |= (1 << CS12); 				//Prescaler of 256 for system clock
    11e8:	81 e8       	ldi	r24, 0x81	; 129
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	21 e8       	ldi	r18, 0x81	; 129
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	f9 01       	movw	r30, r18
    11f2:	20 81       	ld	r18, Z
    11f4:	24 60       	ori	r18, 0x04	; 4
    11f6:	fc 01       	movw	r30, r24
    11f8:	20 83       	st	Z, r18
	TIFR1= (1 << TOV2);				//Make sure the overflow flag is not already set
    11fa:	86 e3       	ldi	r24, 0x36	; 54
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	21 e0       	ldi	r18, 0x01	; 1
    1200:	fc 01       	movw	r30, r24
    1202:	20 83       	st	Z, r18
	TCNT1 = 0x00;
    1204:	84 e8       	ldi	r24, 0x84	; 132
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	fc 01       	movw	r30, r24
    120a:	11 82       	std	Z+1, r1	; 0x01
    120c:	10 82       	st	Z, r1
	//TIMSK1=(1 << TOIE2);

	
	//Enable SPeed interrupt
	EICRA = (1 << ISC01)|(1 << ISC00);
    120e:	89 e6       	ldi	r24, 0x69	; 105
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	23 e0       	ldi	r18, 0x03	; 3
    1214:	fc 01       	movw	r30, r24
    1216:	20 83       	st	Z, r18
	//EIMSK = (1 << INT0);
	
	//Setup LED Blinking Port
	ddrLED |= (1 << bnLED)|(1 << bnSPEEDLED);
    1218:	87 e2       	ldi	r24, 0x27	; 39
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	27 e2       	ldi	r18, 0x27	; 39
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	f9 01       	movw	r30, r18
    1222:	20 81       	ld	r18, Z
    1224:	20 63       	ori	r18, 0x30	; 48
    1226:	fc 01       	movw	r30, r24
    1228:	20 83       	st	Z, r18
	prtLED &= ~((1 << bnSPEEDLED)|(1 << bnLED));	//off initially.
    122a:	88 e2       	ldi	r24, 0x28	; 40
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	28 e2       	ldi	r18, 0x28	; 40
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	f9 01       	movw	r30, r18
    1234:	20 81       	ld	r18, Z
    1236:	2f 7c       	andi	r18, 0xCF	; 207
    1238:	fc 01       	movw	r30, r24
    123a:	20 83       	st	Z, r18
		
}
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
    1244:	08 95       	ret

00001246 <_Z10initTimer2v>:
/*************************************************************************************************************/
void initTimer2(){
    1246:	cf 93       	push	r28
    1248:	df 93       	push	r29
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
	//Initialize timer 2, counter compare on TCNTA compare equals
	TCCR2A = (1 << WGM21);				//OCRA good, TOV set on top. TCNT2 cleared when match occurs
    124e:	80 eb       	ldi	r24, 0xB0	; 176
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	22 e0       	ldi	r18, 0x02	; 2
    1254:	fc 01       	movw	r30, r24
    1256:	20 83       	st	Z, r18
	TCCR2B = (1 << CS22)|(1 << CS20);		//clk/128
    1258:	81 eb       	ldi	r24, 0xB1	; 177
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	25 e0       	ldi	r18, 0x05	; 5
    125e:	fc 01       	movw	r30, r24
    1260:	20 83       	st	Z, r18
	OCR2A = 0x7c;					//248
    1262:	83 eb       	ldi	r24, 0xB3	; 179
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	2c e7       	ldi	r18, 0x7C	; 124
    1268:	fc 01       	movw	r30, r24
    126a:	20 83       	st	Z, r18
	TCNT2 = 0x00;					//Initialize
    126c:	82 eb       	ldi	r24, 0xB2	; 178
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	fc 01       	movw	r30, r24
    1272:	10 82       	st	Z, r1
	TIMSK2 = (1 << OCIE2A);				//enable OCIE2A
    1274:	80 e7       	ldi	r24, 0x70	; 112
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	22 e0       	ldi	r18, 0x02	; 2
    127a:	fc 01       	movw	r30, r24
    127c:	20 83       	st	Z, r18
}
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	08 95       	ret

00001284 <_Z6GetADCv>:


/*************************************************************************************************************/

WORD GetADC(){
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	2e 97       	sbiw	r28, 0x0e	; 14
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
	//Disable global interrupts; declare variables.
	//cli();
	volatile WORD ADCreading=0;
    1298:	1c 82       	std	Y+4, r1	; 0x04
    129a:	1b 82       	std	Y+3, r1	; 0x03
	volatile static int reps=0;
	
	//Take two ADC readings, throw the first one out.
	for (int i=0; i<2; i++){ADCSRA |= (1 << ADSC); while (ADCSRA & (1 << ADSC));} //does two
    129c:	1a 82       	std	Y+2, r1	; 0x02
    129e:	19 82       	std	Y+1, r1	; 0x01
    12a0:	1c c0       	rjmp	.+56     	; 0x12da <_Z6GetADCv+0x56>
    12a2:	8a e7       	ldi	r24, 0x7A	; 122
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	2a e7       	ldi	r18, 0x7A	; 122
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	f9 01       	movw	r30, r18
    12ac:	20 81       	ld	r18, Z
    12ae:	20 64       	ori	r18, 0x40	; 64
    12b0:	fc 01       	movw	r30, r24
    12b2:	20 83       	st	Z, r18
    12b4:	8a e7       	ldi	r24, 0x7A	; 122
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	fc 01       	movw	r30, r24
    12ba:	80 81       	ld	r24, Z
    12bc:	88 2f       	mov	r24, r24
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	80 74       	andi	r24, 0x40	; 64
    12c2:	90 70       	andi	r25, 0x00	; 0
    12c4:	21 e0       	ldi	r18, 0x01	; 1
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	09 f4       	brne	.+2      	; 0x12cc <_Z6GetADCv+0x48>
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	22 23       	and	r18, r18
    12ce:	91 f7       	brne	.-28     	; 0x12b4 <_Z6GetADCv+0x30>
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	9a 81       	ldd	r25, Y+2	; 0x02
    12d4:	01 96       	adiw	r24, 0x01	; 1
    12d6:	9a 83       	std	Y+2, r25	; 0x02
    12d8:	89 83       	std	Y+1, r24	; 0x01
    12da:	21 e0       	ldi	r18, 0x01	; 1
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	9a 81       	ldd	r25, Y+2	; 0x02
    12e0:	82 30       	cpi	r24, 0x02	; 2
    12e2:	91 05       	cpc	r25, r1
    12e4:	0c f0       	brlt	.+2      	; 0x12e8 <_Z6GetADCv+0x64>
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	22 23       	and	r18, r18
    12ea:	d9 f6       	brne	.-74     	; 0x12a2 <_Z6GetADCv+0x1e>

	//Get the last ADC reading.	
	ADCreading = ADCL;
    12ec:	88 e7       	ldi	r24, 0x78	; 120
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	fc 01       	movw	r30, r24
    12f2:	80 81       	ld	r24, Z
    12f4:	88 2f       	mov	r24, r24
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	9c 83       	std	Y+4, r25	; 0x04
    12fa:	8b 83       	std	Y+3, r24	; 0x03
	ADCreading |= (ADCH << 8);
    12fc:	89 e7       	ldi	r24, 0x79	; 121
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	fc 01       	movw	r30, r24
    1302:	80 81       	ld	r24, Z
    1304:	88 2f       	mov	r24, r24
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	98 2f       	mov	r25, r24
    130a:	88 27       	eor	r24, r24
    130c:	9c 01       	movw	r18, r24
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	9c 81       	ldd	r25, Y+4	; 0x04
    1312:	82 2b       	or	r24, r18
    1314:	93 2b       	or	r25, r19
    1316:	9c 83       	std	Y+4, r25	; 0x04
    1318:	8b 83       	std	Y+3, r24	; 0x03
	
	if (reps++>50){
    131a:	80 91 9a 01 	lds	r24, 0x019A
    131e:	90 91 9b 01 	lds	r25, 0x019B
    1322:	21 e0       	ldi	r18, 0x01	; 1
    1324:	83 33       	cpi	r24, 0x33	; 51
    1326:	91 05       	cpc	r25, r1
    1328:	0c f4       	brge	.+2      	; 0x132c <_Z6GetADCv+0xa8>
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	01 96       	adiw	r24, 0x01	; 1
    132e:	90 93 9b 01 	sts	0x019B, r25
    1332:	80 93 9a 01 	sts	0x019A, r24
    1336:	22 23       	and	r18, r18
    1338:	a9 f0       	breq	.+42     	; 0x1364 <_Z6GetADCv+0xe0>
		char tempString[10];
			utoa(ADCreading,tempString,10);
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	9c 81       	ldd	r25, Y+4	; 0x04
    133e:	9e 01       	movw	r18, r28
    1340:	2b 5f       	subi	r18, 0xFB	; 251
    1342:	3f 4f       	sbci	r19, 0xFF	; 255
    1344:	b9 01       	movw	r22, r18
    1346:	4a e0       	ldi	r20, 0x0A	; 10
    1348:	50 e0       	ldi	r21, 0x00	; 0
    134a:	0e 94 9f 0c 	call	0x193e	; 0x193e <utoa>
		tempString[8]='-';	
    134e:	8d e2       	ldi	r24, 0x2D	; 45
    1350:	8d 87       	std	Y+13, r24	; 0x0d
		tempString[9]='\0';
    1352:	1e 86       	std	Y+14, r1	; 0x0e
		Print0(tempString);
    1354:	ce 01       	movw	r24, r28
    1356:	05 96       	adiw	r24, 0x05	; 5
    1358:	0e 94 0e 0a 	call	0x141c	; 0x141c <_Z6Print0Pc>
		reps=0;
    135c:	10 92 9b 01 	sts	0x019B, r1
    1360:	10 92 9a 01 	sts	0x019A, r1
	}	
	
	//Re-enable global interrupts. 
	//sei();
	return ADCreading;
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1368:	2e 96       	adiw	r28, 0x0e	; 14
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	cd bf       	out	0x3d, r28	; 61
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	08 95       	ret

0000137a <_Z7Wait_msi>:
	
/*************************************************************************************************************/
void Wait_ms(volatile int delay){
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	00 d0       	rcall	.+0      	; 0x1380 <_Z7Wait_msi+0x6>
    1380:	00 d0       	rcall	.+0      	; 0x1382 <_Z7Wait_msi+0x8>
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	9c 83       	std	Y+4, r25	; 0x04
    1388:	8b 83       	std	Y+3, r24	; 0x03
	volatile int i=0;
    138a:	1a 82       	std	Y+2, r1	; 0x02
    138c:	19 82       	std	Y+1, r1	; 0x01
	while (delay > 0){
    138e:	18 c0       	rjmp	.+48     	; 0x13c0 <_Z7Wait_msi+0x46>
		for (i=0; i < 400; i++){
    1390:	1a 82       	std	Y+2, r1	; 0x02
    1392:	19 82       	std	Y+1, r1	; 0x01
    1394:	06 c0       	rjmp	.+12     	; 0x13a2 <_Z7Wait_msi+0x28>
			asm volatile("nop");
    1396:	00 00       	nop
	
/*************************************************************************************************************/
void Wait_ms(volatile int delay){
	volatile int i=0;
	while (delay > 0){
		for (i=0; i < 400; i++){
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	9a 81       	ldd	r25, Y+2	; 0x02
    139c:	01 96       	adiw	r24, 0x01	; 1
    139e:	9a 83       	std	Y+2, r25	; 0x02
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	9a 81       	ldd	r25, Y+2	; 0x02
    13a6:	21 e0       	ldi	r18, 0x01	; 1
    13a8:	31 e0       	ldi	r19, 0x01	; 1
    13aa:	80 39       	cpi	r24, 0x90	; 144
    13ac:	93 07       	cpc	r25, r19
    13ae:	0c f0       	brlt	.+2      	; 0x13b2 <_Z7Wait_msi+0x38>
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	22 23       	and	r18, r18
    13b4:	81 f7       	brne	.-32     	; 0x1396 <_Z7Wait_msi+0x1c>
			asm volatile("nop");
		}
		delay--;
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ba:	01 97       	sbiw	r24, 0x01	; 1
    13bc:	9c 83       	std	Y+4, r25	; 0x04
    13be:	8b 83       	std	Y+3, r24	; 0x03
}
	
/*************************************************************************************************************/
void Wait_ms(volatile int delay){
	volatile int i=0;
	while (delay > 0){
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	9c 81       	ldd	r25, Y+4	; 0x04
    13c4:	21 e0       	ldi	r18, 0x01	; 1
    13c6:	18 16       	cp	r1, r24
    13c8:	19 06       	cpc	r1, r25
    13ca:	0c f0       	brlt	.+2      	; 0x13ce <_Z7Wait_msi+0x54>
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	22 23       	and	r18, r18
    13d0:	f9 f6       	brne	.-66     	; 0x1390 <_Z7Wait_msi+0x16>
		for (i=0; i < 400; i++){
			asm volatile("nop");
		}
		delay--;
	}	
}
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	df 91       	pop	r29
    13dc:	cf 91       	pop	r28
    13de:	08 95       	ret

000013e0 <_Z10PutUart0Chc>:
	
/*************************************************************************************************************/
void PutUart0Ch(char ch){
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	0f 92       	push	r0
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSR0A & (1 << UDRE0)));
    13ec:	00 00       	nop
    13ee:	80 ec       	ldi	r24, 0xC0	; 192
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	fc 01       	movw	r30, r24
    13f4:	80 81       	ld	r24, Z
    13f6:	88 2f       	mov	r24, r24
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	80 72       	andi	r24, 0x20	; 32
    13fc:	90 70       	andi	r25, 0x00	; 0
    13fe:	21 e0       	ldi	r18, 0x01	; 1
    1400:	00 97       	sbiw	r24, 0x00	; 0
    1402:	09 f0       	breq	.+2      	; 0x1406 <_Z10PutUart0Chc+0x26>
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	22 23       	and	r18, r18
    1408:	91 f7       	brne	.-28     	; 0x13ee <_Z10PutUart0Chc+0xe>
	UDR0=ch;
    140a:	86 ec       	ldi	r24, 0xC6	; 198
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	29 81       	ldd	r18, Y+1	; 0x01
    1410:	fc 01       	movw	r30, r24
    1412:	20 83       	st	Z, r18
}
    1414:	0f 90       	pop	r0
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	08 95       	ret

0000141c <_Z6Print0Pc>:

/*************************************************************************************************************/
void Print0(char string[]){
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	00 d0       	rcall	.+0      	; 0x1422 <_Z6Print0Pc+0x6>
    1422:	0f 92       	push	r0
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	9b 83       	std	Y+3, r25	; 0x03
    142a:	8a 83       	std	Y+2, r24	; 0x02
	BYTE i=0;
    142c:	19 82       	std	Y+1, r1	; 0x01
	
	while (string[i]){
    142e:	0e c0       	rjmp	.+28     	; 0x144c <_Z6Print0Pc+0x30>
		PutUart0Ch(string[i++]);
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	88 2f       	mov	r24, r24
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	2a 81       	ldd	r18, Y+2	; 0x02
    1438:	3b 81       	ldd	r19, Y+3	; 0x03
    143a:	82 0f       	add	r24, r18
    143c:	93 1f       	adc	r25, r19
    143e:	fc 01       	movw	r30, r24
    1440:	80 81       	ld	r24, Z
    1442:	99 81       	ldd	r25, Y+1	; 0x01
    1444:	9f 5f       	subi	r25, 0xFF	; 255
    1446:	99 83       	std	Y+1, r25	; 0x01
    1448:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_Z10PutUart0Chc>

/*************************************************************************************************************/
void Print0(char string[]){
	BYTE i=0;
	
	while (string[i]){
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	88 2f       	mov	r24, r24
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	2a 81       	ldd	r18, Y+2	; 0x02
    1454:	3b 81       	ldd	r19, Y+3	; 0x03
    1456:	82 0f       	add	r24, r18
    1458:	93 1f       	adc	r25, r19
    145a:	fc 01       	movw	r30, r24
    145c:	90 81       	ld	r25, Z
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	99 23       	and	r25, r25
    1462:	09 f4       	brne	.+2      	; 0x1466 <_Z6Print0Pc+0x4a>
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	88 23       	and	r24, r24
    1468:	19 f7       	brne	.-58     	; 0x1430 <_Z6Print0Pc+0x14>
		PutUart0Ch(string[i++]);
	}
}		
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	df 91       	pop	r29
    1472:	cf 91       	pop	r28
    1474:	08 95       	ret

00001476 <_Z41__static_initialization_and_destruction_0ii>:
    1476:	cf 93       	push	r28
    1478:	df 93       	push	r29
    147a:	00 d0       	rcall	.+0      	; 0x147c <_Z41__static_initialization_and_destruction_0ii+0x6>
    147c:	00 d0       	rcall	.+0      	; 0x147e <_Z41__static_initialization_and_destruction_0ii+0x8>
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	9a 83       	std	Y+2, r25	; 0x02
    1484:	89 83       	std	Y+1, r24	; 0x01
    1486:	7c 83       	std	Y+4, r23	; 0x04
    1488:	6b 83       	std	Y+3, r22	; 0x03
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	9a 81       	ldd	r25, Y+2	; 0x02
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	91 05       	cpc	r25, r1
    1492:	51 f4       	brne	.+20     	; 0x14a8 <_Z41__static_initialization_and_destruction_0ii+0x32>
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	9c 81       	ldd	r25, Y+4	; 0x04
    1498:	2f ef       	ldi	r18, 0xFF	; 255
    149a:	8f 3f       	cpi	r24, 0xFF	; 255
    149c:	92 07       	cpc	r25, r18
    149e:	21 f4       	brne	.+8      	; 0x14a8 <_Z41__static_initialization_and_destruction_0ii+0x32>
volatile WORD N=0;
volatile BOOL firstBeat=fTrue, secondBeat=fTrue, pulse=fFalse;
volatile WORD rate[10];

//Global trip 
trip globalTrip;
    14a0:	8b e5       	ldi	r24, 0x5B	; 91
    14a2:	91 e0       	ldi	r25, 0x01	; 1
    14a4:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN4tripC1Ev>
	BYTE i=0;
	
	while (string[i]){
		PutUart0Ch(string[i++]);
	}
}		
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	08 95       	ret

000014b6 <_GLOBAL__sub_I__ZN8odometerC2Ev>:
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	6f ef       	ldi	r22, 0xFF	; 255
    14c4:	7f ef       	ldi	r23, 0xFF	; 255
    14c6:	0e 94 3b 0a 	call	0x1476	; 0x1476 <_Z41__static_initialization_and_destruction_0ii>
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	08 95       	ret

000014d0 <__subsf3>:
    14d0:	50 58       	subi	r21, 0x80	; 128

000014d2 <__addsf3>:
    14d2:	bb 27       	eor	r27, r27
    14d4:	aa 27       	eor	r26, r26
    14d6:	0e d0       	rcall	.+28     	; 0x14f4 <__addsf3x>
    14d8:	1c c1       	rjmp	.+568    	; 0x1712 <__fp_round>
    14da:	0d d1       	rcall	.+538    	; 0x16f6 <__fp_pscA>
    14dc:	30 f0       	brcs	.+12     	; 0x14ea <__addsf3+0x18>
    14de:	12 d1       	rcall	.+548    	; 0x1704 <__fp_pscB>
    14e0:	20 f0       	brcs	.+8      	; 0x14ea <__addsf3+0x18>
    14e2:	31 f4       	brne	.+12     	; 0x14f0 <__addsf3+0x1e>
    14e4:	9f 3f       	cpi	r25, 0xFF	; 255
    14e6:	11 f4       	brne	.+4      	; 0x14ec <__addsf3+0x1a>
    14e8:	1e f4       	brtc	.+6      	; 0x14f0 <__addsf3+0x1e>
    14ea:	02 c1       	rjmp	.+516    	; 0x16f0 <__fp_nan>
    14ec:	0e f4       	brtc	.+2      	; 0x14f0 <__addsf3+0x1e>
    14ee:	e0 95       	com	r30
    14f0:	e7 fb       	bst	r30, 7
    14f2:	f8 c0       	rjmp	.+496    	; 0x16e4 <__fp_inf>

000014f4 <__addsf3x>:
    14f4:	e9 2f       	mov	r30, r25
    14f6:	1e d1       	rcall	.+572    	; 0x1734 <__fp_split3>
    14f8:	80 f3       	brcs	.-32     	; 0x14da <__addsf3+0x8>
    14fa:	ba 17       	cp	r27, r26
    14fc:	62 07       	cpc	r22, r18
    14fe:	73 07       	cpc	r23, r19
    1500:	84 07       	cpc	r24, r20
    1502:	95 07       	cpc	r25, r21
    1504:	18 f0       	brcs	.+6      	; 0x150c <__addsf3x+0x18>
    1506:	71 f4       	brne	.+28     	; 0x1524 <__addsf3x+0x30>
    1508:	9e f5       	brtc	.+102    	; 0x1570 <__addsf3x+0x7c>
    150a:	36 c1       	rjmp	.+620    	; 0x1778 <__fp_zero>
    150c:	0e f4       	brtc	.+2      	; 0x1510 <__addsf3x+0x1c>
    150e:	e0 95       	com	r30
    1510:	0b 2e       	mov	r0, r27
    1512:	ba 2f       	mov	r27, r26
    1514:	a0 2d       	mov	r26, r0
    1516:	0b 01       	movw	r0, r22
    1518:	b9 01       	movw	r22, r18
    151a:	90 01       	movw	r18, r0
    151c:	0c 01       	movw	r0, r24
    151e:	ca 01       	movw	r24, r20
    1520:	a0 01       	movw	r20, r0
    1522:	11 24       	eor	r1, r1
    1524:	ff 27       	eor	r31, r31
    1526:	59 1b       	sub	r21, r25
    1528:	99 f0       	breq	.+38     	; 0x1550 <__addsf3x+0x5c>
    152a:	59 3f       	cpi	r21, 0xF9	; 249
    152c:	50 f4       	brcc	.+20     	; 0x1542 <__addsf3x+0x4e>
    152e:	50 3e       	cpi	r21, 0xE0	; 224
    1530:	68 f1       	brcs	.+90     	; 0x158c <__addsf3x+0x98>
    1532:	1a 16       	cp	r1, r26
    1534:	f0 40       	sbci	r31, 0x00	; 0
    1536:	a2 2f       	mov	r26, r18
    1538:	23 2f       	mov	r18, r19
    153a:	34 2f       	mov	r19, r20
    153c:	44 27       	eor	r20, r20
    153e:	58 5f       	subi	r21, 0xF8	; 248
    1540:	f3 cf       	rjmp	.-26     	; 0x1528 <__addsf3x+0x34>
    1542:	46 95       	lsr	r20
    1544:	37 95       	ror	r19
    1546:	27 95       	ror	r18
    1548:	a7 95       	ror	r26
    154a:	f0 40       	sbci	r31, 0x00	; 0
    154c:	53 95       	inc	r21
    154e:	c9 f7       	brne	.-14     	; 0x1542 <__addsf3x+0x4e>
    1550:	7e f4       	brtc	.+30     	; 0x1570 <__addsf3x+0x7c>
    1552:	1f 16       	cp	r1, r31
    1554:	ba 0b       	sbc	r27, r26
    1556:	62 0b       	sbc	r22, r18
    1558:	73 0b       	sbc	r23, r19
    155a:	84 0b       	sbc	r24, r20
    155c:	ba f0       	brmi	.+46     	; 0x158c <__addsf3x+0x98>
    155e:	91 50       	subi	r25, 0x01	; 1
    1560:	a1 f0       	breq	.+40     	; 0x158a <__addsf3x+0x96>
    1562:	ff 0f       	add	r31, r31
    1564:	bb 1f       	adc	r27, r27
    1566:	66 1f       	adc	r22, r22
    1568:	77 1f       	adc	r23, r23
    156a:	88 1f       	adc	r24, r24
    156c:	c2 f7       	brpl	.-16     	; 0x155e <__addsf3x+0x6a>
    156e:	0e c0       	rjmp	.+28     	; 0x158c <__addsf3x+0x98>
    1570:	ba 0f       	add	r27, r26
    1572:	62 1f       	adc	r22, r18
    1574:	73 1f       	adc	r23, r19
    1576:	84 1f       	adc	r24, r20
    1578:	48 f4       	brcc	.+18     	; 0x158c <__addsf3x+0x98>
    157a:	87 95       	ror	r24
    157c:	77 95       	ror	r23
    157e:	67 95       	ror	r22
    1580:	b7 95       	ror	r27
    1582:	f7 95       	ror	r31
    1584:	9e 3f       	cpi	r25, 0xFE	; 254
    1586:	08 f0       	brcs	.+2      	; 0x158a <__addsf3x+0x96>
    1588:	b3 cf       	rjmp	.-154    	; 0x14f0 <__addsf3+0x1e>
    158a:	93 95       	inc	r25
    158c:	88 0f       	add	r24, r24
    158e:	08 f0       	brcs	.+2      	; 0x1592 <__addsf3x+0x9e>
    1590:	99 27       	eor	r25, r25
    1592:	ee 0f       	add	r30, r30
    1594:	97 95       	ror	r25
    1596:	87 95       	ror	r24
    1598:	08 95       	ret

0000159a <__divsf3>:
    159a:	0c d0       	rcall	.+24     	; 0x15b4 <__divsf3x>
    159c:	ba c0       	rjmp	.+372    	; 0x1712 <__fp_round>
    159e:	b2 d0       	rcall	.+356    	; 0x1704 <__fp_pscB>
    15a0:	40 f0       	brcs	.+16     	; 0x15b2 <__divsf3+0x18>
    15a2:	a9 d0       	rcall	.+338    	; 0x16f6 <__fp_pscA>
    15a4:	30 f0       	brcs	.+12     	; 0x15b2 <__divsf3+0x18>
    15a6:	21 f4       	brne	.+8      	; 0x15b0 <__divsf3+0x16>
    15a8:	5f 3f       	cpi	r21, 0xFF	; 255
    15aa:	19 f0       	breq	.+6      	; 0x15b2 <__divsf3+0x18>
    15ac:	9b c0       	rjmp	.+310    	; 0x16e4 <__fp_inf>
    15ae:	51 11       	cpse	r21, r1
    15b0:	e4 c0       	rjmp	.+456    	; 0x177a <__fp_szero>
    15b2:	9e c0       	rjmp	.+316    	; 0x16f0 <__fp_nan>

000015b4 <__divsf3x>:
    15b4:	bf d0       	rcall	.+382    	; 0x1734 <__fp_split3>
    15b6:	98 f3       	brcs	.-26     	; 0x159e <__divsf3+0x4>

000015b8 <__divsf3_pse>:
    15b8:	99 23       	and	r25, r25
    15ba:	c9 f3       	breq	.-14     	; 0x15ae <__divsf3+0x14>
    15bc:	55 23       	and	r21, r21
    15be:	b1 f3       	breq	.-20     	; 0x15ac <__divsf3+0x12>
    15c0:	95 1b       	sub	r25, r21
    15c2:	55 0b       	sbc	r21, r21
    15c4:	bb 27       	eor	r27, r27
    15c6:	aa 27       	eor	r26, r26
    15c8:	62 17       	cp	r22, r18
    15ca:	73 07       	cpc	r23, r19
    15cc:	84 07       	cpc	r24, r20
    15ce:	38 f0       	brcs	.+14     	; 0x15de <__divsf3_pse+0x26>
    15d0:	9f 5f       	subi	r25, 0xFF	; 255
    15d2:	5f 4f       	sbci	r21, 0xFF	; 255
    15d4:	22 0f       	add	r18, r18
    15d6:	33 1f       	adc	r19, r19
    15d8:	44 1f       	adc	r20, r20
    15da:	aa 1f       	adc	r26, r26
    15dc:	a9 f3       	breq	.-22     	; 0x15c8 <__divsf3_pse+0x10>
    15de:	33 d0       	rcall	.+102    	; 0x1646 <__divsf3_pse+0x8e>
    15e0:	0e 2e       	mov	r0, r30
    15e2:	3a f0       	brmi	.+14     	; 0x15f2 <__divsf3_pse+0x3a>
    15e4:	e0 e8       	ldi	r30, 0x80	; 128
    15e6:	30 d0       	rcall	.+96     	; 0x1648 <__divsf3_pse+0x90>
    15e8:	91 50       	subi	r25, 0x01	; 1
    15ea:	50 40       	sbci	r21, 0x00	; 0
    15ec:	e6 95       	lsr	r30
    15ee:	00 1c       	adc	r0, r0
    15f0:	ca f7       	brpl	.-14     	; 0x15e4 <__divsf3_pse+0x2c>
    15f2:	29 d0       	rcall	.+82     	; 0x1646 <__divsf3_pse+0x8e>
    15f4:	fe 2f       	mov	r31, r30
    15f6:	27 d0       	rcall	.+78     	; 0x1646 <__divsf3_pse+0x8e>
    15f8:	66 0f       	add	r22, r22
    15fa:	77 1f       	adc	r23, r23
    15fc:	88 1f       	adc	r24, r24
    15fe:	bb 1f       	adc	r27, r27
    1600:	26 17       	cp	r18, r22
    1602:	37 07       	cpc	r19, r23
    1604:	48 07       	cpc	r20, r24
    1606:	ab 07       	cpc	r26, r27
    1608:	b0 e8       	ldi	r27, 0x80	; 128
    160a:	09 f0       	breq	.+2      	; 0x160e <__divsf3_pse+0x56>
    160c:	bb 0b       	sbc	r27, r27
    160e:	80 2d       	mov	r24, r0
    1610:	bf 01       	movw	r22, r30
    1612:	ff 27       	eor	r31, r31
    1614:	93 58       	subi	r25, 0x83	; 131
    1616:	5f 4f       	sbci	r21, 0xFF	; 255
    1618:	2a f0       	brmi	.+10     	; 0x1624 <__divsf3_pse+0x6c>
    161a:	9e 3f       	cpi	r25, 0xFE	; 254
    161c:	51 05       	cpc	r21, r1
    161e:	68 f0       	brcs	.+26     	; 0x163a <__divsf3_pse+0x82>
    1620:	61 c0       	rjmp	.+194    	; 0x16e4 <__fp_inf>
    1622:	ab c0       	rjmp	.+342    	; 0x177a <__fp_szero>
    1624:	5f 3f       	cpi	r21, 0xFF	; 255
    1626:	ec f3       	brlt	.-6      	; 0x1622 <__divsf3_pse+0x6a>
    1628:	98 3e       	cpi	r25, 0xE8	; 232
    162a:	dc f3       	brlt	.-10     	; 0x1622 <__divsf3_pse+0x6a>
    162c:	86 95       	lsr	r24
    162e:	77 95       	ror	r23
    1630:	67 95       	ror	r22
    1632:	b7 95       	ror	r27
    1634:	f7 95       	ror	r31
    1636:	9f 5f       	subi	r25, 0xFF	; 255
    1638:	c9 f7       	brne	.-14     	; 0x162c <__divsf3_pse+0x74>
    163a:	88 0f       	add	r24, r24
    163c:	91 1d       	adc	r25, r1
    163e:	96 95       	lsr	r25
    1640:	87 95       	ror	r24
    1642:	97 f9       	bld	r25, 7
    1644:	08 95       	ret
    1646:	e1 e0       	ldi	r30, 0x01	; 1
    1648:	66 0f       	add	r22, r22
    164a:	77 1f       	adc	r23, r23
    164c:	88 1f       	adc	r24, r24
    164e:	bb 1f       	adc	r27, r27
    1650:	62 17       	cp	r22, r18
    1652:	73 07       	cpc	r23, r19
    1654:	84 07       	cpc	r24, r20
    1656:	ba 07       	cpc	r27, r26
    1658:	20 f0       	brcs	.+8      	; 0x1662 <__divsf3_pse+0xaa>
    165a:	62 1b       	sub	r22, r18
    165c:	73 0b       	sbc	r23, r19
    165e:	84 0b       	sbc	r24, r20
    1660:	ba 0b       	sbc	r27, r26
    1662:	ee 1f       	adc	r30, r30
    1664:	88 f7       	brcc	.-30     	; 0x1648 <__divsf3_pse+0x90>
    1666:	e0 95       	com	r30
    1668:	08 95       	ret

0000166a <__floatunsisf>:
    166a:	e8 94       	clt
    166c:	09 c0       	rjmp	.+18     	; 0x1680 <__floatsisf+0x12>

0000166e <__floatsisf>:
    166e:	97 fb       	bst	r25, 7
    1670:	3e f4       	brtc	.+14     	; 0x1680 <__floatsisf+0x12>
    1672:	90 95       	com	r25
    1674:	80 95       	com	r24
    1676:	70 95       	com	r23
    1678:	61 95       	neg	r22
    167a:	7f 4f       	sbci	r23, 0xFF	; 255
    167c:	8f 4f       	sbci	r24, 0xFF	; 255
    167e:	9f 4f       	sbci	r25, 0xFF	; 255
    1680:	99 23       	and	r25, r25
    1682:	a9 f0       	breq	.+42     	; 0x16ae <__floatsisf+0x40>
    1684:	f9 2f       	mov	r31, r25
    1686:	96 e9       	ldi	r25, 0x96	; 150
    1688:	bb 27       	eor	r27, r27
    168a:	93 95       	inc	r25
    168c:	f6 95       	lsr	r31
    168e:	87 95       	ror	r24
    1690:	77 95       	ror	r23
    1692:	67 95       	ror	r22
    1694:	b7 95       	ror	r27
    1696:	f1 11       	cpse	r31, r1
    1698:	f8 cf       	rjmp	.-16     	; 0x168a <__floatsisf+0x1c>
    169a:	fa f4       	brpl	.+62     	; 0x16da <__floatsisf+0x6c>
    169c:	bb 0f       	add	r27, r27
    169e:	11 f4       	brne	.+4      	; 0x16a4 <__floatsisf+0x36>
    16a0:	60 ff       	sbrs	r22, 0
    16a2:	1b c0       	rjmp	.+54     	; 0x16da <__floatsisf+0x6c>
    16a4:	6f 5f       	subi	r22, 0xFF	; 255
    16a6:	7f 4f       	sbci	r23, 0xFF	; 255
    16a8:	8f 4f       	sbci	r24, 0xFF	; 255
    16aa:	9f 4f       	sbci	r25, 0xFF	; 255
    16ac:	16 c0       	rjmp	.+44     	; 0x16da <__floatsisf+0x6c>
    16ae:	88 23       	and	r24, r24
    16b0:	11 f0       	breq	.+4      	; 0x16b6 <__floatsisf+0x48>
    16b2:	96 e9       	ldi	r25, 0x96	; 150
    16b4:	11 c0       	rjmp	.+34     	; 0x16d8 <__floatsisf+0x6a>
    16b6:	77 23       	and	r23, r23
    16b8:	21 f0       	breq	.+8      	; 0x16c2 <__floatsisf+0x54>
    16ba:	9e e8       	ldi	r25, 0x8E	; 142
    16bc:	87 2f       	mov	r24, r23
    16be:	76 2f       	mov	r23, r22
    16c0:	05 c0       	rjmp	.+10     	; 0x16cc <__floatsisf+0x5e>
    16c2:	66 23       	and	r22, r22
    16c4:	71 f0       	breq	.+28     	; 0x16e2 <__floatsisf+0x74>
    16c6:	96 e8       	ldi	r25, 0x86	; 134
    16c8:	86 2f       	mov	r24, r22
    16ca:	70 e0       	ldi	r23, 0x00	; 0
    16cc:	60 e0       	ldi	r22, 0x00	; 0
    16ce:	2a f0       	brmi	.+10     	; 0x16da <__floatsisf+0x6c>
    16d0:	9a 95       	dec	r25
    16d2:	66 0f       	add	r22, r22
    16d4:	77 1f       	adc	r23, r23
    16d6:	88 1f       	adc	r24, r24
    16d8:	da f7       	brpl	.-10     	; 0x16d0 <__floatsisf+0x62>
    16da:	88 0f       	add	r24, r24
    16dc:	96 95       	lsr	r25
    16de:	87 95       	ror	r24
    16e0:	97 f9       	bld	r25, 7
    16e2:	08 95       	ret

000016e4 <__fp_inf>:
    16e4:	97 f9       	bld	r25, 7
    16e6:	9f 67       	ori	r25, 0x7F	; 127
    16e8:	80 e8       	ldi	r24, 0x80	; 128
    16ea:	70 e0       	ldi	r23, 0x00	; 0
    16ec:	60 e0       	ldi	r22, 0x00	; 0
    16ee:	08 95       	ret

000016f0 <__fp_nan>:
    16f0:	9f ef       	ldi	r25, 0xFF	; 255
    16f2:	80 ec       	ldi	r24, 0xC0	; 192
    16f4:	08 95       	ret

000016f6 <__fp_pscA>:
    16f6:	00 24       	eor	r0, r0
    16f8:	0a 94       	dec	r0
    16fa:	16 16       	cp	r1, r22
    16fc:	17 06       	cpc	r1, r23
    16fe:	18 06       	cpc	r1, r24
    1700:	09 06       	cpc	r0, r25
    1702:	08 95       	ret

00001704 <__fp_pscB>:
    1704:	00 24       	eor	r0, r0
    1706:	0a 94       	dec	r0
    1708:	12 16       	cp	r1, r18
    170a:	13 06       	cpc	r1, r19
    170c:	14 06       	cpc	r1, r20
    170e:	05 06       	cpc	r0, r21
    1710:	08 95       	ret

00001712 <__fp_round>:
    1712:	09 2e       	mov	r0, r25
    1714:	03 94       	inc	r0
    1716:	00 0c       	add	r0, r0
    1718:	11 f4       	brne	.+4      	; 0x171e <__fp_round+0xc>
    171a:	88 23       	and	r24, r24
    171c:	52 f0       	brmi	.+20     	; 0x1732 <__fp_round+0x20>
    171e:	bb 0f       	add	r27, r27
    1720:	40 f4       	brcc	.+16     	; 0x1732 <__fp_round+0x20>
    1722:	bf 2b       	or	r27, r31
    1724:	11 f4       	brne	.+4      	; 0x172a <__fp_round+0x18>
    1726:	60 ff       	sbrs	r22, 0
    1728:	04 c0       	rjmp	.+8      	; 0x1732 <__fp_round+0x20>
    172a:	6f 5f       	subi	r22, 0xFF	; 255
    172c:	7f 4f       	sbci	r23, 0xFF	; 255
    172e:	8f 4f       	sbci	r24, 0xFF	; 255
    1730:	9f 4f       	sbci	r25, 0xFF	; 255
    1732:	08 95       	ret

00001734 <__fp_split3>:
    1734:	57 fd       	sbrc	r21, 7
    1736:	90 58       	subi	r25, 0x80	; 128
    1738:	44 0f       	add	r20, r20
    173a:	55 1f       	adc	r21, r21
    173c:	59 f0       	breq	.+22     	; 0x1754 <__fp_splitA+0x10>
    173e:	5f 3f       	cpi	r21, 0xFF	; 255
    1740:	71 f0       	breq	.+28     	; 0x175e <__fp_splitA+0x1a>
    1742:	47 95       	ror	r20

00001744 <__fp_splitA>:
    1744:	88 0f       	add	r24, r24
    1746:	97 fb       	bst	r25, 7
    1748:	99 1f       	adc	r25, r25
    174a:	61 f0       	breq	.+24     	; 0x1764 <__fp_splitA+0x20>
    174c:	9f 3f       	cpi	r25, 0xFF	; 255
    174e:	79 f0       	breq	.+30     	; 0x176e <__fp_splitA+0x2a>
    1750:	87 95       	ror	r24
    1752:	08 95       	ret
    1754:	12 16       	cp	r1, r18
    1756:	13 06       	cpc	r1, r19
    1758:	14 06       	cpc	r1, r20
    175a:	55 1f       	adc	r21, r21
    175c:	f2 cf       	rjmp	.-28     	; 0x1742 <__fp_split3+0xe>
    175e:	46 95       	lsr	r20
    1760:	f1 df       	rcall	.-30     	; 0x1744 <__fp_splitA>
    1762:	08 c0       	rjmp	.+16     	; 0x1774 <__fp_splitA+0x30>
    1764:	16 16       	cp	r1, r22
    1766:	17 06       	cpc	r1, r23
    1768:	18 06       	cpc	r1, r24
    176a:	99 1f       	adc	r25, r25
    176c:	f1 cf       	rjmp	.-30     	; 0x1750 <__fp_splitA+0xc>
    176e:	86 95       	lsr	r24
    1770:	71 05       	cpc	r23, r1
    1772:	61 05       	cpc	r22, r1
    1774:	08 94       	sec
    1776:	08 95       	ret

00001778 <__fp_zero>:
    1778:	e8 94       	clt

0000177a <__fp_szero>:
    177a:	bb 27       	eor	r27, r27
    177c:	66 27       	eor	r22, r22
    177e:	77 27       	eor	r23, r23
    1780:	cb 01       	movw	r24, r22
    1782:	97 f9       	bld	r25, 7
    1784:	08 95       	ret

00001786 <__mulsf3>:
    1786:	0b d0       	rcall	.+22     	; 0x179e <__mulsf3x>
    1788:	c4 cf       	rjmp	.-120    	; 0x1712 <__fp_round>
    178a:	b5 df       	rcall	.-150    	; 0x16f6 <__fp_pscA>
    178c:	28 f0       	brcs	.+10     	; 0x1798 <__mulsf3+0x12>
    178e:	ba df       	rcall	.-140    	; 0x1704 <__fp_pscB>
    1790:	18 f0       	brcs	.+6      	; 0x1798 <__mulsf3+0x12>
    1792:	95 23       	and	r25, r21
    1794:	09 f0       	breq	.+2      	; 0x1798 <__mulsf3+0x12>
    1796:	a6 cf       	rjmp	.-180    	; 0x16e4 <__fp_inf>
    1798:	ab cf       	rjmp	.-170    	; 0x16f0 <__fp_nan>
    179a:	11 24       	eor	r1, r1
    179c:	ee cf       	rjmp	.-36     	; 0x177a <__fp_szero>

0000179e <__mulsf3x>:
    179e:	ca df       	rcall	.-108    	; 0x1734 <__fp_split3>
    17a0:	a0 f3       	brcs	.-24     	; 0x178a <__mulsf3+0x4>

000017a2 <__mulsf3_pse>:
    17a2:	95 9f       	mul	r25, r21
    17a4:	d1 f3       	breq	.-12     	; 0x179a <__mulsf3+0x14>
    17a6:	95 0f       	add	r25, r21
    17a8:	50 e0       	ldi	r21, 0x00	; 0
    17aa:	55 1f       	adc	r21, r21
    17ac:	62 9f       	mul	r22, r18
    17ae:	f0 01       	movw	r30, r0
    17b0:	72 9f       	mul	r23, r18
    17b2:	bb 27       	eor	r27, r27
    17b4:	f0 0d       	add	r31, r0
    17b6:	b1 1d       	adc	r27, r1
    17b8:	63 9f       	mul	r22, r19
    17ba:	aa 27       	eor	r26, r26
    17bc:	f0 0d       	add	r31, r0
    17be:	b1 1d       	adc	r27, r1
    17c0:	aa 1f       	adc	r26, r26
    17c2:	64 9f       	mul	r22, r20
    17c4:	66 27       	eor	r22, r22
    17c6:	b0 0d       	add	r27, r0
    17c8:	a1 1d       	adc	r26, r1
    17ca:	66 1f       	adc	r22, r22
    17cc:	82 9f       	mul	r24, r18
    17ce:	22 27       	eor	r18, r18
    17d0:	b0 0d       	add	r27, r0
    17d2:	a1 1d       	adc	r26, r1
    17d4:	62 1f       	adc	r22, r18
    17d6:	73 9f       	mul	r23, r19
    17d8:	b0 0d       	add	r27, r0
    17da:	a1 1d       	adc	r26, r1
    17dc:	62 1f       	adc	r22, r18
    17de:	83 9f       	mul	r24, r19
    17e0:	a0 0d       	add	r26, r0
    17e2:	61 1d       	adc	r22, r1
    17e4:	22 1f       	adc	r18, r18
    17e6:	74 9f       	mul	r23, r20
    17e8:	33 27       	eor	r19, r19
    17ea:	a0 0d       	add	r26, r0
    17ec:	61 1d       	adc	r22, r1
    17ee:	23 1f       	adc	r18, r19
    17f0:	84 9f       	mul	r24, r20
    17f2:	60 0d       	add	r22, r0
    17f4:	21 1d       	adc	r18, r1
    17f6:	82 2f       	mov	r24, r18
    17f8:	76 2f       	mov	r23, r22
    17fa:	6a 2f       	mov	r22, r26
    17fc:	11 24       	eor	r1, r1
    17fe:	9f 57       	subi	r25, 0x7F	; 127
    1800:	50 40       	sbci	r21, 0x00	; 0
    1802:	8a f0       	brmi	.+34     	; 0x1826 <__mulsf3_pse+0x84>
    1804:	e1 f0       	breq	.+56     	; 0x183e <__mulsf3_pse+0x9c>
    1806:	88 23       	and	r24, r24
    1808:	4a f0       	brmi	.+18     	; 0x181c <__mulsf3_pse+0x7a>
    180a:	ee 0f       	add	r30, r30
    180c:	ff 1f       	adc	r31, r31
    180e:	bb 1f       	adc	r27, r27
    1810:	66 1f       	adc	r22, r22
    1812:	77 1f       	adc	r23, r23
    1814:	88 1f       	adc	r24, r24
    1816:	91 50       	subi	r25, 0x01	; 1
    1818:	50 40       	sbci	r21, 0x00	; 0
    181a:	a9 f7       	brne	.-22     	; 0x1806 <__mulsf3_pse+0x64>
    181c:	9e 3f       	cpi	r25, 0xFE	; 254
    181e:	51 05       	cpc	r21, r1
    1820:	70 f0       	brcs	.+28     	; 0x183e <__mulsf3_pse+0x9c>
    1822:	60 cf       	rjmp	.-320    	; 0x16e4 <__fp_inf>
    1824:	aa cf       	rjmp	.-172    	; 0x177a <__fp_szero>
    1826:	5f 3f       	cpi	r21, 0xFF	; 255
    1828:	ec f3       	brlt	.-6      	; 0x1824 <__mulsf3_pse+0x82>
    182a:	98 3e       	cpi	r25, 0xE8	; 232
    182c:	dc f3       	brlt	.-10     	; 0x1824 <__mulsf3_pse+0x82>
    182e:	86 95       	lsr	r24
    1830:	77 95       	ror	r23
    1832:	67 95       	ror	r22
    1834:	b7 95       	ror	r27
    1836:	f7 95       	ror	r31
    1838:	e7 95       	ror	r30
    183a:	9f 5f       	subi	r25, 0xFF	; 255
    183c:	c1 f7       	brne	.-16     	; 0x182e <__mulsf3_pse+0x8c>
    183e:	fe 2b       	or	r31, r30
    1840:	88 0f       	add	r24, r24
    1842:	91 1d       	adc	r25, r1
    1844:	96 95       	lsr	r25
    1846:	87 95       	ror	r24
    1848:	97 f9       	bld	r25, 7
    184a:	08 95       	ret

0000184c <__udivmodhi4>:
    184c:	aa 1b       	sub	r26, r26
    184e:	bb 1b       	sub	r27, r27
    1850:	51 e1       	ldi	r21, 0x11	; 17
    1852:	07 c0       	rjmp	.+14     	; 0x1862 <__udivmodhi4_ep>

00001854 <__udivmodhi4_loop>:
    1854:	aa 1f       	adc	r26, r26
    1856:	bb 1f       	adc	r27, r27
    1858:	a6 17       	cp	r26, r22
    185a:	b7 07       	cpc	r27, r23
    185c:	10 f0       	brcs	.+4      	; 0x1862 <__udivmodhi4_ep>
    185e:	a6 1b       	sub	r26, r22
    1860:	b7 0b       	sbc	r27, r23

00001862 <__udivmodhi4_ep>:
    1862:	88 1f       	adc	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	5a 95       	dec	r21
    1868:	a9 f7       	brne	.-22     	; 0x1854 <__udivmodhi4_loop>
    186a:	80 95       	com	r24
    186c:	90 95       	com	r25
    186e:	bc 01       	movw	r22, r24
    1870:	cd 01       	movw	r24, r26
    1872:	08 95       	ret

00001874 <__divmodsi4>:
    1874:	97 fb       	bst	r25, 7
    1876:	09 2e       	mov	r0, r25
    1878:	05 26       	eor	r0, r21
    187a:	0e d0       	rcall	.+28     	; 0x1898 <__divmodsi4_neg1>
    187c:	57 fd       	sbrc	r21, 7
    187e:	04 d0       	rcall	.+8      	; 0x1888 <__divmodsi4_neg2>
    1880:	14 d0       	rcall	.+40     	; 0x18aa <__udivmodsi4>
    1882:	0a d0       	rcall	.+20     	; 0x1898 <__divmodsi4_neg1>
    1884:	00 1c       	adc	r0, r0
    1886:	38 f4       	brcc	.+14     	; 0x1896 <__divmodsi4_exit>

00001888 <__divmodsi4_neg2>:
    1888:	50 95       	com	r21
    188a:	40 95       	com	r20
    188c:	30 95       	com	r19
    188e:	21 95       	neg	r18
    1890:	3f 4f       	sbci	r19, 0xFF	; 255
    1892:	4f 4f       	sbci	r20, 0xFF	; 255
    1894:	5f 4f       	sbci	r21, 0xFF	; 255

00001896 <__divmodsi4_exit>:
    1896:	08 95       	ret

00001898 <__divmodsi4_neg1>:
    1898:	f6 f7       	brtc	.-4      	; 0x1896 <__divmodsi4_exit>
    189a:	90 95       	com	r25
    189c:	80 95       	com	r24
    189e:	70 95       	com	r23
    18a0:	61 95       	neg	r22
    18a2:	7f 4f       	sbci	r23, 0xFF	; 255
    18a4:	8f 4f       	sbci	r24, 0xFF	; 255
    18a6:	9f 4f       	sbci	r25, 0xFF	; 255
    18a8:	08 95       	ret

000018aa <__udivmodsi4>:
    18aa:	a1 e2       	ldi	r26, 0x21	; 33
    18ac:	1a 2e       	mov	r1, r26
    18ae:	aa 1b       	sub	r26, r26
    18b0:	bb 1b       	sub	r27, r27
    18b2:	fd 01       	movw	r30, r26
    18b4:	0d c0       	rjmp	.+26     	; 0x18d0 <__udivmodsi4_ep>

000018b6 <__udivmodsi4_loop>:
    18b6:	aa 1f       	adc	r26, r26
    18b8:	bb 1f       	adc	r27, r27
    18ba:	ee 1f       	adc	r30, r30
    18bc:	ff 1f       	adc	r31, r31
    18be:	a2 17       	cp	r26, r18
    18c0:	b3 07       	cpc	r27, r19
    18c2:	e4 07       	cpc	r30, r20
    18c4:	f5 07       	cpc	r31, r21
    18c6:	20 f0       	brcs	.+8      	; 0x18d0 <__udivmodsi4_ep>
    18c8:	a2 1b       	sub	r26, r18
    18ca:	b3 0b       	sbc	r27, r19
    18cc:	e4 0b       	sbc	r30, r20
    18ce:	f5 0b       	sbc	r31, r21

000018d0 <__udivmodsi4_ep>:
    18d0:	66 1f       	adc	r22, r22
    18d2:	77 1f       	adc	r23, r23
    18d4:	88 1f       	adc	r24, r24
    18d6:	99 1f       	adc	r25, r25
    18d8:	1a 94       	dec	r1
    18da:	69 f7       	brne	.-38     	; 0x18b6 <__udivmodsi4_loop>
    18dc:	60 95       	com	r22
    18de:	70 95       	com	r23
    18e0:	80 95       	com	r24
    18e2:	90 95       	com	r25
    18e4:	9b 01       	movw	r18, r22
    18e6:	ac 01       	movw	r20, r24
    18e8:	bd 01       	movw	r22, r26
    18ea:	cf 01       	movw	r24, r30
    18ec:	08 95       	ret

000018ee <__tablejump2__>:
    18ee:	ee 0f       	add	r30, r30
    18f0:	ff 1f       	adc	r31, r31

000018f2 <__tablejump__>:
    18f2:	05 90       	lpm	r0, Z+
    18f4:	f4 91       	lpm	r31, Z
    18f6:	e0 2d       	mov	r30, r0
    18f8:	09 94       	ijmp

000018fa <dtostrf>:
    18fa:	ef 92       	push	r14
    18fc:	0f 93       	push	r16
    18fe:	1f 93       	push	r17
    1900:	cf 93       	push	r28
    1902:	32 2f       	mov	r19, r18
    1904:	c0 2f       	mov	r28, r16
    1906:	47 ff       	sbrs	r20, 7
    1908:	02 c0       	rjmp	.+4      	; 0x190e <dtostrf+0x14>
    190a:	a4 e1       	ldi	r26, 0x14	; 20
    190c:	01 c0       	rjmp	.+2      	; 0x1910 <dtostrf+0x16>
    190e:	a4 e0       	ldi	r26, 0x04	; 4
    1910:	e4 2f       	mov	r30, r20
    1912:	ff 27       	eor	r31, r31
    1914:	e7 fd       	sbrc	r30, 7
    1916:	f0 95       	com	r31
    1918:	f7 ff       	sbrs	r31, 7
    191a:	03 c0       	rjmp	.+6      	; 0x1922 <dtostrf+0x28>
    191c:	f0 95       	com	r31
    191e:	e1 95       	neg	r30
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	4c 2f       	mov	r20, r28
    1924:	51 2f       	mov	r21, r17
    1926:	2e 2f       	mov	r18, r30
    1928:	03 2f       	mov	r16, r19
    192a:	ea 2e       	mov	r14, r26
    192c:	0e 94 b5 0c 	call	0x196a	; 0x196a <dtoa_prf>
    1930:	8c 2f       	mov	r24, r28
    1932:	91 2f       	mov	r25, r17
    1934:	cf 91       	pop	r28
    1936:	1f 91       	pop	r17
    1938:	0f 91       	pop	r16
    193a:	ef 90       	pop	r14
    193c:	08 95       	ret

0000193e <utoa>:
    193e:	fb 01       	movw	r30, r22
    1940:	9f 01       	movw	r18, r30
    1942:	42 30       	cpi	r20, 0x02	; 2
    1944:	74 f0       	brlt	.+28     	; 0x1962 <utoa+0x24>
    1946:	45 32       	cpi	r20, 0x25	; 37
    1948:	64 f4       	brge	.+24     	; 0x1962 <utoa+0x24>
    194a:	64 2f       	mov	r22, r20
    194c:	77 27       	eor	r23, r23
    194e:	0e 94 26 0c 	call	0x184c	; 0x184c <__udivmodhi4>
    1952:	80 5d       	subi	r24, 0xD0	; 208
    1954:	8a 33       	cpi	r24, 0x3A	; 58
    1956:	0c f0       	brlt	.+2      	; 0x195a <utoa+0x1c>
    1958:	89 5d       	subi	r24, 0xD9	; 217
    195a:	81 93       	st	Z+, r24
    195c:	cb 01       	movw	r24, r22
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	a1 f7       	brne	.-24     	; 0x194a <utoa+0xc>
    1962:	10 82       	st	Z, r1
    1964:	c9 01       	movw	r24, r18
    1966:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <strrev>

0000196a <dtoa_prf>:
    196a:	a9 e0       	ldi	r26, 0x09	; 9
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	eb eb       	ldi	r30, 0xBB	; 187
    1970:	fc e0       	ldi	r31, 0x0C	; 12
    1972:	0c 94 f9 0e 	jmp	0x1df2	; 0x1df2 <__prologue_saves__+0x8>
    1976:	6a 01       	movw	r12, r20
    1978:	12 2f       	mov	r17, r18
    197a:	f0 2e       	mov	r15, r16
    197c:	2b e3       	ldi	r18, 0x3B	; 59
    197e:	20 17       	cp	r18, r16
    1980:	18 f0       	brcs	.+6      	; 0x1988 <dtoa_prf+0x1e>
    1982:	b0 2e       	mov	r11, r16
    1984:	b3 94       	inc	r11
    1986:	02 c0       	rjmp	.+4      	; 0x198c <dtoa_prf+0x22>
    1988:	3c e3       	ldi	r19, 0x3C	; 60
    198a:	b3 2e       	mov	r11, r19
    198c:	ae 01       	movw	r20, r28
    198e:	4f 5f       	subi	r20, 0xFF	; 255
    1990:	5f 4f       	sbci	r21, 0xFF	; 255
    1992:	27 e0       	ldi	r18, 0x07	; 7
    1994:	0b 2d       	mov	r16, r11
    1996:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__ftoa_engine>
    199a:	bc 01       	movw	r22, r24
    199c:	a9 81       	ldd	r26, Y+1	; 0x01
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	cd 01       	movw	r24, r26
    19a2:	89 70       	andi	r24, 0x09	; 9
    19a4:	90 70       	andi	r25, 0x00	; 0
    19a6:	81 30       	cpi	r24, 0x01	; 1
    19a8:	91 05       	cpc	r25, r1
    19aa:	31 f0       	breq	.+12     	; 0x19b8 <dtoa_prf+0x4e>
    19ac:	e1 fc       	sbrc	r14, 1
    19ae:	06 c0       	rjmp	.+12     	; 0x19bc <dtoa_prf+0x52>
    19b0:	e0 fe       	sbrs	r14, 0
    19b2:	06 c0       	rjmp	.+12     	; 0x19c0 <dtoa_prf+0x56>
    19b4:	40 e2       	ldi	r20, 0x20	; 32
    19b6:	05 c0       	rjmp	.+10     	; 0x19c2 <dtoa_prf+0x58>
    19b8:	4d e2       	ldi	r20, 0x2D	; 45
    19ba:	03 c0       	rjmp	.+6      	; 0x19c2 <dtoa_prf+0x58>
    19bc:	4b e2       	ldi	r20, 0x2B	; 43
    19be:	01 c0       	rjmp	.+2      	; 0x19c2 <dtoa_prf+0x58>
    19c0:	40 e0       	ldi	r20, 0x00	; 0
    19c2:	a3 ff       	sbrs	r26, 3
    19c4:	36 c0       	rjmp	.+108    	; 0x1a32 <dtoa_prf+0xc8>
    19c6:	44 23       	and	r20, r20
    19c8:	11 f0       	breq	.+4      	; 0x19ce <dtoa_prf+0x64>
    19ca:	84 e0       	ldi	r24, 0x04	; 4
    19cc:	01 c0       	rjmp	.+2      	; 0x19d0 <dtoa_prf+0x66>
    19ce:	83 e0       	ldi	r24, 0x03	; 3
    19d0:	81 17       	cp	r24, r17
    19d2:	10 f4       	brcc	.+4      	; 0x19d8 <dtoa_prf+0x6e>
    19d4:	18 1b       	sub	r17, r24
    19d6:	01 c0       	rjmp	.+2      	; 0x19da <dtoa_prf+0x70>
    19d8:	10 e0       	ldi	r17, 0x00	; 0
    19da:	e4 fc       	sbrc	r14, 4
    19dc:	0b c0       	rjmp	.+22     	; 0x19f4 <dtoa_prf+0x8a>
    19de:	91 2f       	mov	r25, r17
    19e0:	f6 01       	movw	r30, r12
    19e2:	80 e2       	ldi	r24, 0x20	; 32
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <dtoa_prf+0x80>
    19e6:	81 93       	st	Z+, r24
    19e8:	91 50       	subi	r25, 0x01	; 1
    19ea:	99 23       	and	r25, r25
    19ec:	e1 f7       	brne	.-8      	; 0x19e6 <dtoa_prf+0x7c>
    19ee:	c1 0e       	add	r12, r17
    19f0:	d1 1c       	adc	r13, r1
    19f2:	10 e0       	ldi	r17, 0x00	; 0
    19f4:	44 23       	and	r20, r20
    19f6:	19 f0       	breq	.+6      	; 0x19fe <dtoa_prf+0x94>
    19f8:	f6 01       	movw	r30, r12
    19fa:	41 93       	st	Z+, r20
    19fc:	6f 01       	movw	r12, r30
    19fe:	e2 fe       	sbrs	r14, 2
    1a00:	05 c0       	rjmp	.+10     	; 0x1a0c <dtoa_prf+0xa2>
    1a02:	8e e4       	ldi	r24, 0x4E	; 78
    1a04:	f6 01       	movw	r30, r12
    1a06:	80 83       	st	Z, r24
    1a08:	91 e4       	ldi	r25, 0x41	; 65
    1a0a:	04 c0       	rjmp	.+8      	; 0x1a14 <dtoa_prf+0xaa>
    1a0c:	8e e6       	ldi	r24, 0x6E	; 110
    1a0e:	f6 01       	movw	r30, r12
    1a10:	80 83       	st	Z, r24
    1a12:	91 e6       	ldi	r25, 0x61	; 97
    1a14:	91 83       	std	Z+1, r25	; 0x01
    1a16:	82 83       	std	Z+2, r24	; 0x02
    1a18:	83 e0       	ldi	r24, 0x03	; 3
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	c8 0e       	add	r12, r24
    1a1e:	d9 1e       	adc	r13, r25
    1a20:	81 2f       	mov	r24, r17
    1a22:	f6 01       	movw	r30, r12
    1a24:	90 e2       	ldi	r25, 0x20	; 32
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <dtoa_prf+0xc2>
    1a28:	91 93       	st	Z+, r25
    1a2a:	81 50       	subi	r24, 0x01	; 1
    1a2c:	88 23       	and	r24, r24
    1a2e:	e1 f7       	brne	.-8      	; 0x1a28 <dtoa_prf+0xbe>
    1a30:	3a c0       	rjmp	.+116    	; 0x1aa6 <dtoa_prf+0x13c>
    1a32:	a2 ff       	sbrs	r26, 2
    1a34:	3f c0       	rjmp	.+126    	; 0x1ab4 <dtoa_prf+0x14a>
    1a36:	44 23       	and	r20, r20
    1a38:	11 f0       	breq	.+4      	; 0x1a3e <dtoa_prf+0xd4>
    1a3a:	84 e0       	ldi	r24, 0x04	; 4
    1a3c:	01 c0       	rjmp	.+2      	; 0x1a40 <dtoa_prf+0xd6>
    1a3e:	83 e0       	ldi	r24, 0x03	; 3
    1a40:	81 17       	cp	r24, r17
    1a42:	10 f4       	brcc	.+4      	; 0x1a48 <dtoa_prf+0xde>
    1a44:	18 1b       	sub	r17, r24
    1a46:	01 c0       	rjmp	.+2      	; 0x1a4a <dtoa_prf+0xe0>
    1a48:	10 e0       	ldi	r17, 0x00	; 0
    1a4a:	e4 fc       	sbrc	r14, 4
    1a4c:	0b c0       	rjmp	.+22     	; 0x1a64 <dtoa_prf+0xfa>
    1a4e:	91 2f       	mov	r25, r17
    1a50:	f6 01       	movw	r30, r12
    1a52:	80 e2       	ldi	r24, 0x20	; 32
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <dtoa_prf+0xf0>
    1a56:	81 93       	st	Z+, r24
    1a58:	91 50       	subi	r25, 0x01	; 1
    1a5a:	99 23       	and	r25, r25
    1a5c:	e1 f7       	brne	.-8      	; 0x1a56 <dtoa_prf+0xec>
    1a5e:	c1 0e       	add	r12, r17
    1a60:	d1 1c       	adc	r13, r1
    1a62:	10 e0       	ldi	r17, 0x00	; 0
    1a64:	44 23       	and	r20, r20
    1a66:	19 f0       	breq	.+6      	; 0x1a6e <dtoa_prf+0x104>
    1a68:	f6 01       	movw	r30, r12
    1a6a:	41 93       	st	Z+, r20
    1a6c:	6f 01       	movw	r12, r30
    1a6e:	e2 fe       	sbrs	r14, 2
    1a70:	07 c0       	rjmp	.+14     	; 0x1a80 <dtoa_prf+0x116>
    1a72:	89 e4       	ldi	r24, 0x49	; 73
    1a74:	f6 01       	movw	r30, r12
    1a76:	80 83       	st	Z, r24
    1a78:	8e e4       	ldi	r24, 0x4E	; 78
    1a7a:	81 83       	std	Z+1, r24	; 0x01
    1a7c:	86 e4       	ldi	r24, 0x46	; 70
    1a7e:	06 c0       	rjmp	.+12     	; 0x1a8c <dtoa_prf+0x122>
    1a80:	89 e6       	ldi	r24, 0x69	; 105
    1a82:	f6 01       	movw	r30, r12
    1a84:	80 83       	st	Z, r24
    1a86:	8e e6       	ldi	r24, 0x6E	; 110
    1a88:	81 83       	std	Z+1, r24	; 0x01
    1a8a:	86 e6       	ldi	r24, 0x66	; 102
    1a8c:	82 83       	std	Z+2, r24	; 0x02
    1a8e:	83 e0       	ldi	r24, 0x03	; 3
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	c8 0e       	add	r12, r24
    1a94:	d9 1e       	adc	r13, r25
    1a96:	81 2f       	mov	r24, r17
    1a98:	f6 01       	movw	r30, r12
    1a9a:	90 e2       	ldi	r25, 0x20	; 32
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <dtoa_prf+0x138>
    1a9e:	91 93       	st	Z+, r25
    1aa0:	81 50       	subi	r24, 0x01	; 1
    1aa2:	88 23       	and	r24, r24
    1aa4:	e1 f7       	brne	.-8      	; 0x1a9e <dtoa_prf+0x134>
    1aa6:	c1 0e       	add	r12, r17
    1aa8:	d1 1c       	adc	r13, r1
    1aaa:	f6 01       	movw	r30, r12
    1aac:	10 82       	st	Z, r1
    1aae:	8e ef       	ldi	r24, 0xFE	; 254
    1ab0:	9f ef       	ldi	r25, 0xFF	; 255
    1ab2:	af c0       	rjmp	.+350    	; 0x1c12 <dtoa_prf+0x2a8>
    1ab4:	21 e0       	ldi	r18, 0x01	; 1
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	44 23       	and	r20, r20
    1aba:	11 f4       	brne	.+4      	; 0x1ac0 <dtoa_prf+0x156>
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	16 16       	cp	r1, r22
    1ac2:	17 06       	cpc	r1, r23
    1ac4:	1c f4       	brge	.+6      	; 0x1acc <dtoa_prf+0x162>
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	01 96       	adiw	r24, 0x01	; 1
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <dtoa_prf+0x166>
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	28 0f       	add	r18, r24
    1ad2:	39 1f       	adc	r19, r25
    1ad4:	ff 20       	and	r15, r15
    1ad6:	21 f0       	breq	.+8      	; 0x1ae0 <dtoa_prf+0x176>
    1ad8:	8f 2d       	mov	r24, r15
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	01 96       	adiw	r24, 0x01	; 1
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <dtoa_prf+0x17a>
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	82 0f       	add	r24, r18
    1ae6:	93 1f       	adc	r25, r19
    1ae8:	21 2f       	mov	r18, r17
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	82 17       	cp	r24, r18
    1aee:	93 07       	cpc	r25, r19
    1af0:	1c f4       	brge	.+6      	; 0x1af8 <dtoa_prf+0x18e>
    1af2:	51 2f       	mov	r21, r17
    1af4:	58 1b       	sub	r21, r24
    1af6:	01 c0       	rjmp	.+2      	; 0x1afa <dtoa_prf+0x190>
    1af8:	50 e0       	ldi	r21, 0x00	; 0
    1afa:	8e 2d       	mov	r24, r14
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	9c 01       	movw	r18, r24
    1b00:	20 71       	andi	r18, 0x10	; 16
    1b02:	30 70       	andi	r19, 0x00	; 0
    1b04:	e4 fc       	sbrc	r14, 4
    1b06:	0d c0       	rjmp	.+26     	; 0x1b22 <dtoa_prf+0x1b8>
    1b08:	e3 fc       	sbrc	r14, 3
    1b0a:	0b c0       	rjmp	.+22     	; 0x1b22 <dtoa_prf+0x1b8>
    1b0c:	85 2f       	mov	r24, r21
    1b0e:	f6 01       	movw	r30, r12
    1b10:	90 e2       	ldi	r25, 0x20	; 32
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <dtoa_prf+0x1ae>
    1b14:	91 93       	st	Z+, r25
    1b16:	81 50       	subi	r24, 0x01	; 1
    1b18:	88 23       	and	r24, r24
    1b1a:	e1 f7       	brne	.-8      	; 0x1b14 <dtoa_prf+0x1aa>
    1b1c:	c5 0e       	add	r12, r21
    1b1e:	d1 1c       	adc	r13, r1
    1b20:	50 e0       	ldi	r21, 0x00	; 0
    1b22:	44 23       	and	r20, r20
    1b24:	19 f0       	breq	.+6      	; 0x1b2c <dtoa_prf+0x1c2>
    1b26:	f6 01       	movw	r30, r12
    1b28:	41 93       	st	Z+, r20
    1b2a:	6f 01       	movw	r12, r30
    1b2c:	21 15       	cp	r18, r1
    1b2e:	31 05       	cpc	r19, r1
    1b30:	59 f4       	brne	.+22     	; 0x1b48 <dtoa_prf+0x1de>
    1b32:	85 2f       	mov	r24, r21
    1b34:	f6 01       	movw	r30, r12
    1b36:	90 e3       	ldi	r25, 0x30	; 48
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <dtoa_prf+0x1d4>
    1b3a:	91 93       	st	Z+, r25
    1b3c:	81 50       	subi	r24, 0x01	; 1
    1b3e:	88 23       	and	r24, r24
    1b40:	e1 f7       	brne	.-8      	; 0x1b3a <dtoa_prf+0x1d0>
    1b42:	c5 0e       	add	r12, r21
    1b44:	d1 1c       	adc	r13, r1
    1b46:	50 e0       	ldi	r21, 0x00	; 0
    1b48:	b6 0e       	add	r11, r22
    1b4a:	4a 81       	ldd	r20, Y+2	; 0x02
    1b4c:	20 e1       	ldi	r18, 0x10	; 16
    1b4e:	62 2e       	mov	r6, r18
    1b50:	71 2c       	mov	r7, r1
    1b52:	6a 22       	and	r6, r26
    1b54:	7b 22       	and	r7, r27
    1b56:	a4 ff       	sbrs	r26, 4
    1b58:	03 c0       	rjmp	.+6      	; 0x1b60 <dtoa_prf+0x1f6>
    1b5a:	41 33       	cpi	r20, 0x31	; 49
    1b5c:	09 f4       	brne	.+2      	; 0x1b60 <dtoa_prf+0x1f6>
    1b5e:	ba 94       	dec	r11
    1b60:	1b 14       	cp	r1, r11
    1b62:	2c f4       	brge	.+10     	; 0x1b6e <dtoa_prf+0x204>
    1b64:	8b 2d       	mov	r24, r11
    1b66:	89 30       	cpi	r24, 0x09	; 9
    1b68:	18 f0       	brcs	.+6      	; 0x1b70 <dtoa_prf+0x206>
    1b6a:	88 e0       	ldi	r24, 0x08	; 8
    1b6c:	01 c0       	rjmp	.+2      	; 0x1b70 <dtoa_prf+0x206>
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	9b 01       	movw	r18, r22
    1b72:	77 ff       	sbrs	r23, 7
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <dtoa_prf+0x210>
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	a0 e0       	ldi	r26, 0x00	; 0
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	9e e2       	ldi	r25, 0x2E	; 46
    1b80:	e9 2e       	mov	r14, r25
    1b82:	4b 01       	movw	r8, r22
    1b84:	88 1a       	sub	r8, r24
    1b86:	91 08       	sbc	r9, r1
    1b88:	cb 01       	movw	r24, r22
    1b8a:	82 1b       	sub	r24, r18
    1b8c:	93 0b       	sbc	r25, r19
    1b8e:	8e 01       	movw	r16, r28
    1b90:	0f 5f       	subi	r16, 0xFF	; 255
    1b92:	1f 4f       	sbci	r17, 0xFF	; 255
    1b94:	08 0f       	add	r16, r24
    1b96:	19 1f       	adc	r17, r25
    1b98:	8f 2d       	mov	r24, r15
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	aa 24       	eor	r10, r10
    1b9e:	bb 24       	eor	r11, r11
    1ba0:	a8 1a       	sub	r10, r24
    1ba2:	b9 0a       	sbc	r11, r25
    1ba4:	ff ef       	ldi	r31, 0xFF	; 255
    1ba6:	2f 3f       	cpi	r18, 0xFF	; 255
    1ba8:	3f 07       	cpc	r19, r31
    1baa:	19 f4       	brne	.+6      	; 0x1bb2 <dtoa_prf+0x248>
    1bac:	f6 01       	movw	r30, r12
    1bae:	e1 92       	st	Z+, r14
    1bb0:	6f 01       	movw	r12, r30
    1bb2:	62 17       	cp	r22, r18
    1bb4:	73 07       	cpc	r23, r19
    1bb6:	44 f0       	brlt	.+16     	; 0x1bc8 <dtoa_prf+0x25e>
    1bb8:	82 16       	cp	r8, r18
    1bba:	93 06       	cpc	r9, r19
    1bbc:	2c f4       	brge	.+10     	; 0x1bc8 <dtoa_prf+0x25e>
    1bbe:	f8 01       	movw	r30, r16
    1bc0:	ea 0f       	add	r30, r26
    1bc2:	fb 1f       	adc	r31, r27
    1bc4:	81 81       	ldd	r24, Z+1	; 0x01
    1bc6:	01 c0       	rjmp	.+2      	; 0x1bca <dtoa_prf+0x260>
    1bc8:	80 e3       	ldi	r24, 0x30	; 48
    1bca:	21 50       	subi	r18, 0x01	; 1
    1bcc:	30 40       	sbci	r19, 0x00	; 0
    1bce:	11 96       	adiw	r26, 0x01	; 1
    1bd0:	2a 15       	cp	r18, r10
    1bd2:	3b 05       	cpc	r19, r11
    1bd4:	24 f0       	brlt	.+8      	; 0x1bde <dtoa_prf+0x274>
    1bd6:	f6 01       	movw	r30, r12
    1bd8:	81 93       	st	Z+, r24
    1bda:	6f 01       	movw	r12, r30
    1bdc:	e3 cf       	rjmp	.-58     	; 0x1ba4 <dtoa_prf+0x23a>
    1bde:	26 17       	cp	r18, r22
    1be0:	37 07       	cpc	r19, r23
    1be2:	41 f4       	brne	.+16     	; 0x1bf4 <dtoa_prf+0x28a>
    1be4:	46 33       	cpi	r20, 0x36	; 54
    1be6:	28 f4       	brcc	.+10     	; 0x1bf2 <dtoa_prf+0x288>
    1be8:	45 33       	cpi	r20, 0x35	; 53
    1bea:	21 f4       	brne	.+8      	; 0x1bf4 <dtoa_prf+0x28a>
    1bec:	61 14       	cp	r6, r1
    1bee:	71 04       	cpc	r7, r1
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <dtoa_prf+0x28a>
    1bf2:	81 e3       	ldi	r24, 0x31	; 49
    1bf4:	f6 01       	movw	r30, r12
    1bf6:	81 93       	st	Z+, r24
    1bf8:	85 2f       	mov	r24, r21
    1bfa:	df 01       	movw	r26, r30
    1bfc:	90 e2       	ldi	r25, 0x20	; 32
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <dtoa_prf+0x29a>
    1c00:	9d 93       	st	X+, r25
    1c02:	81 50       	subi	r24, 0x01	; 1
    1c04:	88 23       	and	r24, r24
    1c06:	e1 f7       	brne	.-8      	; 0x1c00 <dtoa_prf+0x296>
    1c08:	e5 0f       	add	r30, r21
    1c0a:	f1 1d       	adc	r31, r1
    1c0c:	10 82       	st	Z, r1
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	29 96       	adiw	r28, 0x09	; 9
    1c14:	ee e0       	ldi	r30, 0x0E	; 14
    1c16:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <__epilogue_restores__+0x8>

00001c1a <__ftoa_engine>:
    1c1a:	28 30       	cpi	r18, 0x08	; 8
    1c1c:	08 f0       	brcs	.+2      	; 0x1c20 <__ftoa_engine+0x6>
    1c1e:	27 e0       	ldi	r18, 0x07	; 7
    1c20:	33 27       	eor	r19, r19
    1c22:	da 01       	movw	r26, r20
    1c24:	99 0f       	add	r25, r25
    1c26:	31 1d       	adc	r19, r1
    1c28:	87 fd       	sbrc	r24, 7
    1c2a:	91 60       	ori	r25, 0x01	; 1
    1c2c:	00 96       	adiw	r24, 0x00	; 0
    1c2e:	61 05       	cpc	r22, r1
    1c30:	71 05       	cpc	r23, r1
    1c32:	39 f4       	brne	.+14     	; 0x1c42 <__ftoa_engine+0x28>
    1c34:	32 60       	ori	r19, 0x02	; 2
    1c36:	2e 5f       	subi	r18, 0xFE	; 254
    1c38:	3d 93       	st	X+, r19
    1c3a:	30 e3       	ldi	r19, 0x30	; 48
    1c3c:	2a 95       	dec	r18
    1c3e:	e1 f7       	brne	.-8      	; 0x1c38 <__ftoa_engine+0x1e>
    1c40:	08 95       	ret
    1c42:	9f 3f       	cpi	r25, 0xFF	; 255
    1c44:	30 f0       	brcs	.+12     	; 0x1c52 <__ftoa_engine+0x38>
    1c46:	80 38       	cpi	r24, 0x80	; 128
    1c48:	71 05       	cpc	r23, r1
    1c4a:	61 05       	cpc	r22, r1
    1c4c:	09 f0       	breq	.+2      	; 0x1c50 <__ftoa_engine+0x36>
    1c4e:	3c 5f       	subi	r19, 0xFC	; 252
    1c50:	3c 5f       	subi	r19, 0xFC	; 252
    1c52:	3d 93       	st	X+, r19
    1c54:	91 30       	cpi	r25, 0x01	; 1
    1c56:	08 f0       	brcs	.+2      	; 0x1c5a <__ftoa_engine+0x40>
    1c58:	80 68       	ori	r24, 0x80	; 128
    1c5a:	91 1d       	adc	r25, r1
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	1f 93       	push	r17
    1c62:	0f 93       	push	r16
    1c64:	ff 92       	push	r15
    1c66:	ef 92       	push	r14
    1c68:	19 2f       	mov	r17, r25
    1c6a:	98 7f       	andi	r25, 0xF8	; 248
    1c6c:	96 95       	lsr	r25
    1c6e:	e9 2f       	mov	r30, r25
    1c70:	96 95       	lsr	r25
    1c72:	96 95       	lsr	r25
    1c74:	e9 0f       	add	r30, r25
    1c76:	ff 27       	eor	r31, r31
    1c78:	ee 53       	subi	r30, 0x3E	; 62
    1c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7c:	99 27       	eor	r25, r25
    1c7e:	33 27       	eor	r19, r19
    1c80:	ee 24       	eor	r14, r14
    1c82:	ff 24       	eor	r15, r15
    1c84:	a7 01       	movw	r20, r14
    1c86:	e7 01       	movw	r28, r14
    1c88:	05 90       	lpm	r0, Z+
    1c8a:	08 94       	sec
    1c8c:	07 94       	ror	r0
    1c8e:	28 f4       	brcc	.+10     	; 0x1c9a <__ftoa_engine+0x80>
    1c90:	36 0f       	add	r19, r22
    1c92:	e7 1e       	adc	r14, r23
    1c94:	f8 1e       	adc	r15, r24
    1c96:	49 1f       	adc	r20, r25
    1c98:	51 1d       	adc	r21, r1
    1c9a:	66 0f       	add	r22, r22
    1c9c:	77 1f       	adc	r23, r23
    1c9e:	88 1f       	adc	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	06 94       	lsr	r0
    1ca4:	a1 f7       	brne	.-24     	; 0x1c8e <__ftoa_engine+0x74>
    1ca6:	05 90       	lpm	r0, Z+
    1ca8:	07 94       	ror	r0
    1caa:	28 f4       	brcc	.+10     	; 0x1cb6 <__ftoa_engine+0x9c>
    1cac:	e7 0e       	add	r14, r23
    1cae:	f8 1e       	adc	r15, r24
    1cb0:	49 1f       	adc	r20, r25
    1cb2:	56 1f       	adc	r21, r22
    1cb4:	c1 1d       	adc	r28, r1
    1cb6:	77 0f       	add	r23, r23
    1cb8:	88 1f       	adc	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	66 1f       	adc	r22, r22
    1cbe:	06 94       	lsr	r0
    1cc0:	a1 f7       	brne	.-24     	; 0x1caa <__ftoa_engine+0x90>
    1cc2:	05 90       	lpm	r0, Z+
    1cc4:	07 94       	ror	r0
    1cc6:	28 f4       	brcc	.+10     	; 0x1cd2 <__ftoa_engine+0xb8>
    1cc8:	f8 0e       	add	r15, r24
    1cca:	49 1f       	adc	r20, r25
    1ccc:	56 1f       	adc	r21, r22
    1cce:	c7 1f       	adc	r28, r23
    1cd0:	d1 1d       	adc	r29, r1
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	66 1f       	adc	r22, r22
    1cd8:	77 1f       	adc	r23, r23
    1cda:	06 94       	lsr	r0
    1cdc:	a1 f7       	brne	.-24     	; 0x1cc6 <__ftoa_engine+0xac>
    1cde:	05 90       	lpm	r0, Z+
    1ce0:	07 94       	ror	r0
    1ce2:	20 f4       	brcc	.+8      	; 0x1cec <__ftoa_engine+0xd2>
    1ce4:	49 0f       	add	r20, r25
    1ce6:	56 1f       	adc	r21, r22
    1ce8:	c7 1f       	adc	r28, r23
    1cea:	d8 1f       	adc	r29, r24
    1cec:	99 0f       	add	r25, r25
    1cee:	66 1f       	adc	r22, r22
    1cf0:	77 1f       	adc	r23, r23
    1cf2:	88 1f       	adc	r24, r24
    1cf4:	06 94       	lsr	r0
    1cf6:	a9 f7       	brne	.-22     	; 0x1ce2 <__ftoa_engine+0xc8>
    1cf8:	84 91       	lpm	r24, Z
    1cfa:	10 95       	com	r17
    1cfc:	17 70       	andi	r17, 0x07	; 7
    1cfe:	41 f0       	breq	.+16     	; 0x1d10 <__ftoa_engine+0xf6>
    1d00:	d6 95       	lsr	r29
    1d02:	c7 95       	ror	r28
    1d04:	57 95       	ror	r21
    1d06:	47 95       	ror	r20
    1d08:	f7 94       	ror	r15
    1d0a:	e7 94       	ror	r14
    1d0c:	1a 95       	dec	r17
    1d0e:	c1 f7       	brne	.-16     	; 0x1d00 <__ftoa_engine+0xe6>
    1d10:	e8 e6       	ldi	r30, 0x68	; 104
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	68 94       	set
    1d16:	15 90       	lpm	r1, Z+
    1d18:	15 91       	lpm	r17, Z+
    1d1a:	35 91       	lpm	r19, Z+
    1d1c:	65 91       	lpm	r22, Z+
    1d1e:	95 91       	lpm	r25, Z+
    1d20:	05 90       	lpm	r0, Z+
    1d22:	7f e2       	ldi	r23, 0x2F	; 47
    1d24:	73 95       	inc	r23
    1d26:	e1 18       	sub	r14, r1
    1d28:	f1 0a       	sbc	r15, r17
    1d2a:	43 0b       	sbc	r20, r19
    1d2c:	56 0b       	sbc	r21, r22
    1d2e:	c9 0b       	sbc	r28, r25
    1d30:	d0 09       	sbc	r29, r0
    1d32:	c0 f7       	brcc	.-16     	; 0x1d24 <__ftoa_engine+0x10a>
    1d34:	e1 0c       	add	r14, r1
    1d36:	f1 1e       	adc	r15, r17
    1d38:	43 1f       	adc	r20, r19
    1d3a:	56 1f       	adc	r21, r22
    1d3c:	c9 1f       	adc	r28, r25
    1d3e:	d0 1d       	adc	r29, r0
    1d40:	7e f4       	brtc	.+30     	; 0x1d60 <__ftoa_engine+0x146>
    1d42:	70 33       	cpi	r23, 0x30	; 48
    1d44:	11 f4       	brne	.+4      	; 0x1d4a <__ftoa_engine+0x130>
    1d46:	8a 95       	dec	r24
    1d48:	e6 cf       	rjmp	.-52     	; 0x1d16 <__ftoa_engine+0xfc>
    1d4a:	e8 94       	clt
    1d4c:	01 50       	subi	r16, 0x01	; 1
    1d4e:	30 f0       	brcs	.+12     	; 0x1d5c <__ftoa_engine+0x142>
    1d50:	08 0f       	add	r16, r24
    1d52:	0a f4       	brpl	.+2      	; 0x1d56 <__ftoa_engine+0x13c>
    1d54:	00 27       	eor	r16, r16
    1d56:	02 17       	cp	r16, r18
    1d58:	08 f4       	brcc	.+2      	; 0x1d5c <__ftoa_engine+0x142>
    1d5a:	20 2f       	mov	r18, r16
    1d5c:	23 95       	inc	r18
    1d5e:	02 2f       	mov	r16, r18
    1d60:	7a 33       	cpi	r23, 0x3A	; 58
    1d62:	28 f0       	brcs	.+10     	; 0x1d6e <__ftoa_engine+0x154>
    1d64:	79 e3       	ldi	r23, 0x39	; 57
    1d66:	7d 93       	st	X+, r23
    1d68:	2a 95       	dec	r18
    1d6a:	e9 f7       	brne	.-6      	; 0x1d66 <__ftoa_engine+0x14c>
    1d6c:	10 c0       	rjmp	.+32     	; 0x1d8e <__ftoa_engine+0x174>
    1d6e:	7d 93       	st	X+, r23
    1d70:	2a 95       	dec	r18
    1d72:	89 f6       	brne	.-94     	; 0x1d16 <__ftoa_engine+0xfc>
    1d74:	06 94       	lsr	r0
    1d76:	97 95       	ror	r25
    1d78:	67 95       	ror	r22
    1d7a:	37 95       	ror	r19
    1d7c:	17 95       	ror	r17
    1d7e:	17 94       	ror	r1
    1d80:	e1 18       	sub	r14, r1
    1d82:	f1 0a       	sbc	r15, r17
    1d84:	43 0b       	sbc	r20, r19
    1d86:	56 0b       	sbc	r21, r22
    1d88:	c9 0b       	sbc	r28, r25
    1d8a:	d0 09       	sbc	r29, r0
    1d8c:	98 f0       	brcs	.+38     	; 0x1db4 <__ftoa_engine+0x19a>
    1d8e:	23 95       	inc	r18
    1d90:	7e 91       	ld	r23, -X
    1d92:	73 95       	inc	r23
    1d94:	7a 33       	cpi	r23, 0x3A	; 58
    1d96:	08 f0       	brcs	.+2      	; 0x1d9a <__ftoa_engine+0x180>
    1d98:	70 e3       	ldi	r23, 0x30	; 48
    1d9a:	7c 93       	st	X, r23
    1d9c:	20 13       	cpse	r18, r16
    1d9e:	b8 f7       	brcc	.-18     	; 0x1d8e <__ftoa_engine+0x174>
    1da0:	7e 91       	ld	r23, -X
    1da2:	70 61       	ori	r23, 0x10	; 16
    1da4:	7d 93       	st	X+, r23
    1da6:	30 f0       	brcs	.+12     	; 0x1db4 <__ftoa_engine+0x19a>
    1da8:	83 95       	inc	r24
    1daa:	71 e3       	ldi	r23, 0x31	; 49
    1dac:	7d 93       	st	X+, r23
    1dae:	70 e3       	ldi	r23, 0x30	; 48
    1db0:	2a 95       	dec	r18
    1db2:	e1 f7       	brne	.-8      	; 0x1dac <__ftoa_engine+0x192>
    1db4:	11 24       	eor	r1, r1
    1db6:	ef 90       	pop	r14
    1db8:	ff 90       	pop	r15
    1dba:	0f 91       	pop	r16
    1dbc:	1f 91       	pop	r17
    1dbe:	cf 91       	pop	r28
    1dc0:	df 91       	pop	r29
    1dc2:	99 27       	eor	r25, r25
    1dc4:	87 fd       	sbrc	r24, 7
    1dc6:	90 95       	com	r25
    1dc8:	08 95       	ret

00001dca <strrev>:
    1dca:	dc 01       	movw	r26, r24
    1dcc:	fc 01       	movw	r30, r24
    1dce:	67 2f       	mov	r22, r23
    1dd0:	71 91       	ld	r23, Z+
    1dd2:	77 23       	and	r23, r23
    1dd4:	e1 f7       	brne	.-8      	; 0x1dce <strrev+0x4>
    1dd6:	32 97       	sbiw	r30, 0x02	; 2
    1dd8:	04 c0       	rjmp	.+8      	; 0x1de2 <strrev+0x18>
    1dda:	7c 91       	ld	r23, X
    1ddc:	6d 93       	st	X+, r22
    1dde:	70 83       	st	Z, r23
    1de0:	62 91       	ld	r22, -Z
    1de2:	ae 17       	cp	r26, r30
    1de4:	bf 07       	cpc	r27, r31
    1de6:	c8 f3       	brcs	.-14     	; 0x1dda <strrev+0x10>
    1de8:	08 95       	ret

00001dea <__prologue_saves__>:
    1dea:	2f 92       	push	r2
    1dec:	3f 92       	push	r3
    1dee:	4f 92       	push	r4
    1df0:	5f 92       	push	r5
    1df2:	6f 92       	push	r6
    1df4:	7f 92       	push	r7
    1df6:	8f 92       	push	r8
    1df8:	9f 92       	push	r9
    1dfa:	af 92       	push	r10
    1dfc:	bf 92       	push	r11
    1dfe:	cf 92       	push	r12
    1e00:	df 92       	push	r13
    1e02:	ef 92       	push	r14
    1e04:	ff 92       	push	r15
    1e06:	0f 93       	push	r16
    1e08:	1f 93       	push	r17
    1e0a:	cf 93       	push	r28
    1e0c:	df 93       	push	r29
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
    1e12:	ca 1b       	sub	r28, r26
    1e14:	db 0b       	sbc	r29, r27
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	de bf       	out	0x3e, r29	; 62
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	cd bf       	out	0x3d, r28	; 61
    1e20:	09 94       	ijmp

00001e22 <__epilogue_restores__>:
    1e22:	2a 88       	ldd	r2, Y+18	; 0x12
    1e24:	39 88       	ldd	r3, Y+17	; 0x11
    1e26:	48 88       	ldd	r4, Y+16	; 0x10
    1e28:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e2a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e2c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e2e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e30:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e32:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e34:	b9 84       	ldd	r11, Y+9	; 0x09
    1e36:	c8 84       	ldd	r12, Y+8	; 0x08
    1e38:	df 80       	ldd	r13, Y+7	; 0x07
    1e3a:	ee 80       	ldd	r14, Y+6	; 0x06
    1e3c:	fd 80       	ldd	r15, Y+5	; 0x05
    1e3e:	0c 81       	ldd	r16, Y+4	; 0x04
    1e40:	1b 81       	ldd	r17, Y+3	; 0x03
    1e42:	aa 81       	ldd	r26, Y+2	; 0x02
    1e44:	b9 81       	ldd	r27, Y+1	; 0x01
    1e46:	ce 0f       	add	r28, r30
    1e48:	d1 1d       	adc	r29, r1
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	f8 94       	cli
    1e4e:	de bf       	out	0x3e, r29	; 62
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	cd bf       	out	0x3d, r28	; 61
    1e54:	ed 01       	movw	r28, r26
    1e56:	08 95       	ret

00001e58 <_exit>:
    1e58:	f8 94       	cli

00001e5a <__stop_program>:
    1e5a:	ff cf       	rjmp	.-2      	; 0x1e5a <__stop_program>
