
HR_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  0000240a  0000249e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000240a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002a7  0080012a  0080012a  000024c8  2**0
                  ALLOC
  3 .stab         00002afc  00000000  00000000  000024c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000710  00000000  00000000  00004fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000056d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019ce  00000000  00000000  00005838  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004e5  00000000  00000000  00007206  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bea  00000000  00000000  000076eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006cc  00000000  00000000  000082d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009f3  00000000  00000000  000089a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012c6  00000000  00000000  00009397  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000a65d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__ctors_end>
       4:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__vector_1>
       8:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
       c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      10:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      14:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      18:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      1c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      20:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      24:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      28:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      2c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      30:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      34:	0c 94 44 0a 	jmp	0x1488	; 0x1488 <__vector_13>
      38:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__vector_14>
      3c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      40:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      44:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      48:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      4c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      50:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      54:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      58:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      5c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      60:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      64:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	lds	r16, 0x00
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <_ZN12heartMonitorC1Ev+0x48>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <_ZN8odometer12setWheelSizeEd+0x42>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__SREG__+0x45>
      f4:	ba a5       	lds	r27, 0x6a
      f6:	6f a5       	lds	r22, 0x6f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__SREG__+0x89>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <_ZN8odometer11setOdometerEddddjjjj+0x4a>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <__do_clear_bss+0x6>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__SREG__+0xd1>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <_ZN8odometerC1Ev+0x16>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <__ctors_start>:
     162:	6f 0d       	add	r22, r15

00000164 <__ctors_end>:
     164:	11 24       	eor	r1, r1
     166:	1f be       	out	0x3f, r1	; 63
     168:	cf ef       	ldi	r28, 0xFF	; 255
     16a:	d8 e0       	ldi	r29, 0x08	; 8
     16c:	de bf       	out	0x3e, r29	; 62
     16e:	cd bf       	out	0x3d, r28	; 61

00000170 <__do_copy_data>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a0 e0       	ldi	r26, 0x00	; 0
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	ea e0       	ldi	r30, 0x0A	; 10
     178:	f4 e2       	ldi	r31, 0x24	; 36
     17a:	02 c0       	rjmp	.+4      	; 0x180 <__do_copy_data+0x10>
     17c:	05 90       	lpm	r0, Z+
     17e:	0d 92       	st	X+, r0
     180:	aa 32       	cpi	r26, 0x2A	; 42
     182:	b1 07       	cpc	r27, r17
     184:	d9 f7       	brne	.-10     	; 0x17c <__do_copy_data+0xc>

00000186 <__do_clear_bss>:
     186:	13 e0       	ldi	r17, 0x03	; 3
     188:	aa e2       	ldi	r26, 0x2A	; 42
     18a:	b1 e0       	ldi	r27, 0x01	; 1
     18c:	01 c0       	rjmp	.+2      	; 0x190 <.do_clear_bss_start>

0000018e <.do_clear_bss_loop>:
     18e:	1d 92       	st	X+, r1

00000190 <.do_clear_bss_start>:
     190:	a1 3d       	cpi	r26, 0xD1	; 209
     192:	b1 07       	cpc	r27, r17
     194:	e1 f7       	brne	.-8      	; 0x18e <.do_clear_bss_loop>

00000196 <__do_global_ctors>:
     196:	11 e0       	ldi	r17, 0x01	; 1
     198:	c4 e6       	ldi	r28, 0x64	; 100
     19a:	d1 e0       	ldi	r29, 0x01	; 1
     19c:	04 c0       	rjmp	.+8      	; 0x1a6 <__do_global_ctors+0x10>
     19e:	22 97       	sbiw	r28, 0x02	; 2
     1a0:	fe 01       	movw	r30, r28
     1a2:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <__tablejump__>
     1a6:	c2 36       	cpi	r28, 0x62	; 98
     1a8:	d1 07       	cpc	r29, r17
     1aa:	c9 f7       	brne	.-14     	; 0x19e <__do_global_ctors+0x8>
     1ac:	0e 94 89 0b 	call	0x1712	; 0x1712 <main>
     1b0:	0c 94 03 12 	jmp	0x2406	; 0x2406 <_exit>

000001b4 <__bad_interrupt>:
     1b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b8 <_ZN8odometerC1Ev>:
		void updateSpeeds();
		void resetOdometer();
};

//For new odometer, initialize everything
odometer::odometer(){
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	00 d0       	rcall	.+0      	; 0x1be <_ZN8odometerC1Ev+0x6>
     1be:	cd b7       	in	r28, 0x3d	; 61
     1c0:	de b7       	in	r29, 0x3e	; 62
     1c2:	9a 83       	std	Y+2, r25	; 0x02
     1c4:	89 83       	std	Y+1, r24	; 0x01
	wheelSize=DEFAULT_WHEEL_SIZE;
     1c6:	29 81       	ldd	r18, Y+1	; 0x01
     1c8:	3a 81       	ldd	r19, Y+2	; 0x02
     1ca:	82 e3       	ldi	r24, 0x32	; 50
     1cc:	96 ef       	ldi	r25, 0xF6	; 246
     1ce:	a5 eb       	ldi	r26, 0xB5	; 181
     1d0:	ba e3       	ldi	r27, 0x3A	; 58
     1d2:	f9 01       	movw	r30, r18
     1d4:	84 87       	std	Z+12, r24	; 0x0c
     1d6:	95 87       	std	Z+13, r25	; 0x0d
     1d8:	a6 87       	std	Z+14, r26	; 0x0e
     1da:	b7 87       	std	Z+15, r27	; 0x0f
	resetOdometer();
     1dc:	89 81       	ldd	r24, Y+1	; 0x01
     1de:	9a 81       	ldd	r25, Y+2	; 0x02
     1e0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_ZN8odometer13resetOdometerEv>
}
     1e4:	0f 90       	pop	r0
     1e6:	0f 90       	pop	r0
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
     1ec:	08 95       	ret

000001ee <_ZN8odometer13resetOdometerEv>:

//How we reset odometer. Everyting is reset except WHEEL SIZE, that's done by the calling function.
void odometer::resetOdometer(){
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
     1f2:	00 d0       	rcall	.+0      	; 0x1f4 <_ZN8odometer13resetOdometerEv+0x6>
     1f4:	00 d0       	rcall	.+0      	; 0x1f6 <_ZN8odometer13resetOdometerEv+0x8>
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
     1fa:	9c 83       	std	Y+4, r25	; 0x04
     1fc:	8b 83       	std	Y+3, r24	; 0x03
	firstRun=fTrue;
     1fe:	8b 81       	ldd	r24, Y+3	; 0x03
     200:	9c 81       	ldd	r25, Y+4	; 0x04
     202:	21 e0       	ldi	r18, 0x01	; 1
     204:	fc 01       	movw	r30, r24
     206:	20 ab       	sts	0x50, r18
	noSpeed=fFalse;
     208:	8b 81       	ldd	r24, Y+3	; 0x03
     20a:	9c 81       	ldd	r25, Y+4	; 0x04
     20c:	fc 01       	movw	r30, r24
     20e:	11 aa       	sts	0x91, r17
	aveSpeed=0;
     210:	2b 81       	ldd	r18, Y+3	; 0x03
     212:	3c 81       	ldd	r19, Y+4	; 0x04
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	dc 01       	movw	r26, r24
     21a:	f9 01       	movw	r30, r18
     21c:	80 83       	st	Z, r24
     21e:	91 83       	std	Z+1, r25	; 0x01
     220:	a2 83       	std	Z+2, r26	; 0x02
     222:	b3 83       	std	Z+3, r27	; 0x03
	distance=0;
     224:	2b 81       	ldd	r18, Y+3	; 0x03
     226:	3c 81       	ldd	r19, Y+4	; 0x04
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	dc 01       	movw	r26, r24
     22e:	f9 01       	movw	r30, r18
     230:	84 83       	std	Z+4, r24	; 0x04
     232:	95 83       	std	Z+5, r25	; 0x05
     234:	a6 83       	std	Z+6, r26	; 0x06
     236:	b7 83       	std	Z+7, r27	; 0x07
	currentSpeed=0;
     238:	2b 81       	ldd	r18, Y+3	; 0x03
     23a:	3c 81       	ldd	r19, Y+4	; 0x04
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	dc 01       	movw	r26, r24
     242:	f9 01       	movw	r30, r18
     244:	80 87       	std	Z+8, r24	; 0x08
     246:	91 87       	std	Z+9, r25	; 0x09
     248:	a2 87       	std	Z+10, r26	; 0x0a
     24a:	b3 87       	std	Z+11, r27	; 0x0b
	speedWeight=0;
     24c:	2b 81       	ldd	r18, Y+3	; 0x03
     24e:	3c 81       	ldd	r19, Y+4	; 0x04
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	dc 01       	movw	r26, r24
     256:	f9 01       	movw	r30, r18
     258:	80 8b       	std	Z+16, r24	; 0x10
     25a:	91 8b       	std	Z+17, r25	; 0x11
     25c:	a2 8b       	std	Z+18, r26	; 0x12
     25e:	b3 8b       	std	Z+19, r27	; 0x13
	speedPoints=0;
     260:	8b 81       	ldd	r24, Y+3	; 0x03
     262:	9c 81       	ldd	r25, Y+4	; 0x04
     264:	fc 01       	movw	r30, r24
     266:	17 a6       	lds	r17, 0xb7
     268:	16 a6       	lds	r17, 0xb6
	sDate=0;
     26a:	8b 81       	ldd	r24, Y+3	; 0x03
     26c:	9c 81       	ldd	r25, Y+4	; 0x04
     26e:	fc 01       	movw	r30, r24
     270:	15 8a       	std	Z+21, r1	; 0x15
     272:	14 8a       	std	Z+20, r1	; 0x14
	sTime=0;
     274:	8b 81       	ldd	r24, Y+3	; 0x03
     276:	9c 81       	ldd	r25, Y+4	; 0x04
     278:	fc 01       	movw	r30, r24
     27a:	17 8a       	std	Z+23, r1	; 0x17
     27c:	16 8a       	std	Z+22, r1	; 0x16
	timeElapsed=0;
     27e:	8b 81       	ldd	r24, Y+3	; 0x03
     280:	9c 81       	ldd	r25, Y+4	; 0x04
     282:	fc 01       	movw	r30, r24
     284:	11 8e       	std	Z+25, r1	; 0x19
     286:	10 8e       	std	Z+24, r1	; 0x18
	for (volatile int i=0; i<10; i++){
     288:	1a 82       	std	Y+2, r1	; 0x02
     28a:	19 82       	std	Y+1, r1	; 0x01
     28c:	11 c0       	rjmp	.+34     	; 0x2b0 <_ZN8odometer13resetOdometerEv+0xc2>
		dataPoints[i]=0;
     28e:	89 81       	ldd	r24, Y+1	; 0x01
     290:	9a 81       	ldd	r25, Y+2	; 0x02
     292:	2b 81       	ldd	r18, Y+3	; 0x03
     294:	3c 81       	ldd	r19, Y+4	; 0x04
     296:	0d 96       	adiw	r24, 0x0d	; 13
     298:	88 0f       	add	r24, r24
     29a:	99 1f       	adc	r25, r25
     29c:	82 0f       	add	r24, r18
     29e:	93 1f       	adc	r25, r19
     2a0:	fc 01       	movw	r30, r24
     2a2:	11 82       	std	Z+1, r1	; 0x01
     2a4:	10 82       	st	Z, r1
	speedWeight=0;
	speedPoints=0;
	sDate=0;
	sTime=0;
	timeElapsed=0;
	for (volatile int i=0; i<10; i++){
     2a6:	89 81       	ldd	r24, Y+1	; 0x01
     2a8:	9a 81       	ldd	r25, Y+2	; 0x02
     2aa:	01 96       	adiw	r24, 0x01	; 1
     2ac:	9a 83       	std	Y+2, r25	; 0x02
     2ae:	89 83       	std	Y+1, r24	; 0x01
     2b0:	89 81       	ldd	r24, Y+1	; 0x01
     2b2:	9a 81       	ldd	r25, Y+2	; 0x02
     2b4:	21 e0       	ldi	r18, 0x01	; 1
     2b6:	8a 30       	cpi	r24, 0x0A	; 10
     2b8:	91 05       	cpc	r25, r1
     2ba:	0c f0       	brlt	.+2      	; 0x2be <_ZN8odometer13resetOdometerEv+0xd0>
     2bc:	20 e0       	ldi	r18, 0x00	; 0
     2be:	22 23       	and	r18, r18
     2c0:	31 f7       	brne	.-52     	; 0x28e <_ZN8odometer13resetOdometerEv+0xa0>
		dataPoints[i]=0;
	}
}
     2c2:	0f 90       	pop	r0
     2c4:	0f 90       	pop	r0
     2c6:	0f 90       	pop	r0
     2c8:	0f 90       	pop	r0
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	08 95       	ret

000002d0 <_ZN8odometer20setNewOdometerWOtimeEd>:


//New odometer with wheel size.
void odometer::setNewOdometerWOtime(double wheelSize){
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	00 d0       	rcall	.+0      	; 0x2d6 <_ZN8odometer20setNewOdometerWOtimeEd+0x6>
     2d6:	00 d0       	rcall	.+0      	; 0x2d8 <_ZN8odometer20setNewOdometerWOtimeEd+0x8>
     2d8:	00 d0       	rcall	.+0      	; 0x2da <_ZN8odometer20setNewOdometerWOtimeEd+0xa>
     2da:	cd b7       	in	r28, 0x3d	; 61
     2dc:	de b7       	in	r29, 0x3e	; 62
     2de:	9a 83       	std	Y+2, r25	; 0x02
     2e0:	89 83       	std	Y+1, r24	; 0x01
     2e2:	4b 83       	std	Y+3, r20	; 0x03
     2e4:	5c 83       	std	Y+4, r21	; 0x04
     2e6:	6d 83       	std	Y+5, r22	; 0x05
     2e8:	7e 83       	std	Y+6, r23	; 0x06
	this->wheelSize=wheelSize;
     2ea:	29 81       	ldd	r18, Y+1	; 0x01
     2ec:	3a 81       	ldd	r19, Y+2	; 0x02
     2ee:	8b 81       	ldd	r24, Y+3	; 0x03
     2f0:	9c 81       	ldd	r25, Y+4	; 0x04
     2f2:	ad 81       	ldd	r26, Y+5	; 0x05
     2f4:	be 81       	ldd	r27, Y+6	; 0x06
     2f6:	f9 01       	movw	r30, r18
     2f8:	84 87       	std	Z+12, r24	; 0x0c
     2fa:	95 87       	std	Z+13, r25	; 0x0d
     2fc:	a6 87       	std	Z+14, r26	; 0x0e
     2fe:	b7 87       	std	Z+15, r27	; 0x0f
	resetOdometer();
     300:	89 81       	ldd	r24, Y+1	; 0x01
     302:	9a 81       	ldd	r25, Y+2	; 0x02
     304:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_ZN8odometer13resetOdometerEv>
}
     308:	26 96       	adiw	r28, 0x06	; 6
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	f8 94       	cli
     30e:	de bf       	out	0x3e, r29	; 62
     310:	0f be       	out	0x3f, r0	; 63
     312:	cd bf       	out	0x3d, r28	; 61
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	08 95       	ret

0000031a <_ZN8odometer19setNewOdometerWtimeEdjj>:

//New Odometer with wheel size and accurate/valid date and time.
void odometer::setNewOdometerWtime(double wheelSize, unsigned int sDate, unsigned int sTime){
     31a:	0f 93       	push	r16
     31c:	1f 93       	push	r17
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62
     326:	2a 97       	sbiw	r28, 0x0a	; 10
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	f8 94       	cli
     32c:	de bf       	out	0x3e, r29	; 62
     32e:	0f be       	out	0x3f, r0	; 63
     330:	cd bf       	out	0x3d, r28	; 61
     332:	9a 83       	std	Y+2, r25	; 0x02
     334:	89 83       	std	Y+1, r24	; 0x01
     336:	4b 83       	std	Y+3, r20	; 0x03
     338:	5c 83       	std	Y+4, r21	; 0x04
     33a:	6d 83       	std	Y+5, r22	; 0x05
     33c:	7e 83       	std	Y+6, r23	; 0x06
     33e:	38 87       	std	Y+8, r19	; 0x08
     340:	2f 83       	std	Y+7, r18	; 0x07
     342:	1a 87       	std	Y+10, r17	; 0x0a
     344:	09 87       	std	Y+9, r16	; 0x09
	this->wheelSize=wheelSize;
     346:	29 81       	ldd	r18, Y+1	; 0x01
     348:	3a 81       	ldd	r19, Y+2	; 0x02
     34a:	8b 81       	ldd	r24, Y+3	; 0x03
     34c:	9c 81       	ldd	r25, Y+4	; 0x04
     34e:	ad 81       	ldd	r26, Y+5	; 0x05
     350:	be 81       	ldd	r27, Y+6	; 0x06
     352:	f9 01       	movw	r30, r18
     354:	84 87       	std	Z+12, r24	; 0x0c
     356:	95 87       	std	Z+13, r25	; 0x0d
     358:	a6 87       	std	Z+14, r26	; 0x0e
     35a:	b7 87       	std	Z+15, r27	; 0x0f
	this->sDate=sDate;
     35c:	89 81       	ldd	r24, Y+1	; 0x01
     35e:	9a 81       	ldd	r25, Y+2	; 0x02
     360:	2f 81       	ldd	r18, Y+7	; 0x07
     362:	38 85       	ldd	r19, Y+8	; 0x08
     364:	fc 01       	movw	r30, r24
     366:	35 8b       	std	Z+21, r19	; 0x15
     368:	24 8b       	std	Z+20, r18	; 0x14
	this->sTime=sTime;
     36a:	89 81       	ldd	r24, Y+1	; 0x01
     36c:	9a 81       	ldd	r25, Y+2	; 0x02
     36e:	29 85       	ldd	r18, Y+9	; 0x09
     370:	3a 85       	ldd	r19, Y+10	; 0x0a
     372:	fc 01       	movw	r30, r24
     374:	37 8b       	std	Z+23, r19	; 0x17
     376:	26 8b       	std	Z+22, r18	; 0x16
	resetOdometer();
     378:	89 81       	ldd	r24, Y+1	; 0x01
     37a:	9a 81       	ldd	r25, Y+2	; 0x02
     37c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_ZN8odometer13resetOdometerEv>
	
}
     380:	2a 96       	adiw	r28, 0x0a	; 10
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	f8 94       	cli
     386:	de bf       	out	0x3e, r29	; 62
     388:	0f be       	out	0x3f, r0	; 63
     38a:	cd bf       	out	0x3d, r28	; 61
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	1f 91       	pop	r17
     392:	0f 91       	pop	r16
     394:	08 95       	ret

00000396 <_ZN8odometer11setOdometerEddddjjjj>:

//Restart of the module, need to set everything.
void odometer::setOdometer(double swapAveSpeed, double swapDistance, double swapCurrentSpeed, double swapWheelSize, unsigned int swapSpeedPoints,unsigned int swapTimeElapsed,unsigned int swapSDate, unsigned int swapSTime){
     396:	8f 92       	push	r8
     398:	9f 92       	push	r9
     39a:	af 92       	push	r10
     39c:	bf 92       	push	r11
     39e:	cf 92       	push	r12
     3a0:	df 92       	push	r13
     3a2:	ef 92       	push	r14
     3a4:	ff 92       	push	r15
     3a6:	0f 93       	push	r16
     3a8:	1f 93       	push	r17
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
     3b2:	62 97       	sbiw	r28, 0x12	; 18
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	f8 94       	cli
     3b8:	de bf       	out	0x3e, r29	; 62
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	cd bf       	out	0x3d, r28	; 61
     3be:	9a 83       	std	Y+2, r25	; 0x02
     3c0:	89 83       	std	Y+1, r24	; 0x01
     3c2:	4b 83       	std	Y+3, r20	; 0x03
     3c4:	5c 83       	std	Y+4, r21	; 0x04
     3c6:	6d 83       	std	Y+5, r22	; 0x05
     3c8:	7e 83       	std	Y+6, r23	; 0x06
     3ca:	0f 83       	std	Y+7, r16	; 0x07
     3cc:	18 87       	std	Y+8, r17	; 0x08
     3ce:	29 87       	std	Y+9, r18	; 0x09
     3d0:	3a 87       	std	Y+10, r19	; 0x0a
     3d2:	cb 86       	std	Y+11, r12	; 0x0b
     3d4:	dc 86       	std	Y+12, r13	; 0x0c
     3d6:	ed 86       	std	Y+13, r14	; 0x0d
     3d8:	fe 86       	std	Y+14, r15	; 0x0e
     3da:	8f 86       	std	Y+15, r8	; 0x0f
     3dc:	98 8a       	std	Y+16, r9	; 0x10
     3de:	a9 8a       	std	Y+17, r10	; 0x11
     3e0:	ba 8a       	std	Y+18, r11	; 0x12
	aveSpeed=swapAveSpeed;
     3e2:	29 81       	ldd	r18, Y+1	; 0x01
     3e4:	3a 81       	ldd	r19, Y+2	; 0x02
     3e6:	8b 81       	ldd	r24, Y+3	; 0x03
     3e8:	9c 81       	ldd	r25, Y+4	; 0x04
     3ea:	ad 81       	ldd	r26, Y+5	; 0x05
     3ec:	be 81       	ldd	r27, Y+6	; 0x06
     3ee:	f9 01       	movw	r30, r18
     3f0:	80 83       	st	Z, r24
     3f2:	91 83       	std	Z+1, r25	; 0x01
     3f4:	a2 83       	std	Z+2, r26	; 0x02
     3f6:	b3 83       	std	Z+3, r27	; 0x03
	distance=swapDistance;
     3f8:	29 81       	ldd	r18, Y+1	; 0x01
     3fa:	3a 81       	ldd	r19, Y+2	; 0x02
     3fc:	8f 81       	ldd	r24, Y+7	; 0x07
     3fe:	98 85       	ldd	r25, Y+8	; 0x08
     400:	a9 85       	ldd	r26, Y+9	; 0x09
     402:	ba 85       	ldd	r27, Y+10	; 0x0a
     404:	f9 01       	movw	r30, r18
     406:	84 83       	std	Z+4, r24	; 0x04
     408:	95 83       	std	Z+5, r25	; 0x05
     40a:	a6 83       	std	Z+6, r26	; 0x06
     40c:	b7 83       	std	Z+7, r27	; 0x07
	currentSpeed=swapCurrentSpeed;
     40e:	29 81       	ldd	r18, Y+1	; 0x01
     410:	3a 81       	ldd	r19, Y+2	; 0x02
     412:	8b 85       	ldd	r24, Y+11	; 0x0b
     414:	9c 85       	ldd	r25, Y+12	; 0x0c
     416:	ad 85       	ldd	r26, Y+13	; 0x0d
     418:	be 85       	ldd	r27, Y+14	; 0x0e
     41a:	f9 01       	movw	r30, r18
     41c:	80 87       	std	Z+8, r24	; 0x08
     41e:	91 87       	std	Z+9, r25	; 0x09
     420:	a2 87       	std	Z+10, r26	; 0x0a
     422:	b3 87       	std	Z+11, r27	; 0x0b
	wheelSize=swapWheelSize;
     424:	29 81       	ldd	r18, Y+1	; 0x01
     426:	3a 81       	ldd	r19, Y+2	; 0x02
     428:	8f 85       	ldd	r24, Y+15	; 0x0f
     42a:	98 89       	ldd	r25, Y+16	; 0x10
     42c:	a9 89       	ldd	r26, Y+17	; 0x11
     42e:	ba 89       	ldd	r27, Y+18	; 0x12
     430:	f9 01       	movw	r30, r18
     432:	84 87       	std	Z+12, r24	; 0x0c
     434:	95 87       	std	Z+13, r25	; 0x0d
     436:	a6 87       	std	Z+14, r26	; 0x0e
     438:	b7 87       	std	Z+15, r27	; 0x0f
	speedPoints=swapSpeedPoints;
     43a:	89 81       	ldd	r24, Y+1	; 0x01
     43c:	9a 81       	ldd	r25, Y+2	; 0x02
     43e:	29 a1       	lds	r18, 0x49
     440:	3a a1       	lds	r19, 0x4a
     442:	fc 01       	movw	r30, r24
     444:	37 a7       	lds	r19, 0x77
     446:	26 a7       	lds	r18, 0x76
	timeElapsed=swapTimeElapsed;
     448:	89 81       	ldd	r24, Y+1	; 0x01
     44a:	9a 81       	ldd	r25, Y+2	; 0x02
     44c:	2b a1       	lds	r18, 0x4b
     44e:	3c a1       	lds	r19, 0x4c
     450:	fc 01       	movw	r30, r24
     452:	31 8f       	std	Z+25, r19	; 0x19
     454:	20 8f       	std	Z+24, r18	; 0x18
	sDate=swapSDate;
     456:	89 81       	ldd	r24, Y+1	; 0x01
     458:	9a 81       	ldd	r25, Y+2	; 0x02
     45a:	2d a1       	lds	r18, 0x4d
     45c:	3e a1       	lds	r19, 0x4e
     45e:	fc 01       	movw	r30, r24
     460:	35 8b       	std	Z+21, r19	; 0x15
     462:	24 8b       	std	Z+20, r18	; 0x14
	sTime=swapSTime;
     464:	89 81       	ldd	r24, Y+1	; 0x01
     466:	9a 81       	ldd	r25, Y+2	; 0x02
     468:	2f a1       	lds	r18, 0x4f
     46a:	38 a5       	lds	r19, 0x68
     46c:	fc 01       	movw	r30, r24
     46e:	37 8b       	std	Z+23, r19	; 0x17
     470:	26 8b       	std	Z+22, r18	; 0x16
	firstRun=fTrue;
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	9a 81       	ldd	r25, Y+2	; 0x02
     476:	21 e0       	ldi	r18, 0x01	; 1
     478:	fc 01       	movw	r30, r24
     47a:	20 ab       	sts	0x50, r18
}
     47c:	62 96       	adiw	r28, 0x12	; 18
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	de bf       	out	0x3e, r29	; 62
     484:	0f be       	out	0x3f, r0	; 63
     486:	cd bf       	out	0x3d, r28	; 61
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	ff 90       	pop	r15
     492:	ef 90       	pop	r14
     494:	df 90       	pop	r13
     496:	cf 90       	pop	r12
     498:	bf 90       	pop	r11
     49a:	af 90       	pop	r10
     49c:	9f 90       	pop	r9
     49e:	8f 90       	pop	r8
     4a0:	08 95       	ret

000004a2 <_ZN8odometer17addSpeedDataPointEj>:

//New speed data point
void odometer::addSpeedDataPoint(unsigned int newDataPoint){
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
     4aa:	28 97       	sbiw	r28, 0x08	; 8
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	f8 94       	cli
     4b0:	de bf       	out	0x3e, r29	; 62
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	cd bf       	out	0x3d, r28	; 61
     4b6:	9e 83       	std	Y+6, r25	; 0x06
     4b8:	8d 83       	std	Y+5, r24	; 0x05
     4ba:	78 87       	std	Y+8, r23	; 0x08
     4bc:	6f 83       	std	Y+7, r22	; 0x07
	//If this is first point or new wheelsize, or whatever, need to initialize all data points.
	if (firstRun || noSpeed){
     4be:	8d 81       	ldd	r24, Y+5	; 0x05
     4c0:	9e 81       	ldd	r25, Y+6	; 0x06
     4c2:	fc 01       	movw	r30, r24
     4c4:	80 a9       	sts	0x40, r24
     4c6:	88 23       	and	r24, r24
     4c8:	31 f4       	brne	.+12     	; 0x4d6 <_ZN8odometer17addSpeedDataPointEj+0x34>
     4ca:	8d 81       	ldd	r24, Y+5	; 0x05
     4cc:	9e 81       	ldd	r25, Y+6	; 0x06
     4ce:	fc 01       	movw	r30, r24
     4d0:	81 a9       	sts	0x41, r24
     4d2:	88 23       	and	r24, r24
     4d4:	41 f1       	breq	.+80     	; 0x526 <_ZN8odometer17addSpeedDataPointEj+0x84>
		for (volatile int j=0; j<10;j++){
     4d6:	1a 82       	std	Y+2, r1	; 0x02
     4d8:	19 82       	std	Y+1, r1	; 0x01
     4da:	13 c0       	rjmp	.+38     	; 0x502 <_ZN8odometer17addSpeedDataPointEj+0x60>
			dataPoints[j]=newDataPoint;
     4dc:	89 81       	ldd	r24, Y+1	; 0x01
     4de:	9a 81       	ldd	r25, Y+2	; 0x02
     4e0:	2d 81       	ldd	r18, Y+5	; 0x05
     4e2:	3e 81       	ldd	r19, Y+6	; 0x06
     4e4:	0d 96       	adiw	r24, 0x0d	; 13
     4e6:	88 0f       	add	r24, r24
     4e8:	99 1f       	adc	r25, r25
     4ea:	82 0f       	add	r24, r18
     4ec:	93 1f       	adc	r25, r19
     4ee:	2f 81       	ldd	r18, Y+7	; 0x07
     4f0:	38 85       	ldd	r19, Y+8	; 0x08
     4f2:	fc 01       	movw	r30, r24
     4f4:	31 83       	std	Z+1, r19	; 0x01
     4f6:	20 83       	st	Z, r18

//New speed data point
void odometer::addSpeedDataPoint(unsigned int newDataPoint){
	//If this is first point or new wheelsize, or whatever, need to initialize all data points.
	if (firstRun || noSpeed){
		for (volatile int j=0; j<10;j++){
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	9a 81       	ldd	r25, Y+2	; 0x02
     4fc:	01 96       	adiw	r24, 0x01	; 1
     4fe:	9a 83       	std	Y+2, r25	; 0x02
     500:	89 83       	std	Y+1, r24	; 0x01
     502:	89 81       	ldd	r24, Y+1	; 0x01
     504:	9a 81       	ldd	r25, Y+2	; 0x02
     506:	21 e0       	ldi	r18, 0x01	; 1
     508:	8a 30       	cpi	r24, 0x0A	; 10
     50a:	91 05       	cpc	r25, r1
     50c:	0c f0       	brlt	.+2      	; 0x510 <_ZN8odometer17addSpeedDataPointEj+0x6e>
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	22 23       	and	r18, r18
     512:	21 f7       	brne	.-56     	; 0x4dc <_ZN8odometer17addSpeedDataPointEj+0x3a>
			dataPoints[j]=newDataPoint;
		}
		firstRun=fFalse;				//reset flags
     514:	8d 81       	ldd	r24, Y+5	; 0x05
     516:	9e 81       	ldd	r25, Y+6	; 0x06
     518:	fc 01       	movw	r30, r24
     51a:	10 aa       	sts	0x90, r17
		noSpeed=fFalse;
     51c:	8d 81       	ldd	r24, Y+5	; 0x05
     51e:	9e 81       	ldd	r25, Y+6	; 0x06
     520:	fc 01       	movw	r30, r24
     522:	11 aa       	sts	0x91, r17
     524:	33 c0       	rjmp	.+102    	; 0x58c <_ZN8odometer17addSpeedDataPointEj+0xea>
	//Normal data point. shift back and add new one.
	} else {
		//Shift data back one
		for (volatile int i=0; i<9; i++){
     526:	1c 82       	std	Y+4, r1	; 0x04
     528:	1b 82       	std	Y+3, r1	; 0x03
     52a:	20 c0       	rjmp	.+64     	; 0x56c <_ZN8odometer17addSpeedDataPointEj+0xca>
			dataPoints[i]=dataPoints[i+1];	//shift down by one
     52c:	8b 81       	ldd	r24, Y+3	; 0x03
     52e:	9c 81       	ldd	r25, Y+4	; 0x04
     530:	2b 81       	ldd	r18, Y+3	; 0x03
     532:	3c 81       	ldd	r19, Y+4	; 0x04
     534:	2f 5f       	subi	r18, 0xFF	; 255
     536:	3f 4f       	sbci	r19, 0xFF	; 255
     538:	4d 81       	ldd	r20, Y+5	; 0x05
     53a:	5e 81       	ldd	r21, Y+6	; 0x06
     53c:	23 5f       	subi	r18, 0xF3	; 243
     53e:	3f 4f       	sbci	r19, 0xFF	; 255
     540:	22 0f       	add	r18, r18
     542:	33 1f       	adc	r19, r19
     544:	24 0f       	add	r18, r20
     546:	35 1f       	adc	r19, r21
     548:	f9 01       	movw	r30, r18
     54a:	20 81       	ld	r18, Z
     54c:	31 81       	ldd	r19, Z+1	; 0x01
     54e:	4d 81       	ldd	r20, Y+5	; 0x05
     550:	5e 81       	ldd	r21, Y+6	; 0x06
     552:	0d 96       	adiw	r24, 0x0d	; 13
     554:	88 0f       	add	r24, r24
     556:	99 1f       	adc	r25, r25
     558:	84 0f       	add	r24, r20
     55a:	95 1f       	adc	r25, r21
     55c:	fc 01       	movw	r30, r24
     55e:	31 83       	std	Z+1, r19	; 0x01
     560:	20 83       	st	Z, r18
		firstRun=fFalse;				//reset flags
		noSpeed=fFalse;
	//Normal data point. shift back and add new one.
	} else {
		//Shift data back one
		for (volatile int i=0; i<9; i++){
     562:	8b 81       	ldd	r24, Y+3	; 0x03
     564:	9c 81       	ldd	r25, Y+4	; 0x04
     566:	01 96       	adiw	r24, 0x01	; 1
     568:	9c 83       	std	Y+4, r25	; 0x04
     56a:	8b 83       	std	Y+3, r24	; 0x03
     56c:	8b 81       	ldd	r24, Y+3	; 0x03
     56e:	9c 81       	ldd	r25, Y+4	; 0x04
     570:	21 e0       	ldi	r18, 0x01	; 1
     572:	89 30       	cpi	r24, 0x09	; 9
     574:	91 05       	cpc	r25, r1
     576:	0c f0       	brlt	.+2      	; 0x57a <_ZN8odometer17addSpeedDataPointEj+0xd8>
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	22 23       	and	r18, r18
     57c:	b9 f6       	brne	.-82     	; 0x52c <_ZN8odometer17addSpeedDataPointEj+0x8a>
			dataPoints[i]=dataPoints[i+1];	//shift down by one
		}
		dataPoints[9]=newDataPoint;		//add new data point
     57e:	8d 81       	ldd	r24, Y+5	; 0x05
     580:	9e 81       	ldd	r25, Y+6	; 0x06
     582:	2f 81       	ldd	r18, Y+7	; 0x07
     584:	38 85       	ldd	r19, Y+8	; 0x08
     586:	fc 01       	movw	r30, r24
     588:	35 a7       	lds	r19, 0x75
     58a:	24 a7       	lds	r18, 0x74
	}
	speedPoints++;					//increment speed points
     58c:	8d 81       	ldd	r24, Y+5	; 0x05
     58e:	9e 81       	ldd	r25, Y+6	; 0x06
     590:	fc 01       	movw	r30, r24
     592:	86 a5       	lds	r24, 0x66
     594:	97 a5       	lds	r25, 0x67
     596:	9c 01       	movw	r18, r24
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	8d 81       	ldd	r24, Y+5	; 0x05
     59e:	9e 81       	ldd	r25, Y+6	; 0x06
     5a0:	fc 01       	movw	r30, r24
     5a2:	37 a7       	lds	r19, 0x77
     5a4:	26 a7       	lds	r18, 0x76
	distance+=wheelSize;			//increment distance.
     5a6:	8d 81       	ldd	r24, Y+5	; 0x05
     5a8:	9e 81       	ldd	r25, Y+6	; 0x06
     5aa:	fc 01       	movw	r30, r24
     5ac:	84 81       	ldd	r24, Z+4	; 0x04
     5ae:	95 81       	ldd	r25, Z+5	; 0x05
     5b0:	a6 81       	ldd	r26, Z+6	; 0x06
     5b2:	b7 81       	ldd	r27, Z+7	; 0x07
     5b4:	2d 81       	ldd	r18, Y+5	; 0x05
     5b6:	3e 81       	ldd	r19, Y+6	; 0x06
     5b8:	f9 01       	movw	r30, r18
     5ba:	24 85       	ldd	r18, Z+12	; 0x0c
     5bc:	35 85       	ldd	r19, Z+13	; 0x0d
     5be:	46 85       	ldd	r20, Z+14	; 0x0e
     5c0:	57 85       	ldd	r21, Z+15	; 0x0f
     5c2:	bc 01       	movw	r22, r24
     5c4:	cd 01       	movw	r24, r26
     5c6:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <__addsf3>
     5ca:	dc 01       	movw	r26, r24
     5cc:	cb 01       	movw	r24, r22
     5ce:	2d 81       	ldd	r18, Y+5	; 0x05
     5d0:	3e 81       	ldd	r19, Y+6	; 0x06
     5d2:	f9 01       	movw	r30, r18
     5d4:	84 83       	std	Z+4, r24	; 0x04
     5d6:	95 83       	std	Z+5, r25	; 0x05
     5d8:	a6 83       	std	Z+6, r26	; 0x06
     5da:	b7 83       	std	Z+7, r27	; 0x07

	//With new point we need to update all the statistics.
	updateSpeeds();
     5dc:	8d 81       	ldd	r24, Y+5	; 0x05
     5de:	9e 81       	ldd	r25, Y+6	; 0x06
     5e0:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <_ZN8odometer12updateSpeedsEv>
}
     5e4:	28 96       	adiw	r28, 0x08	; 8
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	f8 94       	cli
     5ea:	de bf       	out	0x3e, r29	; 62
     5ec:	0f be       	out	0x3f, r0	; 63
     5ee:	cd bf       	out	0x3d, r28	; 61
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	08 95       	ret

000005f6 <_ZN8odometer16resetSpeedPointsEv>:

//The speed went to zero. Need to set flag for startup condition on new speed point, set currentSpeed to 0 so that if we are updating screen
//it won't display old speed, but 0. Reset all speed points.
void odometer::resetSpeedPoints(){
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	00 d0       	rcall	.+0      	; 0x5fc <_ZN8odometer16resetSpeedPointsEv+0x6>
     5fc:	00 d0       	rcall	.+0      	; 0x5fe <_ZN8odometer16resetSpeedPointsEv+0x8>
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
     602:	9c 83       	std	Y+4, r25	; 0x04
     604:	8b 83       	std	Y+3, r24	; 0x03
	noSpeed=fTrue;
     606:	8b 81       	ldd	r24, Y+3	; 0x03
     608:	9c 81       	ldd	r25, Y+4	; 0x04
     60a:	21 e0       	ldi	r18, 0x01	; 1
     60c:	fc 01       	movw	r30, r24
     60e:	21 ab       	sts	0x51, r18
	currentSpeed=0;
     610:	2b 81       	ldd	r18, Y+3	; 0x03
     612:	3c 81       	ldd	r19, Y+4	; 0x04
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	dc 01       	movw	r26, r24
     61a:	f9 01       	movw	r30, r18
     61c:	80 87       	std	Z+8, r24	; 0x08
     61e:	91 87       	std	Z+9, r25	; 0x09
     620:	a2 87       	std	Z+10, r26	; 0x0a
     622:	b3 87       	std	Z+11, r27	; 0x0b
	for (volatile int i=0; i<10; i++){
     624:	1a 82       	std	Y+2, r1	; 0x02
     626:	19 82       	std	Y+1, r1	; 0x01
     628:	11 c0       	rjmp	.+34     	; 0x64c <_ZN8odometer16resetSpeedPointsEv+0x56>
		dataPoints[i]=0;
     62a:	89 81       	ldd	r24, Y+1	; 0x01
     62c:	9a 81       	ldd	r25, Y+2	; 0x02
     62e:	2b 81       	ldd	r18, Y+3	; 0x03
     630:	3c 81       	ldd	r19, Y+4	; 0x04
     632:	0d 96       	adiw	r24, 0x0d	; 13
     634:	88 0f       	add	r24, r24
     636:	99 1f       	adc	r25, r25
     638:	82 0f       	add	r24, r18
     63a:	93 1f       	adc	r25, r19
     63c:	fc 01       	movw	r30, r24
     63e:	11 82       	std	Z+1, r1	; 0x01
     640:	10 82       	st	Z, r1
//The speed went to zero. Need to set flag for startup condition on new speed point, set currentSpeed to 0 so that if we are updating screen
//it won't display old speed, but 0. Reset all speed points.
void odometer::resetSpeedPoints(){
	noSpeed=fTrue;
	currentSpeed=0;
	for (volatile int i=0; i<10; i++){
     642:	89 81       	ldd	r24, Y+1	; 0x01
     644:	9a 81       	ldd	r25, Y+2	; 0x02
     646:	01 96       	adiw	r24, 0x01	; 1
     648:	9a 83       	std	Y+2, r25	; 0x02
     64a:	89 83       	std	Y+1, r24	; 0x01
     64c:	89 81       	ldd	r24, Y+1	; 0x01
     64e:	9a 81       	ldd	r25, Y+2	; 0x02
     650:	21 e0       	ldi	r18, 0x01	; 1
     652:	8a 30       	cpi	r24, 0x0A	; 10
     654:	91 05       	cpc	r25, r1
     656:	0c f0       	brlt	.+2      	; 0x65a <_ZN8odometer16resetSpeedPointsEv+0x64>
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	22 23       	and	r18, r18
     65c:	31 f7       	brne	.-52     	; 0x62a <_ZN8odometer16resetSpeedPointsEv+0x34>
		dataPoints[i]=0;
	}
}
     65e:	0f 90       	pop	r0
     660:	0f 90       	pop	r0
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	08 95       	ret

0000066c <_ZN8odometer12setWheelSizeEd>:

//Updating wheel size. Don't reset anything, but initialize first run to eliminate old speeds. 
void odometer::setWheelSize(double wheelSize){
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	00 d0       	rcall	.+0      	; 0x672 <_ZN8odometer12setWheelSizeEd+0x6>
     672:	00 d0       	rcall	.+0      	; 0x674 <_ZN8odometer12setWheelSizeEd+0x8>
     674:	00 d0       	rcall	.+0      	; 0x676 <_ZN8odometer12setWheelSizeEd+0xa>
     676:	cd b7       	in	r28, 0x3d	; 61
     678:	de b7       	in	r29, 0x3e	; 62
     67a:	9a 83       	std	Y+2, r25	; 0x02
     67c:	89 83       	std	Y+1, r24	; 0x01
     67e:	4b 83       	std	Y+3, r20	; 0x03
     680:	5c 83       	std	Y+4, r21	; 0x04
     682:	6d 83       	std	Y+5, r22	; 0x05
     684:	7e 83       	std	Y+6, r23	; 0x06
	firstRun=fTrue;
     686:	89 81       	ldd	r24, Y+1	; 0x01
     688:	9a 81       	ldd	r25, Y+2	; 0x02
     68a:	21 e0       	ldi	r18, 0x01	; 1
     68c:	fc 01       	movw	r30, r24
     68e:	20 ab       	sts	0x50, r18
	this->wheelSize=wheelSize;
     690:	29 81       	ldd	r18, Y+1	; 0x01
     692:	3a 81       	ldd	r19, Y+2	; 0x02
     694:	8b 81       	ldd	r24, Y+3	; 0x03
     696:	9c 81       	ldd	r25, Y+4	; 0x04
     698:	ad 81       	ldd	r26, Y+5	; 0x05
     69a:	be 81       	ldd	r27, Y+6	; 0x06
     69c:	f9 01       	movw	r30, r18
     69e:	84 87       	std	Z+12, r24	; 0x0c
     6a0:	95 87       	std	Z+13, r25	; 0x0d
     6a2:	a6 87       	std	Z+14, r26	; 0x0e
     6a4:	b7 87       	std	Z+15, r27	; 0x0f
}
     6a6:	26 96       	adiw	r28, 0x06	; 6
     6a8:	0f b6       	in	r0, 0x3f	; 63
     6aa:	f8 94       	cli
     6ac:	de bf       	out	0x3e, r29	; 62
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	cd bf       	out	0x3d, r28	; 61
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	08 95       	ret

000006b8 <_ZN8odometer12updateSpeedsEv>:

//Just got another data point, update all the statistics
void odometer::updateSpeeds(){
     6b8:	af 92       	push	r10
     6ba:	bf 92       	push	r11
     6bc:	cf 92       	push	r12
     6be:	df 92       	push	r13
     6c0:	ef 92       	push	r14
     6c2:	ff 92       	push	r15
     6c4:	0f 93       	push	r16
     6c6:	1f 93       	push	r17
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	00 d0       	rcall	.+0      	; 0x6ce <_ZN8odometer12updateSpeedsEv+0x16>
     6ce:	00 d0       	rcall	.+0      	; 0x6d0 <_ZN8odometer12updateSpeedsEv+0x18>
     6d0:	00 d0       	rcall	.+0      	; 0x6d2 <_ZN8odometer12updateSpeedsEv+0x1a>
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
     6d6:	9e 83       	std	Y+6, r25	; 0x06
     6d8:	8d 83       	std	Y+5, r24	; 0x05

	//Update current speed
	unsigned int sum;
	for (volatile int i=0; i<10; i++){
     6da:	1c 82       	std	Y+4, r1	; 0x04
     6dc:	1b 82       	std	Y+3, r1	; 0x03
     6de:	17 c0       	rjmp	.+46     	; 0x70e <_ZN8odometer12updateSpeedsEv+0x56>
		sum += dataPoints[i];
     6e0:	8b 81       	ldd	r24, Y+3	; 0x03
     6e2:	9c 81       	ldd	r25, Y+4	; 0x04
     6e4:	2d 81       	ldd	r18, Y+5	; 0x05
     6e6:	3e 81       	ldd	r19, Y+6	; 0x06
     6e8:	0d 96       	adiw	r24, 0x0d	; 13
     6ea:	88 0f       	add	r24, r24
     6ec:	99 1f       	adc	r25, r25
     6ee:	82 0f       	add	r24, r18
     6f0:	93 1f       	adc	r25, r19
     6f2:	fc 01       	movw	r30, r24
     6f4:	80 81       	ld	r24, Z
     6f6:	91 81       	ldd	r25, Z+1	; 0x01
     6f8:	29 81       	ldd	r18, Y+1	; 0x01
     6fa:	3a 81       	ldd	r19, Y+2	; 0x02
     6fc:	82 0f       	add	r24, r18
     6fe:	93 1f       	adc	r25, r19
     700:	9a 83       	std	Y+2, r25	; 0x02
     702:	89 83       	std	Y+1, r24	; 0x01
//Just got another data point, update all the statistics
void odometer::updateSpeeds(){

	//Update current speed
	unsigned int sum;
	for (volatile int i=0; i<10; i++){
     704:	8b 81       	ldd	r24, Y+3	; 0x03
     706:	9c 81       	ldd	r25, Y+4	; 0x04
     708:	01 96       	adiw	r24, 0x01	; 1
     70a:	9c 83       	std	Y+4, r25	; 0x04
     70c:	8b 83       	std	Y+3, r24	; 0x03
     70e:	8b 81       	ldd	r24, Y+3	; 0x03
     710:	9c 81       	ldd	r25, Y+4	; 0x04
     712:	21 e0       	ldi	r18, 0x01	; 1
     714:	8a 30       	cpi	r24, 0x0A	; 10
     716:	91 05       	cpc	r25, r1
     718:	0c f0       	brlt	.+2      	; 0x71c <_ZN8odometer12updateSpeedsEv+0x64>
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	22 23       	and	r18, r18
     71e:	01 f7       	brne	.-64     	; 0x6e0 <_ZN8odometer12updateSpeedsEv+0x28>
		sum += dataPoints[i];
	}
	currentSpeed=10.0*SECONDS_IN_HOUR*wheelSize/(sum*TIMER1_CLOCK_sec);		//calculate and update currentSpeed.
     720:	8d 81       	ldd	r24, Y+5	; 0x05
     722:	9e 81       	ldd	r25, Y+6	; 0x06
     724:	fc 01       	movw	r30, r24
     726:	84 85       	ldd	r24, Z+12	; 0x0c
     728:	95 85       	ldd	r25, Z+13	; 0x0d
     72a:	a6 85       	ldd	r26, Z+14	; 0x0e
     72c:	b7 85       	ldd	r27, Z+15	; 0x0f
     72e:	bc 01       	movw	r22, r24
     730:	cd 01       	movw	r24, r26
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	30 ea       	ldi	r19, 0xA0	; 160
     736:	4c e0       	ldi	r20, 0x0C	; 12
     738:	57 e4       	ldi	r21, 0x47	; 71
     73a:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__mulsf3>
     73e:	dc 01       	movw	r26, r24
     740:	cb 01       	movw	r24, r22
     742:	7c 01       	movw	r14, r24
     744:	8d 01       	movw	r16, r26
     746:	89 81       	ldd	r24, Y+1	; 0x01
     748:	9a 81       	ldd	r25, Y+2	; 0x02
     74a:	cc 01       	movw	r24, r24
     74c:	a0 e0       	ldi	r26, 0x00	; 0
     74e:	b0 e0       	ldi	r27, 0x00	; 0
     750:	bc 01       	movw	r22, r24
     752:	cd 01       	movw	r24, r26
     754:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__floatunsisf>
     758:	dc 01       	movw	r26, r24
     75a:	cb 01       	movw	r24, r22
     75c:	bc 01       	movw	r22, r24
     75e:	cd 01       	movw	r24, r26
     760:	2d eb       	ldi	r18, 0xBD	; 189
     762:	37 e3       	ldi	r19, 0x37	; 55
     764:	46 e0       	ldi	r20, 0x06	; 6
     766:	58 e3       	ldi	r21, 0x38	; 56
     768:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__mulsf3>
     76c:	dc 01       	movw	r26, r24
     76e:	cb 01       	movw	r24, r22
     770:	9c 01       	movw	r18, r24
     772:	ad 01       	movw	r20, r26
     774:	c8 01       	movw	r24, r16
     776:	b7 01       	movw	r22, r14
     778:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__divsf3>
     77c:	dc 01       	movw	r26, r24
     77e:	cb 01       	movw	r24, r22
     780:	2d 81       	ldd	r18, Y+5	; 0x05
     782:	3e 81       	ldd	r19, Y+6	; 0x06
     784:	f9 01       	movw	r30, r18
     786:	80 87       	std	Z+8, r24	; 0x08
     788:	91 87       	std	Z+9, r25	; 0x09
     78a:	a2 87       	std	Z+10, r26	; 0x0a
     78c:	b3 87       	std	Z+11, r27	; 0x0b
	
	//Update average speed
	__calculateSpeedWeight();
     78e:	8d 81       	ldd	r24, Y+5	; 0x05
     790:	9e 81       	ldd	r25, Y+6	; 0x06
     792:	fc 01       	movw	r30, r24
     794:	26 a5       	lds	r18, 0x66
     796:	37 a5       	lds	r19, 0x67
     798:	8d 81       	ldd	r24, Y+5	; 0x05
     79a:	9e 81       	ldd	r25, Y+6	; 0x06
     79c:	fc 01       	movw	r30, r24
     79e:	46 a5       	lds	r20, 0x66
     7a0:	57 a5       	lds	r21, 0x67
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	ba 01       	movw	r22, r20
     7a8:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <__udivmodhi4>
     7ac:	ab 01       	movw	r20, r22
     7ae:	ca 01       	movw	r24, r20
     7b0:	a9 01       	movw	r20, r18
     7b2:	48 1b       	sub	r20, r24
     7b4:	59 0b       	sbc	r21, r25
     7b6:	ca 01       	movw	r24, r20
     7b8:	cc 01       	movw	r24, r24
     7ba:	a0 e0       	ldi	r26, 0x00	; 0
     7bc:	b0 e0       	ldi	r27, 0x00	; 0
     7be:	bc 01       	movw	r22, r24
     7c0:	cd 01       	movw	r24, r26
     7c2:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__floatunsisf>
     7c6:	dc 01       	movw	r26, r24
     7c8:	cb 01       	movw	r24, r22
     7ca:	2d 81       	ldd	r18, Y+5	; 0x05
     7cc:	3e 81       	ldd	r19, Y+6	; 0x06
     7ce:	f9 01       	movw	r30, r18
     7d0:	80 8b       	std	Z+16, r24	; 0x10
     7d2:	91 8b       	std	Z+17, r25	; 0x11
     7d4:	a2 8b       	std	Z+18, r26	; 0x12
     7d6:	b3 8b       	std	Z+19, r27	; 0x13
	aveSpeed=aveSpeed*speedWeight + currentSpeed/speedPoints;
     7d8:	8d 81       	ldd	r24, Y+5	; 0x05
     7da:	9e 81       	ldd	r25, Y+6	; 0x06
     7dc:	fc 01       	movw	r30, r24
     7de:	80 81       	ld	r24, Z
     7e0:	91 81       	ldd	r25, Z+1	; 0x01
     7e2:	a2 81       	ldd	r26, Z+2	; 0x02
     7e4:	b3 81       	ldd	r27, Z+3	; 0x03
     7e6:	2d 81       	ldd	r18, Y+5	; 0x05
     7e8:	3e 81       	ldd	r19, Y+6	; 0x06
     7ea:	f9 01       	movw	r30, r18
     7ec:	20 89       	ldd	r18, Z+16	; 0x10
     7ee:	31 89       	ldd	r19, Z+17	; 0x11
     7f0:	42 89       	ldd	r20, Z+18	; 0x12
     7f2:	53 89       	ldd	r21, Z+19	; 0x13
     7f4:	bc 01       	movw	r22, r24
     7f6:	cd 01       	movw	r24, r26
     7f8:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__mulsf3>
     7fc:	dc 01       	movw	r26, r24
     7fe:	cb 01       	movw	r24, r22
     800:	7c 01       	movw	r14, r24
     802:	8d 01       	movw	r16, r26
     804:	8d 81       	ldd	r24, Y+5	; 0x05
     806:	9e 81       	ldd	r25, Y+6	; 0x06
     808:	fc 01       	movw	r30, r24
     80a:	a0 84       	ldd	r10, Z+8	; 0x08
     80c:	b1 84       	ldd	r11, Z+9	; 0x09
     80e:	c2 84       	ldd	r12, Z+10	; 0x0a
     810:	d3 84       	ldd	r13, Z+11	; 0x0b
     812:	8d 81       	ldd	r24, Y+5	; 0x05
     814:	9e 81       	ldd	r25, Y+6	; 0x06
     816:	fc 01       	movw	r30, r24
     818:	86 a5       	lds	r24, 0x66
     81a:	97 a5       	lds	r25, 0x67
     81c:	cc 01       	movw	r24, r24
     81e:	a0 e0       	ldi	r26, 0x00	; 0
     820:	b0 e0       	ldi	r27, 0x00	; 0
     822:	bc 01       	movw	r22, r24
     824:	cd 01       	movw	r24, r26
     826:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__floatunsisf>
     82a:	9b 01       	movw	r18, r22
     82c:	ac 01       	movw	r20, r24
     82e:	c6 01       	movw	r24, r12
     830:	b5 01       	movw	r22, r10
     832:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__divsf3>
     836:	dc 01       	movw	r26, r24
     838:	cb 01       	movw	r24, r22
     83a:	9c 01       	movw	r18, r24
     83c:	ad 01       	movw	r20, r26
     83e:	c8 01       	movw	r24, r16
     840:	b7 01       	movw	r22, r14
     842:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <__addsf3>
     846:	dc 01       	movw	r26, r24
     848:	cb 01       	movw	r24, r22
     84a:	2d 81       	ldd	r18, Y+5	; 0x05
     84c:	3e 81       	ldd	r19, Y+6	; 0x06
     84e:	f9 01       	movw	r30, r18
     850:	80 83       	st	Z, r24
     852:	91 83       	std	Z+1, r25	; 0x01
     854:	a2 83       	std	Z+2, r26	; 0x02
     856:	b3 83       	std	Z+3, r27	; 0x03
}
     858:	26 96       	adiw	r28, 0x06	; 6
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	f8 94       	cli
     85e:	de bf       	out	0x3e, r29	; 62
     860:	0f be       	out	0x3f, r0	; 63
     862:	cd bf       	out	0x3d, r28	; 61
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	1f 91       	pop	r17
     86a:	0f 91       	pop	r16
     86c:	ff 90       	pop	r15
     86e:	ef 90       	pop	r14
     870:	df 90       	pop	r13
     872:	cf 90       	pop	r12
     874:	bf 90       	pop	r11
     876:	af 90       	pop	r10
     878:	08 95       	ret

0000087a <_ZN8odometer15getCurrentSpeedEv>:

//Get the current speed
double odometer::getCurrentSpeed(){
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	00 d0       	rcall	.+0      	; 0x880 <_ZN8odometer15getCurrentSpeedEv+0x6>
     880:	cd b7       	in	r28, 0x3d	; 61
     882:	de b7       	in	r29, 0x3e	; 62
     884:	9a 83       	std	Y+2, r25	; 0x02
     886:	89 83       	std	Y+1, r24	; 0x01
	return currentSpeed;
     888:	89 81       	ldd	r24, Y+1	; 0x01
     88a:	9a 81       	ldd	r25, Y+2	; 0x02
     88c:	fc 01       	movw	r30, r24
     88e:	80 85       	ldd	r24, Z+8	; 0x08
     890:	91 85       	ldd	r25, Z+9	; 0x09
     892:	a2 85       	ldd	r26, Z+10	; 0x0a
     894:	b3 85       	ldd	r27, Z+11	; 0x0b
}
     896:	bc 01       	movw	r22, r24
     898:	cd 01       	movw	r24, r26
     89a:	0f 90       	pop	r0
     89c:	0f 90       	pop	r0
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret

000008a4 <_ZN8odometer15getAverageSpeedEv>:

//Get the average speed
double odometer::getAverageSpeed(){
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	00 d0       	rcall	.+0      	; 0x8aa <_ZN8odometer15getAverageSpeedEv+0x6>
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62
     8ae:	9a 83       	std	Y+2, r25	; 0x02
     8b0:	89 83       	std	Y+1, r24	; 0x01
	return aveSpeed;
     8b2:	89 81       	ldd	r24, Y+1	; 0x01
     8b4:	9a 81       	ldd	r25, Y+2	; 0x02
     8b6:	fc 01       	movw	r30, r24
     8b8:	80 81       	ld	r24, Z
     8ba:	91 81       	ldd	r25, Z+1	; 0x01
     8bc:	a2 81       	ldd	r26, Z+2	; 0x02
     8be:	b3 81       	ldd	r27, Z+3	; 0x03
}
     8c0:	bc 01       	movw	r22, r24
     8c2:	cd 01       	movw	r24, r26
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	08 95       	ret

000008ce <_ZN8odometer11getDistanceEv>:

//Get the distance travelled thus far in miles 
double odometer::getDistance(){
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	00 d0       	rcall	.+0      	; 0x8d4 <_ZN8odometer11getDistanceEv+0x6>
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
     8d8:	9a 83       	std	Y+2, r25	; 0x02
     8da:	89 83       	std	Y+1, r24	; 0x01
	return distance;
     8dc:	89 81       	ldd	r24, Y+1	; 0x01
     8de:	9a 81       	ldd	r25, Y+2	; 0x02
     8e0:	fc 01       	movw	r30, r24
     8e2:	84 81       	ldd	r24, Z+4	; 0x04
     8e4:	95 81       	ldd	r25, Z+5	; 0x05
     8e6:	a6 81       	ldd	r26, Z+6	; 0x06
     8e8:	b7 81       	ldd	r27, Z+7	; 0x07
}
     8ea:	bc 01       	movw	r22, r24
     8ec:	cd 01       	movw	r24, r26
     8ee:	0f 90       	pop	r0
     8f0:	0f 90       	pop	r0
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	08 95       	ret

000008f8 <_ZN8odometer12getWheelSizeEv>:

double odometer::getWheelSize(){
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	00 d0       	rcall	.+0      	; 0x8fe <_ZN8odometer12getWheelSizeEv+0x6>
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
     902:	9a 83       	std	Y+2, r25	; 0x02
     904:	89 83       	std	Y+1, r24	; 0x01
	return wheelSize;
     906:	89 81       	ldd	r24, Y+1	; 0x01
     908:	9a 81       	ldd	r25, Y+2	; 0x02
     90a:	fc 01       	movw	r30, r24
     90c:	84 85       	ldd	r24, Z+12	; 0x0c
     90e:	95 85       	ldd	r25, Z+13	; 0x0d
     910:	a6 85       	ldd	r26, Z+14	; 0x0e
     912:	b7 85       	ldd	r27, Z+15	; 0x0f
}
     914:	bc 01       	movw	r22, r24
     916:	cd 01       	movw	r24, r26
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	08 95       	ret

00000922 <_ZN8odometer14getSpeedPointsEv>:
	
unsigned int odometer::getSpeedPoints(){
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	00 d0       	rcall	.+0      	; 0x928 <_ZN8odometer14getSpeedPointsEv+0x6>
     928:	cd b7       	in	r28, 0x3d	; 61
     92a:	de b7       	in	r29, 0x3e	; 62
     92c:	9a 83       	std	Y+2, r25	; 0x02
     92e:	89 83       	std	Y+1, r24	; 0x01
	return speedPoints;
     930:	89 81       	ldd	r24, Y+1	; 0x01
     932:	9a 81       	ldd	r25, Y+2	; 0x02
     934:	fc 01       	movw	r30, r24
     936:	86 a5       	lds	r24, 0x66
     938:	97 a5       	lds	r25, 0x67
}
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	08 95       	ret

00000944 <_ZN8odometer12getTotalTimeEjj>:

unsigned int odometer::getTotalTime(unsigned int eDate, unsigned int eTime){
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	00 d0       	rcall	.+0      	; 0x94a <_ZN8odometer12getTotalTimeEjj+0x6>
     94a:	00 d0       	rcall	.+0      	; 0x94c <_ZN8odometer12getTotalTimeEjj+0x8>
     94c:	00 d0       	rcall	.+0      	; 0x94e <_ZN8odometer12getTotalTimeEjj+0xa>
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
     952:	9a 83       	std	Y+2, r25	; 0x02
     954:	89 83       	std	Y+1, r24	; 0x01
     956:	7c 83       	std	Y+4, r23	; 0x04
     958:	6b 83       	std	Y+3, r22	; 0x03
     95a:	5e 83       	std	Y+6, r21	; 0x06
     95c:	4d 83       	std	Y+5, r20	; 0x05
	//Compute time between sDate/Time and eDate/Time, then add time elapsed.
	return timeElapsed;
     95e:	89 81       	ldd	r24, Y+1	; 0x01
     960:	9a 81       	ldd	r25, Y+2	; 0x02
     962:	fc 01       	movw	r30, r24
     964:	80 8d       	ldd	r24, Z+24	; 0x18
     966:	91 8d       	ldd	r25, Z+25	; 0x19
}
     968:	26 96       	adiw	r28, 0x06	; 6
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	f8 94       	cli
     96e:	de bf       	out	0x3e, r29	; 62
     970:	0f be       	out	0x3f, r0	; 63
     972:	cd bf       	out	0x3d, r28	; 61
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	08 95       	ret

0000097a <_ZN12heartMonitorC1Ev>:
		double aveHR, currentHR, hrWeight;
		unsigned int numReadings;
		
};

heartMonitor::heartMonitor(){
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	00 d0       	rcall	.+0      	; 0x980 <_ZN12heartMonitorC1Ev+0x6>
     980:	cd b7       	in	r28, 0x3d	; 61
     982:	de b7       	in	r29, 0x3e	; 62
     984:	9a 83       	std	Y+2, r25	; 0x02
     986:	89 83       	std	Y+1, r24	; 0x01
	aveHR=0;
     988:	29 81       	ldd	r18, Y+1	; 0x01
     98a:	3a 81       	ldd	r19, Y+2	; 0x02
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	dc 01       	movw	r26, r24
     992:	f9 01       	movw	r30, r18
     994:	80 83       	st	Z, r24
     996:	91 83       	std	Z+1, r25	; 0x01
     998:	a2 83       	std	Z+2, r26	; 0x02
     99a:	b3 83       	std	Z+3, r27	; 0x03
	numReadings=0;
     99c:	89 81       	ldd	r24, Y+1	; 0x01
     99e:	9a 81       	ldd	r25, Y+2	; 0x02
     9a0:	fc 01       	movw	r30, r24
     9a2:	15 86       	std	Z+13, r1	; 0x0d
     9a4:	14 86       	std	Z+12, r1	; 0x0c
	__calculateHRWeight();
     9a6:	89 81       	ldd	r24, Y+1	; 0x01
     9a8:	9a 81       	ldd	r25, Y+2	; 0x02
     9aa:	fc 01       	movw	r30, r24
     9ac:	84 85       	ldd	r24, Z+12	; 0x0c
     9ae:	95 85       	ldd	r25, Z+13	; 0x0d
     9b0:	01 97       	sbiw	r24, 0x01	; 1
     9b2:	29 81       	ldd	r18, Y+1	; 0x01
     9b4:	3a 81       	ldd	r19, Y+2	; 0x02
     9b6:	f9 01       	movw	r30, r18
     9b8:	24 85       	ldd	r18, Z+12	; 0x0c
     9ba:	35 85       	ldd	r19, Z+13	; 0x0d
     9bc:	b9 01       	movw	r22, r18
     9be:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <__udivmodhi4>
     9c2:	9b 01       	movw	r18, r22
     9c4:	c9 01       	movw	r24, r18
     9c6:	cc 01       	movw	r24, r24
     9c8:	a0 e0       	ldi	r26, 0x00	; 0
     9ca:	b0 e0       	ldi	r27, 0x00	; 0
     9cc:	bc 01       	movw	r22, r24
     9ce:	cd 01       	movw	r24, r26
     9d0:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__floatunsisf>
     9d4:	dc 01       	movw	r26, r24
     9d6:	cb 01       	movw	r24, r22
     9d8:	29 81       	ldd	r18, Y+1	; 0x01
     9da:	3a 81       	ldd	r19, Y+2	; 0x02
     9dc:	f9 01       	movw	r30, r18
     9de:	80 87       	std	Z+8, r24	; 0x08
     9e0:	91 87       	std	Z+9, r25	; 0x09
     9e2:	a2 87       	std	Z+10, r26	; 0x0a
     9e4:	b3 87       	std	Z+11, r27	; 0x0b
	resetMonitor();
     9e6:	89 81       	ldd	r24, Y+1	; 0x01
     9e8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ea:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <_ZN12heartMonitor12resetMonitorEv>
}
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	08 95       	ret

000009f8 <_ZN12heartMonitor12resetMonitorEv>:

//Resets everythin except number of readings and aveHR
void heartMonitor::resetMonitor(){
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	00 d0       	rcall	.+0      	; 0x9fe <_ZN12heartMonitor12resetMonitorEv+0x6>
     9fe:	cd b7       	in	r28, 0x3d	; 61
     a00:	de b7       	in	r29, 0x3e	; 62
     a02:	9a 83       	std	Y+2, r25	; 0x02
     a04:	89 83       	std	Y+1, r24	; 0x01
	currentHR=0;
     a06:	29 81       	ldd	r18, Y+1	; 0x01
     a08:	3a 81       	ldd	r19, Y+2	; 0x02
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	dc 01       	movw	r26, r24
     a10:	f9 01       	movw	r30, r18
     a12:	84 83       	std	Z+4, r24	; 0x04
     a14:	95 83       	std	Z+5, r25	; 0x05
     a16:	a6 83       	std	Z+6, r26	; 0x06
     a18:	b7 83       	std	Z+7, r27	; 0x07
}
     a1a:	0f 90       	pop	r0
     a1c:	0f 90       	pop	r0
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	08 95       	ret

00000a24 <_ZN12heartMonitor15setHeartMonitorEdj>:

void heartMonitor::setHeartMonitor(double aveHR, unsigned int numReadings){
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
     a2c:	28 97       	sbiw	r28, 0x08	; 8
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	9a 83       	std	Y+2, r25	; 0x02
     a3a:	89 83       	std	Y+1, r24	; 0x01
     a3c:	4b 83       	std	Y+3, r20	; 0x03
     a3e:	5c 83       	std	Y+4, r21	; 0x04
     a40:	6d 83       	std	Y+5, r22	; 0x05
     a42:	7e 83       	std	Y+6, r23	; 0x06
     a44:	38 87       	std	Y+8, r19	; 0x08
     a46:	2f 83       	std	Y+7, r18	; 0x07
	this->aveHR=aveHR;
     a48:	29 81       	ldd	r18, Y+1	; 0x01
     a4a:	3a 81       	ldd	r19, Y+2	; 0x02
     a4c:	8b 81       	ldd	r24, Y+3	; 0x03
     a4e:	9c 81       	ldd	r25, Y+4	; 0x04
     a50:	ad 81       	ldd	r26, Y+5	; 0x05
     a52:	be 81       	ldd	r27, Y+6	; 0x06
     a54:	f9 01       	movw	r30, r18
     a56:	80 83       	st	Z, r24
     a58:	91 83       	std	Z+1, r25	; 0x01
     a5a:	a2 83       	std	Z+2, r26	; 0x02
     a5c:	b3 83       	std	Z+3, r27	; 0x03
	this->numReadings=numReadings;
     a5e:	89 81       	ldd	r24, Y+1	; 0x01
     a60:	9a 81       	ldd	r25, Y+2	; 0x02
     a62:	2f 81       	ldd	r18, Y+7	; 0x07
     a64:	38 85       	ldd	r19, Y+8	; 0x08
     a66:	fc 01       	movw	r30, r24
     a68:	35 87       	std	Z+13, r19	; 0x0d
     a6a:	24 87       	std	Z+12, r18	; 0x0c
	resetMonitor();
     a6c:	89 81       	ldd	r24, Y+1	; 0x01
     a6e:	9a 81       	ldd	r25, Y+2	; 0x02
     a70:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <_ZN12heartMonitor12resetMonitorEv>
}
     a74:	28 96       	adiw	r28, 0x08	; 8
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	f8 94       	cli
     a7a:	de bf       	out	0x3e, r29	; 62
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	cd bf       	out	0x3d, r28	; 61
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	08 95       	ret

00000a86 <_ZN12heartMonitor8setAveHREd>:

void heartMonitor::setAveHR(double aveHR){
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	00 d0       	rcall	.+0      	; 0xa8c <_ZN12heartMonitor8setAveHREd+0x6>
     a8c:	00 d0       	rcall	.+0      	; 0xa8e <_ZN12heartMonitor8setAveHREd+0x8>
     a8e:	00 d0       	rcall	.+0      	; 0xa90 <_ZN12heartMonitor8setAveHREd+0xa>
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
     a94:	9a 83       	std	Y+2, r25	; 0x02
     a96:	89 83       	std	Y+1, r24	; 0x01
     a98:	4b 83       	std	Y+3, r20	; 0x03
     a9a:	5c 83       	std	Y+4, r21	; 0x04
     a9c:	6d 83       	std	Y+5, r22	; 0x05
     a9e:	7e 83       	std	Y+6, r23	; 0x06
	this->aveHR=aveHR;
     aa0:	29 81       	ldd	r18, Y+1	; 0x01
     aa2:	3a 81       	ldd	r19, Y+2	; 0x02
     aa4:	8b 81       	ldd	r24, Y+3	; 0x03
     aa6:	9c 81       	ldd	r25, Y+4	; 0x04
     aa8:	ad 81       	ldd	r26, Y+5	; 0x05
     aaa:	be 81       	ldd	r27, Y+6	; 0x06
     aac:	f9 01       	movw	r30, r18
     aae:	80 83       	st	Z, r24
     ab0:	91 83       	std	Z+1, r25	; 0x01
     ab2:	a2 83       	std	Z+2, r26	; 0x02
     ab4:	b3 83       	std	Z+3, r27	; 0x03
}
     ab6:	26 96       	adiw	r28, 0x06	; 6
     ab8:	0f b6       	in	r0, 0x3f	; 63
     aba:	f8 94       	cli
     abc:	de bf       	out	0x3e, r29	; 62
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	cd bf       	out	0x3d, r28	; 61
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	08 95       	ret

00000ac8 <_ZN12heartMonitor14setNumReadingsEj>:

void heartMonitor::setNumReadings(unsigned int numReadings){
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	00 d0       	rcall	.+0      	; 0xace <_ZN12heartMonitor14setNumReadingsEj+0x6>
     ace:	00 d0       	rcall	.+0      	; 0xad0 <_ZN12heartMonitor14setNumReadingsEj+0x8>
     ad0:	cd b7       	in	r28, 0x3d	; 61
     ad2:	de b7       	in	r29, 0x3e	; 62
     ad4:	9a 83       	std	Y+2, r25	; 0x02
     ad6:	89 83       	std	Y+1, r24	; 0x01
     ad8:	7c 83       	std	Y+4, r23	; 0x04
     ada:	6b 83       	std	Y+3, r22	; 0x03
	this->numReadings=numReadings;
     adc:	89 81       	ldd	r24, Y+1	; 0x01
     ade:	9a 81       	ldd	r25, Y+2	; 0x02
     ae0:	2b 81       	ldd	r18, Y+3	; 0x03
     ae2:	3c 81       	ldd	r19, Y+4	; 0x04
     ae4:	fc 01       	movw	r30, r24
     ae6:	35 87       	std	Z+13, r19	; 0x0d
     ae8:	24 87       	std	Z+12, r18	; 0x0c
}
     aea:	0f 90       	pop	r0
     aec:	0f 90       	pop	r0
     aee:	0f 90       	pop	r0
     af0:	0f 90       	pop	r0
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	08 95       	ret

00000af8 <_ZN12heartMonitor12getCurrentHREv>:

double heartMonitor::getCurrentHR(){
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	00 d0       	rcall	.+0      	; 0xafe <_ZN12heartMonitor12getCurrentHREv+0x6>
     afe:	cd b7       	in	r28, 0x3d	; 61
     b00:	de b7       	in	r29, 0x3e	; 62
     b02:	9a 83       	std	Y+2, r25	; 0x02
     b04:	89 83       	std	Y+1, r24	; 0x01
	return currentHR;
     b06:	89 81       	ldd	r24, Y+1	; 0x01
     b08:	9a 81       	ldd	r25, Y+2	; 0x02
     b0a:	fc 01       	movw	r30, r24
     b0c:	84 81       	ldd	r24, Z+4	; 0x04
     b0e:	95 81       	ldd	r25, Z+5	; 0x05
     b10:	a6 81       	ldd	r26, Z+6	; 0x06
     b12:	b7 81       	ldd	r27, Z+7	; 0x07
}
     b14:	bc 01       	movw	r22, r24
     b16:	cd 01       	movw	r24, r26
     b18:	0f 90       	pop	r0
     b1a:	0f 90       	pop	r0
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	08 95       	ret

00000b22 <_ZN12heartMonitor8getAveHREv>:

double heartMonitor::getAveHR(){
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
     b26:	00 d0       	rcall	.+0      	; 0xb28 <_ZN12heartMonitor8getAveHREv+0x6>
     b28:	cd b7       	in	r28, 0x3d	; 61
     b2a:	de b7       	in	r29, 0x3e	; 62
     b2c:	9a 83       	std	Y+2, r25	; 0x02
     b2e:	89 83       	std	Y+1, r24	; 0x01
	return aveHR;
     b30:	89 81       	ldd	r24, Y+1	; 0x01
     b32:	9a 81       	ldd	r25, Y+2	; 0x02
     b34:	fc 01       	movw	r30, r24
     b36:	80 81       	ld	r24, Z
     b38:	91 81       	ldd	r25, Z+1	; 0x01
     b3a:	a2 81       	ldd	r26, Z+2	; 0x02
     b3c:	b3 81       	ldd	r27, Z+3	; 0x03
}
     b3e:	bc 01       	movw	r22, r24
     b40:	cd 01       	movw	r24, r26
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	08 95       	ret

00000b4c <_ZN12heartMonitor14getNumReadingsEv>:

unsigned int heartMonitor::getNumReadings(){
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	00 d0       	rcall	.+0      	; 0xb52 <_ZN12heartMonitor14getNumReadingsEv+0x6>
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
     b56:	9a 83       	std	Y+2, r25	; 0x02
     b58:	89 83       	std	Y+1, r24	; 0x01
	return numReadings;
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	9a 81       	ldd	r25, Y+2	; 0x02
     b5e:	fc 01       	movw	r30, r24
     b60:	84 85       	ldd	r24, Z+12	; 0x0c
     b62:	95 85       	ldd	r25, Z+13	; 0x0d
}
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	08 95       	ret

00000b6e <_ZN12heartMonitor11calculateHREPji>:

void heartMonitor::calculateHR(unsigned int *samples, int size){
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	c6 54       	subi	r28, 0x46	; 70
     b78:	d0 40       	sbci	r29, 0x00	; 0
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	de bf       	out	0x3e, r29	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	cd bf       	out	0x3d, r28	; 61
     b84:	9e 01       	movw	r18, r28
     b86:	2f 5b       	subi	r18, 0xBF	; 191
     b88:	3f 4f       	sbci	r19, 0xFF	; 255
     b8a:	f9 01       	movw	r30, r18
     b8c:	91 83       	std	Z+1, r25	; 0x01
     b8e:	80 83       	st	Z, r24
     b90:	ce 01       	movw	r24, r28
     b92:	8d 5b       	subi	r24, 0xBD	; 189
     b94:	9f 4f       	sbci	r25, 0xFF	; 255
     b96:	fc 01       	movw	r30, r24
     b98:	71 83       	std	Z+1, r23	; 0x01
     b9a:	60 83       	st	Z, r22
     b9c:	ce 01       	movw	r24, r28
     b9e:	8b 5b       	subi	r24, 0xBB	; 187
     ba0:	9f 4f       	sbci	r25, 0xFF	; 255
     ba2:	fc 01       	movw	r30, r24
     ba4:	51 83       	std	Z+1, r21	; 0x01
     ba6:	40 83       	st	Z, r20
	//Search for max and min values in entire array.
	volatile WORD currentMax=0, currentMax2=0;
     ba8:	1c 8a       	std	Y+20, r1	; 0x14
     baa:	1b 8a       	std	Y+19, r1	; 0x13
     bac:	1e 8a       	std	Y+22, r1	; 0x16
     bae:	1d 8a       	std	Y+21, r1	; 0x15
	volatile BYTE placeOfAbsMax=0, placeOfAbsMax2=0;
     bb0:	1f 8a       	std	Y+23, r1	; 0x17
     bb2:	18 8e       	std	Y+24, r1	; 0x18
	
	for (int i=0; i< size; i+=3){
     bb4:	1a 82       	std	Y+2, r1	; 0x02
     bb6:	19 82       	std	Y+1, r1	; 0x01
     bb8:	26 c0       	rjmp	.+76     	; 0xc06 <_ZN12heartMonitor11calculateHREPji+0x98>
		char tempString[10];
		utoa(samples[i],tempString,10);
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	9a 81       	ldd	r25, Y+2	; 0x02
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	9e 01       	movw	r18, r28
     bc4:	2d 5b       	subi	r18, 0xBD	; 189
     bc6:	3f 4f       	sbci	r19, 0xFF	; 255
     bc8:	f9 01       	movw	r30, r18
     bca:	20 81       	ld	r18, Z
     bcc:	31 81       	ldd	r19, Z+1	; 0x01
     bce:	82 0f       	add	r24, r18
     bd0:	93 1f       	adc	r25, r19
     bd2:	fc 01       	movw	r30, r24
     bd4:	80 81       	ld	r24, Z
     bd6:	91 81       	ldd	r25, Z+1	; 0x01
     bd8:	9e 01       	movw	r18, r28
     bda:	24 5d       	subi	r18, 0xD4	; 212
     bdc:	3f 4f       	sbci	r19, 0xFF	; 255
     bde:	b9 01       	movw	r22, r18
     be0:	4a e0       	ldi	r20, 0x0A	; 10
     be2:	50 e0       	ldi	r21, 0x00	; 0
     be4:	0e 94 76 0f 	call	0x1eec	; 0x1eec <utoa>
		tempString[9]='\0';
     be8:	1d aa       	sts	0x9d, r17
		tempString[8]='-';
     bea:	8d e2       	ldi	r24, 0x2D	; 45
     bec:	8c ab       	sts	0x5c, r24
		PutUart0Ch('-');
     bee:	8d e2       	ldi	r24, 0x2D	; 45
     bf0:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <_Z10PutUart0Chc>
		Print0(tempString);
     bf4:	ce 01       	movw	r24, r28
     bf6:	8c 96       	adiw	r24, 0x2c	; 44
     bf8:	0e 94 17 0a 	call	0x142e	; 0x142e <_Z6Print0Pc>
void heartMonitor::calculateHR(unsigned int *samples, int size){
	//Search for max and min values in entire array.
	volatile WORD currentMax=0, currentMax2=0;
	volatile BYTE placeOfAbsMax=0, placeOfAbsMax2=0;
	
	for (int i=0; i< size; i+=3){
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	9a 81       	ldd	r25, Y+2	; 0x02
     c00:	03 96       	adiw	r24, 0x03	; 3
     c02:	9a 83       	std	Y+2, r25	; 0x02
     c04:	89 83       	std	Y+1, r24	; 0x01
     c06:	ce 01       	movw	r24, r28
     c08:	8b 5b       	subi	r24, 0xBB	; 187
     c0a:	9f 4f       	sbci	r25, 0xFF	; 255
     c0c:	41 e0       	ldi	r20, 0x01	; 1
     c0e:	29 81       	ldd	r18, Y+1	; 0x01
     c10:	3a 81       	ldd	r19, Y+2	; 0x02
     c12:	fc 01       	movw	r30, r24
     c14:	80 81       	ld	r24, Z
     c16:	91 81       	ldd	r25, Z+1	; 0x01
     c18:	28 17       	cp	r18, r24
     c1a:	39 07       	cpc	r19, r25
     c1c:	0c f0       	brlt	.+2      	; 0xc20 <_ZN12heartMonitor11calculateHREPji+0xb2>
     c1e:	40 e0       	ldi	r20, 0x00	; 0
     c20:	44 23       	and	r20, r20
     c22:	59 f6       	brne	.-106    	; 0xbba <_ZN12heartMonitor11calculateHREPji+0x4c>
		Print0(tempString);
	}	
	
	
	//Find the absolute maximum in the data
	for (int i=0; i< size/2; i++){
     c24:	1c 82       	std	Y+4, r1	; 0x04
     c26:	1b 82       	std	Y+3, r1	; 0x03
     c28:	84 c0       	rjmp	.+264    	; 0xd32 <_ZN12heartMonitor11calculateHREPji+0x1c4>
		if (samples[i]>currentMax){
     c2a:	8b 81       	ldd	r24, Y+3	; 0x03
     c2c:	9c 81       	ldd	r25, Y+4	; 0x04
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	9e 01       	movw	r18, r28
     c34:	2d 5b       	subi	r18, 0xBD	; 189
     c36:	3f 4f       	sbci	r19, 0xFF	; 255
     c38:	f9 01       	movw	r30, r18
     c3a:	20 81       	ld	r18, Z
     c3c:	31 81       	ldd	r19, Z+1	; 0x01
     c3e:	82 0f       	add	r24, r18
     c40:	93 1f       	adc	r25, r19
     c42:	fc 01       	movw	r30, r24
     c44:	20 81       	ld	r18, Z
     c46:	31 81       	ldd	r19, Z+1	; 0x01
     c48:	8b 89       	ldd	r24, Y+19	; 0x13
     c4a:	9c 89       	ldd	r25, Y+20	; 0x14
     c4c:	41 e0       	ldi	r20, 0x01	; 1
     c4e:	82 17       	cp	r24, r18
     c50:	93 07       	cpc	r25, r19
     c52:	08 f0       	brcs	.+2      	; 0xc56 <_ZN12heartMonitor11calculateHREPji+0xe8>
     c54:	40 e0       	ldi	r20, 0x00	; 0
     c56:	44 23       	and	r20, r20
     c58:	99 f0       	breq	.+38     	; 0xc80 <_ZN12heartMonitor11calculateHREPji+0x112>
			currentMax=samples[i];
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	9c 81       	ldd	r25, Y+4	; 0x04
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	9e 01       	movw	r18, r28
     c64:	2d 5b       	subi	r18, 0xBD	; 189
     c66:	3f 4f       	sbci	r19, 0xFF	; 255
     c68:	f9 01       	movw	r30, r18
     c6a:	20 81       	ld	r18, Z
     c6c:	31 81       	ldd	r19, Z+1	; 0x01
     c6e:	82 0f       	add	r24, r18
     c70:	93 1f       	adc	r25, r19
     c72:	fc 01       	movw	r30, r24
     c74:	80 81       	ld	r24, Z
     c76:	91 81       	ldd	r25, Z+1	; 0x01
     c78:	9c 8b       	std	Y+20, r25	; 0x14
     c7a:	8b 8b       	std	Y+19, r24	; 0x13
			placeOfAbsMax=i;
     c7c:	8b 81       	ldd	r24, Y+3	; 0x03
     c7e:	8f 8b       	std	Y+23, r24	; 0x17
		}
		if (samples[i+ size/2] > currentMax2){
     c80:	ce 01       	movw	r24, r28
     c82:	8b 5b       	subi	r24, 0xBB	; 187
     c84:	9f 4f       	sbci	r25, 0xFF	; 255
     c86:	fc 01       	movw	r30, r24
     c88:	80 81       	ld	r24, Z
     c8a:	91 81       	ldd	r25, Z+1	; 0x01
     c8c:	99 23       	and	r25, r25
     c8e:	0c f4       	brge	.+2      	; 0xc92 <_ZN12heartMonitor11calculateHREPji+0x124>
     c90:	01 96       	adiw	r24, 0x01	; 1
     c92:	95 95       	asr	r25
     c94:	87 95       	ror	r24
     c96:	9c 01       	movw	r18, r24
     c98:	8b 81       	ldd	r24, Y+3	; 0x03
     c9a:	9c 81       	ldd	r25, Y+4	; 0x04
     c9c:	82 0f       	add	r24, r18
     c9e:	93 1f       	adc	r25, r19
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	9e 01       	movw	r18, r28
     ca6:	2d 5b       	subi	r18, 0xBD	; 189
     ca8:	3f 4f       	sbci	r19, 0xFF	; 255
     caa:	f9 01       	movw	r30, r18
     cac:	20 81       	ld	r18, Z
     cae:	31 81       	ldd	r19, Z+1	; 0x01
     cb0:	82 0f       	add	r24, r18
     cb2:	93 1f       	adc	r25, r19
     cb4:	fc 01       	movw	r30, r24
     cb6:	20 81       	ld	r18, Z
     cb8:	31 81       	ldd	r19, Z+1	; 0x01
     cba:	8d 89       	ldd	r24, Y+21	; 0x15
     cbc:	9e 89       	ldd	r25, Y+22	; 0x16
     cbe:	41 e0       	ldi	r20, 0x01	; 1
     cc0:	82 17       	cp	r24, r18
     cc2:	93 07       	cpc	r25, r19
     cc4:	08 f0       	brcs	.+2      	; 0xcc8 <_ZN12heartMonitor11calculateHREPji+0x15a>
     cc6:	40 e0       	ldi	r20, 0x00	; 0
     cc8:	44 23       	and	r20, r20
     cca:	71 f1       	breq	.+92     	; 0xd28 <_ZN12heartMonitor11calculateHREPji+0x1ba>
			currentMax2=samples[i+size/2];
     ccc:	ce 01       	movw	r24, r28
     cce:	8b 5b       	subi	r24, 0xBB	; 187
     cd0:	9f 4f       	sbci	r25, 0xFF	; 255
     cd2:	fc 01       	movw	r30, r24
     cd4:	80 81       	ld	r24, Z
     cd6:	91 81       	ldd	r25, Z+1	; 0x01
     cd8:	99 23       	and	r25, r25
     cda:	0c f4       	brge	.+2      	; 0xcde <_ZN12heartMonitor11calculateHREPji+0x170>
     cdc:	01 96       	adiw	r24, 0x01	; 1
     cde:	95 95       	asr	r25
     ce0:	87 95       	ror	r24
     ce2:	9c 01       	movw	r18, r24
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
     ce6:	9c 81       	ldd	r25, Y+4	; 0x04
     ce8:	82 0f       	add	r24, r18
     cea:	93 1f       	adc	r25, r19
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	9e 01       	movw	r18, r28
     cf2:	2d 5b       	subi	r18, 0xBD	; 189
     cf4:	3f 4f       	sbci	r19, 0xFF	; 255
     cf6:	f9 01       	movw	r30, r18
     cf8:	20 81       	ld	r18, Z
     cfa:	31 81       	ldd	r19, Z+1	; 0x01
     cfc:	82 0f       	add	r24, r18
     cfe:	93 1f       	adc	r25, r19
     d00:	fc 01       	movw	r30, r24
     d02:	80 81       	ld	r24, Z
     d04:	91 81       	ldd	r25, Z+1	; 0x01
     d06:	9e 8b       	std	Y+22, r25	; 0x16
     d08:	8d 8b       	std	Y+21, r24	; 0x15
			placeOfAbsMax2=i+size/2;
     d0a:	ce 01       	movw	r24, r28
     d0c:	8b 5b       	subi	r24, 0xBB	; 187
     d0e:	9f 4f       	sbci	r25, 0xFF	; 255
     d10:	fc 01       	movw	r30, r24
     d12:	80 81       	ld	r24, Z
     d14:	91 81       	ldd	r25, Z+1	; 0x01
     d16:	99 23       	and	r25, r25
     d18:	0c f4       	brge	.+2      	; 0xd1c <_ZN12heartMonitor11calculateHREPji+0x1ae>
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	95 95       	asr	r25
     d1e:	87 95       	ror	r24
     d20:	98 2f       	mov	r25, r24
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	89 0f       	add	r24, r25
     d26:	88 8f       	std	Y+24, r24	; 0x18
		Print0(tempString);
	}	
	
	
	//Find the absolute maximum in the data
	for (int i=0; i< size/2; i++){
     d28:	8b 81       	ldd	r24, Y+3	; 0x03
     d2a:	9c 81       	ldd	r25, Y+4	; 0x04
     d2c:	01 96       	adiw	r24, 0x01	; 1
     d2e:	9c 83       	std	Y+4, r25	; 0x04
     d30:	8b 83       	std	Y+3, r24	; 0x03
     d32:	ce 01       	movw	r24, r28
     d34:	8b 5b       	subi	r24, 0xBB	; 187
     d36:	9f 4f       	sbci	r25, 0xFF	; 255
     d38:	fc 01       	movw	r30, r24
     d3a:	80 81       	ld	r24, Z
     d3c:	91 81       	ldd	r25, Z+1	; 0x01
     d3e:	99 23       	and	r25, r25
     d40:	0c f4       	brge	.+2      	; 0xd44 <_ZN12heartMonitor11calculateHREPji+0x1d6>
     d42:	01 96       	adiw	r24, 0x01	; 1
     d44:	95 95       	asr	r25
     d46:	87 95       	ror	r24
     d48:	9c 01       	movw	r18, r24
     d4a:	41 e0       	ldi	r20, 0x01	; 1
     d4c:	8b 81       	ldd	r24, Y+3	; 0x03
     d4e:	9c 81       	ldd	r25, Y+4	; 0x04
     d50:	82 17       	cp	r24, r18
     d52:	93 07       	cpc	r25, r19
     d54:	0c f0       	brlt	.+2      	; 0xd58 <_ZN12heartMonitor11calculateHREPji+0x1ea>
     d56:	40 e0       	ldi	r20, 0x00	; 0
     d58:	44 23       	and	r20, r20
     d5a:	09 f0       	breq	.+2      	; 0xd5e <_ZN12heartMonitor11calculateHREPji+0x1f0>
     d5c:	66 cf       	rjmp	.-308    	; 0xc2a <_ZN12heartMonitor11calculateHREPji+0xbc>
		if (samples[i+ size/2] > currentMax2){
			currentMax2=samples[i+size/2];
			placeOfAbsMax2=i+size/2;
		}	
	}
	unsigned int peak= (currentMax >= currentMax2) ? currentMax: currentMax2;
     d5e:	2b 89       	ldd	r18, Y+19	; 0x13
     d60:	3c 89       	ldd	r19, Y+20	; 0x14
     d62:	8d 89       	ldd	r24, Y+21	; 0x15
     d64:	9e 89       	ldd	r25, Y+22	; 0x16
     d66:	28 17       	cp	r18, r24
     d68:	39 07       	cpc	r19, r25
     d6a:	18 f0       	brcs	.+6      	; 0xd72 <_ZN12heartMonitor11calculateHREPji+0x204>
     d6c:	8b 89       	ldd	r24, Y+19	; 0x13
     d6e:	9c 89       	ldd	r25, Y+20	; 0x14
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <_ZN12heartMonitor11calculateHREPji+0x208>
     d72:	8d 89       	ldd	r24, Y+21	; 0x15
     d74:	9e 89       	ldd	r25, Y+22	; 0x16
     d76:	9a 8b       	std	Y+18, r25	; 0x12
     d78:	89 8b       	std	Y+17, r24	; 0x11
	placeOfAbsMax= (currentMax >= currentMax2)? placeOfAbsMax : placeOfAbsMax2;
     d7a:	2b 89       	ldd	r18, Y+19	; 0x13
     d7c:	3c 89       	ldd	r19, Y+20	; 0x14
     d7e:	8d 89       	ldd	r24, Y+21	; 0x15
     d80:	9e 89       	ldd	r25, Y+22	; 0x16
     d82:	28 17       	cp	r18, r24
     d84:	39 07       	cpc	r19, r25
     d86:	10 f0       	brcs	.+4      	; 0xd8c <_ZN12heartMonitor11calculateHREPji+0x21e>
     d88:	8f 89       	ldd	r24, Y+23	; 0x17
     d8a:	01 c0       	rjmp	.+2      	; 0xd8e <_ZN12heartMonitor11calculateHREPji+0x220>
     d8c:	88 8d       	ldd	r24, Y+24	; 0x18
     d8e:	8f 8b       	std	Y+23, r24	; 0x17
	
	
	char absMaxString[10];
	utoa(peak,absMaxString,10);
     d90:	89 89       	ldd	r24, Y+17	; 0x11
     d92:	9a 89       	ldd	r25, Y+18	; 0x12
     d94:	9e 01       	movw	r18, r28
     d96:	27 5e       	subi	r18, 0xE7	; 231
     d98:	3f 4f       	sbci	r19, 0xFF	; 255
     d9a:	b9 01       	movw	r22, r18
     d9c:	4a e0       	ldi	r20, 0x0A	; 10
     d9e:	50 e0       	ldi	r21, 0x00	; 0
     da0:	0e 94 76 0f 	call	0x1eec	; 0x1eec <utoa>
	absMaxString[9]='\0';
     da4:	1a a2       	lds	r17, 0x9a
	absMaxString[9]='.';
     da6:	8e e2       	ldi	r24, 0x2E	; 46
     da8:	8a a3       	lds	r24, 0x5a
	Print0("abs max=");
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	0e 94 17 0a 	call	0x142e	; 0x142e <_Z6Print0Pc>
	Print0(absMaxString);
     db2:	ce 01       	movw	r24, r28
     db4:	49 96       	adiw	r24, 0x19	; 25
     db6:	0e 94 17 0a 	call	0x142e	; 0x142e <_Z6Print0Pc>
	
	
	//Find local maxima's
	volatile WORD currentHigh=0;
     dba:	1c a2       	lds	r17, 0x9c
     dbc:	1b a2       	lds	r17, 0x9b
	volatile int currentHighPlace=0;
     dbe:	1e a2       	lds	r17, 0x9e
     dc0:	1d a2       	lds	r17, 0x9d
	volatile BYTE downwardSlope=0, upwardSlope=0;
     dc2:	1f a2       	lds	r17, 0x9f
     dc4:	18 a6       	lds	r17, 0xb8
	volatile BOOL flagGotBeat=fFalse;
     dc6:	19 a6       	lds	r17, 0xb9
	volatile int place=0;	
     dc8:	1b a6       	lds	r17, 0xbb
     dca:	1a a6       	lds	r17, 0xba
	
	//If absolute max was in the first 2/3 ish, start there and go up, if we don't find something then go forward.
	if (placeOfAbsMax < (size/2)){
     dcc:	8f 89       	ldd	r24, Y+23	; 0x17
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	ce 01       	movw	r24, r28
     dd4:	8b 5b       	subi	r24, 0xBB	; 187
     dd6:	9f 4f       	sbci	r25, 0xFF	; 255
     dd8:	fc 01       	movw	r30, r24
     dda:	80 81       	ld	r24, Z
     ddc:	91 81       	ldd	r25, Z+1	; 0x01
     dde:	99 23       	and	r25, r25
     de0:	0c f4       	brge	.+2      	; 0xde4 <_ZN12heartMonitor11calculateHREPji+0x276>
     de2:	01 96       	adiw	r24, 0x01	; 1
     de4:	95 95       	asr	r25
     de6:	87 95       	ror	r24
     de8:	41 e0       	ldi	r20, 0x01	; 1
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	0c f0       	brlt	.+2      	; 0xdf2 <_ZN12heartMonitor11calculateHREPji+0x284>
     df0:	40 e0       	ldi	r20, 0x00	; 0
     df2:	44 23       	and	r20, r20
     df4:	09 f4       	brne	.+2      	; 0xdf8 <_ZN12heartMonitor11calculateHREPji+0x28a>
     df6:	04 c1       	rjmp	.+520    	; 0x1000 <_ZN12heartMonitor11calculateHREPji+0x492>
		place=placeOfAbsMax+15;	//start 5 above current place
     df8:	8f 89       	ldd	r24, Y+23	; 0x17
     dfa:	88 2f       	mov	r24, r24
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	0f 96       	adiw	r24, 0x0f	; 15
     e00:	9b a7       	lds	r25, 0x7b
     e02:	8a a7       	lds	r24, 0x7a
		//Loop through the rest of the array 20 things at a time, find the absolute maximum in that 20. If 4/6 to the left are smaller and 4/6 to the right are smaller, call that a peak.
		for (int i=place; i < size; i+=5){
     e04:	8a a5       	lds	r24, 0x6a
     e06:	9b a5       	lds	r25, 0x6b
     e08:	9e 83       	std	Y+6, r25	; 0x06
     e0a:	8d 83       	std	Y+5, r24	; 0x05
     e0c:	e8 c0       	rjmp	.+464    	; 0xfde <_ZN12heartMonitor11calculateHREPji+0x470>
			currentHigh=samples[i];
     e0e:	8d 81       	ldd	r24, Y+5	; 0x05
     e10:	9e 81       	ldd	r25, Y+6	; 0x06
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	9e 01       	movw	r18, r28
     e18:	2d 5b       	subi	r18, 0xBD	; 189
     e1a:	3f 4f       	sbci	r19, 0xFF	; 255
     e1c:	f9 01       	movw	r30, r18
     e1e:	20 81       	ld	r18, Z
     e20:	31 81       	ldd	r19, Z+1	; 0x01
     e22:	82 0f       	add	r24, r18
     e24:	93 1f       	adc	r25, r19
     e26:	fc 01       	movw	r30, r24
     e28:	80 81       	ld	r24, Z
     e2a:	91 81       	ldd	r25, Z+1	; 0x01
     e2c:	9c a3       	lds	r25, 0x5c
     e2e:	8b a3       	lds	r24, 0x5b
			for (int j=i; j<(i+30); j++){
     e30:	8d 81       	ldd	r24, Y+5	; 0x05
     e32:	9e 81       	ldd	r25, Y+6	; 0x06
     e34:	98 87       	std	Y+8, r25	; 0x08
     e36:	8f 83       	std	Y+7, r24	; 0x07
     e38:	32 c0       	rjmp	.+100    	; 0xe9e <_ZN12heartMonitor11calculateHREPji+0x330>
				//Find maximum. 
				if (samples[j] >=currentHigh){
     e3a:	8f 81       	ldd	r24, Y+7	; 0x07
     e3c:	98 85       	ldd	r25, Y+8	; 0x08
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	9e 01       	movw	r18, r28
     e44:	2d 5b       	subi	r18, 0xBD	; 189
     e46:	3f 4f       	sbci	r19, 0xFF	; 255
     e48:	f9 01       	movw	r30, r18
     e4a:	20 81       	ld	r18, Z
     e4c:	31 81       	ldd	r19, Z+1	; 0x01
     e4e:	82 0f       	add	r24, r18
     e50:	93 1f       	adc	r25, r19
     e52:	fc 01       	movw	r30, r24
     e54:	20 81       	ld	r18, Z
     e56:	31 81       	ldd	r19, Z+1	; 0x01
     e58:	8b a1       	lds	r24, 0x4b
     e5a:	9c a1       	lds	r25, 0x4c
     e5c:	41 e0       	ldi	r20, 0x01	; 1
     e5e:	28 17       	cp	r18, r24
     e60:	39 07       	cpc	r19, r25
     e62:	08 f4       	brcc	.+2      	; 0xe66 <_ZN12heartMonitor11calculateHREPji+0x2f8>
     e64:	40 e0       	ldi	r20, 0x00	; 0
     e66:	44 23       	and	r20, r20
     e68:	a9 f0       	breq	.+42     	; 0xe94 <_ZN12heartMonitor11calculateHREPji+0x326>
					samples[j]=currentHigh;
     e6a:	8f 81       	ldd	r24, Y+7	; 0x07
     e6c:	98 85       	ldd	r25, Y+8	; 0x08
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	9e 01       	movw	r18, r28
     e74:	2d 5b       	subi	r18, 0xBD	; 189
     e76:	3f 4f       	sbci	r19, 0xFF	; 255
     e78:	f9 01       	movw	r30, r18
     e7a:	20 81       	ld	r18, Z
     e7c:	31 81       	ldd	r19, Z+1	; 0x01
     e7e:	82 0f       	add	r24, r18
     e80:	93 1f       	adc	r25, r19
     e82:	2b a1       	lds	r18, 0x4b
     e84:	3c a1       	lds	r19, 0x4c
     e86:	fc 01       	movw	r30, r24
     e88:	31 83       	std	Z+1, r19	; 0x01
     e8a:	20 83       	st	Z, r18
					currentHighPlace=j;
     e8c:	8f 81       	ldd	r24, Y+7	; 0x07
     e8e:	98 85       	ldd	r25, Y+8	; 0x08
     e90:	9e a3       	lds	r25, 0x5e
     e92:	8d a3       	lds	r24, 0x5d
	if (placeOfAbsMax < (size/2)){
		place=placeOfAbsMax+15;	//start 5 above current place
		//Loop through the rest of the array 20 things at a time, find the absolute maximum in that 20. If 4/6 to the left are smaller and 4/6 to the right are smaller, call that a peak.
		for (int i=place; i < size; i+=5){
			currentHigh=samples[i];
			for (int j=i; j<(i+30); j++){
     e94:	8f 81       	ldd	r24, Y+7	; 0x07
     e96:	98 85       	ldd	r25, Y+8	; 0x08
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	98 87       	std	Y+8, r25	; 0x08
     e9c:	8f 83       	std	Y+7, r24	; 0x07
     e9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ea0:	9e 81       	ldd	r25, Y+6	; 0x06
     ea2:	9c 01       	movw	r18, r24
     ea4:	22 5e       	subi	r18, 0xE2	; 226
     ea6:	3f 4f       	sbci	r19, 0xFF	; 255
     ea8:	41 e0       	ldi	r20, 0x01	; 1
     eaa:	8f 81       	ldd	r24, Y+7	; 0x07
     eac:	98 85       	ldd	r25, Y+8	; 0x08
     eae:	82 17       	cp	r24, r18
     eb0:	93 07       	cpc	r25, r19
     eb2:	0c f0       	brlt	.+2      	; 0xeb6 <_ZN12heartMonitor11calculateHREPji+0x348>
     eb4:	40 e0       	ldi	r20, 0x00	; 0
     eb6:	44 23       	and	r20, r20
     eb8:	09 f0       	breq	.+2      	; 0xebc <_ZN12heartMonitor11calculateHREPji+0x34e>
     eba:	bf cf       	rjmp	.-130    	; 0xe3a <_ZN12heartMonitor11calculateHREPji+0x2cc>
				if (samples[j] >=currentHigh){
					samples[j]=currentHigh;
					currentHighPlace=j;
				}
			}
			for (int k=currentHighPlace-15; k <= currentHighPlace+15; k++){
     ebc:	8d a1       	lds	r24, 0x4d
     ebe:	9e a1       	lds	r25, 0x4e
     ec0:	0f 97       	sbiw	r24, 0x0f	; 15
     ec2:	9a 87       	std	Y+10, r25	; 0x0a
     ec4:	89 87       	std	Y+9, r24	; 0x09
     ec6:	65 c0       	rjmp	.+202    	; 0xf92 <_ZN12heartMonitor11calculateHREPji+0x424>
				if (k<currentHighPlace && samples[currentHighPlace] < samples[k]){upwardSlope++;}
     ec8:	8d a1       	lds	r24, 0x4d
     eca:	9e a1       	lds	r25, 0x4e
     ecc:	29 85       	ldd	r18, Y+9	; 0x09
     ece:	3a 85       	ldd	r19, Y+10	; 0x0a
     ed0:	28 17       	cp	r18, r24
     ed2:	39 07       	cpc	r19, r25
     ed4:	1c f5       	brge	.+70     	; 0xf1c <_ZN12heartMonitor11calculateHREPji+0x3ae>
     ed6:	8d a1       	lds	r24, 0x4d
     ed8:	9e a1       	lds	r25, 0x4e
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	9e 01       	movw	r18, r28
     ee0:	2d 5b       	subi	r18, 0xBD	; 189
     ee2:	3f 4f       	sbci	r19, 0xFF	; 255
     ee4:	f9 01       	movw	r30, r18
     ee6:	20 81       	ld	r18, Z
     ee8:	31 81       	ldd	r19, Z+1	; 0x01
     eea:	82 0f       	add	r24, r18
     eec:	93 1f       	adc	r25, r19
     eee:	fc 01       	movw	r30, r24
     ef0:	20 81       	ld	r18, Z
     ef2:	31 81       	ldd	r19, Z+1	; 0x01
     ef4:	89 85       	ldd	r24, Y+9	; 0x09
     ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	ae 01       	movw	r20, r28
     efe:	4d 5b       	subi	r20, 0xBD	; 189
     f00:	5f 4f       	sbci	r21, 0xFF	; 255
     f02:	fa 01       	movw	r30, r20
     f04:	40 81       	ld	r20, Z
     f06:	51 81       	ldd	r21, Z+1	; 0x01
     f08:	84 0f       	add	r24, r20
     f0a:	95 1f       	adc	r25, r21
     f0c:	fc 01       	movw	r30, r24
     f0e:	80 81       	ld	r24, Z
     f10:	91 81       	ldd	r25, Z+1	; 0x01
     f12:	28 17       	cp	r18, r24
     f14:	39 07       	cpc	r19, r25
     f16:	10 f4       	brcc	.+4      	; 0xf1c <_ZN12heartMonitor11calculateHREPji+0x3ae>
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	01 c0       	rjmp	.+2      	; 0xf1e <_ZN12heartMonitor11calculateHREPji+0x3b0>
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	88 23       	and	r24, r24
     f20:	19 f0       	breq	.+6      	; 0xf28 <_ZN12heartMonitor11calculateHREPji+0x3ba>
     f22:	88 a5       	lds	r24, 0x68
     f24:	8f 5f       	subi	r24, 0xFF	; 255
     f26:	88 a7       	lds	r24, 0x78
				if (k>=currentHighPlace && samples[currentHighPlace] >= samples[k]){downwardSlope++;}
     f28:	8d a1       	lds	r24, 0x4d
     f2a:	9e a1       	lds	r25, 0x4e
     f2c:	29 85       	ldd	r18, Y+9	; 0x09
     f2e:	3a 85       	ldd	r19, Y+10	; 0x0a
     f30:	28 17       	cp	r18, r24
     f32:	39 07       	cpc	r19, r25
     f34:	1c f1       	brlt	.+70     	; 0xf7c <_ZN12heartMonitor11calculateHREPji+0x40e>
     f36:	8d a1       	lds	r24, 0x4d
     f38:	9e a1       	lds	r25, 0x4e
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	9e 01       	movw	r18, r28
     f40:	2d 5b       	subi	r18, 0xBD	; 189
     f42:	3f 4f       	sbci	r19, 0xFF	; 255
     f44:	f9 01       	movw	r30, r18
     f46:	20 81       	ld	r18, Z
     f48:	31 81       	ldd	r19, Z+1	; 0x01
     f4a:	82 0f       	add	r24, r18
     f4c:	93 1f       	adc	r25, r19
     f4e:	fc 01       	movw	r30, r24
     f50:	20 81       	ld	r18, Z
     f52:	31 81       	ldd	r19, Z+1	; 0x01
     f54:	89 85       	ldd	r24, Y+9	; 0x09
     f56:	9a 85       	ldd	r25, Y+10	; 0x0a
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	ae 01       	movw	r20, r28
     f5e:	4d 5b       	subi	r20, 0xBD	; 189
     f60:	5f 4f       	sbci	r21, 0xFF	; 255
     f62:	fa 01       	movw	r30, r20
     f64:	40 81       	ld	r20, Z
     f66:	51 81       	ldd	r21, Z+1	; 0x01
     f68:	84 0f       	add	r24, r20
     f6a:	95 1f       	adc	r25, r21
     f6c:	fc 01       	movw	r30, r24
     f6e:	80 81       	ld	r24, Z
     f70:	91 81       	ldd	r25, Z+1	; 0x01
     f72:	28 17       	cp	r18, r24
     f74:	39 07       	cpc	r19, r25
     f76:	10 f0       	brcs	.+4      	; 0xf7c <_ZN12heartMonitor11calculateHREPji+0x40e>
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	01 c0       	rjmp	.+2      	; 0xf7e <_ZN12heartMonitor11calculateHREPji+0x410>
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	88 23       	and	r24, r24
     f80:	19 f0       	breq	.+6      	; 0xf88 <_ZN12heartMonitor11calculateHREPji+0x41a>
     f82:	8f a1       	lds	r24, 0x4f
     f84:	8f 5f       	subi	r24, 0xFF	; 255
     f86:	8f a3       	lds	r24, 0x5f
				if (samples[j] >=currentHigh){
					samples[j]=currentHigh;
					currentHighPlace=j;
				}
			}
			for (int k=currentHighPlace-15; k <= currentHighPlace+15; k++){
     f88:	89 85       	ldd	r24, Y+9	; 0x09
     f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f8c:	01 96       	adiw	r24, 0x01	; 1
     f8e:	9a 87       	std	Y+10, r25	; 0x0a
     f90:	89 87       	std	Y+9, r24	; 0x09
     f92:	8d a1       	lds	r24, 0x4d
     f94:	9e a1       	lds	r25, 0x4e
     f96:	9c 01       	movw	r18, r24
     f98:	21 5f       	subi	r18, 0xF1	; 241
     f9a:	3f 4f       	sbci	r19, 0xFF	; 255
     f9c:	41 e0       	ldi	r20, 0x01	; 1
     f9e:	89 85       	ldd	r24, Y+9	; 0x09
     fa0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa2:	28 17       	cp	r18, r24
     fa4:	39 07       	cpc	r19, r25
     fa6:	0c f4       	brge	.+2      	; 0xfaa <_ZN12heartMonitor11calculateHREPji+0x43c>
     fa8:	40 e0       	ldi	r20, 0x00	; 0
     faa:	44 23       	and	r20, r20
     fac:	09 f0       	breq	.+2      	; 0xfb0 <_ZN12heartMonitor11calculateHREPji+0x442>
     fae:	8c cf       	rjmp	.-232    	; 0xec8 <_ZN12heartMonitor11calculateHREPji+0x35a>
				if (k<currentHighPlace && samples[currentHighPlace] < samples[k]){upwardSlope++;}
				if (k>=currentHighPlace && samples[currentHighPlace] >= samples[k]){downwardSlope++;}
			}
			if (downwardSlope > DOWNWARD_SLOPE_MINUMUM && upwardSlope > UPWARD_SLOPE_MINIMUM){flagGotBeat=fTrue; break;}
     fb0:	8f a1       	lds	r24, 0x4f
     fb2:	8b 30       	cpi	r24, 0x0B	; 11
     fb4:	28 f0       	brcs	.+10     	; 0xfc0 <_ZN12heartMonitor11calculateHREPji+0x452>
     fb6:	88 a5       	lds	r24, 0x68
     fb8:	8b 30       	cpi	r24, 0x0B	; 11
     fba:	10 f0       	brcs	.+4      	; 0xfc0 <_ZN12heartMonitor11calculateHREPji+0x452>
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	01 c0       	rjmp	.+2      	; 0xfc2 <_ZN12heartMonitor11calculateHREPji+0x454>
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	88 23       	and	r24, r24
     fc4:	21 f0       	breq	.+8      	; 0xfce <_ZN12heartMonitor11calculateHREPji+0x460>
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	89 a7       	lds	r24, 0x79
     fca:	00 00       	nop
     fcc:	31 c1       	rjmp	.+610    	; 0x1230 <_ZN12heartMonitor11calculateHREPji+0x6c2>
			else {upwardSlope=0; downwardSlope=0; flagGotBeat=fFalse;}	//do nothing, go into next 20 things.
     fce:	18 a6       	lds	r17, 0xb8
     fd0:	1f a2       	lds	r17, 0x9f
     fd2:	19 a6       	lds	r17, 0xb9
	
	//If absolute max was in the first 2/3 ish, start there and go up, if we don't find something then go forward.
	if (placeOfAbsMax < (size/2)){
		place=placeOfAbsMax+15;	//start 5 above current place
		//Loop through the rest of the array 20 things at a time, find the absolute maximum in that 20. If 4/6 to the left are smaller and 4/6 to the right are smaller, call that a peak.
		for (int i=place; i < size; i+=5){
     fd4:	8d 81       	ldd	r24, Y+5	; 0x05
     fd6:	9e 81       	ldd	r25, Y+6	; 0x06
     fd8:	05 96       	adiw	r24, 0x05	; 5
     fda:	9e 83       	std	Y+6, r25	; 0x06
     fdc:	8d 83       	std	Y+5, r24	; 0x05
     fde:	ce 01       	movw	r24, r28
     fe0:	8b 5b       	subi	r24, 0xBB	; 187
     fe2:	9f 4f       	sbci	r25, 0xFF	; 255
     fe4:	41 e0       	ldi	r20, 0x01	; 1
     fe6:	2d 81       	ldd	r18, Y+5	; 0x05
     fe8:	3e 81       	ldd	r19, Y+6	; 0x06
     fea:	fc 01       	movw	r30, r24
     fec:	80 81       	ld	r24, Z
     fee:	91 81       	ldd	r25, Z+1	; 0x01
     ff0:	28 17       	cp	r18, r24
     ff2:	39 07       	cpc	r19, r25
     ff4:	0c f0       	brlt	.+2      	; 0xff8 <_ZN12heartMonitor11calculateHREPji+0x48a>
     ff6:	40 e0       	ldi	r20, 0x00	; 0
     ff8:	44 23       	and	r20, r20
     ffa:	09 f0       	breq	.+2      	; 0xffe <_ZN12heartMonitor11calculateHREPji+0x490>
     ffc:	08 cf       	rjmp	.-496    	; 0xe0e <_ZN12heartMonitor11calculateHREPji+0x2a0>
     ffe:	18 c1       	rjmp	.+560    	; 0x1230 <_ZN12heartMonitor11calculateHREPji+0x6c2>
			if (downwardSlope > DOWNWARD_SLOPE_MINUMUM && upwardSlope > UPWARD_SLOPE_MINIMUM){flagGotBeat=fTrue; break;}
			else {upwardSlope=0; downwardSlope=0; flagGotBeat=fFalse;}	//do nothing, go into next 20 things.
		} //end for
	
	//If maximum was at the end of the sample OR we didn't find a local maxima in the lower bit of the data
	} else if (placeOfAbsMax >= (size/2) && !flagGotBeat){
    1000:	8f 89       	ldd	r24, Y+23	; 0x17
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	ce 01       	movw	r24, r28
    1008:	8b 5b       	subi	r24, 0xBB	; 187
    100a:	9f 4f       	sbci	r25, 0xFF	; 255
    100c:	fc 01       	movw	r30, r24
    100e:	80 81       	ld	r24, Z
    1010:	91 81       	ldd	r25, Z+1	; 0x01
    1012:	99 23       	and	r25, r25
    1014:	0c f4       	brge	.+2      	; 0x1018 <_ZN12heartMonitor11calculateHREPji+0x4aa>
    1016:	01 96       	adiw	r24, 0x01	; 1
    1018:	95 95       	asr	r25
    101a:	87 95       	ror	r24
    101c:	28 17       	cp	r18, r24
    101e:	39 07       	cpc	r19, r25
    1020:	2c f0       	brlt	.+10     	; 0x102c <_ZN12heartMonitor11calculateHREPji+0x4be>
    1022:	89 a5       	lds	r24, 0x69
    1024:	88 23       	and	r24, r24
    1026:	11 f4       	brne	.+4      	; 0x102c <_ZN12heartMonitor11calculateHREPji+0x4be>
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	01 c0       	rjmp	.+2      	; 0x102e <_ZN12heartMonitor11calculateHREPji+0x4c0>
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	88 23       	and	r24, r24
    1030:	09 f4       	brne	.+2      	; 0x1034 <_ZN12heartMonitor11calculateHREPji+0x4c6>
    1032:	fe c0       	rjmp	.+508    	; 0x1230 <_ZN12heartMonitor11calculateHREPji+0x6c2>
		place=placeOfAbsMax-15;
    1034:	8f 89       	ldd	r24, Y+23	; 0x17
    1036:	88 2f       	mov	r24, r24
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	0f 97       	sbiw	r24, 0x0f	; 15
    103c:	9b a7       	lds	r25, 0x7b
    103e:	8a a7       	lds	r24, 0x7a
		upwardSlope=0;
    1040:	18 a6       	lds	r17, 0xb8
		downwardSlope=0;
    1042:	1f a2       	lds	r17, 0x9f
		for (int i=place; i>0; i-= 5){
    1044:	8a a5       	lds	r24, 0x6a
    1046:	9b a5       	lds	r25, 0x6b
    1048:	9c 87       	std	Y+12, r25	; 0x0c
    104a:	8b 87       	std	Y+11, r24	; 0x0b
    104c:	e7 c0       	rjmp	.+462    	; 0x121c <_ZN12heartMonitor11calculateHREPji+0x6ae>
			currentHigh=samples[i];
    104e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1050:	9c 85       	ldd	r25, Y+12	; 0x0c
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	9e 01       	movw	r18, r28
    1058:	2d 5b       	subi	r18, 0xBD	; 189
    105a:	3f 4f       	sbci	r19, 0xFF	; 255
    105c:	f9 01       	movw	r30, r18
    105e:	20 81       	ld	r18, Z
    1060:	31 81       	ldd	r19, Z+1	; 0x01
    1062:	82 0f       	add	r24, r18
    1064:	93 1f       	adc	r25, r19
    1066:	fc 01       	movw	r30, r24
    1068:	80 81       	ld	r24, Z
    106a:	91 81       	ldd	r25, Z+1	; 0x01
    106c:	9c a3       	lds	r25, 0x5c
    106e:	8b a3       	lds	r24, 0x5b
			for (int j=i; j > (i-30); j--){
    1070:	8b 85       	ldd	r24, Y+11	; 0x0b
    1072:	9c 85       	ldd	r25, Y+12	; 0x0c
    1074:	9e 87       	std	Y+14, r25	; 0x0e
    1076:	8d 87       	std	Y+13, r24	; 0x0d
    1078:	32 c0       	rjmp	.+100    	; 0x10de <_ZN12heartMonitor11calculateHREPji+0x570>
				if (samples[j] >= currentHigh){
    107a:	8d 85       	ldd	r24, Y+13	; 0x0d
    107c:	9e 85       	ldd	r25, Y+14	; 0x0e
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	9e 01       	movw	r18, r28
    1084:	2d 5b       	subi	r18, 0xBD	; 189
    1086:	3f 4f       	sbci	r19, 0xFF	; 255
    1088:	f9 01       	movw	r30, r18
    108a:	20 81       	ld	r18, Z
    108c:	31 81       	ldd	r19, Z+1	; 0x01
    108e:	82 0f       	add	r24, r18
    1090:	93 1f       	adc	r25, r19
    1092:	fc 01       	movw	r30, r24
    1094:	20 81       	ld	r18, Z
    1096:	31 81       	ldd	r19, Z+1	; 0x01
    1098:	8b a1       	lds	r24, 0x4b
    109a:	9c a1       	lds	r25, 0x4c
    109c:	41 e0       	ldi	r20, 0x01	; 1
    109e:	28 17       	cp	r18, r24
    10a0:	39 07       	cpc	r19, r25
    10a2:	08 f4       	brcc	.+2      	; 0x10a6 <_ZN12heartMonitor11calculateHREPji+0x538>
    10a4:	40 e0       	ldi	r20, 0x00	; 0
    10a6:	44 23       	and	r20, r20
    10a8:	a9 f0       	breq	.+42     	; 0x10d4 <_ZN12heartMonitor11calculateHREPji+0x566>
					currentHigh=samples[j];
    10aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	9e 01       	movw	r18, r28
    10b4:	2d 5b       	subi	r18, 0xBD	; 189
    10b6:	3f 4f       	sbci	r19, 0xFF	; 255
    10b8:	f9 01       	movw	r30, r18
    10ba:	20 81       	ld	r18, Z
    10bc:	31 81       	ldd	r19, Z+1	; 0x01
    10be:	82 0f       	add	r24, r18
    10c0:	93 1f       	adc	r25, r19
    10c2:	fc 01       	movw	r30, r24
    10c4:	80 81       	ld	r24, Z
    10c6:	91 81       	ldd	r25, Z+1	; 0x01
    10c8:	9c a3       	lds	r25, 0x5c
    10ca:	8b a3       	lds	r24, 0x5b
					currentHighPlace=j;
    10cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    10d0:	9e a3       	lds	r25, 0x5e
    10d2:	8d a3       	lds	r24, 0x5d
		place=placeOfAbsMax-15;
		upwardSlope=0;
		downwardSlope=0;
		for (int i=place; i>0; i-= 5){
			currentHigh=samples[i];
			for (int j=i; j > (i-30); j--){
    10d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	9e 87       	std	Y+14, r25	; 0x0e
    10dc:	8d 87       	std	Y+13, r24	; 0x0d
    10de:	8b 85       	ldd	r24, Y+11	; 0x0b
    10e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    10e2:	9c 01       	movw	r18, r24
    10e4:	2e 51       	subi	r18, 0x1E	; 30
    10e6:	30 40       	sbci	r19, 0x00	; 0
    10e8:	41 e0       	ldi	r20, 0x01	; 1
    10ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ee:	28 17       	cp	r18, r24
    10f0:	39 07       	cpc	r19, r25
    10f2:	0c f0       	brlt	.+2      	; 0x10f6 <_ZN12heartMonitor11calculateHREPji+0x588>
    10f4:	40 e0       	ldi	r20, 0x00	; 0
    10f6:	44 23       	and	r20, r20
    10f8:	09 f0       	breq	.+2      	; 0x10fc <_ZN12heartMonitor11calculateHREPji+0x58e>
    10fa:	bf cf       	rjmp	.-130    	; 0x107a <_ZN12heartMonitor11calculateHREPji+0x50c>
				if (samples[j] >= currentHigh){
					currentHigh=samples[j];
					currentHighPlace=j;
				}
			}
			for (int k=currentHighPlace+15; k > currentHighPlace-15; k--){
    10fc:	8d a1       	lds	r24, 0x4d
    10fe:	9e a1       	lds	r25, 0x4e
    1100:	0f 96       	adiw	r24, 0x0f	; 15
    1102:	98 8b       	std	Y+16, r25	; 0x10
    1104:	8f 87       	std	Y+15, r24	; 0x0f
    1106:	65 c0       	rjmp	.+202    	; 0x11d2 <_ZN12heartMonitor11calculateHREPji+0x664>
				if (k>=currentHighPlace && samples[currentHighPlace] >= samples[k]){upwardSlope++;}
    1108:	8d a1       	lds	r24, 0x4d
    110a:	9e a1       	lds	r25, 0x4e
    110c:	2f 85       	ldd	r18, Y+15	; 0x0f
    110e:	38 89       	ldd	r19, Y+16	; 0x10
    1110:	28 17       	cp	r18, r24
    1112:	39 07       	cpc	r19, r25
    1114:	1c f1       	brlt	.+70     	; 0x115c <_ZN12heartMonitor11calculateHREPji+0x5ee>
    1116:	8d a1       	lds	r24, 0x4d
    1118:	9e a1       	lds	r25, 0x4e
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	9e 01       	movw	r18, r28
    1120:	2d 5b       	subi	r18, 0xBD	; 189
    1122:	3f 4f       	sbci	r19, 0xFF	; 255
    1124:	f9 01       	movw	r30, r18
    1126:	20 81       	ld	r18, Z
    1128:	31 81       	ldd	r19, Z+1	; 0x01
    112a:	82 0f       	add	r24, r18
    112c:	93 1f       	adc	r25, r19
    112e:	fc 01       	movw	r30, r24
    1130:	20 81       	ld	r18, Z
    1132:	31 81       	ldd	r19, Z+1	; 0x01
    1134:	8f 85       	ldd	r24, Y+15	; 0x0f
    1136:	98 89       	ldd	r25, Y+16	; 0x10
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	ae 01       	movw	r20, r28
    113e:	4d 5b       	subi	r20, 0xBD	; 189
    1140:	5f 4f       	sbci	r21, 0xFF	; 255
    1142:	fa 01       	movw	r30, r20
    1144:	40 81       	ld	r20, Z
    1146:	51 81       	ldd	r21, Z+1	; 0x01
    1148:	84 0f       	add	r24, r20
    114a:	95 1f       	adc	r25, r21
    114c:	fc 01       	movw	r30, r24
    114e:	80 81       	ld	r24, Z
    1150:	91 81       	ldd	r25, Z+1	; 0x01
    1152:	28 17       	cp	r18, r24
    1154:	39 07       	cpc	r19, r25
    1156:	10 f0       	brcs	.+4      	; 0x115c <_ZN12heartMonitor11calculateHREPji+0x5ee>
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	01 c0       	rjmp	.+2      	; 0x115e <_ZN12heartMonitor11calculateHREPji+0x5f0>
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	88 23       	and	r24, r24
    1160:	19 f0       	breq	.+6      	; 0x1168 <_ZN12heartMonitor11calculateHREPji+0x5fa>
    1162:	88 a5       	lds	r24, 0x68
    1164:	8f 5f       	subi	r24, 0xFF	; 255
    1166:	88 a7       	lds	r24, 0x78
				if (k<currentHighPlace && samples[currentHighPlace] <= samples[k]){downwardSlope++;}
    1168:	8d a1       	lds	r24, 0x4d
    116a:	9e a1       	lds	r25, 0x4e
    116c:	2f 85       	ldd	r18, Y+15	; 0x0f
    116e:	38 89       	ldd	r19, Y+16	; 0x10
    1170:	28 17       	cp	r18, r24
    1172:	39 07       	cpc	r19, r25
    1174:	1c f5       	brge	.+70     	; 0x11bc <_ZN12heartMonitor11calculateHREPji+0x64e>
    1176:	8d a1       	lds	r24, 0x4d
    1178:	9e a1       	lds	r25, 0x4e
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	9e 01       	movw	r18, r28
    1180:	2d 5b       	subi	r18, 0xBD	; 189
    1182:	3f 4f       	sbci	r19, 0xFF	; 255
    1184:	f9 01       	movw	r30, r18
    1186:	20 81       	ld	r18, Z
    1188:	31 81       	ldd	r19, Z+1	; 0x01
    118a:	82 0f       	add	r24, r18
    118c:	93 1f       	adc	r25, r19
    118e:	fc 01       	movw	r30, r24
    1190:	20 81       	ld	r18, Z
    1192:	31 81       	ldd	r19, Z+1	; 0x01
    1194:	8f 85       	ldd	r24, Y+15	; 0x0f
    1196:	98 89       	ldd	r25, Y+16	; 0x10
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	ae 01       	movw	r20, r28
    119e:	4d 5b       	subi	r20, 0xBD	; 189
    11a0:	5f 4f       	sbci	r21, 0xFF	; 255
    11a2:	fa 01       	movw	r30, r20
    11a4:	40 81       	ld	r20, Z
    11a6:	51 81       	ldd	r21, Z+1	; 0x01
    11a8:	84 0f       	add	r24, r20
    11aa:	95 1f       	adc	r25, r21
    11ac:	fc 01       	movw	r30, r24
    11ae:	80 81       	ld	r24, Z
    11b0:	91 81       	ldd	r25, Z+1	; 0x01
    11b2:	82 17       	cp	r24, r18
    11b4:	93 07       	cpc	r25, r19
    11b6:	10 f0       	brcs	.+4      	; 0x11bc <_ZN12heartMonitor11calculateHREPji+0x64e>
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	01 c0       	rjmp	.+2      	; 0x11be <_ZN12heartMonitor11calculateHREPji+0x650>
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	88 23       	and	r24, r24
    11c0:	19 f0       	breq	.+6      	; 0x11c8 <_ZN12heartMonitor11calculateHREPji+0x65a>
    11c2:	8f a1       	lds	r24, 0x4f
    11c4:	8f 5f       	subi	r24, 0xFF	; 255
    11c6:	8f a3       	lds	r24, 0x5f
				if (samples[j] >= currentHigh){
					currentHigh=samples[j];
					currentHighPlace=j;
				}
			}
			for (int k=currentHighPlace+15; k > currentHighPlace-15; k--){
    11c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    11ca:	98 89       	ldd	r25, Y+16	; 0x10
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	98 8b       	std	Y+16, r25	; 0x10
    11d0:	8f 87       	std	Y+15, r24	; 0x0f
    11d2:	8d a1       	lds	r24, 0x4d
    11d4:	9e a1       	lds	r25, 0x4e
    11d6:	9c 01       	movw	r18, r24
    11d8:	2f 50       	subi	r18, 0x0F	; 15
    11da:	30 40       	sbci	r19, 0x00	; 0
    11dc:	41 e0       	ldi	r20, 0x01	; 1
    11de:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e0:	98 89       	ldd	r25, Y+16	; 0x10
    11e2:	28 17       	cp	r18, r24
    11e4:	39 07       	cpc	r19, r25
    11e6:	0c f0       	brlt	.+2      	; 0x11ea <_ZN12heartMonitor11calculateHREPji+0x67c>
    11e8:	40 e0       	ldi	r20, 0x00	; 0
    11ea:	44 23       	and	r20, r20
    11ec:	09 f0       	breq	.+2      	; 0x11f0 <_ZN12heartMonitor11calculateHREPji+0x682>
    11ee:	8c cf       	rjmp	.-232    	; 0x1108 <_ZN12heartMonitor11calculateHREPji+0x59a>
				if (k>=currentHighPlace && samples[currentHighPlace] >= samples[k]){upwardSlope++;}
				if (k<currentHighPlace && samples[currentHighPlace] <= samples[k]){downwardSlope++;}
			}
			if (downwardSlope > DOWNWARD_SLOPE_MINUMUM && upwardSlope > UPWARD_SLOPE_MINIMUM){flagGotBeat=fTrue; break;}	
    11f0:	8f a1       	lds	r24, 0x4f
    11f2:	8b 30       	cpi	r24, 0x0B	; 11
    11f4:	28 f0       	brcs	.+10     	; 0x1200 <_ZN12heartMonitor11calculateHREPji+0x692>
    11f6:	88 a5       	lds	r24, 0x68
    11f8:	8b 30       	cpi	r24, 0x0B	; 11
    11fa:	10 f0       	brcs	.+4      	; 0x1200 <_ZN12heartMonitor11calculateHREPji+0x692>
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	01 c0       	rjmp	.+2      	; 0x1202 <_ZN12heartMonitor11calculateHREPji+0x694>
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	88 23       	and	r24, r24
    1204:	19 f0       	breq	.+6      	; 0x120c <_ZN12heartMonitor11calculateHREPji+0x69e>
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	89 a7       	lds	r24, 0x79
    120a:	12 c0       	rjmp	.+36     	; 0x1230 <_ZN12heartMonitor11calculateHREPji+0x6c2>
			else {upwardSlope=0; downwardSlope=0; flagGotBeat=fFalse;}		
    120c:	18 a6       	lds	r17, 0xb8
    120e:	1f a2       	lds	r17, 0x9f
    1210:	19 a6       	lds	r17, 0xb9
	//If maximum was at the end of the sample OR we didn't find a local maxima in the lower bit of the data
	} else if (placeOfAbsMax >= (size/2) && !flagGotBeat){
		place=placeOfAbsMax-15;
		upwardSlope=0;
		downwardSlope=0;
		for (int i=place; i>0; i-= 5){
    1212:	8b 85       	ldd	r24, Y+11	; 0x0b
    1214:	9c 85       	ldd	r25, Y+12	; 0x0c
    1216:	05 97       	sbiw	r24, 0x05	; 5
    1218:	9c 87       	std	Y+12, r25	; 0x0c
    121a:	8b 87       	std	Y+11, r24	; 0x0b
    121c:	21 e0       	ldi	r18, 0x01	; 1
    121e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1220:	9c 85       	ldd	r25, Y+12	; 0x0c
    1222:	18 16       	cp	r1, r24
    1224:	19 06       	cpc	r1, r25
    1226:	0c f0       	brlt	.+2      	; 0x122a <_ZN12heartMonitor11calculateHREPji+0x6bc>
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	22 23       	and	r18, r18
    122c:	09 f0       	breq	.+2      	; 0x1230 <_ZN12heartMonitor11calculateHREPji+0x6c2>
    122e:	0f cf       	rjmp	.-482    	; 0x104e <_ZN12heartMonitor11calculateHREPji+0x4e0>
			else {upwardSlope=0; downwardSlope=0; flagGotBeat=fFalse;}		
		}
	}//end if placeOfAbsMax > 100

	
	if (flagGotBeat){
    1230:	99 a5       	lds	r25, 0x69
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	99 23       	and	r25, r25
    1236:	09 f4       	brne	.+2      	; 0x123a <_ZN12heartMonitor11calculateHREPji+0x6cc>
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	88 23       	and	r24, r24
    123c:	09 f4       	brne	.+2      	; 0x1240 <_ZN12heartMonitor11calculateHREPji+0x6d2>
    123e:	7d c0       	rjmp	.+250    	; 0x133a <_ZN12heartMonitor11calculateHREPji+0x7cc>
		char distanceString[5];
		volatile int hmm=abs(placeOfAbsMax-currentHighPlace);
    1240:	8f 89       	ldd	r24, Y+23	; 0x17
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	8d a1       	lds	r24, 0x4d
    1248:	9e a1       	lds	r25, 0x4e
    124a:	a9 01       	movw	r20, r18
    124c:	48 1b       	sub	r20, r24
    124e:	59 0b       	sbc	r21, r25
    1250:	ca 01       	movw	r24, r20
    1252:	99 23       	and	r25, r25
    1254:	1c f4       	brge	.+6      	; 0x125c <_ZN12heartMonitor11calculateHREPji+0x6ee>
    1256:	90 95       	com	r25
    1258:	81 95       	neg	r24
    125a:	9f 4f       	sbci	r25, 0xFF	; 255
    125c:	9c af       	sts	0x7c, r25
    125e:	8b af       	sts	0x7b, r24
		utoa(hmm, distanceString,10);
    1260:	8b ad       	sts	0x6b, r24
    1262:	9c ad       	sts	0x6c, r25
    1264:	9e 01       	movw	r18, r28
    1266:	2a 5c       	subi	r18, 0xCA	; 202
    1268:	3f 4f       	sbci	r19, 0xFF	; 255
    126a:	b9 01       	movw	r22, r18
    126c:	4a e0       	ldi	r20, 0x0A	; 10
    126e:	50 e0       	ldi	r21, 0x00	; 0
    1270:	0e 94 76 0f 	call	0x1eec	; 0x1eec <utoa>
		distanceString[4]='\0';
    1274:	1a ae       	sts	0xba, r17
		Print0("d=");
    1276:	89 e0       	ldi	r24, 0x09	; 9
    1278:	91 e0       	ldi	r25, 0x01	; 1
    127a:	0e 94 17 0a 	call	0x142e	; 0x142e <_Z6Print0Pc>
		Print0(distanceString);
    127e:	ce 01       	movw	r24, r28
    1280:	c6 96       	adiw	r24, 0x36	; 54
    1282:	0e 94 17 0a 	call	0x142e	; 0x142e <_Z6Print0Pc>
		volatile double sampleTimeDifference=abs(placeOfAbsMax-currentHighPlace)*SEC_PER_SAMPLE;
    1286:	8f 89       	ldd	r24, Y+23	; 0x17
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	8d a1       	lds	r24, 0x4d
    128e:	9e a1       	lds	r25, 0x4e
    1290:	f9 01       	movw	r30, r18
    1292:	e8 1b       	sub	r30, r24
    1294:	f9 0b       	sbc	r31, r25
    1296:	cf 01       	movw	r24, r30
    1298:	99 23       	and	r25, r25
    129a:	1c f4       	brge	.+6      	; 0x12a2 <_ZN12heartMonitor11calculateHREPji+0x734>
    129c:	90 95       	com	r25
    129e:	81 95       	neg	r24
    12a0:	9f 4f       	sbci	r25, 0xFF	; 255
    12a2:	aa 27       	eor	r26, r26
    12a4:	97 fd       	sbrc	r25, 7
    12a6:	a0 95       	com	r26
    12a8:	ba 2f       	mov	r27, r26
    12aa:	bc 01       	movw	r22, r24
    12ac:	cd 01       	movw	r24, r26
    12ae:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__floatsisf>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	bc 01       	movw	r22, r24
    12b8:	cd 01       	movw	r24, r26
    12ba:	2f e6       	ldi	r18, 0x6F	; 111
    12bc:	32 e1       	ldi	r19, 0x12	; 18
    12be:	43 e0       	ldi	r20, 0x03	; 3
    12c0:	5c e3       	ldi	r21, 0x3C	; 60
    12c2:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__mulsf3>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	9e 01       	movw	r18, r28
    12cc:	23 5c       	subi	r18, 0xC3	; 195
    12ce:	3f 4f       	sbci	r19, 0xFF	; 255
    12d0:	f9 01       	movw	r30, r18
    12d2:	80 83       	st	Z, r24
    12d4:	91 83       	std	Z+1, r25	; 0x01
    12d6:	a2 83       	std	Z+2, r26	; 0x02
    12d8:	b3 83       	std	Z+3, r27	; 0x03
		currentHR=60/sampleTimeDifference;
    12da:	ce 01       	movw	r24, r28
    12dc:	cd 96       	adiw	r24, 0x3d	; 61
    12de:	fc 01       	movw	r30, r24
    12e0:	20 81       	ld	r18, Z
    12e2:	31 81       	ldd	r19, Z+1	; 0x01
    12e4:	42 81       	ldd	r20, Z+2	; 0x02
    12e6:	53 81       	ldd	r21, Z+3	; 0x03
    12e8:	60 e0       	ldi	r22, 0x00	; 0
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	80 e7       	ldi	r24, 0x70	; 112
    12ee:	92 e4       	ldi	r25, 0x42	; 66
    12f0:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__divsf3>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	9e 01       	movw	r18, r28
    12fa:	2f 5b       	subi	r18, 0xBF	; 191
    12fc:	3f 4f       	sbci	r19, 0xFF	; 255
    12fe:	f9 01       	movw	r30, r18
    1300:	20 81       	ld	r18, Z
    1302:	31 81       	ldd	r19, Z+1	; 0x01
    1304:	f9 01       	movw	r30, r18
    1306:	84 83       	std	Z+4, r24	; 0x04
    1308:	95 83       	std	Z+5, r25	; 0x05
    130a:	a6 83       	std	Z+6, r26	; 0x06
    130c:	b7 83       	std	Z+7, r27	; 0x07
		numReadings++;
    130e:	ce 01       	movw	r24, r28
    1310:	8f 5b       	subi	r24, 0xBF	; 191
    1312:	9f 4f       	sbci	r25, 0xFF	; 255
    1314:	fc 01       	movw	r30, r24
    1316:	80 81       	ld	r24, Z
    1318:	91 81       	ldd	r25, Z+1	; 0x01
    131a:	fc 01       	movw	r30, r24
    131c:	84 85       	ldd	r24, Z+12	; 0x0c
    131e:	95 85       	ldd	r25, Z+13	; 0x0d
    1320:	9c 01       	movw	r18, r24
    1322:	2f 5f       	subi	r18, 0xFF	; 255
    1324:	3f 4f       	sbci	r19, 0xFF	; 255
    1326:	ce 01       	movw	r24, r28
    1328:	8f 5b       	subi	r24, 0xBF	; 191
    132a:	9f 4f       	sbci	r25, 0xFF	; 255
    132c:	fc 01       	movw	r30, r24
    132e:	80 81       	ld	r24, Z
    1330:	91 81       	ldd	r25, Z+1	; 0x01
    1332:	fc 01       	movw	r30, r24
    1334:	35 87       	std	Z+13, r19	; 0x0d
    1336:	24 87       	std	Z+12, r18	; 0x0c
    1338:	26 c0       	rjmp	.+76     	; 0x1386 <_ZN12heartMonitor11calculateHREPji+0x818>
	} else {
		volatile static unsigned int numZeros=0;
		numZeros++;
    133a:	80 91 cd 03 	lds	r24, 0x03CD
    133e:	90 91 ce 03 	lds	r25, 0x03CE
    1342:	01 96       	adiw	r24, 0x01	; 1
    1344:	90 93 ce 03 	sts	0x03CE, r25
    1348:	80 93 cd 03 	sts	0x03CD, r24
		if (numZeros>3){currentHR=0;numZeros=0;}
    134c:	80 91 cd 03 	lds	r24, 0x03CD
    1350:	90 91 ce 03 	lds	r25, 0x03CE
    1354:	21 e0       	ldi	r18, 0x01	; 1
    1356:	84 30       	cpi	r24, 0x04	; 4
    1358:	91 05       	cpc	r25, r1
    135a:	08 f4       	brcc	.+2      	; 0x135e <_ZN12heartMonitor11calculateHREPji+0x7f0>
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	22 23       	and	r18, r18
    1360:	91 f0       	breq	.+36     	; 0x1386 <_ZN12heartMonitor11calculateHREPji+0x818>
    1362:	ce 01       	movw	r24, r28
    1364:	8f 5b       	subi	r24, 0xBF	; 191
    1366:	9f 4f       	sbci	r25, 0xFF	; 255
    1368:	fc 01       	movw	r30, r24
    136a:	20 81       	ld	r18, Z
    136c:	31 81       	ldd	r19, Z+1	; 0x01
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	dc 01       	movw	r26, r24
    1374:	f9 01       	movw	r30, r18
    1376:	84 83       	std	Z+4, r24	; 0x04
    1378:	95 83       	std	Z+5, r25	; 0x05
    137a:	a6 83       	std	Z+6, r26	; 0x06
    137c:	b7 83       	std	Z+7, r27	; 0x07
    137e:	10 92 ce 03 	sts	0x03CE, r1
    1382:	10 92 cd 03 	sts	0x03CD, r1
	}
	
	volatile static int counter=0;
	if (counter++>5){
    1386:	80 91 cf 03 	lds	r24, 0x03CF
    138a:	90 91 d0 03 	lds	r25, 0x03D0
    138e:	21 e0       	ldi	r18, 0x01	; 1
    1390:	86 30       	cpi	r24, 0x06	; 6
    1392:	91 05       	cpc	r25, r1
    1394:	0c f4       	brge	.+2      	; 0x1398 <_ZN12heartMonitor11calculateHREPji+0x82a>
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	01 96       	adiw	r24, 0x01	; 1
    139a:	90 93 d0 03 	sts	0x03D0, r25
    139e:	80 93 cf 03 	sts	0x03CF, r24
    13a2:	22 23       	and	r18, r18
    13a4:	39 f0       	breq	.+14     	; 0x13b4 <_ZN12heartMonitor11calculateHREPji+0x846>
		flagUpdateUserStats=fTrue;
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	80 93 2e 01 	sts	0x012E, r24
		counter=0;
    13ac:	10 92 d0 03 	sts	0x03D0, r1
    13b0:	10 92 cf 03 	sts	0x03CF, r1
	}	
    13b4:	ca 5b       	subi	r28, 0xBA	; 186
    13b6:	df 4f       	sbci	r29, 0xFF	; 255
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	08 95       	ret

000013c8 <_ZN4tripC1Ev>:
		trip();		
		
};

//Default/no-arg constructor
trip::trip():odometer(), heartMonitor(){
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <_ZN4tripC1Ev+0x6>
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	9a 83       	std	Y+2, r25	; 0x02
    13d4:	89 83       	std	Y+1, r24	; 0x01
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	9a 81       	ldd	r25, Y+2	; 0x02
    13da:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN8odometerC1Ev>
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	9a 81       	ldd	r25, Y+2	; 0x02
    13e2:	c2 96       	adiw	r24, 0x32	; 50
    13e4:	0e 94 bd 04 	call	0x97a	; 0x97a <_ZN12heartMonitorC1Ev>
	//Do nothing in this, only important because it's a mix of heartMonitor and odometer.
}
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	08 95       	ret

000013f2 <_Z10PutUart0Chc>:
#include <stdlib.h>
#include <string.h>
#include "stdtypes.h"

/**************************************************************************************************************/
void PutUart0Ch(char ch){
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	0f 92       	push	r0
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
    13fc:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSR0A & (1 << UDRE0)));
    13fe:	00 00       	nop
    1400:	80 ec       	ldi	r24, 0xC0	; 192
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	fc 01       	movw	r30, r24
    1406:	80 81       	ld	r24, Z
    1408:	88 2f       	mov	r24, r24
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	80 72       	andi	r24, 0x20	; 32
    140e:	90 70       	andi	r25, 0x00	; 0
    1410:	21 e0       	ldi	r18, 0x01	; 1
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	09 f0       	breq	.+2      	; 0x1418 <_Z10PutUart0Chc+0x26>
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	22 23       	and	r18, r18
    141a:	91 f7       	brne	.-28     	; 0x1400 <_Z10PutUart0Chc+0xe>
	UDR0=ch;
    141c:	86 ec       	ldi	r24, 0xC6	; 198
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	29 81       	ldd	r18, Y+1	; 0x01
    1422:	fc 01       	movw	r30, r24
    1424:	20 83       	st	Z, r18
}
    1426:	0f 90       	pop	r0
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	08 95       	ret

0000142e <_Z6Print0Pc>:
/*************************************************************************************************************/
void Print0(char string[]){
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	00 d0       	rcall	.+0      	; 0x1434 <_Z6Print0Pc+0x6>
    1434:	0f 92       	push	r0
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	9b 83       	std	Y+3, r25	; 0x03
    143c:	8a 83       	std	Y+2, r24	; 0x02
	BYTE i=0;
    143e:	19 82       	std	Y+1, r1	; 0x01
	
	while (string[i]){
    1440:	0e c0       	rjmp	.+28     	; 0x145e <_Z6Print0Pc+0x30>
		PutUart0Ch(string[i++]);
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	88 2f       	mov	r24, r24
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	2a 81       	ldd	r18, Y+2	; 0x02
    144a:	3b 81       	ldd	r19, Y+3	; 0x03
    144c:	82 0f       	add	r24, r18
    144e:	93 1f       	adc	r25, r19
    1450:	fc 01       	movw	r30, r24
    1452:	80 81       	ld	r24, Z
    1454:	99 81       	ldd	r25, Y+1	; 0x01
    1456:	9f 5f       	subi	r25, 0xFF	; 255
    1458:	99 83       	std	Y+1, r25	; 0x01
    145a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <_Z10PutUart0Chc>
}
/*************************************************************************************************************/
void Print0(char string[]){
	BYTE i=0;
	
	while (string[i]){
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	88 2f       	mov	r24, r24
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	2a 81       	ldd	r18, Y+2	; 0x02
    1466:	3b 81       	ldd	r19, Y+3	; 0x03
    1468:	82 0f       	add	r24, r18
    146a:	93 1f       	adc	r25, r19
    146c:	fc 01       	movw	r30, r24
    146e:	90 81       	ld	r25, Z
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	99 23       	and	r25, r25
    1474:	09 f4       	brne	.+2      	; 0x1478 <_Z6Print0Pc+0x4a>
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	88 23       	and	r24, r24
    147a:	19 f7       	brne	.-58     	; 0x1442 <_Z6Print0Pc+0x14>
		PutUart0Ch(string[i++]);
	}
}
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	08 95       	ret

00001488 <__vector_13>:
//Global trip 
trip globalTrip;


/*-------------------------------------------------------------------ISR------------------------------------------------------------------------------*/
ISR(TIMER1_OVF_vect){
    1488:	1f 92       	push	r1
    148a:	0f 92       	push	r0
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	0f 92       	push	r0
    1490:	11 24       	eor	r1, r1
    1492:	2f 93       	push	r18
    1494:	3f 93       	push	r19
    1496:	4f 93       	push	r20
    1498:	5f 93       	push	r21
    149a:	6f 93       	push	r22
    149c:	7f 93       	push	r23
    149e:	8f 93       	push	r24
    14a0:	9f 93       	push	r25
    14a2:	af 93       	push	r26
    14a4:	bf 93       	push	r27
    14a6:	ef 93       	push	r30
    14a8:	ff 93       	push	r31
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
	cli();
    14b2:	f8 94       	cli
	//Check to see if we are going to slow to care.
	if (numberOfSpeedOverflows++ > BAD_SPEED_THRESH && !flagNoSpeed){
    14b4:	80 91 2a 01 	lds	r24, 0x012A
    14b8:	90 91 2b 01 	lds	r25, 0x012B
    14bc:	21 e0       	ldi	r18, 0x01	; 1
    14be:	85 30       	cpi	r24, 0x05	; 5
    14c0:	91 05       	cpc	r25, r1
    14c2:	08 f4       	brcc	.+2      	; 0x14c6 <__vector_13+0x3e>
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	01 96       	adiw	r24, 0x01	; 1
    14c8:	90 93 2b 01 	sts	0x012B, r25
    14cc:	80 93 2a 01 	sts	0x012A, r24
    14d0:	22 23       	and	r18, r18
    14d2:	31 f0       	breq	.+12     	; 0x14e0 <__vector_13+0x58>
    14d4:	80 91 0c 01 	lds	r24, 0x010C
    14d8:	88 23       	and	r24, r24
    14da:	11 f4       	brne	.+4      	; 0x14e0 <__vector_13+0x58>
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	01 c0       	rjmp	.+2      	; 0x14e2 <__vector_13+0x5a>
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	88 23       	and	r24, r24
    14e4:	39 f0       	breq	.+14     	; 0x14f4 <__vector_13+0x6c>
		//Let the INT0 know that on next interrupt it shouldn't calc speed, but initialize "speedPoints" in odometer class.
		flagNoSpeed=fTrue;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	80 93 0c 01 	sts	0x010C, r24
		globalTrip.resetSpeedPoints();
    14ec:	87 e8       	ldi	r24, 0x87	; 135
    14ee:	93 e0       	ldi	r25, 0x03	; 3
    14f0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN8odometer16resetSpeedPointsEv>
	}

	//SHow me that is happened with LED;
	prtLED |= (1 << bnSPEEDLED);
    14f4:	88 e2       	ldi	r24, 0x28	; 40
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	28 e2       	ldi	r18, 0x28	; 40
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	f9 01       	movw	r30, r18
    14fe:	20 81       	ld	r18, Z
    1500:	20 61       	ori	r18, 0x10	; 16
    1502:	fc 01       	movw	r30, r24
    1504:	20 83       	st	Z, r18
	Wait_ms(2);
    1506:	82 e0       	ldi	r24, 0x02	; 2
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <_Z7Wait_msi>
	prtLED &= ~(1 << bnSPEEDLED);
    150e:	88 e2       	ldi	r24, 0x28	; 40
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	28 e2       	ldi	r18, 0x28	; 40
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	f9 01       	movw	r30, r18
    1518:	20 81       	ld	r18, Z
    151a:	2f 7e       	andi	r18, 0xEF	; 239
    151c:	fc 01       	movw	r30, r24
    151e:	20 83       	st	Z, r18
	
	sei();
    1520:	78 94       	sei
}
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	ff 91       	pop	r31
    1528:	ef 91       	pop	r30
    152a:	bf 91       	pop	r27
    152c:	af 91       	pop	r26
    152e:	9f 91       	pop	r25
    1530:	8f 91       	pop	r24
    1532:	7f 91       	pop	r23
    1534:	6f 91       	pop	r22
    1536:	5f 91       	pop	r21
    1538:	4f 91       	pop	r20
    153a:	3f 91       	pop	r19
    153c:	2f 91       	pop	r18
    153e:	0f 90       	pop	r0
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	0f 90       	pop	r0
    1544:	1f 90       	pop	r1
    1546:	18 95       	reti

00001548 <__vector_1>:

//This is hit when there is a speed magnet hit.
ISR(INT0_vect){
    1548:	1f 92       	push	r1
    154a:	0f 92       	push	r0
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	0f 92       	push	r0
    1550:	11 24       	eor	r1, r1
    1552:	2f 93       	push	r18
    1554:	3f 93       	push	r19
    1556:	4f 93       	push	r20
    1558:	5f 93       	push	r21
    155a:	6f 93       	push	r22
    155c:	7f 93       	push	r23
    155e:	8f 93       	push	r24
    1560:	9f 93       	push	r25
    1562:	af 93       	push	r26
    1564:	bf 93       	push	r27
    1566:	ef 93       	push	r30
    1568:	ff 93       	push	r31
    156a:	cf 93       	push	r28
    156c:	df 93       	push	r29
    156e:	00 d0       	rcall	.+0      	; 0x1570 <__vector_1+0x28>
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
	cli();
    1574:	f8 94       	cli
	volatile static unsigned int interruptsSinceLastCalc=0;
	unsigned int value=TCNT1;
    1576:	84 e8       	ldi	r24, 0x84	; 132
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	fc 01       	movw	r30, r24
    157c:	80 81       	ld	r24, Z
    157e:	91 81       	ldd	r25, Z+1	; 0x01
    1580:	9a 83       	std	Y+2, r25	; 0x02
    1582:	89 83       	std	Y+1, r24	; 0x01

	/**********************************************************************************************/
	//THis should be replaced by a flag that every second is sent high to calculate the speed. At 16MHz, will hit before an issue
	//happens. Could also just have screen pull speed data before updating screen.
	if (interruptsSinceLastCalc++ > CALC_SPEED_THRESH){
    1584:	80 91 cb 03 	lds	r24, 0x03CB
    1588:	90 91 cc 03 	lds	r25, 0x03CC
    158c:	21 e0       	ldi	r18, 0x01	; 1
    158e:	84 30       	cpi	r24, 0x04	; 4
    1590:	91 05       	cpc	r25, r1
    1592:	08 f4       	brcc	.+2      	; 0x1596 <__vector_1+0x4e>
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	01 96       	adiw	r24, 0x01	; 1
    1598:	90 93 cc 03 	sts	0x03CC, r25
    159c:	80 93 cb 03 	sts	0x03CB, r24
    15a0:	22 23       	and	r18, r18
    15a2:	39 f0       	breq	.+14     	; 0x15b2 <__vector_1+0x6a>
		flagUpdateUserStats=fTrue;
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	80 93 2e 01 	sts	0x012E, r24
		interruptsSinceLastCalc=0;
    15aa:	10 92 cc 03 	sts	0x03CC, r1
    15ae:	10 92 cb 03 	sts	0x03CB, r1
	}
	/**********************************************************************************************/
	
	//Show me that it saw an interrupt.
	prtLED |= (1 << bnSPEEDLED);
    15b2:	88 e2       	ldi	r24, 0x28	; 40
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	28 e2       	ldi	r18, 0x28	; 40
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	f9 01       	movw	r30, r18
    15bc:	20 81       	ld	r18, Z
    15be:	20 61       	ori	r18, 0x10	; 16
    15c0:	fc 01       	movw	r30, r24
    15c2:	20 83       	st	Z, r18
	Wait_ms(2);
    15c4:	82 e0       	ldi	r24, 0x02	; 2
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <_Z7Wait_msi>
	prtLED &= ~(1 << bnSPEEDLED);
    15cc:	88 e2       	ldi	r24, 0x28	; 40
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	28 e2       	ldi	r18, 0x28	; 40
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	f9 01       	movw	r30, r18
    15d6:	20 81       	ld	r18, Z
    15d8:	2f 7e       	andi	r18, 0xEF	; 239
    15da:	fc 01       	movw	r30, r24
    15dc:	20 83       	st	Z, r18
	
	if (flagNoSpeed){
    15de:	90 91 0c 01 	lds	r25, 0x010C
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	99 23       	and	r25, r25
    15e6:	09 f4       	brne	.+2      	; 0x15ea <__vector_1+0xa2>
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	88 23       	and	r24, r24
    15ec:	59 f0       	breq	.+22     	; 0x1604 <__vector_1+0xbc>
		//Something to alert that speed was 0 and print it to screen.
		interruptsSinceLastCalc=0;
    15ee:	10 92 cc 03 	sts	0x03CC, r1
    15f2:	10 92 cb 03 	sts	0x03CB, r1
		flagNoSpeed=fFalse;
    15f6:	10 92 0c 01 	sts	0x010C, r1
		globalTrip.resetSpeedPoints();
    15fa:	87 e8       	ldi	r24, 0x87	; 135
    15fc:	93 e0       	ldi	r25, 0x03	; 3
    15fe:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN8odometer16resetSpeedPointsEv>
    1602:	0d c0       	rjmp	.+26     	; 0x161e <__vector_1+0xd6>
	} else {
		globalTrip.addSpeedDataPoint(value+(numberOfSpeedOverflows*TIMER1_OFFSET));
    1604:	80 91 2a 01 	lds	r24, 0x012A
    1608:	90 91 2b 01 	lds	r25, 0x012B
    160c:	29 81       	ldd	r18, Y+1	; 0x01
    160e:	3a 81       	ldd	r19, Y+2	; 0x02
    1610:	28 1b       	sub	r18, r24
    1612:	39 0b       	sbc	r19, r25
    1614:	87 e8       	ldi	r24, 0x87	; 135
    1616:	93 e0       	ldi	r25, 0x03	; 3
    1618:	b9 01       	movw	r22, r18
    161a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN8odometer17addSpeedDataPointEj>
	}

	//Reset TCNT1
	TCNT1=0x00;
    161e:	84 e8       	ldi	r24, 0x84	; 132
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	fc 01       	movw	r30, r24
    1624:	11 82       	std	Z+1, r1	; 0x01
    1626:	10 82       	st	Z, r1
	sei();	
    1628:	78 94       	sei
}
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	ff 91       	pop	r31
    1634:	ef 91       	pop	r30
    1636:	bf 91       	pop	r27
    1638:	af 91       	pop	r26
    163a:	9f 91       	pop	r25
    163c:	8f 91       	pop	r24
    163e:	7f 91       	pop	r23
    1640:	6f 91       	pop	r22
    1642:	5f 91       	pop	r21
    1644:	4f 91       	pop	r20
    1646:	3f 91       	pop	r19
    1648:	2f 91       	pop	r18
    164a:	0f 90       	pop	r0
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	0f 90       	pop	r0
    1650:	1f 90       	pop	r1
    1652:	18 95       	reti

00001654 <__vector_14>:


//Toggled every 4ms roughly. 1/(8MHz/128/248) * 2
ISR(TIMER0_COMPA_vect){
    1654:	1f 92       	push	r1
    1656:	0f 92       	push	r0
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	0f 92       	push	r0
    165c:	11 24       	eor	r1, r1
    165e:	2f 93       	push	r18
    1660:	3f 93       	push	r19
    1662:	4f 93       	push	r20
    1664:	5f 93       	push	r21
    1666:	6f 93       	push	r22
    1668:	7f 93       	push	r23
    166a:	8f 93       	push	r24
    166c:	9f 93       	push	r25
    166e:	af 93       	push	r26
    1670:	bf 93       	push	r27
    1672:	ef 93       	push	r30
    1674:	ff 93       	push	r31
    1676:	cf 93       	push	r28
    1678:	df 93       	push	r29
    167a:	00 d0       	rcall	.+0      	; 0x167c <__vector_14+0x28>
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
	cli();
    1680:	f8 94       	cli
	//Declare variables
	volatile WORD signal=0;
    1682:	1a 82       	std	Y+2, r1	; 0x02
    1684:	19 82       	std	Y+1, r1	; 0x01
	volatile static unsigned int location=0;
	
	//Increment N (time should reflect number of ms between timer interrupts), get ADC reading, see if newSample is good for anything.
	signal = GetADC();		//retrieves ADC reading on ADC0
    1686:	0e 94 c4 0c 	call	0x1988	; 0x1988 <_Z6GetADCv>
    168a:	9a 83       	std	Y+2, r25	; 0x02
    168c:	89 83       	std	Y+1, r24	; 0x01
	HRSAMPLES[location++]=signal;
    168e:	80 91 c9 03 	lds	r24, 0x03C9
    1692:	90 91 ca 03 	lds	r25, 0x03CA
    1696:	49 81       	ldd	r20, Y+1	; 0x01
    1698:	5a 81       	ldd	r21, Y+2	; 0x02
    169a:	9c 01       	movw	r18, r24
    169c:	22 0f       	add	r18, r18
    169e:	33 1f       	adc	r19, r19
    16a0:	21 5d       	subi	r18, 0xD1	; 209
    16a2:	3e 4f       	sbci	r19, 0xFE	; 254
    16a4:	f9 01       	movw	r30, r18
    16a6:	51 83       	std	Z+1, r21	; 0x01
    16a8:	40 83       	st	Z, r20
    16aa:	01 96       	adiw	r24, 0x01	; 1
    16ac:	90 93 ca 03 	sts	0x03CA, r25
    16b0:	80 93 c9 03 	sts	0x03C9, r24
	if (location >= 300){location=0; globalTrip.calculateHR(HRSAMPLES, 300);}
    16b4:	80 91 c9 03 	lds	r24, 0x03C9
    16b8:	90 91 ca 03 	lds	r25, 0x03CA
    16bc:	21 e0       	ldi	r18, 0x01	; 1
    16be:	f1 e0       	ldi	r31, 0x01	; 1
    16c0:	8c 32       	cpi	r24, 0x2C	; 44
    16c2:	9f 07       	cpc	r25, r31
    16c4:	08 f4       	brcc	.+2      	; 0x16c8 <__vector_14+0x74>
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	22 23       	and	r18, r18
    16ca:	69 f0       	breq	.+26     	; 0x16e6 <__vector_14+0x92>
    16cc:	10 92 ca 03 	sts	0x03CA, r1
    16d0:	10 92 c9 03 	sts	0x03C9, r1
    16d4:	89 eb       	ldi	r24, 0xB9	; 185
    16d6:	93 e0       	ldi	r25, 0x03	; 3
    16d8:	2f e2       	ldi	r18, 0x2F	; 47
    16da:	31 e0       	ldi	r19, 0x01	; 1
    16dc:	b9 01       	movw	r22, r18
    16de:	4c e2       	ldi	r20, 0x2C	; 44
    16e0:	51 e0       	ldi	r21, 0x01	; 1
    16e2:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN12heartMonitor11calculateHREPji>
/*		
		}}*/	
	//Re-enable interrupts
	sei();
    16e6:	78 94       	sei
}
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	ff 91       	pop	r31
    16f2:	ef 91       	pop	r30
    16f4:	bf 91       	pop	r27
    16f6:	af 91       	pop	r26
    16f8:	9f 91       	pop	r25
    16fa:	8f 91       	pop	r24
    16fc:	7f 91       	pop	r23
    16fe:	6f 91       	pop	r22
    1700:	5f 91       	pop	r21
    1702:	4f 91       	pop	r20
    1704:	3f 91       	pop	r19
    1706:	2f 91       	pop	r18
    1708:	0f 90       	pop	r0
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	0f 90       	pop	r0
    170e:	1f 90       	pop	r1
    1710:	18 95       	reti

00001712 <main>:
/*-------------------------------------------------------------------END-ISR------------------------------------------------------------------------------*/

/*-------------------------------------------------------------------MAIN---------------------------------------------------------------------------------*/

//Main Program
int main(void){
    1712:	0f 93       	push	r16
    1714:	1f 93       	push	r17
    1716:	cf 93       	push	r28
    1718:	df 93       	push	r29
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
    171e:	64 97       	sbiw	r28, 0x14	; 20
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	de bf       	out	0x3e, r29	; 62
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	cd bf       	out	0x3d, r28	; 61
	DeviceInit();
    172a:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <_Z10DeviceInitv>
	AppInit(MYUBRR);
    172e:	83 e3       	ldi	r24, 0x33	; 51
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	0e 94 0f 0c 	call	0x181e	; 0x181e <_Z7AppInitj>
	Print0("Hello...");
    1736:	8d e0       	ldi	r24, 0x0D	; 13
    1738:	91 e0       	ldi	r25, 0x01	; 1
    173a:	0e 94 17 0a 	call	0x142e	; 0x142e <_Z6Print0Pc>
	Wait_ms(500);
    173e:	84 ef       	ldi	r24, 0xF4	; 244
    1740:	91 e0       	ldi	r25, 0x01	; 1
    1742:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <_Z7Wait_msi>
	initHRSensing();	
    1746:	0e 94 a5 0c 	call	0x194a	; 0x194a <_Z13initHRSensingv>
	initSpeedSensing();
    174a:	0e 94 81 0c 	call	0x1902	; 0x1902 <_Z16initSpeedSensingv>
	sei();
    174e:	78 94       	sei
    1750:	01 c0       	rjmp	.+2      	; 0x1754 <main+0x42>
	while (fTrue){
    1752:	00 00       	nop
		if (flagUpdateUserStats){
    1754:	80 91 2e 01 	lds	r24, 0x012E
    1758:	88 23       	and	r24, r24
    175a:	69 f1       	breq	.+90     	; 0x17b6 <main+0xa4>
			cli();
    175c:	f8 94       	cli
			//Declare variables
			double speed, currentHR;
			char speedString[8], BPMstring[8];
			
			//Do work on HR
			Print0("Processing...");
    175e:	86 e1       	ldi	r24, 0x16	; 22
    1760:	91 e0       	ldi	r25, 0x01	; 1
    1762:	0e 94 17 0a 	call	0x142e	; 0x142e <_Z6Print0Pc>
			currentHR = globalTrip.getCurrentHR();
    1766:	89 eb       	ldi	r24, 0xB9	; 185
    1768:	93 e0       	ldi	r25, 0x03	; 3
    176a:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <_ZN12heartMonitor12getCurrentHREv>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	89 83       	std	Y+1, r24	; 0x01
    1774:	9a 83       	std	Y+2, r25	; 0x02
    1776:	ab 83       	std	Y+3, r26	; 0x03
    1778:	bc 83       	std	Y+4, r27	; 0x04
			dtostrf(currentHR, 5, 2, BPMstring);
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	9a 81       	ldd	r25, Y+2	; 0x02
    177e:	ab 81       	ldd	r26, Y+3	; 0x03
    1780:	bc 81       	ldd	r27, Y+4	; 0x04
    1782:	fe 01       	movw	r30, r28
    1784:	3d 96       	adiw	r30, 0x0d	; 13
    1786:	bc 01       	movw	r22, r24
    1788:	cd 01       	movw	r24, r26
    178a:	45 e0       	ldi	r20, 0x05	; 5
    178c:	22 e0       	ldi	r18, 0x02	; 2
    178e:	8f 01       	movw	r16, r30
    1790:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <dtostrf>
			BPMstring[9]='\0';
    1794:	1e 8a       	std	Y+22, r1	; 0x16
			BPMstring[8]='.';
    1796:	8e e2       	ldi	r24, 0x2E	; 46
    1798:	8d 8b       	std	Y+21, r24	; 0x15
			Print0("BPM:");
    179a:	84 e2       	ldi	r24, 0x24	; 36
    179c:	91 e0       	ldi	r25, 0x01	; 1
    179e:	0e 94 17 0a 	call	0x142e	; 0x142e <_Z6Print0Pc>
			Print0(BPMstring);
    17a2:	ce 01       	movw	r24, r28
    17a4:	0d 96       	adiw	r24, 0x0d	; 13
    17a6:	0e 94 17 0a 	call	0x142e	; 0x142e <_Z6Print0Pc>
			PutUart0Ch('-');
    17aa:	8d e2       	ldi	r24, 0x2D	; 45
    17ac:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <_Z10PutUart0Chc>
			speedString[6]='.';
			speedString[7]='\0';
			Print0("Speed:");
			Print0(speedString);*/
			//Reset Flag
			flagUpdateUserStats=fFalse;
    17b0:	10 92 2e 01 	sts	0x012E, r1
			//Wait_ms(1000);
			sei();
    17b4:	78 94       	sei
		}//end calc speed	
		
		if (dead){
    17b6:	90 91 2d 01 	lds	r25, 0x012D
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	99 23       	and	r25, r25
    17be:	09 f4       	brne	.+2      	; 0x17c2 <main+0xb0>
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	88 23       	and	r24, r24
    17c4:	31 f2       	breq	.-116    	; 0x1752 <main+0x40>
			return 1; 
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
			//Setup to sleep
			powerDown();
		}
	}//end while True	
	return 0;
}//end main
    17ca:	64 96       	adiw	r28, 0x14	; 20
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	de bf       	out	0x3e, r29	; 62
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	cd bf       	out	0x3d, r28	; 61
    17d6:	df 91       	pop	r29
    17d8:	cf 91       	pop	r28
    17da:	1f 91       	pop	r17
    17dc:	0f 91       	pop	r16
    17de:	08 95       	ret

000017e0 <_Z10DeviceInitv>:

/*-------------------------------------------------------------------END-MAIN------------------------------------------------------------------------------*/

/*************************************************************************************************************/
void DeviceInit(){
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
	//Set all ports to input with no pull
	DDRB = 0;
    17e8:	84 e2       	ldi	r24, 0x24	; 36
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	fc 01       	movw	r30, r24
    17ee:	10 82       	st	Z, r1
	DDRC = 0;
    17f0:	87 e2       	ldi	r24, 0x27	; 39
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	fc 01       	movw	r30, r24
    17f6:	10 82       	st	Z, r1
	DDRD = 0;
    17f8:	8a e2       	ldi	r24, 0x2A	; 42
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	fc 01       	movw	r30, r24
    17fe:	10 82       	st	Z, r1
	
	PORTB = 0;
    1800:	85 e2       	ldi	r24, 0x25	; 37
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	fc 01       	movw	r30, r24
    1806:	10 82       	st	Z, r1
	PORTC = 0;
    1808:	88 e2       	ldi	r24, 0x28	; 40
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	fc 01       	movw	r30, r24
    180e:	10 82       	st	Z, r1
	PORTD = 0;
    1810:	8b e2       	ldi	r24, 0x2B	; 43
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	fc 01       	movw	r30, r24
    1816:	10 82       	st	Z, r1
}
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	08 95       	ret

0000181e <_Z7AppInitj>:
/*************************************************************************************************************/
void AppInit(unsigned int ubrr){
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	00 d0       	rcall	.+0      	; 0x1824 <_Z7AppInitj+0x6>
    1824:	00 d0       	rcall	.+0      	; 0x1826 <_Z7AppInitj+0x8>
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	9c 83       	std	Y+4, r25	; 0x04
    182c:	8b 83       	std	Y+3, r24	; 0x03
	
	//Set high and low byte of baud rate, then enable pins and functions
	UBRR0L = ubrr;
    182e:	84 ec       	ldi	r24, 0xC4	; 196
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	2b 81       	ldd	r18, Y+3	; 0x03
    1834:	fc 01       	movw	r30, r24
    1836:	20 83       	st	Z, r18
	UBRR0H |= (ubrr >> 8);
    1838:	85 ec       	ldi	r24, 0xC5	; 197
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	25 ec       	ldi	r18, 0xC5	; 197
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	f9 01       	movw	r30, r18
    1842:	40 81       	ld	r20, Z
    1844:	2b 81       	ldd	r18, Y+3	; 0x03
    1846:	3c 81       	ldd	r19, Y+4	; 0x04
    1848:	23 2f       	mov	r18, r19
    184a:	33 27       	eor	r19, r19
    184c:	24 2b       	or	r18, r20
    184e:	fc 01       	movw	r30, r24
    1850:	20 83       	st	Z, r18
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);		//Enable TX0 and RX0
    1852:	81 ec       	ldi	r24, 0xC1	; 193
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	28 e1       	ldi	r18, 0x18	; 24
    1858:	fc 01       	movw	r30, r24
    185a:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);		//Async, 8 data bits no parity
    185c:	82 ec       	ldi	r24, 0xC2	; 194
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	26 e0       	ldi	r18, 0x06	; 6
    1862:	fc 01       	movw	r30, r24
    1864:	20 83       	st	Z, r18
	
	//Disable power to certain modules
	PRR |= (1 << PRTWI)|(1 << PRTIM2)|(1 << PRSPI);  //Turn off everything 
    1866:	84 e6       	ldi	r24, 0x64	; 100
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	24 e6       	ldi	r18, 0x64	; 100
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	f9 01       	movw	r30, r18
    1870:	20 81       	ld	r18, Z
    1872:	24 6c       	ori	r18, 0xC4	; 196
    1874:	fc 01       	movw	r30, r24
    1876:	20 83       	st	Z, r18

	//Setup ADC
	ADCSRA |= (1 << ADEN)|(1 << ADPS1);		//enable ADC with clock division factor of 8
    1878:	8a e7       	ldi	r24, 0x7A	; 122
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	2a e7       	ldi	r18, 0x7A	; 122
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	f9 01       	movw	r30, r18
    1882:	20 81       	ld	r18, Z
    1884:	22 68       	ori	r18, 0x82	; 130
    1886:	fc 01       	movw	r30, r24
    1888:	20 83       	st	Z, r18
	ADMUX |= (1 << REFS0)|(1 << MUX1);		//internal 3.3V reference on AVCC, channel ADC2
    188a:	8c e7       	ldi	r24, 0x7C	; 124
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	2c e7       	ldi	r18, 0x7C	; 124
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	f9 01       	movw	r30, r18
    1894:	20 81       	ld	r18, Z
    1896:	22 64       	ori	r18, 0x42	; 66
    1898:	fc 01       	movw	r30, r24
    189a:	20 83       	st	Z, r18
	
	//Setup LED Blinking Port
	ddrLED |= (1 << bnLED)|(1 << bnSPEEDLED);
    189c:	87 e2       	ldi	r24, 0x27	; 39
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	27 e2       	ldi	r18, 0x27	; 39
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	f9 01       	movw	r30, r18
    18a6:	20 81       	ld	r18, Z
    18a8:	20 63       	ori	r18, 0x30	; 48
    18aa:	fc 01       	movw	r30, r24
    18ac:	20 83       	st	Z, r18
	prtLED &= ~((1 << bnSPEEDLED)|(1 << bnLED));	//off initially.
    18ae:	88 e2       	ldi	r24, 0x28	; 40
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	28 e2       	ldi	r18, 0x28	; 40
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	f9 01       	movw	r30, r18
    18b8:	20 81       	ld	r18, Z
    18ba:	2f 7c       	andi	r18, 0xCF	; 207
    18bc:	fc 01       	movw	r30, r24
    18be:	20 83       	st	Z, r18
	
	for (int i=0; i<200; i++){
    18c0:	1a 82       	std	Y+2, r1	; 0x02
    18c2:	19 82       	std	Y+1, r1	; 0x01
    18c4:	0e c0       	rjmp	.+28     	; 0x18e2 <_Z7AppInitj+0xc4>
		HRSAMPLES[i]=0;
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ca:	88 0f       	add	r24, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	81 5d       	subi	r24, 0xD1	; 209
    18d0:	9e 4f       	sbci	r25, 0xFE	; 254
    18d2:	fc 01       	movw	r30, r24
    18d4:	11 82       	std	Z+1, r1	; 0x01
    18d6:	10 82       	st	Z, r1
	
	//Setup LED Blinking Port
	ddrLED |= (1 << bnLED)|(1 << bnSPEEDLED);
	prtLED &= ~((1 << bnSPEEDLED)|(1 << bnLED));	//off initially.
	
	for (int i=0; i<200; i++){
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	9a 81       	ldd	r25, Y+2	; 0x02
    18dc:	01 96       	adiw	r24, 0x01	; 1
    18de:	9a 83       	std	Y+2, r25	; 0x02
    18e0:	89 83       	std	Y+1, r24	; 0x01
    18e2:	21 e0       	ldi	r18, 0x01	; 1
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	9a 81       	ldd	r25, Y+2	; 0x02
    18e8:	88 3c       	cpi	r24, 0xC8	; 200
    18ea:	91 05       	cpc	r25, r1
    18ec:	0c f0       	brlt	.+2      	; 0x18f0 <_Z7AppInitj+0xd2>
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	22 23       	and	r18, r18
    18f2:	49 f7       	brne	.-46     	; 0x18c6 <_Z7AppInitj+0xa8>
		HRSAMPLES[i]=0;
	}	
		
}
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	08 95       	ret

00001902 <_Z16initSpeedSensingv>:
/*************************************************************************************************************/
void initSpeedSensing(){
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
	//Initialize Timer 1(16-bit), counter is read on an interrupt to measure speed. assumes rider is going  above a certain speed for initial test.
	TCCR1B |= (1 << CS12); 				//Prescaler of 256 for system clock
    190a:	81 e8       	ldi	r24, 0x81	; 129
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	21 e8       	ldi	r18, 0x81	; 129
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	f9 01       	movw	r30, r18
    1914:	20 81       	ld	r18, Z
    1916:	24 60       	ori	r18, 0x04	; 4
    1918:	fc 01       	movw	r30, r24
    191a:	20 83       	st	Z, r18
	TIFR1= (1 << TOV2);					//Make sure the overflow flag is not already set
    191c:	86 e3       	ldi	r24, 0x36	; 54
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	21 e0       	ldi	r18, 0x01	; 1
    1922:	fc 01       	movw	r30, r24
    1924:	20 83       	st	Z, r18
	TCNT1 = 0x00;
    1926:	84 e8       	ldi	r24, 0x84	; 132
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	fc 01       	movw	r30, r24
    192c:	11 82       	std	Z+1, r1	; 0x01
    192e:	10 82       	st	Z, r1
	TIMSK1=(1 << TOIE2);
    1930:	8f e6       	ldi	r24, 0x6F	; 111
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	21 e0       	ldi	r18, 0x01	; 1
    1936:	fc 01       	movw	r30, r24
    1938:	20 83       	st	Z, r18
	
	//Enable SPeed interrupt
	EICRA = (1 << ISC01)|(1 << ISC00);
    193a:	89 e6       	ldi	r24, 0x69	; 105
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	23 e0       	ldi	r18, 0x03	; 3
    1940:	fc 01       	movw	r30, r24
    1942:	20 83       	st	Z, r18
	//EIMSK = (1 << INT0);
	
}
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	08 95       	ret

0000194a <_Z13initHRSensingv>:

/*************************************************************************************************************/
void initHRSensing(){
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
	//Initialize timer 2, counter compare on TCNTA compare equals
	TCCR0A = (1 << WGM01);				//OCRA good, TOV set on top. TCNT2 cleared when match occurs
    1952:	84 e4       	ldi	r24, 0x44	; 68
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	22 e0       	ldi	r18, 0x02	; 2
    1958:	fc 01       	movw	r30, r24
    195a:	20 83       	st	Z, r18
	TCCR0B = (1 << CS02);				//clk/256
    195c:	85 e4       	ldi	r24, 0x45	; 69
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	24 e0       	ldi	r18, 0x04	; 4
    1962:	fc 01       	movw	r30, r24
    1964:	20 83       	st	Z, r18
	OCR0A = ONE_MS*NUM_MS;					//Number of Milliseconds
    1966:	87 e4       	ldi	r24, 0x47	; 71
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	2f ef       	ldi	r18, 0xFF	; 255
    196c:	fc 01       	movw	r30, r24
    196e:	20 83       	st	Z, r18
	TCNT0 = 0x00;						//Initialize
    1970:	86 e4       	ldi	r24, 0x46	; 70
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	fc 01       	movw	r30, r24
    1976:	10 82       	st	Z, r1
	TIMSK0 = (1 << OCIE0A);			//enable OCIE2A
    1978:	8e e6       	ldi	r24, 0x6E	; 110
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	22 e0       	ldi	r18, 0x02	; 2
    197e:	fc 01       	movw	r30, r24
    1980:	20 83       	st	Z, r18
}
    1982:	df 91       	pop	r29
    1984:	cf 91       	pop	r28
    1986:	08 95       	ret

00001988 <_Z6GetADCv>:


/*************************************************************************************************************/

WORD GetADC(){
    1988:	cf 93       	push	r28
    198a:	df 93       	push	r29
    198c:	00 d0       	rcall	.+0      	; 0x198e <_Z6GetADCv+0x6>
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
	//Disable global interrupts; declare variables.
	//cli();		//GLOBAL INTERRUPTS ALREADY DISABLED
	volatile WORD ADCreading=0;
    1992:	1a 82       	std	Y+2, r1	; 0x02
    1994:	19 82       	std	Y+1, r1	; 0x01
	volatile static WORD reps=0;
	
	//Take two ADC readings, throw the first one out.
	//for (int i=0; i<2; i++){ADCSRA |= (1 << ADSC); while (ADCSRA & (1 << ADSC));} //does two
	ADCSRA |= (1 << ADSC);
    1996:	8a e7       	ldi	r24, 0x7A	; 122
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	2a e7       	ldi	r18, 0x7A	; 122
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	f9 01       	movw	r30, r18
    19a0:	20 81       	ld	r18, Z
    19a2:	20 64       	ori	r18, 0x40	; 64
    19a4:	fc 01       	movw	r30, r24
    19a6:	20 83       	st	Z, r18
	while(ADCSRA & (1 << ADSC));
    19a8:	8a e7       	ldi	r24, 0x7A	; 122
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	fc 01       	movw	r30, r24
    19ae:	80 81       	ld	r24, Z
    19b0:	88 2f       	mov	r24, r24
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	80 74       	andi	r24, 0x40	; 64
    19b6:	90 70       	andi	r25, 0x00	; 0
    19b8:	21 e0       	ldi	r18, 0x01	; 1
    19ba:	00 97       	sbiw	r24, 0x00	; 0
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <_Z6GetADCv+0x38>
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	22 23       	and	r18, r18
    19c2:	91 f7       	brne	.-28     	; 0x19a8 <_Z6GetADCv+0x20>
	
	//Get the last ADC reading.	
	ADCreading = ADCL;
    19c4:	88 e7       	ldi	r24, 0x78	; 120
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	fc 01       	movw	r30, r24
    19ca:	80 81       	ld	r24, Z
    19cc:	88 2f       	mov	r24, r24
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	9a 83       	std	Y+2, r25	; 0x02
    19d2:	89 83       	std	Y+1, r24	; 0x01
	ADCreading |= (ADCH << 8);
    19d4:	89 e7       	ldi	r24, 0x79	; 121
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	fc 01       	movw	r30, r24
    19da:	80 81       	ld	r24, Z
    19dc:	88 2f       	mov	r24, r24
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	98 2f       	mov	r25, r24
    19e2:	88 27       	eor	r24, r24
    19e4:	9c 01       	movw	r18, r24
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
    19e8:	9a 81       	ldd	r25, Y+2	; 0x02
    19ea:	82 2b       	or	r24, r18
    19ec:	93 2b       	or	r25, r19
    19ee:	9a 83       	std	Y+2, r25	; 0x02
    19f0:	89 83       	std	Y+1, r24	; 0x01
	}	
	********************/
	
	//Re-enable global interrupts. 
	//sei();
	return ADCreading;
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	df 91       	pop	r29
    19fc:	cf 91       	pop	r28
    19fe:	08 95       	ret

00001a00 <_Z7Wait_msi>:
	
/*************************************************************************************************************/
void Wait_ms(volatile int delay){
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    1a04:	00 d0       	rcall	.+0      	; 0x1a06 <_Z7Wait_msi+0x6>
    1a06:	00 d0       	rcall	.+0      	; 0x1a08 <_Z7Wait_msi+0x8>
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	9c 83       	std	Y+4, r25	; 0x04
    1a0e:	8b 83       	std	Y+3, r24	; 0x03
	volatile int i=0;
    1a10:	1a 82       	std	Y+2, r1	; 0x02
    1a12:	19 82       	std	Y+1, r1	; 0x01
	while (delay > 0){
    1a14:	18 c0       	rjmp	.+48     	; 0x1a46 <_Z7Wait_msi+0x46>
		for (i=0; i < 400; i++){
    1a16:	1a 82       	std	Y+2, r1	; 0x02
    1a18:	19 82       	std	Y+1, r1	; 0x01
    1a1a:	06 c0       	rjmp	.+12     	; 0x1a28 <_Z7Wait_msi+0x28>
			asm volatile("nop");
    1a1c:	00 00       	nop
	
/*************************************************************************************************************/
void Wait_ms(volatile int delay){
	volatile int i=0;
	while (delay > 0){
		for (i=0; i < 400; i++){
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	9a 81       	ldd	r25, Y+2	; 0x02
    1a22:	01 96       	adiw	r24, 0x01	; 1
    1a24:	9a 83       	std	Y+2, r25	; 0x02
    1a26:	89 83       	std	Y+1, r24	; 0x01
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2c:	21 e0       	ldi	r18, 0x01	; 1
    1a2e:	31 e0       	ldi	r19, 0x01	; 1
    1a30:	80 39       	cpi	r24, 0x90	; 144
    1a32:	93 07       	cpc	r25, r19
    1a34:	0c f0       	brlt	.+2      	; 0x1a38 <_Z7Wait_msi+0x38>
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	22 23       	and	r18, r18
    1a3a:	81 f7       	brne	.-32     	; 0x1a1c <_Z7Wait_msi+0x1c>
			asm volatile("nop");
		}
		delay--;
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	9c 83       	std	Y+4, r25	; 0x04
    1a44:	8b 83       	std	Y+3, r24	; 0x03
}
	
/*************************************************************************************************************/
void Wait_ms(volatile int delay){
	volatile int i=0;
	while (delay > 0){
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4a:	21 e0       	ldi	r18, 0x01	; 1
    1a4c:	18 16       	cp	r1, r24
    1a4e:	19 06       	cpc	r1, r25
    1a50:	0c f0       	brlt	.+2      	; 0x1a54 <_Z7Wait_msi+0x54>
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	22 23       	and	r18, r18
    1a56:	f9 f6       	brne	.-66     	; 0x1a16 <_Z7Wait_msi+0x16>
		for (i=0; i < 400; i++){
			asm volatile("nop");
		}
		delay--;
	}	
}
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	df 91       	pop	r29
    1a62:	cf 91       	pop	r28
    1a64:	08 95       	ret

00001a66 <_Z9powerDownv>:
/*************************************************************************************************************/

void powerDown(){
    1a66:	cf 93       	push	r28
    1a68:	df 93       	push	r29
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
	cli();
    1a6e:	f8 94       	cli
	SMCR = (1 << SM1);	//Power down.
    1a70:	83 e5       	ldi	r24, 0x53	; 83
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	24 e0       	ldi	r18, 0x04	; 4
    1a76:	fc 01       	movw	r30, r24
    1a78:	20 83       	st	Z, r18
	SMCR |= (1 << SE);	//Enable sleep
    1a7a:	83 e5       	ldi	r24, 0x53	; 83
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	23 e5       	ldi	r18, 0x53	; 83
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	f9 01       	movw	r30, r18
    1a84:	20 81       	ld	r18, Z
    1a86:	21 60       	ori	r18, 0x01	; 1
    1a88:	fc 01       	movw	r30, r24
    1a8a:	20 83       	st	Z, r18
	Wait_ms(1);
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <_Z7Wait_msi>
	sei();	//allow it to be woken up on an int from WAVR.
    1a94:	78 94       	sei
	asm volatile("SLEEP");	//Go to sleep/power down
    1a96:	88 95       	sleep
	
}
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	08 95       	ret

00001a9e <_Z41__static_initialization_and_destruction_0ii>:
    1a9e:	cf 93       	push	r28
    1aa0:	df 93       	push	r29
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <_Z41__static_initialization_and_destruction_0ii+0x6>
    1aa4:	00 d0       	rcall	.+0      	; 0x1aa6 <_Z41__static_initialization_and_destruction_0ii+0x8>
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	9a 83       	std	Y+2, r25	; 0x02
    1aac:	89 83       	std	Y+1, r24	; 0x01
    1aae:	7c 83       	std	Y+4, r23	; 0x04
    1ab0:	6b 83       	std	Y+3, r22	; 0x03
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab6:	81 30       	cpi	r24, 0x01	; 1
    1ab8:	91 05       	cpc	r25, r1
    1aba:	51 f4       	brne	.+20     	; 0x1ad0 <_Z41__static_initialization_and_destruction_0ii+0x32>
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac0:	2f ef       	ldi	r18, 0xFF	; 255
    1ac2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ac4:	92 07       	cpc	r25, r18
    1ac6:	21 f4       	brne	.+8      	; 0x1ad0 <_Z41__static_initialization_and_destruction_0ii+0x32>
volatile BOOL QS=fFalse, flagNoSpeed=fTrue, dead=fFalse;
BOOL flagUpdateUserStats=fFalse;
unsigned int HRSAMPLES[300];

//Global trip 
trip globalTrip;
    1ac8:	87 e8       	ldi	r24, 0x87	; 135
    1aca:	93 e0       	ldi	r25, 0x03	; 3
    1acc:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN4tripC1Ev>
	SMCR |= (1 << SE);	//Enable sleep
	Wait_ms(1);
	sei();	//allow it to be woken up on an int from WAVR.
	asm volatile("SLEEP");	//Go to sleep/power down
	
}
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	df 91       	pop	r29
    1ada:	cf 91       	pop	r28
    1adc:	08 95       	ret

00001ade <_GLOBAL__sub_I__ZN8odometerC2Ev>:
    1ade:	cf 93       	push	r28
    1ae0:	df 93       	push	r29
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	6f ef       	ldi	r22, 0xFF	; 255
    1aec:	7f ef       	ldi	r23, 0xFF	; 255
    1aee:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z41__static_initialization_and_destruction_0ii>
    1af2:	df 91       	pop	r29
    1af4:	cf 91       	pop	r28
    1af6:	08 95       	ret

00001af8 <__subsf3>:
    1af8:	50 58       	subi	r21, 0x80	; 128

00001afa <__addsf3>:
    1afa:	bb 27       	eor	r27, r27
    1afc:	aa 27       	eor	r26, r26
    1afe:	0e d0       	rcall	.+28     	; 0x1b1c <__addsf3x>
    1b00:	1c c1       	rjmp	.+568    	; 0x1d3a <__fp_round>
    1b02:	0d d1       	rcall	.+538    	; 0x1d1e <__fp_pscA>
    1b04:	30 f0       	brcs	.+12     	; 0x1b12 <__addsf3+0x18>
    1b06:	12 d1       	rcall	.+548    	; 0x1d2c <__fp_pscB>
    1b08:	20 f0       	brcs	.+8      	; 0x1b12 <__addsf3+0x18>
    1b0a:	31 f4       	brne	.+12     	; 0x1b18 <__addsf3+0x1e>
    1b0c:	9f 3f       	cpi	r25, 0xFF	; 255
    1b0e:	11 f4       	brne	.+4      	; 0x1b14 <__addsf3+0x1a>
    1b10:	1e f4       	brtc	.+6      	; 0x1b18 <__addsf3+0x1e>
    1b12:	02 c1       	rjmp	.+516    	; 0x1d18 <__fp_nan>
    1b14:	0e f4       	brtc	.+2      	; 0x1b18 <__addsf3+0x1e>
    1b16:	e0 95       	com	r30
    1b18:	e7 fb       	bst	r30, 7
    1b1a:	f8 c0       	rjmp	.+496    	; 0x1d0c <__fp_inf>

00001b1c <__addsf3x>:
    1b1c:	e9 2f       	mov	r30, r25
    1b1e:	1e d1       	rcall	.+572    	; 0x1d5c <__fp_split3>
    1b20:	80 f3       	brcs	.-32     	; 0x1b02 <__addsf3+0x8>
    1b22:	ba 17       	cp	r27, r26
    1b24:	62 07       	cpc	r22, r18
    1b26:	73 07       	cpc	r23, r19
    1b28:	84 07       	cpc	r24, r20
    1b2a:	95 07       	cpc	r25, r21
    1b2c:	18 f0       	brcs	.+6      	; 0x1b34 <__addsf3x+0x18>
    1b2e:	71 f4       	brne	.+28     	; 0x1b4c <__addsf3x+0x30>
    1b30:	9e f5       	brtc	.+102    	; 0x1b98 <__addsf3x+0x7c>
    1b32:	36 c1       	rjmp	.+620    	; 0x1da0 <__fp_zero>
    1b34:	0e f4       	brtc	.+2      	; 0x1b38 <__addsf3x+0x1c>
    1b36:	e0 95       	com	r30
    1b38:	0b 2e       	mov	r0, r27
    1b3a:	ba 2f       	mov	r27, r26
    1b3c:	a0 2d       	mov	r26, r0
    1b3e:	0b 01       	movw	r0, r22
    1b40:	b9 01       	movw	r22, r18
    1b42:	90 01       	movw	r18, r0
    1b44:	0c 01       	movw	r0, r24
    1b46:	ca 01       	movw	r24, r20
    1b48:	a0 01       	movw	r20, r0
    1b4a:	11 24       	eor	r1, r1
    1b4c:	ff 27       	eor	r31, r31
    1b4e:	59 1b       	sub	r21, r25
    1b50:	99 f0       	breq	.+38     	; 0x1b78 <__addsf3x+0x5c>
    1b52:	59 3f       	cpi	r21, 0xF9	; 249
    1b54:	50 f4       	brcc	.+20     	; 0x1b6a <__addsf3x+0x4e>
    1b56:	50 3e       	cpi	r21, 0xE0	; 224
    1b58:	68 f1       	brcs	.+90     	; 0x1bb4 <__addsf3x+0x98>
    1b5a:	1a 16       	cp	r1, r26
    1b5c:	f0 40       	sbci	r31, 0x00	; 0
    1b5e:	a2 2f       	mov	r26, r18
    1b60:	23 2f       	mov	r18, r19
    1b62:	34 2f       	mov	r19, r20
    1b64:	44 27       	eor	r20, r20
    1b66:	58 5f       	subi	r21, 0xF8	; 248
    1b68:	f3 cf       	rjmp	.-26     	; 0x1b50 <__addsf3x+0x34>
    1b6a:	46 95       	lsr	r20
    1b6c:	37 95       	ror	r19
    1b6e:	27 95       	ror	r18
    1b70:	a7 95       	ror	r26
    1b72:	f0 40       	sbci	r31, 0x00	; 0
    1b74:	53 95       	inc	r21
    1b76:	c9 f7       	brne	.-14     	; 0x1b6a <__addsf3x+0x4e>
    1b78:	7e f4       	brtc	.+30     	; 0x1b98 <__addsf3x+0x7c>
    1b7a:	1f 16       	cp	r1, r31
    1b7c:	ba 0b       	sbc	r27, r26
    1b7e:	62 0b       	sbc	r22, r18
    1b80:	73 0b       	sbc	r23, r19
    1b82:	84 0b       	sbc	r24, r20
    1b84:	ba f0       	brmi	.+46     	; 0x1bb4 <__addsf3x+0x98>
    1b86:	91 50       	subi	r25, 0x01	; 1
    1b88:	a1 f0       	breq	.+40     	; 0x1bb2 <__addsf3x+0x96>
    1b8a:	ff 0f       	add	r31, r31
    1b8c:	bb 1f       	adc	r27, r27
    1b8e:	66 1f       	adc	r22, r22
    1b90:	77 1f       	adc	r23, r23
    1b92:	88 1f       	adc	r24, r24
    1b94:	c2 f7       	brpl	.-16     	; 0x1b86 <__addsf3x+0x6a>
    1b96:	0e c0       	rjmp	.+28     	; 0x1bb4 <__addsf3x+0x98>
    1b98:	ba 0f       	add	r27, r26
    1b9a:	62 1f       	adc	r22, r18
    1b9c:	73 1f       	adc	r23, r19
    1b9e:	84 1f       	adc	r24, r20
    1ba0:	48 f4       	brcc	.+18     	; 0x1bb4 <__addsf3x+0x98>
    1ba2:	87 95       	ror	r24
    1ba4:	77 95       	ror	r23
    1ba6:	67 95       	ror	r22
    1ba8:	b7 95       	ror	r27
    1baa:	f7 95       	ror	r31
    1bac:	9e 3f       	cpi	r25, 0xFE	; 254
    1bae:	08 f0       	brcs	.+2      	; 0x1bb2 <__addsf3x+0x96>
    1bb0:	b3 cf       	rjmp	.-154    	; 0x1b18 <__addsf3+0x1e>
    1bb2:	93 95       	inc	r25
    1bb4:	88 0f       	add	r24, r24
    1bb6:	08 f0       	brcs	.+2      	; 0x1bba <__addsf3x+0x9e>
    1bb8:	99 27       	eor	r25, r25
    1bba:	ee 0f       	add	r30, r30
    1bbc:	97 95       	ror	r25
    1bbe:	87 95       	ror	r24
    1bc0:	08 95       	ret

00001bc2 <__divsf3>:
    1bc2:	0c d0       	rcall	.+24     	; 0x1bdc <__divsf3x>
    1bc4:	ba c0       	rjmp	.+372    	; 0x1d3a <__fp_round>
    1bc6:	b2 d0       	rcall	.+356    	; 0x1d2c <__fp_pscB>
    1bc8:	40 f0       	brcs	.+16     	; 0x1bda <__divsf3+0x18>
    1bca:	a9 d0       	rcall	.+338    	; 0x1d1e <__fp_pscA>
    1bcc:	30 f0       	brcs	.+12     	; 0x1bda <__divsf3+0x18>
    1bce:	21 f4       	brne	.+8      	; 0x1bd8 <__divsf3+0x16>
    1bd0:	5f 3f       	cpi	r21, 0xFF	; 255
    1bd2:	19 f0       	breq	.+6      	; 0x1bda <__divsf3+0x18>
    1bd4:	9b c0       	rjmp	.+310    	; 0x1d0c <__fp_inf>
    1bd6:	51 11       	cpse	r21, r1
    1bd8:	e4 c0       	rjmp	.+456    	; 0x1da2 <__fp_szero>
    1bda:	9e c0       	rjmp	.+316    	; 0x1d18 <__fp_nan>

00001bdc <__divsf3x>:
    1bdc:	bf d0       	rcall	.+382    	; 0x1d5c <__fp_split3>
    1bde:	98 f3       	brcs	.-26     	; 0x1bc6 <__divsf3+0x4>

00001be0 <__divsf3_pse>:
    1be0:	99 23       	and	r25, r25
    1be2:	c9 f3       	breq	.-14     	; 0x1bd6 <__divsf3+0x14>
    1be4:	55 23       	and	r21, r21
    1be6:	b1 f3       	breq	.-20     	; 0x1bd4 <__divsf3+0x12>
    1be8:	95 1b       	sub	r25, r21
    1bea:	55 0b       	sbc	r21, r21
    1bec:	bb 27       	eor	r27, r27
    1bee:	aa 27       	eor	r26, r26
    1bf0:	62 17       	cp	r22, r18
    1bf2:	73 07       	cpc	r23, r19
    1bf4:	84 07       	cpc	r24, r20
    1bf6:	38 f0       	brcs	.+14     	; 0x1c06 <__divsf3_pse+0x26>
    1bf8:	9f 5f       	subi	r25, 0xFF	; 255
    1bfa:	5f 4f       	sbci	r21, 0xFF	; 255
    1bfc:	22 0f       	add	r18, r18
    1bfe:	33 1f       	adc	r19, r19
    1c00:	44 1f       	adc	r20, r20
    1c02:	aa 1f       	adc	r26, r26
    1c04:	a9 f3       	breq	.-22     	; 0x1bf0 <__divsf3_pse+0x10>
    1c06:	33 d0       	rcall	.+102    	; 0x1c6e <__divsf3_pse+0x8e>
    1c08:	0e 2e       	mov	r0, r30
    1c0a:	3a f0       	brmi	.+14     	; 0x1c1a <__divsf3_pse+0x3a>
    1c0c:	e0 e8       	ldi	r30, 0x80	; 128
    1c0e:	30 d0       	rcall	.+96     	; 0x1c70 <__divsf3_pse+0x90>
    1c10:	91 50       	subi	r25, 0x01	; 1
    1c12:	50 40       	sbci	r21, 0x00	; 0
    1c14:	e6 95       	lsr	r30
    1c16:	00 1c       	adc	r0, r0
    1c18:	ca f7       	brpl	.-14     	; 0x1c0c <__divsf3_pse+0x2c>
    1c1a:	29 d0       	rcall	.+82     	; 0x1c6e <__divsf3_pse+0x8e>
    1c1c:	fe 2f       	mov	r31, r30
    1c1e:	27 d0       	rcall	.+78     	; 0x1c6e <__divsf3_pse+0x8e>
    1c20:	66 0f       	add	r22, r22
    1c22:	77 1f       	adc	r23, r23
    1c24:	88 1f       	adc	r24, r24
    1c26:	bb 1f       	adc	r27, r27
    1c28:	26 17       	cp	r18, r22
    1c2a:	37 07       	cpc	r19, r23
    1c2c:	48 07       	cpc	r20, r24
    1c2e:	ab 07       	cpc	r26, r27
    1c30:	b0 e8       	ldi	r27, 0x80	; 128
    1c32:	09 f0       	breq	.+2      	; 0x1c36 <__divsf3_pse+0x56>
    1c34:	bb 0b       	sbc	r27, r27
    1c36:	80 2d       	mov	r24, r0
    1c38:	bf 01       	movw	r22, r30
    1c3a:	ff 27       	eor	r31, r31
    1c3c:	93 58       	subi	r25, 0x83	; 131
    1c3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c40:	2a f0       	brmi	.+10     	; 0x1c4c <__divsf3_pse+0x6c>
    1c42:	9e 3f       	cpi	r25, 0xFE	; 254
    1c44:	51 05       	cpc	r21, r1
    1c46:	68 f0       	brcs	.+26     	; 0x1c62 <__divsf3_pse+0x82>
    1c48:	61 c0       	rjmp	.+194    	; 0x1d0c <__fp_inf>
    1c4a:	ab c0       	rjmp	.+342    	; 0x1da2 <__fp_szero>
    1c4c:	5f 3f       	cpi	r21, 0xFF	; 255
    1c4e:	ec f3       	brlt	.-6      	; 0x1c4a <__divsf3_pse+0x6a>
    1c50:	98 3e       	cpi	r25, 0xE8	; 232
    1c52:	dc f3       	brlt	.-10     	; 0x1c4a <__divsf3_pse+0x6a>
    1c54:	86 95       	lsr	r24
    1c56:	77 95       	ror	r23
    1c58:	67 95       	ror	r22
    1c5a:	b7 95       	ror	r27
    1c5c:	f7 95       	ror	r31
    1c5e:	9f 5f       	subi	r25, 0xFF	; 255
    1c60:	c9 f7       	brne	.-14     	; 0x1c54 <__divsf3_pse+0x74>
    1c62:	88 0f       	add	r24, r24
    1c64:	91 1d       	adc	r25, r1
    1c66:	96 95       	lsr	r25
    1c68:	87 95       	ror	r24
    1c6a:	97 f9       	bld	r25, 7
    1c6c:	08 95       	ret
    1c6e:	e1 e0       	ldi	r30, 0x01	; 1
    1c70:	66 0f       	add	r22, r22
    1c72:	77 1f       	adc	r23, r23
    1c74:	88 1f       	adc	r24, r24
    1c76:	bb 1f       	adc	r27, r27
    1c78:	62 17       	cp	r22, r18
    1c7a:	73 07       	cpc	r23, r19
    1c7c:	84 07       	cpc	r24, r20
    1c7e:	ba 07       	cpc	r27, r26
    1c80:	20 f0       	brcs	.+8      	; 0x1c8a <__divsf3_pse+0xaa>
    1c82:	62 1b       	sub	r22, r18
    1c84:	73 0b       	sbc	r23, r19
    1c86:	84 0b       	sbc	r24, r20
    1c88:	ba 0b       	sbc	r27, r26
    1c8a:	ee 1f       	adc	r30, r30
    1c8c:	88 f7       	brcc	.-30     	; 0x1c70 <__divsf3_pse+0x90>
    1c8e:	e0 95       	com	r30
    1c90:	08 95       	ret

00001c92 <__floatunsisf>:
    1c92:	e8 94       	clt
    1c94:	09 c0       	rjmp	.+18     	; 0x1ca8 <__floatsisf+0x12>

00001c96 <__floatsisf>:
    1c96:	97 fb       	bst	r25, 7
    1c98:	3e f4       	brtc	.+14     	; 0x1ca8 <__floatsisf+0x12>
    1c9a:	90 95       	com	r25
    1c9c:	80 95       	com	r24
    1c9e:	70 95       	com	r23
    1ca0:	61 95       	neg	r22
    1ca2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca8:	99 23       	and	r25, r25
    1caa:	a9 f0       	breq	.+42     	; 0x1cd6 <__floatsisf+0x40>
    1cac:	f9 2f       	mov	r31, r25
    1cae:	96 e9       	ldi	r25, 0x96	; 150
    1cb0:	bb 27       	eor	r27, r27
    1cb2:	93 95       	inc	r25
    1cb4:	f6 95       	lsr	r31
    1cb6:	87 95       	ror	r24
    1cb8:	77 95       	ror	r23
    1cba:	67 95       	ror	r22
    1cbc:	b7 95       	ror	r27
    1cbe:	f1 11       	cpse	r31, r1
    1cc0:	f8 cf       	rjmp	.-16     	; 0x1cb2 <__floatsisf+0x1c>
    1cc2:	fa f4       	brpl	.+62     	; 0x1d02 <__floatsisf+0x6c>
    1cc4:	bb 0f       	add	r27, r27
    1cc6:	11 f4       	brne	.+4      	; 0x1ccc <__floatsisf+0x36>
    1cc8:	60 ff       	sbrs	r22, 0
    1cca:	1b c0       	rjmp	.+54     	; 0x1d02 <__floatsisf+0x6c>
    1ccc:	6f 5f       	subi	r22, 0xFF	; 255
    1cce:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd0:	8f 4f       	sbci	r24, 0xFF	; 255
    1cd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd4:	16 c0       	rjmp	.+44     	; 0x1d02 <__floatsisf+0x6c>
    1cd6:	88 23       	and	r24, r24
    1cd8:	11 f0       	breq	.+4      	; 0x1cde <__floatsisf+0x48>
    1cda:	96 e9       	ldi	r25, 0x96	; 150
    1cdc:	11 c0       	rjmp	.+34     	; 0x1d00 <__floatsisf+0x6a>
    1cde:	77 23       	and	r23, r23
    1ce0:	21 f0       	breq	.+8      	; 0x1cea <__floatsisf+0x54>
    1ce2:	9e e8       	ldi	r25, 0x8E	; 142
    1ce4:	87 2f       	mov	r24, r23
    1ce6:	76 2f       	mov	r23, r22
    1ce8:	05 c0       	rjmp	.+10     	; 0x1cf4 <__floatsisf+0x5e>
    1cea:	66 23       	and	r22, r22
    1cec:	71 f0       	breq	.+28     	; 0x1d0a <__floatsisf+0x74>
    1cee:	96 e8       	ldi	r25, 0x86	; 134
    1cf0:	86 2f       	mov	r24, r22
    1cf2:	70 e0       	ldi	r23, 0x00	; 0
    1cf4:	60 e0       	ldi	r22, 0x00	; 0
    1cf6:	2a f0       	brmi	.+10     	; 0x1d02 <__floatsisf+0x6c>
    1cf8:	9a 95       	dec	r25
    1cfa:	66 0f       	add	r22, r22
    1cfc:	77 1f       	adc	r23, r23
    1cfe:	88 1f       	adc	r24, r24
    1d00:	da f7       	brpl	.-10     	; 0x1cf8 <__floatsisf+0x62>
    1d02:	88 0f       	add	r24, r24
    1d04:	96 95       	lsr	r25
    1d06:	87 95       	ror	r24
    1d08:	97 f9       	bld	r25, 7
    1d0a:	08 95       	ret

00001d0c <__fp_inf>:
    1d0c:	97 f9       	bld	r25, 7
    1d0e:	9f 67       	ori	r25, 0x7F	; 127
    1d10:	80 e8       	ldi	r24, 0x80	; 128
    1d12:	70 e0       	ldi	r23, 0x00	; 0
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	08 95       	ret

00001d18 <__fp_nan>:
    1d18:	9f ef       	ldi	r25, 0xFF	; 255
    1d1a:	80 ec       	ldi	r24, 0xC0	; 192
    1d1c:	08 95       	ret

00001d1e <__fp_pscA>:
    1d1e:	00 24       	eor	r0, r0
    1d20:	0a 94       	dec	r0
    1d22:	16 16       	cp	r1, r22
    1d24:	17 06       	cpc	r1, r23
    1d26:	18 06       	cpc	r1, r24
    1d28:	09 06       	cpc	r0, r25
    1d2a:	08 95       	ret

00001d2c <__fp_pscB>:
    1d2c:	00 24       	eor	r0, r0
    1d2e:	0a 94       	dec	r0
    1d30:	12 16       	cp	r1, r18
    1d32:	13 06       	cpc	r1, r19
    1d34:	14 06       	cpc	r1, r20
    1d36:	05 06       	cpc	r0, r21
    1d38:	08 95       	ret

00001d3a <__fp_round>:
    1d3a:	09 2e       	mov	r0, r25
    1d3c:	03 94       	inc	r0
    1d3e:	00 0c       	add	r0, r0
    1d40:	11 f4       	brne	.+4      	; 0x1d46 <__fp_round+0xc>
    1d42:	88 23       	and	r24, r24
    1d44:	52 f0       	brmi	.+20     	; 0x1d5a <__fp_round+0x20>
    1d46:	bb 0f       	add	r27, r27
    1d48:	40 f4       	brcc	.+16     	; 0x1d5a <__fp_round+0x20>
    1d4a:	bf 2b       	or	r27, r31
    1d4c:	11 f4       	brne	.+4      	; 0x1d52 <__fp_round+0x18>
    1d4e:	60 ff       	sbrs	r22, 0
    1d50:	04 c0       	rjmp	.+8      	; 0x1d5a <__fp_round+0x20>
    1d52:	6f 5f       	subi	r22, 0xFF	; 255
    1d54:	7f 4f       	sbci	r23, 0xFF	; 255
    1d56:	8f 4f       	sbci	r24, 0xFF	; 255
    1d58:	9f 4f       	sbci	r25, 0xFF	; 255
    1d5a:	08 95       	ret

00001d5c <__fp_split3>:
    1d5c:	57 fd       	sbrc	r21, 7
    1d5e:	90 58       	subi	r25, 0x80	; 128
    1d60:	44 0f       	add	r20, r20
    1d62:	55 1f       	adc	r21, r21
    1d64:	59 f0       	breq	.+22     	; 0x1d7c <__fp_splitA+0x10>
    1d66:	5f 3f       	cpi	r21, 0xFF	; 255
    1d68:	71 f0       	breq	.+28     	; 0x1d86 <__fp_splitA+0x1a>
    1d6a:	47 95       	ror	r20

00001d6c <__fp_splitA>:
    1d6c:	88 0f       	add	r24, r24
    1d6e:	97 fb       	bst	r25, 7
    1d70:	99 1f       	adc	r25, r25
    1d72:	61 f0       	breq	.+24     	; 0x1d8c <__fp_splitA+0x20>
    1d74:	9f 3f       	cpi	r25, 0xFF	; 255
    1d76:	79 f0       	breq	.+30     	; 0x1d96 <__fp_splitA+0x2a>
    1d78:	87 95       	ror	r24
    1d7a:	08 95       	ret
    1d7c:	12 16       	cp	r1, r18
    1d7e:	13 06       	cpc	r1, r19
    1d80:	14 06       	cpc	r1, r20
    1d82:	55 1f       	adc	r21, r21
    1d84:	f2 cf       	rjmp	.-28     	; 0x1d6a <__fp_split3+0xe>
    1d86:	46 95       	lsr	r20
    1d88:	f1 df       	rcall	.-30     	; 0x1d6c <__fp_splitA>
    1d8a:	08 c0       	rjmp	.+16     	; 0x1d9c <__fp_splitA+0x30>
    1d8c:	16 16       	cp	r1, r22
    1d8e:	17 06       	cpc	r1, r23
    1d90:	18 06       	cpc	r1, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	f1 cf       	rjmp	.-30     	; 0x1d78 <__fp_splitA+0xc>
    1d96:	86 95       	lsr	r24
    1d98:	71 05       	cpc	r23, r1
    1d9a:	61 05       	cpc	r22, r1
    1d9c:	08 94       	sec
    1d9e:	08 95       	ret

00001da0 <__fp_zero>:
    1da0:	e8 94       	clt

00001da2 <__fp_szero>:
    1da2:	bb 27       	eor	r27, r27
    1da4:	66 27       	eor	r22, r22
    1da6:	77 27       	eor	r23, r23
    1da8:	cb 01       	movw	r24, r22
    1daa:	97 f9       	bld	r25, 7
    1dac:	08 95       	ret

00001dae <__mulsf3>:
    1dae:	0b d0       	rcall	.+22     	; 0x1dc6 <__mulsf3x>
    1db0:	c4 cf       	rjmp	.-120    	; 0x1d3a <__fp_round>
    1db2:	b5 df       	rcall	.-150    	; 0x1d1e <__fp_pscA>
    1db4:	28 f0       	brcs	.+10     	; 0x1dc0 <__mulsf3+0x12>
    1db6:	ba df       	rcall	.-140    	; 0x1d2c <__fp_pscB>
    1db8:	18 f0       	brcs	.+6      	; 0x1dc0 <__mulsf3+0x12>
    1dba:	95 23       	and	r25, r21
    1dbc:	09 f0       	breq	.+2      	; 0x1dc0 <__mulsf3+0x12>
    1dbe:	a6 cf       	rjmp	.-180    	; 0x1d0c <__fp_inf>
    1dc0:	ab cf       	rjmp	.-170    	; 0x1d18 <__fp_nan>
    1dc2:	11 24       	eor	r1, r1
    1dc4:	ee cf       	rjmp	.-36     	; 0x1da2 <__fp_szero>

00001dc6 <__mulsf3x>:
    1dc6:	ca df       	rcall	.-108    	; 0x1d5c <__fp_split3>
    1dc8:	a0 f3       	brcs	.-24     	; 0x1db2 <__mulsf3+0x4>

00001dca <__mulsf3_pse>:
    1dca:	95 9f       	mul	r25, r21
    1dcc:	d1 f3       	breq	.-12     	; 0x1dc2 <__mulsf3+0x14>
    1dce:	95 0f       	add	r25, r21
    1dd0:	50 e0       	ldi	r21, 0x00	; 0
    1dd2:	55 1f       	adc	r21, r21
    1dd4:	62 9f       	mul	r22, r18
    1dd6:	f0 01       	movw	r30, r0
    1dd8:	72 9f       	mul	r23, r18
    1dda:	bb 27       	eor	r27, r27
    1ddc:	f0 0d       	add	r31, r0
    1dde:	b1 1d       	adc	r27, r1
    1de0:	63 9f       	mul	r22, r19
    1de2:	aa 27       	eor	r26, r26
    1de4:	f0 0d       	add	r31, r0
    1de6:	b1 1d       	adc	r27, r1
    1de8:	aa 1f       	adc	r26, r26
    1dea:	64 9f       	mul	r22, r20
    1dec:	66 27       	eor	r22, r22
    1dee:	b0 0d       	add	r27, r0
    1df0:	a1 1d       	adc	r26, r1
    1df2:	66 1f       	adc	r22, r22
    1df4:	82 9f       	mul	r24, r18
    1df6:	22 27       	eor	r18, r18
    1df8:	b0 0d       	add	r27, r0
    1dfa:	a1 1d       	adc	r26, r1
    1dfc:	62 1f       	adc	r22, r18
    1dfe:	73 9f       	mul	r23, r19
    1e00:	b0 0d       	add	r27, r0
    1e02:	a1 1d       	adc	r26, r1
    1e04:	62 1f       	adc	r22, r18
    1e06:	83 9f       	mul	r24, r19
    1e08:	a0 0d       	add	r26, r0
    1e0a:	61 1d       	adc	r22, r1
    1e0c:	22 1f       	adc	r18, r18
    1e0e:	74 9f       	mul	r23, r20
    1e10:	33 27       	eor	r19, r19
    1e12:	a0 0d       	add	r26, r0
    1e14:	61 1d       	adc	r22, r1
    1e16:	23 1f       	adc	r18, r19
    1e18:	84 9f       	mul	r24, r20
    1e1a:	60 0d       	add	r22, r0
    1e1c:	21 1d       	adc	r18, r1
    1e1e:	82 2f       	mov	r24, r18
    1e20:	76 2f       	mov	r23, r22
    1e22:	6a 2f       	mov	r22, r26
    1e24:	11 24       	eor	r1, r1
    1e26:	9f 57       	subi	r25, 0x7F	; 127
    1e28:	50 40       	sbci	r21, 0x00	; 0
    1e2a:	8a f0       	brmi	.+34     	; 0x1e4e <__mulsf3_pse+0x84>
    1e2c:	e1 f0       	breq	.+56     	; 0x1e66 <__mulsf3_pse+0x9c>
    1e2e:	88 23       	and	r24, r24
    1e30:	4a f0       	brmi	.+18     	; 0x1e44 <__mulsf3_pse+0x7a>
    1e32:	ee 0f       	add	r30, r30
    1e34:	ff 1f       	adc	r31, r31
    1e36:	bb 1f       	adc	r27, r27
    1e38:	66 1f       	adc	r22, r22
    1e3a:	77 1f       	adc	r23, r23
    1e3c:	88 1f       	adc	r24, r24
    1e3e:	91 50       	subi	r25, 0x01	; 1
    1e40:	50 40       	sbci	r21, 0x00	; 0
    1e42:	a9 f7       	brne	.-22     	; 0x1e2e <__mulsf3_pse+0x64>
    1e44:	9e 3f       	cpi	r25, 0xFE	; 254
    1e46:	51 05       	cpc	r21, r1
    1e48:	70 f0       	brcs	.+28     	; 0x1e66 <__mulsf3_pse+0x9c>
    1e4a:	60 cf       	rjmp	.-320    	; 0x1d0c <__fp_inf>
    1e4c:	aa cf       	rjmp	.-172    	; 0x1da2 <__fp_szero>
    1e4e:	5f 3f       	cpi	r21, 0xFF	; 255
    1e50:	ec f3       	brlt	.-6      	; 0x1e4c <__mulsf3_pse+0x82>
    1e52:	98 3e       	cpi	r25, 0xE8	; 232
    1e54:	dc f3       	brlt	.-10     	; 0x1e4c <__mulsf3_pse+0x82>
    1e56:	86 95       	lsr	r24
    1e58:	77 95       	ror	r23
    1e5a:	67 95       	ror	r22
    1e5c:	b7 95       	ror	r27
    1e5e:	f7 95       	ror	r31
    1e60:	e7 95       	ror	r30
    1e62:	9f 5f       	subi	r25, 0xFF	; 255
    1e64:	c1 f7       	brne	.-16     	; 0x1e56 <__mulsf3_pse+0x8c>
    1e66:	fe 2b       	or	r31, r30
    1e68:	88 0f       	add	r24, r24
    1e6a:	91 1d       	adc	r25, r1
    1e6c:	96 95       	lsr	r25
    1e6e:	87 95       	ror	r24
    1e70:	97 f9       	bld	r25, 7
    1e72:	08 95       	ret

00001e74 <__udivmodhi4>:
    1e74:	aa 1b       	sub	r26, r26
    1e76:	bb 1b       	sub	r27, r27
    1e78:	51 e1       	ldi	r21, 0x11	; 17
    1e7a:	07 c0       	rjmp	.+14     	; 0x1e8a <__udivmodhi4_ep>

00001e7c <__udivmodhi4_loop>:
    1e7c:	aa 1f       	adc	r26, r26
    1e7e:	bb 1f       	adc	r27, r27
    1e80:	a6 17       	cp	r26, r22
    1e82:	b7 07       	cpc	r27, r23
    1e84:	10 f0       	brcs	.+4      	; 0x1e8a <__udivmodhi4_ep>
    1e86:	a6 1b       	sub	r26, r22
    1e88:	b7 0b       	sbc	r27, r23

00001e8a <__udivmodhi4_ep>:
    1e8a:	88 1f       	adc	r24, r24
    1e8c:	99 1f       	adc	r25, r25
    1e8e:	5a 95       	dec	r21
    1e90:	a9 f7       	brne	.-22     	; 0x1e7c <__udivmodhi4_loop>
    1e92:	80 95       	com	r24
    1e94:	90 95       	com	r25
    1e96:	bc 01       	movw	r22, r24
    1e98:	cd 01       	movw	r24, r26
    1e9a:	08 95       	ret

00001e9c <__tablejump2__>:
    1e9c:	ee 0f       	add	r30, r30
    1e9e:	ff 1f       	adc	r31, r31

00001ea0 <__tablejump__>:
    1ea0:	05 90       	lpm	r0, Z+
    1ea2:	f4 91       	lpm	r31, Z
    1ea4:	e0 2d       	mov	r30, r0
    1ea6:	09 94       	ijmp

00001ea8 <dtostrf>:
    1ea8:	ef 92       	push	r14
    1eaa:	0f 93       	push	r16
    1eac:	1f 93       	push	r17
    1eae:	cf 93       	push	r28
    1eb0:	32 2f       	mov	r19, r18
    1eb2:	c0 2f       	mov	r28, r16
    1eb4:	47 ff       	sbrs	r20, 7
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <dtostrf+0x14>
    1eb8:	a4 e1       	ldi	r26, 0x14	; 20
    1eba:	01 c0       	rjmp	.+2      	; 0x1ebe <dtostrf+0x16>
    1ebc:	a4 e0       	ldi	r26, 0x04	; 4
    1ebe:	e4 2f       	mov	r30, r20
    1ec0:	ff 27       	eor	r31, r31
    1ec2:	e7 fd       	sbrc	r30, 7
    1ec4:	f0 95       	com	r31
    1ec6:	f7 ff       	sbrs	r31, 7
    1ec8:	03 c0       	rjmp	.+6      	; 0x1ed0 <dtostrf+0x28>
    1eca:	f0 95       	com	r31
    1ecc:	e1 95       	neg	r30
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	4c 2f       	mov	r20, r28
    1ed2:	51 2f       	mov	r21, r17
    1ed4:	2e 2f       	mov	r18, r30
    1ed6:	03 2f       	mov	r16, r19
    1ed8:	ea 2e       	mov	r14, r26
    1eda:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <dtoa_prf>
    1ede:	8c 2f       	mov	r24, r28
    1ee0:	91 2f       	mov	r25, r17
    1ee2:	cf 91       	pop	r28
    1ee4:	1f 91       	pop	r17
    1ee6:	0f 91       	pop	r16
    1ee8:	ef 90       	pop	r14
    1eea:	08 95       	ret

00001eec <utoa>:
    1eec:	fb 01       	movw	r30, r22
    1eee:	9f 01       	movw	r18, r30
    1ef0:	42 30       	cpi	r20, 0x02	; 2
    1ef2:	74 f0       	brlt	.+28     	; 0x1f10 <utoa+0x24>
    1ef4:	45 32       	cpi	r20, 0x25	; 37
    1ef6:	64 f4       	brge	.+24     	; 0x1f10 <utoa+0x24>
    1ef8:	64 2f       	mov	r22, r20
    1efa:	77 27       	eor	r23, r23
    1efc:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <__udivmodhi4>
    1f00:	80 5d       	subi	r24, 0xD0	; 208
    1f02:	8a 33       	cpi	r24, 0x3A	; 58
    1f04:	0c f0       	brlt	.+2      	; 0x1f08 <utoa+0x1c>
    1f06:	89 5d       	subi	r24, 0xD9	; 217
    1f08:	81 93       	st	Z+, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	a1 f7       	brne	.-24     	; 0x1ef8 <utoa+0xc>
    1f10:	10 82       	st	Z, r1
    1f12:	c9 01       	movw	r24, r18
    1f14:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <strrev>

00001f18 <dtoa_prf>:
    1f18:	a9 e0       	ldi	r26, 0x09	; 9
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	e2 e9       	ldi	r30, 0x92	; 146
    1f1e:	ff e0       	ldi	r31, 0x0F	; 15
    1f20:	0c 94 d0 11 	jmp	0x23a0	; 0x23a0 <__prologue_saves__+0x8>
    1f24:	6a 01       	movw	r12, r20
    1f26:	12 2f       	mov	r17, r18
    1f28:	f0 2e       	mov	r15, r16
    1f2a:	2b e3       	ldi	r18, 0x3B	; 59
    1f2c:	20 17       	cp	r18, r16
    1f2e:	18 f0       	brcs	.+6      	; 0x1f36 <dtoa_prf+0x1e>
    1f30:	b0 2e       	mov	r11, r16
    1f32:	b3 94       	inc	r11
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <dtoa_prf+0x22>
    1f36:	3c e3       	ldi	r19, 0x3C	; 60
    1f38:	b3 2e       	mov	r11, r19
    1f3a:	ae 01       	movw	r20, r28
    1f3c:	4f 5f       	subi	r20, 0xFF	; 255
    1f3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f40:	27 e0       	ldi	r18, 0x07	; 7
    1f42:	0b 2d       	mov	r16, r11
    1f44:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__ftoa_engine>
    1f48:	bc 01       	movw	r22, r24
    1f4a:	a9 81       	ldd	r26, Y+1	; 0x01
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	cd 01       	movw	r24, r26
    1f50:	89 70       	andi	r24, 0x09	; 9
    1f52:	90 70       	andi	r25, 0x00	; 0
    1f54:	81 30       	cpi	r24, 0x01	; 1
    1f56:	91 05       	cpc	r25, r1
    1f58:	31 f0       	breq	.+12     	; 0x1f66 <dtoa_prf+0x4e>
    1f5a:	e1 fc       	sbrc	r14, 1
    1f5c:	06 c0       	rjmp	.+12     	; 0x1f6a <dtoa_prf+0x52>
    1f5e:	e0 fe       	sbrs	r14, 0
    1f60:	06 c0       	rjmp	.+12     	; 0x1f6e <dtoa_prf+0x56>
    1f62:	40 e2       	ldi	r20, 0x20	; 32
    1f64:	05 c0       	rjmp	.+10     	; 0x1f70 <dtoa_prf+0x58>
    1f66:	4d e2       	ldi	r20, 0x2D	; 45
    1f68:	03 c0       	rjmp	.+6      	; 0x1f70 <dtoa_prf+0x58>
    1f6a:	4b e2       	ldi	r20, 0x2B	; 43
    1f6c:	01 c0       	rjmp	.+2      	; 0x1f70 <dtoa_prf+0x58>
    1f6e:	40 e0       	ldi	r20, 0x00	; 0
    1f70:	a3 ff       	sbrs	r26, 3
    1f72:	36 c0       	rjmp	.+108    	; 0x1fe0 <dtoa_prf+0xc8>
    1f74:	44 23       	and	r20, r20
    1f76:	11 f0       	breq	.+4      	; 0x1f7c <dtoa_prf+0x64>
    1f78:	84 e0       	ldi	r24, 0x04	; 4
    1f7a:	01 c0       	rjmp	.+2      	; 0x1f7e <dtoa_prf+0x66>
    1f7c:	83 e0       	ldi	r24, 0x03	; 3
    1f7e:	81 17       	cp	r24, r17
    1f80:	10 f4       	brcc	.+4      	; 0x1f86 <dtoa_prf+0x6e>
    1f82:	18 1b       	sub	r17, r24
    1f84:	01 c0       	rjmp	.+2      	; 0x1f88 <dtoa_prf+0x70>
    1f86:	10 e0       	ldi	r17, 0x00	; 0
    1f88:	e4 fc       	sbrc	r14, 4
    1f8a:	0b c0       	rjmp	.+22     	; 0x1fa2 <dtoa_prf+0x8a>
    1f8c:	91 2f       	mov	r25, r17
    1f8e:	f6 01       	movw	r30, r12
    1f90:	80 e2       	ldi	r24, 0x20	; 32
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <dtoa_prf+0x80>
    1f94:	81 93       	st	Z+, r24
    1f96:	91 50       	subi	r25, 0x01	; 1
    1f98:	99 23       	and	r25, r25
    1f9a:	e1 f7       	brne	.-8      	; 0x1f94 <dtoa_prf+0x7c>
    1f9c:	c1 0e       	add	r12, r17
    1f9e:	d1 1c       	adc	r13, r1
    1fa0:	10 e0       	ldi	r17, 0x00	; 0
    1fa2:	44 23       	and	r20, r20
    1fa4:	19 f0       	breq	.+6      	; 0x1fac <dtoa_prf+0x94>
    1fa6:	f6 01       	movw	r30, r12
    1fa8:	41 93       	st	Z+, r20
    1faa:	6f 01       	movw	r12, r30
    1fac:	e2 fe       	sbrs	r14, 2
    1fae:	05 c0       	rjmp	.+10     	; 0x1fba <dtoa_prf+0xa2>
    1fb0:	8e e4       	ldi	r24, 0x4E	; 78
    1fb2:	f6 01       	movw	r30, r12
    1fb4:	80 83       	st	Z, r24
    1fb6:	91 e4       	ldi	r25, 0x41	; 65
    1fb8:	04 c0       	rjmp	.+8      	; 0x1fc2 <dtoa_prf+0xaa>
    1fba:	8e e6       	ldi	r24, 0x6E	; 110
    1fbc:	f6 01       	movw	r30, r12
    1fbe:	80 83       	st	Z, r24
    1fc0:	91 e6       	ldi	r25, 0x61	; 97
    1fc2:	91 83       	std	Z+1, r25	; 0x01
    1fc4:	82 83       	std	Z+2, r24	; 0x02
    1fc6:	83 e0       	ldi	r24, 0x03	; 3
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	c8 0e       	add	r12, r24
    1fcc:	d9 1e       	adc	r13, r25
    1fce:	81 2f       	mov	r24, r17
    1fd0:	f6 01       	movw	r30, r12
    1fd2:	90 e2       	ldi	r25, 0x20	; 32
    1fd4:	02 c0       	rjmp	.+4      	; 0x1fda <dtoa_prf+0xc2>
    1fd6:	91 93       	st	Z+, r25
    1fd8:	81 50       	subi	r24, 0x01	; 1
    1fda:	88 23       	and	r24, r24
    1fdc:	e1 f7       	brne	.-8      	; 0x1fd6 <dtoa_prf+0xbe>
    1fde:	3a c0       	rjmp	.+116    	; 0x2054 <dtoa_prf+0x13c>
    1fe0:	a2 ff       	sbrs	r26, 2
    1fe2:	3f c0       	rjmp	.+126    	; 0x2062 <dtoa_prf+0x14a>
    1fe4:	44 23       	and	r20, r20
    1fe6:	11 f0       	breq	.+4      	; 0x1fec <dtoa_prf+0xd4>
    1fe8:	84 e0       	ldi	r24, 0x04	; 4
    1fea:	01 c0       	rjmp	.+2      	; 0x1fee <dtoa_prf+0xd6>
    1fec:	83 e0       	ldi	r24, 0x03	; 3
    1fee:	81 17       	cp	r24, r17
    1ff0:	10 f4       	brcc	.+4      	; 0x1ff6 <dtoa_prf+0xde>
    1ff2:	18 1b       	sub	r17, r24
    1ff4:	01 c0       	rjmp	.+2      	; 0x1ff8 <dtoa_prf+0xe0>
    1ff6:	10 e0       	ldi	r17, 0x00	; 0
    1ff8:	e4 fc       	sbrc	r14, 4
    1ffa:	0b c0       	rjmp	.+22     	; 0x2012 <dtoa_prf+0xfa>
    1ffc:	91 2f       	mov	r25, r17
    1ffe:	f6 01       	movw	r30, r12
    2000:	80 e2       	ldi	r24, 0x20	; 32
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <dtoa_prf+0xf0>
    2004:	81 93       	st	Z+, r24
    2006:	91 50       	subi	r25, 0x01	; 1
    2008:	99 23       	and	r25, r25
    200a:	e1 f7       	brne	.-8      	; 0x2004 <dtoa_prf+0xec>
    200c:	c1 0e       	add	r12, r17
    200e:	d1 1c       	adc	r13, r1
    2010:	10 e0       	ldi	r17, 0x00	; 0
    2012:	44 23       	and	r20, r20
    2014:	19 f0       	breq	.+6      	; 0x201c <dtoa_prf+0x104>
    2016:	f6 01       	movw	r30, r12
    2018:	41 93       	st	Z+, r20
    201a:	6f 01       	movw	r12, r30
    201c:	e2 fe       	sbrs	r14, 2
    201e:	07 c0       	rjmp	.+14     	; 0x202e <dtoa_prf+0x116>
    2020:	89 e4       	ldi	r24, 0x49	; 73
    2022:	f6 01       	movw	r30, r12
    2024:	80 83       	st	Z, r24
    2026:	8e e4       	ldi	r24, 0x4E	; 78
    2028:	81 83       	std	Z+1, r24	; 0x01
    202a:	86 e4       	ldi	r24, 0x46	; 70
    202c:	06 c0       	rjmp	.+12     	; 0x203a <dtoa_prf+0x122>
    202e:	89 e6       	ldi	r24, 0x69	; 105
    2030:	f6 01       	movw	r30, r12
    2032:	80 83       	st	Z, r24
    2034:	8e e6       	ldi	r24, 0x6E	; 110
    2036:	81 83       	std	Z+1, r24	; 0x01
    2038:	86 e6       	ldi	r24, 0x66	; 102
    203a:	82 83       	std	Z+2, r24	; 0x02
    203c:	83 e0       	ldi	r24, 0x03	; 3
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	c8 0e       	add	r12, r24
    2042:	d9 1e       	adc	r13, r25
    2044:	81 2f       	mov	r24, r17
    2046:	f6 01       	movw	r30, r12
    2048:	90 e2       	ldi	r25, 0x20	; 32
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <dtoa_prf+0x138>
    204c:	91 93       	st	Z+, r25
    204e:	81 50       	subi	r24, 0x01	; 1
    2050:	88 23       	and	r24, r24
    2052:	e1 f7       	brne	.-8      	; 0x204c <dtoa_prf+0x134>
    2054:	c1 0e       	add	r12, r17
    2056:	d1 1c       	adc	r13, r1
    2058:	f6 01       	movw	r30, r12
    205a:	10 82       	st	Z, r1
    205c:	8e ef       	ldi	r24, 0xFE	; 254
    205e:	9f ef       	ldi	r25, 0xFF	; 255
    2060:	af c0       	rjmp	.+350    	; 0x21c0 <dtoa_prf+0x2a8>
    2062:	21 e0       	ldi	r18, 0x01	; 1
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	44 23       	and	r20, r20
    2068:	11 f4       	brne	.+4      	; 0x206e <dtoa_prf+0x156>
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	16 16       	cp	r1, r22
    2070:	17 06       	cpc	r1, r23
    2072:	1c f4       	brge	.+6      	; 0x207a <dtoa_prf+0x162>
    2074:	cb 01       	movw	r24, r22
    2076:	01 96       	adiw	r24, 0x01	; 1
    2078:	02 c0       	rjmp	.+4      	; 0x207e <dtoa_prf+0x166>
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	28 0f       	add	r18, r24
    2080:	39 1f       	adc	r19, r25
    2082:	ff 20       	and	r15, r15
    2084:	21 f0       	breq	.+8      	; 0x208e <dtoa_prf+0x176>
    2086:	8f 2d       	mov	r24, r15
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	01 96       	adiw	r24, 0x01	; 1
    208c:	02 c0       	rjmp	.+4      	; 0x2092 <dtoa_prf+0x17a>
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	82 0f       	add	r24, r18
    2094:	93 1f       	adc	r25, r19
    2096:	21 2f       	mov	r18, r17
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	82 17       	cp	r24, r18
    209c:	93 07       	cpc	r25, r19
    209e:	1c f4       	brge	.+6      	; 0x20a6 <dtoa_prf+0x18e>
    20a0:	51 2f       	mov	r21, r17
    20a2:	58 1b       	sub	r21, r24
    20a4:	01 c0       	rjmp	.+2      	; 0x20a8 <dtoa_prf+0x190>
    20a6:	50 e0       	ldi	r21, 0x00	; 0
    20a8:	8e 2d       	mov	r24, r14
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	9c 01       	movw	r18, r24
    20ae:	20 71       	andi	r18, 0x10	; 16
    20b0:	30 70       	andi	r19, 0x00	; 0
    20b2:	e4 fc       	sbrc	r14, 4
    20b4:	0d c0       	rjmp	.+26     	; 0x20d0 <dtoa_prf+0x1b8>
    20b6:	e3 fc       	sbrc	r14, 3
    20b8:	0b c0       	rjmp	.+22     	; 0x20d0 <dtoa_prf+0x1b8>
    20ba:	85 2f       	mov	r24, r21
    20bc:	f6 01       	movw	r30, r12
    20be:	90 e2       	ldi	r25, 0x20	; 32
    20c0:	02 c0       	rjmp	.+4      	; 0x20c6 <dtoa_prf+0x1ae>
    20c2:	91 93       	st	Z+, r25
    20c4:	81 50       	subi	r24, 0x01	; 1
    20c6:	88 23       	and	r24, r24
    20c8:	e1 f7       	brne	.-8      	; 0x20c2 <dtoa_prf+0x1aa>
    20ca:	c5 0e       	add	r12, r21
    20cc:	d1 1c       	adc	r13, r1
    20ce:	50 e0       	ldi	r21, 0x00	; 0
    20d0:	44 23       	and	r20, r20
    20d2:	19 f0       	breq	.+6      	; 0x20da <dtoa_prf+0x1c2>
    20d4:	f6 01       	movw	r30, r12
    20d6:	41 93       	st	Z+, r20
    20d8:	6f 01       	movw	r12, r30
    20da:	21 15       	cp	r18, r1
    20dc:	31 05       	cpc	r19, r1
    20de:	59 f4       	brne	.+22     	; 0x20f6 <dtoa_prf+0x1de>
    20e0:	85 2f       	mov	r24, r21
    20e2:	f6 01       	movw	r30, r12
    20e4:	90 e3       	ldi	r25, 0x30	; 48
    20e6:	02 c0       	rjmp	.+4      	; 0x20ec <dtoa_prf+0x1d4>
    20e8:	91 93       	st	Z+, r25
    20ea:	81 50       	subi	r24, 0x01	; 1
    20ec:	88 23       	and	r24, r24
    20ee:	e1 f7       	brne	.-8      	; 0x20e8 <dtoa_prf+0x1d0>
    20f0:	c5 0e       	add	r12, r21
    20f2:	d1 1c       	adc	r13, r1
    20f4:	50 e0       	ldi	r21, 0x00	; 0
    20f6:	b6 0e       	add	r11, r22
    20f8:	4a 81       	ldd	r20, Y+2	; 0x02
    20fa:	20 e1       	ldi	r18, 0x10	; 16
    20fc:	62 2e       	mov	r6, r18
    20fe:	71 2c       	mov	r7, r1
    2100:	6a 22       	and	r6, r26
    2102:	7b 22       	and	r7, r27
    2104:	a4 ff       	sbrs	r26, 4
    2106:	03 c0       	rjmp	.+6      	; 0x210e <dtoa_prf+0x1f6>
    2108:	41 33       	cpi	r20, 0x31	; 49
    210a:	09 f4       	brne	.+2      	; 0x210e <dtoa_prf+0x1f6>
    210c:	ba 94       	dec	r11
    210e:	1b 14       	cp	r1, r11
    2110:	2c f4       	brge	.+10     	; 0x211c <dtoa_prf+0x204>
    2112:	8b 2d       	mov	r24, r11
    2114:	89 30       	cpi	r24, 0x09	; 9
    2116:	18 f0       	brcs	.+6      	; 0x211e <dtoa_prf+0x206>
    2118:	88 e0       	ldi	r24, 0x08	; 8
    211a:	01 c0       	rjmp	.+2      	; 0x211e <dtoa_prf+0x206>
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	9b 01       	movw	r18, r22
    2120:	77 ff       	sbrs	r23, 7
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <dtoa_prf+0x210>
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	a0 e0       	ldi	r26, 0x00	; 0
    212a:	b0 e0       	ldi	r27, 0x00	; 0
    212c:	9e e2       	ldi	r25, 0x2E	; 46
    212e:	e9 2e       	mov	r14, r25
    2130:	4b 01       	movw	r8, r22
    2132:	88 1a       	sub	r8, r24
    2134:	91 08       	sbc	r9, r1
    2136:	cb 01       	movw	r24, r22
    2138:	82 1b       	sub	r24, r18
    213a:	93 0b       	sbc	r25, r19
    213c:	8e 01       	movw	r16, r28
    213e:	0f 5f       	subi	r16, 0xFF	; 255
    2140:	1f 4f       	sbci	r17, 0xFF	; 255
    2142:	08 0f       	add	r16, r24
    2144:	19 1f       	adc	r17, r25
    2146:	8f 2d       	mov	r24, r15
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	aa 24       	eor	r10, r10
    214c:	bb 24       	eor	r11, r11
    214e:	a8 1a       	sub	r10, r24
    2150:	b9 0a       	sbc	r11, r25
    2152:	ff ef       	ldi	r31, 0xFF	; 255
    2154:	2f 3f       	cpi	r18, 0xFF	; 255
    2156:	3f 07       	cpc	r19, r31
    2158:	19 f4       	brne	.+6      	; 0x2160 <dtoa_prf+0x248>
    215a:	f6 01       	movw	r30, r12
    215c:	e1 92       	st	Z+, r14
    215e:	6f 01       	movw	r12, r30
    2160:	62 17       	cp	r22, r18
    2162:	73 07       	cpc	r23, r19
    2164:	44 f0       	brlt	.+16     	; 0x2176 <dtoa_prf+0x25e>
    2166:	82 16       	cp	r8, r18
    2168:	93 06       	cpc	r9, r19
    216a:	2c f4       	brge	.+10     	; 0x2176 <dtoa_prf+0x25e>
    216c:	f8 01       	movw	r30, r16
    216e:	ea 0f       	add	r30, r26
    2170:	fb 1f       	adc	r31, r27
    2172:	81 81       	ldd	r24, Z+1	; 0x01
    2174:	01 c0       	rjmp	.+2      	; 0x2178 <dtoa_prf+0x260>
    2176:	80 e3       	ldi	r24, 0x30	; 48
    2178:	21 50       	subi	r18, 0x01	; 1
    217a:	30 40       	sbci	r19, 0x00	; 0
    217c:	11 96       	adiw	r26, 0x01	; 1
    217e:	2a 15       	cp	r18, r10
    2180:	3b 05       	cpc	r19, r11
    2182:	24 f0       	brlt	.+8      	; 0x218c <dtoa_prf+0x274>
    2184:	f6 01       	movw	r30, r12
    2186:	81 93       	st	Z+, r24
    2188:	6f 01       	movw	r12, r30
    218a:	e3 cf       	rjmp	.-58     	; 0x2152 <dtoa_prf+0x23a>
    218c:	26 17       	cp	r18, r22
    218e:	37 07       	cpc	r19, r23
    2190:	41 f4       	brne	.+16     	; 0x21a2 <dtoa_prf+0x28a>
    2192:	46 33       	cpi	r20, 0x36	; 54
    2194:	28 f4       	brcc	.+10     	; 0x21a0 <dtoa_prf+0x288>
    2196:	45 33       	cpi	r20, 0x35	; 53
    2198:	21 f4       	brne	.+8      	; 0x21a2 <dtoa_prf+0x28a>
    219a:	61 14       	cp	r6, r1
    219c:	71 04       	cpc	r7, r1
    219e:	09 f4       	brne	.+2      	; 0x21a2 <dtoa_prf+0x28a>
    21a0:	81 e3       	ldi	r24, 0x31	; 49
    21a2:	f6 01       	movw	r30, r12
    21a4:	81 93       	st	Z+, r24
    21a6:	85 2f       	mov	r24, r21
    21a8:	df 01       	movw	r26, r30
    21aa:	90 e2       	ldi	r25, 0x20	; 32
    21ac:	02 c0       	rjmp	.+4      	; 0x21b2 <dtoa_prf+0x29a>
    21ae:	9d 93       	st	X+, r25
    21b0:	81 50       	subi	r24, 0x01	; 1
    21b2:	88 23       	and	r24, r24
    21b4:	e1 f7       	brne	.-8      	; 0x21ae <dtoa_prf+0x296>
    21b6:	e5 0f       	add	r30, r21
    21b8:	f1 1d       	adc	r31, r1
    21ba:	10 82       	st	Z, r1
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	29 96       	adiw	r28, 0x09	; 9
    21c2:	ee e0       	ldi	r30, 0x0E	; 14
    21c4:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__epilogue_restores__+0x8>

000021c8 <__ftoa_engine>:
    21c8:	28 30       	cpi	r18, 0x08	; 8
    21ca:	08 f0       	brcs	.+2      	; 0x21ce <__ftoa_engine+0x6>
    21cc:	27 e0       	ldi	r18, 0x07	; 7
    21ce:	33 27       	eor	r19, r19
    21d0:	da 01       	movw	r26, r20
    21d2:	99 0f       	add	r25, r25
    21d4:	31 1d       	adc	r19, r1
    21d6:	87 fd       	sbrc	r24, 7
    21d8:	91 60       	ori	r25, 0x01	; 1
    21da:	00 96       	adiw	r24, 0x00	; 0
    21dc:	61 05       	cpc	r22, r1
    21de:	71 05       	cpc	r23, r1
    21e0:	39 f4       	brne	.+14     	; 0x21f0 <__ftoa_engine+0x28>
    21e2:	32 60       	ori	r19, 0x02	; 2
    21e4:	2e 5f       	subi	r18, 0xFE	; 254
    21e6:	3d 93       	st	X+, r19
    21e8:	30 e3       	ldi	r19, 0x30	; 48
    21ea:	2a 95       	dec	r18
    21ec:	e1 f7       	brne	.-8      	; 0x21e6 <__ftoa_engine+0x1e>
    21ee:	08 95       	ret
    21f0:	9f 3f       	cpi	r25, 0xFF	; 255
    21f2:	30 f0       	brcs	.+12     	; 0x2200 <__ftoa_engine+0x38>
    21f4:	80 38       	cpi	r24, 0x80	; 128
    21f6:	71 05       	cpc	r23, r1
    21f8:	61 05       	cpc	r22, r1
    21fa:	09 f0       	breq	.+2      	; 0x21fe <__ftoa_engine+0x36>
    21fc:	3c 5f       	subi	r19, 0xFC	; 252
    21fe:	3c 5f       	subi	r19, 0xFC	; 252
    2200:	3d 93       	st	X+, r19
    2202:	91 30       	cpi	r25, 0x01	; 1
    2204:	08 f0       	brcs	.+2      	; 0x2208 <__ftoa_engine+0x40>
    2206:	80 68       	ori	r24, 0x80	; 128
    2208:	91 1d       	adc	r25, r1
    220a:	df 93       	push	r29
    220c:	cf 93       	push	r28
    220e:	1f 93       	push	r17
    2210:	0f 93       	push	r16
    2212:	ff 92       	push	r15
    2214:	ef 92       	push	r14
    2216:	19 2f       	mov	r17, r25
    2218:	98 7f       	andi	r25, 0xF8	; 248
    221a:	96 95       	lsr	r25
    221c:	e9 2f       	mov	r30, r25
    221e:	96 95       	lsr	r25
    2220:	96 95       	lsr	r25
    2222:	e9 0f       	add	r30, r25
    2224:	ff 27       	eor	r31, r31
    2226:	ee 53       	subi	r30, 0x3E	; 62
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	99 27       	eor	r25, r25
    222c:	33 27       	eor	r19, r19
    222e:	ee 24       	eor	r14, r14
    2230:	ff 24       	eor	r15, r15
    2232:	a7 01       	movw	r20, r14
    2234:	e7 01       	movw	r28, r14
    2236:	05 90       	lpm	r0, Z+
    2238:	08 94       	sec
    223a:	07 94       	ror	r0
    223c:	28 f4       	brcc	.+10     	; 0x2248 <__ftoa_engine+0x80>
    223e:	36 0f       	add	r19, r22
    2240:	e7 1e       	adc	r14, r23
    2242:	f8 1e       	adc	r15, r24
    2244:	49 1f       	adc	r20, r25
    2246:	51 1d       	adc	r21, r1
    2248:	66 0f       	add	r22, r22
    224a:	77 1f       	adc	r23, r23
    224c:	88 1f       	adc	r24, r24
    224e:	99 1f       	adc	r25, r25
    2250:	06 94       	lsr	r0
    2252:	a1 f7       	brne	.-24     	; 0x223c <__ftoa_engine+0x74>
    2254:	05 90       	lpm	r0, Z+
    2256:	07 94       	ror	r0
    2258:	28 f4       	brcc	.+10     	; 0x2264 <__ftoa_engine+0x9c>
    225a:	e7 0e       	add	r14, r23
    225c:	f8 1e       	adc	r15, r24
    225e:	49 1f       	adc	r20, r25
    2260:	56 1f       	adc	r21, r22
    2262:	c1 1d       	adc	r28, r1
    2264:	77 0f       	add	r23, r23
    2266:	88 1f       	adc	r24, r24
    2268:	99 1f       	adc	r25, r25
    226a:	66 1f       	adc	r22, r22
    226c:	06 94       	lsr	r0
    226e:	a1 f7       	brne	.-24     	; 0x2258 <__ftoa_engine+0x90>
    2270:	05 90       	lpm	r0, Z+
    2272:	07 94       	ror	r0
    2274:	28 f4       	brcc	.+10     	; 0x2280 <__ftoa_engine+0xb8>
    2276:	f8 0e       	add	r15, r24
    2278:	49 1f       	adc	r20, r25
    227a:	56 1f       	adc	r21, r22
    227c:	c7 1f       	adc	r28, r23
    227e:	d1 1d       	adc	r29, r1
    2280:	88 0f       	add	r24, r24
    2282:	99 1f       	adc	r25, r25
    2284:	66 1f       	adc	r22, r22
    2286:	77 1f       	adc	r23, r23
    2288:	06 94       	lsr	r0
    228a:	a1 f7       	brne	.-24     	; 0x2274 <__ftoa_engine+0xac>
    228c:	05 90       	lpm	r0, Z+
    228e:	07 94       	ror	r0
    2290:	20 f4       	brcc	.+8      	; 0x229a <__ftoa_engine+0xd2>
    2292:	49 0f       	add	r20, r25
    2294:	56 1f       	adc	r21, r22
    2296:	c7 1f       	adc	r28, r23
    2298:	d8 1f       	adc	r29, r24
    229a:	99 0f       	add	r25, r25
    229c:	66 1f       	adc	r22, r22
    229e:	77 1f       	adc	r23, r23
    22a0:	88 1f       	adc	r24, r24
    22a2:	06 94       	lsr	r0
    22a4:	a9 f7       	brne	.-22     	; 0x2290 <__ftoa_engine+0xc8>
    22a6:	84 91       	lpm	r24, Z
    22a8:	10 95       	com	r17
    22aa:	17 70       	andi	r17, 0x07	; 7
    22ac:	41 f0       	breq	.+16     	; 0x22be <__ftoa_engine+0xf6>
    22ae:	d6 95       	lsr	r29
    22b0:	c7 95       	ror	r28
    22b2:	57 95       	ror	r21
    22b4:	47 95       	ror	r20
    22b6:	f7 94       	ror	r15
    22b8:	e7 94       	ror	r14
    22ba:	1a 95       	dec	r17
    22bc:	c1 f7       	brne	.-16     	; 0x22ae <__ftoa_engine+0xe6>
    22be:	e8 e6       	ldi	r30, 0x68	; 104
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	68 94       	set
    22c4:	15 90       	lpm	r1, Z+
    22c6:	15 91       	lpm	r17, Z+
    22c8:	35 91       	lpm	r19, Z+
    22ca:	65 91       	lpm	r22, Z+
    22cc:	95 91       	lpm	r25, Z+
    22ce:	05 90       	lpm	r0, Z+
    22d0:	7f e2       	ldi	r23, 0x2F	; 47
    22d2:	73 95       	inc	r23
    22d4:	e1 18       	sub	r14, r1
    22d6:	f1 0a       	sbc	r15, r17
    22d8:	43 0b       	sbc	r20, r19
    22da:	56 0b       	sbc	r21, r22
    22dc:	c9 0b       	sbc	r28, r25
    22de:	d0 09       	sbc	r29, r0
    22e0:	c0 f7       	brcc	.-16     	; 0x22d2 <__ftoa_engine+0x10a>
    22e2:	e1 0c       	add	r14, r1
    22e4:	f1 1e       	adc	r15, r17
    22e6:	43 1f       	adc	r20, r19
    22e8:	56 1f       	adc	r21, r22
    22ea:	c9 1f       	adc	r28, r25
    22ec:	d0 1d       	adc	r29, r0
    22ee:	7e f4       	brtc	.+30     	; 0x230e <__ftoa_engine+0x146>
    22f0:	70 33       	cpi	r23, 0x30	; 48
    22f2:	11 f4       	brne	.+4      	; 0x22f8 <__ftoa_engine+0x130>
    22f4:	8a 95       	dec	r24
    22f6:	e6 cf       	rjmp	.-52     	; 0x22c4 <__ftoa_engine+0xfc>
    22f8:	e8 94       	clt
    22fa:	01 50       	subi	r16, 0x01	; 1
    22fc:	30 f0       	brcs	.+12     	; 0x230a <__ftoa_engine+0x142>
    22fe:	08 0f       	add	r16, r24
    2300:	0a f4       	brpl	.+2      	; 0x2304 <__ftoa_engine+0x13c>
    2302:	00 27       	eor	r16, r16
    2304:	02 17       	cp	r16, r18
    2306:	08 f4       	brcc	.+2      	; 0x230a <__ftoa_engine+0x142>
    2308:	20 2f       	mov	r18, r16
    230a:	23 95       	inc	r18
    230c:	02 2f       	mov	r16, r18
    230e:	7a 33       	cpi	r23, 0x3A	; 58
    2310:	28 f0       	brcs	.+10     	; 0x231c <__ftoa_engine+0x154>
    2312:	79 e3       	ldi	r23, 0x39	; 57
    2314:	7d 93       	st	X+, r23
    2316:	2a 95       	dec	r18
    2318:	e9 f7       	brne	.-6      	; 0x2314 <__ftoa_engine+0x14c>
    231a:	10 c0       	rjmp	.+32     	; 0x233c <__ftoa_engine+0x174>
    231c:	7d 93       	st	X+, r23
    231e:	2a 95       	dec	r18
    2320:	89 f6       	brne	.-94     	; 0x22c4 <__ftoa_engine+0xfc>
    2322:	06 94       	lsr	r0
    2324:	97 95       	ror	r25
    2326:	67 95       	ror	r22
    2328:	37 95       	ror	r19
    232a:	17 95       	ror	r17
    232c:	17 94       	ror	r1
    232e:	e1 18       	sub	r14, r1
    2330:	f1 0a       	sbc	r15, r17
    2332:	43 0b       	sbc	r20, r19
    2334:	56 0b       	sbc	r21, r22
    2336:	c9 0b       	sbc	r28, r25
    2338:	d0 09       	sbc	r29, r0
    233a:	98 f0       	brcs	.+38     	; 0x2362 <__ftoa_engine+0x19a>
    233c:	23 95       	inc	r18
    233e:	7e 91       	ld	r23, -X
    2340:	73 95       	inc	r23
    2342:	7a 33       	cpi	r23, 0x3A	; 58
    2344:	08 f0       	brcs	.+2      	; 0x2348 <__ftoa_engine+0x180>
    2346:	70 e3       	ldi	r23, 0x30	; 48
    2348:	7c 93       	st	X, r23
    234a:	20 13       	cpse	r18, r16
    234c:	b8 f7       	brcc	.-18     	; 0x233c <__ftoa_engine+0x174>
    234e:	7e 91       	ld	r23, -X
    2350:	70 61       	ori	r23, 0x10	; 16
    2352:	7d 93       	st	X+, r23
    2354:	30 f0       	brcs	.+12     	; 0x2362 <__ftoa_engine+0x19a>
    2356:	83 95       	inc	r24
    2358:	71 e3       	ldi	r23, 0x31	; 49
    235a:	7d 93       	st	X+, r23
    235c:	70 e3       	ldi	r23, 0x30	; 48
    235e:	2a 95       	dec	r18
    2360:	e1 f7       	brne	.-8      	; 0x235a <__ftoa_engine+0x192>
    2362:	11 24       	eor	r1, r1
    2364:	ef 90       	pop	r14
    2366:	ff 90       	pop	r15
    2368:	0f 91       	pop	r16
    236a:	1f 91       	pop	r17
    236c:	cf 91       	pop	r28
    236e:	df 91       	pop	r29
    2370:	99 27       	eor	r25, r25
    2372:	87 fd       	sbrc	r24, 7
    2374:	90 95       	com	r25
    2376:	08 95       	ret

00002378 <strrev>:
    2378:	dc 01       	movw	r26, r24
    237a:	fc 01       	movw	r30, r24
    237c:	67 2f       	mov	r22, r23
    237e:	71 91       	ld	r23, Z+
    2380:	77 23       	and	r23, r23
    2382:	e1 f7       	brne	.-8      	; 0x237c <strrev+0x4>
    2384:	32 97       	sbiw	r30, 0x02	; 2
    2386:	04 c0       	rjmp	.+8      	; 0x2390 <strrev+0x18>
    2388:	7c 91       	ld	r23, X
    238a:	6d 93       	st	X+, r22
    238c:	70 83       	st	Z, r23
    238e:	62 91       	ld	r22, -Z
    2390:	ae 17       	cp	r26, r30
    2392:	bf 07       	cpc	r27, r31
    2394:	c8 f3       	brcs	.-14     	; 0x2388 <strrev+0x10>
    2396:	08 95       	ret

00002398 <__prologue_saves__>:
    2398:	2f 92       	push	r2
    239a:	3f 92       	push	r3
    239c:	4f 92       	push	r4
    239e:	5f 92       	push	r5
    23a0:	6f 92       	push	r6
    23a2:	7f 92       	push	r7
    23a4:	8f 92       	push	r8
    23a6:	9f 92       	push	r9
    23a8:	af 92       	push	r10
    23aa:	bf 92       	push	r11
    23ac:	cf 92       	push	r12
    23ae:	df 92       	push	r13
    23b0:	ef 92       	push	r14
    23b2:	ff 92       	push	r15
    23b4:	0f 93       	push	r16
    23b6:	1f 93       	push	r17
    23b8:	cf 93       	push	r28
    23ba:	df 93       	push	r29
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	ca 1b       	sub	r28, r26
    23c2:	db 0b       	sbc	r29, r27
    23c4:	0f b6       	in	r0, 0x3f	; 63
    23c6:	f8 94       	cli
    23c8:	de bf       	out	0x3e, r29	; 62
    23ca:	0f be       	out	0x3f, r0	; 63
    23cc:	cd bf       	out	0x3d, r28	; 61
    23ce:	09 94       	ijmp

000023d0 <__epilogue_restores__>:
    23d0:	2a 88       	ldd	r2, Y+18	; 0x12
    23d2:	39 88       	ldd	r3, Y+17	; 0x11
    23d4:	48 88       	ldd	r4, Y+16	; 0x10
    23d6:	5f 84       	ldd	r5, Y+15	; 0x0f
    23d8:	6e 84       	ldd	r6, Y+14	; 0x0e
    23da:	7d 84       	ldd	r7, Y+13	; 0x0d
    23dc:	8c 84       	ldd	r8, Y+12	; 0x0c
    23de:	9b 84       	ldd	r9, Y+11	; 0x0b
    23e0:	aa 84       	ldd	r10, Y+10	; 0x0a
    23e2:	b9 84       	ldd	r11, Y+9	; 0x09
    23e4:	c8 84       	ldd	r12, Y+8	; 0x08
    23e6:	df 80       	ldd	r13, Y+7	; 0x07
    23e8:	ee 80       	ldd	r14, Y+6	; 0x06
    23ea:	fd 80       	ldd	r15, Y+5	; 0x05
    23ec:	0c 81       	ldd	r16, Y+4	; 0x04
    23ee:	1b 81       	ldd	r17, Y+3	; 0x03
    23f0:	aa 81       	ldd	r26, Y+2	; 0x02
    23f2:	b9 81       	ldd	r27, Y+1	; 0x01
    23f4:	ce 0f       	add	r28, r30
    23f6:	d1 1d       	adc	r29, r1
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	cd bf       	out	0x3d, r28	; 61
    2402:	ed 01       	movw	r28, r26
    2404:	08 95       	ret

00002406 <_exit>:
    2406:	f8 94       	cli

00002408 <__stop_program>:
    2408:	ff cf       	rjmp	.-2      	; 0x2408 <__stop_program>
