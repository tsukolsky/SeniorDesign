
HR_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  0000117c  00001210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000117c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000039  0080013e  0080013e  0000124e  2**0
                  ALLOC
  3 .stab         00001308  00000000  00000000  00001250  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b4  00000000  00000000  00002558  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00002710  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ebb  00000000  00000000  00002890  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000397  00000000  00000000  0000374b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a2e  00000000  00000000  00003ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c8  00000000  00000000  00004510  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000321  00000000  00000000  000047d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009e7  00000000  00000000  00004af9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000054e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
       4:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_1>
       8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      1c:	0c 94 85 01 	jmp	0x30a	; 0x30a <__vector_7>
      20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      2c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      34:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_13>
      38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      48:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      4c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      50:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	lds	r16, 0x00
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <_Z6GetADCv+0x62>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <__vector_7+0x3a4>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__SREG__+0x45>
      f4:	ba a5       	lds	r27, 0x6a
      f6:	6f a5       	lds	r22, 0x6f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__SREG__+0x89>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <__vector_7+0xd6>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__SREG__+0xd1>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <__vector_13+0x2e>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d8 e0       	ldi	r29, 0x08	; 8
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	ec e7       	ldi	r30, 0x7C	; 124
     176:	f1 e1       	ldi	r31, 0x11	; 17
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
     17a:	05 90       	lpm	r0, Z+
     17c:	0d 92       	st	X+, r0
     17e:	ae 33       	cpi	r26, 0x3E	; 62
     180:	b1 07       	cpc	r27, r17
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
     184:	11 e0       	ldi	r17, 0x01	; 1
     186:	ae e3       	ldi	r26, 0x3E	; 62
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	a7 37       	cpi	r26, 0x77	; 119
     190:	b1 07       	cpc	r27, r17
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
     194:	0e 94 90 03 	call	0x720	; 0x720 <main>
     198:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <_exit>

0000019c <__bad_interrupt>:
     19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <__vector_13>:

//Global trip
//trip globalTrip;

//ISR
ISR(TIMER1_OVF_vect){
     1a0:	1f 92       	push	r1
     1a2:	0f 92       	push	r0
     1a4:	0f b6       	in	r0, 0x3f	; 63
     1a6:	0f 92       	push	r0
     1a8:	11 24       	eor	r1, r1
     1aa:	2f 93       	push	r18
     1ac:	3f 93       	push	r19
     1ae:	4f 93       	push	r20
     1b0:	5f 93       	push	r21
     1b2:	6f 93       	push	r22
     1b4:	7f 93       	push	r23
     1b6:	8f 93       	push	r24
     1b8:	9f 93       	push	r25
     1ba:	af 93       	push	r26
     1bc:	bf 93       	push	r27
     1be:	ef 93       	push	r30
     1c0:	ff 93       	push	r31
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62
	cli();
     1ca:	f8 94       	cli
	//Do nothing;
	prtLED |= (1 << bnLED);
     1cc:	88 e2       	ldi	r24, 0x28	; 40
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	28 e2       	ldi	r18, 0x28	; 40
     1d2:	30 e0       	ldi	r19, 0x00	; 0
     1d4:	f9 01       	movw	r30, r18
     1d6:	20 81       	ld	r18, Z
     1d8:	20 62       	ori	r18, 0x20	; 32
     1da:	fc 01       	movw	r30, r24
     1dc:	20 83       	st	Z, r18
	Wait_ms(10);
     1de:	8a e0       	ldi	r24, 0x0A	; 10
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	0e 94 2b 05 	call	0xa56	; 0xa56 <_Z7Wait_msi>
	prtLED &= ~(1 << bnLED);
     1e6:	88 e2       	ldi	r24, 0x28	; 40
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	28 e2       	ldi	r18, 0x28	; 40
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	f9 01       	movw	r30, r18
     1f0:	20 81       	ld	r18, Z
     1f2:	2f 7d       	andi	r18, 0xDF	; 223
     1f4:	fc 01       	movw	r30, r24
     1f6:	20 83       	st	Z, r18
	sei();
     1f8:	78 94       	sei
}
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	ff 91       	pop	r31
     200:	ef 91       	pop	r30
     202:	bf 91       	pop	r27
     204:	af 91       	pop	r26
     206:	9f 91       	pop	r25
     208:	8f 91       	pop	r24
     20a:	7f 91       	pop	r23
     20c:	6f 91       	pop	r22
     20e:	5f 91       	pop	r21
     210:	4f 91       	pop	r20
     212:	3f 91       	pop	r19
     214:	2f 91       	pop	r18
     216:	0f 90       	pop	r0
     218:	0f be       	out	0x3f, r0	; 63
     21a:	0f 90       	pop	r0
     21c:	1f 90       	pop	r1
     21e:	18 95       	reti

00000220 <__vector_1>:

ISR(INT0_vect){
     220:	1f 92       	push	r1
     222:	0f 92       	push	r0
     224:	0f b6       	in	r0, 0x3f	; 63
     226:	0f 92       	push	r0
     228:	11 24       	eor	r1, r1
     22a:	2f 93       	push	r18
     22c:	3f 93       	push	r19
     22e:	4f 93       	push	r20
     230:	5f 93       	push	r21
     232:	6f 93       	push	r22
     234:	7f 93       	push	r23
     236:	8f 93       	push	r24
     238:	9f 93       	push	r25
     23a:	af 93       	push	r26
     23c:	bf 93       	push	r27
     23e:	ef 93       	push	r30
     240:	ff 93       	push	r31
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	00 d0       	rcall	.+0      	; 0x248 <__vector_1+0x28>
     248:	00 d0       	rcall	.+0      	; 0x24a <__vector_1+0x2a>
     24a:	cd b7       	in	r28, 0x3d	; 61
     24c:	de b7       	in	r29, 0x3e	; 62
	cli();
     24e:	f8 94       	cli
	volatile static unsigned int lastTime=0,interruptsSinceLastCalc=0;
	volatile unsigned int newTime=0;
     250:	1c 82       	std	Y+4, r1	; 0x04
     252:	1b 82       	std	Y+3, r1	; 0x03

	unsigned int value=TCNT1;
     254:	84 e8       	ldi	r24, 0x84	; 132
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	fc 01       	movw	r30, r24
     25a:	80 81       	ld	r24, Z
     25c:	91 81       	ldd	r25, Z+1	; 0x01
     25e:	9a 83       	std	Y+2, r25	; 0x02
     260:	89 83       	std	Y+1, r24	; 0x01

	newTime=value;
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	9a 81       	ldd	r25, Y+2	; 0x02
     266:	9c 83       	std	Y+4, r25	; 0x04
     268:	8b 83       	std	Y+3, r24	; 0x03

	if (interruptsSinceLastCalc++ > 8){
     26a:	80 91 73 01 	lds	r24, 0x0173
     26e:	90 91 74 01 	lds	r25, 0x0174
     272:	21 e0       	ldi	r18, 0x01	; 1
     274:	89 30       	cpi	r24, 0x09	; 9
     276:	91 05       	cpc	r25, r1
     278:	08 f4       	brcc	.+2      	; 0x27c <__vector_1+0x5c>
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	01 96       	adiw	r24, 0x01	; 1
     27e:	90 93 74 01 	sts	0x0174, r25
     282:	80 93 73 01 	sts	0x0173, r24
     286:	22 23       	and	r18, r18
     288:	39 f0       	breq	.+14     	; 0x298 <__vector_1+0x78>
		flagCalcSpeed=fTrue;
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	80 93 43 01 	sts	0x0143, r24
		interruptsSinceLastCalc=0;
     290:	10 92 74 01 	sts	0x0174, r1
     294:	10 92 73 01 	sts	0x0173, r1
	}
	
	prtLED |= (1 << bnSPEEDLED);
     298:	88 e2       	ldi	r24, 0x28	; 40
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	28 e2       	ldi	r18, 0x28	; 40
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	f9 01       	movw	r30, r18
     2a2:	20 81       	ld	r18, Z
     2a4:	20 61       	ori	r18, 0x10	; 16
     2a6:	fc 01       	movw	r30, r24
     2a8:	20 83       	st	Z, r18
	Wait_ms(10);
     2aa:	8a e0       	ldi	r24, 0x0A	; 10
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	0e 94 2b 05 	call	0xa56	; 0xa56 <_Z7Wait_msi>
	prtLED &= ~(1 << bnSPEEDLED);
     2b2:	88 e2       	ldi	r24, 0x28	; 40
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	28 e2       	ldi	r18, 0x28	; 40
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	f9 01       	movw	r30, r18
     2bc:	20 81       	ld	r18, Z
     2be:	2f 7e       	andi	r18, 0xEF	; 239
     2c0:	fc 01       	movw	r30, r24
     2c2:	20 83       	st	Z, r18
	
	if (newTime < lastTime){
     2c4:	8b 81       	ldd	r24, Y+3	; 0x03
     2c6:	9c 81       	ldd	r25, Y+4	; 0x04
     2c8:	80 91 75 01 	lds	r24, 0x0175
     2cc:	90 91 76 01 	lds	r25, 0x0176
	} else {
		//odometer1.addNewDataPoint(newTime-lastTime);
	}

	//Update last time
	lastTime=newTime;
     2d0:	8b 81       	ldd	r24, Y+3	; 0x03
     2d2:	9c 81       	ldd	r25, Y+4	; 0x04
     2d4:	90 93 76 01 	sts	0x0176, r25
     2d8:	80 93 75 01 	sts	0x0175, r24

	sei();	
     2dc:	78 94       	sei
}
     2de:	24 96       	adiw	r28, 0x04	; 4
     2e0:	de bf       	out	0x3e, r29	; 62
     2e2:	cd bf       	out	0x3d, r28	; 61
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	ff 91       	pop	r31
     2ea:	ef 91       	pop	r30
     2ec:	bf 91       	pop	r27
     2ee:	af 91       	pop	r26
     2f0:	9f 91       	pop	r25
     2f2:	8f 91       	pop	r24
     2f4:	7f 91       	pop	r23
     2f6:	6f 91       	pop	r22
     2f8:	5f 91       	pop	r21
     2fa:	4f 91       	pop	r20
     2fc:	3f 91       	pop	r19
     2fe:	2f 91       	pop	r18
     300:	0f 90       	pop	r0
     302:	0f be       	out	0x3f, r0	; 63
     304:	0f 90       	pop	r0
     306:	1f 90       	pop	r1
     308:	18 95       	reti

0000030a <__vector_7>:


//Toggled every 4ms roughly. 1/(8MHz/128/248)
ISR(TIMER2_COMPA_vect){
     30a:	1f 92       	push	r1
     30c:	0f 92       	push	r0
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	0f 92       	push	r0
     312:	11 24       	eor	r1, r1
     314:	2f 93       	push	r18
     316:	3f 93       	push	r19
     318:	4f 93       	push	r20
     31a:	5f 93       	push	r21
     31c:	6f 93       	push	r22
     31e:	7f 93       	push	r23
     320:	8f 93       	push	r24
     322:	9f 93       	push	r25
     324:	af 93       	push	r26
     326:	bf 93       	push	r27
     328:	ef 93       	push	r30
     32a:	ff 93       	push	r31
     32c:	cf 93       	push	r28
     32e:	df 93       	push	r29
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
     334:	28 97       	sbiw	r28, 0x08	; 8
     336:	de bf       	out	0x3e, r29	; 62
     338:	cd bf       	out	0x3d, r28	; 61
	cli();
     33a:	f8 94       	cli
	//Declare variables
	WORD signal=0;
     33c:	1e 82       	std	Y+6, r1	; 0x06
     33e:	1d 82       	std	Y+5, r1	; 0x05
	volatile static int rate[10],P=512,T=512,thresh=512,amp=100;
	volatile static WORD N=0;
	
	N+=2;
     340:	80 91 5d 01 	lds	r24, 0x015D
     344:	90 91 5e 01 	lds	r25, 0x015E
     348:	02 96       	adiw	r24, 0x02	; 2
     34a:	90 93 5e 01 	sts	0x015E, r25
     34e:	80 93 5d 01 	sts	0x015D, r24
	
	//Implementation: Should be moved to a routine/function in main program where this sends flag up.
	signal = GetADC();		//retrieves ADC reading on ADC0
     352:	0e 94 b0 04 	call	0x960	; 0x960 <_Z6GetADCv>
     356:	9e 83       	std	Y+6, r25	; 0x06
     358:	8d 83       	std	Y+5, r24	; 0x05
	
	//Adjust Peak and Trough Accordingly
	if (signal < thresh && N > (IBI/5)*3){		//signals less than thresh, time inbetween is more than last interval * 3/5
     35a:	80 91 36 01 	lds	r24, 0x0136
     35e:	90 91 37 01 	lds	r25, 0x0137
     362:	9c 01       	movw	r18, r24
     364:	8d 81       	ldd	r24, Y+5	; 0x05
     366:	9e 81       	ldd	r25, Y+6	; 0x06
     368:	82 17       	cp	r24, r18
     36a:	93 07       	cpc	r25, r19
     36c:	c8 f4       	brcc	.+50     	; 0x3a0 <__vector_7+0x96>
     36e:	80 91 40 01 	lds	r24, 0x0140
     372:	90 91 41 01 	lds	r25, 0x0141
     376:	25 e0       	ldi	r18, 0x05	; 5
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	b9 01       	movw	r22, r18
     37c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__divmodhi4>
     380:	9b 01       	movw	r18, r22
     382:	c9 01       	movw	r24, r18
     384:	88 0f       	add	r24, r24
     386:	99 1f       	adc	r25, r25
     388:	82 0f       	add	r24, r18
     38a:	93 1f       	adc	r25, r19
     38c:	9c 01       	movw	r18, r24
     38e:	80 91 5d 01 	lds	r24, 0x015D
     392:	90 91 5e 01 	lds	r25, 0x015E
     396:	28 17       	cp	r18, r24
     398:	39 07       	cpc	r19, r25
     39a:	10 f4       	brcc	.+4      	; 0x3a0 <__vector_7+0x96>
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	01 c0       	rjmp	.+2      	; 0x3a2 <__vector_7+0x98>
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	88 23       	and	r24, r24
     3a4:	a1 f0       	breq	.+40     	; 0x3ce <__vector_7+0xc4>
		if (signal < T){
     3a6:	80 91 38 01 	lds	r24, 0x0138
     3aa:	90 91 39 01 	lds	r25, 0x0139
     3ae:	9c 01       	movw	r18, r24
     3b0:	41 e0       	ldi	r20, 0x01	; 1
     3b2:	8d 81       	ldd	r24, Y+5	; 0x05
     3b4:	9e 81       	ldd	r25, Y+6	; 0x06
     3b6:	82 17       	cp	r24, r18
     3b8:	93 07       	cpc	r25, r19
     3ba:	08 f0       	brcs	.+2      	; 0x3be <__vector_7+0xb4>
     3bc:	40 e0       	ldi	r20, 0x00	; 0
     3be:	44 23       	and	r20, r20
     3c0:	31 f0       	breq	.+12     	; 0x3ce <__vector_7+0xc4>
			T = signal;
     3c2:	8d 81       	ldd	r24, Y+5	; 0x05
     3c4:	9e 81       	ldd	r25, Y+6	; 0x06
     3c6:	90 93 39 01 	sts	0x0139, r25
     3ca:	80 93 38 01 	sts	0x0138, r24
		}
	}
	if (signal > thresh && signal > P){
     3ce:	80 91 36 01 	lds	r24, 0x0136
     3d2:	90 91 37 01 	lds	r25, 0x0137
     3d6:	9c 01       	movw	r18, r24
     3d8:	8d 81       	ldd	r24, Y+5	; 0x05
     3da:	9e 81       	ldd	r25, Y+6	; 0x06
     3dc:	28 17       	cp	r18, r24
     3de:	39 07       	cpc	r19, r25
     3e0:	60 f4       	brcc	.+24     	; 0x3fa <__vector_7+0xf0>
     3e2:	80 91 3a 01 	lds	r24, 0x013A
     3e6:	90 91 3b 01 	lds	r25, 0x013B
     3ea:	9c 01       	movw	r18, r24
     3ec:	8d 81       	ldd	r24, Y+5	; 0x05
     3ee:	9e 81       	ldd	r25, Y+6	; 0x06
     3f0:	28 17       	cp	r18, r24
     3f2:	39 07       	cpc	r19, r25
     3f4:	10 f4       	brcc	.+4      	; 0x3fa <__vector_7+0xf0>
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	01 c0       	rjmp	.+2      	; 0x3fc <__vector_7+0xf2>
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	88 23       	and	r24, r24
     3fe:	31 f0       	breq	.+12     	; 0x40c <__vector_7+0x102>
		P = signal;
     400:	8d 81       	ldd	r24, Y+5	; 0x05
     402:	9e 81       	ldd	r25, Y+6	; 0x06
     404:	90 93 3b 01 	sts	0x013B, r25
     408:	80 93 3a 01 	sts	0x013A, r24
	}
	
	//If time since alst read is more than 250, see if signal is above thresh and time is good.
	if (N>250){
     40c:	80 91 5d 01 	lds	r24, 0x015D
     410:	90 91 5e 01 	lds	r25, 0x015E
     414:	21 e0       	ldi	r18, 0x01	; 1
     416:	8b 3f       	cpi	r24, 0xFB	; 251
     418:	91 05       	cpc	r25, r1
     41a:	08 f4       	brcc	.+2      	; 0x41e <__vector_7+0x114>
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	22 23       	and	r18, r18
     420:	09 f4       	brne	.+2      	; 0x424 <__vector_7+0x11a>
     422:	e8 c0       	rjmp	.+464    	; 0x5f4 <__vector_7+0x2ea>
		if ((signal > thresh) && !pulse && (N>((IBI/5)*3)) && !firstBeat){	//send pulse high
     424:	80 91 36 01 	lds	r24, 0x0136
     428:	90 91 37 01 	lds	r25, 0x0137
     42c:	9c 01       	movw	r18, r24
     42e:	8d 81       	ldd	r24, Y+5	; 0x05
     430:	9e 81       	ldd	r25, Y+6	; 0x06
     432:	28 17       	cp	r18, r24
     434:	39 07       	cpc	r19, r25
     436:	08 f5       	brcc	.+66     	; 0x47a <__vector_7+0x170>
     438:	80 91 46 01 	lds	r24, 0x0146
     43c:	88 23       	and	r24, r24
     43e:	e9 f4       	brne	.+58     	; 0x47a <__vector_7+0x170>
     440:	80 91 40 01 	lds	r24, 0x0140
     444:	90 91 41 01 	lds	r25, 0x0141
     448:	25 e0       	ldi	r18, 0x05	; 5
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	b9 01       	movw	r22, r18
     44e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__divmodhi4>
     452:	9b 01       	movw	r18, r22
     454:	c9 01       	movw	r24, r18
     456:	88 0f       	add	r24, r24
     458:	99 1f       	adc	r25, r25
     45a:	82 0f       	add	r24, r18
     45c:	93 1f       	adc	r25, r19
     45e:	9c 01       	movw	r18, r24
     460:	80 91 5d 01 	lds	r24, 0x015D
     464:	90 91 5e 01 	lds	r25, 0x015E
     468:	28 17       	cp	r18, r24
     46a:	39 07       	cpc	r19, r25
     46c:	30 f4       	brcc	.+12     	; 0x47a <__vector_7+0x170>
     46e:	80 91 00 01 	lds	r24, 0x0100
     472:	88 23       	and	r24, r24
     474:	11 f4       	brne	.+4      	; 0x47a <__vector_7+0x170>
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	01 c0       	rjmp	.+2      	; 0x47c <__vector_7+0x172>
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	88 23       	and	r24, r24
     47e:	09 f4       	brne	.+2      	; 0x482 <__vector_7+0x178>
     480:	af c0       	rjmp	.+350    	; 0x5e0 <__vector_7+0x2d6>
			Print0("-BEAT-");
     482:	82 e0       	ldi	r24, 0x02	; 2
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <_Z6Print0Pc>
			pulse=fTrue;
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	80 93 46 01 	sts	0x0146, r24
			prtLED |= (1 << bnLED);		//turn LED on
     490:	88 e2       	ldi	r24, 0x28	; 40
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	28 e2       	ldi	r18, 0x28	; 40
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	f9 01       	movw	r30, r18
     49a:	20 81       	ld	r18, Z
     49c:	20 62       	ori	r18, 0x20	; 32
     49e:	fc 01       	movw	r30, r24
     4a0:	20 83       	st	Z, r18
			IBI=N;
     4a2:	80 91 5d 01 	lds	r24, 0x015D
     4a6:	90 91 5e 01 	lds	r25, 0x015E
     4aa:	90 93 41 01 	sts	0x0141, r25
     4ae:	80 93 40 01 	sts	0x0140, r24
			N=0;
     4b2:	10 92 5e 01 	sts	0x015E, r1
     4b6:	10 92 5d 01 	sts	0x015D, r1
			if (secondBeat){
     4ba:	90 91 01 01 	lds	r25, 0x0101
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	99 23       	and	r25, r25
     4c2:	09 f4       	brne	.+2      	; 0x4c6 <__vector_7+0x1bc>
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	88 23       	and	r24, r24
     4c8:	01 f1       	breq	.+64     	; 0x50a <__vector_7+0x200>
				secondBeat=fFalse;
     4ca:	10 92 01 01 	sts	0x0101, r1
				for (int i=0; i < 9; i++){
     4ce:	1a 82       	std	Y+2, r1	; 0x02
     4d0:	19 82       	std	Y+1, r1	; 0x01
     4d2:	12 c0       	rjmp	.+36     	; 0x4f8 <__vector_7+0x1ee>
					rate[i]=IBI;
     4d4:	20 91 40 01 	lds	r18, 0x0140
     4d8:	30 91 41 01 	lds	r19, 0x0141
     4dc:	89 81       	ldd	r24, Y+1	; 0x01
     4de:	9a 81       	ldd	r25, Y+2	; 0x02
     4e0:	88 0f       	add	r24, r24
     4e2:	99 1f       	adc	r25, r25
     4e4:	81 5a       	subi	r24, 0xA1	; 161
     4e6:	9e 4f       	sbci	r25, 0xFE	; 254
     4e8:	fc 01       	movw	r30, r24
     4ea:	31 83       	std	Z+1, r19	; 0x01
     4ec:	20 83       	st	Z, r18
			prtLED |= (1 << bnLED);		//turn LED on
			IBI=N;
			N=0;
			if (secondBeat){
				secondBeat=fFalse;
				for (int i=0; i < 9; i++){
     4ee:	89 81       	ldd	r24, Y+1	; 0x01
     4f0:	9a 81       	ldd	r25, Y+2	; 0x02
     4f2:	01 96       	adiw	r24, 0x01	; 1
     4f4:	9a 83       	std	Y+2, r25	; 0x02
     4f6:	89 83       	std	Y+1, r24	; 0x01
     4f8:	21 e0       	ldi	r18, 0x01	; 1
     4fa:	89 81       	ldd	r24, Y+1	; 0x01
     4fc:	9a 81       	ldd	r25, Y+2	; 0x02
     4fe:	89 30       	cpi	r24, 0x09	; 9
     500:	91 05       	cpc	r25, r1
     502:	0c f0       	brlt	.+2      	; 0x506 <__vector_7+0x1fc>
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	22 23       	and	r18, r18
     508:	29 f7       	brne	.-54     	; 0x4d4 <__vector_7+0x1ca>
					rate[i]=IBI;
				}
			}
		
			//Calculate the IBI and BPM.
			volatile WORD runningTotal=0;
     50a:	18 86       	std	Y+8, r1	; 0x08
     50c:	1f 82       	std	Y+7, r1	; 0x07
			for (int i=0; i< 9; i++){
     50e:	1c 82       	std	Y+4, r1	; 0x04
     510:	1b 82       	std	Y+3, r1	; 0x03
     512:	28 c0       	rjmp	.+80     	; 0x564 <__vector_7+0x25a>
				rate[i]=rate[i+1];	//shift backwards
     514:	8b 81       	ldd	r24, Y+3	; 0x03
     516:	9c 81       	ldd	r25, Y+4	; 0x04
     518:	01 96       	adiw	r24, 0x01	; 1
     51a:	88 0f       	add	r24, r24
     51c:	99 1f       	adc	r25, r25
     51e:	81 5a       	subi	r24, 0xA1	; 161
     520:	9e 4f       	sbci	r25, 0xFE	; 254
     522:	fc 01       	movw	r30, r24
     524:	20 81       	ld	r18, Z
     526:	31 81       	ldd	r19, Z+1	; 0x01
     528:	8b 81       	ldd	r24, Y+3	; 0x03
     52a:	9c 81       	ldd	r25, Y+4	; 0x04
     52c:	88 0f       	add	r24, r24
     52e:	99 1f       	adc	r25, r25
     530:	81 5a       	subi	r24, 0xA1	; 161
     532:	9e 4f       	sbci	r25, 0xFE	; 254
     534:	fc 01       	movw	r30, r24
     536:	31 83       	std	Z+1, r19	; 0x01
     538:	20 83       	st	Z, r18
				runningTotal += rate[i];
     53a:	8b 81       	ldd	r24, Y+3	; 0x03
     53c:	9c 81       	ldd	r25, Y+4	; 0x04
     53e:	88 0f       	add	r24, r24
     540:	99 1f       	adc	r25, r25
     542:	81 5a       	subi	r24, 0xA1	; 161
     544:	9e 4f       	sbci	r25, 0xFE	; 254
     546:	fc 01       	movw	r30, r24
     548:	80 81       	ld	r24, Z
     54a:	91 81       	ldd	r25, Z+1	; 0x01
     54c:	9c 01       	movw	r18, r24
     54e:	8f 81       	ldd	r24, Y+7	; 0x07
     550:	98 85       	ldd	r25, Y+8	; 0x08
     552:	82 0f       	add	r24, r18
     554:	93 1f       	adc	r25, r19
     556:	98 87       	std	Y+8, r25	; 0x08
     558:	8f 83       	std	Y+7, r24	; 0x07
				}
			}
		
			//Calculate the IBI and BPM.
			volatile WORD runningTotal=0;
			for (int i=0; i< 9; i++){
     55a:	8b 81       	ldd	r24, Y+3	; 0x03
     55c:	9c 81       	ldd	r25, Y+4	; 0x04
     55e:	01 96       	adiw	r24, 0x01	; 1
     560:	9c 83       	std	Y+4, r25	; 0x04
     562:	8b 83       	std	Y+3, r24	; 0x03
     564:	21 e0       	ldi	r18, 0x01	; 1
     566:	8b 81       	ldd	r24, Y+3	; 0x03
     568:	9c 81       	ldd	r25, Y+4	; 0x04
     56a:	89 30       	cpi	r24, 0x09	; 9
     56c:	91 05       	cpc	r25, r1
     56e:	0c f0       	brlt	.+2      	; 0x572 <__vector_7+0x268>
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	22 23       	and	r18, r18
     574:	79 f6       	brne	.-98     	; 0x514 <__vector_7+0x20a>
				rate[i]=rate[i+1];	//shift backwards
				runningTotal += rate[i];
			}
			rate[9]=IBI;
     576:	80 91 40 01 	lds	r24, 0x0140
     57a:	90 91 41 01 	lds	r25, 0x0141
     57e:	90 93 72 01 	sts	0x0172, r25
     582:	80 93 71 01 	sts	0x0171, r24
			runningTotal+=rate[9];
     586:	80 91 71 01 	lds	r24, 0x0171
     58a:	90 91 72 01 	lds	r25, 0x0172
     58e:	9c 01       	movw	r18, r24
     590:	8f 81       	ldd	r24, Y+7	; 0x07
     592:	98 85       	ldd	r25, Y+8	; 0x08
     594:	82 0f       	add	r24, r18
     596:	93 1f       	adc	r25, r19
     598:	98 87       	std	Y+8, r25	; 0x08
     59a:	8f 83       	std	Y+7, r24	; 0x07
			runningTotal/=10;			//time it took all of them in milliseconds
     59c:	8f 81       	ldd	r24, Y+7	; 0x07
     59e:	98 85       	ldd	r25, Y+8	; 0x08
     5a0:	2a e0       	ldi	r18, 0x0A	; 10
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	b9 01       	movw	r22, r18
     5a6:	0e 94 a9 05 	call	0xb52	; 0xb52 <__udivmodhi4>
     5aa:	9b 01       	movw	r18, r22
     5ac:	c9 01       	movw	r24, r18
     5ae:	98 87       	std	Y+8, r25	; 0x08
     5b0:	8f 83       	std	Y+7, r24	; 0x07
			BPM=60000/runningTotal;		//60 seconds in minute, 1000ms in second
     5b2:	8f 81       	ldd	r24, Y+7	; 0x07
     5b4:	98 85       	ldd	r25, Y+8	; 0x08
     5b6:	9c 01       	movw	r18, r24
     5b8:	40 e0       	ldi	r20, 0x00	; 0
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	80 e6       	ldi	r24, 0x60	; 96
     5be:	9a ee       	ldi	r25, 0xEA	; 234
     5c0:	a0 e0       	ldi	r26, 0x00	; 0
     5c2:	b0 e0       	ldi	r27, 0x00	; 0
     5c4:	bc 01       	movw	r22, r24
     5c6:	cd 01       	movw	r24, r26
     5c8:	0e 94 d0 05 	call	0xba0	; 0xba0 <__divmodsi4>
     5cc:	da 01       	movw	r26, r20
     5ce:	c9 01       	movw	r24, r18
     5d0:	90 93 3f 01 	sts	0x013F, r25
     5d4:	80 93 3e 01 	sts	0x013E, r24
			QS=fTrue;
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	80 93 42 01 	sts	0x0142, r24
     5de:	0a c0       	rjmp	.+20     	; 0x5f4 <__vector_7+0x2ea>

		} else if (firstBeat){
     5e0:	90 91 00 01 	lds	r25, 0x0100
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	99 23       	and	r25, r25
     5e8:	09 f4       	brne	.+2      	; 0x5ec <__vector_7+0x2e2>
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	88 23       	and	r24, r24
     5ee:	11 f0       	breq	.+4      	; 0x5f4 <__vector_7+0x2ea>
				firstBeat=fFalse;
     5f0:	10 92 00 01 	sts	0x0100, r1
		}		
	}//end if N>250
		
	//No pulse after last interrupt/pulse, send signal low again, reset things.
	if (signal < thresh && pulse){
     5f4:	80 91 36 01 	lds	r24, 0x0136
     5f8:	90 91 37 01 	lds	r25, 0x0137
     5fc:	9c 01       	movw	r18, r24
     5fe:	8d 81       	ldd	r24, Y+5	; 0x05
     600:	9e 81       	ldd	r25, Y+6	; 0x06
     602:	82 17       	cp	r24, r18
     604:	93 07       	cpc	r25, r19
     606:	30 f4       	brcc	.+12     	; 0x614 <__vector_7+0x30a>
     608:	80 91 46 01 	lds	r24, 0x0146
     60c:	88 23       	and	r24, r24
     60e:	11 f0       	breq	.+4      	; 0x614 <__vector_7+0x30a>
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	01 c0       	rjmp	.+2      	; 0x616 <__vector_7+0x30c>
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	88 23       	and	r24, r24
     618:	09 f4       	brne	.+2      	; 0x61c <__vector_7+0x312>
     61a:	3f c0       	rjmp	.+126    	; 0x69a <__vector_7+0x390>
		prtLED &= ~(1 << bnLED);
     61c:	88 e2       	ldi	r24, 0x28	; 40
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	28 e2       	ldi	r18, 0x28	; 40
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	f9 01       	movw	r30, r18
     626:	20 81       	ld	r18, Z
     628:	2f 7d       	andi	r18, 0xDF	; 223
     62a:	fc 01       	movw	r30, r24
     62c:	20 83       	st	Z, r18
		pulse=fFalse;
     62e:	10 92 46 01 	sts	0x0146, r1
		amp=P-T;
     632:	20 91 3a 01 	lds	r18, 0x013A
     636:	30 91 3b 01 	lds	r19, 0x013B
     63a:	80 91 38 01 	lds	r24, 0x0138
     63e:	90 91 39 01 	lds	r25, 0x0139
     642:	a9 01       	movw	r20, r18
     644:	48 1b       	sub	r20, r24
     646:	59 0b       	sbc	r21, r25
     648:	ca 01       	movw	r24, r20
     64a:	90 93 3d 01 	sts	0x013D, r25
     64e:	80 93 3c 01 	sts	0x013C, r24
		thresh=amp/2+T;
     652:	80 91 3c 01 	lds	r24, 0x013C
     656:	90 91 3d 01 	lds	r25, 0x013D
     65a:	99 23       	and	r25, r25
     65c:	0c f4       	brge	.+2      	; 0x660 <__vector_7+0x356>
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	95 95       	asr	r25
     662:	87 95       	ror	r24
     664:	9c 01       	movw	r18, r24
     666:	80 91 38 01 	lds	r24, 0x0138
     66a:	90 91 39 01 	lds	r25, 0x0139
     66e:	82 0f       	add	r24, r18
     670:	93 1f       	adc	r25, r19
     672:	90 93 37 01 	sts	0x0137, r25
     676:	80 93 36 01 	sts	0x0136, r24
		P=thresh;
     67a:	80 91 36 01 	lds	r24, 0x0136
     67e:	90 91 37 01 	lds	r25, 0x0137
     682:	90 93 3b 01 	sts	0x013B, r25
     686:	80 93 3a 01 	sts	0x013A, r24
		T=thresh;
     68a:	80 91 36 01 	lds	r24, 0x0136
     68e:	90 91 37 01 	lds	r25, 0x0137
     692:	90 93 39 01 	sts	0x0139, r25
     696:	80 93 38 01 	sts	0x0138, r24
	}
	
	//Wow, not getting a pulse, reset things
	if (N>=20000){
     69a:	80 91 5d 01 	lds	r24, 0x015D
     69e:	90 91 5e 01 	lds	r25, 0x015E
     6a2:	21 e0       	ldi	r18, 0x01	; 1
     6a4:	5e e4       	ldi	r21, 0x4E	; 78
     6a6:	80 32       	cpi	r24, 0x20	; 32
     6a8:	95 07       	cpc	r25, r21
     6aa:	08 f4       	brcc	.+2      	; 0x6ae <__vector_7+0x3a4>
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	22 23       	and	r18, r18
     6b0:	01 f1       	breq	.+64     	; 0x6f2 <__vector_7+0x3e8>
		Print0("-TIMEOUT-");
     6b2:	89 e0       	ldi	r24, 0x09	; 9
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <_Z6Print0Pc>
		thresh=512;
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	92 e0       	ldi	r25, 0x02	; 2
     6be:	90 93 37 01 	sts	0x0137, r25
     6c2:	80 93 36 01 	sts	0x0136, r24
		P=512;
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	92 e0       	ldi	r25, 0x02	; 2
     6ca:	90 93 3b 01 	sts	0x013B, r25
     6ce:	80 93 3a 01 	sts	0x013A, r24
		T=512;
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	92 e0       	ldi	r25, 0x02	; 2
     6d6:	90 93 39 01 	sts	0x0139, r25
     6da:	80 93 38 01 	sts	0x0138, r24
		firstBeat=fTrue;
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	80 93 00 01 	sts	0x0100, r24
		secondBeat=fTrue;
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	80 93 01 01 	sts	0x0101, r24
		N=0;
     6ea:	10 92 5e 01 	sts	0x015E, r1
     6ee:	10 92 5d 01 	sts	0x015D, r1
	}
	sei();		//dumb as shit
     6f2:	78 94       	sei
}
     6f4:	28 96       	adiw	r28, 0x08	; 8
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	cd bf       	out	0x3d, r28	; 61
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	ff 91       	pop	r31
     700:	ef 91       	pop	r30
     702:	bf 91       	pop	r27
     704:	af 91       	pop	r26
     706:	9f 91       	pop	r25
     708:	8f 91       	pop	r24
     70a:	7f 91       	pop	r23
     70c:	6f 91       	pop	r22
     70e:	5f 91       	pop	r21
     710:	4f 91       	pop	r20
     712:	3f 91       	pop	r19
     714:	2f 91       	pop	r18
     716:	0f 90       	pop	r0
     718:	0f be       	out	0x3f, r0	; 63
     71a:	0f 90       	pop	r0
     71c:	1f 90       	pop	r1
     71e:	18 95       	reti

00000720 <main>:

//Main Program
int main(void){
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
     72c:	a0 97       	sbiw	r28, 0x20	; 32
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	f8 94       	cli
     732:	de bf       	out	0x3e, r29	; 62
     734:	0f be       	out	0x3f, r0	; 63
     736:	cd bf       	out	0x3d, r28	; 61
	DeviceInit();
     738:	0e 94 05 04 	call	0x80a	; 0x80a <_Z10DeviceInitv>
	AppInit(MYUBRR);
     73c:	83 e3       	ldi	r24, 0x33	; 51
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	0e 94 24 04 	call	0x848	; 0x848 <_Z7AppInitj>
	Print0("Hello...");
     744:	83 e1       	ldi	r24, 0x13	; 19
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <_Z6Print0Pc>
	Wait_ms(500);
     74c:	84 ef       	ldi	r24, 0xF4	; 244
     74e:	91 e0       	ldi	r25, 0x01	; 1
     750:	0e 94 2b 05 	call	0xa56	; 0xa56 <_Z7Wait_msi>
	initTimer2();	
     754:	0e 94 91 04 	call	0x922	; 0x922 <_Z10initTimer2v>
	sei();
     758:	78 94       	sei
     75a:	01 c0       	rjmp	.+2      	; 0x75e <main+0x3e>
	while (fTrue){
     75c:	00 00       	nop
		if (QS){
     75e:	90 91 42 01 	lds	r25, 0x0142
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	99 23       	and	r25, r25
     766:	09 f4       	brne	.+2      	; 0x76a <main+0x4a>
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	88 23       	and	r24, r24
     76c:	59 f1       	breq	.+86     	; 0x7c4 <main+0xa4>
			cli();
     76e:	f8 94       	cli
			Print0("Processing...");
     770:	8c e1       	ldi	r24, 0x1C	; 28
     772:	91 e0       	ldi	r25, 0x01	; 1
     774:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <_Z6Print0Pc>
			QS=fFalse;
     778:	10 92 42 01 	sts	0x0142, r1
			char BMPstring[10];
			char IBIstring[10];
			utoa(BPM,BMPstring,10);
     77c:	80 91 3e 01 	lds	r24, 0x013E
     780:	90 91 3f 01 	lds	r25, 0x013F
     784:	9e 01       	movw	r18, r28
     786:	2b 5f       	subi	r18, 0xFB	; 251
     788:	3f 4f       	sbci	r19, 0xFF	; 255
     78a:	b9 01       	movw	r22, r18
     78c:	4a e0       	ldi	r20, 0x0A	; 10
     78e:	50 e0       	ldi	r21, 0x00	; 0
     790:	0e 94 2f 06 	call	0xc5e	; 0xc5e <utoa>
			utoa(IBI,IBIstring,10);
     794:	80 91 40 01 	lds	r24, 0x0140
     798:	90 91 41 01 	lds	r25, 0x0141
     79c:	9e 01       	movw	r18, r28
     79e:	21 5f       	subi	r18, 0xF1	; 241
     7a0:	3f 4f       	sbci	r19, 0xFF	; 255
     7a2:	b9 01       	movw	r22, r18
     7a4:	4a e0       	ldi	r20, 0x0A	; 10
     7a6:	50 e0       	ldi	r21, 0x00	; 0
     7a8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <utoa>
			BMPstring[9]='\0';
     7ac:	1e 86       	std	Y+14, r1	; 0x0e
			BMPstring[8]='.';
     7ae:	8e e2       	ldi	r24, 0x2E	; 46
     7b0:	8d 87       	std	Y+13, r24	; 0x0d
			Print0("BPM:");
     7b2:	8a e2       	ldi	r24, 0x2A	; 42
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <_Z6Print0Pc>
			Print0(BMPstring);
     7ba:	ce 01       	movw	r24, r28
     7bc:	05 96       	adiw	r24, 0x05	; 5
     7be:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <_Z6Print0Pc>
			sei();
     7c2:	78 94       	sei
		}
		
		if (flagCalcSpeed){
     7c4:	90 91 43 01 	lds	r25, 0x0143
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	99 23       	and	r25, r25
     7cc:	09 f4       	brne	.+2      	; 0x7d0 <main+0xb0>
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	88 23       	and	r24, r24
     7d2:	21 f2       	breq	.-120    	; 0x75c <main+0x3c>
			//Calculate speed using data points.
			float speed;
			char speedString[8];
			//speed = odometer1.getCurrentSpeed();
			dtostrf(speed,5,2,speedString);
     7d4:	89 81       	ldd	r24, Y+1	; 0x01
     7d6:	9a 81       	ldd	r25, Y+2	; 0x02
     7d8:	ab 81       	ldd	r26, Y+3	; 0x03
     7da:	bc 81       	ldd	r27, Y+4	; 0x04
     7dc:	fe 01       	movw	r30, r28
     7de:	79 96       	adiw	r30, 0x19	; 25
     7e0:	bc 01       	movw	r22, r24
     7e2:	cd 01       	movw	r24, r26
     7e4:	45 e0       	ldi	r20, 0x05	; 5
     7e6:	22 e0       	ldi	r18, 0x02	; 2
     7e8:	8f 01       	movw	r16, r30
     7ea:	0e 94 0d 06 	call	0xc1a	; 0xc1a <dtostrf>
			speedString[6]='.';
     7ee:	8e e2       	ldi	r24, 0x2E	; 46
     7f0:	8f 8f       	std	Y+31, r24	; 0x1f
			speedString[7]='\0';
     7f2:	18 a2       	lds	r17, 0x98
			Print0("Speed:");
     7f4:	8f e2       	ldi	r24, 0x2F	; 47
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <_Z6Print0Pc>
			Print0(speedString);
     7fc:	ce 01       	movw	r24, r28
     7fe:	49 96       	adiw	r24, 0x19	; 25
     800:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <_Z6Print0Pc>
			flagCalcSpeed=fFalse;
     804:	10 92 43 01 	sts	0x0143, r1
	AppInit(MYUBRR);
	Print0("Hello...");
	Wait_ms(500);
	initTimer2();	
	sei();
	while (fTrue){
     808:	a9 cf       	rjmp	.-174    	; 0x75c <main+0x3c>

0000080a <_Z10DeviceInitv>:
		}	
	}
	
}
/*************************************************************************************************************/
void DeviceInit(){
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
	//Set all ports to input with no pull
	DDRB = 0;
     812:	84 e2       	ldi	r24, 0x24	; 36
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	fc 01       	movw	r30, r24
     818:	10 82       	st	Z, r1
	DDRC = 0;
     81a:	87 e2       	ldi	r24, 0x27	; 39
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	fc 01       	movw	r30, r24
     820:	10 82       	st	Z, r1
	DDRD = 0;
     822:	8a e2       	ldi	r24, 0x2A	; 42
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	fc 01       	movw	r30, r24
     828:	10 82       	st	Z, r1
	
	PORTB = 0;
     82a:	85 e2       	ldi	r24, 0x25	; 37
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	fc 01       	movw	r30, r24
     830:	10 82       	st	Z, r1
	PORTC = 0;
     832:	88 e2       	ldi	r24, 0x28	; 40
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	fc 01       	movw	r30, r24
     838:	10 82       	st	Z, r1
	PORTD = 0;
     83a:	8b e2       	ldi	r24, 0x2B	; 43
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	fc 01       	movw	r30, r24
     840:	10 82       	st	Z, r1
}
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	08 95       	ret

00000848 <_Z7AppInitj>:
/*************************************************************************************************************/
void AppInit(unsigned int ubrr){
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	00 d0       	rcall	.+0      	; 0x84e <_Z7AppInitj+0x6>
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	9a 83       	std	Y+2, r25	; 0x02
     854:	89 83       	std	Y+1, r24	; 0x01
	
	//Set high and low byte of baud rate, then enable pins and functions
	UBRR0L = ubrr;
     856:	84 ec       	ldi	r24, 0xC4	; 196
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	29 81       	ldd	r18, Y+1	; 0x01
     85c:	fc 01       	movw	r30, r24
     85e:	20 83       	st	Z, r18
	UBRR0H |= (ubrr >> 8);
     860:	85 ec       	ldi	r24, 0xC5	; 197
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	25 ec       	ldi	r18, 0xC5	; 197
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	f9 01       	movw	r30, r18
     86a:	40 81       	ld	r20, Z
     86c:	29 81       	ldd	r18, Y+1	; 0x01
     86e:	3a 81       	ldd	r19, Y+2	; 0x02
     870:	23 2f       	mov	r18, r19
     872:	33 27       	eor	r19, r19
     874:	24 2b       	or	r18, r20
     876:	fc 01       	movw	r30, r24
     878:	20 83       	st	Z, r18
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);		//Enable TX0 and RX0
     87a:	81 ec       	ldi	r24, 0xC1	; 193
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	28 e1       	ldi	r18, 0x18	; 24
     880:	fc 01       	movw	r30, r24
     882:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);		//Async, 8 data bits no parity
     884:	82 ec       	ldi	r24, 0xC2	; 194
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	26 e0       	ldi	r18, 0x06	; 6
     88a:	fc 01       	movw	r30, r24
     88c:	20 83       	st	Z, r18
	
	//Disable power to certain modules
	PRR |= (1 << PRTWI)|(1 << PRTIM0)|(1 << PRSPI);  //Turn off everything 
     88e:	84 e6       	ldi	r24, 0x64	; 100
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	24 e6       	ldi	r18, 0x64	; 100
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	f9 01       	movw	r30, r18
     898:	20 81       	ld	r18, Z
     89a:	24 6a       	ori	r18, 0xA4	; 164
     89c:	fc 01       	movw	r30, r24
     89e:	20 83       	st	Z, r18

	ADCSRA |= (1 << ADEN)|(1 << ADPS1)|(1 << ADPS0);		//enable ADC with clock division factor of 8
     8a0:	8a e7       	ldi	r24, 0x7A	; 122
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	2a e7       	ldi	r18, 0x7A	; 122
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	f9 01       	movw	r30, r18
     8aa:	20 81       	ld	r18, Z
     8ac:	23 68       	ori	r18, 0x83	; 131
     8ae:	fc 01       	movw	r30, r24
     8b0:	20 83       	st	Z, r18
	ADMUX |= (1 << REFS0)|(1 << MUX1);		//internal 3.3V reference on AVCC, channel ADC2
     8b2:	8c e7       	ldi	r24, 0x7C	; 124
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	2c e7       	ldi	r18, 0x7C	; 124
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	f9 01       	movw	r30, r18
     8bc:	20 81       	ld	r18, Z
     8be:	22 64       	ori	r18, 0x42	; 66
     8c0:	fc 01       	movw	r30, r24
     8c2:	20 83       	st	Z, r18


	
	//Initialize Timer 1(16-bit), counter is read on an interrupt to measure speed. assumes rider is going  above a certain speed for initial test.
	TCCR1B |= (1 << CS12); 				//Prescaler of 256 for system clock
     8c4:	81 e8       	ldi	r24, 0x81	; 129
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	21 e8       	ldi	r18, 0x81	; 129
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	f9 01       	movw	r30, r18
     8ce:	20 81       	ld	r18, Z
     8d0:	24 60       	ori	r18, 0x04	; 4
     8d2:	fc 01       	movw	r30, r24
     8d4:	20 83       	st	Z, r18
	TIFR1= (1 << TOV2);				//Make sure the overflow flag is not already set
     8d6:	86 e3       	ldi	r24, 0x36	; 54
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	21 e0       	ldi	r18, 0x01	; 1
     8dc:	fc 01       	movw	r30, r24
     8de:	20 83       	st	Z, r18
	TCNT1 = 0x00;
     8e0:	84 e8       	ldi	r24, 0x84	; 132
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	fc 01       	movw	r30, r24
     8e6:	11 82       	std	Z+1, r1	; 0x01
     8e8:	10 82       	st	Z, r1
	//TIMSK1=(1 << TOIE2);

	
	//Enable SPeed interrupt
	EICRA = (1 << ISC01)|(1 << ISC00);
     8ea:	89 e6       	ldi	r24, 0x69	; 105
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	23 e0       	ldi	r18, 0x03	; 3
     8f0:	fc 01       	movw	r30, r24
     8f2:	20 83       	st	Z, r18
	//EIMSK = (1 << INT0);
	
	//Setup LED Blinking Port
	ddrLED |= (1 << bnLED)|(1 << bnSPEEDLED);
     8f4:	87 e2       	ldi	r24, 0x27	; 39
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	27 e2       	ldi	r18, 0x27	; 39
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	f9 01       	movw	r30, r18
     8fe:	20 81       	ld	r18, Z
     900:	20 63       	ori	r18, 0x30	; 48
     902:	fc 01       	movw	r30, r24
     904:	20 83       	st	Z, r18
	prtLED &= ~((1 << bnSPEEDLED)|(1 << bnLED));	//off initially.
     906:	88 e2       	ldi	r24, 0x28	; 40
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	28 e2       	ldi	r18, 0x28	; 40
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	f9 01       	movw	r30, r18
     910:	20 81       	ld	r18, Z
     912:	2f 7c       	andi	r18, 0xCF	; 207
     914:	fc 01       	movw	r30, r24
     916:	20 83       	st	Z, r18
		
}
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	08 95       	ret

00000922 <_Z10initTimer2v>:
/*************************************************************************************************************/
void initTimer2(){
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	cd b7       	in	r28, 0x3d	; 61
     928:	de b7       	in	r29, 0x3e	; 62
	//Initialize timer 2, counter compare on TCNTA compare equals
	TCCR2A = (1 << WGM21);				//OCRA good, TOV set on top. TCNT2 cleared when match occurs
     92a:	80 eb       	ldi	r24, 0xB0	; 176
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	22 e0       	ldi	r18, 0x02	; 2
     930:	fc 01       	movw	r30, r24
     932:	20 83       	st	Z, r18
	TCCR2B = (1 << CS22)|(1 << CS20);		//clk/128
     934:	81 eb       	ldi	r24, 0xB1	; 177
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	25 e0       	ldi	r18, 0x05	; 5
     93a:	fc 01       	movw	r30, r24
     93c:	20 83       	st	Z, r18
	OCR2A = 0x7c;					//248
     93e:	83 eb       	ldi	r24, 0xB3	; 179
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	2c e7       	ldi	r18, 0x7C	; 124
     944:	fc 01       	movw	r30, r24
     946:	20 83       	st	Z, r18
	TCNT2 = 0x00;					//Initialize
     948:	82 eb       	ldi	r24, 0xB2	; 178
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	fc 01       	movw	r30, r24
     94e:	10 82       	st	Z, r1
	TIMSK2 = (1 << OCIE2A);				//enable OCIE2A
     950:	80 e7       	ldi	r24, 0x70	; 112
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	22 e0       	ldi	r18, 0x02	; 2
     956:	fc 01       	movw	r30, r24
     958:	20 83       	st	Z, r18
}
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	08 95       	ret

00000960 <_Z6GetADCv>:


/*************************************************************************************************************/

WORD GetADC(){
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	cd b7       	in	r28, 0x3d	; 61
     966:	de b7       	in	r29, 0x3e	; 62
     968:	2e 97       	sbiw	r28, 0x0e	; 14
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	f8 94       	cli
     96e:	de bf       	out	0x3e, r29	; 62
     970:	0f be       	out	0x3f, r0	; 63
     972:	cd bf       	out	0x3d, r28	; 61
	//Disable global interrupts; declare variables.
	//cli();
	volatile WORD ADCreading=0;
     974:	1c 82       	std	Y+4, r1	; 0x04
     976:	1b 82       	std	Y+3, r1	; 0x03
	volatile static int reps=0;
	
	//Take two ADC readings, throw the first one out.
	for (int i=0; i<2; i++){ADCSRA |= (1 << ADSC); while (ADCSRA & (1 << ADSC));} //does two
     978:	1a 82       	std	Y+2, r1	; 0x02
     97a:	19 82       	std	Y+1, r1	; 0x01
     97c:	1c c0       	rjmp	.+56     	; 0x9b6 <_Z6GetADCv+0x56>
     97e:	8a e7       	ldi	r24, 0x7A	; 122
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	2a e7       	ldi	r18, 0x7A	; 122
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	f9 01       	movw	r30, r18
     988:	20 81       	ld	r18, Z
     98a:	20 64       	ori	r18, 0x40	; 64
     98c:	fc 01       	movw	r30, r24
     98e:	20 83       	st	Z, r18
     990:	8a e7       	ldi	r24, 0x7A	; 122
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	fc 01       	movw	r30, r24
     996:	80 81       	ld	r24, Z
     998:	88 2f       	mov	r24, r24
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	80 74       	andi	r24, 0x40	; 64
     99e:	90 70       	andi	r25, 0x00	; 0
     9a0:	21 e0       	ldi	r18, 0x01	; 1
     9a2:	00 97       	sbiw	r24, 0x00	; 0
     9a4:	09 f4       	brne	.+2      	; 0x9a8 <_Z6GetADCv+0x48>
     9a6:	20 e0       	ldi	r18, 0x00	; 0
     9a8:	22 23       	and	r18, r18
     9aa:	91 f7       	brne	.-28     	; 0x990 <_Z6GetADCv+0x30>
     9ac:	89 81       	ldd	r24, Y+1	; 0x01
     9ae:	9a 81       	ldd	r25, Y+2	; 0x02
     9b0:	01 96       	adiw	r24, 0x01	; 1
     9b2:	9a 83       	std	Y+2, r25	; 0x02
     9b4:	89 83       	std	Y+1, r24	; 0x01
     9b6:	21 e0       	ldi	r18, 0x01	; 1
     9b8:	89 81       	ldd	r24, Y+1	; 0x01
     9ba:	9a 81       	ldd	r25, Y+2	; 0x02
     9bc:	82 30       	cpi	r24, 0x02	; 2
     9be:	91 05       	cpc	r25, r1
     9c0:	0c f0       	brlt	.+2      	; 0x9c4 <_Z6GetADCv+0x64>
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	22 23       	and	r18, r18
     9c6:	d9 f6       	brne	.-74     	; 0x97e <_Z6GetADCv+0x1e>

	//Get the last ADC reading.	
	ADCreading = ADCL;
     9c8:	88 e7       	ldi	r24, 0x78	; 120
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	fc 01       	movw	r30, r24
     9ce:	80 81       	ld	r24, Z
     9d0:	88 2f       	mov	r24, r24
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	9c 83       	std	Y+4, r25	; 0x04
     9d6:	8b 83       	std	Y+3, r24	; 0x03
	ADCreading |= (ADCH << 8);
     9d8:	89 e7       	ldi	r24, 0x79	; 121
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	fc 01       	movw	r30, r24
     9de:	80 81       	ld	r24, Z
     9e0:	88 2f       	mov	r24, r24
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	98 2f       	mov	r25, r24
     9e6:	88 27       	eor	r24, r24
     9e8:	9c 01       	movw	r18, r24
     9ea:	8b 81       	ldd	r24, Y+3	; 0x03
     9ec:	9c 81       	ldd	r25, Y+4	; 0x04
     9ee:	82 2b       	or	r24, r18
     9f0:	93 2b       	or	r25, r19
     9f2:	9c 83       	std	Y+4, r25	; 0x04
     9f4:	8b 83       	std	Y+3, r24	; 0x03
	
	if (reps++>50){
     9f6:	80 91 5b 01 	lds	r24, 0x015B
     9fa:	90 91 5c 01 	lds	r25, 0x015C
     9fe:	21 e0       	ldi	r18, 0x01	; 1
     a00:	83 33       	cpi	r24, 0x33	; 51
     a02:	91 05       	cpc	r25, r1
     a04:	0c f4       	brge	.+2      	; 0xa08 <_Z6GetADCv+0xa8>
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	01 96       	adiw	r24, 0x01	; 1
     a0a:	90 93 5c 01 	sts	0x015C, r25
     a0e:	80 93 5b 01 	sts	0x015B, r24
     a12:	22 23       	and	r18, r18
     a14:	a9 f0       	breq	.+42     	; 0xa40 <_Z6GetADCv+0xe0>
		char tempString[10];
			utoa(ADCreading,tempString,10);
     a16:	8b 81       	ldd	r24, Y+3	; 0x03
     a18:	9c 81       	ldd	r25, Y+4	; 0x04
     a1a:	9e 01       	movw	r18, r28
     a1c:	2b 5f       	subi	r18, 0xFB	; 251
     a1e:	3f 4f       	sbci	r19, 0xFF	; 255
     a20:	b9 01       	movw	r22, r18
     a22:	4a e0       	ldi	r20, 0x0A	; 10
     a24:	50 e0       	ldi	r21, 0x00	; 0
     a26:	0e 94 2f 06 	call	0xc5e	; 0xc5e <utoa>
		tempString[8]='-';	
     a2a:	8d e2       	ldi	r24, 0x2D	; 45
     a2c:	8d 87       	std	Y+13, r24	; 0x0d
		tempString[9]='\0';
     a2e:	1e 86       	std	Y+14, r1	; 0x0e
		Print0(tempString);
     a30:	ce 01       	movw	r24, r28
     a32:	05 96       	adiw	r24, 0x05	; 5
     a34:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <_Z6Print0Pc>
		reps=0;
     a38:	10 92 5c 01 	sts	0x015C, r1
     a3c:	10 92 5b 01 	sts	0x015B, r1
	}	
	
	//Re-enable global interrupts. 
	//sei();
	return ADCreading;
     a40:	8b 81       	ldd	r24, Y+3	; 0x03
     a42:	9c 81       	ldd	r25, Y+4	; 0x04
}
     a44:	2e 96       	adiw	r28, 0x0e	; 14
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	f8 94       	cli
     a4a:	de bf       	out	0x3e, r29	; 62
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	cd bf       	out	0x3d, r28	; 61
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	08 95       	ret

00000a56 <_Z7Wait_msi>:
	
/*************************************************************************************************************/
void Wait_ms(volatile int delay){
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	00 d0       	rcall	.+0      	; 0xa5c <_Z7Wait_msi+0x6>
     a5c:	00 d0       	rcall	.+0      	; 0xa5e <_Z7Wait_msi+0x8>
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62
     a62:	9c 83       	std	Y+4, r25	; 0x04
     a64:	8b 83       	std	Y+3, r24	; 0x03
	volatile int i=0;
     a66:	1a 82       	std	Y+2, r1	; 0x02
     a68:	19 82       	std	Y+1, r1	; 0x01
	while (delay > 0){
     a6a:	18 c0       	rjmp	.+48     	; 0xa9c <_Z7Wait_msi+0x46>
		for (i=0; i < 400; i++){
     a6c:	1a 82       	std	Y+2, r1	; 0x02
     a6e:	19 82       	std	Y+1, r1	; 0x01
     a70:	06 c0       	rjmp	.+12     	; 0xa7e <_Z7Wait_msi+0x28>
			asm volatile("nop");
     a72:	00 00       	nop
	
/*************************************************************************************************************/
void Wait_ms(volatile int delay){
	volatile int i=0;
	while (delay > 0){
		for (i=0; i < 400; i++){
     a74:	89 81       	ldd	r24, Y+1	; 0x01
     a76:	9a 81       	ldd	r25, Y+2	; 0x02
     a78:	01 96       	adiw	r24, 0x01	; 1
     a7a:	9a 83       	std	Y+2, r25	; 0x02
     a7c:	89 83       	std	Y+1, r24	; 0x01
     a7e:	89 81       	ldd	r24, Y+1	; 0x01
     a80:	9a 81       	ldd	r25, Y+2	; 0x02
     a82:	21 e0       	ldi	r18, 0x01	; 1
     a84:	31 e0       	ldi	r19, 0x01	; 1
     a86:	80 39       	cpi	r24, 0x90	; 144
     a88:	93 07       	cpc	r25, r19
     a8a:	0c f0       	brlt	.+2      	; 0xa8e <_Z7Wait_msi+0x38>
     a8c:	20 e0       	ldi	r18, 0x00	; 0
     a8e:	22 23       	and	r18, r18
     a90:	81 f7       	brne	.-32     	; 0xa72 <_Z7Wait_msi+0x1c>
			asm volatile("nop");
		}
		delay--;
     a92:	8b 81       	ldd	r24, Y+3	; 0x03
     a94:	9c 81       	ldd	r25, Y+4	; 0x04
     a96:	01 97       	sbiw	r24, 0x01	; 1
     a98:	9c 83       	std	Y+4, r25	; 0x04
     a9a:	8b 83       	std	Y+3, r24	; 0x03
}
	
/*************************************************************************************************************/
void Wait_ms(volatile int delay){
	volatile int i=0;
	while (delay > 0){
     a9c:	8b 81       	ldd	r24, Y+3	; 0x03
     a9e:	9c 81       	ldd	r25, Y+4	; 0x04
     aa0:	21 e0       	ldi	r18, 0x01	; 1
     aa2:	18 16       	cp	r1, r24
     aa4:	19 06       	cpc	r1, r25
     aa6:	0c f0       	brlt	.+2      	; 0xaaa <_Z7Wait_msi+0x54>
     aa8:	20 e0       	ldi	r18, 0x00	; 0
     aaa:	22 23       	and	r18, r18
     aac:	f9 f6       	brne	.-66     	; 0xa6c <_Z7Wait_msi+0x16>
		for (i=0; i < 400; i++){
			asm volatile("nop");
		}
		delay--;
	}	
}
     aae:	0f 90       	pop	r0
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	08 95       	ret

00000abc <_Z10PutUart0Chc>:
	
/*************************************************************************************************************/
void PutUart0Ch(char ch){
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
     ac0:	0f 92       	push	r0
     ac2:	cd b7       	in	r28, 0x3d	; 61
     ac4:	de b7       	in	r29, 0x3e	; 62
     ac6:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSR0A & (1 << UDRE0)));
     ac8:	00 00       	nop
     aca:	80 ec       	ldi	r24, 0xC0	; 192
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	fc 01       	movw	r30, r24
     ad0:	80 81       	ld	r24, Z
     ad2:	88 2f       	mov	r24, r24
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	80 72       	andi	r24, 0x20	; 32
     ad8:	90 70       	andi	r25, 0x00	; 0
     ada:	21 e0       	ldi	r18, 0x01	; 1
     adc:	00 97       	sbiw	r24, 0x00	; 0
     ade:	09 f0       	breq	.+2      	; 0xae2 <_Z10PutUart0Chc+0x26>
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	22 23       	and	r18, r18
     ae4:	91 f7       	brne	.-28     	; 0xaca <_Z10PutUart0Chc+0xe>
	UDR0=ch;
     ae6:	86 ec       	ldi	r24, 0xC6	; 198
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	29 81       	ldd	r18, Y+1	; 0x01
     aec:	fc 01       	movw	r30, r24
     aee:	20 83       	st	Z, r18
}
     af0:	0f 90       	pop	r0
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	08 95       	ret

00000af8 <_Z6Print0Pc>:

/*************************************************************************************************************/
void Print0(char string[]){
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	00 d0       	rcall	.+0      	; 0xafe <_Z6Print0Pc+0x6>
     afe:	0f 92       	push	r0
     b00:	cd b7       	in	r28, 0x3d	; 61
     b02:	de b7       	in	r29, 0x3e	; 62
     b04:	9b 83       	std	Y+3, r25	; 0x03
     b06:	8a 83       	std	Y+2, r24	; 0x02
	BYTE i=0;
     b08:	19 82       	std	Y+1, r1	; 0x01
	
	while (string[i]){
     b0a:	0e c0       	rjmp	.+28     	; 0xb28 <_Z6Print0Pc+0x30>
		PutUart0Ch(string[i++]);
     b0c:	89 81       	ldd	r24, Y+1	; 0x01
     b0e:	88 2f       	mov	r24, r24
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	2a 81       	ldd	r18, Y+2	; 0x02
     b14:	3b 81       	ldd	r19, Y+3	; 0x03
     b16:	82 0f       	add	r24, r18
     b18:	93 1f       	adc	r25, r19
     b1a:	fc 01       	movw	r30, r24
     b1c:	80 81       	ld	r24, Z
     b1e:	99 81       	ldd	r25, Y+1	; 0x01
     b20:	9f 5f       	subi	r25, 0xFF	; 255
     b22:	99 83       	std	Y+1, r25	; 0x01
     b24:	0e 94 5e 05 	call	0xabc	; 0xabc <_Z10PutUart0Chc>

/*************************************************************************************************************/
void Print0(char string[]){
	BYTE i=0;
	
	while (string[i]){
     b28:	89 81       	ldd	r24, Y+1	; 0x01
     b2a:	88 2f       	mov	r24, r24
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	2a 81       	ldd	r18, Y+2	; 0x02
     b30:	3b 81       	ldd	r19, Y+3	; 0x03
     b32:	82 0f       	add	r24, r18
     b34:	93 1f       	adc	r25, r19
     b36:	fc 01       	movw	r30, r24
     b38:	90 81       	ld	r25, Z
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	99 23       	and	r25, r25
     b3e:	09 f4       	brne	.+2      	; 0xb42 <_Z6Print0Pc+0x4a>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	88 23       	and	r24, r24
     b44:	19 f7       	brne	.-58     	; 0xb0c <_Z6Print0Pc+0x14>
		PutUart0Ch(string[i++]);
	}
}		
     b46:	0f 90       	pop	r0
     b48:	0f 90       	pop	r0
     b4a:	0f 90       	pop	r0
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	08 95       	ret

00000b52 <__udivmodhi4>:
     b52:	aa 1b       	sub	r26, r26
     b54:	bb 1b       	sub	r27, r27
     b56:	51 e1       	ldi	r21, 0x11	; 17
     b58:	07 c0       	rjmp	.+14     	; 0xb68 <__udivmodhi4_ep>

00000b5a <__udivmodhi4_loop>:
     b5a:	aa 1f       	adc	r26, r26
     b5c:	bb 1f       	adc	r27, r27
     b5e:	a6 17       	cp	r26, r22
     b60:	b7 07       	cpc	r27, r23
     b62:	10 f0       	brcs	.+4      	; 0xb68 <__udivmodhi4_ep>
     b64:	a6 1b       	sub	r26, r22
     b66:	b7 0b       	sbc	r27, r23

00000b68 <__udivmodhi4_ep>:
     b68:	88 1f       	adc	r24, r24
     b6a:	99 1f       	adc	r25, r25
     b6c:	5a 95       	dec	r21
     b6e:	a9 f7       	brne	.-22     	; 0xb5a <__udivmodhi4_loop>
     b70:	80 95       	com	r24
     b72:	90 95       	com	r25
     b74:	bc 01       	movw	r22, r24
     b76:	cd 01       	movw	r24, r26
     b78:	08 95       	ret

00000b7a <__divmodhi4>:
     b7a:	97 fb       	bst	r25, 7
     b7c:	09 2e       	mov	r0, r25
     b7e:	07 26       	eor	r0, r23
     b80:	0a d0       	rcall	.+20     	; 0xb96 <__divmodhi4_neg1>
     b82:	77 fd       	sbrc	r23, 7
     b84:	04 d0       	rcall	.+8      	; 0xb8e <__divmodhi4_neg2>
     b86:	e5 df       	rcall	.-54     	; 0xb52 <__udivmodhi4>
     b88:	06 d0       	rcall	.+12     	; 0xb96 <__divmodhi4_neg1>
     b8a:	00 20       	and	r0, r0
     b8c:	1a f4       	brpl	.+6      	; 0xb94 <__divmodhi4_exit>

00000b8e <__divmodhi4_neg2>:
     b8e:	70 95       	com	r23
     b90:	61 95       	neg	r22
     b92:	7f 4f       	sbci	r23, 0xFF	; 255

00000b94 <__divmodhi4_exit>:
     b94:	08 95       	ret

00000b96 <__divmodhi4_neg1>:
     b96:	f6 f7       	brtc	.-4      	; 0xb94 <__divmodhi4_exit>
     b98:	90 95       	com	r25
     b9a:	81 95       	neg	r24
     b9c:	9f 4f       	sbci	r25, 0xFF	; 255
     b9e:	08 95       	ret

00000ba0 <__divmodsi4>:
     ba0:	97 fb       	bst	r25, 7
     ba2:	09 2e       	mov	r0, r25
     ba4:	05 26       	eor	r0, r21
     ba6:	0e d0       	rcall	.+28     	; 0xbc4 <__divmodsi4_neg1>
     ba8:	57 fd       	sbrc	r21, 7
     baa:	04 d0       	rcall	.+8      	; 0xbb4 <__divmodsi4_neg2>
     bac:	14 d0       	rcall	.+40     	; 0xbd6 <__udivmodsi4>
     bae:	0a d0       	rcall	.+20     	; 0xbc4 <__divmodsi4_neg1>
     bb0:	00 1c       	adc	r0, r0
     bb2:	38 f4       	brcc	.+14     	; 0xbc2 <__divmodsi4_exit>

00000bb4 <__divmodsi4_neg2>:
     bb4:	50 95       	com	r21
     bb6:	40 95       	com	r20
     bb8:	30 95       	com	r19
     bba:	21 95       	neg	r18
     bbc:	3f 4f       	sbci	r19, 0xFF	; 255
     bbe:	4f 4f       	sbci	r20, 0xFF	; 255
     bc0:	5f 4f       	sbci	r21, 0xFF	; 255

00000bc2 <__divmodsi4_exit>:
     bc2:	08 95       	ret

00000bc4 <__divmodsi4_neg1>:
     bc4:	f6 f7       	brtc	.-4      	; 0xbc2 <__divmodsi4_exit>
     bc6:	90 95       	com	r25
     bc8:	80 95       	com	r24
     bca:	70 95       	com	r23
     bcc:	61 95       	neg	r22
     bce:	7f 4f       	sbci	r23, 0xFF	; 255
     bd0:	8f 4f       	sbci	r24, 0xFF	; 255
     bd2:	9f 4f       	sbci	r25, 0xFF	; 255
     bd4:	08 95       	ret

00000bd6 <__udivmodsi4>:
     bd6:	a1 e2       	ldi	r26, 0x21	; 33
     bd8:	1a 2e       	mov	r1, r26
     bda:	aa 1b       	sub	r26, r26
     bdc:	bb 1b       	sub	r27, r27
     bde:	fd 01       	movw	r30, r26
     be0:	0d c0       	rjmp	.+26     	; 0xbfc <__udivmodsi4_ep>

00000be2 <__udivmodsi4_loop>:
     be2:	aa 1f       	adc	r26, r26
     be4:	bb 1f       	adc	r27, r27
     be6:	ee 1f       	adc	r30, r30
     be8:	ff 1f       	adc	r31, r31
     bea:	a2 17       	cp	r26, r18
     bec:	b3 07       	cpc	r27, r19
     bee:	e4 07       	cpc	r30, r20
     bf0:	f5 07       	cpc	r31, r21
     bf2:	20 f0       	brcs	.+8      	; 0xbfc <__udivmodsi4_ep>
     bf4:	a2 1b       	sub	r26, r18
     bf6:	b3 0b       	sbc	r27, r19
     bf8:	e4 0b       	sbc	r30, r20
     bfa:	f5 0b       	sbc	r31, r21

00000bfc <__udivmodsi4_ep>:
     bfc:	66 1f       	adc	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	88 1f       	adc	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	1a 94       	dec	r1
     c06:	69 f7       	brne	.-38     	; 0xbe2 <__udivmodsi4_loop>
     c08:	60 95       	com	r22
     c0a:	70 95       	com	r23
     c0c:	80 95       	com	r24
     c0e:	90 95       	com	r25
     c10:	9b 01       	movw	r18, r22
     c12:	ac 01       	movw	r20, r24
     c14:	bd 01       	movw	r22, r26
     c16:	cf 01       	movw	r24, r30
     c18:	08 95       	ret

00000c1a <dtostrf>:
     c1a:	ef 92       	push	r14
     c1c:	0f 93       	push	r16
     c1e:	1f 93       	push	r17
     c20:	cf 93       	push	r28
     c22:	32 2f       	mov	r19, r18
     c24:	c0 2f       	mov	r28, r16
     c26:	47 ff       	sbrs	r20, 7
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <dtostrf+0x14>
     c2a:	a4 e1       	ldi	r26, 0x14	; 20
     c2c:	01 c0       	rjmp	.+2      	; 0xc30 <dtostrf+0x16>
     c2e:	a4 e0       	ldi	r26, 0x04	; 4
     c30:	e4 2f       	mov	r30, r20
     c32:	ff 27       	eor	r31, r31
     c34:	e7 fd       	sbrc	r30, 7
     c36:	f0 95       	com	r31
     c38:	f7 ff       	sbrs	r31, 7
     c3a:	03 c0       	rjmp	.+6      	; 0xc42 <dtostrf+0x28>
     c3c:	f0 95       	com	r31
     c3e:	e1 95       	neg	r30
     c40:	ff 4f       	sbci	r31, 0xFF	; 255
     c42:	4c 2f       	mov	r20, r28
     c44:	51 2f       	mov	r21, r17
     c46:	2e 2f       	mov	r18, r30
     c48:	03 2f       	mov	r16, r19
     c4a:	ea 2e       	mov	r14, r26
     c4c:	0e 94 45 06 	call	0xc8a	; 0xc8a <dtoa_prf>
     c50:	8c 2f       	mov	r24, r28
     c52:	91 2f       	mov	r25, r17
     c54:	cf 91       	pop	r28
     c56:	1f 91       	pop	r17
     c58:	0f 91       	pop	r16
     c5a:	ef 90       	pop	r14
     c5c:	08 95       	ret

00000c5e <utoa>:
     c5e:	fb 01       	movw	r30, r22
     c60:	9f 01       	movw	r18, r30
     c62:	42 30       	cpi	r20, 0x02	; 2
     c64:	74 f0       	brlt	.+28     	; 0xc82 <utoa+0x24>
     c66:	45 32       	cpi	r20, 0x25	; 37
     c68:	64 f4       	brge	.+24     	; 0xc82 <utoa+0x24>
     c6a:	64 2f       	mov	r22, r20
     c6c:	77 27       	eor	r23, r23
     c6e:	0e 94 a9 05 	call	0xb52	; 0xb52 <__udivmodhi4>
     c72:	80 5d       	subi	r24, 0xD0	; 208
     c74:	8a 33       	cpi	r24, 0x3A	; 58
     c76:	0c f0       	brlt	.+2      	; 0xc7a <utoa+0x1c>
     c78:	89 5d       	subi	r24, 0xD9	; 217
     c7a:	81 93       	st	Z+, r24
     c7c:	cb 01       	movw	r24, r22
     c7e:	00 97       	sbiw	r24, 0x00	; 0
     c80:	a1 f7       	brne	.-24     	; 0xc6a <utoa+0xc>
     c82:	10 82       	st	Z, r1
     c84:	c9 01       	movw	r24, r18
     c86:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <strrev>

00000c8a <dtoa_prf>:
     c8a:	a9 e0       	ldi	r26, 0x09	; 9
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	eb e4       	ldi	r30, 0x4B	; 75
     c90:	f6 e0       	ldi	r31, 0x06	; 6
     c92:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__prologue_saves__+0x8>
     c96:	6a 01       	movw	r12, r20
     c98:	12 2f       	mov	r17, r18
     c9a:	f0 2e       	mov	r15, r16
     c9c:	2b e3       	ldi	r18, 0x3B	; 59
     c9e:	20 17       	cp	r18, r16
     ca0:	18 f0       	brcs	.+6      	; 0xca8 <dtoa_prf+0x1e>
     ca2:	b0 2e       	mov	r11, r16
     ca4:	b3 94       	inc	r11
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <dtoa_prf+0x22>
     ca8:	3c e3       	ldi	r19, 0x3C	; 60
     caa:	b3 2e       	mov	r11, r19
     cac:	ae 01       	movw	r20, r28
     cae:	4f 5f       	subi	r20, 0xFF	; 255
     cb0:	5f 4f       	sbci	r21, 0xFF	; 255
     cb2:	27 e0       	ldi	r18, 0x07	; 7
     cb4:	0b 2d       	mov	r16, r11
     cb6:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__ftoa_engine>
     cba:	bc 01       	movw	r22, r24
     cbc:	a9 81       	ldd	r26, Y+1	; 0x01
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	cd 01       	movw	r24, r26
     cc2:	89 70       	andi	r24, 0x09	; 9
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	91 05       	cpc	r25, r1
     cca:	31 f0       	breq	.+12     	; 0xcd8 <dtoa_prf+0x4e>
     ccc:	e1 fc       	sbrc	r14, 1
     cce:	06 c0       	rjmp	.+12     	; 0xcdc <dtoa_prf+0x52>
     cd0:	e0 fe       	sbrs	r14, 0
     cd2:	06 c0       	rjmp	.+12     	; 0xce0 <dtoa_prf+0x56>
     cd4:	40 e2       	ldi	r20, 0x20	; 32
     cd6:	05 c0       	rjmp	.+10     	; 0xce2 <dtoa_prf+0x58>
     cd8:	4d e2       	ldi	r20, 0x2D	; 45
     cda:	03 c0       	rjmp	.+6      	; 0xce2 <dtoa_prf+0x58>
     cdc:	4b e2       	ldi	r20, 0x2B	; 43
     cde:	01 c0       	rjmp	.+2      	; 0xce2 <dtoa_prf+0x58>
     ce0:	40 e0       	ldi	r20, 0x00	; 0
     ce2:	a3 ff       	sbrs	r26, 3
     ce4:	36 c0       	rjmp	.+108    	; 0xd52 <dtoa_prf+0xc8>
     ce6:	44 23       	and	r20, r20
     ce8:	11 f0       	breq	.+4      	; 0xcee <dtoa_prf+0x64>
     cea:	84 e0       	ldi	r24, 0x04	; 4
     cec:	01 c0       	rjmp	.+2      	; 0xcf0 <dtoa_prf+0x66>
     cee:	83 e0       	ldi	r24, 0x03	; 3
     cf0:	81 17       	cp	r24, r17
     cf2:	10 f4       	brcc	.+4      	; 0xcf8 <dtoa_prf+0x6e>
     cf4:	18 1b       	sub	r17, r24
     cf6:	01 c0       	rjmp	.+2      	; 0xcfa <dtoa_prf+0x70>
     cf8:	10 e0       	ldi	r17, 0x00	; 0
     cfa:	e4 fc       	sbrc	r14, 4
     cfc:	0b c0       	rjmp	.+22     	; 0xd14 <dtoa_prf+0x8a>
     cfe:	91 2f       	mov	r25, r17
     d00:	f6 01       	movw	r30, r12
     d02:	80 e2       	ldi	r24, 0x20	; 32
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <dtoa_prf+0x80>
     d06:	81 93       	st	Z+, r24
     d08:	91 50       	subi	r25, 0x01	; 1
     d0a:	99 23       	and	r25, r25
     d0c:	e1 f7       	brne	.-8      	; 0xd06 <dtoa_prf+0x7c>
     d0e:	c1 0e       	add	r12, r17
     d10:	d1 1c       	adc	r13, r1
     d12:	10 e0       	ldi	r17, 0x00	; 0
     d14:	44 23       	and	r20, r20
     d16:	19 f0       	breq	.+6      	; 0xd1e <dtoa_prf+0x94>
     d18:	f6 01       	movw	r30, r12
     d1a:	41 93       	st	Z+, r20
     d1c:	6f 01       	movw	r12, r30
     d1e:	e2 fe       	sbrs	r14, 2
     d20:	05 c0       	rjmp	.+10     	; 0xd2c <dtoa_prf+0xa2>
     d22:	8e e4       	ldi	r24, 0x4E	; 78
     d24:	f6 01       	movw	r30, r12
     d26:	80 83       	st	Z, r24
     d28:	91 e4       	ldi	r25, 0x41	; 65
     d2a:	04 c0       	rjmp	.+8      	; 0xd34 <dtoa_prf+0xaa>
     d2c:	8e e6       	ldi	r24, 0x6E	; 110
     d2e:	f6 01       	movw	r30, r12
     d30:	80 83       	st	Z, r24
     d32:	91 e6       	ldi	r25, 0x61	; 97
     d34:	91 83       	std	Z+1, r25	; 0x01
     d36:	82 83       	std	Z+2, r24	; 0x02
     d38:	83 e0       	ldi	r24, 0x03	; 3
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	c8 0e       	add	r12, r24
     d3e:	d9 1e       	adc	r13, r25
     d40:	81 2f       	mov	r24, r17
     d42:	f6 01       	movw	r30, r12
     d44:	90 e2       	ldi	r25, 0x20	; 32
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <dtoa_prf+0xc2>
     d48:	91 93       	st	Z+, r25
     d4a:	81 50       	subi	r24, 0x01	; 1
     d4c:	88 23       	and	r24, r24
     d4e:	e1 f7       	brne	.-8      	; 0xd48 <dtoa_prf+0xbe>
     d50:	3a c0       	rjmp	.+116    	; 0xdc6 <dtoa_prf+0x13c>
     d52:	a2 ff       	sbrs	r26, 2
     d54:	3f c0       	rjmp	.+126    	; 0xdd4 <dtoa_prf+0x14a>
     d56:	44 23       	and	r20, r20
     d58:	11 f0       	breq	.+4      	; 0xd5e <dtoa_prf+0xd4>
     d5a:	84 e0       	ldi	r24, 0x04	; 4
     d5c:	01 c0       	rjmp	.+2      	; 0xd60 <dtoa_prf+0xd6>
     d5e:	83 e0       	ldi	r24, 0x03	; 3
     d60:	81 17       	cp	r24, r17
     d62:	10 f4       	brcc	.+4      	; 0xd68 <dtoa_prf+0xde>
     d64:	18 1b       	sub	r17, r24
     d66:	01 c0       	rjmp	.+2      	; 0xd6a <dtoa_prf+0xe0>
     d68:	10 e0       	ldi	r17, 0x00	; 0
     d6a:	e4 fc       	sbrc	r14, 4
     d6c:	0b c0       	rjmp	.+22     	; 0xd84 <dtoa_prf+0xfa>
     d6e:	91 2f       	mov	r25, r17
     d70:	f6 01       	movw	r30, r12
     d72:	80 e2       	ldi	r24, 0x20	; 32
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <dtoa_prf+0xf0>
     d76:	81 93       	st	Z+, r24
     d78:	91 50       	subi	r25, 0x01	; 1
     d7a:	99 23       	and	r25, r25
     d7c:	e1 f7       	brne	.-8      	; 0xd76 <dtoa_prf+0xec>
     d7e:	c1 0e       	add	r12, r17
     d80:	d1 1c       	adc	r13, r1
     d82:	10 e0       	ldi	r17, 0x00	; 0
     d84:	44 23       	and	r20, r20
     d86:	19 f0       	breq	.+6      	; 0xd8e <dtoa_prf+0x104>
     d88:	f6 01       	movw	r30, r12
     d8a:	41 93       	st	Z+, r20
     d8c:	6f 01       	movw	r12, r30
     d8e:	e2 fe       	sbrs	r14, 2
     d90:	07 c0       	rjmp	.+14     	; 0xda0 <dtoa_prf+0x116>
     d92:	89 e4       	ldi	r24, 0x49	; 73
     d94:	f6 01       	movw	r30, r12
     d96:	80 83       	st	Z, r24
     d98:	8e e4       	ldi	r24, 0x4E	; 78
     d9a:	81 83       	std	Z+1, r24	; 0x01
     d9c:	86 e4       	ldi	r24, 0x46	; 70
     d9e:	06 c0       	rjmp	.+12     	; 0xdac <dtoa_prf+0x122>
     da0:	89 e6       	ldi	r24, 0x69	; 105
     da2:	f6 01       	movw	r30, r12
     da4:	80 83       	st	Z, r24
     da6:	8e e6       	ldi	r24, 0x6E	; 110
     da8:	81 83       	std	Z+1, r24	; 0x01
     daa:	86 e6       	ldi	r24, 0x66	; 102
     dac:	82 83       	std	Z+2, r24	; 0x02
     dae:	83 e0       	ldi	r24, 0x03	; 3
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	c8 0e       	add	r12, r24
     db4:	d9 1e       	adc	r13, r25
     db6:	81 2f       	mov	r24, r17
     db8:	f6 01       	movw	r30, r12
     dba:	90 e2       	ldi	r25, 0x20	; 32
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <dtoa_prf+0x138>
     dbe:	91 93       	st	Z+, r25
     dc0:	81 50       	subi	r24, 0x01	; 1
     dc2:	88 23       	and	r24, r24
     dc4:	e1 f7       	brne	.-8      	; 0xdbe <dtoa_prf+0x134>
     dc6:	c1 0e       	add	r12, r17
     dc8:	d1 1c       	adc	r13, r1
     dca:	f6 01       	movw	r30, r12
     dcc:	10 82       	st	Z, r1
     dce:	8e ef       	ldi	r24, 0xFE	; 254
     dd0:	9f ef       	ldi	r25, 0xFF	; 255
     dd2:	af c0       	rjmp	.+350    	; 0xf32 <dtoa_prf+0x2a8>
     dd4:	21 e0       	ldi	r18, 0x01	; 1
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	44 23       	and	r20, r20
     dda:	11 f4       	brne	.+4      	; 0xde0 <dtoa_prf+0x156>
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	16 16       	cp	r1, r22
     de2:	17 06       	cpc	r1, r23
     de4:	1c f4       	brge	.+6      	; 0xdec <dtoa_prf+0x162>
     de6:	cb 01       	movw	r24, r22
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <dtoa_prf+0x166>
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	28 0f       	add	r18, r24
     df2:	39 1f       	adc	r19, r25
     df4:	ff 20       	and	r15, r15
     df6:	21 f0       	breq	.+8      	; 0xe00 <dtoa_prf+0x176>
     df8:	8f 2d       	mov	r24, r15
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	01 96       	adiw	r24, 0x01	; 1
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <dtoa_prf+0x17a>
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	82 0f       	add	r24, r18
     e06:	93 1f       	adc	r25, r19
     e08:	21 2f       	mov	r18, r17
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	82 17       	cp	r24, r18
     e0e:	93 07       	cpc	r25, r19
     e10:	1c f4       	brge	.+6      	; 0xe18 <dtoa_prf+0x18e>
     e12:	51 2f       	mov	r21, r17
     e14:	58 1b       	sub	r21, r24
     e16:	01 c0       	rjmp	.+2      	; 0xe1a <dtoa_prf+0x190>
     e18:	50 e0       	ldi	r21, 0x00	; 0
     e1a:	8e 2d       	mov	r24, r14
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	9c 01       	movw	r18, r24
     e20:	20 71       	andi	r18, 0x10	; 16
     e22:	30 70       	andi	r19, 0x00	; 0
     e24:	e4 fc       	sbrc	r14, 4
     e26:	0d c0       	rjmp	.+26     	; 0xe42 <dtoa_prf+0x1b8>
     e28:	e3 fc       	sbrc	r14, 3
     e2a:	0b c0       	rjmp	.+22     	; 0xe42 <dtoa_prf+0x1b8>
     e2c:	85 2f       	mov	r24, r21
     e2e:	f6 01       	movw	r30, r12
     e30:	90 e2       	ldi	r25, 0x20	; 32
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <dtoa_prf+0x1ae>
     e34:	91 93       	st	Z+, r25
     e36:	81 50       	subi	r24, 0x01	; 1
     e38:	88 23       	and	r24, r24
     e3a:	e1 f7       	brne	.-8      	; 0xe34 <dtoa_prf+0x1aa>
     e3c:	c5 0e       	add	r12, r21
     e3e:	d1 1c       	adc	r13, r1
     e40:	50 e0       	ldi	r21, 0x00	; 0
     e42:	44 23       	and	r20, r20
     e44:	19 f0       	breq	.+6      	; 0xe4c <dtoa_prf+0x1c2>
     e46:	f6 01       	movw	r30, r12
     e48:	41 93       	st	Z+, r20
     e4a:	6f 01       	movw	r12, r30
     e4c:	21 15       	cp	r18, r1
     e4e:	31 05       	cpc	r19, r1
     e50:	59 f4       	brne	.+22     	; 0xe68 <dtoa_prf+0x1de>
     e52:	85 2f       	mov	r24, r21
     e54:	f6 01       	movw	r30, r12
     e56:	90 e3       	ldi	r25, 0x30	; 48
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <dtoa_prf+0x1d4>
     e5a:	91 93       	st	Z+, r25
     e5c:	81 50       	subi	r24, 0x01	; 1
     e5e:	88 23       	and	r24, r24
     e60:	e1 f7       	brne	.-8      	; 0xe5a <dtoa_prf+0x1d0>
     e62:	c5 0e       	add	r12, r21
     e64:	d1 1c       	adc	r13, r1
     e66:	50 e0       	ldi	r21, 0x00	; 0
     e68:	b6 0e       	add	r11, r22
     e6a:	4a 81       	ldd	r20, Y+2	; 0x02
     e6c:	20 e1       	ldi	r18, 0x10	; 16
     e6e:	62 2e       	mov	r6, r18
     e70:	71 2c       	mov	r7, r1
     e72:	6a 22       	and	r6, r26
     e74:	7b 22       	and	r7, r27
     e76:	a4 ff       	sbrs	r26, 4
     e78:	03 c0       	rjmp	.+6      	; 0xe80 <dtoa_prf+0x1f6>
     e7a:	41 33       	cpi	r20, 0x31	; 49
     e7c:	09 f4       	brne	.+2      	; 0xe80 <dtoa_prf+0x1f6>
     e7e:	ba 94       	dec	r11
     e80:	1b 14       	cp	r1, r11
     e82:	2c f4       	brge	.+10     	; 0xe8e <dtoa_prf+0x204>
     e84:	8b 2d       	mov	r24, r11
     e86:	89 30       	cpi	r24, 0x09	; 9
     e88:	18 f0       	brcs	.+6      	; 0xe90 <dtoa_prf+0x206>
     e8a:	88 e0       	ldi	r24, 0x08	; 8
     e8c:	01 c0       	rjmp	.+2      	; 0xe90 <dtoa_prf+0x206>
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	9b 01       	movw	r18, r22
     e92:	77 ff       	sbrs	r23, 7
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <dtoa_prf+0x210>
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	a0 e0       	ldi	r26, 0x00	; 0
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	9e e2       	ldi	r25, 0x2E	; 46
     ea0:	e9 2e       	mov	r14, r25
     ea2:	4b 01       	movw	r8, r22
     ea4:	88 1a       	sub	r8, r24
     ea6:	91 08       	sbc	r9, r1
     ea8:	cb 01       	movw	r24, r22
     eaa:	82 1b       	sub	r24, r18
     eac:	93 0b       	sbc	r25, r19
     eae:	8e 01       	movw	r16, r28
     eb0:	0f 5f       	subi	r16, 0xFF	; 255
     eb2:	1f 4f       	sbci	r17, 0xFF	; 255
     eb4:	08 0f       	add	r16, r24
     eb6:	19 1f       	adc	r17, r25
     eb8:	8f 2d       	mov	r24, r15
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	aa 24       	eor	r10, r10
     ebe:	bb 24       	eor	r11, r11
     ec0:	a8 1a       	sub	r10, r24
     ec2:	b9 0a       	sbc	r11, r25
     ec4:	ff ef       	ldi	r31, 0xFF	; 255
     ec6:	2f 3f       	cpi	r18, 0xFF	; 255
     ec8:	3f 07       	cpc	r19, r31
     eca:	19 f4       	brne	.+6      	; 0xed2 <dtoa_prf+0x248>
     ecc:	f6 01       	movw	r30, r12
     ece:	e1 92       	st	Z+, r14
     ed0:	6f 01       	movw	r12, r30
     ed2:	62 17       	cp	r22, r18
     ed4:	73 07       	cpc	r23, r19
     ed6:	44 f0       	brlt	.+16     	; 0xee8 <dtoa_prf+0x25e>
     ed8:	82 16       	cp	r8, r18
     eda:	93 06       	cpc	r9, r19
     edc:	2c f4       	brge	.+10     	; 0xee8 <dtoa_prf+0x25e>
     ede:	f8 01       	movw	r30, r16
     ee0:	ea 0f       	add	r30, r26
     ee2:	fb 1f       	adc	r31, r27
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	01 c0       	rjmp	.+2      	; 0xeea <dtoa_prf+0x260>
     ee8:	80 e3       	ldi	r24, 0x30	; 48
     eea:	21 50       	subi	r18, 0x01	; 1
     eec:	30 40       	sbci	r19, 0x00	; 0
     eee:	11 96       	adiw	r26, 0x01	; 1
     ef0:	2a 15       	cp	r18, r10
     ef2:	3b 05       	cpc	r19, r11
     ef4:	24 f0       	brlt	.+8      	; 0xefe <dtoa_prf+0x274>
     ef6:	f6 01       	movw	r30, r12
     ef8:	81 93       	st	Z+, r24
     efa:	6f 01       	movw	r12, r30
     efc:	e3 cf       	rjmp	.-58     	; 0xec4 <dtoa_prf+0x23a>
     efe:	26 17       	cp	r18, r22
     f00:	37 07       	cpc	r19, r23
     f02:	41 f4       	brne	.+16     	; 0xf14 <dtoa_prf+0x28a>
     f04:	46 33       	cpi	r20, 0x36	; 54
     f06:	28 f4       	brcc	.+10     	; 0xf12 <dtoa_prf+0x288>
     f08:	45 33       	cpi	r20, 0x35	; 53
     f0a:	21 f4       	brne	.+8      	; 0xf14 <dtoa_prf+0x28a>
     f0c:	61 14       	cp	r6, r1
     f0e:	71 04       	cpc	r7, r1
     f10:	09 f4       	brne	.+2      	; 0xf14 <dtoa_prf+0x28a>
     f12:	81 e3       	ldi	r24, 0x31	; 49
     f14:	f6 01       	movw	r30, r12
     f16:	81 93       	st	Z+, r24
     f18:	85 2f       	mov	r24, r21
     f1a:	df 01       	movw	r26, r30
     f1c:	90 e2       	ldi	r25, 0x20	; 32
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <dtoa_prf+0x29a>
     f20:	9d 93       	st	X+, r25
     f22:	81 50       	subi	r24, 0x01	; 1
     f24:	88 23       	and	r24, r24
     f26:	e1 f7       	brne	.-8      	; 0xf20 <dtoa_prf+0x296>
     f28:	e5 0f       	add	r30, r21
     f2a:	f1 1d       	adc	r31, r1
     f2c:	10 82       	st	Z, r1
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	29 96       	adiw	r28, 0x09	; 9
     f34:	ee e0       	ldi	r30, 0x0E	; 14
     f36:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__epilogue_restores__+0x8>

00000f3a <__ftoa_engine>:
     f3a:	28 30       	cpi	r18, 0x08	; 8
     f3c:	08 f0       	brcs	.+2      	; 0xf40 <__ftoa_engine+0x6>
     f3e:	27 e0       	ldi	r18, 0x07	; 7
     f40:	33 27       	eor	r19, r19
     f42:	da 01       	movw	r26, r20
     f44:	99 0f       	add	r25, r25
     f46:	31 1d       	adc	r19, r1
     f48:	87 fd       	sbrc	r24, 7
     f4a:	91 60       	ori	r25, 0x01	; 1
     f4c:	00 96       	adiw	r24, 0x00	; 0
     f4e:	61 05       	cpc	r22, r1
     f50:	71 05       	cpc	r23, r1
     f52:	39 f4       	brne	.+14     	; 0xf62 <__ftoa_engine+0x28>
     f54:	32 60       	ori	r19, 0x02	; 2
     f56:	2e 5f       	subi	r18, 0xFE	; 254
     f58:	3d 93       	st	X+, r19
     f5a:	30 e3       	ldi	r19, 0x30	; 48
     f5c:	2a 95       	dec	r18
     f5e:	e1 f7       	brne	.-8      	; 0xf58 <__ftoa_engine+0x1e>
     f60:	08 95       	ret
     f62:	9f 3f       	cpi	r25, 0xFF	; 255
     f64:	30 f0       	brcs	.+12     	; 0xf72 <__ftoa_engine+0x38>
     f66:	80 38       	cpi	r24, 0x80	; 128
     f68:	71 05       	cpc	r23, r1
     f6a:	61 05       	cpc	r22, r1
     f6c:	09 f0       	breq	.+2      	; 0xf70 <__ftoa_engine+0x36>
     f6e:	3c 5f       	subi	r19, 0xFC	; 252
     f70:	3c 5f       	subi	r19, 0xFC	; 252
     f72:	3d 93       	st	X+, r19
     f74:	91 30       	cpi	r25, 0x01	; 1
     f76:	08 f0       	brcs	.+2      	; 0xf7a <__ftoa_engine+0x40>
     f78:	80 68       	ori	r24, 0x80	; 128
     f7a:	91 1d       	adc	r25, r1
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	1f 93       	push	r17
     f82:	0f 93       	push	r16
     f84:	ff 92       	push	r15
     f86:	ef 92       	push	r14
     f88:	19 2f       	mov	r17, r25
     f8a:	98 7f       	andi	r25, 0xF8	; 248
     f8c:	96 95       	lsr	r25
     f8e:	e9 2f       	mov	r30, r25
     f90:	96 95       	lsr	r25
     f92:	96 95       	lsr	r25
     f94:	e9 0f       	add	r30, r25
     f96:	ff 27       	eor	r31, r31
     f98:	ee 53       	subi	r30, 0x3E	; 62
     f9a:	ff 4f       	sbci	r31, 0xFF	; 255
     f9c:	99 27       	eor	r25, r25
     f9e:	33 27       	eor	r19, r19
     fa0:	ee 24       	eor	r14, r14
     fa2:	ff 24       	eor	r15, r15
     fa4:	a7 01       	movw	r20, r14
     fa6:	e7 01       	movw	r28, r14
     fa8:	05 90       	lpm	r0, Z+
     faa:	08 94       	sec
     fac:	07 94       	ror	r0
     fae:	28 f4       	brcc	.+10     	; 0xfba <__ftoa_engine+0x80>
     fb0:	36 0f       	add	r19, r22
     fb2:	e7 1e       	adc	r14, r23
     fb4:	f8 1e       	adc	r15, r24
     fb6:	49 1f       	adc	r20, r25
     fb8:	51 1d       	adc	r21, r1
     fba:	66 0f       	add	r22, r22
     fbc:	77 1f       	adc	r23, r23
     fbe:	88 1f       	adc	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	06 94       	lsr	r0
     fc4:	a1 f7       	brne	.-24     	; 0xfae <__ftoa_engine+0x74>
     fc6:	05 90       	lpm	r0, Z+
     fc8:	07 94       	ror	r0
     fca:	28 f4       	brcc	.+10     	; 0xfd6 <__ftoa_engine+0x9c>
     fcc:	e7 0e       	add	r14, r23
     fce:	f8 1e       	adc	r15, r24
     fd0:	49 1f       	adc	r20, r25
     fd2:	56 1f       	adc	r21, r22
     fd4:	c1 1d       	adc	r28, r1
     fd6:	77 0f       	add	r23, r23
     fd8:	88 1f       	adc	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	66 1f       	adc	r22, r22
     fde:	06 94       	lsr	r0
     fe0:	a1 f7       	brne	.-24     	; 0xfca <__ftoa_engine+0x90>
     fe2:	05 90       	lpm	r0, Z+
     fe4:	07 94       	ror	r0
     fe6:	28 f4       	brcc	.+10     	; 0xff2 <__ftoa_engine+0xb8>
     fe8:	f8 0e       	add	r15, r24
     fea:	49 1f       	adc	r20, r25
     fec:	56 1f       	adc	r21, r22
     fee:	c7 1f       	adc	r28, r23
     ff0:	d1 1d       	adc	r29, r1
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	66 1f       	adc	r22, r22
     ff8:	77 1f       	adc	r23, r23
     ffa:	06 94       	lsr	r0
     ffc:	a1 f7       	brne	.-24     	; 0xfe6 <__ftoa_engine+0xac>
     ffe:	05 90       	lpm	r0, Z+
    1000:	07 94       	ror	r0
    1002:	20 f4       	brcc	.+8      	; 0x100c <__ftoa_engine+0xd2>
    1004:	49 0f       	add	r20, r25
    1006:	56 1f       	adc	r21, r22
    1008:	c7 1f       	adc	r28, r23
    100a:	d8 1f       	adc	r29, r24
    100c:	99 0f       	add	r25, r25
    100e:	66 1f       	adc	r22, r22
    1010:	77 1f       	adc	r23, r23
    1012:	88 1f       	adc	r24, r24
    1014:	06 94       	lsr	r0
    1016:	a9 f7       	brne	.-22     	; 0x1002 <__ftoa_engine+0xc8>
    1018:	84 91       	lpm	r24, Z
    101a:	10 95       	com	r17
    101c:	17 70       	andi	r17, 0x07	; 7
    101e:	41 f0       	breq	.+16     	; 0x1030 <__ftoa_engine+0xf6>
    1020:	d6 95       	lsr	r29
    1022:	c7 95       	ror	r28
    1024:	57 95       	ror	r21
    1026:	47 95       	ror	r20
    1028:	f7 94       	ror	r15
    102a:	e7 94       	ror	r14
    102c:	1a 95       	dec	r17
    102e:	c1 f7       	brne	.-16     	; 0x1020 <__ftoa_engine+0xe6>
    1030:	e8 e6       	ldi	r30, 0x68	; 104
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	68 94       	set
    1036:	15 90       	lpm	r1, Z+
    1038:	15 91       	lpm	r17, Z+
    103a:	35 91       	lpm	r19, Z+
    103c:	65 91       	lpm	r22, Z+
    103e:	95 91       	lpm	r25, Z+
    1040:	05 90       	lpm	r0, Z+
    1042:	7f e2       	ldi	r23, 0x2F	; 47
    1044:	73 95       	inc	r23
    1046:	e1 18       	sub	r14, r1
    1048:	f1 0a       	sbc	r15, r17
    104a:	43 0b       	sbc	r20, r19
    104c:	56 0b       	sbc	r21, r22
    104e:	c9 0b       	sbc	r28, r25
    1050:	d0 09       	sbc	r29, r0
    1052:	c0 f7       	brcc	.-16     	; 0x1044 <__ftoa_engine+0x10a>
    1054:	e1 0c       	add	r14, r1
    1056:	f1 1e       	adc	r15, r17
    1058:	43 1f       	adc	r20, r19
    105a:	56 1f       	adc	r21, r22
    105c:	c9 1f       	adc	r28, r25
    105e:	d0 1d       	adc	r29, r0
    1060:	7e f4       	brtc	.+30     	; 0x1080 <__ftoa_engine+0x146>
    1062:	70 33       	cpi	r23, 0x30	; 48
    1064:	11 f4       	brne	.+4      	; 0x106a <__ftoa_engine+0x130>
    1066:	8a 95       	dec	r24
    1068:	e6 cf       	rjmp	.-52     	; 0x1036 <__ftoa_engine+0xfc>
    106a:	e8 94       	clt
    106c:	01 50       	subi	r16, 0x01	; 1
    106e:	30 f0       	brcs	.+12     	; 0x107c <__ftoa_engine+0x142>
    1070:	08 0f       	add	r16, r24
    1072:	0a f4       	brpl	.+2      	; 0x1076 <__ftoa_engine+0x13c>
    1074:	00 27       	eor	r16, r16
    1076:	02 17       	cp	r16, r18
    1078:	08 f4       	brcc	.+2      	; 0x107c <__ftoa_engine+0x142>
    107a:	20 2f       	mov	r18, r16
    107c:	23 95       	inc	r18
    107e:	02 2f       	mov	r16, r18
    1080:	7a 33       	cpi	r23, 0x3A	; 58
    1082:	28 f0       	brcs	.+10     	; 0x108e <__ftoa_engine+0x154>
    1084:	79 e3       	ldi	r23, 0x39	; 57
    1086:	7d 93       	st	X+, r23
    1088:	2a 95       	dec	r18
    108a:	e9 f7       	brne	.-6      	; 0x1086 <__ftoa_engine+0x14c>
    108c:	10 c0       	rjmp	.+32     	; 0x10ae <__ftoa_engine+0x174>
    108e:	7d 93       	st	X+, r23
    1090:	2a 95       	dec	r18
    1092:	89 f6       	brne	.-94     	; 0x1036 <__ftoa_engine+0xfc>
    1094:	06 94       	lsr	r0
    1096:	97 95       	ror	r25
    1098:	67 95       	ror	r22
    109a:	37 95       	ror	r19
    109c:	17 95       	ror	r17
    109e:	17 94       	ror	r1
    10a0:	e1 18       	sub	r14, r1
    10a2:	f1 0a       	sbc	r15, r17
    10a4:	43 0b       	sbc	r20, r19
    10a6:	56 0b       	sbc	r21, r22
    10a8:	c9 0b       	sbc	r28, r25
    10aa:	d0 09       	sbc	r29, r0
    10ac:	98 f0       	brcs	.+38     	; 0x10d4 <__ftoa_engine+0x19a>
    10ae:	23 95       	inc	r18
    10b0:	7e 91       	ld	r23, -X
    10b2:	73 95       	inc	r23
    10b4:	7a 33       	cpi	r23, 0x3A	; 58
    10b6:	08 f0       	brcs	.+2      	; 0x10ba <__ftoa_engine+0x180>
    10b8:	70 e3       	ldi	r23, 0x30	; 48
    10ba:	7c 93       	st	X, r23
    10bc:	20 13       	cpse	r18, r16
    10be:	b8 f7       	brcc	.-18     	; 0x10ae <__ftoa_engine+0x174>
    10c0:	7e 91       	ld	r23, -X
    10c2:	70 61       	ori	r23, 0x10	; 16
    10c4:	7d 93       	st	X+, r23
    10c6:	30 f0       	brcs	.+12     	; 0x10d4 <__ftoa_engine+0x19a>
    10c8:	83 95       	inc	r24
    10ca:	71 e3       	ldi	r23, 0x31	; 49
    10cc:	7d 93       	st	X+, r23
    10ce:	70 e3       	ldi	r23, 0x30	; 48
    10d0:	2a 95       	dec	r18
    10d2:	e1 f7       	brne	.-8      	; 0x10cc <__ftoa_engine+0x192>
    10d4:	11 24       	eor	r1, r1
    10d6:	ef 90       	pop	r14
    10d8:	ff 90       	pop	r15
    10da:	0f 91       	pop	r16
    10dc:	1f 91       	pop	r17
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	99 27       	eor	r25, r25
    10e4:	87 fd       	sbrc	r24, 7
    10e6:	90 95       	com	r25
    10e8:	08 95       	ret

000010ea <strrev>:
    10ea:	dc 01       	movw	r26, r24
    10ec:	fc 01       	movw	r30, r24
    10ee:	67 2f       	mov	r22, r23
    10f0:	71 91       	ld	r23, Z+
    10f2:	77 23       	and	r23, r23
    10f4:	e1 f7       	brne	.-8      	; 0x10ee <strrev+0x4>
    10f6:	32 97       	sbiw	r30, 0x02	; 2
    10f8:	04 c0       	rjmp	.+8      	; 0x1102 <strrev+0x18>
    10fa:	7c 91       	ld	r23, X
    10fc:	6d 93       	st	X+, r22
    10fe:	70 83       	st	Z, r23
    1100:	62 91       	ld	r22, -Z
    1102:	ae 17       	cp	r26, r30
    1104:	bf 07       	cpc	r27, r31
    1106:	c8 f3       	brcs	.-14     	; 0x10fa <strrev+0x10>
    1108:	08 95       	ret

0000110a <__prologue_saves__>:
    110a:	2f 92       	push	r2
    110c:	3f 92       	push	r3
    110e:	4f 92       	push	r4
    1110:	5f 92       	push	r5
    1112:	6f 92       	push	r6
    1114:	7f 92       	push	r7
    1116:	8f 92       	push	r8
    1118:	9f 92       	push	r9
    111a:	af 92       	push	r10
    111c:	bf 92       	push	r11
    111e:	cf 92       	push	r12
    1120:	df 92       	push	r13
    1122:	ef 92       	push	r14
    1124:	ff 92       	push	r15
    1126:	0f 93       	push	r16
    1128:	1f 93       	push	r17
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	ca 1b       	sub	r28, r26
    1134:	db 0b       	sbc	r29, r27
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	f8 94       	cli
    113a:	de bf       	out	0x3e, r29	; 62
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	cd bf       	out	0x3d, r28	; 61
    1140:	09 94       	ijmp

00001142 <__epilogue_restores__>:
    1142:	2a 88       	ldd	r2, Y+18	; 0x12
    1144:	39 88       	ldd	r3, Y+17	; 0x11
    1146:	48 88       	ldd	r4, Y+16	; 0x10
    1148:	5f 84       	ldd	r5, Y+15	; 0x0f
    114a:	6e 84       	ldd	r6, Y+14	; 0x0e
    114c:	7d 84       	ldd	r7, Y+13	; 0x0d
    114e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1150:	9b 84       	ldd	r9, Y+11	; 0x0b
    1152:	aa 84       	ldd	r10, Y+10	; 0x0a
    1154:	b9 84       	ldd	r11, Y+9	; 0x09
    1156:	c8 84       	ldd	r12, Y+8	; 0x08
    1158:	df 80       	ldd	r13, Y+7	; 0x07
    115a:	ee 80       	ldd	r14, Y+6	; 0x06
    115c:	fd 80       	ldd	r15, Y+5	; 0x05
    115e:	0c 81       	ldd	r16, Y+4	; 0x04
    1160:	1b 81       	ldd	r17, Y+3	; 0x03
    1162:	aa 81       	ldd	r26, Y+2	; 0x02
    1164:	b9 81       	ldd	r27, Y+1	; 0x01
    1166:	ce 0f       	add	r28, r30
    1168:	d1 1d       	adc	r29, r1
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	ed 01       	movw	r28, r26
    1176:	08 95       	ret

00001178 <_exit>:
    1178:	f8 94       	cli

0000117a <__stop_program>:
    117a:	ff cf       	rjmp	.-2      	; 0x117a <__stop_program>
