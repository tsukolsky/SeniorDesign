
WAVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000086  00800100  00003410  000034c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003410  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004b  00800186  00800186  0000354a  2**0
                  ALLOC
  3 .eeprom       00000007  00810000  00810000  0000354a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000011f4  00000000  00000000  00003554  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000005eb  00000000  00000000  00004748  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000120  00000000  00000000  00004d38  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002109  00000000  00000000  00004e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003a2  00000000  00000000  00006f61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f8c  00000000  00000000  00007303  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000088c  00000000  00000000  00008290  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000b0a  00000000  00000000  00008b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001232  00000000  00000000  00009626  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  0000a858  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 b0 11 	jmp	0x2360	; 0x2360 <__vector_3>
      10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      18:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__vector_6>
      1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      2c:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <__vector_11>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 1c 13 	jmp	0x2638	; 0x2638 <__vector_20>
      54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      68:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      6c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      70:	0c 94 4c 13 	jmp	0x2698	; 0x2698 <__vector_28>
      74:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      78:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

0000007c <__ctors_start>:
      7c:	f9 18       	sub	r15, r9

0000007e <__ctors_end>:
      7e:	11 24       	eor	r1, r1
      80:	1f be       	out	0x3f, r1	; 63
      82:	cf ef       	ldi	r28, 0xFF	; 255
      84:	d0 e1       	ldi	r29, 0x10	; 16
      86:	de bf       	out	0x3e, r29	; 62
      88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_copy_data>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 e0       	ldi	r26, 0x00	; 0
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	e0 e1       	ldi	r30, 0x10	; 16
      92:	f4 e3       	ldi	r31, 0x34	; 52
      94:	02 c0       	rjmp	.+4      	; 0x9a <__do_copy_data+0x10>
      96:	05 90       	lpm	r0, Z+
      98:	0d 92       	st	X+, r0
      9a:	a6 38       	cpi	r26, 0x86	; 134
      9c:	b1 07       	cpc	r27, r17
      9e:	d9 f7       	brne	.-10     	; 0x96 <__do_copy_data+0xc>

000000a0 <__do_clear_bss>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a6 e8       	ldi	r26, 0x86	; 134
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
      a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
      aa:	a1 3d       	cpi	r26, 0xD1	; 209
      ac:	b1 07       	cpc	r27, r17
      ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>

000000b0 <__do_global_ctors>:
      b0:	10 e0       	ldi	r17, 0x00	; 0
      b2:	ce e7       	ldi	r28, 0x7E	; 126
      b4:	d0 e0       	ldi	r29, 0x00	; 0
      b6:	04 c0       	rjmp	.+8      	; 0xc0 <__do_global_ctors+0x10>
      b8:	22 97       	sbiw	r28, 0x02	; 2
      ba:	fe 01       	movw	r30, r28
      bc:	0e 94 3b 19 	call	0x3276	; 0x3276 <__tablejump__>
      c0:	cc 37       	cpi	r28, 0x7C	; 124
      c2:	d1 07       	cpc	r29, r17
      c4:	c9 f7       	brne	.-14     	; 0xb8 <__do_global_ctors+0x8>
      c6:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <main>
      ca:	0c 94 06 1a 	jmp	0x340c	; 0x340c <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <_ZN6myDateC1Ev>:
		void setYear(int year);
		void addMonths(int months);
		void addYears(int years);
};

myDate::myDate(){
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	00 d0       	rcall	.+0      	; 0xd8 <_ZN6myDateC1Ev+0x6>
      d8:	cd b7       	in	r28, 0x3d	; 61
      da:	de b7       	in	r29, 0x3e	; 62
      dc:	9a 83       	std	Y+2, r25	; 0x02
      de:	89 83       	std	Y+1, r24	; 0x01
	month = 0;
      e0:	89 81       	ldd	r24, Y+1	; 0x01
      e2:	9a 81       	ldd	r25, Y+2	; 0x02
      e4:	fc 01       	movw	r30, r24
      e6:	11 82       	std	Z+1, r1	; 0x01
      e8:	10 82       	st	Z, r1
	day = 0;
      ea:	89 81       	ldd	r24, Y+1	; 0x01
      ec:	9a 81       	ldd	r25, Y+2	; 0x02
      ee:	fc 01       	movw	r30, r24
      f0:	13 82       	std	Z+3, r1	; 0x03
      f2:	12 82       	std	Z+2, r1	; 0x02
	year = 0;
      f4:	89 81       	ldd	r24, Y+1	; 0x01
      f6:	9a 81       	ldd	r25, Y+2	; 0x02
      f8:	fc 01       	movw	r30, r24
      fa:	15 82       	std	Z+5, r1	; 0x05
      fc:	14 82       	std	Z+4, r1	; 0x04
}
      fe:	0f 90       	pop	r0
     100:	0f 90       	pop	r0
     102:	df 91       	pop	r29
     104:	cf 91       	pop	r28
     106:	08 95       	ret

00000108 <_ZN6myDateC1Eiii>:

myDate::myDate(int month,int day,int year){
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
     110:	28 97       	sbiw	r28, 0x08	; 8
     112:	0f b6       	in	r0, 0x3f	; 63
     114:	f8 94       	cli
     116:	de bf       	out	0x3e, r29	; 62
     118:	0f be       	out	0x3f, r0	; 63
     11a:	cd bf       	out	0x3d, r28	; 61
     11c:	9a 83       	std	Y+2, r25	; 0x02
     11e:	89 83       	std	Y+1, r24	; 0x01
     120:	7c 83       	std	Y+4, r23	; 0x04
     122:	6b 83       	std	Y+3, r22	; 0x03
     124:	5e 83       	std	Y+6, r21	; 0x06
     126:	4d 83       	std	Y+5, r20	; 0x05
     128:	38 87       	std	Y+8, r19	; 0x08
     12a:	2f 83       	std	Y+7, r18	; 0x07
	setDate(month,day,year);
     12c:	89 81       	ldd	r24, Y+1	; 0x01
     12e:	9a 81       	ldd	r25, Y+2	; 0x02
     130:	6b 81       	ldd	r22, Y+3	; 0x03
     132:	7c 81       	ldd	r23, Y+4	; 0x04
     134:	4d 81       	ldd	r20, Y+5	; 0x05
     136:	5e 81       	ldd	r21, Y+6	; 0x06
     138:	2f 81       	ldd	r18, Y+7	; 0x07
     13a:	38 85       	ldd	r19, Y+8	; 0x08
     13c:	0e 94 84 01 	call	0x308	; 0x308 <_ZN6myDate7setDateEiii>
}
     140:	28 96       	adiw	r28, 0x08	; 8
     142:	0f b6       	in	r0, 0x3f	; 63
     144:	f8 94       	cli
     146:	de bf       	out	0x3e, r29	; 62
     148:	0f be       	out	0x3f, r0	; 63
     14a:	cd bf       	out	0x3d, r28	; 61
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	08 95       	ret

00000152 <_ZN6myDate9getMonthsEv>:

BYTE myDate::getMonths(){
     152:	cf 93       	push	r28
     154:	df 93       	push	r29
     156:	00 d0       	rcall	.+0      	; 0x158 <_ZN6myDate9getMonthsEv+0x6>
     158:	cd b7       	in	r28, 0x3d	; 61
     15a:	de b7       	in	r29, 0x3e	; 62
     15c:	9a 83       	std	Y+2, r25	; 0x02
     15e:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)month;
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	9a 81       	ldd	r25, Y+2	; 0x02
     164:	fc 01       	movw	r30, r24
     166:	80 81       	ld	r24, Z
     168:	91 81       	ldd	r25, Z+1	; 0x01
}
     16a:	0f 90       	pop	r0
     16c:	0f 90       	pop	r0
     16e:	df 91       	pop	r29
     170:	cf 91       	pop	r28
     172:	08 95       	ret

00000174 <_ZN6myDate8getYearsEv>:

WORD myDate::getYears(){
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
     178:	00 d0       	rcall	.+0      	; 0x17a <_ZN6myDate8getYearsEv+0x6>
     17a:	cd b7       	in	r28, 0x3d	; 61
     17c:	de b7       	in	r29, 0x3e	; 62
     17e:	9a 83       	std	Y+2, r25	; 0x02
     180:	89 83       	std	Y+1, r24	; 0x01
	return (WORD)year;
     182:	89 81       	ldd	r24, Y+1	; 0x01
     184:	9a 81       	ldd	r25, Y+2	; 0x02
     186:	fc 01       	movw	r30, r24
     188:	84 81       	ldd	r24, Z+4	; 0x04
     18a:	95 81       	ldd	r25, Z+5	; 0x05
}
     18c:	0f 90       	pop	r0
     18e:	0f 90       	pop	r0
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <_ZN6myDate7getDaysEv>:

BYTE myDate::getDays(){
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	00 d0       	rcall	.+0      	; 0x19c <_ZN6myDate7getDaysEv+0x6>
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
     1a0:	9a 83       	std	Y+2, r25	; 0x02
     1a2:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)day;
     1a4:	89 81       	ldd	r24, Y+1	; 0x01
     1a6:	9a 81       	ldd	r25, Y+2	; 0x02
     1a8:	fc 01       	movw	r30, r24
     1aa:	82 81       	ldd	r24, Z+2	; 0x02
     1ac:	93 81       	ldd	r25, Z+3	; 0x03
}
     1ae:	0f 90       	pop	r0
     1b0:	0f 90       	pop	r0
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	08 95       	ret

000001b8 <_ZN6myDate8setMonthEi>:

void myDate::setMonth(int month){
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	00 d0       	rcall	.+0      	; 0x1be <_ZN6myDate8setMonthEi+0x6>
     1be:	00 d0       	rcall	.+0      	; 0x1c0 <_ZN6myDate8setMonthEi+0x8>
     1c0:	cd b7       	in	r28, 0x3d	; 61
     1c2:	de b7       	in	r29, 0x3e	; 62
     1c4:	9a 83       	std	Y+2, r25	; 0x02
     1c6:	89 83       	std	Y+1, r24	; 0x01
     1c8:	7c 83       	std	Y+4, r23	; 0x04
     1ca:	6b 83       	std	Y+3, r22	; 0x03
	if (month/13 == 0){
     1cc:	8b 81       	ldd	r24, Y+3	; 0x03
     1ce:	9c 81       	ldd	r25, Y+4	; 0x04
     1d0:	0c 96       	adiw	r24, 0x0c	; 12
     1d2:	89 31       	cpi	r24, 0x19	; 25
     1d4:	91 05       	cpc	r25, r1
     1d6:	38 f4       	brcc	.+14     	; 0x1e6 <_ZN6myDate8setMonthEi+0x2e>
		this->month = month;
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
     1da:	9a 81       	ldd	r25, Y+2	; 0x02
     1dc:	2b 81       	ldd	r18, Y+3	; 0x03
     1de:	3c 81       	ldd	r19, Y+4	; 0x04
     1e0:	fc 01       	movw	r30, r24
     1e2:	31 83       	std	Z+1, r19	; 0x01
     1e4:	20 83       	st	Z, r18
	}
}
     1e6:	0f 90       	pop	r0
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <_ZN6myDate6setDayEi>:

void myDate::setDay(int day){
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	00 d0       	rcall	.+0      	; 0x1fa <_ZN6myDate6setDayEi+0x6>
     1fa:	00 d0       	rcall	.+0      	; 0x1fc <_ZN6myDate6setDayEi+0x8>
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
     200:	9a 83       	std	Y+2, r25	; 0x02
     202:	89 83       	std	Y+1, r24	; 0x01
     204:	7c 83       	std	Y+4, r23	; 0x04
     206:	6b 83       	std	Y+3, r22	; 0x03
	if ((month == 9 || month == 4 || month == 6) && day/31 == 0){
     208:	89 81       	ldd	r24, Y+1	; 0x01
     20a:	9a 81       	ldd	r25, Y+2	; 0x02
     20c:	fc 01       	movw	r30, r24
     20e:	80 81       	ld	r24, Z
     210:	91 81       	ldd	r25, Z+1	; 0x01
     212:	89 30       	cpi	r24, 0x09	; 9
     214:	91 05       	cpc	r25, r1
     216:	81 f0       	breq	.+32     	; 0x238 <_ZN6myDate6setDayEi+0x44>
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	9a 81       	ldd	r25, Y+2	; 0x02
     21c:	fc 01       	movw	r30, r24
     21e:	80 81       	ld	r24, Z
     220:	91 81       	ldd	r25, Z+1	; 0x01
     222:	84 30       	cpi	r24, 0x04	; 4
     224:	91 05       	cpc	r25, r1
     226:	41 f0       	breq	.+16     	; 0x238 <_ZN6myDate6setDayEi+0x44>
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	9a 81       	ldd	r25, Y+2	; 0x02
     22c:	fc 01       	movw	r30, r24
     22e:	80 81       	ld	r24, Z
     230:	91 81       	ldd	r25, Z+1	; 0x01
     232:	86 30       	cpi	r24, 0x06	; 6
     234:	91 05       	cpc	r25, r1
     236:	41 f4       	brne	.+16     	; 0x248 <_ZN6myDate6setDayEi+0x54>
     238:	8b 81       	ldd	r24, Y+3	; 0x03
     23a:	9c 81       	ldd	r25, Y+4	; 0x04
     23c:	4e 96       	adiw	r24, 0x1e	; 30
     23e:	8d 33       	cpi	r24, 0x3D	; 61
     240:	91 05       	cpc	r25, r1
     242:	10 f4       	brcc	.+4      	; 0x248 <_ZN6myDate6setDayEi+0x54>
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	01 c0       	rjmp	.+2      	; 0x24a <_ZN6myDate6setDayEi+0x56>
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	88 23       	and	r24, r24
     24c:	41 f0       	breq	.+16     	; 0x25e <_ZN6myDate6setDayEi+0x6a>
		this->day = day;
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	9a 81       	ldd	r25, Y+2	; 0x02
     252:	2b 81       	ldd	r18, Y+3	; 0x03
     254:	3c 81       	ldd	r19, Y+4	; 0x04
     256:	fc 01       	movw	r30, r24
     258:	33 83       	std	Z+3, r19	; 0x03
     25a:	22 83       	std	Z+2, r18	; 0x02
     25c:	28 c0       	rjmp	.+80     	; 0x2ae <_ZN6myDate6setDayEi+0xba>
	} else if (month == 2 && day/29 == 0){
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	9a 81       	ldd	r25, Y+2	; 0x02
     262:	fc 01       	movw	r30, r24
     264:	80 81       	ld	r24, Z
     266:	91 81       	ldd	r25, Z+1	; 0x01
     268:	82 30       	cpi	r24, 0x02	; 2
     26a:	91 05       	cpc	r25, r1
     26c:	41 f4       	brne	.+16     	; 0x27e <_ZN6myDate6setDayEi+0x8a>
     26e:	8b 81       	ldd	r24, Y+3	; 0x03
     270:	9c 81       	ldd	r25, Y+4	; 0x04
     272:	4c 96       	adiw	r24, 0x1c	; 28
     274:	89 33       	cpi	r24, 0x39	; 57
     276:	91 05       	cpc	r25, r1
     278:	10 f4       	brcc	.+4      	; 0x27e <_ZN6myDate6setDayEi+0x8a>
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	01 c0       	rjmp	.+2      	; 0x280 <_ZN6myDate6setDayEi+0x8c>
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	88 23       	and	r24, r24
     282:	41 f0       	breq	.+16     	; 0x294 <_ZN6myDate6setDayEi+0xa0>
		this->day = day;
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	9a 81       	ldd	r25, Y+2	; 0x02
     288:	2b 81       	ldd	r18, Y+3	; 0x03
     28a:	3c 81       	ldd	r19, Y+4	; 0x04
     28c:	fc 01       	movw	r30, r24
     28e:	33 83       	std	Z+3, r19	; 0x03
     290:	22 83       	std	Z+2, r18	; 0x02
     292:	0d c0       	rjmp	.+26     	; 0x2ae <_ZN6myDate6setDayEi+0xba>
	} else{
		if (day/32 == 0){
     294:	8b 81       	ldd	r24, Y+3	; 0x03
     296:	9c 81       	ldd	r25, Y+4	; 0x04
     298:	4f 96       	adiw	r24, 0x1f	; 31
     29a:	8f 33       	cpi	r24, 0x3F	; 63
     29c:	91 05       	cpc	r25, r1
     29e:	38 f4       	brcc	.+14     	; 0x2ae <_ZN6myDate6setDayEi+0xba>
			this->day = day;
     2a0:	89 81       	ldd	r24, Y+1	; 0x01
     2a2:	9a 81       	ldd	r25, Y+2	; 0x02
     2a4:	2b 81       	ldd	r18, Y+3	; 0x03
     2a6:	3c 81       	ldd	r19, Y+4	; 0x04
     2a8:	fc 01       	movw	r30, r24
     2aa:	33 83       	std	Z+3, r19	; 0x03
     2ac:	22 83       	std	Z+2, r18	; 0x02
		}		
	}
}
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	08 95       	ret

000002bc <_ZN6myDate7setYearEi>:

void myDate::setYear(int year){
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	00 d0       	rcall	.+0      	; 0x2c2 <_ZN6myDate7setYearEi+0x6>
     2c2:	00 d0       	rcall	.+0      	; 0x2c4 <_ZN6myDate7setYearEi+0x8>
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
     2c8:	9a 83       	std	Y+2, r25	; 0x02
     2ca:	89 83       	std	Y+1, r24	; 0x01
     2cc:	7c 83       	std	Y+4, r23	; 0x04
     2ce:	6b 83       	std	Y+3, r22	; 0x03
	if (year >= 2000){
     2d0:	8b 81       	ldd	r24, Y+3	; 0x03
     2d2:	9c 81       	ldd	r25, Y+4	; 0x04
     2d4:	27 e0       	ldi	r18, 0x07	; 7
     2d6:	80 3d       	cpi	r24, 0xD0	; 208
     2d8:	92 07       	cpc	r25, r18
     2da:	44 f0       	brlt	.+16     	; 0x2ec <_ZN6myDate7setYearEi+0x30>
		this->year = year;
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	9a 81       	ldd	r25, Y+2	; 0x02
     2e0:	2b 81       	ldd	r18, Y+3	; 0x03
     2e2:	3c 81       	ldd	r19, Y+4	; 0x04
     2e4:	fc 01       	movw	r30, r24
     2e6:	35 83       	std	Z+5, r19	; 0x05
     2e8:	24 83       	std	Z+4, r18	; 0x04
     2ea:	07 c0       	rjmp	.+14     	; 0x2fa <_ZN6myDate7setYearEi+0x3e>
	} else {
		this->year = 1010;
     2ec:	89 81       	ldd	r24, Y+1	; 0x01
     2ee:	9a 81       	ldd	r25, Y+2	; 0x02
     2f0:	22 ef       	ldi	r18, 0xF2	; 242
     2f2:	33 e0       	ldi	r19, 0x03	; 3
     2f4:	fc 01       	movw	r30, r24
     2f6:	35 83       	std	Z+5, r19	; 0x05
     2f8:	24 83       	std	Z+4, r18	; 0x04
	}	
}
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	08 95       	ret

00000308 <_ZN6myDate7setDateEiii>:

void myDate::setDate(int month, int day, int year){
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	cd b7       	in	r28, 0x3d	; 61
     30e:	de b7       	in	r29, 0x3e	; 62
     310:	28 97       	sbiw	r28, 0x08	; 8
     312:	0f b6       	in	r0, 0x3f	; 63
     314:	f8 94       	cli
     316:	de bf       	out	0x3e, r29	; 62
     318:	0f be       	out	0x3f, r0	; 63
     31a:	cd bf       	out	0x3d, r28	; 61
     31c:	9a 83       	std	Y+2, r25	; 0x02
     31e:	89 83       	std	Y+1, r24	; 0x01
     320:	7c 83       	std	Y+4, r23	; 0x04
     322:	6b 83       	std	Y+3, r22	; 0x03
     324:	5e 83       	std	Y+6, r21	; 0x06
     326:	4d 83       	std	Y+5, r20	; 0x05
     328:	38 87       	std	Y+8, r19	; 0x08
     32a:	2f 83       	std	Y+7, r18	; 0x07
	setMonth(month);
     32c:	89 81       	ldd	r24, Y+1	; 0x01
     32e:	9a 81       	ldd	r25, Y+2	; 0x02
     330:	2b 81       	ldd	r18, Y+3	; 0x03
     332:	3c 81       	ldd	r19, Y+4	; 0x04
     334:	b9 01       	movw	r22, r18
     336:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN6myDate8setMonthEi>
	setDay(day);
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	9a 81       	ldd	r25, Y+2	; 0x02
     33e:	2d 81       	ldd	r18, Y+5	; 0x05
     340:	3e 81       	ldd	r19, Y+6	; 0x06
     342:	b9 01       	movw	r22, r18
     344:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_ZN6myDate6setDayEi>
	setYear(year);
     348:	89 81       	ldd	r24, Y+1	; 0x01
     34a:	9a 81       	ldd	r25, Y+2	; 0x02
     34c:	2f 81       	ldd	r18, Y+7	; 0x07
     34e:	38 85       	ldd	r19, Y+8	; 0x08
     350:	b9 01       	movw	r22, r18
     352:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_ZN6myDate7setYearEi>
}
     356:	28 96       	adiw	r28, 0x08	; 8
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	0f be       	out	0x3f, r0	; 63
     360:	cd bf       	out	0x3d, r28	; 61
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	08 95       	ret

00000368 <_ZN6myDate8addYearsEi>:


void myDate::addYears(int years){	//allows negative years to come in, therefore subtracting years
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	00 d0       	rcall	.+0      	; 0x36e <_ZN6myDate8addYearsEi+0x6>
     36e:	00 d0       	rcall	.+0      	; 0x370 <_ZN6myDate8addYearsEi+0x8>
     370:	00 d0       	rcall	.+0      	; 0x372 <_ZN6myDate8addYearsEi+0xa>
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	9c 83       	std	Y+4, r25	; 0x04
     378:	8b 83       	std	Y+3, r24	; 0x03
     37a:	7e 83       	std	Y+6, r23	; 0x06
     37c:	6d 83       	std	Y+5, r22	; 0x05
	volatile int tempYears = year + years;
     37e:	8b 81       	ldd	r24, Y+3	; 0x03
     380:	9c 81       	ldd	r25, Y+4	; 0x04
     382:	fc 01       	movw	r30, r24
     384:	24 81       	ldd	r18, Z+4	; 0x04
     386:	35 81       	ldd	r19, Z+5	; 0x05
     388:	8d 81       	ldd	r24, Y+5	; 0x05
     38a:	9e 81       	ldd	r25, Y+6	; 0x06
     38c:	82 0f       	add	r24, r18
     38e:	93 1f       	adc	r25, r19
     390:	9a 83       	std	Y+2, r25	; 0x02
     392:	89 83       	std	Y+1, r24	; 0x01
	if (tempYears > 2012){
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	9a 81       	ldd	r25, Y+2	; 0x02
     398:	21 e0       	ldi	r18, 0x01	; 1
     39a:	f7 e0       	ldi	r31, 0x07	; 7
     39c:	8d 3d       	cpi	r24, 0xDD	; 221
     39e:	9f 07       	cpc	r25, r31
     3a0:	0c f4       	brge	.+2      	; 0x3a4 <_ZN6myDate8addYearsEi+0x3c>
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	22 23       	and	r18, r18
     3a6:	39 f0       	breq	.+14     	; 0x3b6 <_ZN6myDate8addYearsEi+0x4e>
		year = tempYears;
     3a8:	29 81       	ldd	r18, Y+1	; 0x01
     3aa:	3a 81       	ldd	r19, Y+2	; 0x02
     3ac:	8b 81       	ldd	r24, Y+3	; 0x03
     3ae:	9c 81       	ldd	r25, Y+4	; 0x04
     3b0:	fc 01       	movw	r30, r24
     3b2:	35 83       	std	Z+5, r19	; 0x05
     3b4:	24 83       	std	Z+4, r18	; 0x04
	}
}
     3b6:	26 96       	adiw	r28, 0x06	; 6
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	f8 94       	cli
     3bc:	de bf       	out	0x3e, r29	; 62
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	cd bf       	out	0x3d, r28	; 61
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <_ZN6myDate9addMonthsEi>:

void myDate::addMonths(int months){	//adds months depending on number of months currently on.
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
     3d0:	2a 97       	sbiw	r28, 0x0a	; 10
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	f8 94       	cli
     3d6:	de bf       	out	0x3e, r29	; 62
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	cd bf       	out	0x3d, r28	; 61
     3dc:	98 87       	std	Y+8, r25	; 0x08
     3de:	8f 83       	std	Y+7, r24	; 0x07
     3e0:	7a 87       	std	Y+10, r23	; 0x0a
     3e2:	69 87       	std	Y+9, r22	; 0x09
	volatile int tempMonths = month + months;
     3e4:	8f 81       	ldd	r24, Y+7	; 0x07
     3e6:	98 85       	ldd	r25, Y+8	; 0x08
     3e8:	fc 01       	movw	r30, r24
     3ea:	20 81       	ld	r18, Z
     3ec:	31 81       	ldd	r19, Z+1	; 0x01
     3ee:	89 85       	ldd	r24, Y+9	; 0x09
     3f0:	9a 85       	ldd	r25, Y+10	; 0x0a
     3f2:	82 0f       	add	r24, r18
     3f4:	93 1f       	adc	r25, r19
     3f6:	9e 83       	std	Y+6, r25	; 0x06
     3f8:	8d 83       	std	Y+5, r24	; 0x05
	if (tempMonths > 12 && tempMonths < 25){
     3fa:	8d 81       	ldd	r24, Y+5	; 0x05
     3fc:	9e 81       	ldd	r25, Y+6	; 0x06
     3fe:	8d 30       	cpi	r24, 0x0D	; 13
     400:	91 05       	cpc	r25, r1
     402:	3c f0       	brlt	.+14     	; 0x412 <_ZN6myDate9addMonthsEi+0x4a>
     404:	8d 81       	ldd	r24, Y+5	; 0x05
     406:	9e 81       	ldd	r25, Y+6	; 0x06
     408:	89 31       	cpi	r24, 0x19	; 25
     40a:	91 05       	cpc	r25, r1
     40c:	14 f4       	brge	.+4      	; 0x412 <_ZN6myDate9addMonthsEi+0x4a>
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	01 c0       	rjmp	.+2      	; 0x414 <_ZN6myDate9addMonthsEi+0x4c>
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	88 23       	and	r24, r24
     416:	61 f0       	breq	.+24     	; 0x430 <_ZN6myDate9addMonthsEi+0x68>
		int yearsToAdd = 1;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	9a 83       	std	Y+2, r25	; 0x02
     41e:	89 83       	std	Y+1, r24	; 0x01
		addYears(yearsToAdd);
     420:	8f 81       	ldd	r24, Y+7	; 0x07
     422:	98 85       	ldd	r25, Y+8	; 0x08
     424:	29 81       	ldd	r18, Y+1	; 0x01
     426:	3a 81       	ldd	r19, Y+2	; 0x02
     428:	b9 01       	movw	r22, r18
     42a:	0e 94 b4 01 	call	0x368	; 0x368 <_ZN6myDate8addYearsEi>
     42e:	22 c0       	rjmp	.+68     	; 0x474 <_ZN6myDate9addMonthsEi+0xac>
	} else if (tempMonths >= 25){
     430:	8d 81       	ldd	r24, Y+5	; 0x05
     432:	9e 81       	ldd	r25, Y+6	; 0x06
     434:	21 e0       	ldi	r18, 0x01	; 1
     436:	89 31       	cpi	r24, 0x19	; 25
     438:	91 05       	cpc	r25, r1
     43a:	0c f4       	brge	.+2      	; 0x43e <_ZN6myDate9addMonthsEi+0x76>
     43c:	20 e0       	ldi	r18, 0x00	; 0
     43e:	22 23       	and	r18, r18
     440:	91 f0       	breq	.+36     	; 0x466 <_ZN6myDate9addMonthsEi+0x9e>
		int yearsToAdd = tempMonths/12;
     442:	8d 81       	ldd	r24, Y+5	; 0x05
     444:	9e 81       	ldd	r25, Y+6	; 0x06
     446:	2c e0       	ldi	r18, 0x0C	; 12
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	b9 01       	movw	r22, r18
     44c:	0e 94 12 19 	call	0x3224	; 0x3224 <__divmodhi4>
     450:	9b 01       	movw	r18, r22
     452:	3c 83       	std	Y+4, r19	; 0x04
     454:	2b 83       	std	Y+3, r18	; 0x03
		addYears(yearsToAdd);
     456:	8f 81       	ldd	r24, Y+7	; 0x07
     458:	98 85       	ldd	r25, Y+8	; 0x08
     45a:	2b 81       	ldd	r18, Y+3	; 0x03
     45c:	3c 81       	ldd	r19, Y+4	; 0x04
     45e:	b9 01       	movw	r22, r18
     460:	0e 94 b4 01 	call	0x368	; 0x368 <_ZN6myDate8addYearsEi>
     464:	07 c0       	rjmp	.+14     	; 0x474 <_ZN6myDate9addMonthsEi+0xac>
	} else {
		month = tempMonths;
     466:	2d 81       	ldd	r18, Y+5	; 0x05
     468:	3e 81       	ldd	r19, Y+6	; 0x06
     46a:	8f 81       	ldd	r24, Y+7	; 0x07
     46c:	98 85       	ldd	r25, Y+8	; 0x08
     46e:	fc 01       	movw	r30, r24
     470:	31 83       	std	Z+1, r19	; 0x01
     472:	20 83       	st	Z, r18
	}	
}
     474:	2a 96       	adiw	r28, 0x0a	; 10
     476:	0f b6       	in	r0, 0x3f	; 63
     478:	f8 94       	cli
     47a:	de bf       	out	0x3e, r29	; 62
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	cd bf       	out	0x3d, r28	; 61
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <_ZN6myDate7addDaysEi>:

void myDate::addDays(int days){
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	00 d0       	rcall	.+0      	; 0x48c <_ZN6myDate7addDaysEi+0x6>
     48c:	00 d0       	rcall	.+0      	; 0x48e <_ZN6myDate7addDaysEi+0x8>
     48e:	00 d0       	rcall	.+0      	; 0x490 <_ZN6myDate7addDaysEi+0xa>
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
     494:	9c 83       	std	Y+4, r25	; 0x04
     496:	8b 83       	std	Y+3, r24	; 0x03
     498:	7e 83       	std	Y+6, r23	; 0x06
     49a:	6d 83       	std	Y+5, r22	; 0x05
	volatile int tempDays = days + day;
     49c:	8b 81       	ldd	r24, Y+3	; 0x03
     49e:	9c 81       	ldd	r25, Y+4	; 0x04
     4a0:	fc 01       	movw	r30, r24
     4a2:	22 81       	ldd	r18, Z+2	; 0x02
     4a4:	33 81       	ldd	r19, Z+3	; 0x03
     4a6:	8d 81       	ldd	r24, Y+5	; 0x05
     4a8:	9e 81       	ldd	r25, Y+6	; 0x06
     4aa:	82 0f       	add	r24, r18
     4ac:	93 1f       	adc	r25, r19
     4ae:	9a 83       	std	Y+2, r25	; 0x02
     4b0:	89 83       	std	Y+1, r24	; 0x01
	//Logic for incrementing days the right way. We are assuming no more than one month will be added
	if (month == 9 || month == 4 || month == 6){	//30 days in a month
     4b2:	8b 81       	ldd	r24, Y+3	; 0x03
     4b4:	9c 81       	ldd	r25, Y+4	; 0x04
     4b6:	fc 01       	movw	r30, r24
     4b8:	80 81       	ld	r24, Z
     4ba:	91 81       	ldd	r25, Z+1	; 0x01
     4bc:	89 30       	cpi	r24, 0x09	; 9
     4be:	91 05       	cpc	r25, r1
     4c0:	81 f0       	breq	.+32     	; 0x4e2 <_ZN6myDate7addDaysEi+0x5c>
     4c2:	8b 81       	ldd	r24, Y+3	; 0x03
     4c4:	9c 81       	ldd	r25, Y+4	; 0x04
     4c6:	fc 01       	movw	r30, r24
     4c8:	80 81       	ld	r24, Z
     4ca:	91 81       	ldd	r25, Z+1	; 0x01
     4cc:	84 30       	cpi	r24, 0x04	; 4
     4ce:	91 05       	cpc	r25, r1
     4d0:	41 f0       	breq	.+16     	; 0x4e2 <_ZN6myDate7addDaysEi+0x5c>
     4d2:	8b 81       	ldd	r24, Y+3	; 0x03
     4d4:	9c 81       	ldd	r25, Y+4	; 0x04
     4d6:	fc 01       	movw	r30, r24
     4d8:	80 81       	ld	r24, Z
     4da:	91 81       	ldd	r25, Z+1	; 0x01
     4dc:	86 30       	cpi	r24, 0x06	; 6
     4de:	91 05       	cpc	r25, r1
     4e0:	11 f4       	brne	.+4      	; 0x4e6 <_ZN6myDate7addDaysEi+0x60>
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <_ZN6myDate7addDaysEi+0x62>
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	88 23       	and	r24, r24
     4ea:	31 f1       	breq	.+76     	; 0x538 <_ZN6myDate7addDaysEi+0xb2>
		if (tempDays/31 == 0){	
     4ec:	89 81       	ldd	r24, Y+1	; 0x01
     4ee:	9a 81       	ldd	r25, Y+2	; 0x02
     4f0:	4e 96       	adiw	r24, 0x1e	; 30
     4f2:	21 e0       	ldi	r18, 0x01	; 1
     4f4:	8d 33       	cpi	r24, 0x3D	; 61
     4f6:	91 05       	cpc	r25, r1
     4f8:	08 f0       	brcs	.+2      	; 0x4fc <_ZN6myDate7addDaysEi+0x76>
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	22 23       	and	r18, r18
     4fe:	41 f0       	breq	.+16     	; 0x510 <_ZN6myDate7addDaysEi+0x8a>
			day = tempDays;
     500:	29 81       	ldd	r18, Y+1	; 0x01
     502:	3a 81       	ldd	r19, Y+2	; 0x02
     504:	8b 81       	ldd	r24, Y+3	; 0x03
     506:	9c 81       	ldd	r25, Y+4	; 0x04
     508:	fc 01       	movw	r30, r24
     50a:	33 83       	std	Z+3, r19	; 0x03
     50c:	22 83       	std	Z+2, r18	; 0x02
     50e:	71 c0       	rjmp	.+226    	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		} else {
			addMonths(1);	//just add 1 month
     510:	8b 81       	ldd	r24, Y+3	; 0x03
     512:	9c 81       	ldd	r25, Y+4	; 0x04
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN6myDate9addMonthsEi>
			day = tempDays%31;			
     51c:	89 81       	ldd	r24, Y+1	; 0x01
     51e:	9a 81       	ldd	r25, Y+2	; 0x02
     520:	2f e1       	ldi	r18, 0x1F	; 31
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	b9 01       	movw	r22, r18
     526:	0e 94 12 19 	call	0x3224	; 0x3224 <__divmodhi4>
     52a:	9c 01       	movw	r18, r24
     52c:	8b 81       	ldd	r24, Y+3	; 0x03
     52e:	9c 81       	ldd	r25, Y+4	; 0x04
     530:	fc 01       	movw	r30, r24
     532:	33 83       	std	Z+3, r19	; 0x03
     534:	22 83       	std	Z+2, r18	; 0x02
     536:	5d c0       	rjmp	.+186    	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		}
	} else if (month == 2){
     538:	8b 81       	ldd	r24, Y+3	; 0x03
     53a:	9c 81       	ldd	r25, Y+4	; 0x04
     53c:	fc 01       	movw	r30, r24
     53e:	80 81       	ld	r24, Z
     540:	91 81       	ldd	r25, Z+1	; 0x01
     542:	21 e0       	ldi	r18, 0x01	; 1
     544:	82 30       	cpi	r24, 0x02	; 2
     546:	91 05       	cpc	r25, r1
     548:	09 f0       	breq	.+2      	; 0x54c <_ZN6myDate7addDaysEi+0xc6>
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	22 23       	and	r18, r18
     54e:	49 f1       	breq	.+82     	; 0x5a2 <_ZN6myDate7addDaysEi+0x11c>
		if(day/29 == 0){		//Don't take into account LeapYear
     550:	8b 81       	ldd	r24, Y+3	; 0x03
     552:	9c 81       	ldd	r25, Y+4	; 0x04
     554:	fc 01       	movw	r30, r24
     556:	82 81       	ldd	r24, Z+2	; 0x02
     558:	93 81       	ldd	r25, Z+3	; 0x03
     55a:	4c 96       	adiw	r24, 0x1c	; 28
     55c:	21 e0       	ldi	r18, 0x01	; 1
     55e:	89 33       	cpi	r24, 0x39	; 57
     560:	91 05       	cpc	r25, r1
     562:	08 f0       	brcs	.+2      	; 0x566 <_ZN6myDate7addDaysEi+0xe0>
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	22 23       	and	r18, r18
     568:	41 f0       	breq	.+16     	; 0x57a <_ZN6myDate7addDaysEi+0xf4>
			day = tempDays;
     56a:	29 81       	ldd	r18, Y+1	; 0x01
     56c:	3a 81       	ldd	r19, Y+2	; 0x02
     56e:	8b 81       	ldd	r24, Y+3	; 0x03
     570:	9c 81       	ldd	r25, Y+4	; 0x04
     572:	fc 01       	movw	r30, r24
     574:	33 83       	std	Z+3, r19	; 0x03
     576:	22 83       	std	Z+2, r18	; 0x02
     578:	3c c0       	rjmp	.+120    	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		} else {
			addMonths(1);
     57a:	8b 81       	ldd	r24, Y+3	; 0x03
     57c:	9c 81       	ldd	r25, Y+4	; 0x04
     57e:	61 e0       	ldi	r22, 0x01	; 1
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN6myDate9addMonthsEi>
			day = tempDays%29;
     586:	89 81       	ldd	r24, Y+1	; 0x01
     588:	9a 81       	ldd	r25, Y+2	; 0x02
     58a:	2d e1       	ldi	r18, 0x1D	; 29
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	b9 01       	movw	r22, r18
     590:	0e 94 12 19 	call	0x3224	; 0x3224 <__divmodhi4>
     594:	9c 01       	movw	r18, r24
     596:	8b 81       	ldd	r24, Y+3	; 0x03
     598:	9c 81       	ldd	r25, Y+4	; 0x04
     59a:	fc 01       	movw	r30, r24
     59c:	33 83       	std	Z+3, r19	; 0x03
     59e:	22 83       	std	Z+2, r18	; 0x02
     5a0:	28 c0       	rjmp	.+80     	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		}		
	} else {
		if (day/32 == 0){
     5a2:	8b 81       	ldd	r24, Y+3	; 0x03
     5a4:	9c 81       	ldd	r25, Y+4	; 0x04
     5a6:	fc 01       	movw	r30, r24
     5a8:	82 81       	ldd	r24, Z+2	; 0x02
     5aa:	93 81       	ldd	r25, Z+3	; 0x03
     5ac:	4f 96       	adiw	r24, 0x1f	; 31
     5ae:	21 e0       	ldi	r18, 0x01	; 1
     5b0:	8f 33       	cpi	r24, 0x3F	; 63
     5b2:	91 05       	cpc	r25, r1
     5b4:	08 f0       	brcs	.+2      	; 0x5b8 <_ZN6myDate7addDaysEi+0x132>
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	22 23       	and	r18, r18
     5ba:	41 f0       	breq	.+16     	; 0x5cc <_ZN6myDate7addDaysEi+0x146>
			day = tempDays;
     5bc:	29 81       	ldd	r18, Y+1	; 0x01
     5be:	3a 81       	ldd	r19, Y+2	; 0x02
     5c0:	8b 81       	ldd	r24, Y+3	; 0x03
     5c2:	9c 81       	ldd	r25, Y+4	; 0x04
     5c4:	fc 01       	movw	r30, r24
     5c6:	33 83       	std	Z+3, r19	; 0x03
     5c8:	22 83       	std	Z+2, r18	; 0x02
     5ca:	13 c0       	rjmp	.+38     	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		} else {
			addMonths(1);
     5cc:	8b 81       	ldd	r24, Y+3	; 0x03
     5ce:	9c 81       	ldd	r25, Y+4	; 0x04
     5d0:	61 e0       	ldi	r22, 0x01	; 1
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN6myDate9addMonthsEi>
			day = tempDays%32;
     5d8:	89 81       	ldd	r24, Y+1	; 0x01
     5da:	9a 81       	ldd	r25, Y+2	; 0x02
     5dc:	20 e2       	ldi	r18, 0x20	; 32
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	b9 01       	movw	r22, r18
     5e2:	0e 94 12 19 	call	0x3224	; 0x3224 <__divmodhi4>
     5e6:	9c 01       	movw	r18, r24
     5e8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ea:	9c 81       	ldd	r25, Y+4	; 0x04
     5ec:	fc 01       	movw	r30, r24
     5ee:	33 83       	std	Z+3, r19	; 0x03
     5f0:	22 83       	std	Z+2, r18	; 0x02
		}
	}
}
     5f2:	26 96       	adiw	r28, 0x06	; 6
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	f8 94       	cli
     5f8:	de bf       	out	0x3e, r29	; 62
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	cd bf       	out	0x3d, r28	; 61
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <_ZN6myDate17checkValidityDateEv>:

BOOL myDate::checkValidityDate(){
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	00 d0       	rcall	.+0      	; 0x60a <_ZN6myDate17checkValidityDateEv+0x6>
     60a:	0f 92       	push	r0
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	9b 83       	std	Y+3, r25	; 0x03
     612:	8a 83       	std	Y+2, r24	; 0x02
	BOOL checkYear=fFalse;
     614:	19 82       	std	Y+1, r1	; 0x01
	if (month/13==0){
     616:	8a 81       	ldd	r24, Y+2	; 0x02
     618:	9b 81       	ldd	r25, Y+3	; 0x03
     61a:	fc 01       	movw	r30, r24
     61c:	80 81       	ld	r24, Z
     61e:	91 81       	ldd	r25, Z+1	; 0x01
     620:	0c 96       	adiw	r24, 0x0c	; 12
     622:	21 e0       	ldi	r18, 0x01	; 1
     624:	89 31       	cpi	r24, 0x19	; 25
     626:	91 05       	cpc	r25, r1
     628:	08 f0       	brcs	.+2      	; 0x62c <_ZN6myDate17checkValidityDateEv+0x28>
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	22 23       	and	r18, r18
     62e:	09 f4       	brne	.+2      	; 0x632 <_ZN6myDate17checkValidityDateEv+0x2e>
     630:	66 c0       	rjmp	.+204    	; 0x6fe <_ZN6myDate17checkValidityDateEv+0xfa>
			if ((month == 9 || month == 4 || month == 6) && day/31 == 0){
     632:	8a 81       	ldd	r24, Y+2	; 0x02
     634:	9b 81       	ldd	r25, Y+3	; 0x03
     636:	fc 01       	movw	r30, r24
     638:	80 81       	ld	r24, Z
     63a:	91 81       	ldd	r25, Z+1	; 0x01
     63c:	89 30       	cpi	r24, 0x09	; 9
     63e:	91 05       	cpc	r25, r1
     640:	81 f0       	breq	.+32     	; 0x662 <_ZN6myDate17checkValidityDateEv+0x5e>
     642:	8a 81       	ldd	r24, Y+2	; 0x02
     644:	9b 81       	ldd	r25, Y+3	; 0x03
     646:	fc 01       	movw	r30, r24
     648:	80 81       	ld	r24, Z
     64a:	91 81       	ldd	r25, Z+1	; 0x01
     64c:	84 30       	cpi	r24, 0x04	; 4
     64e:	91 05       	cpc	r25, r1
     650:	41 f0       	breq	.+16     	; 0x662 <_ZN6myDate17checkValidityDateEv+0x5e>
     652:	8a 81       	ldd	r24, Y+2	; 0x02
     654:	9b 81       	ldd	r25, Y+3	; 0x03
     656:	fc 01       	movw	r30, r24
     658:	80 81       	ld	r24, Z
     65a:	91 81       	ldd	r25, Z+1	; 0x01
     65c:	86 30       	cpi	r24, 0x06	; 6
     65e:	91 05       	cpc	r25, r1
     660:	59 f4       	brne	.+22     	; 0x678 <_ZN6myDate17checkValidityDateEv+0x74>
     662:	8a 81       	ldd	r24, Y+2	; 0x02
     664:	9b 81       	ldd	r25, Y+3	; 0x03
     666:	fc 01       	movw	r30, r24
     668:	82 81       	ldd	r24, Z+2	; 0x02
     66a:	93 81       	ldd	r25, Z+3	; 0x03
     66c:	4e 96       	adiw	r24, 0x1e	; 30
     66e:	8d 33       	cpi	r24, 0x3D	; 61
     670:	91 05       	cpc	r25, r1
     672:	10 f4       	brcc	.+4      	; 0x678 <_ZN6myDate17checkValidityDateEv+0x74>
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	01 c0       	rjmp	.+2      	; 0x67a <_ZN6myDate17checkValidityDateEv+0x76>
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	88 23       	and	r24, r24
     67c:	19 f0       	breq	.+6      	; 0x684 <_ZN6myDate17checkValidityDateEv+0x80>
				checkYear=fTrue;
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	89 83       	std	Y+1, r24	; 0x01
     682:	28 c0       	rjmp	.+80     	; 0x6d4 <_ZN6myDate17checkValidityDateEv+0xd0>
			} else if (month == 2 && day/29 == 0){
     684:	8a 81       	ldd	r24, Y+2	; 0x02
     686:	9b 81       	ldd	r25, Y+3	; 0x03
     688:	fc 01       	movw	r30, r24
     68a:	80 81       	ld	r24, Z
     68c:	91 81       	ldd	r25, Z+1	; 0x01
     68e:	82 30       	cpi	r24, 0x02	; 2
     690:	91 05       	cpc	r25, r1
     692:	59 f4       	brne	.+22     	; 0x6aa <_ZN6myDate17checkValidityDateEv+0xa6>
     694:	8a 81       	ldd	r24, Y+2	; 0x02
     696:	9b 81       	ldd	r25, Y+3	; 0x03
     698:	fc 01       	movw	r30, r24
     69a:	82 81       	ldd	r24, Z+2	; 0x02
     69c:	93 81       	ldd	r25, Z+3	; 0x03
     69e:	4c 96       	adiw	r24, 0x1c	; 28
     6a0:	89 33       	cpi	r24, 0x39	; 57
     6a2:	91 05       	cpc	r25, r1
     6a4:	10 f4       	brcc	.+4      	; 0x6aa <_ZN6myDate17checkValidityDateEv+0xa6>
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	01 c0       	rjmp	.+2      	; 0x6ac <_ZN6myDate17checkValidityDateEv+0xa8>
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	88 23       	and	r24, r24
     6ae:	19 f0       	breq	.+6      	; 0x6b6 <_ZN6myDate17checkValidityDateEv+0xb2>
				checkYear=fTrue;
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	89 83       	std	Y+1, r24	; 0x01
     6b4:	0f c0       	rjmp	.+30     	; 0x6d4 <_ZN6myDate17checkValidityDateEv+0xd0>
			} else{
				if (day/32 == 0){
     6b6:	8a 81       	ldd	r24, Y+2	; 0x02
     6b8:	9b 81       	ldd	r25, Y+3	; 0x03
     6ba:	fc 01       	movw	r30, r24
     6bc:	82 81       	ldd	r24, Z+2	; 0x02
     6be:	93 81       	ldd	r25, Z+3	; 0x03
     6c0:	4f 96       	adiw	r24, 0x1f	; 31
     6c2:	21 e0       	ldi	r18, 0x01	; 1
     6c4:	8f 33       	cpi	r24, 0x3F	; 63
     6c6:	91 05       	cpc	r25, r1
     6c8:	08 f0       	brcs	.+2      	; 0x6cc <_ZN6myDate17checkValidityDateEv+0xc8>
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	22 23       	and	r18, r18
     6ce:	11 f0       	breq	.+4      	; 0x6d4 <_ZN6myDate17checkValidityDateEv+0xd0>
					checkYear=fTrue;
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	89 83       	std	Y+1, r24	; 0x01
				}
			}
			
			//Check year
			if (checkYear && year>=2013){return fTrue;}
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
     6d6:	88 23       	and	r24, r24
     6d8:	59 f0       	breq	.+22     	; 0x6f0 <_ZN6myDate17checkValidityDateEv+0xec>
     6da:	8a 81       	ldd	r24, Y+2	; 0x02
     6dc:	9b 81       	ldd	r25, Y+3	; 0x03
     6de:	fc 01       	movw	r30, r24
     6e0:	84 81       	ldd	r24, Z+4	; 0x04
     6e2:	95 81       	ldd	r25, Z+5	; 0x05
     6e4:	f7 e0       	ldi	r31, 0x07	; 7
     6e6:	8d 3d       	cpi	r24, 0xDD	; 221
     6e8:	9f 07       	cpc	r25, r31
     6ea:	14 f0       	brlt	.+4      	; 0x6f0 <_ZN6myDate17checkValidityDateEv+0xec>
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	01 c0       	rjmp	.+2      	; 0x6f2 <_ZN6myDate17checkValidityDateEv+0xee>
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	88 23       	and	r24, r24
     6f4:	11 f0       	breq	.+4      	; 0x6fa <_ZN6myDate17checkValidityDateEv+0xf6>
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	03 c0       	rjmp	.+6      	; 0x700 <_ZN6myDate17checkValidityDateEv+0xfc>
			else {return fFalse;}
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	01 c0       	rjmp	.+2      	; 0x700 <_ZN6myDate17checkValidityDateEv+0xfc>
	} else {return fFalse;}
     6fe:	80 e0       	ldi	r24, 0x00	; 0
}
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <_ZN6myDate7getDateEv>:

const char * myDate::getDate(){
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
     714:	2d 97       	sbiw	r28, 0x0d	; 13
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	f8 94       	cli
     71a:	de bf       	out	0x3e, r29	; 62
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	cd bf       	out	0x3d, r28	; 61
     720:	9d 87       	std	Y+13, r25	; 0x0d
     722:	8c 87       	std	Y+12, r24	; 0x0c
	char monthString[3],dayString[3],yearString[5];
	itoa(month,monthString,10);
     724:	8c 85       	ldd	r24, Y+12	; 0x0c
     726:	9d 85       	ldd	r25, Y+13	; 0x0d
     728:	fc 01       	movw	r30, r24
     72a:	80 81       	ld	r24, Z
     72c:	91 81       	ldd	r25, Z+1	; 0x01
     72e:	9e 01       	movw	r18, r28
     730:	2f 5f       	subi	r18, 0xFF	; 255
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	b9 01       	movw	r22, r18
     736:	4a e0       	ldi	r20, 0x0A	; 10
     738:	50 e0       	ldi	r21, 0x00	; 0
     73a:	0e 94 86 19 	call	0x330c	; 0x330c <itoa>
	itoa(day,dayString,10);
     73e:	8c 85       	ldd	r24, Y+12	; 0x0c
     740:	9d 85       	ldd	r25, Y+13	; 0x0d
     742:	fc 01       	movw	r30, r24
     744:	82 81       	ldd	r24, Z+2	; 0x02
     746:	93 81       	ldd	r25, Z+3	; 0x03
     748:	9e 01       	movw	r18, r28
     74a:	2c 5f       	subi	r18, 0xFC	; 252
     74c:	3f 4f       	sbci	r19, 0xFF	; 255
     74e:	b9 01       	movw	r22, r18
     750:	4a e0       	ldi	r20, 0x0A	; 10
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	0e 94 86 19 	call	0x330c	; 0x330c <itoa>
	itoa(year,yearString,10);
     758:	8c 85       	ldd	r24, Y+12	; 0x0c
     75a:	9d 85       	ldd	r25, Y+13	; 0x0d
     75c:	fc 01       	movw	r30, r24
     75e:	84 81       	ldd	r24, Z+4	; 0x04
     760:	95 81       	ldd	r25, Z+5	; 0x05
     762:	9e 01       	movw	r18, r28
     764:	29 5f       	subi	r18, 0xF9	; 249
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	b9 01       	movw	r22, r18
     76a:	4a e0       	ldi	r20, 0x0A	; 10
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	0e 94 86 19 	call	0x330c	; 0x330c <itoa>
	strcpy(dateString,monthString);
     772:	8c 85       	ldd	r24, Y+12	; 0x0c
     774:	9d 85       	ldd	r25, Y+13	; 0x0d
     776:	06 96       	adiw	r24, 0x06	; 6
     778:	9e 01       	movw	r18, r28
     77a:	2f 5f       	subi	r18, 0xFF	; 255
     77c:	3f 4f       	sbci	r19, 0xFF	; 255
     77e:	b9 01       	movw	r22, r18
     780:	0e 94 71 19 	call	0x32e2	; 0x32e2 <strcpy>
	strcat(dateString,",");
     784:	8c 85       	ldd	r24, Y+12	; 0x0c
     786:	9d 85       	ldd	r25, Y+13	; 0x0d
     788:	9c 01       	movw	r18, r24
     78a:	2a 5f       	subi	r18, 0xFA	; 250
     78c:	3f 4f       	sbci	r19, 0xFF	; 255
     78e:	c9 01       	movw	r24, r18
     790:	ac 01       	movw	r20, r24
     792:	fa 01       	movw	r30, r20
     794:	01 90       	ld	r0, Z+
     796:	00 20       	and	r0, r0
     798:	e9 f7       	brne	.-6      	; 0x794 <_ZN6myDate7getDateEv+0x88>
     79a:	cf 01       	movw	r24, r30
     79c:	01 97       	sbiw	r24, 0x01	; 1
     79e:	84 1b       	sub	r24, r20
     7a0:	95 0b       	sbc	r25, r21
     7a2:	82 0f       	add	r24, r18
     7a4:	93 1f       	adc	r25, r19
     7a6:	2c e2       	ldi	r18, 0x2C	; 44
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	fc 01       	movw	r30, r24
     7ac:	31 83       	std	Z+1, r19	; 0x01
     7ae:	20 83       	st	Z, r18
	strcat(dateString,dayString);
     7b0:	8c 85       	ldd	r24, Y+12	; 0x0c
     7b2:	9d 85       	ldd	r25, Y+13	; 0x0d
     7b4:	06 96       	adiw	r24, 0x06	; 6
     7b6:	9e 01       	movw	r18, r28
     7b8:	2c 5f       	subi	r18, 0xFC	; 252
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	b9 01       	movw	r22, r18
     7be:	0e 94 5d 19 	call	0x32ba	; 0x32ba <strcat>
	strcat(dateString,",");
     7c2:	8c 85       	ldd	r24, Y+12	; 0x0c
     7c4:	9d 85       	ldd	r25, Y+13	; 0x0d
     7c6:	9c 01       	movw	r18, r24
     7c8:	2a 5f       	subi	r18, 0xFA	; 250
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	c9 01       	movw	r24, r18
     7ce:	ac 01       	movw	r20, r24
     7d0:	fa 01       	movw	r30, r20
     7d2:	01 90       	ld	r0, Z+
     7d4:	00 20       	and	r0, r0
     7d6:	e9 f7       	brne	.-6      	; 0x7d2 <_ZN6myDate7getDateEv+0xc6>
     7d8:	cf 01       	movw	r24, r30
     7da:	01 97       	sbiw	r24, 0x01	; 1
     7dc:	84 1b       	sub	r24, r20
     7de:	95 0b       	sbc	r25, r21
     7e0:	82 0f       	add	r24, r18
     7e2:	93 1f       	adc	r25, r19
     7e4:	2c e2       	ldi	r18, 0x2C	; 44
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	fc 01       	movw	r30, r24
     7ea:	31 83       	std	Z+1, r19	; 0x01
     7ec:	20 83       	st	Z, r18
	strcat(dateString,yearString);
     7ee:	8c 85       	ldd	r24, Y+12	; 0x0c
     7f0:	9d 85       	ldd	r25, Y+13	; 0x0d
     7f2:	06 96       	adiw	r24, 0x06	; 6
     7f4:	9e 01       	movw	r18, r28
     7f6:	29 5f       	subi	r18, 0xF9	; 249
     7f8:	3f 4f       	sbci	r19, 0xFF	; 255
     7fa:	b9 01       	movw	r22, r18
     7fc:	0e 94 5d 19 	call	0x32ba	; 0x32ba <strcat>
	dateString[15] = ' ';
     800:	8c 85       	ldd	r24, Y+12	; 0x0c
     802:	9d 85       	ldd	r25, Y+13	; 0x0d
     804:	20 e2       	ldi	r18, 0x20	; 32
     806:	fc 01       	movw	r30, r24
     808:	25 8b       	std	Z+21, r18	; 0x15
	dateString[16] = '\0';
     80a:	8c 85       	ldd	r24, Y+12	; 0x0c
     80c:	9d 85       	ldd	r25, Y+13	; 0x0d
     80e:	fc 01       	movw	r30, r24
     810:	16 8a       	std	Z+22, r1	; 0x16
	
	return dateString;
     812:	8c 85       	ldd	r24, Y+12	; 0x0c
     814:	9d 85       	ldd	r25, Y+13	; 0x0d
     816:	06 96       	adiw	r24, 0x06	; 6
     818:	2d 96       	adiw	r28, 0x0d	; 13
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	de bf       	out	0x3e, r29	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	cd bf       	out	0x3d, r28	; 61
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	08 95       	ret

0000082a <_ZN6myTimeC1Ev>:
		void addMinutes(int minutes);
		void setHour(int hour);
		void setMinute(int minute);
};

myTime::myTime():myDate(){
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	00 d0       	rcall	.+0      	; 0x830 <_ZN6myTimeC1Ev+0x6>
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	9a 83       	std	Y+2, r25	; 0x02
     836:	89 83       	std	Y+1, r24	; 0x01
     838:	89 81       	ldd	r24, Y+1	; 0x01
     83a:	9a 81       	ldd	r25, Y+2	; 0x02
     83c:	0e 94 69 00 	call	0xd2	; 0xd2 <_ZN6myDateC1Ev>
	setTime(0,0,0);
     840:	89 81       	ldd	r24, Y+1	; 0x01
     842:	9a 81       	ldd	r25, Y+2	; 0x02
     844:	60 e0       	ldi	r22, 0x00	; 0
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	40 e0       	ldi	r20, 0x00	; 0
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
}
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <_ZN6myTimeC1Eiii>:

myTime::myTime(int hour, int minute, int second):myDate(){
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	cd b7       	in	r28, 0x3d	; 61
     864:	de b7       	in	r29, 0x3e	; 62
     866:	28 97       	sbiw	r28, 0x08	; 8
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	f8 94       	cli
     86c:	de bf       	out	0x3e, r29	; 62
     86e:	0f be       	out	0x3f, r0	; 63
     870:	cd bf       	out	0x3d, r28	; 61
     872:	9a 83       	std	Y+2, r25	; 0x02
     874:	89 83       	std	Y+1, r24	; 0x01
     876:	7c 83       	std	Y+4, r23	; 0x04
     878:	6b 83       	std	Y+3, r22	; 0x03
     87a:	5e 83       	std	Y+6, r21	; 0x06
     87c:	4d 83       	std	Y+5, r20	; 0x05
     87e:	38 87       	std	Y+8, r19	; 0x08
     880:	2f 83       	std	Y+7, r18	; 0x07
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	9a 81       	ldd	r25, Y+2	; 0x02
     886:	0e 94 69 00 	call	0xd2	; 0xd2 <_ZN6myDateC1Ev>
	setTime(hour,minute,second);
     88a:	89 81       	ldd	r24, Y+1	; 0x01
     88c:	9a 81       	ldd	r25, Y+2	; 0x02
     88e:	6b 81       	ldd	r22, Y+3	; 0x03
     890:	7c 81       	ldd	r23, Y+4	; 0x04
     892:	4d 81       	ldd	r20, Y+5	; 0x05
     894:	5e 81       	ldd	r21, Y+6	; 0x06
     896:	2f 81       	ldd	r18, Y+7	; 0x07
     898:	38 85       	ldd	r19, Y+8	; 0x08
     89a:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
}
     89e:	28 96       	adiw	r28, 0x08	; 8
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	de bf       	out	0x3e, r29	; 62
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	cd bf       	out	0x3d, r28	; 61
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <_ZN6myTimeC1Eiiiiii>:

myTime::myTime(int hour,int minute,int second,int month, int day, int year):myDate(month,day,year){
     8b0:	cf 92       	push	r12
     8b2:	df 92       	push	r13
     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	2e 97       	sbiw	r28, 0x0e	; 14
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
     8d0:	9a 83       	std	Y+2, r25	; 0x02
     8d2:	89 83       	std	Y+1, r24	; 0x01
     8d4:	7c 83       	std	Y+4, r23	; 0x04
     8d6:	6b 83       	std	Y+3, r22	; 0x03
     8d8:	5e 83       	std	Y+6, r21	; 0x06
     8da:	4d 83       	std	Y+5, r20	; 0x05
     8dc:	38 87       	std	Y+8, r19	; 0x08
     8de:	2f 83       	std	Y+7, r18	; 0x07
     8e0:	1a 87       	std	Y+10, r17	; 0x0a
     8e2:	09 87       	std	Y+9, r16	; 0x09
     8e4:	fc 86       	std	Y+12, r15	; 0x0c
     8e6:	eb 86       	std	Y+11, r14	; 0x0b
     8e8:	de 86       	std	Y+14, r13	; 0x0e
     8ea:	cd 86       	std	Y+13, r12	; 0x0d
     8ec:	89 81       	ldd	r24, Y+1	; 0x01
     8ee:	9a 81       	ldd	r25, Y+2	; 0x02
     8f0:	69 85       	ldd	r22, Y+9	; 0x09
     8f2:	7a 85       	ldd	r23, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	2d 85       	ldd	r18, Y+13	; 0x0d
     8fa:	3e 85       	ldd	r19, Y+14	; 0x0e
     8fc:	0e 94 84 00 	call	0x108	; 0x108 <_ZN6myDateC1Eiii>
	setTime(hour,minute,second);
     900:	89 81       	ldd	r24, Y+1	; 0x01
     902:	9a 81       	ldd	r25, Y+2	; 0x02
     904:	6b 81       	ldd	r22, Y+3	; 0x03
     906:	7c 81       	ldd	r23, Y+4	; 0x04
     908:	4d 81       	ldd	r20, Y+5	; 0x05
     90a:	5e 81       	ldd	r21, Y+6	; 0x06
     90c:	2f 81       	ldd	r18, Y+7	; 0x07
     90e:	38 85       	ldd	r19, Y+8	; 0x08
     910:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
}
     914:	2e 96       	adiw	r28, 0x0e	; 14
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	f8 94       	cli
     91a:	de bf       	out	0x3e, r29	; 62
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	cd bf       	out	0x3d, r28	; 61
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	ff 90       	pop	r15
     92a:	ef 90       	pop	r14
     92c:	df 90       	pop	r13
     92e:	cf 90       	pop	r12
     930:	08 95       	ret

00000932 <_ZN6myTime10getSecondsEv>:

BYTE myTime::getSeconds(){
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	00 d0       	rcall	.+0      	; 0x938 <_ZN6myTime10getSecondsEv+0x6>
     938:	cd b7       	in	r28, 0x3d	; 61
     93a:	de b7       	in	r29, 0x3e	; 62
     93c:	9a 83       	std	Y+2, r25	; 0x02
     93e:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)second;
     940:	89 81       	ldd	r24, Y+1	; 0x01
     942:	9a 81       	ldd	r25, Y+2	; 0x02
     944:	fc 01       	movw	r30, r24
     946:	83 8d       	ldd	r24, Z+27	; 0x1b
     948:	94 8d       	ldd	r25, Z+28	; 0x1c
}
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <_ZN6myTime10getMinutesEv>:

BYTE myTime::getMinutes(){
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	00 d0       	rcall	.+0      	; 0x95a <_ZN6myTime10getMinutesEv+0x6>
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
     95e:	9a 83       	std	Y+2, r25	; 0x02
     960:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)minute;
     962:	89 81       	ldd	r24, Y+1	; 0x01
     964:	9a 81       	ldd	r25, Y+2	; 0x02
     966:	fc 01       	movw	r30, r24
     968:	81 8d       	ldd	r24, Z+25	; 0x19
     96a:	92 8d       	ldd	r25, Z+26	; 0x1a
}
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <_ZN6myTime8getHoursEv>:

BYTE myTime::getHours(){
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	00 d0       	rcall	.+0      	; 0x97c <_ZN6myTime8getHoursEv+0x6>
     97c:	cd b7       	in	r28, 0x3d	; 61
     97e:	de b7       	in	r29, 0x3e	; 62
     980:	9a 83       	std	Y+2, r25	; 0x02
     982:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)hour;
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	9a 81       	ldd	r25, Y+2	; 0x02
     988:	fc 01       	movw	r30, r24
     98a:	87 89       	ldd	r24, Z+23	; 0x17
     98c:	90 8d       	ldd	r25, Z+24	; 0x18
}
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	08 95       	ret

00000998 <_ZN6myTime7setTimeEPc>:

BOOL myTime::setTime(char *newTime){
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	cd b7       	in	r28, 0x3d	; 61
     99e:	de b7       	in	r29, 0x3e	; 62
     9a0:	a2 97       	sbiw	r28, 0x22	; 34
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	f8 94       	cli
     9a6:	de bf       	out	0x3e, r29	; 62
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	cd bf       	out	0x3d, r28	; 61
     9ac:	98 a3       	lds	r25, 0x58
     9ae:	8f 8f       	std	Y+31, r24	; 0x1f
     9b0:	7a a3       	lds	r23, 0x5a
     9b2:	69 a3       	lds	r22, 0x59
	int tempNum[3];
	char currentString[10];
	char tempString[10];
	strcpy(currentString,newTime);
     9b4:	ce 01       	movw	r24, r28
     9b6:	0b 96       	adiw	r24, 0x0b	; 11
     9b8:	29 a1       	lds	r18, 0x49
     9ba:	3a a1       	lds	r19, 0x4a
     9bc:	b9 01       	movw	r22, r18
     9be:	0e 94 71 19 	call	0x32e2	; 0x32e2 <strcpy>
	for (int j=0; j<3; j++){
     9c2:	1a 82       	std	Y+2, r1	; 0x02
     9c4:	19 82       	std	Y+1, r1	; 0x01
     9c6:	43 c0       	rjmp	.+134    	; 0xa4e <_ZN6myTime7setTimeEPc+0xb6>
		for (int i=0; i<2; i++){
     9c8:	1c 82       	std	Y+4, r1	; 0x04
     9ca:	1b 82       	std	Y+3, r1	; 0x03
     9cc:	20 c0       	rjmp	.+64     	; 0xa0e <_ZN6myTime7setTimeEPc+0x76>
				tempString[i]=currentString[i+j*3];
     9ce:	29 81       	ldd	r18, Y+1	; 0x01
     9d0:	3a 81       	ldd	r19, Y+2	; 0x02
     9d2:	c9 01       	movw	r24, r18
     9d4:	88 0f       	add	r24, r24
     9d6:	99 1f       	adc	r25, r25
     9d8:	28 0f       	add	r18, r24
     9da:	39 1f       	adc	r19, r25
     9dc:	8b 81       	ldd	r24, Y+3	; 0x03
     9de:	9c 81       	ldd	r25, Y+4	; 0x04
     9e0:	82 0f       	add	r24, r18
     9e2:	93 1f       	adc	r25, r19
     9e4:	9e 01       	movw	r18, r28
     9e6:	25 5f       	subi	r18, 0xF5	; 245
     9e8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ea:	82 0f       	add	r24, r18
     9ec:	93 1f       	adc	r25, r19
     9ee:	fc 01       	movw	r30, r24
     9f0:	40 81       	ld	r20, Z
     9f2:	9e 01       	movw	r18, r28
     9f4:	2b 5e       	subi	r18, 0xEB	; 235
     9f6:	3f 4f       	sbci	r19, 0xFF	; 255
     9f8:	8b 81       	ldd	r24, Y+3	; 0x03
     9fa:	9c 81       	ldd	r25, Y+4	; 0x04
     9fc:	82 0f       	add	r24, r18
     9fe:	93 1f       	adc	r25, r19
     a00:	fc 01       	movw	r30, r24
     a02:	40 83       	st	Z, r20
	int tempNum[3];
	char currentString[10];
	char tempString[10];
	strcpy(currentString,newTime);
	for (int j=0; j<3; j++){
		for (int i=0; i<2; i++){
     a04:	8b 81       	ldd	r24, Y+3	; 0x03
     a06:	9c 81       	ldd	r25, Y+4	; 0x04
     a08:	01 96       	adiw	r24, 0x01	; 1
     a0a:	9c 83       	std	Y+4, r25	; 0x04
     a0c:	8b 83       	std	Y+3, r24	; 0x03
     a0e:	21 e0       	ldi	r18, 0x01	; 1
     a10:	8b 81       	ldd	r24, Y+3	; 0x03
     a12:	9c 81       	ldd	r25, Y+4	; 0x04
     a14:	82 30       	cpi	r24, 0x02	; 2
     a16:	91 05       	cpc	r25, r1
     a18:	0c f0       	brlt	.+2      	; 0xa1c <_ZN6myTime7setTimeEPc+0x84>
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	22 23       	and	r18, r18
     a1e:	b9 f6       	brne	.-82     	; 0x9ce <_ZN6myTime7setTimeEPc+0x36>
				tempString[i]=currentString[i+j*3];
		}
		tempNum[j]=atoi(tempString);
     a20:	ce 01       	movw	r24, r28
     a22:	45 96       	adiw	r24, 0x15	; 21
     a24:	0e 94 3f 19 	call	0x327e	; 0x327e <atoi>
     a28:	9c 01       	movw	r18, r24
     a2a:	89 81       	ldd	r24, Y+1	; 0x01
     a2c:	9a 81       	ldd	r25, Y+2	; 0x02
     a2e:	88 0f       	add	r24, r24
     a30:	99 1f       	adc	r25, r25
     a32:	ae 01       	movw	r20, r28
     a34:	4f 5f       	subi	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	84 0f       	add	r24, r20
     a3a:	95 1f       	adc	r25, r21
     a3c:	04 96       	adiw	r24, 0x04	; 4
     a3e:	fc 01       	movw	r30, r24
     a40:	31 83       	std	Z+1, r19	; 0x01
     a42:	20 83       	st	Z, r18
BOOL myTime::setTime(char *newTime){
	int tempNum[3];
	char currentString[10];
	char tempString[10];
	strcpy(currentString,newTime);
	for (int j=0; j<3; j++){
     a44:	89 81       	ldd	r24, Y+1	; 0x01
     a46:	9a 81       	ldd	r25, Y+2	; 0x02
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	9a 83       	std	Y+2, r25	; 0x02
     a4c:	89 83       	std	Y+1, r24	; 0x01
     a4e:	21 e0       	ldi	r18, 0x01	; 1
     a50:	89 81       	ldd	r24, Y+1	; 0x01
     a52:	9a 81       	ldd	r25, Y+2	; 0x02
     a54:	83 30       	cpi	r24, 0x03	; 3
     a56:	91 05       	cpc	r25, r1
     a58:	0c f0       	brlt	.+2      	; 0xa5c <_ZN6myTime7setTimeEPc+0xc4>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	22 23       	and	r18, r18
     a5e:	09 f0       	breq	.+2      	; 0xa62 <_ZN6myTime7setTimeEPc+0xca>
     a60:	b3 cf       	rjmp	.-154    	; 0x9c8 <_ZN6myTime7setTimeEPc+0x30>
		for (int i=0; i<2; i++){
				tempString[i]=currentString[i+j*3];
		}
		tempNum[j]=atoi(tempString);
	}
	if (tempNum[0]/24==0 && tempNum[1]/60==0 && tempNum[2]/60==0){
     a62:	8d 81       	ldd	r24, Y+5	; 0x05
     a64:	9e 81       	ldd	r25, Y+6	; 0x06
     a66:	47 96       	adiw	r24, 0x17	; 23
     a68:	8f 32       	cpi	r24, 0x2F	; 47
     a6a:	91 05       	cpc	r25, r1
     a6c:	c0 f4       	brcc	.+48     	; 0xa9e <_ZN6myTime7setTimeEPc+0x106>
     a6e:	8f 81       	ldd	r24, Y+7	; 0x07
     a70:	98 85       	ldd	r25, Y+8	; 0x08
     a72:	cb 96       	adiw	r24, 0x3b	; 59
     a74:	87 37       	cpi	r24, 0x77	; 119
     a76:	91 05       	cpc	r25, r1
     a78:	90 f4       	brcc	.+36     	; 0xa9e <_ZN6myTime7setTimeEPc+0x106>
     a7a:	89 85       	ldd	r24, Y+9	; 0x09
     a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a7e:	cb 96       	adiw	r24, 0x3b	; 59
     a80:	87 37       	cpi	r24, 0x77	; 119
     a82:	91 05       	cpc	r25, r1
     a84:	60 f4       	brcc	.+24     	; 0xa9e <_ZN6myTime7setTimeEPc+0x106>
		setTime(tempNum[0],tempNum[1],tempNum[2]);
     a86:	6d 81       	ldd	r22, Y+5	; 0x05
     a88:	7e 81       	ldd	r23, Y+6	; 0x06
     a8a:	4f 81       	ldd	r20, Y+7	; 0x07
     a8c:	58 85       	ldd	r21, Y+8	; 0x08
     a8e:	29 85       	ldd	r18, Y+9	; 0x09
     a90:	3a 85       	ldd	r19, Y+10	; 0x0a
     a92:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a94:	98 a1       	lds	r25, 0x48
     a96:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
		return fTrue;
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	01 c0       	rjmp	.+2      	; 0xaa0 <_ZN6myTime7setTimeEPc+0x108>
	} 
	return fFalse;
     a9e:	80 e0       	ldi	r24, 0x00	; 0
}
     aa0:	a2 96       	adiw	r28, 0x22	; 34
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	f8 94       	cli
     aa6:	de bf       	out	0x3e, r29	; 62
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	cd bf       	out	0x3d, r28	; 61
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	08 95       	ret

00000ab2 <_ZN6myTime7setTimeEiii>:

void myTime::setTime(int hour,int minute,int second){
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
     aba:	28 97       	sbiw	r28, 0x08	; 8
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	f8 94       	cli
     ac0:	de bf       	out	0x3e, r29	; 62
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	cd bf       	out	0x3d, r28	; 61
     ac6:	9a 83       	std	Y+2, r25	; 0x02
     ac8:	89 83       	std	Y+1, r24	; 0x01
     aca:	7c 83       	std	Y+4, r23	; 0x04
     acc:	6b 83       	std	Y+3, r22	; 0x03
     ace:	5e 83       	std	Y+6, r21	; 0x06
     ad0:	4d 83       	std	Y+5, r20	; 0x05
     ad2:	38 87       	std	Y+8, r19	; 0x08
     ad4:	2f 83       	std	Y+7, r18	; 0x07
	setHour(hour);
     ad6:	89 81       	ldd	r24, Y+1	; 0x01
     ad8:	9a 81       	ldd	r25, Y+2	; 0x02
     ada:	2b 81       	ldd	r18, Y+3	; 0x03
     adc:	3c 81       	ldd	r19, Y+4	; 0x04
     ade:	b9 01       	movw	r22, r18
     ae0:	0e 94 89 05 	call	0xb12	; 0xb12 <_ZN6myTime7setHourEi>
	setMinute(minute);
     ae4:	89 81       	ldd	r24, Y+1	; 0x01
     ae6:	9a 81       	ldd	r25, Y+2	; 0x02
     ae8:	2d 81       	ldd	r18, Y+5	; 0x05
     aea:	3e 81       	ldd	r19, Y+6	; 0x06
     aec:	b9 01       	movw	r22, r18
     aee:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6myTime9setMinuteEi>
	setSecond(second);
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	9a 81       	ldd	r25, Y+2	; 0x02
     af6:	2f 81       	ldd	r18, Y+7	; 0x07
     af8:	38 85       	ldd	r19, Y+8	; 0x08
     afa:	b9 01       	movw	r22, r18
     afc:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN6myTime9setSecondEi>
}
     b00:	28 96       	adiw	r28, 0x08	; 8
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	de bf       	out	0x3e, r29	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	cd bf       	out	0x3d, r28	; 61
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	08 95       	ret

00000b12 <_ZN6myTime7setHourEi>:

void myTime::setHour(int hour){
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	00 d0       	rcall	.+0      	; 0xb18 <_ZN6myTime7setHourEi+0x6>
     b18:	00 d0       	rcall	.+0      	; 0xb1a <_ZN6myTime7setHourEi+0x8>
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
     b1e:	9a 83       	std	Y+2, r25	; 0x02
     b20:	89 83       	std	Y+1, r24	; 0x01
     b22:	7c 83       	std	Y+4, r23	; 0x04
     b24:	6b 83       	std	Y+3, r22	; 0x03
	if (hour/24 == 0){
     b26:	8b 81       	ldd	r24, Y+3	; 0x03
     b28:	9c 81       	ldd	r25, Y+4	; 0x04
     b2a:	47 96       	adiw	r24, 0x17	; 23
     b2c:	8f 32       	cpi	r24, 0x2F	; 47
     b2e:	91 05       	cpc	r25, r1
     b30:	38 f4       	brcc	.+14     	; 0xb40 <_ZN6myTime7setHourEi+0x2e>
		this->hour = hour;
     b32:	89 81       	ldd	r24, Y+1	; 0x01
     b34:	9a 81       	ldd	r25, Y+2	; 0x02
     b36:	2b 81       	ldd	r18, Y+3	; 0x03
     b38:	3c 81       	ldd	r19, Y+4	; 0x04
     b3a:	fc 01       	movw	r30, r24
     b3c:	30 8f       	std	Z+24, r19	; 0x18
     b3e:	27 8b       	std	Z+23, r18	; 0x17
	}	
}
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	08 95       	ret

00000b4e <_ZN6myTime9setMinuteEi>:

void myTime::setMinute(int minute){
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	00 d0       	rcall	.+0      	; 0xb54 <_ZN6myTime9setMinuteEi+0x6>
     b54:	00 d0       	rcall	.+0      	; 0xb56 <_ZN6myTime9setMinuteEi+0x8>
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
     b5a:	9a 83       	std	Y+2, r25	; 0x02
     b5c:	89 83       	std	Y+1, r24	; 0x01
     b5e:	7c 83       	std	Y+4, r23	; 0x04
     b60:	6b 83       	std	Y+3, r22	; 0x03
	if (minute/60 == 0){
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	9c 81       	ldd	r25, Y+4	; 0x04
     b66:	cb 96       	adiw	r24, 0x3b	; 59
     b68:	87 37       	cpi	r24, 0x77	; 119
     b6a:	91 05       	cpc	r25, r1
     b6c:	38 f4       	brcc	.+14     	; 0xb7c <_ZN6myTime9setMinuteEi+0x2e>
		this->minute = minute;
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	9a 81       	ldd	r25, Y+2	; 0x02
     b72:	2b 81       	ldd	r18, Y+3	; 0x03
     b74:	3c 81       	ldd	r19, Y+4	; 0x04
     b76:	fc 01       	movw	r30, r24
     b78:	32 8f       	std	Z+26, r19	; 0x1a
     b7a:	21 8f       	std	Z+25, r18	; 0x19
	}	
}
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	08 95       	ret

00000b8a <_ZN6myTime9setSecondEi>:

void myTime::setSecond(int second){
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	00 d0       	rcall	.+0      	; 0xb90 <_ZN6myTime9setSecondEi+0x6>
     b90:	00 d0       	rcall	.+0      	; 0xb92 <_ZN6myTime9setSecondEi+0x8>
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	9a 83       	std	Y+2, r25	; 0x02
     b98:	89 83       	std	Y+1, r24	; 0x01
     b9a:	7c 83       	std	Y+4, r23	; 0x04
     b9c:	6b 83       	std	Y+3, r22	; 0x03
	if (second/60 == 0){
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	9c 81       	ldd	r25, Y+4	; 0x04
     ba2:	cb 96       	adiw	r24, 0x3b	; 59
     ba4:	87 37       	cpi	r24, 0x77	; 119
     ba6:	91 05       	cpc	r25, r1
     ba8:	38 f4       	brcc	.+14     	; 0xbb8 <_ZN6myTime9setSecondEi+0x2e>
		this->second = second;
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	9a 81       	ldd	r25, Y+2	; 0x02
     bae:	2b 81       	ldd	r18, Y+3	; 0x03
     bb0:	3c 81       	ldd	r19, Y+4	; 0x04
     bb2:	fc 01       	movw	r30, r24
     bb4:	34 8f       	std	Z+28, r19	; 0x1c
     bb6:	23 8f       	std	Z+27, r18	; 0x1b
	}	
}
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	08 95       	ret

00000bc6 <_ZN6myTime8addHoursEi>:

void myTime::addHours(int hours){
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	28 97       	sbiw	r28, 0x08	; 8
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	de bf       	out	0x3e, r29	; 62
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	cd bf       	out	0x3d, r28	; 61
     bda:	9e 83       	std	Y+6, r25	; 0x06
     bdc:	8d 83       	std	Y+5, r24	; 0x05
     bde:	78 87       	std	Y+8, r23	; 0x08
     be0:	6f 83       	std	Y+7, r22	; 0x07
	volatile int tempHours = hour + hours;
     be2:	8d 81       	ldd	r24, Y+5	; 0x05
     be4:	9e 81       	ldd	r25, Y+6	; 0x06
     be6:	fc 01       	movw	r30, r24
     be8:	27 89       	ldd	r18, Z+23	; 0x17
     bea:	30 8d       	ldd	r19, Z+24	; 0x18
     bec:	8f 81       	ldd	r24, Y+7	; 0x07
     bee:	98 85       	ldd	r25, Y+8	; 0x08
     bf0:	82 0f       	add	r24, r18
     bf2:	93 1f       	adc	r25, r19
     bf4:	9a 83       	std	Y+2, r25	; 0x02
     bf6:	89 83       	std	Y+1, r24	; 0x01
	hour = tempHours%24;
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	9a 81       	ldd	r25, Y+2	; 0x02
     bfc:	28 e1       	ldi	r18, 0x18	; 24
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	b9 01       	movw	r22, r18
     c02:	0e 94 12 19 	call	0x3224	; 0x3224 <__divmodhi4>
     c06:	9c 01       	movw	r18, r24
     c08:	8d 81       	ldd	r24, Y+5	; 0x05
     c0a:	9e 81       	ldd	r25, Y+6	; 0x06
     c0c:	fc 01       	movw	r30, r24
     c0e:	30 8f       	std	Z+24, r19	; 0x18
     c10:	27 8b       	std	Z+23, r18	; 0x17
	if (tempHours/24 >= 1){
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	9a 81       	ldd	r25, Y+2	; 0x02
     c16:	21 e0       	ldi	r18, 0x01	; 1
     c18:	88 31       	cpi	r24, 0x18	; 24
     c1a:	91 05       	cpc	r25, r1
     c1c:	0c f4       	brge	.+2      	; 0xc20 <_ZN6myTime8addHoursEi+0x5a>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	22 23       	and	r18, r18
     c22:	91 f0       	breq	.+36     	; 0xc48 <_ZN6myTime8addHoursEi+0x82>
		volatile int daysToAdd = tempHours/24;
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	9a 81       	ldd	r25, Y+2	; 0x02
     c28:	28 e1       	ldi	r18, 0x18	; 24
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	b9 01       	movw	r22, r18
     c2e:	0e 94 12 19 	call	0x3224	; 0x3224 <__divmodhi4>
     c32:	9b 01       	movw	r18, r22
     c34:	c9 01       	movw	r24, r18
     c36:	9c 83       	std	Y+4, r25	; 0x04
     c38:	8b 83       	std	Y+3, r24	; 0x03
		addDays(daysToAdd);
     c3a:	8d 81       	ldd	r24, Y+5	; 0x05
     c3c:	9e 81       	ldd	r25, Y+6	; 0x06
     c3e:	2b 81       	ldd	r18, Y+3	; 0x03
     c40:	3c 81       	ldd	r19, Y+4	; 0x04
     c42:	b9 01       	movw	r22, r18
     c44:	0e 94 43 02 	call	0x486	; 0x486 <_ZN6myDate7addDaysEi>
	}	
}
     c48:	28 96       	adiw	r28, 0x08	; 8
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	08 95       	ret

00000c5a <_ZN6myTime10addMinutesEi>:

void myTime::addMinutes(int minutes){
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	28 97       	sbiw	r28, 0x08	; 8
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	de bf       	out	0x3e, r29	; 62
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	cd bf       	out	0x3d, r28	; 61
     c6e:	9e 83       	std	Y+6, r25	; 0x06
     c70:	8d 83       	std	Y+5, r24	; 0x05
     c72:	78 87       	std	Y+8, r23	; 0x08
     c74:	6f 83       	std	Y+7, r22	; 0x07
	volatile int tempMinutes = minute + minutes;				//what the minutes were + added minutes
     c76:	8d 81       	ldd	r24, Y+5	; 0x05
     c78:	9e 81       	ldd	r25, Y+6	; 0x06
     c7a:	fc 01       	movw	r30, r24
     c7c:	21 8d       	ldd	r18, Z+25	; 0x19
     c7e:	32 8d       	ldd	r19, Z+26	; 0x1a
     c80:	8f 81       	ldd	r24, Y+7	; 0x07
     c82:	98 85       	ldd	r25, Y+8	; 0x08
     c84:	82 0f       	add	r24, r18
     c86:	93 1f       	adc	r25, r19
     c88:	9a 83       	std	Y+2, r25	; 0x02
     c8a:	89 83       	std	Y+1, r24	; 0x01
	minute = tempMinutes%60;
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	9a 81       	ldd	r25, Y+2	; 0x02
     c90:	2c e3       	ldi	r18, 0x3C	; 60
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	b9 01       	movw	r22, r18
     c96:	0e 94 12 19 	call	0x3224	; 0x3224 <__divmodhi4>
     c9a:	9c 01       	movw	r18, r24
     c9c:	8d 81       	ldd	r24, Y+5	; 0x05
     c9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ca0:	fc 01       	movw	r30, r24
     ca2:	32 8f       	std	Z+26, r19	; 0x1a
     ca4:	21 8f       	std	Z+25, r18	; 0x19
	if (tempMinutes/60 >= 1){
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	9a 81       	ldd	r25, Y+2	; 0x02
     caa:	21 e0       	ldi	r18, 0x01	; 1
     cac:	8c 33       	cpi	r24, 0x3C	; 60
     cae:	91 05       	cpc	r25, r1
     cb0:	0c f4       	brge	.+2      	; 0xcb4 <_ZN6myTime10addMinutesEi+0x5a>
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	22 23       	and	r18, r18
     cb6:	91 f0       	breq	.+36     	; 0xcdc <_ZN6myTime10addMinutesEi+0x82>
		volatile int hoursToAdd = tempMinutes/60;
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	9a 81       	ldd	r25, Y+2	; 0x02
     cbc:	2c e3       	ldi	r18, 0x3C	; 60
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	b9 01       	movw	r22, r18
     cc2:	0e 94 12 19 	call	0x3224	; 0x3224 <__divmodhi4>
     cc6:	9b 01       	movw	r18, r22
     cc8:	c9 01       	movw	r24, r18
     cca:	9c 83       	std	Y+4, r25	; 0x04
     ccc:	8b 83       	std	Y+3, r24	; 0x03
		addHours(hoursToAdd);
     cce:	2b 81       	ldd	r18, Y+3	; 0x03
     cd0:	3c 81       	ldd	r19, Y+4	; 0x04
     cd2:	8d 81       	ldd	r24, Y+5	; 0x05
     cd4:	9e 81       	ldd	r25, Y+6	; 0x06
     cd6:	b9 01       	movw	r22, r18
     cd8:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <_ZN6myTime8addHoursEi>
	}
}
     cdc:	28 96       	adiw	r28, 0x08	; 8
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	08 95       	ret

00000cee <_ZN6myTime10addSecondsEi>:

void myTime::addSeconds(int seconds){
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	28 97       	sbiw	r28, 0x08	; 8
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	9e 83       	std	Y+6, r25	; 0x06
     d04:	8d 83       	std	Y+5, r24	; 0x05
     d06:	78 87       	std	Y+8, r23	; 0x08
     d08:	6f 83       	std	Y+7, r22	; 0x07
	volatile int tempSecond = second + seconds;
     d0a:	8d 81       	ldd	r24, Y+5	; 0x05
     d0c:	9e 81       	ldd	r25, Y+6	; 0x06
     d0e:	fc 01       	movw	r30, r24
     d10:	23 8d       	ldd	r18, Z+27	; 0x1b
     d12:	34 8d       	ldd	r19, Z+28	; 0x1c
     d14:	8f 81       	ldd	r24, Y+7	; 0x07
     d16:	98 85       	ldd	r25, Y+8	; 0x08
     d18:	82 0f       	add	r24, r18
     d1a:	93 1f       	adc	r25, r19
     d1c:	9a 83       	std	Y+2, r25	; 0x02
     d1e:	89 83       	std	Y+1, r24	; 0x01
	second = (tempSecond)%60;			  //what's left over
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	9a 81       	ldd	r25, Y+2	; 0x02
     d24:	2c e3       	ldi	r18, 0x3C	; 60
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	b9 01       	movw	r22, r18
     d2a:	0e 94 12 19 	call	0x3224	; 0x3224 <__divmodhi4>
     d2e:	9c 01       	movw	r18, r24
     d30:	8d 81       	ldd	r24, Y+5	; 0x05
     d32:	9e 81       	ldd	r25, Y+6	; 0x06
     d34:	fc 01       	movw	r30, r24
     d36:	34 8f       	std	Z+28, r19	; 0x1c
     d38:	23 8f       	std	Z+27, r18	; 0x1b
	if ((tempSecond)/60 >= 1){
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	9a 81       	ldd	r25, Y+2	; 0x02
     d3e:	21 e0       	ldi	r18, 0x01	; 1
     d40:	8c 33       	cpi	r24, 0x3C	; 60
     d42:	91 05       	cpc	r25, r1
     d44:	0c f4       	brge	.+2      	; 0xd48 <_ZN6myTime10addSecondsEi+0x5a>
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	22 23       	and	r18, r18
     d4a:	91 f0       	breq	.+36     	; 0xd70 <_ZN6myTime10addSecondsEi+0x82>
		//There are more than 60 seconds now, find out how many minutes need to be added
		volatile int minutesToAdd = (tempSecond)/60;		  //if seconds = 120, adds two minutes
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	9a 81       	ldd	r25, Y+2	; 0x02
     d50:	2c e3       	ldi	r18, 0x3C	; 60
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	b9 01       	movw	r22, r18
     d56:	0e 94 12 19 	call	0x3224	; 0x3224 <__divmodhi4>
     d5a:	9b 01       	movw	r18, r22
     d5c:	c9 01       	movw	r24, r18
     d5e:	9c 83       	std	Y+4, r25	; 0x04
     d60:	8b 83       	std	Y+3, r24	; 0x03
		addMinutes(minutesToAdd);					  //add to minutes
     d62:	2b 81       	ldd	r18, Y+3	; 0x03
     d64:	3c 81       	ldd	r19, Y+4	; 0x04
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	b9 01       	movw	r22, r18
     d6c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <_ZN6myTime10addMinutesEi>
	}
}
     d70:	28 96       	adiw	r28, 0x08	; 8
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	08 95       	ret

00000d82 <_ZN6myTime13checkValidityEv>:

BOOL myTime::checkValidity(){
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	00 d0       	rcall	.+0      	; 0xd88 <_ZN6myTime13checkValidityEv+0x6>
     d88:	0f 92       	push	r0
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	9b 83       	std	Y+3, r25	; 0x03
     d90:	8a 83       	std	Y+2, r24	; 0x02
	BOOL stillValid=fTrue;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	89 83       	std	Y+1, r24	; 0x01
	if (second/60==0 && minute/60==0 && hour/24==0){
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	9b 81       	ldd	r25, Y+3	; 0x03
     d9a:	fc 01       	movw	r30, r24
     d9c:	83 8d       	ldd	r24, Z+27	; 0x1b
     d9e:	94 8d       	ldd	r25, Z+28	; 0x1c
     da0:	cb 96       	adiw	r24, 0x3b	; 59
     da2:	87 37       	cpi	r24, 0x77	; 119
     da4:	91 05       	cpc	r25, r1
     da6:	a0 f4       	brcc	.+40     	; 0xdd0 <_ZN6myTime13checkValidityEv+0x4e>
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	9b 81       	ldd	r25, Y+3	; 0x03
     dac:	fc 01       	movw	r30, r24
     dae:	81 8d       	ldd	r24, Z+25	; 0x19
     db0:	92 8d       	ldd	r25, Z+26	; 0x1a
     db2:	cb 96       	adiw	r24, 0x3b	; 59
     db4:	87 37       	cpi	r24, 0x77	; 119
     db6:	91 05       	cpc	r25, r1
     db8:	58 f4       	brcc	.+22     	; 0xdd0 <_ZN6myTime13checkValidityEv+0x4e>
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	9b 81       	ldd	r25, Y+3	; 0x03
     dbe:	fc 01       	movw	r30, r24
     dc0:	87 89       	ldd	r24, Z+23	; 0x17
     dc2:	90 8d       	ldd	r25, Z+24	; 0x18
     dc4:	47 96       	adiw	r24, 0x17	; 23
     dc6:	8f 32       	cpi	r24, 0x2F	; 47
     dc8:	91 05       	cpc	r25, r1
     dca:	10 f4       	brcc	.+4      	; 0xdd0 <_ZN6myTime13checkValidityEv+0x4e>
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	01 c0       	rjmp	.+2      	; 0xdd2 <_ZN6myTime13checkValidityEv+0x50>
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	88 23       	and	r24, r24
     dd4:	69 f0       	breq	.+26     	; 0xdf0 <_ZN6myTime13checkValidityEv+0x6e>
		if (checkValidityDate()){return fTrue;}
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
     dd8:	9b 81       	ldd	r25, Y+3	; 0x03
     dda:	0e 94 02 03 	call	0x604	; 0x604 <_ZN6myDate17checkValidityDateEv>
     dde:	98 2f       	mov	r25, r24
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	99 23       	and	r25, r25
     de4:	09 f4       	brne	.+2      	; 0xde8 <_ZN6myTime13checkValidityEv+0x66>
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	88 23       	and	r24, r24
     dea:	11 f0       	breq	.+4      	; 0xdf0 <_ZN6myTime13checkValidityEv+0x6e>
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	01 c0       	rjmp	.+2      	; 0xdf2 <_ZN6myTime13checkValidityEv+0x70>
	}
	return fFalse;
     df0:	80 e0       	ldi	r24, 0x00	; 0
}
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	08 95       	ret

00000dfe <_ZN6myTime7getTimeEv>:

const char * myTime::getTime(){
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	2b 97       	sbiw	r28, 0x0b	; 11
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	9b 87       	std	Y+11, r25	; 0x0b
     e14:	8a 87       	std	Y+10, r24	; 0x0a
	char hourString[3], minuteString[3],secondString[3];
	itoa(hour,hourString,10);
     e16:	8a 85       	ldd	r24, Y+10	; 0x0a
     e18:	9b 85       	ldd	r25, Y+11	; 0x0b
     e1a:	fc 01       	movw	r30, r24
     e1c:	87 89       	ldd	r24, Z+23	; 0x17
     e1e:	90 8d       	ldd	r25, Z+24	; 0x18
     e20:	9e 01       	movw	r18, r28
     e22:	2f 5f       	subi	r18, 0xFF	; 255
     e24:	3f 4f       	sbci	r19, 0xFF	; 255
     e26:	b9 01       	movw	r22, r18
     e28:	4a e0       	ldi	r20, 0x0A	; 10
     e2a:	50 e0       	ldi	r21, 0x00	; 0
     e2c:	0e 94 86 19 	call	0x330c	; 0x330c <itoa>
	itoa(minute,minuteString,10);
     e30:	8a 85       	ldd	r24, Y+10	; 0x0a
     e32:	9b 85       	ldd	r25, Y+11	; 0x0b
     e34:	fc 01       	movw	r30, r24
     e36:	81 8d       	ldd	r24, Z+25	; 0x19
     e38:	92 8d       	ldd	r25, Z+26	; 0x1a
     e3a:	9e 01       	movw	r18, r28
     e3c:	2c 5f       	subi	r18, 0xFC	; 252
     e3e:	3f 4f       	sbci	r19, 0xFF	; 255
     e40:	b9 01       	movw	r22, r18
     e42:	4a e0       	ldi	r20, 0x0A	; 10
     e44:	50 e0       	ldi	r21, 0x00	; 0
     e46:	0e 94 86 19 	call	0x330c	; 0x330c <itoa>
	itoa(second,secondString,10);
     e4a:	8a 85       	ldd	r24, Y+10	; 0x0a
     e4c:	9b 85       	ldd	r25, Y+11	; 0x0b
     e4e:	fc 01       	movw	r30, r24
     e50:	83 8d       	ldd	r24, Z+27	; 0x1b
     e52:	94 8d       	ldd	r25, Z+28	; 0x1c
     e54:	9e 01       	movw	r18, r28
     e56:	29 5f       	subi	r18, 0xF9	; 249
     e58:	3f 4f       	sbci	r19, 0xFF	; 255
     e5a:	b9 01       	movw	r22, r18
     e5c:	4a e0       	ldi	r20, 0x0A	; 10
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	0e 94 86 19 	call	0x330c	; 0x330c <itoa>
	strcpy(timeString,hourString);
     e64:	8a 85       	ldd	r24, Y+10	; 0x0a
     e66:	9b 85       	ldd	r25, Y+11	; 0x0b
     e68:	4d 96       	adiw	r24, 0x1d	; 29
     e6a:	9e 01       	movw	r18, r28
     e6c:	2f 5f       	subi	r18, 0xFF	; 255
     e6e:	3f 4f       	sbci	r19, 0xFF	; 255
     e70:	b9 01       	movw	r22, r18
     e72:	0e 94 71 19 	call	0x32e2	; 0x32e2 <strcpy>
	strcat(timeString,":");
     e76:	8a 85       	ldd	r24, Y+10	; 0x0a
     e78:	9b 85       	ldd	r25, Y+11	; 0x0b
     e7a:	9c 01       	movw	r18, r24
     e7c:	23 5e       	subi	r18, 0xE3	; 227
     e7e:	3f 4f       	sbci	r19, 0xFF	; 255
     e80:	c9 01       	movw	r24, r18
     e82:	ac 01       	movw	r20, r24
     e84:	fa 01       	movw	r30, r20
     e86:	01 90       	ld	r0, Z+
     e88:	00 20       	and	r0, r0
     e8a:	e9 f7       	brne	.-6      	; 0xe86 <_ZN6myTime7getTimeEv+0x88>
     e8c:	cf 01       	movw	r24, r30
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	84 1b       	sub	r24, r20
     e92:	95 0b       	sbc	r25, r21
     e94:	82 0f       	add	r24, r18
     e96:	93 1f       	adc	r25, r19
     e98:	2a e3       	ldi	r18, 0x3A	; 58
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	fc 01       	movw	r30, r24
     e9e:	31 83       	std	Z+1, r19	; 0x01
     ea0:	20 83       	st	Z, r18
	strcat(timeString,minuteString);
     ea2:	8a 85       	ldd	r24, Y+10	; 0x0a
     ea4:	9b 85       	ldd	r25, Y+11	; 0x0b
     ea6:	4d 96       	adiw	r24, 0x1d	; 29
     ea8:	9e 01       	movw	r18, r28
     eaa:	2c 5f       	subi	r18, 0xFC	; 252
     eac:	3f 4f       	sbci	r19, 0xFF	; 255
     eae:	b9 01       	movw	r22, r18
     eb0:	0e 94 5d 19 	call	0x32ba	; 0x32ba <strcat>
	strcat(timeString,":");
     eb4:	8a 85       	ldd	r24, Y+10	; 0x0a
     eb6:	9b 85       	ldd	r25, Y+11	; 0x0b
     eb8:	9c 01       	movw	r18, r24
     eba:	23 5e       	subi	r18, 0xE3	; 227
     ebc:	3f 4f       	sbci	r19, 0xFF	; 255
     ebe:	c9 01       	movw	r24, r18
     ec0:	ac 01       	movw	r20, r24
     ec2:	fa 01       	movw	r30, r20
     ec4:	01 90       	ld	r0, Z+
     ec6:	00 20       	and	r0, r0
     ec8:	e9 f7       	brne	.-6      	; 0xec4 <_ZN6myTime7getTimeEv+0xc6>
     eca:	cf 01       	movw	r24, r30
     ecc:	01 97       	sbiw	r24, 0x01	; 1
     ece:	84 1b       	sub	r24, r20
     ed0:	95 0b       	sbc	r25, r21
     ed2:	82 0f       	add	r24, r18
     ed4:	93 1f       	adc	r25, r19
     ed6:	2a e3       	ldi	r18, 0x3A	; 58
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	fc 01       	movw	r30, r24
     edc:	31 83       	std	Z+1, r19	; 0x01
     ede:	20 83       	st	Z, r18
	strcat(timeString,secondString);
     ee0:	8a 85       	ldd	r24, Y+10	; 0x0a
     ee2:	9b 85       	ldd	r25, Y+11	; 0x0b
     ee4:	4d 96       	adiw	r24, 0x1d	; 29
     ee6:	9e 01       	movw	r18, r28
     ee8:	29 5f       	subi	r18, 0xF9	; 249
     eea:	3f 4f       	sbci	r19, 0xFF	; 255
     eec:	b9 01       	movw	r22, r18
     eee:	0e 94 5d 19 	call	0x32ba	; 0x32ba <strcat>
	timeString[10] = ' ';
     ef2:	8a 85       	ldd	r24, Y+10	; 0x0a
     ef4:	9b 85       	ldd	r25, Y+11	; 0x0b
     ef6:	20 e2       	ldi	r18, 0x20	; 32
     ef8:	fc 01       	movw	r30, r24
     efa:	27 a3       	lds	r18, 0x57
	timeString[11] = '\0';
     efc:	8a 85       	ldd	r24, Y+10	; 0x0a
     efe:	9b 85       	ldd	r25, Y+11	; 0x0b
     f00:	fc 01       	movw	r30, r24
     f02:	10 a6       	lds	r17, 0xb0
	return timeString;
     f04:	8a 85       	ldd	r24, Y+10	; 0x0a
     f06:	9b 85       	ldd	r25, Y+11	; 0x0b
     f08:	4d 96       	adiw	r24, 0x1d	; 29
     f0a:	2b 96       	adiw	r28, 0x0b	; 11
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	08 95       	ret

00000f1c <_Z18getDateTime_eepromhh>:
BYTE EEMEM eeDay = 10;
WORD EEMEM eeYear = 2013;


/*************************************************************************************************************/
void getDateTime_eeprom(BOOL gTime, BOOL gDate){			//get date and time from EEPROM
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	2f 97       	sbiw	r28, 0x0f	; 15
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	8e 87       	std	Y+14, r24	; 0x0e
     f32:	6f 87       	std	Y+15, r22	; 0x0f
	cli();
     f34:	f8 94       	cli
	if (gTime){
     f36:	8e 85       	ldd	r24, Y+14	; 0x0e
     f38:	88 23       	and	r24, r24
     f3a:	09 f4       	brne	.+2      	; 0xf3e <_Z18getDateTime_eepromhh+0x22>
     f3c:	4b c0       	rjmp	.+150    	; 0xfd4 <_Z18getDateTime_eepromhh+0xb8>
		BYTE tempMin, tempSec, tempHour;
		int times=0;
     f3e:	1a 82       	std	Y+2, r1	; 0x02
     f40:	19 82       	std	Y+1, r1	; 0x01
		BOOL notGood=fTrue;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	8b 83       	std	Y+3, r24	; 0x03
		while(notGood && times<3){
     f46:	2c c0       	rjmp	.+88     	; 0xfa0 <_Z18getDateTime_eepromhh+0x84>
			tempSec = eeprom_read_byte(&eeSecond);
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 c5 19 	call	0x338a	; 0x338a <__eerd_byte_m644pa>
     f50:	8f 83       	std	Y+7, r24	; 0x07
			tempMin = eeprom_read_byte(&eeMinute);
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 c5 19 	call	0x338a	; 0x338a <__eerd_byte_m644pa>
     f5a:	88 87       	std	Y+8, r24	; 0x08
			tempHour = eeprom_read_byte(&eeHour);
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	0e 94 c5 19 	call	0x338a	; 0x338a <__eerd_byte_m644pa>
     f64:	89 87       	std	Y+9, r24	; 0x09
			if (tempSec/60==0 && tempMin/60==0 && tempHour/24==0){currentTime.setTime((int)tempHour,(int)tempMin,(int)tempSec); notGood=fFalse;}
     f66:	8f 81       	ldd	r24, Y+7	; 0x07
     f68:	8c 33       	cpi	r24, 0x3C	; 60
     f6a:	a8 f4       	brcc	.+42     	; 0xf96 <_Z18getDateTime_eepromhh+0x7a>
     f6c:	88 85       	ldd	r24, Y+8	; 0x08
     f6e:	8c 33       	cpi	r24, 0x3C	; 60
     f70:	90 f4       	brcc	.+36     	; 0xf96 <_Z18getDateTime_eepromhh+0x7a>
     f72:	89 85       	ldd	r24, Y+9	; 0x09
     f74:	88 31       	cpi	r24, 0x18	; 24
     f76:	78 f4       	brcc	.+30     	; 0xf96 <_Z18getDateTime_eepromhh+0x7a>
     f78:	89 85       	ldd	r24, Y+9	; 0x09
     f7a:	68 2f       	mov	r22, r24
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	88 85       	ldd	r24, Y+8	; 0x08
     f80:	48 2f       	mov	r20, r24
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	8f 81       	ldd	r24, Y+7	; 0x07
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	8a e8       	ldi	r24, 0x8A	; 138
     f8c:	91 e0       	ldi	r25, 0x01	; 1
     f8e:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
     f92:	1b 82       	std	Y+3, r1	; 0x03
     f94:	05 c0       	rjmp	.+10     	; 0xfa0 <_Z18getDateTime_eepromhh+0x84>
			else {times++;}
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	9a 81       	ldd	r25, Y+2	; 0x02
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	9a 83       	std	Y+2, r25	; 0x02
     f9e:	89 83       	std	Y+1, r24	; 0x01
	cli();
	if (gTime){
		BYTE tempMin, tempSec, tempHour;
		int times=0;
		BOOL notGood=fTrue;
		while(notGood && times<3){
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	88 23       	and	r24, r24
     fa4:	39 f0       	breq	.+14     	; 0xfb4 <_Z18getDateTime_eepromhh+0x98>
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
     faa:	83 30       	cpi	r24, 0x03	; 3
     fac:	91 05       	cpc	r25, r1
     fae:	14 f4       	brge	.+4      	; 0xfb4 <_Z18getDateTime_eepromhh+0x98>
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	01 c0       	rjmp	.+2      	; 0xfb6 <_Z18getDateTime_eepromhh+0x9a>
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	88 23       	and	r24, r24
     fb8:	39 f6       	brne	.-114    	; 0xf48 <_Z18getDateTime_eepromhh+0x2c>
			tempMin = eeprom_read_byte(&eeMinute);
			tempHour = eeprom_read_byte(&eeHour);
			if (tempSec/60==0 && tempMin/60==0 && tempHour/24==0){currentTime.setTime((int)tempHour,(int)tempMin,(int)tempSec); notGood=fFalse;}
			else {times++;}
		}
		if (notGood){currentTime.setTime(1,1,1);}
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	88 23       	and	r24, r24
     fbe:	51 f0       	breq	.+20     	; 0xfd4 <_Z18getDateTime_eepromhh+0xb8>
     fc0:	8a e8       	ldi	r24, 0x8A	; 138
     fc2:	91 e0       	ldi	r25, 0x01	; 1
     fc4:	61 e0       	ldi	r22, 0x01	; 1
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	41 e0       	ldi	r20, 0x01	; 1
     fca:	50 e0       	ldi	r21, 0x00	; 0
     fcc:	21 e0       	ldi	r18, 0x01	; 1
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
	}		
	if (gDate){
     fd4:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd6:	88 23       	and	r24, r24
     fd8:	09 f4       	brne	.+2      	; 0xfdc <_Z18getDateTime_eepromhh+0xc0>
     fda:	4e c0       	rjmp	.+156    	; 0x1078 <_Z18getDateTime_eepromhh+0x15c>
		BYTE tempDay,tempMonth;
		WORD tempYear;
		int times=0;
     fdc:	1d 82       	std	Y+5, r1	; 0x05
     fde:	1c 82       	std	Y+4, r1	; 0x04
		BOOL notGood=fTrue;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	8e 83       	std	Y+6, r24	; 0x06
		while (notGood && times<3){
     fe4:	2f c0       	rjmp	.+94     	; 0x1044 <_Z18getDateTime_eepromhh+0x128>
			tempDay = eeprom_read_byte(&eeDay);
     fe6:	84 e0       	ldi	r24, 0x04	; 4
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	0e 94 c5 19 	call	0x338a	; 0x338a <__eerd_byte_m644pa>
     fee:	8a 87       	std	Y+10, r24	; 0x0a
			tempMonth = eeprom_read_byte(&eeMonth);
     ff0:	83 e0       	ldi	r24, 0x03	; 3
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 c5 19 	call	0x338a	; 0x338a <__eerd_byte_m644pa>
     ff8:	8b 87       	std	Y+11, r24	; 0x0b
			tempYear = eeprom_read_word(&eeYear);
     ffa:	85 e0       	ldi	r24, 0x05	; 5
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	0e 94 cd 19 	call	0x339a	; 0x339a <__eerd_word_m644pa>
    1002:	9d 87       	std	Y+13, r25	; 0x0d
    1004:	8c 87       	std	Y+12, r24	; 0x0c
			if (tempDay/31==0 && tempMonth/13==0 && tempYear/10000==0){currentTime.setDate((int)tempMonth,(int)tempDay,(int)tempYear); notGood=fFalse;}
    1006:	8a 85       	ldd	r24, Y+10	; 0x0a
    1008:	8f 31       	cpi	r24, 0x1F	; 31
    100a:	b8 f4       	brcc	.+46     	; 0x103a <_Z18getDateTime_eepromhh+0x11e>
    100c:	8b 85       	ldd	r24, Y+11	; 0x0b
    100e:	8d 30       	cpi	r24, 0x0D	; 13
    1010:	a0 f4       	brcc	.+40     	; 0x103a <_Z18getDateTime_eepromhh+0x11e>
    1012:	8c 85       	ldd	r24, Y+12	; 0x0c
    1014:	9d 85       	ldd	r25, Y+13	; 0x0d
    1016:	27 e2       	ldi	r18, 0x27	; 39
    1018:	80 31       	cpi	r24, 0x10	; 16
    101a:	92 07       	cpc	r25, r18
    101c:	70 f4       	brcc	.+28     	; 0x103a <_Z18getDateTime_eepromhh+0x11e>
    101e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1020:	68 2f       	mov	r22, r24
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	8a 85       	ldd	r24, Y+10	; 0x0a
    1026:	48 2f       	mov	r20, r24
    1028:	50 e0       	ldi	r21, 0x00	; 0
    102a:	2c 85       	ldd	r18, Y+12	; 0x0c
    102c:	3d 85       	ldd	r19, Y+13	; 0x0d
    102e:	8a e8       	ldi	r24, 0x8A	; 138
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	0e 94 84 01 	call	0x308	; 0x308 <_ZN6myDate7setDateEiii>
    1036:	1e 82       	std	Y+6, r1	; 0x06
    1038:	05 c0       	rjmp	.+10     	; 0x1044 <_Z18getDateTime_eepromhh+0x128>
			else {times++;}
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
    103c:	9d 81       	ldd	r25, Y+5	; 0x05
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	9d 83       	std	Y+5, r25	; 0x05
    1042:	8c 83       	std	Y+4, r24	; 0x04
	if (gDate){
		BYTE tempDay,tempMonth;
		WORD tempYear;
		int times=0;
		BOOL notGood=fTrue;
		while (notGood && times<3){
    1044:	8e 81       	ldd	r24, Y+6	; 0x06
    1046:	88 23       	and	r24, r24
    1048:	39 f0       	breq	.+14     	; 0x1058 <_Z18getDateTime_eepromhh+0x13c>
    104a:	8c 81       	ldd	r24, Y+4	; 0x04
    104c:	9d 81       	ldd	r25, Y+5	; 0x05
    104e:	83 30       	cpi	r24, 0x03	; 3
    1050:	91 05       	cpc	r25, r1
    1052:	14 f4       	brge	.+4      	; 0x1058 <_Z18getDateTime_eepromhh+0x13c>
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	01 c0       	rjmp	.+2      	; 0x105a <_Z18getDateTime_eepromhh+0x13e>
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	88 23       	and	r24, r24
    105c:	21 f6       	brne	.-120    	; 0xfe6 <_Z18getDateTime_eepromhh+0xca>
			tempMonth = eeprom_read_byte(&eeMonth);
			tempYear = eeprom_read_word(&eeYear);
			if (tempDay/31==0 && tempMonth/13==0 && tempYear/10000==0){currentTime.setDate((int)tempMonth,(int)tempDay,(int)tempYear); notGood=fFalse;}
			else {times++;}
		}
		if (notGood){currentTime.setDate(1,1,2001);}	
    105e:	8e 81       	ldd	r24, Y+6	; 0x06
    1060:	88 23       	and	r24, r24
    1062:	51 f0       	breq	.+20     	; 0x1078 <_Z18getDateTime_eepromhh+0x15c>
    1064:	8a e8       	ldi	r24, 0x8A	; 138
    1066:	91 e0       	ldi	r25, 0x01	; 1
    1068:	61 e0       	ldi	r22, 0x01	; 1
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	41 e0       	ldi	r20, 0x01	; 1
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	21 ed       	ldi	r18, 0xD1	; 209
    1072:	37 e0       	ldi	r19, 0x07	; 7
    1074:	0e 94 84 01 	call	0x308	; 0x308 <_ZN6myDate7setDateEiii>
	}
	sei();
    1078:	78 94       	sei
}
    107a:	2f 96       	adiw	r28, 0x0f	; 15
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	de bf       	out	0x3e, r29	; 62
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	cd bf       	out	0x3d, r28	; 61
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	08 95       	ret

0000108c <_Z19saveDateTime_eepromhh>:
/*************************************************************************************************************/

void saveDateTime_eeprom(BOOL sTime, BOOL sDate){
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	29 97       	sbiw	r28, 0x09	; 9
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	88 87       	std	Y+8, r24	; 0x08
    10a2:	69 87       	std	Y+9, r22	; 0x09
	cli();
    10a4:	f8 94       	cli
	if (sTime){
    10a6:	88 85       	ldd	r24, Y+8	; 0x08
    10a8:	88 23       	and	r24, r24
    10aa:	f1 f0       	breq	.+60     	; 0x10e8 <_Z19saveDateTime_eepromhh+0x5c>
		BYTE tempSec,tempMin,tempHour;
		tempHour = currentTime.getHours();
    10ac:	8a e8       	ldi	r24, 0x8A	; 138
    10ae:	91 e0       	ldi	r25, 0x01	; 1
    10b0:	0e 94 bb 04 	call	0x976	; 0x976 <_ZN6myTime8getHoursEv>
    10b4:	89 83       	std	Y+1, r24	; 0x01
		tempMin = currentTime.getMinutes();
    10b6:	8a e8       	ldi	r24, 0x8A	; 138
    10b8:	91 e0       	ldi	r25, 0x01	; 1
    10ba:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6myTime10getMinutesEv>
    10be:	8a 83       	std	Y+2, r24	; 0x02
		tempSec = currentTime.getSeconds();
    10c0:	8a e8       	ldi	r24, 0x8A	; 138
    10c2:	91 e0       	ldi	r25, 0x01	; 1
    10c4:	0e 94 99 04 	call	0x932	; 0x932 <_ZN6myTime10getSecondsEv>
    10c8:	8b 83       	std	Y+3, r24	; 0x03
		eeprom_write_byte(&eeSecond,tempSec);
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	6b 81       	ldd	r22, Y+3	; 0x03
    10d0:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <__eewr_byte_m644pa>
		eeprom_write_byte(&eeMinute,tempMin);
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	6a 81       	ldd	r22, Y+2	; 0x02
    10da:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <__eewr_byte_m644pa>
		eeprom_write_byte(&eeHour,tempHour);
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	69 81       	ldd	r22, Y+1	; 0x01
    10e4:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <__eewr_byte_m644pa>
	}
	if (sDate){
    10e8:	89 85       	ldd	r24, Y+9	; 0x09
    10ea:	88 23       	and	r24, r24
    10ec:	09 f1       	breq	.+66     	; 0x1130 <__stack+0x31>
		BYTE tempDay,tempMonth;
		WORD tempYear;
		tempYear = currentTime.getYears();
    10ee:	8a e8       	ldi	r24, 0x8A	; 138
    10f0:	91 e0       	ldi	r25, 0x01	; 1
    10f2:	0e 94 ba 00 	call	0x174	; 0x174 <_ZN6myDate8getYearsEv>
    10f6:	9d 83       	std	Y+5, r25	; 0x05
    10f8:	8c 83       	std	Y+4, r24	; 0x04
		tempMonth = currentTime.getMonths();
    10fa:	8a e8       	ldi	r24, 0x8A	; 138
    10fc:	91 e0       	ldi	r25, 0x01	; 1
    10fe:	0e 94 a9 00 	call	0x152	; 0x152 <_ZN6myDate9getMonthsEv>
    1102:	8e 83       	std	Y+6, r24	; 0x06
		tempDay = currentTime.getDays();
    1104:	8a e8       	ldi	r24, 0x8A	; 138
    1106:	91 e0       	ldi	r25, 0x01	; 1
    1108:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN6myDate7getDaysEv>
    110c:	8f 83       	std	Y+7, r24	; 0x07
		eeprom_write_word(&eeYear,tempYear);
    110e:	85 e0       	ldi	r24, 0x05	; 5
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	2c 81       	ldd	r18, Y+4	; 0x04
    1114:	3d 81       	ldd	r19, Y+5	; 0x05
    1116:	b9 01       	movw	r22, r18
    1118:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__eewr_word_m644pa>
		eeprom_write_byte(&eeMonth,tempMonth);
    111c:	83 e0       	ldi	r24, 0x03	; 3
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	6e 81       	ldd	r22, Y+6	; 0x06
    1122:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <__eewr_byte_m644pa>
		eeprom_write_byte(&eeDay,tempDay);
    1126:	84 e0       	ldi	r24, 0x04	; 4
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	6f 81       	ldd	r22, Y+7	; 0x07
    112c:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <__eewr_byte_m644pa>
	}
	sei();
    1130:	78 94       	sei
}
    1132:	29 96       	adiw	r28, 0x09	; 9
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	08 95       	ret

00001144 <_Z13PutUartChBonec>:
extern BOOL flagReceivingBone, flagFreshStart, restart, flagReceivingGAVR,flagWaitingForReceiveGAVR;
extern WORD globalADC, globalTemp;
extern myTime currentTime;

/**************************************************************************************************************/
void PutUartChBone(char ch){
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	0f 92       	push	r0
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSR0A & (1 << UDRE0)));
    1150:	00 00       	nop
    1152:	80 ec       	ldi	r24, 0xC0	; 192
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	fc 01       	movw	r30, r24
    1158:	80 81       	ld	r24, Z
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	80 72       	andi	r24, 0x20	; 32
    1160:	90 70       	andi	r25, 0x00	; 0
    1162:	21 e0       	ldi	r18, 0x01	; 1
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	09 f0       	breq	.+2      	; 0x116a <_Z13PutUartChBonec+0x26>
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	22 23       	and	r18, r18
    116c:	91 f7       	brne	.-28     	; 0x1152 <_Z13PutUartChBonec+0xe>
	UDR0=ch;
    116e:	86 ec       	ldi	r24, 0xC6	; 198
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	29 81       	ldd	r18, Y+1	; 0x01
    1174:	fc 01       	movw	r30, r24
    1176:	20 83       	st	Z, r18
}
    1178:	0f 90       	pop	r0
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	08 95       	ret

00001180 <_Z9PrintBonePc>:
/*************************************************************************************************************/
void PrintBone(char string[]){
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	00 d0       	rcall	.+0      	; 0x1186 <_Z9PrintBonePc+0x6>
    1186:	0f 92       	push	r0
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	9b 83       	std	Y+3, r25	; 0x03
    118e:	8a 83       	std	Y+2, r24	; 0x02
	BYTE i=0;
    1190:	19 82       	std	Y+1, r1	; 0x01
	
	while (string[i]){
    1192:	0e c0       	rjmp	.+28     	; 0x11b0 <_Z9PrintBonePc+0x30>
		PutUartChBone(string[i++]);
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	88 2f       	mov	r24, r24
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	2a 81       	ldd	r18, Y+2	; 0x02
    119c:	3b 81       	ldd	r19, Y+3	; 0x03
    119e:	82 0f       	add	r24, r18
    11a0:	93 1f       	adc	r25, r19
    11a2:	fc 01       	movw	r30, r24
    11a4:	80 81       	ld	r24, Z
    11a6:	99 81       	ldd	r25, Y+1	; 0x01
    11a8:	9f 5f       	subi	r25, 0xFF	; 255
    11aa:	99 83       	std	Y+1, r25	; 0x01
    11ac:	0e 94 a2 08 	call	0x1144	; 0x1144 <_Z13PutUartChBonec>
}
/*************************************************************************************************************/
void PrintBone(char string[]){
	BYTE i=0;
	
	while (string[i]){
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	88 2f       	mov	r24, r24
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	2a 81       	ldd	r18, Y+2	; 0x02
    11b8:	3b 81       	ldd	r19, Y+3	; 0x03
    11ba:	82 0f       	add	r24, r18
    11bc:	93 1f       	adc	r25, r19
    11be:	fc 01       	movw	r30, r24
    11c0:	90 81       	ld	r25, Z
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	99 23       	and	r25, r25
    11c6:	09 f4       	brne	.+2      	; 0x11ca <_Z9PrintBonePc+0x4a>
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	88 23       	and	r24, r24
    11cc:	19 f7       	brne	.-58     	; 0x1194 <_Z9PrintBonePc+0x14>
		PutUartChBone(string[i++]);
	}
}
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	08 95       	ret

000011da <_Z13PutUartChGAVRc>:
/*************************************************************************************************************/

void PutUartChGAVR(char ch){
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	0f 92       	push	r0
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSR1A & (1 << UDRE1)));
    11e6:	00 00       	nop
    11e8:	88 ec       	ldi	r24, 0xC8	; 200
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	fc 01       	movw	r30, r24
    11ee:	80 81       	ld	r24, Z
    11f0:	88 2f       	mov	r24, r24
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	80 72       	andi	r24, 0x20	; 32
    11f6:	90 70       	andi	r25, 0x00	; 0
    11f8:	21 e0       	ldi	r18, 0x01	; 1
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	09 f0       	breq	.+2      	; 0x1200 <_Z13PutUartChGAVRc+0x26>
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	22 23       	and	r18, r18
    1202:	91 f7       	brne	.-28     	; 0x11e8 <_Z13PutUartChGAVRc+0xe>
	UDR1=ch;
    1204:	8e ec       	ldi	r24, 0xCE	; 206
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	29 81       	ldd	r18, Y+1	; 0x01
    120a:	fc 01       	movw	r30, r24
    120c:	20 83       	st	Z, r18
}
    120e:	0f 90       	pop	r0
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	08 95       	ret

00001216 <_Z9PrintGAVRPc>:
/*************************************************************************************************************/

void PrintGAVR(char string[]){
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	00 d0       	rcall	.+0      	; 0x121c <_Z9PrintGAVRPc+0x6>
    121c:	0f 92       	push	r0
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	9b 83       	std	Y+3, r25	; 0x03
    1224:	8a 83       	std	Y+2, r24	; 0x02
	BYTE i=0;
    1226:	19 82       	std	Y+1, r1	; 0x01
	while (string[i]){
    1228:	0e c0       	rjmp	.+28     	; 0x1246 <_Z9PrintGAVRPc+0x30>
		PutUartChGAVR(string[i++]);
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	88 2f       	mov	r24, r24
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	2a 81       	ldd	r18, Y+2	; 0x02
    1232:	3b 81       	ldd	r19, Y+3	; 0x03
    1234:	82 0f       	add	r24, r18
    1236:	93 1f       	adc	r25, r19
    1238:	fc 01       	movw	r30, r24
    123a:	80 81       	ld	r24, Z
    123c:	99 81       	ldd	r25, Y+1	; 0x01
    123e:	9f 5f       	subi	r25, 0xFF	; 255
    1240:	99 83       	std	Y+1, r25	; 0x01
    1242:	0e 94 ed 08 	call	0x11da	; 0x11da <_Z13PutUartChGAVRc>
}
/*************************************************************************************************************/

void PrintGAVR(char string[]){
	BYTE i=0;
	while (string[i]){
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	88 2f       	mov	r24, r24
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	2a 81       	ldd	r18, Y+2	; 0x02
    124e:	3b 81       	ldd	r19, Y+3	; 0x03
    1250:	82 0f       	add	r24, r18
    1252:	93 1f       	adc	r25, r19
    1254:	fc 01       	movw	r30, r24
    1256:	90 81       	ld	r25, Z
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	99 23       	and	r25, r25
    125c:	09 f4       	brne	.+2      	; 0x1260 <_Z9PrintGAVRPc+0x4a>
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	88 23       	and	r24, r24
    1262:	19 f7       	brne	.-58     	; 0x122a <_Z9PrintGAVRPc+0x14>
		PutUartChGAVR(string[i++]);
	}
}
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	08 95       	ret

00001270 <_Z8sendGAVRv>:
/*************************************************************************************************************/
void sendGAVR(){
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	ca 55       	subi	r28, 0x5A	; 90
    127a:	d0 40       	sbci	r29, 0x00	; 0
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
	//Declare variables to be used.
	volatile static unsigned int state=0;
	volatile BOOL noCarriage=fTrue;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	8a 87       	std	Y+10, r24	; 0x0a
	char recChar, recString[40], sentString[40];
	unsigned int strLoc=0;
    128a:	1a 82       	std	Y+2, r1	; 0x02
    128c:	19 82       	std	Y+1, r1	; 0x01
	
	//Used for shutdown connection logic if there was a timeout in sending or receiving
	BOOL flagTimeout=fFalse;
    128e:	1b 82       	std	Y+3, r1	; 0x03
	
	//Transmission protocol
	while (flagSendingGAVR && !flagTimeout){
    1290:	f6 c1       	rjmp	.+1004   	; 0x167e <_Z8sendGAVRv+0x40e>
		/* State 5: Successful transmission and reception. Kill sending flag, reset state, exit.					 */
		/* State 6: ACKBAD received, check to see if we have an invalid date/time in our clock or it was just noisy  */
		/*			and had error in transmission/reception. If valid, go to waiting state. Else exit and set flag.	 */
		/* State 7: Got the wrong ack for something, set a flag to let the WAVR do its thing then try again.		 */
		/*************************************************************************************************************/
		switch (state){
    1292:	80 91 cf 01 	lds	r24, 0x01CF
    1296:	90 91 d0 01 	lds	r25, 0x01D0
    129a:	83 30       	cpi	r24, 0x03	; 3
    129c:	91 05       	cpc	r25, r1
    129e:	09 f4       	brne	.+2      	; 0x12a2 <_Z8sendGAVRv+0x32>
    12a0:	1d c1       	rjmp	.+570    	; 0x14dc <_Z8sendGAVRv+0x26c>
    12a2:	84 30       	cpi	r24, 0x04	; 4
    12a4:	91 05       	cpc	r25, r1
    12a6:	48 f4       	brcc	.+18     	; 0x12ba <_Z8sendGAVRv+0x4a>
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	91 05       	cpc	r25, r1
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <_Z8sendGAVRv+0x40>
    12ae:	97 c0       	rjmp	.+302    	; 0x13de <_Z8sendGAVRv+0x16e>
    12b0:	82 30       	cpi	r24, 0x02	; 2
    12b2:	91 05       	cpc	r25, r1
    12b4:	08 f0       	brcs	.+2      	; 0x12b8 <_Z8sendGAVRv+0x48>
    12b6:	a1 c0       	rjmp	.+322    	; 0x13fa <_Z8sendGAVRv+0x18a>
    12b8:	11 c0       	rjmp	.+34     	; 0x12dc <_Z8sendGAVRv+0x6c>
    12ba:	85 30       	cpi	r24, 0x05	; 5
    12bc:	91 05       	cpc	r25, r1
    12be:	09 f4       	brne	.+2      	; 0x12c2 <_Z8sendGAVRv+0x52>
    12c0:	a7 c1       	rjmp	.+846    	; 0x1610 <_Z8sendGAVRv+0x3a0>
    12c2:	85 30       	cpi	r24, 0x05	; 5
    12c4:	91 05       	cpc	r25, r1
    12c6:	08 f4       	brcc	.+2      	; 0x12ca <_Z8sendGAVRv+0x5a>
    12c8:	98 c1       	rjmp	.+816    	; 0x15fa <_Z8sendGAVRv+0x38a>
    12ca:	86 30       	cpi	r24, 0x06	; 6
    12cc:	91 05       	cpc	r25, r1
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <_Z8sendGAVRv+0x62>
    12d0:	a9 c1       	rjmp	.+850    	; 0x1624 <_Z8sendGAVRv+0x3b4>
    12d2:	87 30       	cpi	r24, 0x07	; 7
    12d4:	91 05       	cpc	r25, r1
    12d6:	09 f4       	brne	.+2      	; 0x12da <_Z8sendGAVRv+0x6a>
    12d8:	be c1       	rjmp	.+892    	; 0x1656 <_Z8sendGAVRv+0x3e6>
    12da:	c8 c1       	rjmp	.+912    	; 0x166c <_Z8sendGAVRv+0x3fc>
			case 0: {
				//Raise interrupts to GAVR for three ish clock cycles.
				prtGAVRINT |= (1 << bnGAVRINT);
    12dc:	85 e2       	ldi	r24, 0x25	; 37
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	25 e2       	ldi	r18, 0x25	; 37
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	f9 01       	movw	r30, r18
    12e6:	20 81       	ld	r18, Z
    12e8:	28 60       	ori	r18, 0x08	; 8
    12ea:	fc 01       	movw	r30, r24
    12ec:	20 83       	st	Z, r18
				for (int i=0; i<2; i++){asm volatile("nop");}
    12ee:	1d 82       	std	Y+5, r1	; 0x05
    12f0:	1c 82       	std	Y+4, r1	; 0x04
    12f2:	06 c0       	rjmp	.+12     	; 0x1300 <_Z8sendGAVRv+0x90>
    12f4:	00 00       	nop
    12f6:	8c 81       	ldd	r24, Y+4	; 0x04
    12f8:	9d 81       	ldd	r25, Y+5	; 0x05
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	9d 83       	std	Y+5, r25	; 0x05
    12fe:	8c 83       	std	Y+4, r24	; 0x04
    1300:	21 e0       	ldi	r18, 0x01	; 1
    1302:	8c 81       	ldd	r24, Y+4	; 0x04
    1304:	9d 81       	ldd	r25, Y+5	; 0x05
    1306:	82 30       	cpi	r24, 0x02	; 2
    1308:	91 05       	cpc	r25, r1
    130a:	0c f0       	brlt	.+2      	; 0x130e <_Z8sendGAVRv+0x9e>
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	22 23       	and	r18, r18
    1310:	89 f7       	brne	.-30     	; 0x12f4 <_Z8sendGAVRv+0x84>
				prtGAVRINT &= ~(1 << bnGAVRINT);
    1312:	85 e2       	ldi	r24, 0x25	; 37
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	25 e2       	ldi	r18, 0x25	; 37
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	f9 01       	movw	r30, r18
    131c:	20 81       	ld	r18, Z
    131e:	27 7f       	andi	r18, 0xF7	; 247
    1320:	fc 01       	movw	r30, r24
    1322:	20 83       	st	Z, r18
				state=1;
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	90 93 d0 01 	sts	0x01D0, r25
    132c:	80 93 cf 01 	sts	0x01CF, r24
				break;
    1330:	a6 c1       	rjmp	.+844    	; 0x167e <_Z8sendGAVRv+0x40e>
			}//end case 0
			case 1: {
				while (noCarriage && flagSendingGAVR){
					while (!(UCSR1A & (1 << RXC1)) && flagSendingGAVR);
    1332:	00 00       	nop
    1334:	88 ec       	ldi	r24, 0xC8	; 200
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	fc 01       	movw	r30, r24
    133a:	80 81       	ld	r24, Z
    133c:	88 23       	and	r24, r24
    133e:	34 f0       	brlt	.+12     	; 0x134c <_Z8sendGAVRv+0xdc>
    1340:	80 91 b8 01 	lds	r24, 0x01B8
    1344:	88 23       	and	r24, r24
    1346:	11 f0       	breq	.+4      	; 0x134c <_Z8sendGAVRv+0xdc>
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	01 c0       	rjmp	.+2      	; 0x134e <_Z8sendGAVRv+0xde>
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	88 23       	and	r24, r24
    1350:	89 f7       	brne	.-30     	; 0x1334 <_Z8sendGAVRv+0xc4>
					if (!flagSendingGAVR){state=0; flagTimeout=fTrue; break;}
    1352:	80 91 b8 01 	lds	r24, 0x01B8
    1356:	88 23       	and	r24, r24
    1358:	41 f4       	brne	.+16     	; 0x136a <_Z8sendGAVRv+0xfa>
    135a:	10 92 d0 01 	sts	0x01D0, r1
    135e:	10 92 cf 01 	sts	0x01CF, r1
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	8b 83       	std	Y+3, r24	; 0x03
    1366:	00 00       	nop
							//recString[strLoc++] = recChar;
							if (strLoc >= 39){strLoc = 0; noCarriage=fFalse; state=7;}
						}//end if-else
					}//end if-else	
				}//end while
				break;
    1368:	8a c1       	rjmp	.+788    	; 0x167e <_Z8sendGAVRv+0x40e>
			case 1: {
				while (noCarriage && flagSendingGAVR){
					while (!(UCSR1A & (1 << RXC1)) && flagSendingGAVR);
					if (!flagSendingGAVR){state=0; flagTimeout=fTrue; break;}
					else {
						recChar=UDR1;
    136a:	8e ec       	ldi	r24, 0xCE	; 206
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	fc 01       	movw	r30, r24
    1370:	80 81       	ld	r24, Z
    1372:	88 87       	std	Y+8, r24	; 0x08
						recString[strLoc++]=recChar;
    1374:	9e 01       	movw	r18, r28
    1376:	2d 5c       	subi	r18, 0xCD	; 205
    1378:	3f 4f       	sbci	r19, 0xFF	; 255
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	9a 81       	ldd	r25, Y+2	; 0x02
    137e:	82 0f       	add	r24, r18
    1380:	93 1f       	adc	r25, r19
    1382:	28 85       	ldd	r18, Y+8	; 0x08
    1384:	fc 01       	movw	r30, r24
    1386:	20 83       	st	Z, r18
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	9a 81       	ldd	r25, Y+2	; 0x02
    138c:	01 96       	adiw	r24, 0x01	; 1
    138e:	9a 83       	std	Y+2, r25	; 0x02
    1390:	89 83       	std	Y+1, r24	; 0x01
						if (recChar=='.'){recString[strLoc++]='\0'; state=2;}
    1392:	88 85       	ldd	r24, Y+8	; 0x08
    1394:	8e 32       	cpi	r24, 0x2E	; 46
    1396:	a9 f4       	brne	.+42     	; 0x13c2 <_Z8sendGAVRv+0x152>
    1398:	9e 01       	movw	r18, r28
    139a:	2d 5c       	subi	r18, 0xCD	; 205
    139c:	3f 4f       	sbci	r19, 0xFF	; 255
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	9a 81       	ldd	r25, Y+2	; 0x02
    13a2:	82 0f       	add	r24, r18
    13a4:	93 1f       	adc	r25, r19
    13a6:	fc 01       	movw	r30, r24
    13a8:	10 82       	st	Z, r1
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	9a 81       	ldd	r25, Y+2	; 0x02
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	9a 83       	std	Y+2, r25	; 0x02
    13b2:	89 83       	std	Y+1, r24	; 0x01
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	90 93 d0 01 	sts	0x01D0, r25
    13bc:	80 93 cf 01 	sts	0x01CF, r24
    13c0:	0e c0       	rjmp	.+28     	; 0x13de <_Z8sendGAVRv+0x16e>
						else {
							//recString[strLoc++] = recChar;
							if (strLoc >= 39){strLoc = 0; noCarriage=fFalse; state=7;}
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	9a 81       	ldd	r25, Y+2	; 0x02
    13c6:	87 32       	cpi	r24, 0x27	; 39
    13c8:	91 05       	cpc	r25, r1
    13ca:	48 f0       	brcs	.+18     	; 0x13de <_Z8sendGAVRv+0x16e>
    13cc:	1a 82       	std	Y+2, r1	; 0x02
    13ce:	19 82       	std	Y+1, r1	; 0x01
    13d0:	1a 86       	std	Y+10, r1	; 0x0a
    13d2:	87 e0       	ldi	r24, 0x07	; 7
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	90 93 d0 01 	sts	0x01D0, r25
    13da:	80 93 cf 01 	sts	0x01CF, r24
				prtGAVRINT &= ~(1 << bnGAVRINT);
				state=1;
				break;
			}//end case 0
			case 1: {
				while (noCarriage && flagSendingGAVR){
    13de:	8a 85       	ldd	r24, Y+10	; 0x0a
    13e0:	88 23       	and	r24, r24
    13e2:	31 f0       	breq	.+12     	; 0x13f0 <_Z8sendGAVRv+0x180>
    13e4:	80 91 b8 01 	lds	r24, 0x01B8
    13e8:	88 23       	and	r24, r24
    13ea:	11 f0       	breq	.+4      	; 0x13f0 <_Z8sendGAVRv+0x180>
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	01 c0       	rjmp	.+2      	; 0x13f2 <_Z8sendGAVRv+0x182>
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	88 23       	and	r24, r24
    13f4:	09 f0       	breq	.+2      	; 0x13f8 <_Z8sendGAVRv+0x188>
    13f6:	9d cf       	rjmp	.-198    	; 0x1332 <_Z8sendGAVRv+0xc2>
							//recString[strLoc++] = recChar;
							if (strLoc >= 39){strLoc = 0; noCarriage=fFalse; state=7;}
						}//end if-else
					}//end if-else	
				}//end while
				break;
    13f8:	42 c1       	rjmp	.+644    	; 0x167e <_Z8sendGAVRv+0x40e>
				}//end case 1
			case 2: {
				if (!strncmp(recString,"ACKW.",5)){state=3;}
    13fa:	ce 01       	movw	r24, r28
    13fc:	c3 96       	adiw	r24, 0x33	; 51
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	31 e0       	ldi	r19, 0x01	; 1
    1402:	b9 01       	movw	r22, r18
    1404:	45 e0       	ldi	r20, 0x05	; 5
    1406:	50 e0       	ldi	r21, 0x00	; 0
    1408:	0e 94 78 19 	call	0x32f0	; 0x32f0 <strncmp>
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	39 f4       	brne	.+14     	; 0x141e <_Z8sendGAVRv+0x1ae>
    1410:	83 e0       	ldi	r24, 0x03	; 3
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	90 93 d0 01 	sts	0x01D0, r25
    1418:	80 93 cf 01 	sts	0x01CF, r24
				else if (!strncmp(recString,"ACKBAD.",7)){state=6;}
				//send string case.
				else if (flagUpdateGAVRClock && !strcmp(recString,sentString)){state=5;}		//they match, successful send.
				else if (flagUpdateGAVRClock && strcmp(recString,sentString) && strcmp(recString,"ACKBAD.")){state=7;}	//string isnt the same as ACKBAD or what we sent.
				else{state=7;} //invalid ack. ACKERROR goes here.
				break;
    141c:	30 c1       	rjmp	.+608    	; 0x167e <_Z8sendGAVRv+0x40e>
				}//end while
				break;
				}//end case 1
			case 2: {
				if (!strncmp(recString,"ACKW.",5)){state=3;}
				else if (!strncmp(recString,"ACKGB.",6)){state=4;}
    141e:	ce 01       	movw	r24, r28
    1420:	c3 96       	adiw	r24, 0x33	; 51
    1422:	26 e0       	ldi	r18, 0x06	; 6
    1424:	31 e0       	ldi	r19, 0x01	; 1
    1426:	b9 01       	movw	r22, r18
    1428:	46 e0       	ldi	r20, 0x06	; 6
    142a:	50 e0       	ldi	r21, 0x00	; 0
    142c:	0e 94 78 19 	call	0x32f0	; 0x32f0 <strncmp>
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	39 f4       	brne	.+14     	; 0x1442 <_Z8sendGAVRv+0x1d2>
    1434:	84 e0       	ldi	r24, 0x04	; 4
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	90 93 d0 01 	sts	0x01D0, r25
    143c:	80 93 cf 01 	sts	0x01CF, r24
				else if (!strncmp(recString,"ACKBAD.",7)){state=6;}
				//send string case.
				else if (flagUpdateGAVRClock && !strcmp(recString,sentString)){state=5;}		//they match, successful send.
				else if (flagUpdateGAVRClock && strcmp(recString,sentString) && strcmp(recString,"ACKBAD.")){state=7;}	//string isnt the same as ACKBAD or what we sent.
				else{state=7;} //invalid ack. ACKERROR goes here.
				break;
    1440:	1e c1       	rjmp	.+572    	; 0x167e <_Z8sendGAVRv+0x40e>
				break;
				}//end case 1
			case 2: {
				if (!strncmp(recString,"ACKW.",5)){state=3;}
				else if (!strncmp(recString,"ACKGB.",6)){state=4;}
				else if (!strncmp(recString,"ACKBAD.",7)){state=6;}
    1442:	ce 01       	movw	r24, r28
    1444:	c3 96       	adiw	r24, 0x33	; 51
    1446:	2d e0       	ldi	r18, 0x0D	; 13
    1448:	31 e0       	ldi	r19, 0x01	; 1
    144a:	b9 01       	movw	r22, r18
    144c:	47 e0       	ldi	r20, 0x07	; 7
    144e:	50 e0       	ldi	r21, 0x00	; 0
    1450:	0e 94 78 19 	call	0x32f0	; 0x32f0 <strncmp>
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	39 f4       	brne	.+14     	; 0x1466 <_Z8sendGAVRv+0x1f6>
    1458:	86 e0       	ldi	r24, 0x06	; 6
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	90 93 d0 01 	sts	0x01D0, r25
    1460:	80 93 cf 01 	sts	0x01CF, r24
				//send string case.
				else if (flagUpdateGAVRClock && !strcmp(recString,sentString)){state=5;}		//they match, successful send.
				else if (flagUpdateGAVRClock && strcmp(recString,sentString) && strcmp(recString,"ACKBAD.")){state=7;}	//string isnt the same as ACKBAD or what we sent.
				else{state=7;} //invalid ack. ACKERROR goes here.
				break;
    1464:	0c c1       	rjmp	.+536    	; 0x167e <_Z8sendGAVRv+0x40e>
			case 2: {
				if (!strncmp(recString,"ACKW.",5)){state=3;}
				else if (!strncmp(recString,"ACKGB.",6)){state=4;}
				else if (!strncmp(recString,"ACKBAD.",7)){state=6;}
				//send string case.
				else if (flagUpdateGAVRClock && !strcmp(recString,sentString)){state=5;}		//they match, successful send.
    1466:	80 91 b7 01 	lds	r24, 0x01B7
    146a:	88 23       	and	r24, r24
    146c:	89 f0       	breq	.+34     	; 0x1490 <_Z8sendGAVRv+0x220>
    146e:	ce 01       	movw	r24, r28
    1470:	c3 96       	adiw	r24, 0x33	; 51
    1472:	9e 01       	movw	r18, r28
    1474:	25 5f       	subi	r18, 0xF5	; 245
    1476:	3f 4f       	sbci	r19, 0xFF	; 255
    1478:	b9 01       	movw	r22, r18
    147a:	0e 94 68 19 	call	0x32d0	; 0x32d0 <strcmp>
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	39 f4       	brne	.+14     	; 0x1490 <_Z8sendGAVRv+0x220>
    1482:	85 e0       	ldi	r24, 0x05	; 5
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	90 93 d0 01 	sts	0x01D0, r25
    148a:	80 93 cf 01 	sts	0x01CF, r24
    148e:	25 c0       	rjmp	.+74     	; 0x14da <_Z8sendGAVRv+0x26a>
				else if (flagUpdateGAVRClock && strcmp(recString,sentString) && strcmp(recString,"ACKBAD.")){state=7;}	//string isnt the same as ACKBAD or what we sent.
    1490:	80 91 b7 01 	lds	r24, 0x01B7
    1494:	88 23       	and	r24, r24
    1496:	d1 f0       	breq	.+52     	; 0x14cc <_Z8sendGAVRv+0x25c>
    1498:	ce 01       	movw	r24, r28
    149a:	c3 96       	adiw	r24, 0x33	; 51
    149c:	9e 01       	movw	r18, r28
    149e:	25 5f       	subi	r18, 0xF5	; 245
    14a0:	3f 4f       	sbci	r19, 0xFF	; 255
    14a2:	b9 01       	movw	r22, r18
    14a4:	0e 94 68 19 	call	0x32d0	; 0x32d0 <strcmp>
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	81 f0       	breq	.+32     	; 0x14cc <_Z8sendGAVRv+0x25c>
    14ac:	ce 01       	movw	r24, r28
    14ae:	c3 96       	adiw	r24, 0x33	; 51
    14b0:	2d e0       	ldi	r18, 0x0D	; 13
    14b2:	31 e0       	ldi	r19, 0x01	; 1
    14b4:	b9 01       	movw	r22, r18
    14b6:	0e 94 68 19 	call	0x32d0	; 0x32d0 <strcmp>
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	39 f0       	breq	.+14     	; 0x14cc <_Z8sendGAVRv+0x25c>
    14be:	87 e0       	ldi	r24, 0x07	; 7
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	90 93 d0 01 	sts	0x01D0, r25
    14c6:	80 93 cf 01 	sts	0x01CF, r24
    14ca:	07 c0       	rjmp	.+14     	; 0x14da <_Z8sendGAVRv+0x26a>
				else{state=7;} //invalid ack. ACKERROR goes here.
    14cc:	87 e0       	ldi	r24, 0x07	; 7
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	90 93 d0 01 	sts	0x01D0, r25
    14d4:	80 93 cf 01 	sts	0x01CF, r24
				break;
    14d8:	d2 c0       	rjmp	.+420    	; 0x167e <_Z8sendGAVRv+0x40e>
    14da:	d1 c0       	rjmp	.+418    	; 0x167e <_Z8sendGAVRv+0x40e>
				}//end case 2
			case 3:{
				if (flagUserClock){
    14dc:	80 91 b9 01 	lds	r24, 0x01B9
    14e0:	88 23       	and	r24, r24
    14e2:	39 f0       	breq	.+14     	; 0x14f2 <_Z8sendGAVRv+0x282>
					PrintGAVR("SYNGB.");
    14e4:	85 e1       	ldi	r24, 0x15	; 21
    14e6:	91 e0       	ldi	r25, 0x01	; 1
    14e8:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
					flagWaitingForReceiveGAVR=fTrue;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	80 93 b6 01 	sts	0x01B6, r24
				} else;
				
				//If we are updating the gavr, send the time and date together regardless. preface with SYN
				if (flagUpdateGAVRClock && !flagUserClock){
    14f2:	80 91 b7 01 	lds	r24, 0x01B7
    14f6:	88 23       	and	r24, r24
    14f8:	09 f4       	brne	.+2      	; 0x14fc <_Z8sendGAVRv+0x28c>
    14fa:	58 c0       	rjmp	.+176    	; 0x15ac <_Z8sendGAVRv+0x33c>
    14fc:	80 91 b9 01 	lds	r24, 0x01B9
    1500:	88 23       	and	r24, r24
    1502:	09 f0       	breq	.+2      	; 0x1506 <_Z8sendGAVRv+0x296>
    1504:	53 c0       	rjmp	.+166    	; 0x15ac <_Z8sendGAVRv+0x33c>
					strcpy(sentString,"SYN");			//this is a syn, not ack to save logic in GAVR code. Can change if we want.
    1506:	9e 01       	movw	r18, r28
    1508:	25 5f       	subi	r18, 0xF5	; 245
    150a:	3f 4f       	sbci	r19, 0xFF	; 255
    150c:	83 e5       	ldi	r24, 0x53	; 83
    150e:	99 e5       	ldi	r25, 0x59	; 89
    1510:	ae e4       	ldi	r26, 0x4E	; 78
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	f9 01       	movw	r30, r18
    1516:	80 83       	st	Z, r24
    1518:	91 83       	std	Z+1, r25	; 0x01
    151a:	a2 83       	std	Z+2, r26	; 0x02
    151c:	b3 83       	std	Z+3, r27	; 0x03
					strcat(sentString,currentTime.getTime());
    151e:	8a e8       	ldi	r24, 0x8A	; 138
    1520:	91 e0       	ldi	r25, 0x01	; 1
    1522:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN6myTime7getTimeEv>
    1526:	9c 01       	movw	r18, r24
    1528:	ce 01       	movw	r24, r28
    152a:	0b 96       	adiw	r24, 0x0b	; 11
    152c:	b9 01       	movw	r22, r18
    152e:	0e 94 5d 19 	call	0x32ba	; 0x32ba <strcat>
					strcat(sentString,"/");	//add delimiter.
    1532:	ce 01       	movw	r24, r28
    1534:	0b 96       	adiw	r24, 0x0b	; 11
    1536:	9c 01       	movw	r18, r24
    1538:	f9 01       	movw	r30, r18
    153a:	01 90       	ld	r0, Z+
    153c:	00 20       	and	r0, r0
    153e:	e9 f7       	brne	.-6      	; 0x153a <_Z8sendGAVRv+0x2ca>
    1540:	cf 01       	movw	r24, r30
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	82 1b       	sub	r24, r18
    1546:	93 0b       	sbc	r25, r19
    1548:	9e 01       	movw	r18, r28
    154a:	25 5f       	subi	r18, 0xF5	; 245
    154c:	3f 4f       	sbci	r19, 0xFF	; 255
    154e:	82 0f       	add	r24, r18
    1550:	93 1f       	adc	r25, r19
    1552:	2f e2       	ldi	r18, 0x2F	; 47
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	fc 01       	movw	r30, r24
    1558:	31 83       	std	Z+1, r19	; 0x01
    155a:	20 83       	st	Z, r18
					strcat(sentString,currentTime.getDate());
    155c:	8a e8       	ldi	r24, 0x8A	; 138
    155e:	91 e0       	ldi	r25, 0x01	; 1
    1560:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN6myDate7getDateEv>
    1564:	9c 01       	movw	r18, r24
    1566:	ce 01       	movw	r24, r28
    1568:	0b 96       	adiw	r24, 0x0b	; 11
    156a:	b9 01       	movw	r22, r18
    156c:	0e 94 5d 19 	call	0x32ba	; 0x32ba <strcat>
					strcat(sentString,".\0");
    1570:	ce 01       	movw	r24, r28
    1572:	0b 96       	adiw	r24, 0x0b	; 11
    1574:	9c 01       	movw	r18, r24
    1576:	f9 01       	movw	r30, r18
    1578:	01 90       	ld	r0, Z+
    157a:	00 20       	and	r0, r0
    157c:	e9 f7       	brne	.-6      	; 0x1578 <_Z8sendGAVRv+0x308>
    157e:	cf 01       	movw	r24, r30
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	82 1b       	sub	r24, r18
    1584:	93 0b       	sbc	r25, r19
    1586:	9e 01       	movw	r18, r28
    1588:	25 5f       	subi	r18, 0xF5	; 245
    158a:	3f 4f       	sbci	r19, 0xFF	; 255
    158c:	82 0f       	add	r24, r18
    158e:	93 1f       	adc	r25, r19
    1590:	2e e2       	ldi	r18, 0x2E	; 46
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	fc 01       	movw	r30, r24
    1596:	31 83       	std	Z+1, r19	; 0x01
    1598:	20 83       	st	Z, r18
					PrintGAVR("SYN");
    159a:	8c e1       	ldi	r24, 0x1C	; 28
    159c:	91 e0       	ldi	r25, 0x01	; 1
    159e:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
					printTimeDate(fFalse,fTrue,fTrue);			//date is terminated by a . so don't need to send character
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	61 e0       	ldi	r22, 0x01	; 1
    15a6:	41 e0       	ldi	r20, 0x01	; 1
    15a8:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <_Z13printTimeDatehhh>
				}			
				//Reset the recString to receive the next ACK.
				for (int i=0; i<strLoc; i++){
    15ac:	1f 82       	std	Y+7, r1	; 0x07
    15ae:	1e 82       	std	Y+6, r1	; 0x06
    15b0:	0e c0       	rjmp	.+28     	; 0x15ce <_Z8sendGAVRv+0x35e>
					recString[i]=NULL;
    15b2:	9e 01       	movw	r18, r28
    15b4:	2d 5c       	subi	r18, 0xCD	; 205
    15b6:	3f 4f       	sbci	r19, 0xFF	; 255
    15b8:	8e 81       	ldd	r24, Y+6	; 0x06
    15ba:	9f 81       	ldd	r25, Y+7	; 0x07
    15bc:	82 0f       	add	r24, r18
    15be:	93 1f       	adc	r25, r19
    15c0:	fc 01       	movw	r30, r24
    15c2:	10 82       	st	Z, r1
					strcat(sentString,".\0");
					PrintGAVR("SYN");
					printTimeDate(fFalse,fTrue,fTrue);			//date is terminated by a . so don't need to send character
				}			
				//Reset the recString to receive the next ACK.
				for (int i=0; i<strLoc; i++){
    15c4:	8e 81       	ldd	r24, Y+6	; 0x06
    15c6:	9f 81       	ldd	r25, Y+7	; 0x07
    15c8:	01 96       	adiw	r24, 0x01	; 1
    15ca:	9f 83       	std	Y+7, r25	; 0x07
    15cc:	8e 83       	std	Y+6, r24	; 0x06
    15ce:	2e 81       	ldd	r18, Y+6	; 0x06
    15d0:	3f 81       	ldd	r19, Y+7	; 0x07
    15d2:	41 e0       	ldi	r20, 0x01	; 1
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	9a 81       	ldd	r25, Y+2	; 0x02
    15d8:	28 17       	cp	r18, r24
    15da:	39 07       	cpc	r19, r25
    15dc:	08 f0       	brcs	.+2      	; 0x15e0 <_Z8sendGAVRv+0x370>
    15de:	40 e0       	ldi	r20, 0x00	; 0
    15e0:	44 23       	and	r20, r20
    15e2:	39 f7       	brne	.-50     	; 0x15b2 <_Z8sendGAVRv+0x342>
					recString[i]=NULL;
				}
				//Reset the carriage feature, string location and go back to the receiving state.
				noCarriage=fTrue;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	8a 87       	std	Y+10, r24	; 0x0a
				strLoc=0;
    15e8:	1a 82       	std	Y+2, r1	; 0x02
    15ea:	19 82       	std	Y+1, r1	; 0x01
				state=1;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	90 93 d0 01 	sts	0x01D0, r25
    15f4:	80 93 cf 01 	sts	0x01CF, r24
				break;
    15f8:	42 c0       	rjmp	.+132    	; 0x167e <_Z8sendGAVRv+0x40e>
				}//end case 3
			case 4:{
				//Successful communication with just flags
				PrintGAVR("SYNDONE.");	//end the communication
    15fa:	80 e2       	ldi	r24, 0x20	; 32
    15fc:	91 e0       	ldi	r25, 0x01	; 1
    15fe:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
				state=5;
    1602:	85 e0       	ldi	r24, 0x05	; 5
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	90 93 d0 01 	sts	0x01D0, r25
    160a:	80 93 cf 01 	sts	0x01CF, r24
				break;				
    160e:	37 c0       	rjmp	.+110    	; 0x167e <_Z8sendGAVRv+0x40e>
				}//end case 4	
			case 5:{
				//Successful communications overall
				flagSendingGAVR=fFalse;
    1610:	10 92 b8 01 	sts	0x01B8, r1
				flagWaitingToSendGAVR=fFalse;
    1614:	10 92 bb 01 	sts	0x01BB, r1
				flagTimeout=fFalse;
    1618:	1b 82       	std	Y+3, r1	; 0x03
				state=0;
    161a:	10 92 d0 01 	sts	0x01D0, r1
    161e:	10 92 cf 01 	sts	0x01CF, r1
				break;
    1622:	2d c0       	rjmp	.+90     	; 0x167e <_Z8sendGAVRv+0x40e>
				}//end case 5
			case 6:{
				//ACKBAD. Check the date and time to see if its okay. IF okay, go to state 7 to set waiting flag. otherwise set invalid time and close through state 5.
				BOOL dateOK = currentTime.checkValidity();
    1624:	8a e8       	ldi	r24, 0x8A	; 138
    1626:	91 e0       	ldi	r25, 0x01	; 1
    1628:	0e 94 c1 06 	call	0xd82	; 0xd82 <_ZN6myTime13checkValidityEv>
    162c:	89 87       	std	Y+9, r24	; 0x09
				if (dateOK){state=7;}
    162e:	89 85       	ldd	r24, Y+9	; 0x09
    1630:	88 23       	and	r24, r24
    1632:	39 f0       	breq	.+14     	; 0x1642 <_Z8sendGAVRv+0x3d2>
    1634:	87 e0       	ldi	r24, 0x07	; 7
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	90 93 d0 01 	sts	0x01D0, r25
    163c:	80 93 cf 01 	sts	0x01CF, r24
				else {state=5; flagInvalidDateTime=fTrue;}
				break;
    1640:	1e c0       	rjmp	.+60     	; 0x167e <_Z8sendGAVRv+0x40e>
				}//end case 5
			case 6:{
				//ACKBAD. Check the date and time to see if its okay. IF okay, go to state 7 to set waiting flag. otherwise set invalid time and close through state 5.
				BOOL dateOK = currentTime.checkValidity();
				if (dateOK){state=7;}
				else {state=5; flagInvalidDateTime=fTrue;}
    1642:	85 e0       	ldi	r24, 0x05	; 5
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	90 93 d0 01 	sts	0x01D0, r25
    164a:	80 93 cf 01 	sts	0x01CF, r24
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	80 93 ba 01 	sts	0x01BA, r24
				break;
    1654:	14 c0       	rjmp	.+40     	; 0x167e <_Z8sendGAVRv+0x40e>
				}//end case 6
			case 7:{
				//Got the wrong ACK back, or invalid ACK. Wait for next cycle then resend. Keep all the flags the same
				flagWaitingToSendGAVR=fTrue;
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	80 93 bb 01 	sts	0x01BB, r24
				flagSendingGAVR=fFalse;
    165c:	10 92 b8 01 	sts	0x01B8, r1
				flagTimeout=fFalse;
    1660:	1b 82       	std	Y+3, r1	; 0x03
				state=0;
    1662:	10 92 d0 01 	sts	0x01D0, r1
    1666:	10 92 cf 01 	sts	0x01CF, r1
				break;
    166a:	09 c0       	rjmp	.+18     	; 0x167e <_Z8sendGAVRv+0x40e>
				}//end case 7
			default:{state=0; flagSendingGAVR=fFalse; noCarriage=fFalse; flagTimeout=fFalse;break;}
    166c:	10 92 d0 01 	sts	0x01D0, r1
    1670:	10 92 cf 01 	sts	0x01CF, r1
    1674:	10 92 b8 01 	sts	0x01B8, r1
    1678:	1a 86       	std	Y+10, r1	; 0x0a
    167a:	1b 82       	std	Y+3, r1	; 0x03
    167c:	00 00       	nop
	
	//Used for shutdown connection logic if there was a timeout in sending or receiving
	BOOL flagTimeout=fFalse;
	
	//Transmission protocol
	while (flagSendingGAVR && !flagTimeout){
    167e:	80 91 b8 01 	lds	r24, 0x01B8
    1682:	88 23       	and	r24, r24
    1684:	29 f0       	breq	.+10     	; 0x1690 <_Z8sendGAVRv+0x420>
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	88 23       	and	r24, r24
    168a:	11 f4       	brne	.+4      	; 0x1690 <_Z8sendGAVRv+0x420>
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	01 c0       	rjmp	.+2      	; 0x1692 <_Z8sendGAVRv+0x422>
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	88 23       	and	r24, r24
    1694:	09 f0       	breq	.+2      	; 0x1698 <_Z8sendGAVRv+0x428>
    1696:	fd cd       	rjmp	.-1030   	; 0x1292 <_Z8sendGAVRv+0x22>
			default:{state=0; flagSendingGAVR=fFalse; noCarriage=fFalse; flagTimeout=fFalse;break;}
		}//end switch
	}//end while
	
	//If there was a timeout and the wiating flag has not been set yet, make sure waiting flag.
	if (noCarriage || flagTimeout){
    1698:	8a 85       	ldd	r24, Y+10	; 0x0a
    169a:	88 23       	and	r24, r24
    169c:	19 f4       	brne	.+6      	; 0x16a4 <_Z8sendGAVRv+0x434>
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	88 23       	and	r24, r24
    16a2:	11 f0       	breq	.+4      	; 0x16a8 <_Z8sendGAVRv+0x438>
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	01 c0       	rjmp	.+2      	; 0x16aa <_Z8sendGAVRv+0x43a>
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	88 23       	and	r24, r24
    16ac:	19 f0       	breq	.+6      	; 0x16b4 <_Z8sendGAVRv+0x444>
		flagWaitingToSendGAVR=fTrue;
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	80 93 bb 01 	sts	0x01BB, r24
	}
	
	//If we aren't waiting for the next round, don't reset the flags. If we are waiting, just reset the waiting flag. Like a stack popping
	if (!flagWaitingToSendGAVR){
    16b4:	80 91 bb 01 	lds	r24, 0x01BB
    16b8:	88 23       	and	r24, r24
    16ba:	29 f4       	brne	.+10     	; 0x16c6 <_Z8sendGAVRv+0x456>
		flagUserClock=fFalse;
    16bc:	10 92 b9 01 	sts	0x01B9, r1
		flagUpdateGAVRClock=fFalse;	
    16c0:	10 92 b7 01 	sts	0x01B7, r1
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <_Z8sendGAVRv+0x45a>
	} else {flagWaitingToSendGAVR=fFalse;}
    16c6:	10 92 bb 01 	sts	0x01BB, r1
}//end function 	
    16ca:	c6 5a       	subi	r28, 0xA6	; 166
    16cc:	df 4f       	sbci	r29, 0xFF	; 255
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	de bf       	out	0x3e, r29	; 62
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	cd bf       	out	0x3d, r28	; 61
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	08 95       	ret

000016de <_Z11ReceiveBonev>:
	
/*************************************************************************************************************/
void ReceiveBone(){
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	a7 97       	sbiw	r28, 0x27	; 39
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	f8 94       	cli
    16ec:	de bf       	out	0x3e, r29	; 62
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	cd bf       	out	0x3d, r28	; 61
	volatile static unsigned int state=0;
	char recChar, recString[20];
	volatile unsigned int strLoc=0;
    16f2:	19 8e       	std	Y+25, r1	; 0x19
    16f4:	18 8e       	std	Y+24, r1	; 0x18
	BOOL noCarriage=fTrue;
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	89 83       	std	Y+1, r24	; 0x01
	
	while (flagReceivingBone){
    16fa:	e5 c1       	rjmp	.+970    	; 0x1ac6 <_Z11ReceiveBonev+0x3e8>
			/* State 4: ACKBAD, string it sent was not valid. Reply and exit loop.															*/
			/* State 5: ACKERROR, invalid string or overflow. Say error then exit.															*/
			/* State 6: Graceful exit. Exit from a command like adc or temp.																*/
			/********************************************************************************************************************************/
			
			switch(state){
    16fc:	80 91 cd 01 	lds	r24, 0x01CD
    1700:	90 91 ce 01 	lds	r25, 0x01CE
    1704:	83 30       	cpi	r24, 0x03	; 3
    1706:	91 05       	cpc	r25, r1
    1708:	09 f4       	brne	.+2      	; 0x170c <_Z11ReceiveBonev+0x2e>
    170a:	a9 c1       	rjmp	.+850    	; 0x1a5e <_Z11ReceiveBonev+0x380>
    170c:	84 30       	cpi	r24, 0x04	; 4
    170e:	91 05       	cpc	r25, r1
    1710:	48 f4       	brcc	.+18     	; 0x1724 <_Z11ReceiveBonev+0x46>
    1712:	81 30       	cpi	r24, 0x01	; 1
    1714:	91 05       	cpc	r25, r1
    1716:	09 f4       	brne	.+2      	; 0x171a <_Z11ReceiveBonev+0x3c>
    1718:	87 c0       	rjmp	.+270    	; 0x1828 <_Z11ReceiveBonev+0x14a>
    171a:	82 30       	cpi	r24, 0x02	; 2
    171c:	91 05       	cpc	r25, r1
    171e:	08 f0       	brcs	.+2      	; 0x1722 <_Z11ReceiveBonev+0x44>
    1720:	91 c0       	rjmp	.+290    	; 0x1844 <_Z11ReceiveBonev+0x166>
    1722:	0d c0       	rjmp	.+26     	; 0x173e <_Z11ReceiveBonev+0x60>
    1724:	85 30       	cpi	r24, 0x05	; 5
    1726:	91 05       	cpc	r25, r1
    1728:	09 f4       	brne	.+2      	; 0x172c <_Z11ReceiveBonev+0x4e>
    172a:	b3 c1       	rjmp	.+870    	; 0x1a92 <_Z11ReceiveBonev+0x3b4>
    172c:	85 30       	cpi	r24, 0x05	; 5
    172e:	91 05       	cpc	r25, r1
    1730:	08 f4       	brcc	.+2      	; 0x1734 <_Z11ReceiveBonev+0x56>
    1732:	a4 c1       	rjmp	.+840    	; 0x1a7c <_Z11ReceiveBonev+0x39e>
    1734:	86 30       	cpi	r24, 0x06	; 6
    1736:	91 05       	cpc	r25, r1
    1738:	09 f4       	brne	.+2      	; 0x173c <_Z11ReceiveBonev+0x5e>
    173a:	b6 c1       	rjmp	.+876    	; 0x1aa8 <_Z11ReceiveBonev+0x3ca>
    173c:	bc c1       	rjmp	.+888    	; 0x1ab6 <_Z11ReceiveBonev+0x3d8>
				case 0:{
					strLoc=0;
    173e:	19 8e       	std	Y+25, r1	; 0x19
    1740:	18 8e       	std	Y+24, r1	; 0x18
					recChar = UDR0;
    1742:	86 ec       	ldi	r24, 0xC6	; 198
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	fc 01       	movw	r30, r24
    1748:	80 81       	ld	r24, Z
    174a:	8a 83       	std	Y+2, r24	; 0x02
					if (recChar=='.'){
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	8e 32       	cpi	r24, 0x2E	; 46
    1750:	39 f4       	brne	.+14     	; 0x1760 <_Z11ReceiveBonev+0x82>
						state=5;
    1752:	85 e0       	ldi	r24, 0x05	; 5
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	90 93 ce 01 	sts	0x01CE, r25
    175a:	80 93 cd 01 	sts	0x01CD, r24
					} else  {recString[strLoc++]=recChar; state=1;}	
					break;				
    175e:	b3 c1       	rjmp	.+870    	; 0x1ac6 <_Z11ReceiveBonev+0x3e8>
				case 0:{
					strLoc=0;
					recChar = UDR0;
					if (recChar=='.'){
						state=5;
					} else  {recString[strLoc++]=recChar; state=1;}	
    1760:	88 8d       	ldd	r24, Y+24	; 0x18
    1762:	99 8d       	ldd	r25, Y+25	; 0x19
    1764:	9e 01       	movw	r18, r28
    1766:	2c 5f       	subi	r18, 0xFC	; 252
    1768:	3f 4f       	sbci	r19, 0xFF	; 255
    176a:	28 0f       	add	r18, r24
    176c:	39 1f       	adc	r19, r25
    176e:	4a 81       	ldd	r20, Y+2	; 0x02
    1770:	f9 01       	movw	r30, r18
    1772:	40 83       	st	Z, r20
    1774:	01 96       	adiw	r24, 0x01	; 1
    1776:	99 8f       	std	Y+25, r25	; 0x19
    1778:	88 8f       	std	Y+24, r24	; 0x18
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	90 93 ce 01 	sts	0x01CE, r25
    1782:	80 93 cd 01 	sts	0x01CD, r24
					break;				
    1786:	9f c1       	rjmp	.+830    	; 0x1ac6 <_Z11ReceiveBonev+0x3e8>
					}//end case 0
				case 1:{
					while (noCarriage && flagReceivingBone){	//while there isn't a timeout and no carry
						while (!(UCSR0A & (1 << RXC0)) && flagReceivingBone);		//get the next character
    1788:	00 00       	nop
    178a:	80 ec       	ldi	r24, 0xC0	; 192
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	fc 01       	movw	r30, r24
    1790:	80 81       	ld	r24, Z
    1792:	88 23       	and	r24, r24
    1794:	34 f0       	brlt	.+12     	; 0x17a2 <_Z11ReceiveBonev+0xc4>
    1796:	80 91 b3 01 	lds	r24, 0x01B3
    179a:	88 23       	and	r24, r24
    179c:	11 f0       	breq	.+4      	; 0x17a2 <_Z11ReceiveBonev+0xc4>
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	01 c0       	rjmp	.+2      	; 0x17a4 <_Z11ReceiveBonev+0xc6>
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	88 23       	and	r24, r24
    17a6:	89 f7       	brne	.-30     	; 0x178a <_Z11ReceiveBonev+0xac>
						if (!flagReceivingBone){state=0; break;}					//if there was a timeout, break out and reset state
    17a8:	80 91 b3 01 	lds	r24, 0x01B3
    17ac:	88 23       	and	r24, r24
    17ae:	31 f4       	brne	.+12     	; 0x17bc <_Z11ReceiveBonev+0xde>
    17b0:	10 92 ce 01 	sts	0x01CE, r1
    17b4:	10 92 cd 01 	sts	0x01CD, r1
    17b8:	00 00       	nop
						else{
							//recString[strLoc++]=recChar;
							if (strLoc >= 19){state=5;noCarriage=fFalse;}
						}//end if-else
					}//end while
					break;
    17ba:	85 c1       	rjmp	.+778    	; 0x1ac6 <_Z11ReceiveBonev+0x3e8>
					}//end case 0
				case 1:{
					while (noCarriage && flagReceivingBone){	//while there isn't a timeout and no carry
						while (!(UCSR0A & (1 << RXC0)) && flagReceivingBone);		//get the next character
						if (!flagReceivingBone){state=0; break;}					//if there was a timeout, break out and reset state
						recChar=UDR0;
    17bc:	86 ec       	ldi	r24, 0xC6	; 198
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	fc 01       	movw	r30, r24
    17c2:	80 81       	ld	r24, Z
    17c4:	8a 83       	std	Y+2, r24	; 0x02
						recString[strLoc++]=recChar;
    17c6:	88 8d       	ldd	r24, Y+24	; 0x18
    17c8:	99 8d       	ldd	r25, Y+25	; 0x19
    17ca:	9e 01       	movw	r18, r28
    17cc:	2c 5f       	subi	r18, 0xFC	; 252
    17ce:	3f 4f       	sbci	r19, 0xFF	; 255
    17d0:	28 0f       	add	r18, r24
    17d2:	39 1f       	adc	r19, r25
    17d4:	4a 81       	ldd	r20, Y+2	; 0x02
    17d6:	f9 01       	movw	r30, r18
    17d8:	40 83       	st	Z, r20
    17da:	01 96       	adiw	r24, 0x01	; 1
    17dc:	99 8f       	std	Y+25, r25	; 0x19
    17de:	88 8f       	std	Y+24, r24	; 0x18
						if (recChar == '.'){recString[strLoc]='\0'; noCarriage=fFalse; state=2;}
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	8e 32       	cpi	r24, 0x2E	; 46
    17e4:	89 f4       	brne	.+34     	; 0x1808 <_Z11ReceiveBonev+0x12a>
    17e6:	88 8d       	ldd	r24, Y+24	; 0x18
    17e8:	99 8d       	ldd	r25, Y+25	; 0x19
    17ea:	9e 01       	movw	r18, r28
    17ec:	2c 5f       	subi	r18, 0xFC	; 252
    17ee:	3f 4f       	sbci	r19, 0xFF	; 255
    17f0:	82 0f       	add	r24, r18
    17f2:	93 1f       	adc	r25, r19
    17f4:	fc 01       	movw	r30, r24
    17f6:	10 82       	st	Z, r1
    17f8:	19 82       	std	Y+1, r1	; 0x01
    17fa:	82 e0       	ldi	r24, 0x02	; 2
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	90 93 ce 01 	sts	0x01CE, r25
    1802:	80 93 cd 01 	sts	0x01CD, r24
    1806:	10 c0       	rjmp	.+32     	; 0x1828 <_Z11ReceiveBonev+0x14a>
						else{
							//recString[strLoc++]=recChar;
							if (strLoc >= 19){state=5;noCarriage=fFalse;}
    1808:	88 8d       	ldd	r24, Y+24	; 0x18
    180a:	99 8d       	ldd	r25, Y+25	; 0x19
    180c:	21 e0       	ldi	r18, 0x01	; 1
    180e:	83 31       	cpi	r24, 0x13	; 19
    1810:	91 05       	cpc	r25, r1
    1812:	08 f4       	brcc	.+2      	; 0x1816 <_Z11ReceiveBonev+0x138>
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	22 23       	and	r18, r18
    1818:	39 f0       	breq	.+14     	; 0x1828 <_Z11ReceiveBonev+0x14a>
    181a:	85 e0       	ldi	r24, 0x05	; 5
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	90 93 ce 01 	sts	0x01CE, r25
    1822:	80 93 cd 01 	sts	0x01CD, r24
    1826:	19 82       	std	Y+1, r1	; 0x01
						state=5;
					} else  {recString[strLoc++]=recChar; state=1;}	
					break;				
					}//end case 0
				case 1:{
					while (noCarriage && flagReceivingBone){	//while there isn't a timeout and no carry
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	88 23       	and	r24, r24
    182c:	31 f0       	breq	.+12     	; 0x183a <_Z11ReceiveBonev+0x15c>
    182e:	80 91 b3 01 	lds	r24, 0x01B3
    1832:	88 23       	and	r24, r24
    1834:	11 f0       	breq	.+4      	; 0x183a <_Z11ReceiveBonev+0x15c>
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	01 c0       	rjmp	.+2      	; 0x183c <_Z11ReceiveBonev+0x15e>
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	88 23       	and	r24, r24
    183e:	09 f0       	breq	.+2      	; 0x1842 <_Z11ReceiveBonev+0x164>
    1840:	a3 cf       	rjmp	.-186    	; 0x1788 <_Z11ReceiveBonev+0xaa>
						else{
							//recString[strLoc++]=recChar;
							if (strLoc >= 19){state=5;noCarriage=fFalse;}
						}//end if-else
					}//end while
					break;
    1842:	41 c1       	rjmp	.+642    	; 0x1ac6 <_Z11ReceiveBonev+0x3e8>
					}//end case 1
				case 2:{
					if (!strncmp(recString,"date.",5)){printTimeDate(fTrue,fFalse,fTrue); state=6;}
    1844:	ce 01       	movw	r24, r28
    1846:	04 96       	adiw	r24, 0x04	; 4
    1848:	29 e2       	ldi	r18, 0x29	; 41
    184a:	31 e0       	ldi	r19, 0x01	; 1
    184c:	b9 01       	movw	r22, r18
    184e:	45 e0       	ldi	r20, 0x05	; 5
    1850:	50 e0       	ldi	r21, 0x00	; 0
    1852:	0e 94 78 19 	call	0x32f0	; 0x32f0 <strncmp>
    1856:	00 97       	sbiw	r24, 0x00	; 0
    1858:	61 f4       	brne	.+24     	; 0x1872 <_Z11ReceiveBonev+0x194>
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	60 e0       	ldi	r22, 0x00	; 0
    185e:	41 e0       	ldi	r20, 0x01	; 1
    1860:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <_Z13printTimeDatehhh>
    1864:	86 e0       	ldi	r24, 0x06	; 6
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	90 93 ce 01 	sts	0x01CE, r25
    186c:	80 93 cd 01 	sts	0x01CD, r24
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strncmp(recString,"SYNNONE.",8)){state=3;}	
					else {state=5;}						
					break;
    1870:	29 c1       	rjmp	.+594    	; 0x1ac4 <_Z11ReceiveBonev+0x3e6>
					}//end while
					break;
					}//end case 1
				case 2:{
					if (!strncmp(recString,"date.",5)){printTimeDate(fTrue,fFalse,fTrue); state=6;}
					else if (!strncmp(recString,"time.",5)){printTimeDate(fTrue,fTrue,fFalse);state=6;}
    1872:	ce 01       	movw	r24, r28
    1874:	04 96       	adiw	r24, 0x04	; 4
    1876:	2f e2       	ldi	r18, 0x2F	; 47
    1878:	31 e0       	ldi	r19, 0x01	; 1
    187a:	b9 01       	movw	r22, r18
    187c:	45 e0       	ldi	r20, 0x05	; 5
    187e:	50 e0       	ldi	r21, 0x00	; 0
    1880:	0e 94 78 19 	call	0x32f0	; 0x32f0 <strncmp>
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	61 f4       	brne	.+24     	; 0x18a0 <_Z11ReceiveBonev+0x1c2>
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	61 e0       	ldi	r22, 0x01	; 1
    188c:	40 e0       	ldi	r20, 0x00	; 0
    188e:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <_Z13printTimeDatehhh>
    1892:	86 e0       	ldi	r24, 0x06	; 6
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	90 93 ce 01 	sts	0x01CE, r25
    189a:	80 93 cd 01 	sts	0x01CD, r24
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strncmp(recString,"SYNNONE.",8)){state=3;}	
					else {state=5;}						
					break;
    189e:	12 c1       	rjmp	.+548    	; 0x1ac4 <_Z11ReceiveBonev+0x3e6>
					break;
					}//end case 1
				case 2:{
					if (!strncmp(recString,"date.",5)){printTimeDate(fTrue,fFalse,fTrue); state=6;}
					else if (!strncmp(recString,"time.",5)){printTimeDate(fTrue,fTrue,fFalse);state=6;}
					else if (!strncmp(recString,"both.",5)){printTimeDate(fTrue,fTrue,fTrue);state=6;}
    18a0:	ce 01       	movw	r24, r28
    18a2:	04 96       	adiw	r24, 0x04	; 4
    18a4:	25 e3       	ldi	r18, 0x35	; 53
    18a6:	31 e0       	ldi	r19, 0x01	; 1
    18a8:	b9 01       	movw	r22, r18
    18aa:	45 e0       	ldi	r20, 0x05	; 5
    18ac:	50 e0       	ldi	r21, 0x00	; 0
    18ae:	0e 94 78 19 	call	0x32f0	; 0x32f0 <strncmp>
    18b2:	00 97       	sbiw	r24, 0x00	; 0
    18b4:	61 f4       	brne	.+24     	; 0x18ce <_Z11ReceiveBonev+0x1f0>
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	61 e0       	ldi	r22, 0x01	; 1
    18ba:	41 e0       	ldi	r20, 0x01	; 1
    18bc:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <_Z13printTimeDatehhh>
    18c0:	86 e0       	ldi	r24, 0x06	; 6
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	90 93 ce 01 	sts	0x01CE, r25
    18c8:	80 93 cd 01 	sts	0x01CD, r24
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strncmp(recString,"SYNNONE.",8)){state=3;}	
					else {state=5;}						
					break;
    18cc:	fb c0       	rjmp	.+502    	; 0x1ac4 <_Z11ReceiveBonev+0x3e6>
					}//end case 1
				case 2:{
					if (!strncmp(recString,"date.",5)){printTimeDate(fTrue,fFalse,fTrue); state=6;}
					else if (!strncmp(recString,"time.",5)){printTimeDate(fTrue,fTrue,fFalse);state=6;}
					else if (!strncmp(recString,"both.",5)){printTimeDate(fTrue,fTrue,fTrue);state=6;}
					else if (!strncmp(recString,"save.",5)){saveDateTime_eeprom(fTrue,fFalse);PrintBone(recString);state=6;}
    18ce:	ce 01       	movw	r24, r28
    18d0:	04 96       	adiw	r24, 0x04	; 4
    18d2:	2b e3       	ldi	r18, 0x3B	; 59
    18d4:	31 e0       	ldi	r19, 0x01	; 1
    18d6:	b9 01       	movw	r22, r18
    18d8:	45 e0       	ldi	r20, 0x05	; 5
    18da:	50 e0       	ldi	r21, 0x00	; 0
    18dc:	0e 94 78 19 	call	0x32f0	; 0x32f0 <strncmp>
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	79 f4       	brne	.+30     	; 0x1902 <_Z11ReceiveBonev+0x224>
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	60 e0       	ldi	r22, 0x00	; 0
    18e8:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
    18ec:	ce 01       	movw	r24, r28
    18ee:	04 96       	adiw	r24, 0x04	; 4
    18f0:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
    18f4:	86 e0       	ldi	r24, 0x06	; 6
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	90 93 ce 01 	sts	0x01CE, r25
    18fc:	80 93 cd 01 	sts	0x01CD, r24
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strncmp(recString,"SYNNONE.",8)){state=3;}	
					else {state=5;}						
					break;
    1900:	e1 c0       	rjmp	.+450    	; 0x1ac4 <_Z11ReceiveBonev+0x3e6>
				case 2:{
					if (!strncmp(recString,"date.",5)){printTimeDate(fTrue,fFalse,fTrue); state=6;}
					else if (!strncmp(recString,"time.",5)){printTimeDate(fTrue,fTrue,fFalse);state=6;}
					else if (!strncmp(recString,"both.",5)){printTimeDate(fTrue,fTrue,fTrue);state=6;}
					else if (!strncmp(recString,"save.",5)){saveDateTime_eeprom(fTrue,fFalse);PrintBone(recString);state=6;}
					else if (!strncmp(recString,"adc.",4)){char tempChar[7]; utoa(globalADC,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
    1902:	ce 01       	movw	r24, r28
    1904:	04 96       	adiw	r24, 0x04	; 4
    1906:	21 e4       	ldi	r18, 0x41	; 65
    1908:	31 e0       	ldi	r19, 0x01	; 1
    190a:	b9 01       	movw	r22, r18
    190c:	44 e0       	ldi	r20, 0x04	; 4
    190e:	50 e0       	ldi	r21, 0x00	; 0
    1910:	0e 94 78 19 	call	0x32f0	; 0x32f0 <strncmp>
    1914:	00 97       	sbiw	r24, 0x00	; 0
    1916:	c1 f4       	brne	.+48     	; 0x1948 <_Z11ReceiveBonev+0x26a>
    1918:	80 91 86 01 	lds	r24, 0x0186
    191c:	90 91 87 01 	lds	r25, 0x0187
    1920:	9e 01       	movw	r18, r28
    1922:	26 5e       	subi	r18, 0xE6	; 230
    1924:	3f 4f       	sbci	r19, 0xFF	; 255
    1926:	b9 01       	movw	r22, r18
    1928:	4a e0       	ldi	r20, 0x0A	; 10
    192a:	50 e0       	ldi	r21, 0x00	; 0
    192c:	0e 94 af 19 	call	0x335e	; 0x335e <utoa>
    1930:	18 a2       	lds	r17, 0x98
    1932:	ce 01       	movw	r24, r28
    1934:	4a 96       	adiw	r24, 0x1a	; 26
    1936:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
    193a:	86 e0       	ldi	r24, 0x06	; 6
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	90 93 ce 01 	sts	0x01CE, r25
    1942:	80 93 cd 01 	sts	0x01CD, r24
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strncmp(recString,"SYNNONE.",8)){state=3;}	
					else {state=5;}						
					break;
    1946:	be c0       	rjmp	.+380    	; 0x1ac4 <_Z11ReceiveBonev+0x3e6>
					if (!strncmp(recString,"date.",5)){printTimeDate(fTrue,fFalse,fTrue); state=6;}
					else if (!strncmp(recString,"time.",5)){printTimeDate(fTrue,fTrue,fFalse);state=6;}
					else if (!strncmp(recString,"both.",5)){printTimeDate(fTrue,fTrue,fTrue);state=6;}
					else if (!strncmp(recString,"save.",5)){saveDateTime_eeprom(fTrue,fFalse);PrintBone(recString);state=6;}
					else if (!strncmp(recString,"adc.",4)){char tempChar[7]; utoa(globalADC,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
					else if (!strncmp(recString,"temp.",5)){char tempChar[7]; utoa(globalTemp,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
    1948:	ce 01       	movw	r24, r28
    194a:	04 96       	adiw	r24, 0x04	; 4
    194c:	26 e4       	ldi	r18, 0x46	; 70
    194e:	31 e0       	ldi	r19, 0x01	; 1
    1950:	b9 01       	movw	r22, r18
    1952:	45 e0       	ldi	r20, 0x05	; 5
    1954:	50 e0       	ldi	r21, 0x00	; 0
    1956:	0e 94 78 19 	call	0x32f0	; 0x32f0 <strncmp>
    195a:	00 97       	sbiw	r24, 0x00	; 0
    195c:	c1 f4       	brne	.+48     	; 0x198e <_Z11ReceiveBonev+0x2b0>
    195e:	80 91 88 01 	lds	r24, 0x0188
    1962:	90 91 89 01 	lds	r25, 0x0189
    1966:	9e 01       	movw	r18, r28
    1968:	2f 5d       	subi	r18, 0xDF	; 223
    196a:	3f 4f       	sbci	r19, 0xFF	; 255
    196c:	b9 01       	movw	r22, r18
    196e:	4a e0       	ldi	r20, 0x0A	; 10
    1970:	50 e0       	ldi	r21, 0x00	; 0
    1972:	0e 94 af 19 	call	0x335e	; 0x335e <utoa>
    1976:	1f a2       	lds	r17, 0x9f
    1978:	ce 01       	movw	r24, r28
    197a:	81 96       	adiw	r24, 0x21	; 33
    197c:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
    1980:	86 e0       	ldi	r24, 0x06	; 6
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	90 93 ce 01 	sts	0x01CE, r25
    1988:	80 93 cd 01 	sts	0x01CD, r24
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strncmp(recString,"SYNNONE.",8)){state=3;}	
					else {state=5;}						
					break;
    198c:	9b c0       	rjmp	.+310    	; 0x1ac4 <_Z11ReceiveBonev+0x3e6>
					else if (!strncmp(recString,"time.",5)){printTimeDate(fTrue,fTrue,fFalse);state=6;}
					else if (!strncmp(recString,"both.",5)){printTimeDate(fTrue,fTrue,fTrue);state=6;}
					else if (!strncmp(recString,"save.",5)){saveDateTime_eeprom(fTrue,fFalse);PrintBone(recString);state=6;}
					else if (!strncmp(recString,"adc.",4)){char tempChar[7]; utoa(globalADC,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
					else if (!strncmp(recString,"temp.",5)){char tempChar[7]; utoa(globalTemp,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
					else if (recString[2] == ':'){//valid string. Update the time anyways. Comes in every 20 minutes or so...
    198e:	8e 81       	ldd	r24, Y+6	; 0x06
    1990:	8a 33       	cpi	r24, 0x3A	; 58
    1992:	09 f0       	breq	.+2      	; 0x1996 <_Z11ReceiveBonev+0x2b8>
    1994:	4b c0       	rjmp	.+150    	; 0x1a2c <_Z11ReceiveBonev+0x34e>
						BOOL success=currentTime.setTime(recString);
    1996:	8a e8       	ldi	r24, 0x8A	; 138
    1998:	91 e0       	ldi	r25, 0x01	; 1
    199a:	9e 01       	movw	r18, r28
    199c:	2c 5f       	subi	r18, 0xFC	; 252
    199e:	3f 4f       	sbci	r19, 0xFF	; 255
    19a0:	b9 01       	movw	r22, r18
    19a2:	0e 94 cc 04 	call	0x998	; 0x998 <_ZN6myTime7setTimeEPc>
    19a6:	8b 83       	std	Y+3, r24	; 0x03
						if (success){state=3;}
    19a8:	8b 81       	ldd	r24, Y+3	; 0x03
    19aa:	88 23       	and	r24, r24
    19ac:	39 f0       	breq	.+14     	; 0x19bc <_Z11ReceiveBonev+0x2de>
    19ae:	83 e0       	ldi	r24, 0x03	; 3
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	90 93 ce 01 	sts	0x01CE, r25
    19b6:	80 93 cd 01 	sts	0x01CD, r24
    19ba:	06 c0       	rjmp	.+12     	; 0x19c8 <_Z11ReceiveBonev+0x2ea>
						else {state=4;}
    19bc:	84 e0       	ldi	r24, 0x04	; 4
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	90 93 ce 01 	sts	0x01CE, r25
    19c4:	80 93 cd 01 	sts	0x01CD, r24
						
						//Decide what I need to save and which flags need to go up.	
						if (success){saveDateTime_eeprom(fTrue,fTrue); flagUpdateGAVRClock=fTrue;}		//Sends date and time just gotten from GPS
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	88 23       	and	r24, r24
    19cc:	41 f0       	breq	.+16     	; 0x19de <_Z11ReceiveBonev+0x300>
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	61 e0       	ldi	r22, 0x01	; 1
    19d2:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	80 93 b7 01 	sts	0x01B7, r24
    19dc:	19 c0       	rjmp	.+50     	; 0x1a10 <_Z11ReceiveBonev+0x332>
						else if (!success && restart){flagUpdateGAVRClock=fTrue;}						//sends eeprom time and date
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	88 23       	and	r24, r24
    19e2:	41 f4       	brne	.+16     	; 0x19f4 <_Z11ReceiveBonev+0x316>
    19e4:	80 91 c1 01 	lds	r24, 0x01C1
    19e8:	88 23       	and	r24, r24
    19ea:	21 f0       	breq	.+8      	; 0x19f4 <_Z11ReceiveBonev+0x316>
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	80 93 b7 01 	sts	0x01B7, r24
    19f2:	0e c0       	rjmp	.+28     	; 0x1a10 <_Z11ReceiveBonev+0x332>
						else if (!success && flagFreshStart && !restart){flagUserClock=fTrue;}			//need to get user time and date
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	88 23       	and	r24, r24
    19f8:	59 f4       	brne	.+22     	; 0x1a10 <_Z11ReceiveBonev+0x332>
    19fa:	80 91 c2 01 	lds	r24, 0x01C2
    19fe:	88 23       	and	r24, r24
    1a00:	39 f0       	breq	.+14     	; 0x1a10 <_Z11ReceiveBonev+0x332>
    1a02:	80 91 c1 01 	lds	r24, 0x01C1
    1a06:	88 23       	and	r24, r24
    1a08:	19 f4       	brne	.+6      	; 0x1a10 <_Z11ReceiveBonev+0x332>
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	80 93 b9 01 	sts	0x01B9, r24
						else;
						//Reset flags for startup
						if (restart){restart=fFalse;}
    1a10:	80 91 c1 01 	lds	r24, 0x01C1
    1a14:	88 23       	and	r24, r24
    1a16:	11 f0       	breq	.+4      	; 0x1a1c <_Z11ReceiveBonev+0x33e>
    1a18:	10 92 c1 01 	sts	0x01C1, r1
						if (flagFreshStart){flagFreshStart=fFalse;}	
    1a1c:	80 91 c2 01 	lds	r24, 0x01C2
    1a20:	88 23       	and	r24, r24
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <_Z11ReceiveBonev+0x348>
    1a24:	4f c0       	rjmp	.+158    	; 0x1ac4 <_Z11ReceiveBonev+0x3e6>
    1a26:	10 92 c2 01 	sts	0x01C2, r1
					} else if (!strncmp(recString,"SYNNONE.",8)){state=3;}	
					else {state=5;}						
					break;
    1a2a:	4c c0       	rjmp	.+152    	; 0x1ac4 <_Z11ReceiveBonev+0x3e6>
						else if (!success && flagFreshStart && !restart){flagUserClock=fTrue;}			//need to get user time and date
						else;
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strncmp(recString,"SYNNONE.",8)){state=3;}	
    1a2c:	ce 01       	movw	r24, r28
    1a2e:	04 96       	adiw	r24, 0x04	; 4
    1a30:	2c e4       	ldi	r18, 0x4C	; 76
    1a32:	31 e0       	ldi	r19, 0x01	; 1
    1a34:	b9 01       	movw	r22, r18
    1a36:	48 e0       	ldi	r20, 0x08	; 8
    1a38:	50 e0       	ldi	r21, 0x00	; 0
    1a3a:	0e 94 78 19 	call	0x32f0	; 0x32f0 <strncmp>
    1a3e:	00 97       	sbiw	r24, 0x00	; 0
    1a40:	39 f4       	brne	.+14     	; 0x1a50 <_Z11ReceiveBonev+0x372>
    1a42:	83 e0       	ldi	r24, 0x03	; 3
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	90 93 ce 01 	sts	0x01CE, r25
    1a4a:	80 93 cd 01 	sts	0x01CD, r24
					else {state=5;}						
					break;
    1a4e:	3a c0       	rjmp	.+116    	; 0x1ac4 <_Z11ReceiveBonev+0x3e6>
						else;
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strncmp(recString,"SYNNONE.",8)){state=3;}	
					else {state=5;}						
    1a50:	85 e0       	ldi	r24, 0x05	; 5
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	90 93 ce 01 	sts	0x01CE, r25
    1a58:	80 93 cd 01 	sts	0x01CD, r24
					break;
    1a5c:	33 c0       	rjmp	.+102    	; 0x1ac4 <_Z11ReceiveBonev+0x3e6>
					}//end case 2
				case 3:{
					//Successful receive state
					PrintBone("ACK");
    1a5e:	85 e5       	ldi	r24, 0x55	; 85
    1a60:	91 e0       	ldi	r25, 0x01	; 1
    1a62:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
					PrintBone(recString);
    1a66:	ce 01       	movw	r24, r28
    1a68:	04 96       	adiw	r24, 0x04	; 4
    1a6a:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
					state=0;
    1a6e:	10 92 ce 01 	sts	0x01CE, r1
    1a72:	10 92 cd 01 	sts	0x01CD, r1
					flagReceivingBone=fFalse;
    1a76:	10 92 b3 01 	sts	0x01B3, r1
					break;
    1a7a:	25 c0       	rjmp	.+74     	; 0x1ac6 <_Z11ReceiveBonev+0x3e8>
					}//end case 3
				case 4:{
					PrintBone("ACKBAD.");
    1a7c:	8d e0       	ldi	r24, 0x0D	; 13
    1a7e:	91 e0       	ldi	r25, 0x01	; 1
    1a80:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
					flagReceivingBone=fFalse;
    1a84:	10 92 b3 01 	sts	0x01B3, r1
					state=0;
    1a88:	10 92 ce 01 	sts	0x01CE, r1
    1a8c:	10 92 cd 01 	sts	0x01CD, r1
					break;
    1a90:	1a c0       	rjmp	.+52     	; 0x1ac6 <_Z11ReceiveBonev+0x3e8>
					}//end case 4
				case 5:{
					PrintBone("ACKERROR.");
    1a92:	89 e5       	ldi	r24, 0x59	; 89
    1a94:	91 e0       	ldi	r25, 0x01	; 1
    1a96:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
					flagReceivingBone=fFalse;
    1a9a:	10 92 b3 01 	sts	0x01B3, r1
					state=0;
    1a9e:	10 92 ce 01 	sts	0x01CE, r1
    1aa2:	10 92 cd 01 	sts	0x01CD, r1
					break;
    1aa6:	0f c0       	rjmp	.+30     	; 0x1ac6 <_Z11ReceiveBonev+0x3e8>
					}//end case 5
				case 6:{
					flagReceivingBone=fFalse;
    1aa8:	10 92 b3 01 	sts	0x01B3, r1
					state=0;
    1aac:	10 92 ce 01 	sts	0x01CE, r1
    1ab0:	10 92 cd 01 	sts	0x01CD, r1
					break;
    1ab4:	08 c0       	rjmp	.+16     	; 0x1ac6 <_Z11ReceiveBonev+0x3e8>
					}//end case 6
				default:{flagReceivingBone=fFalse; state=0;break;}
    1ab6:	10 92 b3 01 	sts	0x01B3, r1
    1aba:	10 92 ce 01 	sts	0x01CE, r1
    1abe:	10 92 cd 01 	sts	0x01CD, r1
    1ac2:	01 c0       	rjmp	.+2      	; 0x1ac6 <_Z11ReceiveBonev+0x3e8>
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strncmp(recString,"SYNNONE.",8)){state=3;}	
					else {state=5;}						
					break;
    1ac4:	00 00       	nop
	volatile static unsigned int state=0;
	char recChar, recString[20];
	volatile unsigned int strLoc=0;
	BOOL noCarriage=fTrue;
	
	while (flagReceivingBone){
    1ac6:	90 91 b3 01 	lds	r25, 0x01B3
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	99 23       	and	r25, r25
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <_Z11ReceiveBonev+0x3f4>
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	88 23       	and	r24, r24
    1ad4:	09 f0       	breq	.+2      	; 0x1ad8 <_Z11ReceiveBonev+0x3fa>
    1ad6:	12 ce       	rjmp	.-988    	; 0x16fc <_Z11ReceiveBonev+0x1e>
					break;
					}//end case 6
				default:{flagReceivingBone=fFalse; state=0;break;}
			}//end switch
	}//end while(flagUARTbone)	
}//end ReceiveBone()
    1ad8:	a7 96       	adiw	r28, 0x27	; 39
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	df 91       	pop	r29
    1ae6:	cf 91       	pop	r28
    1ae8:	08 95       	ret

00001aea <_Z11ReceiveGAVRv>:

/*************************************************************************************************************/
void ReceiveGAVR(){
    1aea:	cf 93       	push	r28
    1aec:	df 93       	push	r29
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	e9 97       	sbiw	r28, 0x39	; 57
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	cd bf       	out	0x3d, r28	; 61
	volatile static unsigned int state=0;
	char recChar, recString[20];
	volatile unsigned int strLoc=0;
    1afe:	18 a6       	lds	r17, 0xb8
    1b00:	1f a2       	lds	r17, 0x9f
	BOOL noCarriage=fTrue;
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	89 83       	std	Y+1, r24	; 0x01
	
	//While Loop
	while (flagReceivingGAVR){
    1b06:	5c c3       	rjmp	.+1720   	; 0x21c0 <_Z11ReceiveGAVRv+0x6d6>
			/** State 5: Exit case. Lower "flagReceivingGAVR" which causes and exit.													   **/
			/** State 6: ACKERROR state. Send "ACKERROR", then exit through state 5.													   **/
			/** State 7: Successful acquire of time/date.
			/** Default: Set state to 0, doesn't really matter though. Exit signalling timeout to sender.								   **/
			/********************************************************************************************************************************/			
			switch(state){
    1b08:	80 91 cb 01 	lds	r24, 0x01CB
    1b0c:	90 91 cc 01 	lds	r25, 0x01CC
    1b10:	83 30       	cpi	r24, 0x03	; 3
    1b12:	91 05       	cpc	r25, r1
    1b14:	09 f4       	brne	.+2      	; 0x1b18 <_Z11ReceiveGAVRv+0x2e>
    1b16:	cd c0       	rjmp	.+410    	; 0x1cb2 <_Z11ReceiveGAVRv+0x1c8>
    1b18:	84 30       	cpi	r24, 0x04	; 4
    1b1a:	91 05       	cpc	r25, r1
    1b1c:	48 f4       	brcc	.+18     	; 0x1b30 <_Z11ReceiveGAVRv+0x46>
    1b1e:	81 30       	cpi	r24, 0x01	; 1
    1b20:	91 05       	cpc	r25, r1
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <_Z11ReceiveGAVRv+0x3c>
    1b24:	8b c0       	rjmp	.+278    	; 0x1c3c <_Z11ReceiveGAVRv+0x152>
    1b26:	82 30       	cpi	r24, 0x02	; 2
    1b28:	91 05       	cpc	r25, r1
    1b2a:	08 f0       	brcs	.+2      	; 0x1b2e <_Z11ReceiveGAVRv+0x44>
    1b2c:	95 c0       	rjmp	.+298    	; 0x1c58 <_Z11ReceiveGAVRv+0x16e>
    1b2e:	11 c0       	rjmp	.+34     	; 0x1b52 <_Z11ReceiveGAVRv+0x68>
    1b30:	85 30       	cpi	r24, 0x05	; 5
    1b32:	91 05       	cpc	r25, r1
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <_Z11ReceiveGAVRv+0x4e>
    1b36:	18 c3       	rjmp	.+1584   	; 0x2168 <_Z11ReceiveGAVRv+0x67e>
    1b38:	85 30       	cpi	r24, 0x05	; 5
    1b3a:	91 05       	cpc	r25, r1
    1b3c:	08 f4       	brcc	.+2      	; 0x1b40 <_Z11ReceiveGAVRv+0x56>
    1b3e:	fd c2       	rjmp	.+1530   	; 0x213a <_Z11ReceiveGAVRv+0x650>
    1b40:	86 30       	cpi	r24, 0x06	; 6
    1b42:	91 05       	cpc	r25, r1
    1b44:	09 f4       	brne	.+2      	; 0x1b48 <_Z11ReceiveGAVRv+0x5e>
    1b46:	17 c3       	rjmp	.+1582   	; 0x2176 <_Z11ReceiveGAVRv+0x68c>
    1b48:	87 30       	cpi	r24, 0x07	; 7
    1b4a:	91 05       	cpc	r25, r1
    1b4c:	09 f4       	brne	.+2      	; 0x1b50 <_Z11ReceiveGAVRv+0x66>
    1b4e:	1e c3       	rjmp	.+1596   	; 0x218c <_Z11ReceiveGAVRv+0x6a2>
    1b50:	2e c3       	rjmp	.+1628   	; 0x21ae <_Z11ReceiveGAVRv+0x6c4>
				case 0:{
					//Beginning case
					strLoc=0;
    1b52:	18 a6       	lds	r17, 0xb8
    1b54:	1f a2       	lds	r17, 0x9f
					recChar = UDR1;
    1b56:	8e ec       	ldi	r24, 0xCE	; 206
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	80 81       	ld	r24, Z
    1b5e:	8a 8b       	std	Y+18, r24	; 0x12
					if (recChar=='.'){
    1b60:	8a 89       	ldd	r24, Y+18	; 0x12
    1b62:	8e 32       	cpi	r24, 0x2E	; 46
    1b64:	39 f4       	brne	.+14     	; 0x1b74 <_Z11ReceiveGAVRv+0x8a>
						state=6;															//Go to error state.
    1b66:	86 e0       	ldi	r24, 0x06	; 6
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	90 93 cc 01 	sts	0x01CC, r25
    1b6e:	80 93 cb 01 	sts	0x01CB, r24
					} else  {recString[strLoc++]=recChar; state=1;}							//Add to string, go to state 2
					break;
    1b72:	26 c3       	rjmp	.+1612   	; 0x21c0 <_Z11ReceiveGAVRv+0x6d6>
					//Beginning case
					strLoc=0;
					recChar = UDR1;
					if (recChar=='.'){
						state=6;															//Go to error state.
					} else  {recString[strLoc++]=recChar; state=1;}							//Add to string, go to state 2
    1b74:	8f a1       	lds	r24, 0x4f
    1b76:	98 a5       	lds	r25, 0x68
    1b78:	9e 01       	movw	r18, r28
    1b7a:	2d 5e       	subi	r18, 0xED	; 237
    1b7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7e:	28 0f       	add	r18, r24
    1b80:	39 1f       	adc	r19, r25
    1b82:	4a 89       	ldd	r20, Y+18	; 0x12
    1b84:	f9 01       	movw	r30, r18
    1b86:	40 83       	st	Z, r20
    1b88:	01 96       	adiw	r24, 0x01	; 1
    1b8a:	98 a7       	lds	r25, 0x78
    1b8c:	8f a3       	lds	r24, 0x5f
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	90 93 cc 01 	sts	0x01CC, r25
    1b96:	80 93 cb 01 	sts	0x01CB, r24
					break;
    1b9a:	12 c3       	rjmp	.+1572   	; 0x21c0 <_Z11ReceiveGAVRv+0x6d6>
				}//end case 0
				case 1:{
					//Assemble string case
					while (noCarriage && flagReceivingBone){	//while there isn't a timeout and no carry
						while (!(UCSR1A & (1 << RXC1)) && flagReceivingBone);				//get the next character
    1b9c:	00 00       	nop
    1b9e:	88 ec       	ldi	r24, 0xC8	; 200
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	80 81       	ld	r24, Z
    1ba6:	88 23       	and	r24, r24
    1ba8:	34 f0       	brlt	.+12     	; 0x1bb6 <_Z11ReceiveGAVRv+0xcc>
    1baa:	80 91 b3 01 	lds	r24, 0x01B3
    1bae:	88 23       	and	r24, r24
    1bb0:	11 f0       	breq	.+4      	; 0x1bb6 <_Z11ReceiveGAVRv+0xcc>
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	01 c0       	rjmp	.+2      	; 0x1bb8 <_Z11ReceiveGAVRv+0xce>
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	88 23       	and	r24, r24
    1bba:	89 f7       	brne	.-30     	; 0x1b9e <_Z11ReceiveGAVRv+0xb4>
						if (!flagReceivingBone){state=0; break;}							//if there was a timeout, break out and reset state
    1bbc:	80 91 b3 01 	lds	r24, 0x01B3
    1bc0:	88 23       	and	r24, r24
    1bc2:	31 f4       	brne	.+12     	; 0x1bd0 <_Z11ReceiveGAVRv+0xe6>
    1bc4:	10 92 cc 01 	sts	0x01CC, r1
    1bc8:	10 92 cb 01 	sts	0x01CB, r1
    1bcc:	00 00       	nop
						recString[strLoc++]=recChar;										//'.' always included into recString
						if (recChar == '.'){recString[strLoc]='\0'; noCarriage=fFalse; state=2;}
						else if(strLoc >= 19){state=6;noCarriage=fFalse;}
						else;//end if-elseif-else
					}//end while
					break;
    1bce:	f8 c2       	rjmp	.+1520   	; 0x21c0 <_Z11ReceiveGAVRv+0x6d6>
				case 1:{
					//Assemble string case
					while (noCarriage && flagReceivingBone){	//while there isn't a timeout and no carry
						while (!(UCSR1A & (1 << RXC1)) && flagReceivingBone);				//get the next character
						if (!flagReceivingBone){state=0; break;}							//if there was a timeout, break out and reset state
						recChar=UDR1;
    1bd0:	8e ec       	ldi	r24, 0xCE	; 206
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	80 81       	ld	r24, Z
    1bd8:	8a 8b       	std	Y+18, r24	; 0x12
						recString[strLoc++]=recChar;										//'.' always included into recString
    1bda:	8f a1       	lds	r24, 0x4f
    1bdc:	98 a5       	lds	r25, 0x68
    1bde:	9e 01       	movw	r18, r28
    1be0:	2d 5e       	subi	r18, 0xED	; 237
    1be2:	3f 4f       	sbci	r19, 0xFF	; 255
    1be4:	28 0f       	add	r18, r24
    1be6:	39 1f       	adc	r19, r25
    1be8:	4a 89       	ldd	r20, Y+18	; 0x12
    1bea:	f9 01       	movw	r30, r18
    1bec:	40 83       	st	Z, r20
    1bee:	01 96       	adiw	r24, 0x01	; 1
    1bf0:	98 a7       	lds	r25, 0x78
    1bf2:	8f a3       	lds	r24, 0x5f
						if (recChar == '.'){recString[strLoc]='\0'; noCarriage=fFalse; state=2;}
    1bf4:	8a 89       	ldd	r24, Y+18	; 0x12
    1bf6:	8e 32       	cpi	r24, 0x2E	; 46
    1bf8:	89 f4       	brne	.+34     	; 0x1c1c <_Z11ReceiveGAVRv+0x132>
    1bfa:	8f a1       	lds	r24, 0x4f
    1bfc:	98 a5       	lds	r25, 0x68
    1bfe:	9e 01       	movw	r18, r28
    1c00:	2d 5e       	subi	r18, 0xED	; 237
    1c02:	3f 4f       	sbci	r19, 0xFF	; 255
    1c04:	82 0f       	add	r24, r18
    1c06:	93 1f       	adc	r25, r19
    1c08:	fc 01       	movw	r30, r24
    1c0a:	10 82       	st	Z, r1
    1c0c:	19 82       	std	Y+1, r1	; 0x01
    1c0e:	82 e0       	ldi	r24, 0x02	; 2
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	90 93 cc 01 	sts	0x01CC, r25
    1c16:	80 93 cb 01 	sts	0x01CB, r24
    1c1a:	10 c0       	rjmp	.+32     	; 0x1c3c <_Z11ReceiveGAVRv+0x152>
						else if(strLoc >= 19){state=6;noCarriage=fFalse;}
    1c1c:	8f a1       	lds	r24, 0x4f
    1c1e:	98 a5       	lds	r25, 0x68
    1c20:	21 e0       	ldi	r18, 0x01	; 1
    1c22:	83 31       	cpi	r24, 0x13	; 19
    1c24:	91 05       	cpc	r25, r1
    1c26:	08 f4       	brcc	.+2      	; 0x1c2a <_Z11ReceiveGAVRv+0x140>
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	22 23       	and	r18, r18
    1c2c:	39 f0       	breq	.+14     	; 0x1c3c <_Z11ReceiveGAVRv+0x152>
    1c2e:	86 e0       	ldi	r24, 0x06	; 6
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	90 93 cc 01 	sts	0x01CC, r25
    1c36:	80 93 cb 01 	sts	0x01CB, r24
    1c3a:	19 82       	std	Y+1, r1	; 0x01
					} else  {recString[strLoc++]=recChar; state=1;}							//Add to string, go to state 2
					break;
				}//end case 0
				case 1:{
					//Assemble string case
					while (noCarriage && flagReceivingBone){	//while there isn't a timeout and no carry
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	88 23       	and	r24, r24
    1c40:	31 f0       	breq	.+12     	; 0x1c4e <_Z11ReceiveGAVRv+0x164>
    1c42:	80 91 b3 01 	lds	r24, 0x01B3
    1c46:	88 23       	and	r24, r24
    1c48:	11 f0       	breq	.+4      	; 0x1c4e <_Z11ReceiveGAVRv+0x164>
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	01 c0       	rjmp	.+2      	; 0x1c50 <_Z11ReceiveGAVRv+0x166>
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	88 23       	and	r24, r24
    1c52:	09 f0       	breq	.+2      	; 0x1c56 <_Z11ReceiveGAVRv+0x16c>
    1c54:	a3 cf       	rjmp	.-186    	; 0x1b9c <_Z11ReceiveGAVRv+0xb2>
						recString[strLoc++]=recChar;										//'.' always included into recString
						if (recChar == '.'){recString[strLoc]='\0'; noCarriage=fFalse; state=2;}
						else if(strLoc >= 19){state=6;noCarriage=fFalse;}
						else;//end if-elseif-else
					}//end while
					break;
    1c56:	b4 c2       	rjmp	.+1384   	; 0x21c0 <_Z11ReceiveGAVRv+0x6d6>
				}//end case 1
				case 2:{
					//Got string, see what it is case.
					if (!strncmp(recString,"SYNNEED.",8)){state=4;} //set appropriate flags and respond in appropriate way.
    1c58:	ce 01       	movw	r24, r28
    1c5a:	43 96       	adiw	r24, 0x13	; 19
    1c5c:	23 e6       	ldi	r18, 0x63	; 99
    1c5e:	31 e0       	ldi	r19, 0x01	; 1
    1c60:	b9 01       	movw	r22, r18
    1c62:	48 e0       	ldi	r20, 0x08	; 8
    1c64:	50 e0       	ldi	r21, 0x00	; 0
    1c66:	0e 94 78 19 	call	0x32f0	; 0x32f0 <strncmp>
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	39 f4       	brne	.+14     	; 0x1c7c <_Z11ReceiveGAVRv+0x192>
    1c6e:	84 e0       	ldi	r24, 0x04	; 4
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	90 93 cc 01 	sts	0x01CC, r25
    1c76:	80 93 cb 01 	sts	0x01CB, r24
					else if ((recString[4]==':') != (recString[5]==':')){state=3;}//go parse the string for a time and date. SYN03:33:12/DATE or SYN3:33:12/DATE, either char 4 or 5 is :
					else {state=6;}
					break;
    1c7a:	a2 c2       	rjmp	.+1348   	; 0x21c0 <_Z11ReceiveGAVRv+0x6d6>
					break;
				}//end case 1
				case 2:{
					//Got string, see what it is case.
					if (!strncmp(recString,"SYNNEED.",8)){state=4;} //set appropriate flags and respond in appropriate way.
					else if ((recString[4]==':') != (recString[5]==':')){state=3;}//go parse the string for a time and date. SYN03:33:12/DATE or SYN3:33:12/DATE, either char 4 or 5 is :
    1c7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c7e:	91 e0       	ldi	r25, 0x01	; 1
    1c80:	8a 33       	cpi	r24, 0x3A	; 58
    1c82:	09 f0       	breq	.+2      	; 0x1c86 <_Z11ReceiveGAVRv+0x19c>
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	28 8d       	ldd	r18, Y+24	; 0x18
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	2a 33       	cpi	r18, 0x3A	; 58
    1c8c:	09 f0       	breq	.+2      	; 0x1c90 <_Z11ReceiveGAVRv+0x1a6>
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	89 27       	eor	r24, r25
    1c92:	88 23       	and	r24, r24
    1c94:	39 f0       	breq	.+14     	; 0x1ca4 <_Z11ReceiveGAVRv+0x1ba>
    1c96:	83 e0       	ldi	r24, 0x03	; 3
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	90 93 cc 01 	sts	0x01CC, r25
    1c9e:	80 93 cb 01 	sts	0x01CB, r24
					else {state=6;}
					break;
    1ca2:	8e c2       	rjmp	.+1308   	; 0x21c0 <_Z11ReceiveGAVRv+0x6d6>
				}//end case 1
				case 2:{
					//Got string, see what it is case.
					if (!strncmp(recString,"SYNNEED.",8)){state=4;} //set appropriate flags and respond in appropriate way.
					else if ((recString[4]==':') != (recString[5]==':')){state=3;}//go parse the string for a time and date. SYN03:33:12/DATE or SYN3:33:12/DATE, either char 4 or 5 is :
					else {state=6;}
    1ca4:	86 e0       	ldi	r24, 0x06	; 6
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	90 93 cc 01 	sts	0x01CC, r25
    1cac:	80 93 cb 01 	sts	0x01CB, r24
					break;
    1cb0:	87 c2       	rjmp	.+1294   	; 0x21c0 <_Z11ReceiveGAVRv+0x6d6>
				}//end case 2
				case 3:{
					//Parse for date/time case
					if (flagUserClock){
    1cb2:	80 91 b9 01 	lds	r24, 0x01B9
    1cb6:	88 23       	and	r24, r24
    1cb8:	09 f4       	brne	.+2      	; 0x1cbc <_Z11ReceiveGAVRv+0x1d2>
    1cba:	34 c2       	rjmp	.+1128   	; 0x2124 <_Z11ReceiveGAVRv+0x63a>
						//Go through the string and parse for the time. Must go through the time to get the date.
						BOOL successTime=fFalse, successDate=fFalse;			//whether or not we have successfully parsed string
    1cbc:	1a 82       	std	Y+2, r1	; 0x02
    1cbe:	1b 82       	std	Y+3, r1	; 0x03
						int counter=0;
    1cc0:	1d 82       	std	Y+5, r1	; 0x05
    1cc2:	1c 82       	std	Y+4, r1	; 0x04
						int tempNum[3]={0,0,0}, tempNum1[3]={0,0,0},dmy=0, hms=0, placement=0;
    1cc4:	1a a6       	lds	r17, 0xba
    1cc6:	19 a6       	lds	r17, 0xb9
    1cc8:	1c a6       	lds	r17, 0xbc
    1cca:	1b a6       	lds	r17, 0xbb
    1ccc:	1e a6       	lds	r17, 0xbe
    1cce:	1d a6       	lds	r17, 0xbd
    1cd0:	18 aa       	sts	0x98, r17
    1cd2:	1f a6       	lds	r17, 0xbf
    1cd4:	1a aa       	sts	0x9a, r17
    1cd6:	19 aa       	sts	0x99, r17
    1cd8:	1c aa       	sts	0x9c, r17
    1cda:	1b aa       	sts	0x9b, r17
    1cdc:	1f 82       	std	Y+7, r1	; 0x07
    1cde:	1e 82       	std	Y+6, r1	; 0x06
    1ce0:	19 86       	std	Y+9, r1	; 0x09
    1ce2:	18 86       	std	Y+8, r1	; 0x08
    1ce4:	1b 86       	std	Y+11, r1	; 0x0b
    1ce6:	1a 86       	std	Y+10, r1	; 0x0a
						char tempStringNum[5];
						
						//Parse the string for the time. Always looks for the time. If not end of string or '/' indicating start of date, continue
						while (recString[counter] != '/' && recString[counter] != '\0'){
    1ce8:	73 c0       	rjmp	.+230    	; 0x1dd0 <_Z11ReceiveGAVRv+0x2e6>
							//If the character isn't a colon, we haven't gotten 3 int values add to tempStringNum
							if (recString[counter]!=':' && hms<3){
    1cea:	9e 01       	movw	r18, r28
    1cec:	2d 5e       	subi	r18, 0xED	; 237
    1cee:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf4:	82 0f       	add	r24, r18
    1cf6:	93 1f       	adc	r25, r19
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	80 81       	ld	r24, Z
    1cfc:	8a 33       	cpi	r24, 0x3A	; 58
    1cfe:	e9 f0       	breq	.+58     	; 0x1d3a <_Z11ReceiveGAVRv+0x250>
    1d00:	88 85       	ldd	r24, Y+8	; 0x08
    1d02:	99 85       	ldd	r25, Y+9	; 0x09
    1d04:	83 30       	cpi	r24, 0x03	; 3
    1d06:	91 05       	cpc	r25, r1
    1d08:	c4 f4       	brge	.+48     	; 0x1d3a <_Z11ReceiveGAVRv+0x250>
								tempStringNum[placement++]=recString[counter];
    1d0a:	9e 01       	movw	r18, r28
    1d0c:	2d 5e       	subi	r18, 0xED	; 237
    1d0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d10:	8c 81       	ldd	r24, Y+4	; 0x04
    1d12:	9d 81       	ldd	r25, Y+5	; 0x05
    1d14:	82 0f       	add	r24, r18
    1d16:	93 1f       	adc	r25, r19
    1d18:	fc 01       	movw	r30, r24
    1d1a:	40 81       	ld	r20, Z
    1d1c:	9e 01       	movw	r18, r28
    1d1e:	2b 5c       	subi	r18, 0xCB	; 203
    1d20:	3f 4f       	sbci	r19, 0xFF	; 255
    1d22:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d24:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d26:	82 0f       	add	r24, r18
    1d28:	93 1f       	adc	r25, r19
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	40 83       	st	Z, r20
    1d2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d30:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d32:	01 96       	adiw	r24, 0x01	; 1
    1d34:	9b 87       	std	Y+11, r25	; 0x0b
    1d36:	8a 87       	std	Y+10, r24	; 0x0a
    1d38:	46 c0       	rjmp	.+140    	; 0x1dc6 <_Z11ReceiveGAVRv+0x2dc>
							//If haven't gotten 3 int's and character is colon, store int(stringNum) into tempNum[<current time param>]
							} else if (hms<2 && recString[counter] == ':') {
    1d3a:	88 85       	ldd	r24, Y+8	; 0x08
    1d3c:	99 85       	ldd	r25, Y+9	; 0x09
    1d3e:	82 30       	cpi	r24, 0x02	; 2
    1d40:	91 05       	cpc	r25, r1
    1d42:	0c f0       	brlt	.+2      	; 0x1d46 <_Z11ReceiveGAVRv+0x25c>
    1d44:	40 c0       	rjmp	.+128    	; 0x1dc6 <_Z11ReceiveGAVRv+0x2dc>
    1d46:	9e 01       	movw	r18, r28
    1d48:	2d 5e       	subi	r18, 0xED	; 237
    1d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d50:	82 0f       	add	r24, r18
    1d52:	93 1f       	adc	r25, r19
    1d54:	fc 01       	movw	r30, r24
    1d56:	80 81       	ld	r24, Z
    1d58:	8a 33       	cpi	r24, 0x3A	; 58
    1d5a:	a9 f5       	brne	.+106    	; 0x1dc6 <_Z11ReceiveGAVRv+0x2dc>
								tempNum[hms++] = atoi(tempStringNum);
    1d5c:	ce 01       	movw	r24, r28
    1d5e:	c5 96       	adiw	r24, 0x35	; 53
    1d60:	0e 94 3f 19 	call	0x327e	; 0x327e <atoi>
    1d64:	9c 01       	movw	r18, r24
    1d66:	88 85       	ldd	r24, Y+8	; 0x08
    1d68:	99 85       	ldd	r25, Y+9	; 0x09
    1d6a:	88 0f       	add	r24, r24
    1d6c:	99 1f       	adc	r25, r25
    1d6e:	ae 01       	movw	r20, r28
    1d70:	4f 5f       	subi	r20, 0xFF	; 255
    1d72:	5f 4f       	sbci	r21, 0xFF	; 255
    1d74:	84 0f       	add	r24, r20
    1d76:	95 1f       	adc	r25, r21
    1d78:	88 96       	adiw	r24, 0x28	; 40
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	31 83       	std	Z+1, r19	; 0x01
    1d7e:	20 83       	st	Z, r18
    1d80:	88 85       	ldd	r24, Y+8	; 0x08
    1d82:	99 85       	ldd	r25, Y+9	; 0x09
    1d84:	01 96       	adiw	r24, 0x01	; 1
    1d86:	99 87       	std	Y+9, r25	; 0x09
    1d88:	88 87       	std	Y+8, r24	; 0x08
								for (int j=0; j <= placement; j++){tempStringNum[j]=NULL;}	//reset the string
    1d8a:	1d 86       	std	Y+13, r1	; 0x0d
    1d8c:	1c 86       	std	Y+12, r1	; 0x0c
    1d8e:	0e c0       	rjmp	.+28     	; 0x1dac <_Z11ReceiveGAVRv+0x2c2>
    1d90:	9e 01       	movw	r18, r28
    1d92:	2b 5c       	subi	r18, 0xCB	; 203
    1d94:	3f 4f       	sbci	r19, 0xFF	; 255
    1d96:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d98:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d9a:	82 0f       	add	r24, r18
    1d9c:	93 1f       	adc	r25, r19
    1d9e:	fc 01       	movw	r30, r24
    1da0:	10 82       	st	Z, r1
    1da2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1da4:	9d 85       	ldd	r25, Y+13	; 0x0d
    1da6:	01 96       	adiw	r24, 0x01	; 1
    1da8:	9d 87       	std	Y+13, r25	; 0x0d
    1daa:	8c 87       	std	Y+12, r24	; 0x0c
    1dac:	41 e0       	ldi	r20, 0x01	; 1
    1dae:	2c 85       	ldd	r18, Y+12	; 0x0c
    1db0:	3d 85       	ldd	r19, Y+13	; 0x0d
    1db2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1db4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1db6:	82 17       	cp	r24, r18
    1db8:	93 07       	cpc	r25, r19
    1dba:	0c f4       	brge	.+2      	; 0x1dbe <_Z11ReceiveGAVRv+0x2d4>
    1dbc:	40 e0       	ldi	r20, 0x00	; 0
    1dbe:	44 23       	and	r20, r20
    1dc0:	39 f7       	brne	.-50     	; 0x1d90 <_Z11ReceiveGAVRv+0x2a6>
								placement=0;												//reset placement
    1dc2:	1b 86       	std	Y+11, r1	; 0x0b
    1dc4:	1a 86       	std	Y+10, r1	; 0x0a
							//If nothing else, somethign is wrong but it won't matter because we'll eventually hit \0 and exit with ACKBAD
							} else;
							counter++;
    1dc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dca:	01 96       	adiw	r24, 0x01	; 1
    1dcc:	9d 83       	std	Y+5, r25	; 0x05
    1dce:	8c 83       	std	Y+4, r24	; 0x04
						int counter=0;
						int tempNum[3]={0,0,0}, tempNum1[3]={0,0,0},dmy=0, hms=0, placement=0;
						char tempStringNum[5];
						
						//Parse the string for the time. Always looks for the time. If not end of string or '/' indicating start of date, continue
						while (recString[counter] != '/' && recString[counter] != '\0'){
    1dd0:	9e 01       	movw	r18, r28
    1dd2:	2d 5e       	subi	r18, 0xED	; 237
    1dd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dda:	82 0f       	add	r24, r18
    1ddc:	93 1f       	adc	r25, r19
    1dde:	fc 01       	movw	r30, r24
    1de0:	80 81       	ld	r24, Z
    1de2:	8f 32       	cpi	r24, 0x2F	; 47
    1de4:	69 f0       	breq	.+26     	; 0x1e00 <_Z11ReceiveGAVRv+0x316>
    1de6:	9e 01       	movw	r18, r28
    1de8:	2d 5e       	subi	r18, 0xED	; 237
    1dea:	3f 4f       	sbci	r19, 0xFF	; 255
    1dec:	8c 81       	ldd	r24, Y+4	; 0x04
    1dee:	9d 81       	ldd	r25, Y+5	; 0x05
    1df0:	82 0f       	add	r24, r18
    1df2:	93 1f       	adc	r25, r19
    1df4:	fc 01       	movw	r30, r24
    1df6:	80 81       	ld	r24, Z
    1df8:	88 23       	and	r24, r24
    1dfa:	11 f0       	breq	.+4      	; 0x1e00 <_Z11ReceiveGAVRv+0x316>
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	01 c0       	rjmp	.+2      	; 0x1e02 <_Z11ReceiveGAVRv+0x318>
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	88 23       	and	r24, r24
    1e04:	09 f0       	breq	.+2      	; 0x1e08 <_Z11ReceiveGAVRv+0x31e>
    1e06:	71 cf       	rjmp	.-286    	; 0x1cea <_Z11ReceiveGAVRv+0x200>
							//If nothing else, somethign is wrong but it won't matter because we'll eventually hit \0 and exit with ACKBAD
							} else;
							counter++;
						}//end while
						//Found a '/', assign tempNum otherwise exit with ACKBAD
						if (recString[counter] == '/'){
    1e08:	9e 01       	movw	r18, r28
    1e0a:	2d 5e       	subi	r18, 0xED	; 237
    1e0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e10:	9d 81       	ldd	r25, Y+5	; 0x05
    1e12:	82 0f       	add	r24, r18
    1e14:	93 1f       	adc	r25, r19
    1e16:	fc 01       	movw	r30, r24
    1e18:	80 81       	ld	r24, Z
    1e1a:	8f 32       	cpi	r24, 0x2F	; 47
    1e1c:	a9 f4       	brne	.+42     	; 0x1e48 <_Z11ReceiveGAVRv+0x35e>
							tempNum[hms] = atoi(tempStringNum);
    1e1e:	ce 01       	movw	r24, r28
    1e20:	c5 96       	adiw	r24, 0x35	; 53
    1e22:	0e 94 3f 19 	call	0x327e	; 0x327e <atoi>
    1e26:	9c 01       	movw	r18, r24
    1e28:	88 85       	ldd	r24, Y+8	; 0x08
    1e2a:	99 85       	ldd	r25, Y+9	; 0x09
    1e2c:	88 0f       	add	r24, r24
    1e2e:	99 1f       	adc	r25, r25
    1e30:	ae 01       	movw	r20, r28
    1e32:	4f 5f       	subi	r20, 0xFF	; 255
    1e34:	5f 4f       	sbci	r21, 0xFF	; 255
    1e36:	84 0f       	add	r24, r20
    1e38:	95 1f       	adc	r25, r21
    1e3a:	88 96       	adiw	r24, 0x28	; 40
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	31 83       	std	Z+1, r19	; 0x01
    1e40:	20 83       	st	Z, r18
							successTime=fTrue;
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	8a 83       	std	Y+2, r24	; 0x02
    1e46:	0a c0       	rjmp	.+20     	; 0x1e5c <_Z11ReceiveGAVRv+0x372>
						} else {
							state=5;
    1e48:	85 e0       	ldi	r24, 0x05	; 5
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	90 93 cc 01 	sts	0x01CC, r25
    1e50:	80 93 cb 01 	sts	0x01CB, r24
							PrintGAVR("ACKBAD.");
    1e54:	8d e0       	ldi	r24, 0x0D	; 13
    1e56:	91 e0       	ldi	r25, 0x01	; 1
    1e58:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
						}
						
						//If flag for Date is set, then parse the string and do something with it.
						//Now get the date. have to null the tempStringNum
						for (int j=0; j <= placement; j++){tempStringNum[j]=NULL;}	//reset the string
    1e5c:	1f 86       	std	Y+15, r1	; 0x0f
    1e5e:	1e 86       	std	Y+14, r1	; 0x0e
    1e60:	0e c0       	rjmp	.+28     	; 0x1e7e <_Z11ReceiveGAVRv+0x394>
    1e62:	9e 01       	movw	r18, r28
    1e64:	2b 5c       	subi	r18, 0xCB	; 203
    1e66:	3f 4f       	sbci	r19, 0xFF	; 255
    1e68:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e6a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e6c:	82 0f       	add	r24, r18
    1e6e:	93 1f       	adc	r25, r19
    1e70:	fc 01       	movw	r30, r24
    1e72:	10 82       	st	Z, r1
    1e74:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e76:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e78:	01 96       	adiw	r24, 0x01	; 1
    1e7a:	9f 87       	std	Y+15, r25	; 0x0f
    1e7c:	8e 87       	std	Y+14, r24	; 0x0e
    1e7e:	41 e0       	ldi	r20, 0x01	; 1
    1e80:	2e 85       	ldd	r18, Y+14	; 0x0e
    1e82:	3f 85       	ldd	r19, Y+15	; 0x0f
    1e84:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e86:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e88:	82 17       	cp	r24, r18
    1e8a:	93 07       	cpc	r25, r19
    1e8c:	0c f4       	brge	.+2      	; 0x1e90 <_Z11ReceiveGAVRv+0x3a6>
    1e8e:	40 e0       	ldi	r20, 0x00	; 0
    1e90:	44 23       	and	r20, r20
    1e92:	39 f7       	brne	.-50     	; 0x1e62 <_Z11ReceiveGAVRv+0x378>
						placement=0;
    1e94:	1b 86       	std	Y+11, r1	; 0x0b
    1e96:	1a 86       	std	Y+10, r1	; 0x0a
						counter++;	//get past the '/'
    1e98:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e9c:	01 96       	adiw	r24, 0x01	; 1
    1e9e:	9d 83       	std	Y+5, r25	; 0x05
    1ea0:	8c 83       	std	Y+4, r24	; 0x04
						
						//Loop through the string. If not end of file and counter isn't end of string, and not terminator '.', continue
						while (recString[counter] != '.' && recString[counter] != '\0' && counter != strLoc){
    1ea2:	73 c0       	rjmp	.+230    	; 0x1f8a <_Z11ReceiveGAVRv+0x4a0>
							//If char isn't sepaerator or end of string of dmy has been hit, add to buffer
							if  (recString[counter] != ',' && dmy < 3){
    1ea4:	9e 01       	movw	r18, r28
    1ea6:	2d 5e       	subi	r18, 0xED	; 237
    1ea8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eaa:	8c 81       	ldd	r24, Y+4	; 0x04
    1eac:	9d 81       	ldd	r25, Y+5	; 0x05
    1eae:	82 0f       	add	r24, r18
    1eb0:	93 1f       	adc	r25, r19
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	80 81       	ld	r24, Z
    1eb6:	8c 32       	cpi	r24, 0x2C	; 44
    1eb8:	e9 f0       	breq	.+58     	; 0x1ef4 <_Z11ReceiveGAVRv+0x40a>
    1eba:	8e 81       	ldd	r24, Y+6	; 0x06
    1ebc:	9f 81       	ldd	r25, Y+7	; 0x07
    1ebe:	83 30       	cpi	r24, 0x03	; 3
    1ec0:	91 05       	cpc	r25, r1
    1ec2:	c4 f4       	brge	.+48     	; 0x1ef4 <_Z11ReceiveGAVRv+0x40a>
								tempStringNum[placement++]=recString[counter];
    1ec4:	9e 01       	movw	r18, r28
    1ec6:	2d 5e       	subi	r18, 0xED	; 237
    1ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eca:	8c 81       	ldd	r24, Y+4	; 0x04
    1ecc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ece:	82 0f       	add	r24, r18
    1ed0:	93 1f       	adc	r25, r19
    1ed2:	fc 01       	movw	r30, r24
    1ed4:	40 81       	ld	r20, Z
    1ed6:	9e 01       	movw	r18, r28
    1ed8:	2b 5c       	subi	r18, 0xCB	; 203
    1eda:	3f 4f       	sbci	r19, 0xFF	; 255
    1edc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ede:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ee0:	82 0f       	add	r24, r18
    1ee2:	93 1f       	adc	r25, r19
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	40 83       	st	Z, r20
    1ee8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eea:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eec:	01 96       	adiw	r24, 0x01	; 1
    1eee:	9b 87       	std	Y+11, r25	; 0x0b
    1ef0:	8a 87       	std	Y+10, r24	; 0x0a
    1ef2:	46 c0       	rjmp	.+140    	; 0x1f80 <_Z11ReceiveGAVRv+0x496>
							//If a comma was found, need to store that sucker in the tempNum1[x]. dmy needs to be 0 or 1 aka month or day.
							} else if (dmy<2 && recString[counter]==','){
    1ef4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ef6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ef8:	82 30       	cpi	r24, 0x02	; 2
    1efa:	91 05       	cpc	r25, r1
    1efc:	0c f0       	brlt	.+2      	; 0x1f00 <_Z11ReceiveGAVRv+0x416>
    1efe:	40 c0       	rjmp	.+128    	; 0x1f80 <_Z11ReceiveGAVRv+0x496>
    1f00:	9e 01       	movw	r18, r28
    1f02:	2d 5e       	subi	r18, 0xED	; 237
    1f04:	3f 4f       	sbci	r19, 0xFF	; 255
    1f06:	8c 81       	ldd	r24, Y+4	; 0x04
    1f08:	9d 81       	ldd	r25, Y+5	; 0x05
    1f0a:	82 0f       	add	r24, r18
    1f0c:	93 1f       	adc	r25, r19
    1f0e:	fc 01       	movw	r30, r24
    1f10:	80 81       	ld	r24, Z
    1f12:	8c 32       	cpi	r24, 0x2C	; 44
    1f14:	a9 f5       	brne	.+106    	; 0x1f80 <_Z11ReceiveGAVRv+0x496>
								tempNum1[dmy++] = atoi(tempStringNum);
    1f16:	ce 01       	movw	r24, r28
    1f18:	c5 96       	adiw	r24, 0x35	; 53
    1f1a:	0e 94 3f 19 	call	0x327e	; 0x327e <atoi>
    1f1e:	9c 01       	movw	r18, r24
    1f20:	8e 81       	ldd	r24, Y+6	; 0x06
    1f22:	9f 81       	ldd	r25, Y+7	; 0x07
    1f24:	88 0f       	add	r24, r24
    1f26:	99 1f       	adc	r25, r25
    1f28:	ae 01       	movw	r20, r28
    1f2a:	4f 5f       	subi	r20, 0xFF	; 255
    1f2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f2e:	84 0f       	add	r24, r20
    1f30:	95 1f       	adc	r25, r21
    1f32:	8e 96       	adiw	r24, 0x2e	; 46
    1f34:	fc 01       	movw	r30, r24
    1f36:	31 83       	std	Z+1, r19	; 0x01
    1f38:	20 83       	st	Z, r18
    1f3a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f3c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f3e:	01 96       	adiw	r24, 0x01	; 1
    1f40:	9f 83       	std	Y+7, r25	; 0x07
    1f42:	8e 83       	std	Y+6, r24	; 0x06
								for (int j=0; j <= placement; j++){tempStringNum[j]=NULL;}
    1f44:	19 8a       	std	Y+17, r1	; 0x11
    1f46:	18 8a       	std	Y+16, r1	; 0x10
    1f48:	0e c0       	rjmp	.+28     	; 0x1f66 <_Z11ReceiveGAVRv+0x47c>
    1f4a:	9e 01       	movw	r18, r28
    1f4c:	2b 5c       	subi	r18, 0xCB	; 203
    1f4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f50:	88 89       	ldd	r24, Y+16	; 0x10
    1f52:	99 89       	ldd	r25, Y+17	; 0x11
    1f54:	82 0f       	add	r24, r18
    1f56:	93 1f       	adc	r25, r19
    1f58:	fc 01       	movw	r30, r24
    1f5a:	10 82       	st	Z, r1
    1f5c:	88 89       	ldd	r24, Y+16	; 0x10
    1f5e:	99 89       	ldd	r25, Y+17	; 0x11
    1f60:	01 96       	adiw	r24, 0x01	; 1
    1f62:	99 8b       	std	Y+17, r25	; 0x11
    1f64:	88 8b       	std	Y+16, r24	; 0x10
    1f66:	41 e0       	ldi	r20, 0x01	; 1
    1f68:	28 89       	ldd	r18, Y+16	; 0x10
    1f6a:	39 89       	ldd	r19, Y+17	; 0x11
    1f6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f70:	82 17       	cp	r24, r18
    1f72:	93 07       	cpc	r25, r19
    1f74:	0c f4       	brge	.+2      	; 0x1f78 <_Z11ReceiveGAVRv+0x48e>
    1f76:	40 e0       	ldi	r20, 0x00	; 0
    1f78:	44 23       	and	r20, r20
    1f7a:	39 f7       	brne	.-50     	; 0x1f4a <_Z11ReceiveGAVRv+0x460>
								placement=0;
    1f7c:	1b 86       	std	Y+11, r1	; 0x0b
    1f7e:	1a 86       	std	Y+10, r1	; 0x0a
							} else;
							counter++;							
    1f80:	8c 81       	ldd	r24, Y+4	; 0x04
    1f82:	9d 81       	ldd	r25, Y+5	; 0x05
    1f84:	01 96       	adiw	r24, 0x01	; 1
    1f86:	9d 83       	std	Y+5, r25	; 0x05
    1f88:	8c 83       	std	Y+4, r24	; 0x04
						for (int j=0; j <= placement; j++){tempStringNum[j]=NULL;}	//reset the string
						placement=0;
						counter++;	//get past the '/'
						
						//Loop through the string. If not end of file and counter isn't end of string, and not terminator '.', continue
						while (recString[counter] != '.' && recString[counter] != '\0' && counter != strLoc){
    1f8a:	9e 01       	movw	r18, r28
    1f8c:	2d 5e       	subi	r18, 0xED	; 237
    1f8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f90:	8c 81       	ldd	r24, Y+4	; 0x04
    1f92:	9d 81       	ldd	r25, Y+5	; 0x05
    1f94:	82 0f       	add	r24, r18
    1f96:	93 1f       	adc	r25, r19
    1f98:	fc 01       	movw	r30, r24
    1f9a:	80 81       	ld	r24, Z
    1f9c:	8e 32       	cpi	r24, 0x2E	; 46
    1f9e:	a1 f0       	breq	.+40     	; 0x1fc8 <_Z11ReceiveGAVRv+0x4de>
    1fa0:	9e 01       	movw	r18, r28
    1fa2:	2d 5e       	subi	r18, 0xED	; 237
    1fa4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa8:	9d 81       	ldd	r25, Y+5	; 0x05
    1faa:	82 0f       	add	r24, r18
    1fac:	93 1f       	adc	r25, r19
    1fae:	fc 01       	movw	r30, r24
    1fb0:	80 81       	ld	r24, Z
    1fb2:	88 23       	and	r24, r24
    1fb4:	49 f0       	breq	.+18     	; 0x1fc8 <_Z11ReceiveGAVRv+0x4de>
    1fb6:	2c 81       	ldd	r18, Y+4	; 0x04
    1fb8:	3d 81       	ldd	r19, Y+5	; 0x05
    1fba:	8f a1       	lds	r24, 0x4f
    1fbc:	98 a5       	lds	r25, 0x68
    1fbe:	28 17       	cp	r18, r24
    1fc0:	39 07       	cpc	r19, r25
    1fc2:	11 f0       	breq	.+4      	; 0x1fc8 <_Z11ReceiveGAVRv+0x4de>
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	01 c0       	rjmp	.+2      	; 0x1fca <_Z11ReceiveGAVRv+0x4e0>
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	88 23       	and	r24, r24
    1fcc:	09 f0       	breq	.+2      	; 0x1fd0 <_Z11ReceiveGAVRv+0x4e6>
    1fce:	6a cf       	rjmp	.-300    	; 0x1ea4 <_Z11ReceiveGAVRv+0x3ba>
								placement=0;
							} else;
							counter++;							
						}//end while
						//Assign last date if the reason we broke the while loop was a '.'. If not, ACKBAD and exit.
						if (recString[counter] == '.'){
    1fd0:	9e 01       	movw	r18, r28
    1fd2:	2d 5e       	subi	r18, 0xED	; 237
    1fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1fda:	82 0f       	add	r24, r18
    1fdc:	93 1f       	adc	r25, r19
    1fde:	fc 01       	movw	r30, r24
    1fe0:	80 81       	ld	r24, Z
    1fe2:	8e 32       	cpi	r24, 0x2E	; 46
    1fe4:	a9 f4       	brne	.+42     	; 0x2010 <_Z11ReceiveGAVRv+0x526>
							tempNum1[dmy] = atoi(tempStringNum);
    1fe6:	ce 01       	movw	r24, r28
    1fe8:	c5 96       	adiw	r24, 0x35	; 53
    1fea:	0e 94 3f 19 	call	0x327e	; 0x327e <atoi>
    1fee:	9c 01       	movw	r18, r24
    1ff0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff4:	88 0f       	add	r24, r24
    1ff6:	99 1f       	adc	r25, r25
    1ff8:	ae 01       	movw	r20, r28
    1ffa:	4f 5f       	subi	r20, 0xFF	; 255
    1ffc:	5f 4f       	sbci	r21, 0xFF	; 255
    1ffe:	84 0f       	add	r24, r20
    2000:	95 1f       	adc	r25, r21
    2002:	8e 96       	adiw	r24, 0x2e	; 46
    2004:	fc 01       	movw	r30, r24
    2006:	31 83       	std	Z+1, r19	; 0x01
    2008:	20 83       	st	Z, r18
							successDate=fTrue;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	8b 83       	std	Y+3, r24	; 0x03
    200e:	0a c0       	rjmp	.+20     	; 0x2024 <_Z11ReceiveGAVRv+0x53a>
						} else {//something in the string was wrong, ACKBAD and then exit
							PrintGAVR("ACKBAD.");
    2010:	8d e0       	ldi	r24, 0x0D	; 13
    2012:	91 e0       	ldi	r25, 0x01	; 1
    2014:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
							state=5;
    2018:	85 e0       	ldi	r24, 0x05	; 5
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	90 93 cc 01 	sts	0x01CC, r25
    2020:	80 93 cb 01 	sts	0x01CB, r24
						}
										
						//Make sure the settings are okay before setting the time. If not, send ACKBAD and exit.
						if (tempNum[0]/24==0 && tempNum[1]/60==0 && tempNum[2]/60==0 && successTime){
    2024:	89 a5       	lds	r24, 0x69
    2026:	9a a5       	lds	r25, 0x6a
    2028:	47 96       	adiw	r24, 0x17	; 23
    202a:	8f 32       	cpi	r24, 0x2F	; 47
    202c:	91 05       	cpc	r25, r1
    202e:	08 f5       	brcc	.+66     	; 0x2072 <_Z11ReceiveGAVRv+0x588>
    2030:	8b a5       	lds	r24, 0x6b
    2032:	9c a5       	lds	r25, 0x6c
    2034:	cb 96       	adiw	r24, 0x3b	; 59
    2036:	87 37       	cpi	r24, 0x77	; 119
    2038:	91 05       	cpc	r25, r1
    203a:	d8 f4       	brcc	.+54     	; 0x2072 <_Z11ReceiveGAVRv+0x588>
    203c:	8d a5       	lds	r24, 0x6d
    203e:	9e a5       	lds	r25, 0x6e
    2040:	cb 96       	adiw	r24, 0x3b	; 59
    2042:	87 37       	cpi	r24, 0x77	; 119
    2044:	91 05       	cpc	r25, r1
    2046:	a8 f4       	brcc	.+42     	; 0x2072 <_Z11ReceiveGAVRv+0x588>
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	88 23       	and	r24, r24
    204c:	91 f0       	breq	.+36     	; 0x2072 <_Z11ReceiveGAVRv+0x588>
							currentTime.setTime(tempNum[0],tempNum[1],tempNum[2]);
    204e:	69 a5       	lds	r22, 0x69
    2050:	7a a5       	lds	r23, 0x6a
    2052:	4b a5       	lds	r20, 0x6b
    2054:	5c a5       	lds	r21, 0x6c
    2056:	2d a5       	lds	r18, 0x6d
    2058:	3e a5       	lds	r19, 0x6e
    205a:	8a e8       	ldi	r24, 0x8A	; 138
    205c:	91 e0       	ldi	r25, 0x01	; 1
    205e:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
							saveDateTime_eeprom(fTrue,fFalse);
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	60 e0       	ldi	r22, 0x00	; 0
    2066:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
							flagNoGPSTime=fTrue;
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	80 93 bc 01 	sts	0x01BC, r24
    2070:	0a c0       	rjmp	.+20     	; 0x2086 <_Z11ReceiveGAVRv+0x59c>
						} else {
							PrintGAVR("ACKBAD.");
    2072:	8d e0       	ldi	r24, 0x0D	; 13
    2074:	91 e0       	ldi	r25, 0x01	; 1
    2076:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
							state=5;
    207a:	85 e0       	ldi	r24, 0x05	; 5
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	90 93 cc 01 	sts	0x01CC, r25
    2082:	80 93 cb 01 	sts	0x01CB, r24
						}//end if-else time
						
						//Make sure the date is correct before setting it. If not, send ACKBAD. and exit.
						if (tempNum1[0]/13==0 && tempNum1[1]/32==0 && tempNum1[2]/2000>=1 && successDate){
    2086:	8f a5       	lds	r24, 0x6f
    2088:	98 a9       	sts	0x48, r25
    208a:	0c 96       	adiw	r24, 0x0c	; 12
    208c:	89 31       	cpi	r24, 0x19	; 25
    208e:	91 05       	cpc	r25, r1
    2090:	10 f5       	brcc	.+68     	; 0x20d6 <_Z11ReceiveGAVRv+0x5ec>
    2092:	89 a9       	sts	0x49, r24
    2094:	9a a9       	sts	0x4a, r25
    2096:	4f 96       	adiw	r24, 0x1f	; 31
    2098:	8f 33       	cpi	r24, 0x3F	; 63
    209a:	91 05       	cpc	r25, r1
    209c:	e0 f4       	brcc	.+56     	; 0x20d6 <_Z11ReceiveGAVRv+0x5ec>
    209e:	8b a9       	sts	0x4b, r24
    20a0:	9c a9       	sts	0x4c, r25
    20a2:	f7 e0       	ldi	r31, 0x07	; 7
    20a4:	80 3d       	cpi	r24, 0xD0	; 208
    20a6:	9f 07       	cpc	r25, r31
    20a8:	b4 f0       	brlt	.+44     	; 0x20d6 <_Z11ReceiveGAVRv+0x5ec>
    20aa:	8b 81       	ldd	r24, Y+3	; 0x03
    20ac:	88 23       	and	r24, r24
    20ae:	99 f0       	breq	.+38     	; 0x20d6 <_Z11ReceiveGAVRv+0x5ec>
							currentTime.setDate(tempNum1[0],tempNum1[1], tempNum1[2]);
    20b0:	6f a5       	lds	r22, 0x6f
    20b2:	78 a9       	sts	0x48, r23
    20b4:	49 a9       	sts	0x49, r20
    20b6:	5a a9       	sts	0x4a, r21
    20b8:	2b a9       	sts	0x4b, r18
    20ba:	3c a9       	sts	0x4c, r19
    20bc:	8a e8       	ldi	r24, 0x8A	; 138
    20be:	91 e0       	ldi	r25, 0x01	; 1
    20c0:	0e 94 84 01 	call	0x308	; 0x308 <_ZN6myDate7setDateEiii>
							saveDateTime_eeprom(fFalse,fTrue);
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	61 e0       	ldi	r22, 0x01	; 1
    20c8:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
							state=5;
							break;
						}//end if-else date
						
						//If we wanted date and got it correctly, or wanted time and got it correctly, go to state 7 to ack with the appropriate response
						if (flagUserClock && successDate && successTime){
    20cc:	80 91 b9 01 	lds	r24, 0x01B9
    20d0:	88 23       	and	r24, r24
    20d2:	61 f4       	brne	.+24     	; 0x20ec <_Z11ReceiveGAVRv+0x602>
    20d4:	1c c0       	rjmp	.+56     	; 0x210e <_Z11ReceiveGAVRv+0x624>
						//Make sure the date is correct before setting it. If not, send ACKBAD. and exit.
						if (tempNum1[0]/13==0 && tempNum1[1]/32==0 && tempNum1[2]/2000>=1 && successDate){
							currentTime.setDate(tempNum1[0],tempNum1[1], tempNum1[2]);
							saveDateTime_eeprom(fFalse,fTrue);
						} else {
							PrintGAVR("ACKBAD.");
    20d6:	8d e0       	ldi	r24, 0x0D	; 13
    20d8:	91 e0       	ldi	r25, 0x01	; 1
    20da:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
							state=5;
    20de:	85 e0       	ldi	r24, 0x05	; 5
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	90 93 cc 01 	sts	0x01CC, r25
    20e6:	80 93 cb 01 	sts	0x01CB, r24
							break;
    20ea:	6a c0       	rjmp	.+212    	; 0x21c0 <_Z11ReceiveGAVRv+0x6d6>
						}//end if-else date
						
						//If we wanted date and got it correctly, or wanted time and got it correctly, go to state 7 to ack with the appropriate response
						if (flagUserClock && successDate && successTime){
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	88 23       	and	r24, r24
    20f0:	71 f0       	breq	.+28     	; 0x210e <_Z11ReceiveGAVRv+0x624>
    20f2:	8a 81       	ldd	r24, Y+2	; 0x02
    20f4:	88 23       	and	r24, r24
    20f6:	59 f0       	breq	.+22     	; 0x210e <_Z11ReceiveGAVRv+0x624>
							flagUserClock=fFalse;
    20f8:	10 92 b9 01 	sts	0x01B9, r1
							flagWaitingForReceiveGAVR=fFalse;
    20fc:	10 92 b6 01 	sts	0x01B6, r1
							state=7;
    2100:	87 e0       	ldi	r24, 0x07	; 7
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	90 93 cc 01 	sts	0x01CC, r25
    2108:	80 93 cb 01 	sts	0x01CB, r24
						PrintGAVR("ACKNO.");
						state=5;
					}					
					// end if-else (flagUserClock)					
					//Exit
					break;
    210c:	59 c0       	rjmp	.+178    	; 0x21c0 <_Z11ReceiveGAVRv+0x6d6>
						if (flagUserClock && successDate && successTime){
							flagUserClock=fFalse;
							flagWaitingForReceiveGAVR=fFalse;
							state=7;
						} else {
							PrintGAVR("ACKBAD.");
    210e:	8d e0       	ldi	r24, 0x0D	; 13
    2110:	91 e0       	ldi	r25, 0x01	; 1
    2112:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
							state=5;
    2116:	85 e0       	ldi	r24, 0x05	; 5
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	90 93 cc 01 	sts	0x01CC, r25
    211e:	80 93 cb 01 	sts	0x01CB, r24
						PrintGAVR("ACKNO.");
						state=5;
					}					
					// end if-else (flagUserClock)					
					//Exit
					break;
    2122:	4e c0       	rjmp	.+156    	; 0x21c0 <_Z11ReceiveGAVRv+0x6d6>
						} else {
							PrintGAVR("ACKBAD.");
							state=5;
						}																										
					} else {	//don't need the date or time, wasn't looking for it. Respond with ACKNO. Should reset all flags on GAVR side.
						PrintGAVR("ACKNO.");
    2124:	8c e6       	ldi	r24, 0x6C	; 108
    2126:	91 e0       	ldi	r25, 0x01	; 1
    2128:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
						state=5;
    212c:	85 e0       	ldi	r24, 0x05	; 5
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	90 93 cc 01 	sts	0x01CC, r25
    2134:	80 93 cb 01 	sts	0x01CB, r24
					}					
					// end if-else (flagUserClock)					
					//Exit
					break;
    2138:	43 c0       	rjmp	.+134    	; 0x21c0 <_Z11ReceiveGAVRv+0x6d6>
					}//end case 3				
				case 4:{
					//Successful SYNNEED case.
					if (!flagUserClock){	//If we don't need the date or time, update with what we have.
    213a:	80 91 b9 01 	lds	r24, 0x01B9
    213e:	88 23       	and	r24, r24
    2140:	41 f4       	brne	.+16     	; 0x2152 <_Z11ReceiveGAVRv+0x668>
						flagUpdateGAVRClock=fTrue;
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	80 93 b7 01 	sts	0x01B7, r24
						PrintGAVR("ACKNEED.");				//respond with correct ack
    2148:	83 e7       	ldi	r24, 0x73	; 115
    214a:	91 e0       	ldi	r25, 0x01	; 1
    214c:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
    2150:	04 c0       	rjmp	.+8      	; 0x215a <_Z11ReceiveGAVRv+0x670>
					} else {
						PrintGAVR("ACKNO.");	//say we can't give you anything, ask the user.
    2152:	8c e6       	ldi	r24, 0x6C	; 108
    2154:	91 e0       	ldi	r25, 0x01	; 1
    2156:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
						//Should be expecting something from the GAVR with user date and time, this reminds the GAVR.
					} //end if-else
					state=5;
    215a:	85 e0       	ldi	r24, 0x05	; 5
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	90 93 cc 01 	sts	0x01CC, r25
    2162:	80 93 cb 01 	sts	0x01CB, r24
					break;					
    2166:	2c c0       	rjmp	.+88     	; 0x21c0 <_Z11ReceiveGAVRv+0x6d6>
				}//end case 4
				case 5:{
					//Exit case
					flagReceivingGAVR=fFalse;
    2168:	10 92 b5 01 	sts	0x01B5, r1
					state=0;		//just in case
    216c:	10 92 cc 01 	sts	0x01CC, r1
    2170:	10 92 cb 01 	sts	0x01CB, r1
					break;
    2174:	25 c0       	rjmp	.+74     	; 0x21c0 <_Z11ReceiveGAVRv+0x6d6>
				}//end case 5
				case 6:{
					//Error in ACK case
					PrintGAVR("ACKERROR.");
    2176:	89 e5       	ldi	r24, 0x59	; 89
    2178:	91 e0       	ldi	r25, 0x01	; 1
    217a:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
					state=5;
    217e:	85 e0       	ldi	r24, 0x05	; 5
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	90 93 cc 01 	sts	0x01CC, r25
    2186:	80 93 cb 01 	sts	0x01CB, r24
					break;
    218a:	1a c0       	rjmp	.+52     	; 0x21c0 <_Z11ReceiveGAVRv+0x6d6>
				}//end case 6
				case 7:{
					//Successful grab of date/time case
					recString[0]='A';
    218c:	81 e4       	ldi	r24, 0x41	; 65
    218e:	8b 8b       	std	Y+19, r24	; 0x13
					recString[1]='C';
    2190:	83 e4       	ldi	r24, 0x43	; 67
    2192:	8c 8b       	std	Y+20, r24	; 0x14
					recString[2]='K';
    2194:	8b e4       	ldi	r24, 0x4B	; 75
    2196:	8d 8b       	std	Y+21, r24	; 0x15
					PrintGAVR(recString);
    2198:	ce 01       	movw	r24, r28
    219a:	43 96       	adiw	r24, 0x13	; 19
    219c:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
					state=5;
    21a0:	85 e0       	ldi	r24, 0x05	; 5
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	90 93 cc 01 	sts	0x01CC, r25
    21a8:	80 93 cb 01 	sts	0x01CB, r24
					break;		
    21ac:	09 c0       	rjmp	.+18     	; 0x21c0 <_Z11ReceiveGAVRv+0x6d6>
				}//end case 7
				default: {state=0; strLoc=0; flagReceivingGAVR=fFalse; break;}				
    21ae:	10 92 cc 01 	sts	0x01CC, r1
    21b2:	10 92 cb 01 	sts	0x01CB, r1
    21b6:	18 a6       	lds	r17, 0xb8
    21b8:	1f a2       	lds	r17, 0x9f
    21ba:	10 92 b5 01 	sts	0x01B5, r1
    21be:	00 00       	nop
	char recChar, recString[20];
	volatile unsigned int strLoc=0;
	BOOL noCarriage=fTrue;
	
	//While Loop
	while (flagReceivingGAVR){
    21c0:	90 91 b5 01 	lds	r25, 0x01B5
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	99 23       	and	r25, r25
    21c8:	09 f4       	brne	.+2      	; 0x21cc <_Z11ReceiveGAVRv+0x6e2>
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	88 23       	and	r24, r24
    21ce:	09 f0       	breq	.+2      	; 0x21d2 <_Z11ReceiveGAVRv+0x6e8>
    21d0:	9b cc       	rjmp	.-1738   	; 0x1b08 <_Z11ReceiveGAVRv+0x1e>
					break;		
				}//end case 7
				default: {state=0; strLoc=0; flagReceivingGAVR=fFalse; break;}				
			}//end switch	
		}//end while flagReceivingGAVR	
}
    21d2:	e9 96       	adiw	r28, 0x39	; 57
    21d4:	0f b6       	in	r0, 0x3f	; 63
    21d6:	f8 94       	cli
    21d8:	de bf       	out	0x3e, r29	; 62
    21da:	0f be       	out	0x3f, r0	; 63
    21dc:	cd bf       	out	0x3d, r28	; 61
    21de:	df 91       	pop	r29
    21e0:	cf 91       	pop	r28
    21e2:	08 95       	ret

000021e4 <_Z13printTimeDatehhh>:
/*************************************************************************************************************/
//To print to WAVR, cariable needs to be false. Print to Bone requires WAVRorBone to be true
void printTimeDate(BOOL WAVRorBone, BOOL pTime,BOOL pDate){
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	cd b7       	in	r28, 0x3d	; 61
    21ea:	de b7       	in	r29, 0x3e	; 62
    21ec:	eb 97       	sbiw	r28, 0x3b	; 59
    21ee:	0f b6       	in	r0, 0x3f	; 63
    21f0:	f8 94       	cli
    21f2:	de bf       	out	0x3e, r29	; 62
    21f4:	0f be       	out	0x3f, r0	; 63
    21f6:	cd bf       	out	0x3d, r28	; 61
    21f8:	89 af       	sts	0x79, r24
    21fa:	6a af       	sts	0x7a, r22
    21fc:	4b af       	sts	0x7b, r20
	if (WAVRorBone){ //Printing to BeagleBone
    21fe:	89 ad       	sts	0x69, r24
    2200:	88 23       	and	r24, r24
    2202:	49 f1       	breq	.+82     	; 0x2256 <_Z13printTimeDatehhh+0x72>
		if (pTime){
    2204:	8a ad       	sts	0x6a, r24
    2206:	88 23       	and	r24, r24
    2208:	89 f0       	breq	.+34     	; 0x222c <_Z13printTimeDatehhh+0x48>
			char tempTime[11];
			strcpy(tempTime,currentTime.getTime());
    220a:	8a e8       	ldi	r24, 0x8A	; 138
    220c:	91 e0       	ldi	r25, 0x01	; 1
    220e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN6myTime7getTimeEv>
    2212:	9c 01       	movw	r18, r24
    2214:	ce 01       	movw	r24, r28
    2216:	01 96       	adiw	r24, 0x01	; 1
    2218:	b9 01       	movw	r22, r18
    221a:	0e 94 71 19 	call	0x32e2	; 0x32e2 <strcpy>
			PrintBone(tempTime);
    221e:	ce 01       	movw	r24, r28
    2220:	01 96       	adiw	r24, 0x01	; 1
    2222:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
			PutUartChBone('/');
    2226:	8f e2       	ldi	r24, 0x2F	; 47
    2228:	0e 94 a2 08 	call	0x1144	; 0x1144 <_Z13PutUartChBonec>
		}
		if (pDate){
    222c:	8b ad       	sts	0x6b, r24
    222e:	88 23       	and	r24, r24
    2230:	d1 f1       	breq	.+116    	; 0x22a6 <_Z13printTimeDatehhh+0xc2>
			char tempDate[17];
			strcpy(tempDate,currentTime.getDate());
    2232:	8a e8       	ldi	r24, 0x8A	; 138
    2234:	91 e0       	ldi	r25, 0x01	; 1
    2236:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN6myDate7getDateEv>
    223a:	9c 01       	movw	r18, r24
    223c:	ce 01       	movw	r24, r28
    223e:	0c 96       	adiw	r24, 0x0c	; 12
    2240:	b9 01       	movw	r22, r18
    2242:	0e 94 71 19 	call	0x32e2	; 0x32e2 <strcpy>
			PrintBone(tempDate);
    2246:	ce 01       	movw	r24, r28
    2248:	0c 96       	adiw	r24, 0x0c	; 12
    224a:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
			PutUartChGAVR('.');
    224e:	8e e2       	ldi	r24, 0x2E	; 46
    2250:	0e 94 ed 08 	call	0x11da	; 0x11da <_Z13PutUartChGAVRc>
    2254:	28 c0       	rjmp	.+80     	; 0x22a6 <_Z13printTimeDatehhh+0xc2>
		}
	} else { //Printing to GAVR
		if (pTime){
    2256:	8a ad       	sts	0x6a, r24
    2258:	88 23       	and	r24, r24
    225a:	89 f0       	breq	.+34     	; 0x227e <_Z13printTimeDatehhh+0x9a>
			char tempTime[11];
			strcpy(tempTime,currentTime.getTime());
    225c:	8a e8       	ldi	r24, 0x8A	; 138
    225e:	91 e0       	ldi	r25, 0x01	; 1
    2260:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN6myTime7getTimeEv>
    2264:	9c 01       	movw	r18, r24
    2266:	ce 01       	movw	r24, r28
    2268:	4d 96       	adiw	r24, 0x1d	; 29
    226a:	b9 01       	movw	r22, r18
    226c:	0e 94 71 19 	call	0x32e2	; 0x32e2 <strcpy>
			PrintGAVR(tempTime);
    2270:	ce 01       	movw	r24, r28
    2272:	4d 96       	adiw	r24, 0x1d	; 29
    2274:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
			PutUartChGAVR('/');
    2278:	8f e2       	ldi	r24, 0x2F	; 47
    227a:	0e 94 ed 08 	call	0x11da	; 0x11da <_Z13PutUartChGAVRc>
		}
		if (pDate){
    227e:	8b ad       	sts	0x6b, r24
    2280:	88 23       	and	r24, r24
    2282:	89 f0       	breq	.+34     	; 0x22a6 <_Z13printTimeDatehhh+0xc2>
			char tempDate[17];
			strcpy(tempDate,currentTime.getDate());
    2284:	8a e8       	ldi	r24, 0x8A	; 138
    2286:	91 e0       	ldi	r25, 0x01	; 1
    2288:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN6myDate7getDateEv>
    228c:	9c 01       	movw	r18, r24
    228e:	ce 01       	movw	r24, r28
    2290:	88 96       	adiw	r24, 0x28	; 40
    2292:	b9 01       	movw	r22, r18
    2294:	0e 94 71 19 	call	0x32e2	; 0x32e2 <strcpy>
			PrintGAVR(tempDate);
    2298:	ce 01       	movw	r24, r28
    229a:	88 96       	adiw	r24, 0x28	; 40
    229c:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
			PutUartChGAVR('.');
    22a0:	8e e2       	ldi	r24, 0x2E	; 46
    22a2:	0e 94 ed 08 	call	0x11da	; 0x11da <_Z13PutUartChGAVRc>
		}
	}
}
    22a6:	eb 96       	adiw	r28, 0x3b	; 59
    22a8:	0f b6       	in	r0, 0x3f	; 63
    22aa:	f8 94       	cli
    22ac:	de bf       	out	0x3e, r29	; 62
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	cd bf       	out	0x3d, r28	; 61
    22b2:	df 91       	pop	r29
    22b4:	cf 91       	pop	r28
    22b6:	08 95       	ret

000022b8 <__vector_6>:
/****************************************************************************************************************/


/*--------------------------Interrupt Service Routines------------------------------------------------------------------------------------*/
//PCINT_17: Getting information from the GAVR
ISR(PCINT2_vect){
    22b8:	1f 92       	push	r1
    22ba:	0f 92       	push	r0
    22bc:	0f b6       	in	r0, 0x3f	; 63
    22be:	0f 92       	push	r0
    22c0:	11 24       	eor	r1, r1
    22c2:	2f 93       	push	r18
    22c4:	3f 93       	push	r19
    22c6:	4f 93       	push	r20
    22c8:	5f 93       	push	r21
    22ca:	6f 93       	push	r22
    22cc:	7f 93       	push	r23
    22ce:	8f 93       	push	r24
    22d0:	9f 93       	push	r25
    22d2:	af 93       	push	r26
    22d4:	bf 93       	push	r27
    22d6:	ef 93       	push	r30
    22d8:	ff 93       	push	r31
    22da:	cf 93       	push	r28
    22dc:	df 93       	push	r29
    22de:	cd b7       	in	r28, 0x3d	; 61
    22e0:	de b7       	in	r29, 0x3e	; 62
	if ((PINC & (1 << PCINT17)) && !flagShutdown){
    22e2:	86 e2       	ldi	r24, 0x26	; 38
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	fc 01       	movw	r30, r24
    22e8:	80 81       	ld	r24, Z
    22ea:	88 2f       	mov	r24, r24
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	82 70       	andi	r24, 0x02	; 2
    22f0:	90 70       	andi	r25, 0x00	; 0
    22f2:	00 97       	sbiw	r24, 0x00	; 0
    22f4:	31 f0       	breq	.+12     	; 0x2302 <__vector_6+0x4a>
    22f6:	80 91 be 01 	lds	r24, 0x01BE
    22fa:	88 23       	and	r24, r24
    22fc:	11 f4       	brne	.+4      	; 0x2302 <__vector_6+0x4a>
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	01 c0       	rjmp	.+2      	; 0x2304 <__vector_6+0x4c>
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	88 23       	and	r24, r24
    2306:	c9 f0       	breq	.+50     	; 0x233a <__vector_6+0x82>
		//Do work, correct interrupt
		UCSR1B |= (1 << RXCIE1);
    2308:	89 ec       	ldi	r24, 0xC9	; 201
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	29 ec       	ldi	r18, 0xC9	; 201
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	f9 01       	movw	r30, r18
    2312:	20 81       	ld	r18, Z
    2314:	20 68       	ori	r18, 0x80	; 128
    2316:	fc 01       	movw	r30, r24
    2318:	20 83       	st	Z, r18
		flagGoToSleep=fFalse;
    231a:	10 92 b2 01 	sts	0x01B2, r1
		flagNormalMode=fFalse;
    231e:	10 92 b4 01 	sts	0x01B4, r1
		__killCommINT();
    2322:	8d e3       	ldi	r24, 0x3D	; 61
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	fc 01       	movw	r30, r24
    2328:	10 82       	st	Z, r1
    232a:	8d e6       	ldi	r24, 0x6D	; 109
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	fc 01       	movw	r30, r24
    2330:	10 82       	st	Z, r1
		//Acknowledge
		PrintGAVR("ACKG");
    2332:	8c e7       	ldi	r24, 0x7C	; 124
    2334:	91 e0       	ldi	r25, 0x01	; 1
    2336:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
	}
}	
    233a:	df 91       	pop	r29
    233c:	cf 91       	pop	r28
    233e:	ff 91       	pop	r31
    2340:	ef 91       	pop	r30
    2342:	bf 91       	pop	r27
    2344:	af 91       	pop	r26
    2346:	9f 91       	pop	r25
    2348:	8f 91       	pop	r24
    234a:	7f 91       	pop	r23
    234c:	6f 91       	pop	r22
    234e:	5f 91       	pop	r21
    2350:	4f 91       	pop	r20
    2352:	3f 91       	pop	r19
    2354:	2f 91       	pop	r18
    2356:	0f 90       	pop	r0
    2358:	0f be       	out	0x3f, r0	; 63
    235a:	0f 90       	pop	r0
    235c:	1f 90       	pop	r1
    235e:	18 95       	reti

00002360 <__vector_3>:

//INT2: Getting information from BeagleBone
ISR(INT2_vect){	//about to get time, get things ready
    2360:	1f 92       	push	r1
    2362:	0f 92       	push	r0
    2364:	0f b6       	in	r0, 0x3f	; 63
    2366:	0f 92       	push	r0
    2368:	11 24       	eor	r1, r1
    236a:	2f 93       	push	r18
    236c:	3f 93       	push	r19
    236e:	4f 93       	push	r20
    2370:	5f 93       	push	r21
    2372:	6f 93       	push	r22
    2374:	7f 93       	push	r23
    2376:	8f 93       	push	r24
    2378:	9f 93       	push	r25
    237a:	af 93       	push	r26
    237c:	bf 93       	push	r27
    237e:	ef 93       	push	r30
    2380:	ff 93       	push	r31
    2382:	cf 93       	push	r28
    2384:	df 93       	push	r29
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
	if (!flagShutdown){		//If things are off, don't let noise do an interrupt. Shouldn't happen anyways.
    238a:	80 91 be 01 	lds	r24, 0x01BE
    238e:	88 23       	and	r24, r24
    2390:	c9 f4       	brne	.+50     	; 0x23c4 <__vector_3+0x64>
		UCSR0B |= (1 << RXCIE0);
    2392:	81 ec       	ldi	r24, 0xC1	; 193
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	21 ec       	ldi	r18, 0xC1	; 193
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	f9 01       	movw	r30, r18
    239c:	20 81       	ld	r18, Z
    239e:	20 68       	ori	r18, 0x80	; 128
    23a0:	fc 01       	movw	r30, r24
    23a2:	20 83       	st	Z, r18
		flagGoToSleep=fFalse;	//no sleeping, wait for UART_RX
    23a4:	10 92 b2 01 	sts	0x01B2, r1
		flagNormalMode=fFalse;
    23a8:	10 92 b4 01 	sts	0x01B4, r1
		__killCommINT();
    23ac:	8d e3       	ldi	r24, 0x3D	; 61
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	fc 01       	movw	r30, r24
    23b2:	10 82       	st	Z, r1
    23b4:	8d e6       	ldi	r24, 0x6D	; 109
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	fc 01       	movw	r30, r24
    23ba:	10 82       	st	Z, r1
		//Acknowledge connection, disable INT2_vect
		PrintBone("ACKT");
    23bc:	81 e8       	ldi	r24, 0x81	; 129
    23be:	91 e0       	ldi	r25, 0x01	; 1
    23c0:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
	}	
}
    23c4:	df 91       	pop	r29
    23c6:	cf 91       	pop	r28
    23c8:	ff 91       	pop	r31
    23ca:	ef 91       	pop	r30
    23cc:	bf 91       	pop	r27
    23ce:	af 91       	pop	r26
    23d0:	9f 91       	pop	r25
    23d2:	8f 91       	pop	r24
    23d4:	7f 91       	pop	r23
    23d6:	6f 91       	pop	r22
    23d8:	5f 91       	pop	r21
    23da:	4f 91       	pop	r20
    23dc:	3f 91       	pop	r19
    23de:	2f 91       	pop	r18
    23e0:	0f 90       	pop	r0
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	0f 90       	pop	r0
    23e6:	1f 90       	pop	r1
    23e8:	18 95       	reti

000023ea <__vector_11>:

//RTC Timer.
ISR(TIMER2_OVF_vect){
    23ea:	1f 92       	push	r1
    23ec:	0f 92       	push	r0
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	0f 92       	push	r0
    23f2:	11 24       	eor	r1, r1
    23f4:	2f 93       	push	r18
    23f6:	3f 93       	push	r19
    23f8:	4f 93       	push	r20
    23fa:	5f 93       	push	r21
    23fc:	6f 93       	push	r22
    23fe:	7f 93       	push	r23
    2400:	8f 93       	push	r24
    2402:	9f 93       	push	r25
    2404:	af 93       	push	r26
    2406:	bf 93       	push	r27
    2408:	ef 93       	push	r30
    240a:	ff 93       	push	r31
    240c:	cf 93       	push	r28
    240e:	df 93       	push	r29
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
	volatile static int timeOut = 0;
	volatile static int gavrSendTimeout=0, boneReceiveTimeout=0, gavrReceiveTimeout=0;
	
	currentTime.addSeconds(1);
    2414:	8a e8       	ldi	r24, 0x8A	; 138
    2416:	91 e0       	ldi	r25, 0x01	; 1
    2418:	61 e0       	ldi	r22, 0x01	; 1
    241a:	70 e0       	ldi	r23, 0x00	; 0
    241c:	0e 94 77 06 	call	0xcee	; 0xcee <_ZN6myTime10addSecondsEi>
	
	//GAVR Transmission Timeout
	if (flagSendingGAVR && gavrSendTimeout <=COMM_TIMEOUT_SEC){gavrSendTimeout++;}
    2420:	80 91 b8 01 	lds	r24, 0x01B8
    2424:	88 23       	and	r24, r24
    2426:	49 f0       	breq	.+18     	; 0x243a <__vector_11+0x50>
    2428:	80 91 c3 01 	lds	r24, 0x01C3
    242c:	90 91 c4 01 	lds	r25, 0x01C4
    2430:	84 30       	cpi	r24, 0x04	; 4
    2432:	91 05       	cpc	r25, r1
    2434:	14 f4       	brge	.+4      	; 0x243a <__vector_11+0x50>
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	01 c0       	rjmp	.+2      	; 0x243c <__vector_11+0x52>
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	88 23       	and	r24, r24
    243e:	51 f0       	breq	.+20     	; 0x2454 <__vector_11+0x6a>
    2440:	80 91 c3 01 	lds	r24, 0x01C3
    2444:	90 91 c4 01 	lds	r25, 0x01C4
    2448:	01 96       	adiw	r24, 0x01	; 1
    244a:	90 93 c4 01 	sts	0x01C4, r25
    244e:	80 93 c3 01 	sts	0x01C3, r24
    2452:	39 c0       	rjmp	.+114    	; 0x24c6 <__vector_11+0xdc>
	else if (flagSendingGAVR && gavrSendTimeout > COMM_TIMEOUT_SEC){flagSendingGAVR=fFalse; gavrSendTimeout=0; __enableCommINT();}
    2454:	80 91 b8 01 	lds	r24, 0x01B8
    2458:	88 23       	and	r24, r24
    245a:	49 f0       	breq	.+18     	; 0x246e <__vector_11+0x84>
    245c:	80 91 c3 01 	lds	r24, 0x01C3
    2460:	90 91 c4 01 	lds	r25, 0x01C4
    2464:	84 30       	cpi	r24, 0x04	; 4
    2466:	91 05       	cpc	r25, r1
    2468:	14 f0       	brlt	.+4      	; 0x246e <__vector_11+0x84>
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	01 c0       	rjmp	.+2      	; 0x2470 <__vector_11+0x86>
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	88 23       	and	r24, r24
    2472:	a9 f0       	breq	.+42     	; 0x249e <__vector_11+0xb4>
    2474:	10 92 b8 01 	sts	0x01B8, r1
    2478:	10 92 c4 01 	sts	0x01C4, r1
    247c:	10 92 c3 01 	sts	0x01C3, r1
    2480:	8d e3       	ldi	r24, 0x3D	; 61
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	2d e3       	ldi	r18, 0x3D	; 61
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	f9 01       	movw	r30, r18
    248a:	20 81       	ld	r18, Z
    248c:	24 60       	ori	r18, 0x04	; 4
    248e:	fc 01       	movw	r30, r24
    2490:	20 83       	st	Z, r18
    2492:	8d e6       	ldi	r24, 0x6D	; 109
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	22 e0       	ldi	r18, 0x02	; 2
    2498:	fc 01       	movw	r30, r24
    249a:	20 83       	st	Z, r18
    249c:	14 c0       	rjmp	.+40     	; 0x24c6 <__vector_11+0xdc>
	else if (!flagSendingGAVR && gavrSendTimeout > 0){gavrSendTimeout=0;}
    249e:	80 91 b8 01 	lds	r24, 0x01B8
    24a2:	88 23       	and	r24, r24
    24a4:	49 f4       	brne	.+18     	; 0x24b8 <__vector_11+0xce>
    24a6:	80 91 c3 01 	lds	r24, 0x01C3
    24aa:	90 91 c4 01 	lds	r25, 0x01C4
    24ae:	18 16       	cp	r1, r24
    24b0:	19 06       	cpc	r1, r25
    24b2:	14 f4       	brge	.+4      	; 0x24b8 <__vector_11+0xce>
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	01 c0       	rjmp	.+2      	; 0x24ba <__vector_11+0xd0>
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	88 23       	and	r24, r24
    24bc:	21 f0       	breq	.+8      	; 0x24c6 <__vector_11+0xdc>
    24be:	10 92 c4 01 	sts	0x01C4, r1
    24c2:	10 92 c3 01 	sts	0x01C3, r1
	else;
	
	//BeagleBone Reception Timeout
	if (flagReceivingBone && boneReceiveTimeout <=COMM_TIMEOUT_SEC){boneReceiveTimeout++;}
    24c6:	80 91 b3 01 	lds	r24, 0x01B3
    24ca:	88 23       	and	r24, r24
    24cc:	49 f0       	breq	.+18     	; 0x24e0 <__vector_11+0xf6>
    24ce:	80 91 c5 01 	lds	r24, 0x01C5
    24d2:	90 91 c6 01 	lds	r25, 0x01C6
    24d6:	84 30       	cpi	r24, 0x04	; 4
    24d8:	91 05       	cpc	r25, r1
    24da:	14 f4       	brge	.+4      	; 0x24e0 <__vector_11+0xf6>
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	01 c0       	rjmp	.+2      	; 0x24e2 <__vector_11+0xf8>
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	88 23       	and	r24, r24
    24e4:	51 f0       	breq	.+20     	; 0x24fa <__vector_11+0x110>
    24e6:	80 91 c5 01 	lds	r24, 0x01C5
    24ea:	90 91 c6 01 	lds	r25, 0x01C6
    24ee:	01 96       	adiw	r24, 0x01	; 1
    24f0:	90 93 c6 01 	sts	0x01C6, r25
    24f4:	80 93 c5 01 	sts	0x01C5, r24
    24f8:	39 c0       	rjmp	.+114    	; 0x256c <__vector_11+0x182>
	else if (flagReceivingBone && boneReceiveTimeout > COMM_TIMEOUT_SEC){flagReceivingBone=fFalse; boneReceiveTimeout=0; __enableCommINT();}
    24fa:	80 91 b3 01 	lds	r24, 0x01B3
    24fe:	88 23       	and	r24, r24
    2500:	49 f0       	breq	.+18     	; 0x2514 <__vector_11+0x12a>
    2502:	80 91 c5 01 	lds	r24, 0x01C5
    2506:	90 91 c6 01 	lds	r25, 0x01C6
    250a:	84 30       	cpi	r24, 0x04	; 4
    250c:	91 05       	cpc	r25, r1
    250e:	14 f0       	brlt	.+4      	; 0x2514 <__vector_11+0x12a>
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	01 c0       	rjmp	.+2      	; 0x2516 <__vector_11+0x12c>
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	88 23       	and	r24, r24
    2518:	a9 f0       	breq	.+42     	; 0x2544 <__vector_11+0x15a>
    251a:	10 92 b3 01 	sts	0x01B3, r1
    251e:	10 92 c6 01 	sts	0x01C6, r1
    2522:	10 92 c5 01 	sts	0x01C5, r1
    2526:	8d e3       	ldi	r24, 0x3D	; 61
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	2d e3       	ldi	r18, 0x3D	; 61
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	f9 01       	movw	r30, r18
    2530:	20 81       	ld	r18, Z
    2532:	24 60       	ori	r18, 0x04	; 4
    2534:	fc 01       	movw	r30, r24
    2536:	20 83       	st	Z, r18
    2538:	8d e6       	ldi	r24, 0x6D	; 109
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	22 e0       	ldi	r18, 0x02	; 2
    253e:	fc 01       	movw	r30, r24
    2540:	20 83       	st	Z, r18
    2542:	14 c0       	rjmp	.+40     	; 0x256c <__vector_11+0x182>
	else if (!flagReceivingBone && boneReceiveTimeout > 0){boneReceiveTimeout=0;}
    2544:	80 91 b3 01 	lds	r24, 0x01B3
    2548:	88 23       	and	r24, r24
    254a:	49 f4       	brne	.+18     	; 0x255e <__vector_11+0x174>
    254c:	80 91 c5 01 	lds	r24, 0x01C5
    2550:	90 91 c6 01 	lds	r25, 0x01C6
    2554:	18 16       	cp	r1, r24
    2556:	19 06       	cpc	r1, r25
    2558:	14 f4       	brge	.+4      	; 0x255e <__vector_11+0x174>
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	01 c0       	rjmp	.+2      	; 0x2560 <__vector_11+0x176>
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	88 23       	and	r24, r24
    2562:	21 f0       	breq	.+8      	; 0x256c <__vector_11+0x182>
    2564:	10 92 c6 01 	sts	0x01C6, r1
    2568:	10 92 c5 01 	sts	0x01C5, r1
	else;
	
	//GAVR Reception Timeout
	if (flagReceivingGAVR && gavrReceiveTimeout <= COMM_TIMEOUT_SEC){gavrReceiveTimeout++;}
    256c:	80 91 b5 01 	lds	r24, 0x01B5
    2570:	88 23       	and	r24, r24
    2572:	49 f0       	breq	.+18     	; 0x2586 <__vector_11+0x19c>
    2574:	80 91 c7 01 	lds	r24, 0x01C7
    2578:	90 91 c8 01 	lds	r25, 0x01C8
    257c:	84 30       	cpi	r24, 0x04	; 4
    257e:	91 05       	cpc	r25, r1
    2580:	14 f4       	brge	.+4      	; 0x2586 <__vector_11+0x19c>
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	01 c0       	rjmp	.+2      	; 0x2588 <__vector_11+0x19e>
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	88 23       	and	r24, r24
    258a:	51 f0       	breq	.+20     	; 0x25a0 <__vector_11+0x1b6>
    258c:	80 91 c7 01 	lds	r24, 0x01C7
    2590:	90 91 c8 01 	lds	r25, 0x01C8
    2594:	01 96       	adiw	r24, 0x01	; 1
    2596:	90 93 c8 01 	sts	0x01C8, r25
    259a:	80 93 c7 01 	sts	0x01C7, r24
    259e:	39 c0       	rjmp	.+114    	; 0x2612 <__vector_11+0x228>
	else if (flagReceivingGAVR && gavrReceiveTimeout > COMM_TIMEOUT_SEC){flagReceivingGAVR=fFalse; boneReceiveTimeout=0; __enableCommINT();}
    25a0:	80 91 b5 01 	lds	r24, 0x01B5
    25a4:	88 23       	and	r24, r24
    25a6:	49 f0       	breq	.+18     	; 0x25ba <__vector_11+0x1d0>
    25a8:	80 91 c7 01 	lds	r24, 0x01C7
    25ac:	90 91 c8 01 	lds	r25, 0x01C8
    25b0:	84 30       	cpi	r24, 0x04	; 4
    25b2:	91 05       	cpc	r25, r1
    25b4:	14 f0       	brlt	.+4      	; 0x25ba <__vector_11+0x1d0>
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	01 c0       	rjmp	.+2      	; 0x25bc <__vector_11+0x1d2>
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	88 23       	and	r24, r24
    25be:	a9 f0       	breq	.+42     	; 0x25ea <__vector_11+0x200>
    25c0:	10 92 b5 01 	sts	0x01B5, r1
    25c4:	10 92 c6 01 	sts	0x01C6, r1
    25c8:	10 92 c5 01 	sts	0x01C5, r1
    25cc:	8d e3       	ldi	r24, 0x3D	; 61
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	2d e3       	ldi	r18, 0x3D	; 61
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	f9 01       	movw	r30, r18
    25d6:	20 81       	ld	r18, Z
    25d8:	24 60       	ori	r18, 0x04	; 4
    25da:	fc 01       	movw	r30, r24
    25dc:	20 83       	st	Z, r18
    25de:	8d e6       	ldi	r24, 0x6D	; 109
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	22 e0       	ldi	r18, 0x02	; 2
    25e4:	fc 01       	movw	r30, r24
    25e6:	20 83       	st	Z, r18
    25e8:	14 c0       	rjmp	.+40     	; 0x2612 <__vector_11+0x228>
	else if (!flagReceivingGAVR && boneReceiveTimeout > 0){boneReceiveTimeout=0;}
    25ea:	80 91 b5 01 	lds	r24, 0x01B5
    25ee:	88 23       	and	r24, r24
    25f0:	49 f4       	brne	.+18     	; 0x2604 <__vector_11+0x21a>
    25f2:	80 91 c5 01 	lds	r24, 0x01C5
    25f6:	90 91 c6 01 	lds	r25, 0x01C6
    25fa:	18 16       	cp	r1, r24
    25fc:	19 06       	cpc	r1, r25
    25fe:	14 f4       	brge	.+4      	; 0x2604 <__vector_11+0x21a>
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	01 c0       	rjmp	.+2      	; 0x2606 <__vector_11+0x21c>
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	88 23       	and	r24, r24
    2608:	21 f0       	breq	.+8      	; 0x2612 <__vector_11+0x228>
    260a:	10 92 c6 01 	sts	0x01C6, r1
    260e:	10 92 c5 01 	sts	0x01C5, r1
	else;

}
    2612:	df 91       	pop	r29
    2614:	cf 91       	pop	r28
    2616:	ff 91       	pop	r31
    2618:	ef 91       	pop	r30
    261a:	bf 91       	pop	r27
    261c:	af 91       	pop	r26
    261e:	9f 91       	pop	r25
    2620:	8f 91       	pop	r24
    2622:	7f 91       	pop	r23
    2624:	6f 91       	pop	r22
    2626:	5f 91       	pop	r21
    2628:	4f 91       	pop	r20
    262a:	3f 91       	pop	r19
    262c:	2f 91       	pop	r18
    262e:	0f 90       	pop	r0
    2630:	0f be       	out	0x3f, r0	; 63
    2632:	0f 90       	pop	r0
    2634:	1f 90       	pop	r1
    2636:	18 95       	reti

00002638 <__vector_20>:

//UART Receive from BeagleBone
ISR(USART0_RX_vect){
    2638:	1f 92       	push	r1
    263a:	0f 92       	push	r0
    263c:	0f b6       	in	r0, 0x3f	; 63
    263e:	0f 92       	push	r0
    2640:	11 24       	eor	r1, r1
    2642:	2f 93       	push	r18
    2644:	3f 93       	push	r19
    2646:	8f 93       	push	r24
    2648:	9f 93       	push	r25
    264a:	ef 93       	push	r30
    264c:	ff 93       	push	r31
    264e:	cf 93       	push	r28
    2650:	df 93       	push	r29
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
	UCSR0B &= ~(1 << RXCIE0);
    2656:	81 ec       	ldi	r24, 0xC1	; 193
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	21 ec       	ldi	r18, 0xC1	; 193
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	f9 01       	movw	r30, r18
    2660:	20 81       	ld	r18, Z
    2662:	2f 77       	andi	r18, 0x7F	; 127
    2664:	fc 01       	movw	r30, r24
    2666:	20 83       	st	Z, r18
	__killCommINT();				//make sure all interrupts are disabled that could cripple protocol
    2668:	8d e3       	ldi	r24, 0x3D	; 61
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	fc 01       	movw	r30, r24
    266e:	10 82       	st	Z, r1
    2670:	8d e6       	ldi	r24, 0x6D	; 109
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	fc 01       	movw	r30, r24
    2676:	10 82       	st	Z, r1
	flagReceivingBone=fTrue;
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	80 93 b3 01 	sts	0x01B3, r24
}
    267e:	df 91       	pop	r29
    2680:	cf 91       	pop	r28
    2682:	ff 91       	pop	r31
    2684:	ef 91       	pop	r30
    2686:	9f 91       	pop	r25
    2688:	8f 91       	pop	r24
    268a:	3f 91       	pop	r19
    268c:	2f 91       	pop	r18
    268e:	0f 90       	pop	r0
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	0f 90       	pop	r0
    2694:	1f 90       	pop	r1
    2696:	18 95       	reti

00002698 <__vector_28>:

ISR(USART1_RX_vect){
    2698:	1f 92       	push	r1
    269a:	0f 92       	push	r0
    269c:	0f b6       	in	r0, 0x3f	; 63
    269e:	0f 92       	push	r0
    26a0:	11 24       	eor	r1, r1
    26a2:	2f 93       	push	r18
    26a4:	3f 93       	push	r19
    26a6:	8f 93       	push	r24
    26a8:	9f 93       	push	r25
    26aa:	ef 93       	push	r30
    26ac:	ff 93       	push	r31
    26ae:	cf 93       	push	r28
    26b0:	df 93       	push	r29
    26b2:	cd b7       	in	r28, 0x3d	; 61
    26b4:	de b7       	in	r29, 0x3e	; 62
	UCSR1B &= ~(1 <<RXCIE1);	//disable interrupt
    26b6:	89 ec       	ldi	r24, 0xC9	; 201
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	29 ec       	ldi	r18, 0xC9	; 201
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	f9 01       	movw	r30, r18
    26c0:	20 81       	ld	r18, Z
    26c2:	2f 77       	andi	r18, 0x7F	; 127
    26c4:	fc 01       	movw	r30, r24
    26c6:	20 83       	st	Z, r18
	__killCommINT();
    26c8:	8d e3       	ldi	r24, 0x3D	; 61
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	fc 01       	movw	r30, r24
    26ce:	10 82       	st	Z, r1
    26d0:	8d e6       	ldi	r24, 0x6D	; 109
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	fc 01       	movw	r30, r24
    26d6:	10 82       	st	Z, r1
	flagReceivingGAVR=fTrue;
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	80 93 b5 01 	sts	0x01B5, r24
}
    26de:	df 91       	pop	r29
    26e0:	cf 91       	pop	r28
    26e2:	ff 91       	pop	r31
    26e4:	ef 91       	pop	r30
    26e6:	9f 91       	pop	r25
    26e8:	8f 91       	pop	r24
    26ea:	3f 91       	pop	r19
    26ec:	2f 91       	pop	r18
    26ee:	0f 90       	pop	r0
    26f0:	0f be       	out	0x3f, r0	; 63
    26f2:	0f 90       	pop	r0
    26f4:	1f 90       	pop	r1
    26f6:	18 95       	reti

000026f8 <main>:

/*--------------------------END-Interrupt Service Routines--------------------------------------------------------------------------------*/
/*--------------------------START-Main Program--------------------------------------------------------------------------------------------*/

int main(void)
{
    26f8:	cf 93       	push	r28
    26fa:	df 93       	push	r29
    26fc:	00 d0       	rcall	.+0      	; 0x26fe <main+0x6>
    26fe:	cd b7       	in	r28, 0x3d	; 61
    2700:	de b7       	in	r29, 0x3e	; 62
	//Setup
	DeviceInit();
    2702:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_Z10DeviceInitv>
	AppInit(MYUBRR);
    2706:	81 e8       	ldi	r24, 0x81	; 129
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_Z7AppInitj>
	EnableRTCTimer();
    270e:	0e 94 09 16 	call	0x2c12	; 0x2c12 <_Z14EnableRTCTimerv>
	getDateTime_eeprom(fTrue,fTrue);
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	61 e0       	ldi	r22, 0x01	; 1
    2716:	0e 94 8e 07 	call	0xf1c	; 0xf1c <_Z18getDateTime_eepromhh>
	sei();
    271a:	78 94       	sei
	//Prep/make sure power/temp is good
	GetTemp();
    271c:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <_Z7GetTempv>
	//flagGoodTemp=fTrue;
	TakeADC();
    2720:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <_Z7TakeADCv>
	if (flagGoodVolts && flagGoodTemp){
    2724:	80 91 c0 01 	lds	r24, 0x01C0
    2728:	88 23       	and	r24, r24
    272a:	d1 f0       	breq	.+52     	; 0x2760 <main+0x68>
    272c:	80 91 bf 01 	lds	r24, 0x01BF
    2730:	88 23       	and	r24, r24
    2732:	b1 f0       	breq	.+44     	; 0x2760 <main+0x68>
		PowerUp(POWER_UP_INTERVAL);
    2734:	88 eb       	ldi	r24, 0xB8	; 184
    2736:	9b e0       	ldi	r25, 0x0B	; 11
    2738:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_Z7PowerUpj>
		__enableCommINT();
    273c:	8d e3       	ldi	r24, 0x3D	; 61
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	2d e3       	ldi	r18, 0x3D	; 61
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	f9 01       	movw	r30, r18
    2746:	20 81       	ld	r18, Z
    2748:	24 60       	ori	r18, 0x04	; 4
    274a:	fc 01       	movw	r30, r24
    274c:	20 83       	st	Z, r18
    274e:	8d e6       	ldi	r24, 0x6D	; 109
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	22 e0       	ldi	r18, 0x02	; 2
    2754:	fc 01       	movw	r30, r24
    2756:	20 83       	st	Z, r18
		flagFreshStart=fTrue;
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	80 93 c2 01 	sts	0x01C2, r24
    275e:	07 c0       	rjmp	.+14     	; 0x276e <main+0x76>
	}
	else {flagNormalMode=fTrue;flagFreshStart=fFalse;}
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	80 93 b4 01 	sts	0x01B4, r24
    2766:	10 92 c2 01 	sts	0x01C2, r1
    276a:	01 c0       	rjmp	.+2      	; 0x276e <main+0x76>
		
	//main programming loop
	while(fTrue)
    276c:	00 00       	nop
	{				
		//If receiving UART string, go get rest of it.
		if (flagReceivingBone){
    276e:	80 91 b3 01 	lds	r24, 0x01B3
    2772:	88 23       	and	r24, r24
    2774:	d1 f0       	breq	.+52     	; 0x27aa <main+0xb2>
			ReceiveBone();
    2776:	0e 94 6f 0b 	call	0x16de	; 0x16de <_Z11ReceiveBonev>
			__enableCommINT();
    277a:	8d e3       	ldi	r24, 0x3D	; 61
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	2d e3       	ldi	r18, 0x3D	; 61
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	f9 01       	movw	r30, r18
    2784:	20 81       	ld	r18, Z
    2786:	24 60       	ori	r18, 0x04	; 4
    2788:	fc 01       	movw	r30, r24
    278a:	20 83       	st	Z, r18
    278c:	8d e6       	ldi	r24, 0x6D	; 109
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	22 e0       	ldi	r18, 0x02	; 2
    2792:	fc 01       	movw	r30, r24
    2794:	20 83       	st	Z, r18
			if (!flagReceivingGAVR){		//Just in case there was an interrupt IMMEDIATELY after the enabling of Communication interrupts
    2796:	80 91 b5 01 	lds	r24, 0x01B5
    279a:	88 23       	and	r24, r24
    279c:	31 f4       	brne	.+12     	; 0x27aa <main+0xb2>
				flagGoToSleep=fTrue;
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	80 93 b2 01 	sts	0x01B2, r24
				flagNormalMode=fTrue;
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	80 93 b4 01 	sts	0x01B4, r24
			}			
		}
		
		//Receiving Data/Signals from GAVR
		if (flagReceivingGAVR){
    27aa:	80 91 b5 01 	lds	r24, 0x01B5
    27ae:	88 23       	and	r24, r24
    27b0:	d1 f0       	breq	.+52     	; 0x27e6 <main+0xee>
			ReceiveGAVR();
    27b2:	0e 94 75 0d 	call	0x1aea	; 0x1aea <_Z11ReceiveGAVRv>
			__enableCommINT();
    27b6:	8d e3       	ldi	r24, 0x3D	; 61
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	2d e3       	ldi	r18, 0x3D	; 61
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	f9 01       	movw	r30, r18
    27c0:	20 81       	ld	r18, Z
    27c2:	24 60       	ori	r18, 0x04	; 4
    27c4:	fc 01       	movw	r30, r24
    27c6:	20 83       	st	Z, r18
    27c8:	8d e6       	ldi	r24, 0x6D	; 109
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	22 e0       	ldi	r18, 0x02	; 2
    27ce:	fc 01       	movw	r30, r24
    27d0:	20 83       	st	Z, r18
			if (!flagReceivingBone){		//Just in case there was an interrupt IMMEDIATELY after the enabling of Communication interrupts
    27d2:	80 91 b3 01 	lds	r24, 0x01B3
    27d6:	88 23       	and	r24, r24
    27d8:	31 f4       	brne	.+12     	; 0x27e6 <main+0xee>
				flagGoToSleep=fTrue;
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	80 93 b2 01 	sts	0x01B2, r24
				flagNormalMode=fTrue;
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	80 93 b4 01 	sts	0x01B4, r24
			}			
		}
		
	
		//Communication with GAVR. Either updating the date/time on it or asking for date and time. The internal send machine deals with the flags.
		if ((flagUpdateGAVRClock  || flagUserClock) && !flagWaitingForReceiveGAVR){
    27e6:	80 91 b7 01 	lds	r24, 0x01B7
    27ea:	88 23       	and	r24, r24
    27ec:	21 f4       	brne	.+8      	; 0x27f6 <main+0xfe>
    27ee:	80 91 b9 01 	lds	r24, 0x01B9
    27f2:	88 23       	and	r24, r24
    27f4:	e1 f0       	breq	.+56     	; 0x282e <main+0x136>
    27f6:	80 91 b6 01 	lds	r24, 0x01B6
    27fa:	88 23       	and	r24, r24
    27fc:	c1 f4       	brne	.+48     	; 0x282e <main+0x136>
			__killCommINT();
    27fe:	8d e3       	ldi	r24, 0x3D	; 61
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	fc 01       	movw	r30, r24
    2804:	10 82       	st	Z, r1
    2806:	8d e6       	ldi	r24, 0x6D	; 109
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	fc 01       	movw	r30, r24
    280c:	10 82       	st	Z, r1
			sendGAVR();
    280e:	0e 94 38 09 	call	0x1270	; 0x1270 <_Z8sendGAVRv>
			__enableCommINT();
    2812:	8d e3       	ldi	r24, 0x3D	; 61
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	2d e3       	ldi	r18, 0x3D	; 61
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	f9 01       	movw	r30, r18
    281c:	20 81       	ld	r18, Z
    281e:	24 60       	ori	r18, 0x04	; 4
    2820:	fc 01       	movw	r30, r24
    2822:	20 83       	st	Z, r18
    2824:	8d e6       	ldi	r24, 0x6D	; 109
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	22 e0       	ldi	r18, 0x02	; 2
    282a:	fc 01       	movw	r30, r24
    282c:	20 83       	st	Z, r18
		}

		//When to save to EEPROM. Saves time on lower half of the hour, saves data and time on lower half-hour of midday.
		if (flagNormalMode){
    282e:	80 91 b4 01 	lds	r24, 0x01B4
    2832:	88 23       	and	r24, r24
    2834:	49 f1       	breq	.+82     	; 0x2888 <main+0x190>
			if (currentTime.getMinutes()%30 == 0){
    2836:	8a e8       	ldi	r24, 0x8A	; 138
    2838:	91 e0       	ldi	r25, 0x01	; 1
    283a:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6myTime10getMinutesEv>
    283e:	9e e1       	ldi	r25, 0x1E	; 30
    2840:	69 2f       	mov	r22, r25
    2842:	0e 94 06 19 	call	0x320c	; 0x320c <__udivmodqi4>
    2846:	89 2f       	mov	r24, r25
    2848:	98 2f       	mov	r25, r24
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	99 23       	and	r25, r25
    284e:	09 f0       	breq	.+2      	; 0x2852 <main+0x15a>
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	88 23       	and	r24, r24
    2854:	c9 f0       	breq	.+50     	; 0x2888 <main+0x190>
				if (currentTime.getHours()%12 == 0){
    2856:	8a e8       	ldi	r24, 0x8A	; 138
    2858:	91 e0       	ldi	r25, 0x01	; 1
    285a:	0e 94 bb 04 	call	0x976	; 0x976 <_ZN6myTime8getHoursEv>
    285e:	9c e0       	ldi	r25, 0x0C	; 12
    2860:	69 2f       	mov	r22, r25
    2862:	0e 94 06 19 	call	0x320c	; 0x320c <__udivmodqi4>
    2866:	89 2f       	mov	r24, r25
    2868:	98 2f       	mov	r25, r24
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	99 23       	and	r25, r25
    286e:	09 f0       	breq	.+2      	; 0x2872 <main+0x17a>
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	88 23       	and	r24, r24
    2874:	29 f0       	breq	.+10     	; 0x2880 <main+0x188>
					saveDateTime_eeprom(fTrue,fTrue);
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	61 e0       	ldi	r22, 0x01	; 1
    287a:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
    287e:	04 c0       	rjmp	.+8      	; 0x2888 <main+0x190>
				} else {
					saveDateTime_eeprom(fTrue,fFalse);
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	60 e0       	ldi	r22, 0x00	; 0
    2884:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
				}	
			}						
		}
		
		//Take ADC reading to check battery level, temp to check board temperature.
		if (flagNormalMode){
    2888:	80 91 b4 01 	lds	r24, 0x01B4
    288c:	88 23       	and	r24, r24
    288e:	01 f1       	breq	.+64     	; 0x28d0 <main+0x1d8>
			TakeADC();
    2890:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <_Z7TakeADCv>
			GetTemp();
    2894:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <_Z7GetTempv>
			//If both are good & shutdown is low, keep it low. If shutdown is high, pull low and enable restart
			if (flagGoodVolts && flagGoodTemp){
    2898:	80 91 c0 01 	lds	r24, 0x01C0
    289c:	88 23       	and	r24, r24
    289e:	71 f0       	breq	.+28     	; 0x28bc <main+0x1c4>
    28a0:	80 91 bf 01 	lds	r24, 0x01BF
    28a4:	88 23       	and	r24, r24
    28a6:	51 f0       	breq	.+20     	; 0x28bc <main+0x1c4>
				if(flagShutdown){restart = fTrue;}
    28a8:	80 91 be 01 	lds	r24, 0x01BE
    28ac:	88 23       	and	r24, r24
    28ae:	19 f0       	breq	.+6      	; 0x28b6 <main+0x1be>
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	80 93 c1 01 	sts	0x01C1, r24
				flagShutdown = fFalse;
    28b6:	10 92 be 01 	sts	0x01BE, r1
    28ba:	0a c0       	rjmp	.+20     	; 0x28d0 <main+0x1d8>
			//If one is bad and shutdown is low, pull high as well as pull new shutdown high to indicate imminent power kill
			} else {
				if (!flagShutdown){
    28bc:	80 91 be 01 	lds	r24, 0x01BE
    28c0:	88 23       	and	r24, r24
    28c2:	19 f4       	brne	.+6      	; 0x28ca <main+0x1d2>
					flagNewShutdown = fTrue;
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	80 93 bd 01 	sts	0x01BD, r24
				}
				flagShutdown = fTrue;
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	80 93 be 01 	sts	0x01BE, r24
			}
		}			
		
		//About to shutdown, save EEPROM
		if (flagNewShutdown){
    28d0:	80 91 bd 01 	lds	r24, 0x01BD
    28d4:	88 23       	and	r24, r24
    28d6:	b9 f0       	breq	.+46     	; 0x2906 <main+0x20e>
			//Make sure nothing messes with the routine that we care about
			__killCommINT();
    28d8:	8d e3       	ldi	r24, 0x3D	; 61
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	fc 01       	movw	r30, r24
    28de:	10 82       	st	Z, r1
    28e0:	8d e6       	ldi	r24, 0x6D	; 109
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	fc 01       	movw	r30, r24
    28e6:	10 82       	st	Z, r1
			flagGoToSleep = fTrue;
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	80 93 b2 01 	sts	0x01B2, r24
			flagReceivingBone = fFalse;
    28ee:	10 92 b3 01 	sts	0x01B3, r1
			flagNoGPSTime=fFalse;
    28f2:	10 92 bc 01 	sts	0x01BC, r1
			saveDateTime_eeprom(fTrue,fTrue);
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	61 e0       	ldi	r22, 0x01	; 1
    28fa:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
			
			//Kill power--Alert comes in that function
			PowerDown();
    28fe:	0e 94 92 18 	call	0x3124	; 0x3124 <_Z9PowerDownv>
			flagNewShutdown = fFalse;
    2902:	10 92 bd 01 	sts	0x01BD, r1
		}
		
		//If Restart, broadcast date and time to BeagleBone and other AVR
		if (restart){
    2906:	80 91 c1 01 	lds	r24, 0x01C1
    290a:	88 23       	and	r24, r24
    290c:	89 f1       	breq	.+98     	; 0x2970 <main+0x278>
			__enableCommINT();	//enable BONE interrupt. Will come out with newest time. Give it 10 seconds to kill
    290e:	8d e3       	ldi	r24, 0x3D	; 61
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	2d e3       	ldi	r18, 0x3D	; 61
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	f9 01       	movw	r30, r18
    2918:	20 81       	ld	r18, Z
    291a:	24 60       	ori	r18, 0x04	; 4
    291c:	fc 01       	movw	r30, r24
    291e:	20 83       	st	Z, r18
    2920:	8d e6       	ldi	r24, 0x6D	; 109
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	22 e0       	ldi	r18, 0x02	; 2
    2926:	fc 01       	movw	r30, r24
    2928:	20 83       	st	Z, r18
			PowerUp(POWER_UP_INTERVAL);
    292a:	88 eb       	ldi	r24, 0xB8	; 184
    292c:	9b e0       	ldi	r25, 0x0B	; 11
    292e:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_Z7PowerUpj>
			//Check to see if pins are ready. Use timeout of 10 seconds for pins to come high.
			int waitTime = 0;
    2932:	1a 82       	std	Y+2, r1	; 0x02
    2934:	19 82       	std	Y+1, r1	; 0x01
			while (waitTime < 3 && restart){waitTime++; Wait_sec(1);}
    2936:	09 c0       	rjmp	.+18     	; 0x294a <main+0x252>
    2938:	89 81       	ldd	r24, Y+1	; 0x01
    293a:	9a 81       	ldd	r25, Y+2	; 0x02
    293c:	01 96       	adiw	r24, 0x01	; 1
    293e:	9a 83       	std	Y+2, r25	; 0x02
    2940:	89 83       	std	Y+1, r24	; 0x01
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <_Z8Wait_seci>
    294a:	89 81       	ldd	r24, Y+1	; 0x01
    294c:	9a 81       	ldd	r25, Y+2	; 0x02
    294e:	83 30       	cpi	r24, 0x03	; 3
    2950:	91 05       	cpc	r25, r1
    2952:	34 f4       	brge	.+12     	; 0x2960 <main+0x268>
    2954:	80 91 c1 01 	lds	r24, 0x01C1
    2958:	88 23       	and	r24, r24
    295a:	11 f0       	breq	.+4      	; 0x2960 <main+0x268>
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	01 c0       	rjmp	.+2      	; 0x2962 <main+0x26a>
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	88 23       	and	r24, r24
    2964:	49 f7       	brne	.-46     	; 0x2938 <main+0x240>
			flagUpdateGAVRClock=fTrue;
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	80 93 b7 01 	sts	0x01B7, r24
			flagNoGPSTime=fFalse;
    296c:	10 92 bc 01 	sts	0x01BC, r1
			//If we get to here, the flag is not reset or there was a timeout. If timout, goes to sleep and on the next cycle it's awake it will try and 
			//get an updated date and time from the BeagleBone. Always update GAVR.			
		}		
		
		//If it's time to go to sleep, go to sleep. INT0 or TIM2_overflow will wake it up.
		if (flagGoToSleep){GoToSleep(flagShutdown);}
    2970:	80 91 b2 01 	lds	r24, 0x01B2
    2974:	88 23       	and	r24, r24
    2976:	21 f0       	breq	.+8      	; 0x2980 <main+0x288>
    2978:	80 91 be 01 	lds	r24, 0x01BE
    297c:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <_Z9GoToSleeph>
		
		//Add logic for an invalid date and time somehow getting in here
		if (flagInvalidDateTime && !flagShutdown){
    2980:	80 91 ba 01 	lds	r24, 0x01BA
    2984:	88 23       	and	r24, r24
    2986:	09 f4       	brne	.+2      	; 0x298a <main+0x292>
    2988:	f1 ce       	rjmp	.-542    	; 0x276c <main+0x74>
    298a:	80 91 be 01 	lds	r24, 0x01BE
    298e:	88 23       	and	r24, r24
    2990:	09 f0       	breq	.+2      	; 0x2994 <main+0x29c>
    2992:	ec ce       	rjmp	.-552    	; 0x276c <main+0x74>
			flagInvalidDateTime=fFalse;
    2994:	10 92 ba 01 	sts	0x01BA, r1
			flagUserClock=fTrue;
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	80 93 b9 01 	sts	0x01B9, r24
		flagFreshStart=fTrue;
	}
	else {flagNormalMode=fTrue;flagFreshStart=fFalse;}
		
	//main programming loop
	while(fTrue)
    299e:	e6 ce       	rjmp	.-564    	; 0x276c <main+0x74>

000029a0 <_Z10DeviceInitv>:

/*--------------------------END-Main Program-------------------------------------------------------------------------------------*/
/*--------------------------START-Public Funtions--------------------------------------------------------------------------------*/

/*************************************************************************************************************/
void DeviceInit(){
    29a0:	cf 93       	push	r28
    29a2:	df 93       	push	r29
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
	//Set all ports to input with no pull
	DDRA = 0;
    29a8:	81 e2       	ldi	r24, 0x21	; 33
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	fc 01       	movw	r30, r24
    29ae:	10 82       	st	Z, r1
	DDRB = 0;
    29b0:	84 e2       	ldi	r24, 0x24	; 36
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	fc 01       	movw	r30, r24
    29b6:	10 82       	st	Z, r1
	DDRC = 0;
    29b8:	87 e2       	ldi	r24, 0x27	; 39
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	fc 01       	movw	r30, r24
    29be:	10 82       	st	Z, r1
	DDRD = 0;
    29c0:	8a e2       	ldi	r24, 0x2A	; 42
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	fc 01       	movw	r30, r24
    29c6:	10 82       	st	Z, r1
	
	PORTA = 0;
    29c8:	82 e2       	ldi	r24, 0x22	; 34
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	fc 01       	movw	r30, r24
    29ce:	10 82       	st	Z, r1
	PORTB = 0;
    29d0:	85 e2       	ldi	r24, 0x25	; 37
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	fc 01       	movw	r30, r24
    29d6:	10 82       	st	Z, r1
	PORTC = 0;
    29d8:	88 e2       	ldi	r24, 0x28	; 40
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	fc 01       	movw	r30, r24
    29de:	10 82       	st	Z, r1
	PORTD = 0;
    29e0:	8b e2       	ldi	r24, 0x2B	; 43
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	fc 01       	movw	r30, r24
    29e6:	10 82       	st	Z, r1
}
    29e8:	df 91       	pop	r29
    29ea:	cf 91       	pop	r28
    29ec:	08 95       	ret

000029ee <_Z7AppInitj>:
/*************************************************************************************************************/
void AppInit(unsigned int ubrr){
    29ee:	cf 93       	push	r28
    29f0:	df 93       	push	r29
    29f2:	00 d0       	rcall	.+0      	; 0x29f4 <_Z7AppInitj+0x6>
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
    29f8:	9a 83       	std	Y+2, r25	; 0x02
    29fa:	89 83       	std	Y+1, r24	; 0x01
	
	//Set BAUD rate of UART
	UBRR0L = ubrr;   												//set low byte of baud rate
    29fc:	84 ec       	ldi	r24, 0xC4	; 196
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	29 81       	ldd	r18, Y+1	; 0x01
    2a02:	fc 01       	movw	r30, r24
    2a04:	20 83       	st	Z, r18
	UBRR0H = (ubrr >> 8);											//set high byte of baud rate
    2a06:	85 ec       	ldi	r24, 0xC5	; 197
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	29 81       	ldd	r18, Y+1	; 0x01
    2a0c:	3a 81       	ldd	r19, Y+2	; 0x02
    2a0e:	23 2f       	mov	r18, r19
    2a10:	33 27       	eor	r19, r19
    2a12:	fc 01       	movw	r30, r24
    2a14:	20 83       	st	Z, r18
	//UCSR0A |= (1 << U2X0);										//set high speed baud clock, in ASYNC mode
	
	//Enable UART_TX0 and UART_RX0
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);
    2a16:	81 ec       	ldi	r24, 0xC1	; 193
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	28 e1       	ldi	r18, 0x18	; 24
    2a1c:	fc 01       	movw	r30, r24
    2a1e:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);							//Asynchronous; 8 data bits, no parity
    2a20:	82 ec       	ldi	r24, 0xC2	; 194
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	26 e0       	ldi	r18, 0x06	; 6
    2a26:	fc 01       	movw	r30, r24
    2a28:	20 83       	st	Z, r18
	//UCSR0B |= (1 << RXCIE0);
	
	//Set BAUD for UART1
	UBRR1L = ubrr;
    2a2a:	8c ec       	ldi	r24, 0xCC	; 204
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	29 81       	ldd	r18, Y+1	; 0x01
    2a30:	fc 01       	movw	r30, r24
    2a32:	20 83       	st	Z, r18
	UBRR0H = (ubrr >> 8);
    2a34:	85 ec       	ldi	r24, 0xC5	; 197
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	29 81       	ldd	r18, Y+1	; 0x01
    2a3a:	3a 81       	ldd	r19, Y+2	; 0x02
    2a3c:	23 2f       	mov	r18, r19
    2a3e:	33 27       	eor	r19, r19
    2a40:	fc 01       	movw	r30, r24
    2a42:	20 83       	st	Z, r18
	//UCSR1A |= (1 << U2X1);
	
	//Enable UART_TX1 and UART_RX1
	UCSR1B = (1 << TXEN1)|(1 << RXEN1);
    2a44:	89 ec       	ldi	r24, 0xC9	; 201
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	28 e1       	ldi	r18, 0x18	; 24
    2a4a:	fc 01       	movw	r30, r24
    2a4c:	20 83       	st	Z, r18
	UCSR1C = (1 << UCSZ11)|(1 << UCSZ10);
    2a4e:	8a ec       	ldi	r24, 0xCA	; 202
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	26 e0       	ldi	r18, 0x06	; 6
    2a54:	fc 01       	movw	r30, r24
    2a56:	20 83       	st	Z, r18
	//UCSR1B |= (1 << RXCIE1);
	
	//Disable power to all peripherals
	PRR0 |= (1 << PRTWI)|(1 << PRTIM2)|(1 << PRTIM0)|(1 << PRUSART1)|(1 << PRTIM1)|(1 << PRADC)|(1 << PRSPI);  //Turn EVERYTHING off initially except USART0(UART0)
    2a58:	84 e6       	ldi	r24, 0x64	; 100
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	24 e6       	ldi	r18, 0x64	; 100
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	f9 01       	movw	r30, r18
    2a62:	20 81       	ld	r18, Z
    2a64:	2d 6f       	ori	r18, 0xFD	; 253
    2a66:	fc 01       	movw	r30, r24
    2a68:	20 83       	st	Z, r18

	//Enable status LEDs
	ddrSLEEPled |= (1 << bnSLEEPled);
    2a6a:	8a e2       	ldi	r24, 0x2A	; 42
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	2a e2       	ldi	r18, 0x2A	; 42
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	f9 01       	movw	r30, r18
    2a74:	20 81       	ld	r18, Z
    2a76:	20 68       	ori	r18, 0x80	; 128
    2a78:	fc 01       	movw	r30, r24
    2a7a:	20 83       	st	Z, r18
	ddrSTATUSled |= (1 << bnSTATUSled);
    2a7c:	87 e2       	ldi	r24, 0x27	; 39
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	27 e2       	ldi	r18, 0x27	; 39
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	f9 01       	movw	r30, r18
    2a86:	20 81       	ld	r18, Z
    2a88:	24 60       	ori	r18, 0x04	; 4
    2a8a:	fc 01       	movw	r30, r24
    2a8c:	20 83       	st	Z, r18
	prtSLEEPled &= ~(1 << bnSLEEPled);	//turn off initially
    2a8e:	8b e2       	ldi	r24, 0x2B	; 43
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	2b e2       	ldi	r18, 0x2B	; 43
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	f9 01       	movw	r30, r18
    2a98:	20 81       	ld	r18, Z
    2a9a:	2f 77       	andi	r18, 0x7F	; 127
    2a9c:	fc 01       	movw	r30, r24
    2a9e:	20 83       	st	Z, r18
	prtSTATUSled |= (1 << bnSTATUSled);	//turn on initially
    2aa0:	88 e2       	ldi	r24, 0x28	; 40
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	28 e2       	ldi	r18, 0x28	; 40
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	f9 01       	movw	r30, r18
    2aaa:	20 81       	ld	r18, Z
    2aac:	24 60       	ori	r18, 0x04	; 4
    2aae:	fc 01       	movw	r30, r24
    2ab0:	20 83       	st	Z, r18
	
	//Enable BB and GAVR alert pins...outputs, no pull by default.
	ddrBONEINT |= (1 << bnBBint);
    2ab2:	81 e2       	ldi	r24, 0x21	; 33
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	21 e2       	ldi	r18, 0x21	; 33
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	f9 01       	movw	r30, r18
    2abc:	20 81       	ld	r18, Z
    2abe:	24 60       	ori	r18, 0x04	; 4
    2ac0:	fc 01       	movw	r30, r24
    2ac2:	20 83       	st	Z, r18
	ddrGAVRINT |= (1 << bnGAVRint);
    2ac4:	84 e2       	ldi	r24, 0x24	; 36
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	24 e2       	ldi	r18, 0x24	; 36
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	f9 01       	movw	r30, r18
    2ace:	20 81       	ld	r18, Z
    2ad0:	28 60       	ori	r18, 0x08	; 8
    2ad2:	fc 01       	movw	r30, r24
    2ad4:	20 83       	st	Z, r18
	
	//Enable GAVR interrupt pin, our PB3, it's INT2
	ddrGAVRINT |= (1 << bnGAVRINT);
    2ad6:	84 e2       	ldi	r24, 0x24	; 36
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	24 e2       	ldi	r18, 0x24	; 36
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	f9 01       	movw	r30, r18
    2ae0:	20 81       	ld	r18, Z
    2ae2:	28 60       	ori	r18, 0x08	; 8
    2ae4:	fc 01       	movw	r30, r24
    2ae6:	20 83       	st	Z, r18
	prtGAVRINT &=  ~(1 << bnGAVRINT);	//set low at first
    2ae8:	85 e2       	ldi	r24, 0x25	; 37
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	25 e2       	ldi	r18, 0x25	; 37
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	f9 01       	movw	r30, r18
    2af2:	20 81       	ld	r18, Z
    2af4:	27 7f       	andi	r18, 0xF7	; 247
    2af6:	fc 01       	movw	r30, r24
    2af8:	20 83       	st	Z, r18
	
	//Enable enable signals
	ddrENABLE |= (1 << bnGPSen)|(1 << bnGAVRen)|(1 << bnLCDen)|(1 << bnBBen);
    2afa:	81 e2       	ldi	r24, 0x21	; 33
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	21 e2       	ldi	r18, 0x21	; 33
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	f9 01       	movw	r30, r18
    2b04:	20 81       	ld	r18, Z
    2b06:	20 6f       	ori	r18, 0xF0	; 240
    2b08:	fc 01       	movw	r30, r24
    2b0a:	20 83       	st	Z, r18
	ddrTEMPen |= (1 << bnTEMPen);
    2b0c:	84 e2       	ldi	r24, 0x24	; 36
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	24 e2       	ldi	r18, 0x24	; 36
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	f9 01       	movw	r30, r18
    2b16:	20 81       	ld	r18, Z
    2b18:	21 60       	ori	r18, 0x01	; 1
    2b1a:	fc 01       	movw	r30, r24
    2b1c:	20 83       	st	Z, r18
	ddrMAINen |= (1 << bnMAINen);
    2b1e:	87 e2       	ldi	r24, 0x27	; 39
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	27 e2       	ldi	r18, 0x27	; 39
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	f9 01       	movw	r30, r18
    2b28:	20 81       	ld	r18, Z
    2b2a:	21 60       	ori	r18, 0x01	; 1
    2b2c:	fc 01       	movw	r30, r24
    2b2e:	20 83       	st	Z, r18
	PowerDown();
    2b30:	0e 94 92 18 	call	0x3124	; 0x3124 <_Z9PowerDownv>
	__killTemp();
    2b34:	85 e2       	ldi	r24, 0x25	; 37
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	25 e2       	ldi	r18, 0x25	; 37
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	f9 01       	movw	r30, r18
    2b3e:	20 81       	ld	r18, Z
    2b40:	2e 7f       	andi	r18, 0xFE	; 254
    2b42:	fc 01       	movw	r30, r24
    2b44:	20 83       	st	Z, r18

	
	//Enable INT2. Note* Pin change interrupts will NOT wake AVR from Power-Save mode. Only INT0-2 will.
	EICRA = (1 << ISC21)|(1 << ISC20);			//falling edge of INT2 enables interrupt
    2b46:	89 e6       	ldi	r24, 0x69	; 105
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	20 e3       	ldi	r18, 0x30	; 48
    2b4c:	fc 01       	movw	r30, r24
    2b4e:	20 83       	st	Z, r18
	EIMSK = (1 << INT2);						//enable INT2 global interrupt
    2b50:	8d e3       	ldi	r24, 0x3D	; 61
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	24 e0       	ldi	r18, 0x04	; 4
    2b56:	fc 01       	movw	r30, r24
    2b58:	20 83       	st	Z, r18
	
	//Enable PCINT17
	PCMSK1 |= (1 << PCINT17);
    2b5a:	8c e6       	ldi	r24, 0x6C	; 108
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	2c e6       	ldi	r18, 0x6C	; 108
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	f9 01       	movw	r30, r18
    2b64:	20 81       	ld	r18, Z
    2b66:	22 60       	ori	r18, 0x02	; 2
    2b68:	fc 01       	movw	r30, r24
    2b6a:	20 83       	st	Z, r18
	PCICR |= (1 << PCIE0);
    2b6c:	88 e6       	ldi	r24, 0x68	; 104
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	28 e6       	ldi	r18, 0x68	; 104
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	f9 01       	movw	r30, r18
    2b76:	20 81       	ld	r18, Z
    2b78:	21 60       	ori	r18, 0x01	; 1
    2b7a:	fc 01       	movw	r30, r24
    2b7c:	20 83       	st	Z, r18
	
	//Enable SPI for TI temperature
	ddrSpi0 |= (1 << bnMosi0)|(1 << bnSck0)|(1 << bnSS0);	//outputs
    2b7e:	84 e2       	ldi	r24, 0x24	; 36
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	24 e2       	ldi	r18, 0x24	; 36
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	f9 01       	movw	r30, r18
    2b88:	20 81       	ld	r18, Z
    2b8a:	20 6b       	ori	r18, 0xB0	; 176
    2b8c:	fc 01       	movw	r30, r24
    2b8e:	20 83       	st	Z, r18
	ddrSpi0 &= ~(1 << bnMiso0);
    2b90:	84 e2       	ldi	r24, 0x24	; 36
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	24 e2       	ldi	r18, 0x24	; 36
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	f9 01       	movw	r30, r18
    2b9a:	20 81       	ld	r18, Z
    2b9c:	2f 7b       	andi	r18, 0xBF	; 191
    2b9e:	fc 01       	movw	r30, r24
    2ba0:	20 83       	st	Z, r18
	prtSpi0 |= (1 << bnSS0)|(1 << bnSck0);		//keep SS and SCK high
    2ba2:	85 e2       	ldi	r24, 0x25	; 37
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	25 e2       	ldi	r18, 0x25	; 37
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	f9 01       	movw	r30, r18
    2bac:	20 81       	ld	r18, Z
    2bae:	20 69       	ori	r18, 0x90	; 144
    2bb0:	fc 01       	movw	r30, r24
    2bb2:	20 83       	st	Z, r18
	prtSpi0 &= ~(1 << bnMosi0);		//keep Miso low
    2bb4:	85 e2       	ldi	r24, 0x25	; 37
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	25 e2       	ldi	r18, 0x25	; 37
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	f9 01       	movw	r30, r18
    2bbe:	20 81       	ld	r18, Z
    2bc0:	2f 7d       	andi	r18, 0xDF	; 223
    2bc2:	fc 01       	movw	r30, r24
    2bc4:	20 83       	st	Z, r18
	
	//Init variables
	flagGoToSleep = fTrue;			//changes to fTrue in final implementation
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	80 93 b2 01 	sts	0x01B2, r24
	flagReceivingBone = fFalse;
    2bcc:	10 92 b3 01 	sts	0x01B3, r1
	flagNormalMode=fTrue;
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	80 93 b4 01 	sts	0x01B4, r24

	flagUpdateGAVRClock=fFalse;	//this might need to be high
    2bd6:	10 92 b7 01 	sts	0x01B7, r1
	flagSendingGAVR=fFalse;
    2bda:	10 92 b8 01 	sts	0x01B8, r1
	flagUserClock=fFalse;
    2bde:	10 92 b9 01 	sts	0x01B9, r1
	flagInvalidDateTime=fFalse;
    2be2:	10 92 ba 01 	sts	0x01BA, r1
	flagWaitingToSendGAVR=fFalse;
    2be6:	10 92 bb 01 	sts	0x01BB, r1
	flagNoGPSTime=fFalse;
    2bea:	10 92 bc 01 	sts	0x01BC, r1
	
	restart=fFalse;
    2bee:	10 92 c1 01 	sts	0x01C1, r1
	flagNewShutdown=fFalse;
    2bf2:	10 92 bd 01 	sts	0x01BD, r1
	flagShutdown  = fFalse;
    2bf6:	10 92 be 01 	sts	0x01BE, r1
	flagGoodVolts=fFalse;
    2bfa:	10 92 c0 01 	sts	0x01C0, r1
	flagGoodTemp=fFalse;
    2bfe:	10 92 bf 01 	sts	0x01BF, r1
	flagFreshStart=fTrue;
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	80 93 c2 01 	sts	0x01C2, r24
}
    2c08:	0f 90       	pop	r0
    2c0a:	0f 90       	pop	r0
    2c0c:	df 91       	pop	r29
    2c0e:	cf 91       	pop	r28
    2c10:	08 95       	ret

00002c12 <_Z14EnableRTCTimerv>:
/*************************************************************************************************************/
void EnableRTCTimer(){
    2c12:	cf 93       	push	r28
    2c14:	df 93       	push	r29
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
	//Asynchronous should be done based on TOSC1 and TOSC2
	//Give power back to Timer2
	PRR0 &= ~(1 << PRTIM2);
    2c1a:	84 e6       	ldi	r24, 0x64	; 100
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	24 e6       	ldi	r18, 0x64	; 100
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	f9 01       	movw	r30, r18
    2c24:	20 81       	ld	r18, Z
    2c26:	2f 7b       	andi	r18, 0xBF	; 191
    2c28:	fc 01       	movw	r30, r24
    2c2a:	20 83       	st	Z, r18
	Wait_ms(1);	//give it time to power on
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <_Z7Wait_msi>
	
	//Set to Asynchronous mode, uses TOSC1/TOSC2 pins
	ASSR |= (1 << AS2);
    2c34:	86 eb       	ldi	r24, 0xB6	; 182
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	26 eb       	ldi	r18, 0xB6	; 182
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	f9 01       	movw	r30, r18
    2c3e:	20 81       	ld	r18, Z
    2c40:	20 62       	ori	r18, 0x20	; 32
    2c42:	fc 01       	movw	r30, r24
    2c44:	20 83       	st	Z, r18
	
	//Set prescaler, initialize registers
	TCCR2B |= (1 << CS22)|(1 << CS20);	//128 prescaler, should click into overflow every second
    2c46:	81 eb       	ldi	r24, 0xB1	; 177
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	21 eb       	ldi	r18, 0xB1	; 177
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	f9 01       	movw	r30, r18
    2c50:	20 81       	ld	r18, Z
    2c52:	25 60       	ori	r18, 0x05	; 5
    2c54:	fc 01       	movw	r30, r24
    2c56:	20 83       	st	Z, r18
	while ((ASSR & ((1 << TCR2BUB)|(1 << TCN2UB))));	//wait for it not to be busy
    2c58:	86 eb       	ldi	r24, 0xB6	; 182
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	80 81       	ld	r24, Z
    2c60:	88 2f       	mov	r24, r24
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	81 71       	andi	r24, 0x11	; 17
    2c66:	90 70       	andi	r25, 0x00	; 0
    2c68:	21 e0       	ldi	r18, 0x01	; 1
    2c6a:	00 97       	sbiw	r24, 0x00	; 0
    2c6c:	09 f4       	brne	.+2      	; 0x2c70 <_Z14EnableRTCTimerv+0x5e>
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	22 23       	and	r18, r18
    2c72:	91 f7       	brne	.-28     	; 0x2c58 <_Z14EnableRTCTimerv+0x46>
	TIFR2 = (1 << TOV2);								//Clear any interrupts pending for the timer
    2c74:	87 e3       	ldi	r24, 0x37	; 55
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	21 e0       	ldi	r18, 0x01	; 1
    2c7a:	fc 01       	movw	r30, r24
    2c7c:	20 83       	st	Z, r18
	TIMSK2 = (1 << TOIE2);								//Enable overflow on it
    2c7e:	80 e7       	ldi	r24, 0x70	; 112
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	21 e0       	ldi	r18, 0x01	; 1
    2c84:	fc 01       	movw	r30, r24
    2c86:	20 83       	st	Z, r18
	
	//Away we go
}
    2c88:	df 91       	pop	r29
    2c8a:	cf 91       	pop	r28
    2c8c:	08 95       	ret

00002c8e <_Z7Wait_msi>:
/*************************************************************************************************************/
void Wait_ms(volatile int delay)
{
    2c8e:	cf 93       	push	r28
    2c90:	df 93       	push	r29
    2c92:	00 d0       	rcall	.+0      	; 0x2c94 <_Z7Wait_msi+0x6>
    2c94:	00 d0       	rcall	.+0      	; 0x2c96 <_Z7Wait_msi+0x8>
    2c96:	cd b7       	in	r28, 0x3d	; 61
    2c98:	de b7       	in	r29, 0x3e	; 62
    2c9a:	9c 83       	std	Y+4, r25	; 0x04
    2c9c:	8b 83       	std	Y+3, r24	; 0x03
	volatile int i;

	while(delay > 0){
    2c9e:	18 c0       	rjmp	.+48     	; 0x2cd0 <_Z7Wait_msi+0x42>
		for(i = 0; i < 800; i++){
    2ca0:	1a 82       	std	Y+2, r1	; 0x02
    2ca2:	19 82       	std	Y+1, r1	; 0x01
    2ca4:	06 c0       	rjmp	.+12     	; 0x2cb2 <_Z7Wait_msi+0x24>
			asm volatile("nop");
    2ca6:	00 00       	nop
void Wait_ms(volatile int delay)
{
	volatile int i;

	while(delay > 0){
		for(i = 0; i < 800; i++){
    2ca8:	89 81       	ldd	r24, Y+1	; 0x01
    2caa:	9a 81       	ldd	r25, Y+2	; 0x02
    2cac:	01 96       	adiw	r24, 0x01	; 1
    2cae:	9a 83       	std	Y+2, r25	; 0x02
    2cb0:	89 83       	std	Y+1, r24	; 0x01
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb6:	21 e0       	ldi	r18, 0x01	; 1
    2cb8:	33 e0       	ldi	r19, 0x03	; 3
    2cba:	80 32       	cpi	r24, 0x20	; 32
    2cbc:	93 07       	cpc	r25, r19
    2cbe:	0c f0       	brlt	.+2      	; 0x2cc2 <_Z7Wait_msi+0x34>
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	22 23       	and	r18, r18
    2cc4:	81 f7       	brne	.-32     	; 0x2ca6 <_Z7Wait_msi+0x18>
			asm volatile("nop");
		}
		delay -= 1;
    2cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	9c 83       	std	Y+4, r25	; 0x04
    2cce:	8b 83       	std	Y+3, r24	; 0x03
/*************************************************************************************************************/
void Wait_ms(volatile int delay)
{
	volatile int i;

	while(delay > 0){
    2cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd4:	21 e0       	ldi	r18, 0x01	; 1
    2cd6:	18 16       	cp	r1, r24
    2cd8:	19 06       	cpc	r1, r25
    2cda:	0c f0       	brlt	.+2      	; 0x2cde <_Z7Wait_msi+0x50>
    2cdc:	20 e0       	ldi	r18, 0x00	; 0
    2cde:	22 23       	and	r18, r18
    2ce0:	f9 f6       	brne	.-66     	; 0x2ca0 <_Z7Wait_msi+0x12>
		for(i = 0; i < 800; i++){
			asm volatile("nop");
		}
		delay -= 1;
	}
}
    2ce2:	0f 90       	pop	r0
    2ce4:	0f 90       	pop	r0
    2ce6:	0f 90       	pop	r0
    2ce8:	0f 90       	pop	r0
    2cea:	df 91       	pop	r29
    2cec:	cf 91       	pop	r28
    2cee:	08 95       	ret

00002cf0 <_Z8Wait_seci>:
/*************************************************************************************************************/
void Wait_sec(volatile int sec){
    2cf0:	cf 93       	push	r28
    2cf2:	df 93       	push	r29
    2cf4:	00 d0       	rcall	.+0      	; 0x2cf6 <_Z8Wait_seci+0x6>
    2cf6:	00 d0       	rcall	.+0      	; 0x2cf8 <_Z8Wait_seci+0x8>
    2cf8:	00 d0       	rcall	.+0      	; 0x2cfa <_Z8Wait_seci+0xa>
    2cfa:	cd b7       	in	r28, 0x3d	; 61
    2cfc:	de b7       	in	r29, 0x3e	; 62
    2cfe:	9e 83       	std	Y+6, r25	; 0x06
    2d00:	8d 83       	std	Y+5, r24	; 0x05
	volatile int startingTime = currentTime.getSeconds();
    2d02:	8a e8       	ldi	r24, 0x8A	; 138
    2d04:	91 e0       	ldi	r25, 0x01	; 1
    2d06:	0e 94 99 04 	call	0x932	; 0x932 <_ZN6myTime10getSecondsEv>
    2d0a:	88 2f       	mov	r24, r24
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	9a 83       	std	Y+2, r25	; 0x02
    2d10:	89 83       	std	Y+1, r24	; 0x01
	volatile int endingTime= (startingTime+sec)%60;
    2d12:	29 81       	ldd	r18, Y+1	; 0x01
    2d14:	3a 81       	ldd	r19, Y+2	; 0x02
    2d16:	8d 81       	ldd	r24, Y+5	; 0x05
    2d18:	9e 81       	ldd	r25, Y+6	; 0x06
    2d1a:	82 0f       	add	r24, r18
    2d1c:	93 1f       	adc	r25, r19
    2d1e:	2c e3       	ldi	r18, 0x3C	; 60
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	b9 01       	movw	r22, r18
    2d24:	0e 94 12 19 	call	0x3224	; 0x3224 <__divmodhi4>
    2d28:	9c 83       	std	Y+4, r25	; 0x04
    2d2a:	8b 83       	std	Y+3, r24	; 0x03
	while (currentTime.getSeconds() != endingTime){asm volatile ("nop");}
    2d2c:	01 c0       	rjmp	.+2      	; 0x2d30 <_Z8Wait_seci+0x40>
    2d2e:	00 00       	nop
    2d30:	8a e8       	ldi	r24, 0x8A	; 138
    2d32:	91 e0       	ldi	r25, 0x01	; 1
    2d34:	0e 94 99 04 	call	0x932	; 0x932 <_ZN6myTime10getSecondsEv>
    2d38:	28 2f       	mov	r18, r24
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d40:	41 e0       	ldi	r20, 0x01	; 1
    2d42:	28 17       	cp	r18, r24
    2d44:	39 07       	cpc	r19, r25
    2d46:	09 f4       	brne	.+2      	; 0x2d4a <_Z8Wait_seci+0x5a>
    2d48:	40 e0       	ldi	r20, 0x00	; 0
    2d4a:	44 23       	and	r20, r20
    2d4c:	81 f7       	brne	.-32     	; 0x2d2e <_Z8Wait_seci+0x3e>
}
    2d4e:	26 96       	adiw	r28, 0x06	; 6
    2d50:	0f b6       	in	r0, 0x3f	; 63
    2d52:	f8 94       	cli
    2d54:	de bf       	out	0x3e, r29	; 62
    2d56:	0f be       	out	0x3f, r0	; 63
    2d58:	cd bf       	out	0x3d, r28	; 61
    2d5a:	df 91       	pop	r29
    2d5c:	cf 91       	pop	r28
    2d5e:	08 95       	ret

00002d60 <_Z9GoToSleeph>:

/*************************************************************************************************************/

void GoToSleep(BOOL shortOrLong){
    2d60:	cf 93       	push	r28
    2d62:	df 93       	push	r29
    2d64:	00 d0       	rcall	.+0      	; 0x2d66 <_Z9GoToSleeph+0x6>
    2d66:	00 d0       	rcall	.+0      	; 0x2d68 <_Z9GoToSleeph+0x8>
    2d68:	0f 92       	push	r0
    2d6a:	cd b7       	in	r28, 0x3d	; 61
    2d6c:	de b7       	in	r29, 0x3e	; 62
    2d6e:	8d 83       	std	Y+5, r24	; 0x05
		sei();
    2d70:	78 94       	sei
		volatile int sleepTime, sleepTicks = 0;
    2d72:	1c 82       	std	Y+4, r1	; 0x04
    2d74:	1b 82       	std	Y+3, r1	; 0x03
		//If bool is true, we are in low power mode/backup, sleep for 60 seconds then check ADC again
		if (shortOrLong == fTrue){
    2d76:	8d 81       	ldd	r24, Y+5	; 0x05
    2d78:	81 30       	cpi	r24, 0x01	; 1
    2d7a:	49 f4       	brne	.+18     	; 0x2d8e <_Z9GoToSleeph+0x2e>
			sleepTime = SLEEP_TICKS_LOWV;
    2d7c:	8c e0       	ldi	r24, 0x0C	; 12
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	9a 83       	std	Y+2, r25	; 0x02
    2d82:	89 83       	std	Y+1, r24	; 0x01
			EIMSK = 0;						//no int2
    2d84:	8d e3       	ldi	r24, 0x3D	; 61
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	fc 01       	movw	r30, r24
    2d8a:	10 82       	st	Z, r1
    2d8c:	0d c0       	rjmp	.+26     	; 0x2da8 <_Z9GoToSleeph+0x48>
		} else {
			sleepTime = SLEEP_TICKS_HIGHV;
    2d8e:	8a e0       	ldi	r24, 0x0A	; 10
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	9a 83       	std	Y+2, r25	; 0x02
    2d94:	89 83       	std	Y+1, r24	; 0x01
			EIMSK |= (1 << INT2);			//int2 is allowed.
    2d96:	8d e3       	ldi	r24, 0x3D	; 61
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	2d e3       	ldi	r18, 0x3D	; 61
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	f9 01       	movw	r30, r18
    2da0:	20 81       	ld	r18, Z
    2da2:	24 60       	ori	r18, 0x04	; 4
    2da4:	fc 01       	movw	r30, r24
    2da6:	20 83       	st	Z, r18
		}
		//Turn off status LED, put on TIM2 led
		prtSTATUSled &= ~(1 << bnSTATUSled);
    2da8:	88 e2       	ldi	r24, 0x28	; 40
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	28 e2       	ldi	r18, 0x28	; 40
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	f9 01       	movw	r30, r18
    2db2:	20 81       	ld	r18, Z
    2db4:	2b 7f       	andi	r18, 0xFB	; 251
    2db6:	fc 01       	movw	r30, r24
    2db8:	20 83       	st	Z, r18
		prtSLEEPled |= (1 << bnSLEEPled);
    2dba:	8b e2       	ldi	r24, 0x2B	; 43
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	2b e2       	ldi	r18, 0x2B	; 43
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	f9 01       	movw	r30, r18
    2dc4:	20 81       	ld	r18, Z
    2dc6:	20 68       	ori	r18, 0x80	; 128
    2dc8:	fc 01       	movw	r30, r24
    2dca:	20 83       	st	Z, r18
		
		//Set to power save, then enable
		SMCR = (1 << SM1)|(1 << SM0);
    2dcc:	83 e5       	ldi	r24, 0x53	; 83
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	26 e0       	ldi	r18, 0x06	; 6
    2dd2:	fc 01       	movw	r30, r24
    2dd4:	20 83       	st	Z, r18
		SMCR |= (1 << SE);
    2dd6:	83 e5       	ldi	r24, 0x53	; 83
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	23 e5       	ldi	r18, 0x53	; 83
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	f9 01       	movw	r30, r18
    2de0:	20 81       	ld	r18, Z
    2de2:	21 60       	ori	r18, 0x01	; 1
    2de4:	fc 01       	movw	r30, r24
    2de6:	20 83       	st	Z, r18
		
		//Give time to registers
		Wait_ms(1);
    2de8:	81 e0       	ldi	r24, 0x01	; 1
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <_Z7Wait_msi>
		//Go to sleep
		while (sleepTicks < sleepTime && flagGoToSleep){
    2df0:	06 c0       	rjmp	.+12     	; 0x2dfe <_Z9GoToSleeph+0x9e>
			asm volatile("SLEEP");
    2df2:	88 95       	sleep
			sleepTicks++;
    2df4:	8b 81       	ldd	r24, Y+3	; 0x03
    2df6:	9c 81       	ldd	r25, Y+4	; 0x04
    2df8:	01 96       	adiw	r24, 0x01	; 1
    2dfa:	9c 83       	std	Y+4, r25	; 0x04
    2dfc:	8b 83       	std	Y+3, r24	; 0x03
		SMCR |= (1 << SE);
		
		//Give time to registers
		Wait_ms(1);
		//Go to sleep
		while (sleepTicks < sleepTime && flagGoToSleep){
    2dfe:	2b 81       	ldd	r18, Y+3	; 0x03
    2e00:	3c 81       	ldd	r19, Y+4	; 0x04
    2e02:	89 81       	ldd	r24, Y+1	; 0x01
    2e04:	9a 81       	ldd	r25, Y+2	; 0x02
    2e06:	28 17       	cp	r18, r24
    2e08:	39 07       	cpc	r19, r25
    2e0a:	34 f4       	brge	.+12     	; 0x2e18 <_Z9GoToSleeph+0xb8>
    2e0c:	80 91 b2 01 	lds	r24, 0x01B2
    2e10:	88 23       	and	r24, r24
    2e12:	11 f0       	breq	.+4      	; 0x2e18 <_Z9GoToSleeph+0xb8>
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	01 c0       	rjmp	.+2      	; 0x2e1a <_Z9GoToSleeph+0xba>
    2e18:	80 e0       	ldi	r24, 0x00	; 0
    2e1a:	88 23       	and	r24, r24
    2e1c:	51 f7       	brne	.-44     	; 0x2df2 <_Z9GoToSleeph+0x92>
			asm volatile("SLEEP");
			sleepTicks++;
		} //endwhile
		
		//Give it time to power back on
		Wait_ms(10);
    2e1e:	8a e0       	ldi	r24, 0x0A	; 10
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <_Z7Wait_msi>
		
		//Done sleeping, turn off sleeping led
		prtSLEEPled &= ~(1 << bnSLEEPled);
    2e26:	8b e2       	ldi	r24, 0x2B	; 43
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	2b e2       	ldi	r18, 0x2B	; 43
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	f9 01       	movw	r30, r18
    2e30:	20 81       	ld	r18, Z
    2e32:	2f 77       	andi	r18, 0x7F	; 127
    2e34:	fc 01       	movw	r30, r24
    2e36:	20 83       	st	Z, r18
		prtSTATUSled |= (1 << bnSTATUSled);
    2e38:	88 e2       	ldi	r24, 0x28	; 40
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	28 e2       	ldi	r18, 0x28	; 40
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	f9 01       	movw	r30, r18
    2e42:	20 81       	ld	r18, Z
    2e44:	24 60       	ori	r18, 0x04	; 4
    2e46:	fc 01       	movw	r30, r24
    2e48:	20 83       	st	Z, r18
}
    2e4a:	0f 90       	pop	r0
    2e4c:	0f 90       	pop	r0
    2e4e:	0f 90       	pop	r0
    2e50:	0f 90       	pop	r0
    2e52:	0f 90       	pop	r0
    2e54:	df 91       	pop	r29
    2e56:	cf 91       	pop	r28
    2e58:	08 95       	ret

00002e5a <_Z7TakeADCv>:
/*************************************************************************************************************/

void TakeADC(){
    2e5a:	cf 93       	push	r28
    2e5c:	df 93       	push	r29
    2e5e:	00 d0       	rcall	.+0      	; 0x2e60 <_Z7TakeADCv+0x6>
    2e60:	00 d0       	rcall	.+0      	; 0x2e62 <_Z7TakeADCv+0x8>
    2e62:	cd b7       	in	r28, 0x3d	; 61
    2e64:	de b7       	in	r29, 0x3e	; 62
	WORD adcReading = 0;
    2e66:	1c 82       	std	Y+4, r1	; 0x04
    2e68:	1b 82       	std	Y+3, r1	; 0x03
	
	cli();
    2e6a:	f8 94       	cli
	//Turn Power on to ADC
	PRR0 &= ~(1 << PRADC);	
    2e6c:	84 e6       	ldi	r24, 0x64	; 100
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	24 e6       	ldi	r18, 0x64	; 100
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	f9 01       	movw	r30, r18
    2e76:	20 81       	ld	r18, Z
    2e78:	2e 7f       	andi	r18, 0xFE	; 254
    2e7a:	fc 01       	movw	r30, r24
    2e7c:	20 83       	st	Z, r18
	ADMUX |= (1 << REFS1);	//internal 1.1V reference
    2e7e:	8c e7       	ldi	r24, 0x7C	; 124
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	2c e7       	ldi	r18, 0x7C	; 124
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	f9 01       	movw	r30, r18
    2e88:	20 81       	ld	r18, Z
    2e8a:	20 68       	ori	r18, 0x80	; 128
    2e8c:	fc 01       	movw	r30, r24
    2e8e:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADEN)|(1 << ADPS2);			//clkIO/16
    2e90:	8a e7       	ldi	r24, 0x7A	; 122
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	2a e7       	ldi	r18, 0x7A	; 122
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	f9 01       	movw	r30, r18
    2e9a:	20 81       	ld	r18, Z
    2e9c:	24 68       	ori	r18, 0x84	; 132
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	20 83       	st	Z, r18
	DIDR0 = 0xFE;								//disable all ADC's except ADC0
    2ea2:	8e e7       	ldi	r24, 0x7E	; 126
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	2e ef       	ldi	r18, 0xFE	; 254
    2ea8:	fc 01       	movw	r30, r24
    2eaa:	20 83       	st	Z, r18
	Wait_ms(5);									//Tim for registers to setup
    2eac:	85 e0       	ldi	r24, 0x05	; 5
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <_Z7Wait_msi>
	
	//Run conversion twice, throw first one out
	for (int i = 0; i < 2; i++){ADCSRA |= (1 << ADSC); while (ADCSRA & (1 << ADSC));}	
    2eb4:	1a 82       	std	Y+2, r1	; 0x02
    2eb6:	19 82       	std	Y+1, r1	; 0x01
    2eb8:	1c c0       	rjmp	.+56     	; 0x2ef2 <_Z7TakeADCv+0x98>
    2eba:	8a e7       	ldi	r24, 0x7A	; 122
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	2a e7       	ldi	r18, 0x7A	; 122
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	f9 01       	movw	r30, r18
    2ec4:	20 81       	ld	r18, Z
    2ec6:	20 64       	ori	r18, 0x40	; 64
    2ec8:	fc 01       	movw	r30, r24
    2eca:	20 83       	st	Z, r18
    2ecc:	8a e7       	ldi	r24, 0x7A	; 122
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	fc 01       	movw	r30, r24
    2ed2:	80 81       	ld	r24, Z
    2ed4:	88 2f       	mov	r24, r24
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	80 74       	andi	r24, 0x40	; 64
    2eda:	90 70       	andi	r25, 0x00	; 0
    2edc:	21 e0       	ldi	r18, 0x01	; 1
    2ede:	00 97       	sbiw	r24, 0x00	; 0
    2ee0:	09 f4       	brne	.+2      	; 0x2ee4 <_Z7TakeADCv+0x8a>
    2ee2:	20 e0       	ldi	r18, 0x00	; 0
    2ee4:	22 23       	and	r18, r18
    2ee6:	91 f7       	brne	.-28     	; 0x2ecc <_Z7TakeADCv+0x72>
    2ee8:	89 81       	ldd	r24, Y+1	; 0x01
    2eea:	9a 81       	ldd	r25, Y+2	; 0x02
    2eec:	01 96       	adiw	r24, 0x01	; 1
    2eee:	9a 83       	std	Y+2, r25	; 0x02
    2ef0:	89 83       	std	Y+1, r24	; 0x01
    2ef2:	21 e0       	ldi	r18, 0x01	; 1
    2ef4:	89 81       	ldd	r24, Y+1	; 0x01
    2ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef8:	82 30       	cpi	r24, 0x02	; 2
    2efa:	91 05       	cpc	r25, r1
    2efc:	0c f0       	brlt	.+2      	; 0x2f00 <_Z7TakeADCv+0xa6>
    2efe:	20 e0       	ldi	r18, 0x00	; 0
    2f00:	22 23       	and	r18, r18
    2f02:	d9 f6       	brne	.-74     	; 0x2eba <_Z7TakeADCv+0x60>
	
	//Put conversion into buffer
	adcReading = ADCL;
    2f04:	88 e7       	ldi	r24, 0x78	; 120
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	fc 01       	movw	r30, r24
    2f0a:	80 81       	ld	r24, Z
    2f0c:	88 2f       	mov	r24, r24
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	9c 83       	std	Y+4, r25	; 0x04
    2f12:	8b 83       	std	Y+3, r24	; 0x03
	adcReading |= (ADCH << 8);
    2f14:	89 e7       	ldi	r24, 0x79	; 121
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	fc 01       	movw	r30, r24
    2f1a:	80 81       	ld	r24, Z
    2f1c:	88 2f       	mov	r24, r24
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	98 2f       	mov	r25, r24
    2f22:	88 27       	eor	r24, r24
    2f24:	2b 81       	ldd	r18, Y+3	; 0x03
    2f26:	3c 81       	ldd	r19, Y+4	; 0x04
    2f28:	82 2b       	or	r24, r18
    2f2a:	93 2b       	or	r25, r19
    2f2c:	9c 83       	std	Y+4, r25	; 0x04
    2f2e:	8b 83       	std	Y+3, r24	; 0x03
		
	//Assign global reading and set flag
	globalADC=adcReading;
    2f30:	8b 81       	ldd	r24, Y+3	; 0x03
    2f32:	9c 81       	ldd	r25, Y+4	; 0x04
    2f34:	90 93 87 01 	sts	0x0187, r25
    2f38:	80 93 86 01 	sts	0x0186, r24
	flagGoodVolts = (adcReading < LOW_BATT_ADC) ? fFalse : fTrue;
    2f3c:	21 e0       	ldi	r18, 0x01	; 1
    2f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f40:	9c 81       	ldd	r25, Y+4	; 0x04
    2f42:	f3 e0       	ldi	r31, 0x03	; 3
    2f44:	82 37       	cpi	r24, 0x72	; 114
    2f46:	9f 07       	cpc	r25, r31
    2f48:	08 f4       	brcc	.+2      	; 0x2f4c <_Z7TakeADCv+0xf2>
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	20 93 c0 01 	sts	0x01C0, r18
		
	//Re-enable interrupts
	sei();
    2f50:	78 94       	sei
	
	//Disable ADC hardware/registers
	ADCSRA = 0;
    2f52:	8a e7       	ldi	r24, 0x7A	; 122
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	fc 01       	movw	r30, r24
    2f58:	10 82       	st	Z, r1
	ADMUX = 0;
    2f5a:	8c e7       	ldi	r24, 0x7C	; 124
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	fc 01       	movw	r30, r24
    2f60:	10 82       	st	Z, r1
	DIDR0 |= (1 << ADC0D);
    2f62:	8e e7       	ldi	r24, 0x7E	; 126
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	2e e7       	ldi	r18, 0x7E	; 126
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	f9 01       	movw	r30, r18
    2f6c:	20 81       	ld	r18, Z
    2f6e:	21 60       	ori	r18, 0x01	; 1
    2f70:	fc 01       	movw	r30, r24
    2f72:	20 83       	st	Z, r18
	
	//Turn off power
	PRR0 |= (1 << PRADC);
    2f74:	84 e6       	ldi	r24, 0x64	; 100
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	24 e6       	ldi	r18, 0x64	; 100
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	f9 01       	movw	r30, r18
    2f7e:	20 81       	ld	r18, Z
    2f80:	21 60       	ori	r18, 0x01	; 1
    2f82:	fc 01       	movw	r30, r24
    2f84:	20 83       	st	Z, r18
}
    2f86:	0f 90       	pop	r0
    2f88:	0f 90       	pop	r0
    2f8a:	0f 90       	pop	r0
    2f8c:	0f 90       	pop	r0
    2f8e:	df 91       	pop	r29
    2f90:	cf 91       	pop	r28
    2f92:	08 95       	ret

00002f94 <_Z7GetTempv>:

/*************************************************************************************************************/

void GetTemp(){
    2f94:	cf 93       	push	r28
    2f96:	df 93       	push	r29
    2f98:	00 d0       	rcall	.+0      	; 0x2f9a <_Z7GetTempv+0x6>
    2f9a:	cd b7       	in	r28, 0x3d	; 61
    2f9c:	de b7       	in	r29, 0x3e	; 62
	WORD rawTemp = 0;
    2f9e:	1a 82       	std	Y+2, r1	; 0x02
    2fa0:	19 82       	std	Y+1, r1	; 0x01
	
	//Power on temp monitor, let it settle
	prtTEMPen |= (1 << bnTEMPen);
    2fa2:	85 e2       	ldi	r24, 0x25	; 37
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	25 e2       	ldi	r18, 0x25	; 37
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	f9 01       	movw	r30, r18
    2fac:	20 81       	ld	r18, Z
    2fae:	21 60       	ori	r18, 0x01	; 1
    2fb0:	fc 01       	movw	r30, r24
    2fb2:	20 83       	st	Z, r18
	PRR0 &= ~(1 << PRSPI);	
    2fb4:	84 e6       	ldi	r24, 0x64	; 100
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	24 e6       	ldi	r18, 0x64	; 100
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	f9 01       	movw	r30, r18
    2fbe:	20 81       	ld	r18, Z
    2fc0:	2b 7f       	andi	r18, 0xFB	; 251
    2fc2:	fc 01       	movw	r30, r24
    2fc4:	20 83       	st	Z, r18
	SPCR |= (1 << MSTR)|(1 << SPE)|(1 << SPR0);			//enables SPI, master, fck/64
    2fc6:	8c e4       	ldi	r24, 0x4C	; 76
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	2c e4       	ldi	r18, 0x4C	; 76
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	f9 01       	movw	r30, r18
    2fd0:	20 81       	ld	r18, Z
    2fd2:	21 65       	ori	r18, 0x51	; 81
    2fd4:	fc 01       	movw	r30, r24
    2fd6:	20 83       	st	Z, r18
	Wait_sec(500);
    2fd8:	84 ef       	ldi	r24, 0xF4	; 244
    2fda:	91 e0       	ldi	r25, 0x01	; 1
    2fdc:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <_Z8Wait_seci>
	//Slave select goes low, sck goes low,  to signal start of transmission
	prtSpi0 &= ~((1 << bnSck0)|(1 << bnSS0));
    2fe0:	85 e2       	ldi	r24, 0x25	; 37
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	25 e2       	ldi	r18, 0x25	; 37
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	f9 01       	movw	r30, r18
    2fea:	20 81       	ld	r18, Z
    2fec:	2f 76       	andi	r18, 0x6F	; 111
    2fee:	fc 01       	movw	r30, r24
    2ff0:	20 83       	st	Z, r18
	
	cli();
    2ff2:	f8 94       	cli
	//Write to buffer to start transmission
	SPDR = 0x00;
    2ff4:	8e e4       	ldi	r24, 0x4E	; 78
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	fc 01       	movw	r30, r24
    2ffa:	10 82       	st	Z, r1
	//Wait for data to be receieved.
	while (!(SPSR & (1 << SPIF)));
    2ffc:	00 00       	nop
    2ffe:	8d e4       	ldi	r24, 0x4D	; 77
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	fc 01       	movw	r30, r24
    3004:	80 81       	ld	r24, Z
    3006:	80 95       	com	r24
    3008:	88 1f       	adc	r24, r24
    300a:	88 27       	eor	r24, r24
    300c:	88 1f       	adc	r24, r24
    300e:	88 23       	and	r24, r24
    3010:	b1 f7       	brne	.-20     	; 0x2ffe <_Z7GetTempv+0x6a>
	rawTemp = (SPDR0 << 8);
    3012:	1a 82       	std	Y+2, r1	; 0x02
    3014:	19 82       	std	Y+1, r1	; 0x01
	SPDR = 0x00;
    3016:	8e e4       	ldi	r24, 0x4E	; 78
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	fc 01       	movw	r30, r24
    301c:	10 82       	st	Z, r1
	while (!(SPSR & (1 << SPIF)));
    301e:	00 00       	nop
    3020:	8d e4       	ldi	r24, 0x4D	; 77
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	fc 01       	movw	r30, r24
    3026:	80 81       	ld	r24, Z
    3028:	80 95       	com	r24
    302a:	88 1f       	adc	r24, r24
    302c:	88 27       	eor	r24, r24
    302e:	88 1f       	adc	r24, r24
    3030:	88 23       	and	r24, r24
    3032:	b1 f7       	brne	.-20     	; 0x3020 <_Z7GetTempv+0x8c>
	rawTemp |= SPDR0;
	
	//Set flag to correct value, update global value
	flagGoodTemp = (rawTemp < HIGH_TEMP) ? fTrue : fFalse;
    3034:	89 81       	ldd	r24, Y+1	; 0x01
    3036:	9a 81       	ldd	r25, Y+2	; 0x02
    3038:	f2 e3       	ldi	r31, 0x32	; 50
    303a:	84 36       	cpi	r24, 0x64	; 100
    303c:	9f 07       	cpc	r25, r31
    303e:	10 f4       	brcc	.+4      	; 0x3044 <_Z7GetTempv+0xb0>
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	01 c0       	rjmp	.+2      	; 0x3046 <_Z7GetTempv+0xb2>
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	80 93 bf 01 	sts	0x01BF, r24
	globalTemp=rawTemp;
    304a:	89 81       	ldd	r24, Y+1	; 0x01
    304c:	9a 81       	ldd	r25, Y+2	; 0x02
    304e:	90 93 89 01 	sts	0x0189, r25
    3052:	80 93 88 01 	sts	0x0188, r24
	
	//re enable interrupts
	sei();
    3056:	78 94       	sei
	
	//Bring SS high, clear SPCR0 register and turn power off to SPI and device
	prtSpi0 |= (1 << bnSS0)|(1 << bnSck0);
    3058:	85 e2       	ldi	r24, 0x25	; 37
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	25 e2       	ldi	r18, 0x25	; 37
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	f9 01       	movw	r30, r18
    3062:	20 81       	ld	r18, Z
    3064:	20 69       	ori	r18, 0x90	; 144
    3066:	fc 01       	movw	r30, r24
    3068:	20 83       	st	Z, r18
	SPCR=0x00;	
    306a:	8c e4       	ldi	r24, 0x4C	; 76
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	fc 01       	movw	r30, r24
    3070:	10 82       	st	Z, r1
	prtTEMPen &= ~(1 << bnTEMPen);
    3072:	85 e2       	ldi	r24, 0x25	; 37
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	25 e2       	ldi	r18, 0x25	; 37
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	f9 01       	movw	r30, r18
    307c:	20 81       	ld	r18, Z
    307e:	2e 7f       	andi	r18, 0xFE	; 254
    3080:	fc 01       	movw	r30, r24
    3082:	20 83       	st	Z, r18
	PRR0 |= (1 << PRSPI);
    3084:	84 e6       	ldi	r24, 0x64	; 100
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	24 e6       	ldi	r18, 0x64	; 100
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	f9 01       	movw	r30, r18
    308e:	20 81       	ld	r18, Z
    3090:	24 60       	ori	r18, 0x04	; 4
    3092:	fc 01       	movw	r30, r24
    3094:	20 83       	st	Z, r18
}
    3096:	0f 90       	pop	r0
    3098:	0f 90       	pop	r0
    309a:	df 91       	pop	r29
    309c:	cf 91       	pop	r28
    309e:	08 95       	ret

000030a0 <_Z7PowerUpj>:
/*************************************************************************************************************/
void PowerUp(WORD interval){
    30a0:	cf 93       	push	r28
    30a2:	df 93       	push	r29
    30a4:	00 d0       	rcall	.+0      	; 0x30a6 <_Z7PowerUpj+0x6>
    30a6:	cd b7       	in	r28, 0x3d	; 61
    30a8:	de b7       	in	r29, 0x3e	; 62
    30aa:	9a 83       	std	Y+2, r25	; 0x02
    30ac:	89 83       	std	Y+1, r24	; 0x01
	cli();
    30ae:	f8 94       	cli
	
	//First power on main regulator
	__enableMain();
    30b0:	88 e2       	ldi	r24, 0x28	; 40
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	28 e2       	ldi	r18, 0x28	; 40
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	f9 01       	movw	r30, r18
    30ba:	20 81       	ld	r18, Z
    30bc:	21 60       	ori	r18, 0x01	; 1
    30be:	fc 01       	movw	r30, r24
    30c0:	20 83       	st	Z, r18
	Wait_ms(interval);
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	9a 81       	ldd	r25, Y+2	; 0x02
    30c6:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <_Z7Wait_msi>
	
	//Power on BeagleBone next, takes longer time.
	__enableBeagleBone();
    30ca:	82 e2       	ldi	r24, 0x22	; 34
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	22 e2       	ldi	r18, 0x22	; 34
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	f9 01       	movw	r30, r18
    30d4:	20 81       	ld	r18, Z
    30d6:	20 61       	ori	r18, 0x10	; 16
    30d8:	fc 01       	movw	r30, r24
    30da:	20 83       	st	Z, r18
	Wait_ms(interval);
    30dc:	89 81       	ldd	r24, Y+1	; 0x01
    30de:	9a 81       	ldd	r25, Y+2	; 0x02
    30e0:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <_Z7Wait_msi>
	//while (!(pinBBio & (1 << bnW0B9)));	//Wait for GPIO line to go high
	
	//Power on GAVR and Enable GPS
	__enableGPSandGAVR();
    30e4:	82 e2       	ldi	r24, 0x22	; 34
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	22 e2       	ldi	r18, 0x22	; 34
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	f9 01       	movw	r30, r18
    30ee:	20 81       	ld	r18, Z
    30f0:	20 6c       	ori	r18, 0xC0	; 192
    30f2:	fc 01       	movw	r30, r24
    30f4:	20 83       	st	Z, r18
	Wait_ms(interval);
    30f6:	89 81       	ldd	r24, Y+1	; 0x01
    30f8:	9a 81       	ldd	r25, Y+2	; 0x02
    30fa:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <_Z7Wait_msi>
	//while (!(pinGAVRio & (1 << bnW3G0)));	//Wait for GPIO line to go high signifying correct boot
	
	//Power on LCD
	__enableLCD();
    30fe:	82 e2       	ldi	r24, 0x22	; 34
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	22 e2       	ldi	r18, 0x22	; 34
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	f9 01       	movw	r30, r18
    3108:	20 81       	ld	r18, Z
    310a:	20 62       	ori	r18, 0x20	; 32
    310c:	fc 01       	movw	r30, r24
    310e:	20 83       	st	Z, r18
	Wait_ms(interval);
    3110:	89 81       	ldd	r24, Y+1	; 0x01
    3112:	9a 81       	ldd	r25, Y+2	; 0x02
    3114:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <_Z7Wait_msi>
	sei();
    3118:	78 94       	sei
	
}
    311a:	0f 90       	pop	r0
    311c:	0f 90       	pop	r0
    311e:	df 91       	pop	r29
    3120:	cf 91       	pop	r28
    3122:	08 95       	ret

00003124 <_Z9PowerDownv>:
/*************************************************************************************************************/
void PowerDown(){
    3124:	cf 93       	push	r28
    3126:	df 93       	push	r29
    3128:	cd b7       	in	r28, 0x3d	; 61
    312a:	de b7       	in	r29, 0x3e	; 62
	cli();
    312c:	f8 94       	cli
	//Signify interrupts, wait 6 seconds for all processing to stop.
	prtInterrupts |= (1 << bnBBint)|(1 << bnGAVRint);
    312e:	82 e2       	ldi	r24, 0x22	; 34
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	22 e2       	ldi	r18, 0x22	; 34
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	f9 01       	movw	r30, r18
    3138:	20 81       	ld	r18, Z
    313a:	2c 60       	ori	r18, 0x0C	; 12
    313c:	fc 01       	movw	r30, r24
    313e:	20 83       	st	Z, r18
	Wait_sec(6);
    3140:	86 e0       	ldi	r24, 0x06	; 6
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <_Z8Wait_seci>
	prtInterrupts &= ~((1 << bnBBint)|(1 << bnGAVRint));
    3148:	82 e2       	ldi	r24, 0x22	; 34
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	22 e2       	ldi	r18, 0x22	; 34
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	f9 01       	movw	r30, r18
    3152:	20 81       	ld	r18, Z
    3154:	23 7f       	andi	r18, 0xF3	; 243
    3156:	fc 01       	movw	r30, r24
    3158:	20 83       	st	Z, r18
	__killLCD();
    315a:	82 e2       	ldi	r24, 0x22	; 34
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	22 e2       	ldi	r18, 0x22	; 34
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	f9 01       	movw	r30, r18
    3164:	20 81       	ld	r18, Z
    3166:	2f 7d       	andi	r18, 0xDF	; 223
    3168:	fc 01       	movw	r30, r24
    316a:	20 83       	st	Z, r18
	__killGPSandGAVR();
    316c:	82 e2       	ldi	r24, 0x22	; 34
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	22 e2       	ldi	r18, 0x22	; 34
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	f9 01       	movw	r30, r18
    3176:	20 81       	ld	r18, Z
    3178:	2f 73       	andi	r18, 0x3F	; 63
    317a:	fc 01       	movw	r30, r24
    317c:	20 83       	st	Z, r18
	
	//Give the BeagleBone another 6 seconds to finish it's stuff, then kill it
	Wait_sec(6);
    317e:	86 e0       	ldi	r24, 0x06	; 6
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <_Z8Wait_seci>
	__killBeagleBone();
    3186:	82 e2       	ldi	r24, 0x22	; 34
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	22 e2       	ldi	r18, 0x22	; 34
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	f9 01       	movw	r30, r18
    3190:	20 81       	ld	r18, Z
    3192:	2f 7e       	andi	r18, 0xEF	; 239
    3194:	fc 01       	movw	r30, r24
    3196:	20 83       	st	Z, r18
	__killMain();
    3198:	88 e2       	ldi	r24, 0x28	; 40
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	28 e2       	ldi	r18, 0x28	; 40
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	f9 01       	movw	r30, r18
    31a2:	20 81       	ld	r18, Z
    31a4:	2e 7f       	andi	r18, 0xFE	; 254
    31a6:	fc 01       	movw	r30, r24
    31a8:	20 83       	st	Z, r18
	sei();
    31aa:	78 94       	sei
}
    31ac:	df 91       	pop	r29
    31ae:	cf 91       	pop	r28
    31b0:	08 95       	ret

000031b2 <_Z41__static_initialization_and_destruction_0ii>:
    31b2:	cf 93       	push	r28
    31b4:	df 93       	push	r29
    31b6:	00 d0       	rcall	.+0      	; 0x31b8 <_Z41__static_initialization_and_destruction_0ii+0x6>
    31b8:	00 d0       	rcall	.+0      	; 0x31ba <_Z41__static_initialization_and_destruction_0ii+0x8>
    31ba:	cd b7       	in	r28, 0x3d	; 61
    31bc:	de b7       	in	r29, 0x3e	; 62
    31be:	9a 83       	std	Y+2, r25	; 0x02
    31c0:	89 83       	std	Y+1, r24	; 0x01
    31c2:	7c 83       	std	Y+4, r23	; 0x04
    31c4:	6b 83       	std	Y+3, r22	; 0x03
    31c6:	89 81       	ldd	r24, Y+1	; 0x01
    31c8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ca:	81 30       	cpi	r24, 0x01	; 1
    31cc:	91 05       	cpc	r25, r1
    31ce:	51 f4       	brne	.+20     	; 0x31e4 <_Z41__static_initialization_and_destruction_0ii+0x32>
    31d0:	8b 81       	ldd	r24, Y+3	; 0x03
    31d2:	9c 81       	ldd	r25, Y+4	; 0x04
    31d4:	2f ef       	ldi	r18, 0xFF	; 255
    31d6:	8f 3f       	cpi	r24, 0xFF	; 255
    31d8:	92 07       	cpc	r25, r18
    31da:	21 f4       	brne	.+8      	; 0x31e4 <_Z41__static_initialization_and_destruction_0ii+0x32>

/*********************************************GLOBAL VARIABLES***************************************************/
/****************************************************************************************************************/
WORD globalADC=0, globalTemp=0;
//volatile int timeOut=0;
myTime currentTime;  //The clock, MUST BE GLOBAL. In final program, will initiate with NOTHING, then GPS will update on the actual time into beaglebone, beaglebone pings us, then dunzo OR have UART into this as well, then get time and be done.
    31dc:	8a e8       	ldi	r24, 0x8A	; 138
    31de:	91 e0       	ldi	r25, 0x01	; 1
    31e0:	0e 94 15 04 	call	0x82a	; 0x82a <_ZN6myTimeC1Ev>
	//Give the BeagleBone another 6 seconds to finish it's stuff, then kill it
	Wait_sec(6);
	__killBeagleBone();
	__killMain();
	sei();
}
    31e4:	0f 90       	pop	r0
    31e6:	0f 90       	pop	r0
    31e8:	0f 90       	pop	r0
    31ea:	0f 90       	pop	r0
    31ec:	df 91       	pop	r29
    31ee:	cf 91       	pop	r28
    31f0:	08 95       	ret

000031f2 <_GLOBAL__sub_I__ZN6myDateC2Ev>:
    31f2:	cf 93       	push	r28
    31f4:	df 93       	push	r29
    31f6:	cd b7       	in	r28, 0x3d	; 61
    31f8:	de b7       	in	r29, 0x3e	; 62
    31fa:	81 e0       	ldi	r24, 0x01	; 1
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	6f ef       	ldi	r22, 0xFF	; 255
    3200:	7f ef       	ldi	r23, 0xFF	; 255
    3202:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <_Z41__static_initialization_and_destruction_0ii>
    3206:	df 91       	pop	r29
    3208:	cf 91       	pop	r28
    320a:	08 95       	ret

0000320c <__udivmodqi4>:
    320c:	99 1b       	sub	r25, r25
    320e:	79 e0       	ldi	r23, 0x09	; 9
    3210:	04 c0       	rjmp	.+8      	; 0x321a <__udivmodqi4_ep>

00003212 <__udivmodqi4_loop>:
    3212:	99 1f       	adc	r25, r25
    3214:	96 17       	cp	r25, r22
    3216:	08 f0       	brcs	.+2      	; 0x321a <__udivmodqi4_ep>
    3218:	96 1b       	sub	r25, r22

0000321a <__udivmodqi4_ep>:
    321a:	88 1f       	adc	r24, r24
    321c:	7a 95       	dec	r23
    321e:	c9 f7       	brne	.-14     	; 0x3212 <__udivmodqi4_loop>
    3220:	80 95       	com	r24
    3222:	08 95       	ret

00003224 <__divmodhi4>:
    3224:	97 fb       	bst	r25, 7
    3226:	09 2e       	mov	r0, r25
    3228:	07 26       	eor	r0, r23
    322a:	0a d0       	rcall	.+20     	; 0x3240 <__divmodhi4_neg1>
    322c:	77 fd       	sbrc	r23, 7
    322e:	04 d0       	rcall	.+8      	; 0x3238 <__divmodhi4_neg2>
    3230:	0c d0       	rcall	.+24     	; 0x324a <__udivmodhi4>
    3232:	06 d0       	rcall	.+12     	; 0x3240 <__divmodhi4_neg1>
    3234:	00 20       	and	r0, r0
    3236:	1a f4       	brpl	.+6      	; 0x323e <__divmodhi4_exit>

00003238 <__divmodhi4_neg2>:
    3238:	70 95       	com	r23
    323a:	61 95       	neg	r22
    323c:	7f 4f       	sbci	r23, 0xFF	; 255

0000323e <__divmodhi4_exit>:
    323e:	08 95       	ret

00003240 <__divmodhi4_neg1>:
    3240:	f6 f7       	brtc	.-4      	; 0x323e <__divmodhi4_exit>
    3242:	90 95       	com	r25
    3244:	81 95       	neg	r24
    3246:	9f 4f       	sbci	r25, 0xFF	; 255
    3248:	08 95       	ret

0000324a <__udivmodhi4>:
    324a:	aa 1b       	sub	r26, r26
    324c:	bb 1b       	sub	r27, r27
    324e:	51 e1       	ldi	r21, 0x11	; 17
    3250:	07 c0       	rjmp	.+14     	; 0x3260 <__udivmodhi4_ep>

00003252 <__udivmodhi4_loop>:
    3252:	aa 1f       	adc	r26, r26
    3254:	bb 1f       	adc	r27, r27
    3256:	a6 17       	cp	r26, r22
    3258:	b7 07       	cpc	r27, r23
    325a:	10 f0       	brcs	.+4      	; 0x3260 <__udivmodhi4_ep>
    325c:	a6 1b       	sub	r26, r22
    325e:	b7 0b       	sbc	r27, r23

00003260 <__udivmodhi4_ep>:
    3260:	88 1f       	adc	r24, r24
    3262:	99 1f       	adc	r25, r25
    3264:	5a 95       	dec	r21
    3266:	a9 f7       	brne	.-22     	; 0x3252 <__udivmodhi4_loop>
    3268:	80 95       	com	r24
    326a:	90 95       	com	r25
    326c:	bc 01       	movw	r22, r24
    326e:	cd 01       	movw	r24, r26
    3270:	08 95       	ret

00003272 <__tablejump2__>:
    3272:	ee 0f       	add	r30, r30
    3274:	ff 1f       	adc	r31, r31

00003276 <__tablejump__>:
    3276:	05 90       	lpm	r0, Z+
    3278:	f4 91       	lpm	r31, Z
    327a:	e0 2d       	mov	r30, r0
    327c:	09 94       	ijmp

0000327e <atoi>:
    327e:	fc 01       	movw	r30, r24
    3280:	88 27       	eor	r24, r24
    3282:	99 27       	eor	r25, r25
    3284:	e8 94       	clt
    3286:	21 91       	ld	r18, Z+
    3288:	20 32       	cpi	r18, 0x20	; 32
    328a:	e9 f3       	breq	.-6      	; 0x3286 <atoi+0x8>
    328c:	29 30       	cpi	r18, 0x09	; 9
    328e:	10 f0       	brcs	.+4      	; 0x3294 <atoi+0x16>
    3290:	2e 30       	cpi	r18, 0x0E	; 14
    3292:	c8 f3       	brcs	.-14     	; 0x3286 <atoi+0x8>
    3294:	2b 32       	cpi	r18, 0x2B	; 43
    3296:	41 f0       	breq	.+16     	; 0x32a8 <atoi+0x2a>
    3298:	2d 32       	cpi	r18, 0x2D	; 45
    329a:	39 f4       	brne	.+14     	; 0x32aa <atoi+0x2c>
    329c:	68 94       	set
    329e:	04 c0       	rjmp	.+8      	; 0x32a8 <atoi+0x2a>
    32a0:	0e 94 a7 19 	call	0x334e	; 0x334e <__mulhi_const_10>
    32a4:	82 0f       	add	r24, r18
    32a6:	91 1d       	adc	r25, r1
    32a8:	21 91       	ld	r18, Z+
    32aa:	20 53       	subi	r18, 0x30	; 48
    32ac:	2a 30       	cpi	r18, 0x0A	; 10
    32ae:	c0 f3       	brcs	.-16     	; 0x32a0 <atoi+0x22>
    32b0:	1e f4       	brtc	.+6      	; 0x32b8 <atoi+0x3a>
    32b2:	90 95       	com	r25
    32b4:	81 95       	neg	r24
    32b6:	9f 4f       	sbci	r25, 0xFF	; 255
    32b8:	08 95       	ret

000032ba <strcat>:
    32ba:	fb 01       	movw	r30, r22
    32bc:	dc 01       	movw	r26, r24
    32be:	0d 90       	ld	r0, X+
    32c0:	00 20       	and	r0, r0
    32c2:	e9 f7       	brne	.-6      	; 0x32be <strcat+0x4>
    32c4:	11 97       	sbiw	r26, 0x01	; 1
    32c6:	01 90       	ld	r0, Z+
    32c8:	0d 92       	st	X+, r0
    32ca:	00 20       	and	r0, r0
    32cc:	e1 f7       	brne	.-8      	; 0x32c6 <strcat+0xc>
    32ce:	08 95       	ret

000032d0 <strcmp>:
    32d0:	fb 01       	movw	r30, r22
    32d2:	dc 01       	movw	r26, r24
    32d4:	8d 91       	ld	r24, X+
    32d6:	01 90       	ld	r0, Z+
    32d8:	80 19       	sub	r24, r0
    32da:	01 10       	cpse	r0, r1
    32dc:	d9 f3       	breq	.-10     	; 0x32d4 <strcmp+0x4>
    32de:	99 0b       	sbc	r25, r25
    32e0:	08 95       	ret

000032e2 <strcpy>:
    32e2:	fb 01       	movw	r30, r22
    32e4:	dc 01       	movw	r26, r24
    32e6:	01 90       	ld	r0, Z+
    32e8:	0d 92       	st	X+, r0
    32ea:	00 20       	and	r0, r0
    32ec:	e1 f7       	brne	.-8      	; 0x32e6 <strcpy+0x4>
    32ee:	08 95       	ret

000032f0 <strncmp>:
    32f0:	fb 01       	movw	r30, r22
    32f2:	dc 01       	movw	r26, r24
    32f4:	41 50       	subi	r20, 0x01	; 1
    32f6:	50 40       	sbci	r21, 0x00	; 0
    32f8:	30 f0       	brcs	.+12     	; 0x3306 <strncmp+0x16>
    32fa:	8d 91       	ld	r24, X+
    32fc:	01 90       	ld	r0, Z+
    32fe:	80 19       	sub	r24, r0
    3300:	19 f4       	brne	.+6      	; 0x3308 <strncmp+0x18>
    3302:	00 20       	and	r0, r0
    3304:	b9 f7       	brne	.-18     	; 0x32f4 <strncmp+0x4>
    3306:	88 1b       	sub	r24, r24
    3308:	99 0b       	sbc	r25, r25
    330a:	08 95       	ret

0000330c <itoa>:
    330c:	fb 01       	movw	r30, r22
    330e:	9f 01       	movw	r18, r30
    3310:	e8 94       	clt
    3312:	42 30       	cpi	r20, 0x02	; 2
    3314:	c4 f0       	brlt	.+48     	; 0x3346 <itoa+0x3a>
    3316:	45 32       	cpi	r20, 0x25	; 37
    3318:	b4 f4       	brge	.+44     	; 0x3346 <itoa+0x3a>
    331a:	4a 30       	cpi	r20, 0x0A	; 10
    331c:	29 f4       	brne	.+10     	; 0x3328 <itoa+0x1c>
    331e:	97 fb       	bst	r25, 7
    3320:	1e f4       	brtc	.+6      	; 0x3328 <itoa+0x1c>
    3322:	90 95       	com	r25
    3324:	81 95       	neg	r24
    3326:	9f 4f       	sbci	r25, 0xFF	; 255
    3328:	64 2f       	mov	r22, r20
    332a:	77 27       	eor	r23, r23
    332c:	0e 94 25 19 	call	0x324a	; 0x324a <__udivmodhi4>
    3330:	80 5d       	subi	r24, 0xD0	; 208
    3332:	8a 33       	cpi	r24, 0x3A	; 58
    3334:	0c f0       	brlt	.+2      	; 0x3338 <itoa+0x2c>
    3336:	89 5d       	subi	r24, 0xD9	; 217
    3338:	81 93       	st	Z+, r24
    333a:	cb 01       	movw	r24, r22
    333c:	00 97       	sbiw	r24, 0x00	; 0
    333e:	a1 f7       	brne	.-24     	; 0x3328 <itoa+0x1c>
    3340:	16 f4       	brtc	.+4      	; 0x3346 <itoa+0x3a>
    3342:	5d e2       	ldi	r21, 0x2D	; 45
    3344:	51 93       	st	Z+, r21
    3346:	10 82       	st	Z, r1
    3348:	c9 01       	movw	r24, r18
    334a:	0c 94 e6 19 	jmp	0x33cc	; 0x33cc <strrev>

0000334e <__mulhi_const_10>:
    334e:	7a e0       	ldi	r23, 0x0A	; 10
    3350:	97 9f       	mul	r25, r23
    3352:	90 2d       	mov	r25, r0
    3354:	87 9f       	mul	r24, r23
    3356:	80 2d       	mov	r24, r0
    3358:	91 0d       	add	r25, r1
    335a:	11 24       	eor	r1, r1
    335c:	08 95       	ret

0000335e <utoa>:
    335e:	fb 01       	movw	r30, r22
    3360:	9f 01       	movw	r18, r30
    3362:	42 30       	cpi	r20, 0x02	; 2
    3364:	74 f0       	brlt	.+28     	; 0x3382 <utoa+0x24>
    3366:	45 32       	cpi	r20, 0x25	; 37
    3368:	64 f4       	brge	.+24     	; 0x3382 <utoa+0x24>
    336a:	64 2f       	mov	r22, r20
    336c:	77 27       	eor	r23, r23
    336e:	0e 94 25 19 	call	0x324a	; 0x324a <__udivmodhi4>
    3372:	80 5d       	subi	r24, 0xD0	; 208
    3374:	8a 33       	cpi	r24, 0x3A	; 58
    3376:	0c f0       	brlt	.+2      	; 0x337a <utoa+0x1c>
    3378:	89 5d       	subi	r24, 0xD9	; 217
    337a:	81 93       	st	Z+, r24
    337c:	cb 01       	movw	r24, r22
    337e:	00 97       	sbiw	r24, 0x00	; 0
    3380:	a1 f7       	brne	.-24     	; 0x336a <utoa+0xc>
    3382:	10 82       	st	Z, r1
    3384:	c9 01       	movw	r24, r18
    3386:	0c 94 e6 19 	jmp	0x33cc	; 0x33cc <strrev>

0000338a <__eerd_byte_m644pa>:
    338a:	f9 99       	sbic	0x1f, 1	; 31
    338c:	fe cf       	rjmp	.-4      	; 0x338a <__eerd_byte_m644pa>
    338e:	92 bd       	out	0x22, r25	; 34
    3390:	81 bd       	out	0x21, r24	; 33
    3392:	f8 9a       	sbi	0x1f, 0	; 31
    3394:	99 27       	eor	r25, r25
    3396:	80 b5       	in	r24, 0x20	; 32
    3398:	08 95       	ret

0000339a <__eerd_word_m644pa>:
    339a:	a8 e1       	ldi	r26, 0x18	; 24
    339c:	b0 e0       	ldi	r27, 0x00	; 0
    339e:	42 e0       	ldi	r20, 0x02	; 2
    33a0:	50 e0       	ldi	r21, 0x00	; 0
    33a2:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__eerd_blraw_m644pa>

000033a6 <__eewr_byte_m644pa>:
    33a6:	26 2f       	mov	r18, r22

000033a8 <__eewr_r18_m644pa>:
    33a8:	f9 99       	sbic	0x1f, 1	; 31
    33aa:	fe cf       	rjmp	.-4      	; 0x33a8 <__eewr_r18_m644pa>
    33ac:	1f ba       	out	0x1f, r1	; 31
    33ae:	92 bd       	out	0x22, r25	; 34
    33b0:	81 bd       	out	0x21, r24	; 33
    33b2:	20 bd       	out	0x20, r18	; 32
    33b4:	0f b6       	in	r0, 0x3f	; 63
    33b6:	f8 94       	cli
    33b8:	fa 9a       	sbi	0x1f, 2	; 31
    33ba:	f9 9a       	sbi	0x1f, 1	; 31
    33bc:	0f be       	out	0x3f, r0	; 63
    33be:	01 96       	adiw	r24, 0x01	; 1
    33c0:	08 95       	ret

000033c2 <__eewr_word_m644pa>:
    33c2:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <__eewr_byte_m644pa>
    33c6:	27 2f       	mov	r18, r23
    33c8:	0c 94 d4 19 	jmp	0x33a8	; 0x33a8 <__eewr_r18_m644pa>

000033cc <strrev>:
    33cc:	dc 01       	movw	r26, r24
    33ce:	fc 01       	movw	r30, r24
    33d0:	67 2f       	mov	r22, r23
    33d2:	71 91       	ld	r23, Z+
    33d4:	77 23       	and	r23, r23
    33d6:	e1 f7       	brne	.-8      	; 0x33d0 <strrev+0x4>
    33d8:	32 97       	sbiw	r30, 0x02	; 2
    33da:	04 c0       	rjmp	.+8      	; 0x33e4 <strrev+0x18>
    33dc:	7c 91       	ld	r23, X
    33de:	6d 93       	st	X+, r22
    33e0:	70 83       	st	Z, r23
    33e2:	62 91       	ld	r22, -Z
    33e4:	ae 17       	cp	r26, r30
    33e6:	bf 07       	cpc	r27, r31
    33e8:	c8 f3       	brcs	.-14     	; 0x33dc <strrev+0x10>
    33ea:	08 95       	ret

000033ec <__eerd_block_m644pa>:
    33ec:	dc 01       	movw	r26, r24
    33ee:	cb 01       	movw	r24, r22

000033f0 <__eerd_blraw_m644pa>:
    33f0:	fc 01       	movw	r30, r24
    33f2:	f9 99       	sbic	0x1f, 1	; 31
    33f4:	fe cf       	rjmp	.-4      	; 0x33f2 <__eerd_blraw_m644pa+0x2>
    33f6:	06 c0       	rjmp	.+12     	; 0x3404 <__eerd_blraw_m644pa+0x14>
    33f8:	f2 bd       	out	0x22, r31	; 34
    33fa:	e1 bd       	out	0x21, r30	; 33
    33fc:	f8 9a       	sbi	0x1f, 0	; 31
    33fe:	31 96       	adiw	r30, 0x01	; 1
    3400:	00 b4       	in	r0, 0x20	; 32
    3402:	0d 92       	st	X+, r0
    3404:	41 50       	subi	r20, 0x01	; 1
    3406:	50 40       	sbci	r21, 0x00	; 0
    3408:	b8 f7       	brcc	.-18     	; 0x33f8 <__eerd_blraw_m644pa+0x8>
    340a:	08 95       	ret

0000340c <_exit>:
    340c:	f8 94       	cli

0000340e <__stop_program>:
    340e:	ff cf       	rjmp	.-2      	; 0x340e <__stop_program>
