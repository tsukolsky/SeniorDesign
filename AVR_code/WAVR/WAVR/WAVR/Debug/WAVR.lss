
WAVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  00003282  00003336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003282  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004a  008001a2  008001a2  000033d8  2**0
                  ALLOC
  3 .eeprom       00000007  00810000  00810000  000033d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000011f4  00000000  00000000  000033e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000005eb  00000000  00000000  000045d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000120  00000000  00000000  00004bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000020e0  00000000  00000000  00004ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000039b  00000000  00000000  00006dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f65  00000000  00000000  0000715b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000088c  00000000  00000000  000080c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000aeb  00000000  00000000  0000894c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001232  00000000  00000000  00009437  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__vector_3>
      10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      18:	0c 94 c0 10 	jmp	0x2180	; 0x2180 <__vector_6>
      1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      2c:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <__vector_11>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <__vector_20>
      54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      68:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      6c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      70:	0c 94 ab 12 	jmp	0x2556	; 0x2556 <__vector_28>
      74:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      78:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

0000007c <__ctors_start>:
      7c:	32 18       	sub	r3, r2

0000007e <__ctors_end>:
      7e:	11 24       	eor	r1, r1
      80:	1f be       	out	0x3f, r1	; 63
      82:	cf ef       	ldi	r28, 0xFF	; 255
      84:	d0 e1       	ldi	r29, 0x10	; 16
      86:	de bf       	out	0x3e, r29	; 62
      88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_copy_data>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 e0       	ldi	r26, 0x00	; 0
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	e2 e8       	ldi	r30, 0x82	; 130
      92:	f2 e3       	ldi	r31, 0x32	; 50
      94:	02 c0       	rjmp	.+4      	; 0x9a <__do_copy_data+0x10>
      96:	05 90       	lpm	r0, Z+
      98:	0d 92       	st	X+, r0
      9a:	a2 3a       	cpi	r26, 0xA2	; 162
      9c:	b1 07       	cpc	r27, r17
      9e:	d9 f7       	brne	.-10     	; 0x96 <__do_copy_data+0xc>

000000a0 <__do_clear_bss>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a2 ea       	ldi	r26, 0xA2	; 162
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
      a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
      aa:	ac 3e       	cpi	r26, 0xEC	; 236
      ac:	b1 07       	cpc	r27, r17
      ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>

000000b0 <__do_global_ctors>:
      b0:	10 e0       	ldi	r17, 0x00	; 0
      b2:	ce e7       	ldi	r28, 0x7E	; 126
      b4:	d0 e0       	ldi	r29, 0x00	; 0
      b6:	04 c0       	rjmp	.+8      	; 0xc0 <__do_global_ctors+0x10>
      b8:	22 97       	sbiw	r28, 0x02	; 2
      ba:	fe 01       	movw	r30, r28
      bc:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__tablejump__>
      c0:	cc 37       	cpi	r28, 0x7C	; 124
      c2:	d1 07       	cpc	r29, r17
      c4:	c9 f7       	brne	.-14     	; 0xb8 <__do_global_ctors+0x8>
      c6:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <main>
      ca:	0c 94 3f 19 	jmp	0x327e	; 0x327e <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <_ZN6myDateC1Ev>:
		void setYear(int year);
		void addMonths(int months);
		void addYears(int years);
};

myDate::myDate(){
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	00 d0       	rcall	.+0      	; 0xd8 <_ZN6myDateC1Ev+0x6>
      d8:	cd b7       	in	r28, 0x3d	; 61
      da:	de b7       	in	r29, 0x3e	; 62
      dc:	9a 83       	std	Y+2, r25	; 0x02
      de:	89 83       	std	Y+1, r24	; 0x01
	month = 0;
      e0:	89 81       	ldd	r24, Y+1	; 0x01
      e2:	9a 81       	ldd	r25, Y+2	; 0x02
      e4:	fc 01       	movw	r30, r24
      e6:	11 82       	std	Z+1, r1	; 0x01
      e8:	10 82       	st	Z, r1
	day = 0;
      ea:	89 81       	ldd	r24, Y+1	; 0x01
      ec:	9a 81       	ldd	r25, Y+2	; 0x02
      ee:	fc 01       	movw	r30, r24
      f0:	13 82       	std	Z+3, r1	; 0x03
      f2:	12 82       	std	Z+2, r1	; 0x02
	year = 0;
      f4:	89 81       	ldd	r24, Y+1	; 0x01
      f6:	9a 81       	ldd	r25, Y+2	; 0x02
      f8:	fc 01       	movw	r30, r24
      fa:	15 82       	std	Z+5, r1	; 0x05
      fc:	14 82       	std	Z+4, r1	; 0x04
}
      fe:	0f 90       	pop	r0
     100:	0f 90       	pop	r0
     102:	df 91       	pop	r29
     104:	cf 91       	pop	r28
     106:	08 95       	ret

00000108 <_ZN6myDateC1Eiii>:

myDate::myDate(int month,int day,int year){
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
     110:	28 97       	sbiw	r28, 0x08	; 8
     112:	0f b6       	in	r0, 0x3f	; 63
     114:	f8 94       	cli
     116:	de bf       	out	0x3e, r29	; 62
     118:	0f be       	out	0x3f, r0	; 63
     11a:	cd bf       	out	0x3d, r28	; 61
     11c:	9a 83       	std	Y+2, r25	; 0x02
     11e:	89 83       	std	Y+1, r24	; 0x01
     120:	7c 83       	std	Y+4, r23	; 0x04
     122:	6b 83       	std	Y+3, r22	; 0x03
     124:	5e 83       	std	Y+6, r21	; 0x06
     126:	4d 83       	std	Y+5, r20	; 0x05
     128:	38 87       	std	Y+8, r19	; 0x08
     12a:	2f 83       	std	Y+7, r18	; 0x07
	setDate(month,day,year);
     12c:	89 81       	ldd	r24, Y+1	; 0x01
     12e:	9a 81       	ldd	r25, Y+2	; 0x02
     130:	6b 81       	ldd	r22, Y+3	; 0x03
     132:	7c 81       	ldd	r23, Y+4	; 0x04
     134:	4d 81       	ldd	r20, Y+5	; 0x05
     136:	5e 81       	ldd	r21, Y+6	; 0x06
     138:	2f 81       	ldd	r18, Y+7	; 0x07
     13a:	38 85       	ldd	r19, Y+8	; 0x08
     13c:	0e 94 84 01 	call	0x308	; 0x308 <_ZN6myDate7setDateEiii>
}
     140:	28 96       	adiw	r28, 0x08	; 8
     142:	0f b6       	in	r0, 0x3f	; 63
     144:	f8 94       	cli
     146:	de bf       	out	0x3e, r29	; 62
     148:	0f be       	out	0x3f, r0	; 63
     14a:	cd bf       	out	0x3d, r28	; 61
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	08 95       	ret

00000152 <_ZN6myDate9getMonthsEv>:

BYTE myDate::getMonths(){
     152:	cf 93       	push	r28
     154:	df 93       	push	r29
     156:	00 d0       	rcall	.+0      	; 0x158 <_ZN6myDate9getMonthsEv+0x6>
     158:	cd b7       	in	r28, 0x3d	; 61
     15a:	de b7       	in	r29, 0x3e	; 62
     15c:	9a 83       	std	Y+2, r25	; 0x02
     15e:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)month;
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	9a 81       	ldd	r25, Y+2	; 0x02
     164:	fc 01       	movw	r30, r24
     166:	80 81       	ld	r24, Z
     168:	91 81       	ldd	r25, Z+1	; 0x01
}
     16a:	0f 90       	pop	r0
     16c:	0f 90       	pop	r0
     16e:	df 91       	pop	r29
     170:	cf 91       	pop	r28
     172:	08 95       	ret

00000174 <_ZN6myDate8getYearsEv>:

WORD myDate::getYears(){
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
     178:	00 d0       	rcall	.+0      	; 0x17a <_ZN6myDate8getYearsEv+0x6>
     17a:	cd b7       	in	r28, 0x3d	; 61
     17c:	de b7       	in	r29, 0x3e	; 62
     17e:	9a 83       	std	Y+2, r25	; 0x02
     180:	89 83       	std	Y+1, r24	; 0x01
	return (WORD)year;
     182:	89 81       	ldd	r24, Y+1	; 0x01
     184:	9a 81       	ldd	r25, Y+2	; 0x02
     186:	fc 01       	movw	r30, r24
     188:	84 81       	ldd	r24, Z+4	; 0x04
     18a:	95 81       	ldd	r25, Z+5	; 0x05
}
     18c:	0f 90       	pop	r0
     18e:	0f 90       	pop	r0
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <_ZN6myDate7getDaysEv>:

BYTE myDate::getDays(){
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	00 d0       	rcall	.+0      	; 0x19c <_ZN6myDate7getDaysEv+0x6>
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
     1a0:	9a 83       	std	Y+2, r25	; 0x02
     1a2:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)day;
     1a4:	89 81       	ldd	r24, Y+1	; 0x01
     1a6:	9a 81       	ldd	r25, Y+2	; 0x02
     1a8:	fc 01       	movw	r30, r24
     1aa:	82 81       	ldd	r24, Z+2	; 0x02
     1ac:	93 81       	ldd	r25, Z+3	; 0x03
}
     1ae:	0f 90       	pop	r0
     1b0:	0f 90       	pop	r0
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	08 95       	ret

000001b8 <_ZN6myDate8setMonthEi>:

void myDate::setMonth(int month){
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	00 d0       	rcall	.+0      	; 0x1be <_ZN6myDate8setMonthEi+0x6>
     1be:	00 d0       	rcall	.+0      	; 0x1c0 <_ZN6myDate8setMonthEi+0x8>
     1c0:	cd b7       	in	r28, 0x3d	; 61
     1c2:	de b7       	in	r29, 0x3e	; 62
     1c4:	9a 83       	std	Y+2, r25	; 0x02
     1c6:	89 83       	std	Y+1, r24	; 0x01
     1c8:	7c 83       	std	Y+4, r23	; 0x04
     1ca:	6b 83       	std	Y+3, r22	; 0x03
	if (month/13 == 0){
     1cc:	8b 81       	ldd	r24, Y+3	; 0x03
     1ce:	9c 81       	ldd	r25, Y+4	; 0x04
     1d0:	0c 96       	adiw	r24, 0x0c	; 12
     1d2:	89 31       	cpi	r24, 0x19	; 25
     1d4:	91 05       	cpc	r25, r1
     1d6:	38 f4       	brcc	.+14     	; 0x1e6 <_ZN6myDate8setMonthEi+0x2e>
		this->month = month;
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
     1da:	9a 81       	ldd	r25, Y+2	; 0x02
     1dc:	2b 81       	ldd	r18, Y+3	; 0x03
     1de:	3c 81       	ldd	r19, Y+4	; 0x04
     1e0:	fc 01       	movw	r30, r24
     1e2:	31 83       	std	Z+1, r19	; 0x01
     1e4:	20 83       	st	Z, r18
	}
}
     1e6:	0f 90       	pop	r0
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <_ZN6myDate6setDayEi>:

void myDate::setDay(int day){
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	00 d0       	rcall	.+0      	; 0x1fa <_ZN6myDate6setDayEi+0x6>
     1fa:	00 d0       	rcall	.+0      	; 0x1fc <_ZN6myDate6setDayEi+0x8>
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
     200:	9a 83       	std	Y+2, r25	; 0x02
     202:	89 83       	std	Y+1, r24	; 0x01
     204:	7c 83       	std	Y+4, r23	; 0x04
     206:	6b 83       	std	Y+3, r22	; 0x03
	if ((month == 9 || month == 4 || month == 6) && day/31 == 0){
     208:	89 81       	ldd	r24, Y+1	; 0x01
     20a:	9a 81       	ldd	r25, Y+2	; 0x02
     20c:	fc 01       	movw	r30, r24
     20e:	80 81       	ld	r24, Z
     210:	91 81       	ldd	r25, Z+1	; 0x01
     212:	89 30       	cpi	r24, 0x09	; 9
     214:	91 05       	cpc	r25, r1
     216:	81 f0       	breq	.+32     	; 0x238 <_ZN6myDate6setDayEi+0x44>
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	9a 81       	ldd	r25, Y+2	; 0x02
     21c:	fc 01       	movw	r30, r24
     21e:	80 81       	ld	r24, Z
     220:	91 81       	ldd	r25, Z+1	; 0x01
     222:	84 30       	cpi	r24, 0x04	; 4
     224:	91 05       	cpc	r25, r1
     226:	41 f0       	breq	.+16     	; 0x238 <_ZN6myDate6setDayEi+0x44>
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	9a 81       	ldd	r25, Y+2	; 0x02
     22c:	fc 01       	movw	r30, r24
     22e:	80 81       	ld	r24, Z
     230:	91 81       	ldd	r25, Z+1	; 0x01
     232:	86 30       	cpi	r24, 0x06	; 6
     234:	91 05       	cpc	r25, r1
     236:	41 f4       	brne	.+16     	; 0x248 <_ZN6myDate6setDayEi+0x54>
     238:	8b 81       	ldd	r24, Y+3	; 0x03
     23a:	9c 81       	ldd	r25, Y+4	; 0x04
     23c:	4e 96       	adiw	r24, 0x1e	; 30
     23e:	8d 33       	cpi	r24, 0x3D	; 61
     240:	91 05       	cpc	r25, r1
     242:	10 f4       	brcc	.+4      	; 0x248 <_ZN6myDate6setDayEi+0x54>
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	01 c0       	rjmp	.+2      	; 0x24a <_ZN6myDate6setDayEi+0x56>
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	88 23       	and	r24, r24
     24c:	41 f0       	breq	.+16     	; 0x25e <_ZN6myDate6setDayEi+0x6a>
		this->day = day;
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	9a 81       	ldd	r25, Y+2	; 0x02
     252:	2b 81       	ldd	r18, Y+3	; 0x03
     254:	3c 81       	ldd	r19, Y+4	; 0x04
     256:	fc 01       	movw	r30, r24
     258:	33 83       	std	Z+3, r19	; 0x03
     25a:	22 83       	std	Z+2, r18	; 0x02
     25c:	28 c0       	rjmp	.+80     	; 0x2ae <_ZN6myDate6setDayEi+0xba>
	} else if (month == 2 && day/29 == 0){
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	9a 81       	ldd	r25, Y+2	; 0x02
     262:	fc 01       	movw	r30, r24
     264:	80 81       	ld	r24, Z
     266:	91 81       	ldd	r25, Z+1	; 0x01
     268:	82 30       	cpi	r24, 0x02	; 2
     26a:	91 05       	cpc	r25, r1
     26c:	41 f4       	brne	.+16     	; 0x27e <_ZN6myDate6setDayEi+0x8a>
     26e:	8b 81       	ldd	r24, Y+3	; 0x03
     270:	9c 81       	ldd	r25, Y+4	; 0x04
     272:	4c 96       	adiw	r24, 0x1c	; 28
     274:	89 33       	cpi	r24, 0x39	; 57
     276:	91 05       	cpc	r25, r1
     278:	10 f4       	brcc	.+4      	; 0x27e <_ZN6myDate6setDayEi+0x8a>
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	01 c0       	rjmp	.+2      	; 0x280 <_ZN6myDate6setDayEi+0x8c>
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	88 23       	and	r24, r24
     282:	41 f0       	breq	.+16     	; 0x294 <_ZN6myDate6setDayEi+0xa0>
		this->day = day;
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	9a 81       	ldd	r25, Y+2	; 0x02
     288:	2b 81       	ldd	r18, Y+3	; 0x03
     28a:	3c 81       	ldd	r19, Y+4	; 0x04
     28c:	fc 01       	movw	r30, r24
     28e:	33 83       	std	Z+3, r19	; 0x03
     290:	22 83       	std	Z+2, r18	; 0x02
     292:	0d c0       	rjmp	.+26     	; 0x2ae <_ZN6myDate6setDayEi+0xba>
	} else{
		if (day/32 == 0){
     294:	8b 81       	ldd	r24, Y+3	; 0x03
     296:	9c 81       	ldd	r25, Y+4	; 0x04
     298:	4f 96       	adiw	r24, 0x1f	; 31
     29a:	8f 33       	cpi	r24, 0x3F	; 63
     29c:	91 05       	cpc	r25, r1
     29e:	38 f4       	brcc	.+14     	; 0x2ae <_ZN6myDate6setDayEi+0xba>
			this->day = day;
     2a0:	89 81       	ldd	r24, Y+1	; 0x01
     2a2:	9a 81       	ldd	r25, Y+2	; 0x02
     2a4:	2b 81       	ldd	r18, Y+3	; 0x03
     2a6:	3c 81       	ldd	r19, Y+4	; 0x04
     2a8:	fc 01       	movw	r30, r24
     2aa:	33 83       	std	Z+3, r19	; 0x03
     2ac:	22 83       	std	Z+2, r18	; 0x02
		}		
	}
}
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	08 95       	ret

000002bc <_ZN6myDate7setYearEi>:

void myDate::setYear(int year){
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	00 d0       	rcall	.+0      	; 0x2c2 <_ZN6myDate7setYearEi+0x6>
     2c2:	00 d0       	rcall	.+0      	; 0x2c4 <_ZN6myDate7setYearEi+0x8>
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
     2c8:	9a 83       	std	Y+2, r25	; 0x02
     2ca:	89 83       	std	Y+1, r24	; 0x01
     2cc:	7c 83       	std	Y+4, r23	; 0x04
     2ce:	6b 83       	std	Y+3, r22	; 0x03
	if (year >= 2000){
     2d0:	8b 81       	ldd	r24, Y+3	; 0x03
     2d2:	9c 81       	ldd	r25, Y+4	; 0x04
     2d4:	27 e0       	ldi	r18, 0x07	; 7
     2d6:	80 3d       	cpi	r24, 0xD0	; 208
     2d8:	92 07       	cpc	r25, r18
     2da:	44 f0       	brlt	.+16     	; 0x2ec <_ZN6myDate7setYearEi+0x30>
		this->year = year;
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	9a 81       	ldd	r25, Y+2	; 0x02
     2e0:	2b 81       	ldd	r18, Y+3	; 0x03
     2e2:	3c 81       	ldd	r19, Y+4	; 0x04
     2e4:	fc 01       	movw	r30, r24
     2e6:	35 83       	std	Z+5, r19	; 0x05
     2e8:	24 83       	std	Z+4, r18	; 0x04
     2ea:	07 c0       	rjmp	.+14     	; 0x2fa <_ZN6myDate7setYearEi+0x3e>
	} else {
		this->year = 1010;
     2ec:	89 81       	ldd	r24, Y+1	; 0x01
     2ee:	9a 81       	ldd	r25, Y+2	; 0x02
     2f0:	22 ef       	ldi	r18, 0xF2	; 242
     2f2:	33 e0       	ldi	r19, 0x03	; 3
     2f4:	fc 01       	movw	r30, r24
     2f6:	35 83       	std	Z+5, r19	; 0x05
     2f8:	24 83       	std	Z+4, r18	; 0x04
	}	
}
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	08 95       	ret

00000308 <_ZN6myDate7setDateEiii>:

void myDate::setDate(int month, int day, int year){
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	cd b7       	in	r28, 0x3d	; 61
     30e:	de b7       	in	r29, 0x3e	; 62
     310:	28 97       	sbiw	r28, 0x08	; 8
     312:	0f b6       	in	r0, 0x3f	; 63
     314:	f8 94       	cli
     316:	de bf       	out	0x3e, r29	; 62
     318:	0f be       	out	0x3f, r0	; 63
     31a:	cd bf       	out	0x3d, r28	; 61
     31c:	9a 83       	std	Y+2, r25	; 0x02
     31e:	89 83       	std	Y+1, r24	; 0x01
     320:	7c 83       	std	Y+4, r23	; 0x04
     322:	6b 83       	std	Y+3, r22	; 0x03
     324:	5e 83       	std	Y+6, r21	; 0x06
     326:	4d 83       	std	Y+5, r20	; 0x05
     328:	38 87       	std	Y+8, r19	; 0x08
     32a:	2f 83       	std	Y+7, r18	; 0x07
	setMonth(month);
     32c:	89 81       	ldd	r24, Y+1	; 0x01
     32e:	9a 81       	ldd	r25, Y+2	; 0x02
     330:	2b 81       	ldd	r18, Y+3	; 0x03
     332:	3c 81       	ldd	r19, Y+4	; 0x04
     334:	b9 01       	movw	r22, r18
     336:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN6myDate8setMonthEi>
	setDay(day);
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	9a 81       	ldd	r25, Y+2	; 0x02
     33e:	2d 81       	ldd	r18, Y+5	; 0x05
     340:	3e 81       	ldd	r19, Y+6	; 0x06
     342:	b9 01       	movw	r22, r18
     344:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_ZN6myDate6setDayEi>
	setYear(year);
     348:	89 81       	ldd	r24, Y+1	; 0x01
     34a:	9a 81       	ldd	r25, Y+2	; 0x02
     34c:	2f 81       	ldd	r18, Y+7	; 0x07
     34e:	38 85       	ldd	r19, Y+8	; 0x08
     350:	b9 01       	movw	r22, r18
     352:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_ZN6myDate7setYearEi>
}
     356:	28 96       	adiw	r28, 0x08	; 8
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	0f be       	out	0x3f, r0	; 63
     360:	cd bf       	out	0x3d, r28	; 61
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	08 95       	ret

00000368 <_ZN6myDate8addYearsEi>:


void myDate::addYears(int years){	//allows negative years to come in, therefore subtracting years
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	00 d0       	rcall	.+0      	; 0x36e <_ZN6myDate8addYearsEi+0x6>
     36e:	00 d0       	rcall	.+0      	; 0x370 <_ZN6myDate8addYearsEi+0x8>
     370:	00 d0       	rcall	.+0      	; 0x372 <_ZN6myDate8addYearsEi+0xa>
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	9c 83       	std	Y+4, r25	; 0x04
     378:	8b 83       	std	Y+3, r24	; 0x03
     37a:	7e 83       	std	Y+6, r23	; 0x06
     37c:	6d 83       	std	Y+5, r22	; 0x05
	volatile int tempYears = year + years;
     37e:	8b 81       	ldd	r24, Y+3	; 0x03
     380:	9c 81       	ldd	r25, Y+4	; 0x04
     382:	fc 01       	movw	r30, r24
     384:	24 81       	ldd	r18, Z+4	; 0x04
     386:	35 81       	ldd	r19, Z+5	; 0x05
     388:	8d 81       	ldd	r24, Y+5	; 0x05
     38a:	9e 81       	ldd	r25, Y+6	; 0x06
     38c:	82 0f       	add	r24, r18
     38e:	93 1f       	adc	r25, r19
     390:	9a 83       	std	Y+2, r25	; 0x02
     392:	89 83       	std	Y+1, r24	; 0x01
	if (tempYears > 2012){
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	9a 81       	ldd	r25, Y+2	; 0x02
     398:	21 e0       	ldi	r18, 0x01	; 1
     39a:	f7 e0       	ldi	r31, 0x07	; 7
     39c:	8d 3d       	cpi	r24, 0xDD	; 221
     39e:	9f 07       	cpc	r25, r31
     3a0:	0c f4       	brge	.+2      	; 0x3a4 <_ZN6myDate8addYearsEi+0x3c>
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	22 23       	and	r18, r18
     3a6:	39 f0       	breq	.+14     	; 0x3b6 <_ZN6myDate8addYearsEi+0x4e>
		year = tempYears;
     3a8:	29 81       	ldd	r18, Y+1	; 0x01
     3aa:	3a 81       	ldd	r19, Y+2	; 0x02
     3ac:	8b 81       	ldd	r24, Y+3	; 0x03
     3ae:	9c 81       	ldd	r25, Y+4	; 0x04
     3b0:	fc 01       	movw	r30, r24
     3b2:	35 83       	std	Z+5, r19	; 0x05
     3b4:	24 83       	std	Z+4, r18	; 0x04
	}
}
     3b6:	26 96       	adiw	r28, 0x06	; 6
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	f8 94       	cli
     3bc:	de bf       	out	0x3e, r29	; 62
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	cd bf       	out	0x3d, r28	; 61
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <_ZN6myDate9addMonthsEi>:

void myDate::addMonths(int months){	//adds months depending on number of months currently on.
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
     3d0:	2a 97       	sbiw	r28, 0x0a	; 10
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	f8 94       	cli
     3d6:	de bf       	out	0x3e, r29	; 62
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	cd bf       	out	0x3d, r28	; 61
     3dc:	98 87       	std	Y+8, r25	; 0x08
     3de:	8f 83       	std	Y+7, r24	; 0x07
     3e0:	7a 87       	std	Y+10, r23	; 0x0a
     3e2:	69 87       	std	Y+9, r22	; 0x09
	volatile int tempMonths = month + months;
     3e4:	8f 81       	ldd	r24, Y+7	; 0x07
     3e6:	98 85       	ldd	r25, Y+8	; 0x08
     3e8:	fc 01       	movw	r30, r24
     3ea:	20 81       	ld	r18, Z
     3ec:	31 81       	ldd	r19, Z+1	; 0x01
     3ee:	89 85       	ldd	r24, Y+9	; 0x09
     3f0:	9a 85       	ldd	r25, Y+10	; 0x0a
     3f2:	82 0f       	add	r24, r18
     3f4:	93 1f       	adc	r25, r19
     3f6:	9e 83       	std	Y+6, r25	; 0x06
     3f8:	8d 83       	std	Y+5, r24	; 0x05
	if (tempMonths > 12 && tempMonths < 25){
     3fa:	8d 81       	ldd	r24, Y+5	; 0x05
     3fc:	9e 81       	ldd	r25, Y+6	; 0x06
     3fe:	8d 30       	cpi	r24, 0x0D	; 13
     400:	91 05       	cpc	r25, r1
     402:	3c f0       	brlt	.+14     	; 0x412 <_ZN6myDate9addMonthsEi+0x4a>
     404:	8d 81       	ldd	r24, Y+5	; 0x05
     406:	9e 81       	ldd	r25, Y+6	; 0x06
     408:	89 31       	cpi	r24, 0x19	; 25
     40a:	91 05       	cpc	r25, r1
     40c:	14 f4       	brge	.+4      	; 0x412 <_ZN6myDate9addMonthsEi+0x4a>
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	01 c0       	rjmp	.+2      	; 0x414 <_ZN6myDate9addMonthsEi+0x4c>
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	88 23       	and	r24, r24
     416:	61 f0       	breq	.+24     	; 0x430 <_ZN6myDate9addMonthsEi+0x68>
		int yearsToAdd = 1;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	9a 83       	std	Y+2, r25	; 0x02
     41e:	89 83       	std	Y+1, r24	; 0x01
		addYears(yearsToAdd);
     420:	8f 81       	ldd	r24, Y+7	; 0x07
     422:	98 85       	ldd	r25, Y+8	; 0x08
     424:	29 81       	ldd	r18, Y+1	; 0x01
     426:	3a 81       	ldd	r19, Y+2	; 0x02
     428:	b9 01       	movw	r22, r18
     42a:	0e 94 b4 01 	call	0x368	; 0x368 <_ZN6myDate8addYearsEi>
     42e:	22 c0       	rjmp	.+68     	; 0x474 <_ZN6myDate9addMonthsEi+0xac>
	} else if (tempMonths >= 25){
     430:	8d 81       	ldd	r24, Y+5	; 0x05
     432:	9e 81       	ldd	r25, Y+6	; 0x06
     434:	21 e0       	ldi	r18, 0x01	; 1
     436:	89 31       	cpi	r24, 0x19	; 25
     438:	91 05       	cpc	r25, r1
     43a:	0c f4       	brge	.+2      	; 0x43e <_ZN6myDate9addMonthsEi+0x76>
     43c:	20 e0       	ldi	r18, 0x00	; 0
     43e:	22 23       	and	r18, r18
     440:	91 f0       	breq	.+36     	; 0x466 <_ZN6myDate9addMonthsEi+0x9e>
		int yearsToAdd = tempMonths/12;
     442:	8d 81       	ldd	r24, Y+5	; 0x05
     444:	9e 81       	ldd	r25, Y+6	; 0x06
     446:	2c e0       	ldi	r18, 0x0C	; 12
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	b9 01       	movw	r22, r18
     44c:	0e 94 4b 18 	call	0x3096	; 0x3096 <__divmodhi4>
     450:	9b 01       	movw	r18, r22
     452:	3c 83       	std	Y+4, r19	; 0x04
     454:	2b 83       	std	Y+3, r18	; 0x03
		addYears(yearsToAdd);
     456:	8f 81       	ldd	r24, Y+7	; 0x07
     458:	98 85       	ldd	r25, Y+8	; 0x08
     45a:	2b 81       	ldd	r18, Y+3	; 0x03
     45c:	3c 81       	ldd	r19, Y+4	; 0x04
     45e:	b9 01       	movw	r22, r18
     460:	0e 94 b4 01 	call	0x368	; 0x368 <_ZN6myDate8addYearsEi>
     464:	07 c0       	rjmp	.+14     	; 0x474 <_ZN6myDate9addMonthsEi+0xac>
	} else {
		month = tempMonths;
     466:	2d 81       	ldd	r18, Y+5	; 0x05
     468:	3e 81       	ldd	r19, Y+6	; 0x06
     46a:	8f 81       	ldd	r24, Y+7	; 0x07
     46c:	98 85       	ldd	r25, Y+8	; 0x08
     46e:	fc 01       	movw	r30, r24
     470:	31 83       	std	Z+1, r19	; 0x01
     472:	20 83       	st	Z, r18
	}	
}
     474:	2a 96       	adiw	r28, 0x0a	; 10
     476:	0f b6       	in	r0, 0x3f	; 63
     478:	f8 94       	cli
     47a:	de bf       	out	0x3e, r29	; 62
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	cd bf       	out	0x3d, r28	; 61
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <_ZN6myDate7addDaysEi>:

void myDate::addDays(int days){
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	00 d0       	rcall	.+0      	; 0x48c <_ZN6myDate7addDaysEi+0x6>
     48c:	00 d0       	rcall	.+0      	; 0x48e <_ZN6myDate7addDaysEi+0x8>
     48e:	00 d0       	rcall	.+0      	; 0x490 <_ZN6myDate7addDaysEi+0xa>
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
     494:	9c 83       	std	Y+4, r25	; 0x04
     496:	8b 83       	std	Y+3, r24	; 0x03
     498:	7e 83       	std	Y+6, r23	; 0x06
     49a:	6d 83       	std	Y+5, r22	; 0x05
	volatile int tempDays = days + day;
     49c:	8b 81       	ldd	r24, Y+3	; 0x03
     49e:	9c 81       	ldd	r25, Y+4	; 0x04
     4a0:	fc 01       	movw	r30, r24
     4a2:	22 81       	ldd	r18, Z+2	; 0x02
     4a4:	33 81       	ldd	r19, Z+3	; 0x03
     4a6:	8d 81       	ldd	r24, Y+5	; 0x05
     4a8:	9e 81       	ldd	r25, Y+6	; 0x06
     4aa:	82 0f       	add	r24, r18
     4ac:	93 1f       	adc	r25, r19
     4ae:	9a 83       	std	Y+2, r25	; 0x02
     4b0:	89 83       	std	Y+1, r24	; 0x01
	//Logic for incrementing days the right way. We are assuming no more than one month will be added
	if (month == 9 || month == 4 || month == 6){	//30 days in a month
     4b2:	8b 81       	ldd	r24, Y+3	; 0x03
     4b4:	9c 81       	ldd	r25, Y+4	; 0x04
     4b6:	fc 01       	movw	r30, r24
     4b8:	80 81       	ld	r24, Z
     4ba:	91 81       	ldd	r25, Z+1	; 0x01
     4bc:	89 30       	cpi	r24, 0x09	; 9
     4be:	91 05       	cpc	r25, r1
     4c0:	81 f0       	breq	.+32     	; 0x4e2 <_ZN6myDate7addDaysEi+0x5c>
     4c2:	8b 81       	ldd	r24, Y+3	; 0x03
     4c4:	9c 81       	ldd	r25, Y+4	; 0x04
     4c6:	fc 01       	movw	r30, r24
     4c8:	80 81       	ld	r24, Z
     4ca:	91 81       	ldd	r25, Z+1	; 0x01
     4cc:	84 30       	cpi	r24, 0x04	; 4
     4ce:	91 05       	cpc	r25, r1
     4d0:	41 f0       	breq	.+16     	; 0x4e2 <_ZN6myDate7addDaysEi+0x5c>
     4d2:	8b 81       	ldd	r24, Y+3	; 0x03
     4d4:	9c 81       	ldd	r25, Y+4	; 0x04
     4d6:	fc 01       	movw	r30, r24
     4d8:	80 81       	ld	r24, Z
     4da:	91 81       	ldd	r25, Z+1	; 0x01
     4dc:	86 30       	cpi	r24, 0x06	; 6
     4de:	91 05       	cpc	r25, r1
     4e0:	11 f4       	brne	.+4      	; 0x4e6 <_ZN6myDate7addDaysEi+0x60>
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <_ZN6myDate7addDaysEi+0x62>
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	88 23       	and	r24, r24
     4ea:	31 f1       	breq	.+76     	; 0x538 <_ZN6myDate7addDaysEi+0xb2>
		if (tempDays/31 == 0){	
     4ec:	89 81       	ldd	r24, Y+1	; 0x01
     4ee:	9a 81       	ldd	r25, Y+2	; 0x02
     4f0:	4e 96       	adiw	r24, 0x1e	; 30
     4f2:	21 e0       	ldi	r18, 0x01	; 1
     4f4:	8d 33       	cpi	r24, 0x3D	; 61
     4f6:	91 05       	cpc	r25, r1
     4f8:	08 f0       	brcs	.+2      	; 0x4fc <_ZN6myDate7addDaysEi+0x76>
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	22 23       	and	r18, r18
     4fe:	41 f0       	breq	.+16     	; 0x510 <_ZN6myDate7addDaysEi+0x8a>
			day = tempDays;
     500:	29 81       	ldd	r18, Y+1	; 0x01
     502:	3a 81       	ldd	r19, Y+2	; 0x02
     504:	8b 81       	ldd	r24, Y+3	; 0x03
     506:	9c 81       	ldd	r25, Y+4	; 0x04
     508:	fc 01       	movw	r30, r24
     50a:	33 83       	std	Z+3, r19	; 0x03
     50c:	22 83       	std	Z+2, r18	; 0x02
     50e:	71 c0       	rjmp	.+226    	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		} else {
			addMonths(1);	//just add 1 month
     510:	8b 81       	ldd	r24, Y+3	; 0x03
     512:	9c 81       	ldd	r25, Y+4	; 0x04
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN6myDate9addMonthsEi>
			day = tempDays%31;			
     51c:	89 81       	ldd	r24, Y+1	; 0x01
     51e:	9a 81       	ldd	r25, Y+2	; 0x02
     520:	2f e1       	ldi	r18, 0x1F	; 31
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	b9 01       	movw	r22, r18
     526:	0e 94 4b 18 	call	0x3096	; 0x3096 <__divmodhi4>
     52a:	9c 01       	movw	r18, r24
     52c:	8b 81       	ldd	r24, Y+3	; 0x03
     52e:	9c 81       	ldd	r25, Y+4	; 0x04
     530:	fc 01       	movw	r30, r24
     532:	33 83       	std	Z+3, r19	; 0x03
     534:	22 83       	std	Z+2, r18	; 0x02
     536:	5d c0       	rjmp	.+186    	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		}
	} else if (month == 2){
     538:	8b 81       	ldd	r24, Y+3	; 0x03
     53a:	9c 81       	ldd	r25, Y+4	; 0x04
     53c:	fc 01       	movw	r30, r24
     53e:	80 81       	ld	r24, Z
     540:	91 81       	ldd	r25, Z+1	; 0x01
     542:	21 e0       	ldi	r18, 0x01	; 1
     544:	82 30       	cpi	r24, 0x02	; 2
     546:	91 05       	cpc	r25, r1
     548:	09 f0       	breq	.+2      	; 0x54c <_ZN6myDate7addDaysEi+0xc6>
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	22 23       	and	r18, r18
     54e:	49 f1       	breq	.+82     	; 0x5a2 <_ZN6myDate7addDaysEi+0x11c>
		if(day/29 == 0){		//Don't take into account LeapYear
     550:	8b 81       	ldd	r24, Y+3	; 0x03
     552:	9c 81       	ldd	r25, Y+4	; 0x04
     554:	fc 01       	movw	r30, r24
     556:	82 81       	ldd	r24, Z+2	; 0x02
     558:	93 81       	ldd	r25, Z+3	; 0x03
     55a:	4c 96       	adiw	r24, 0x1c	; 28
     55c:	21 e0       	ldi	r18, 0x01	; 1
     55e:	89 33       	cpi	r24, 0x39	; 57
     560:	91 05       	cpc	r25, r1
     562:	08 f0       	brcs	.+2      	; 0x566 <_ZN6myDate7addDaysEi+0xe0>
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	22 23       	and	r18, r18
     568:	41 f0       	breq	.+16     	; 0x57a <_ZN6myDate7addDaysEi+0xf4>
			day = tempDays;
     56a:	29 81       	ldd	r18, Y+1	; 0x01
     56c:	3a 81       	ldd	r19, Y+2	; 0x02
     56e:	8b 81       	ldd	r24, Y+3	; 0x03
     570:	9c 81       	ldd	r25, Y+4	; 0x04
     572:	fc 01       	movw	r30, r24
     574:	33 83       	std	Z+3, r19	; 0x03
     576:	22 83       	std	Z+2, r18	; 0x02
     578:	3c c0       	rjmp	.+120    	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		} else {
			addMonths(1);
     57a:	8b 81       	ldd	r24, Y+3	; 0x03
     57c:	9c 81       	ldd	r25, Y+4	; 0x04
     57e:	61 e0       	ldi	r22, 0x01	; 1
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN6myDate9addMonthsEi>
			day = tempDays%29;
     586:	89 81       	ldd	r24, Y+1	; 0x01
     588:	9a 81       	ldd	r25, Y+2	; 0x02
     58a:	2d e1       	ldi	r18, 0x1D	; 29
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	b9 01       	movw	r22, r18
     590:	0e 94 4b 18 	call	0x3096	; 0x3096 <__divmodhi4>
     594:	9c 01       	movw	r18, r24
     596:	8b 81       	ldd	r24, Y+3	; 0x03
     598:	9c 81       	ldd	r25, Y+4	; 0x04
     59a:	fc 01       	movw	r30, r24
     59c:	33 83       	std	Z+3, r19	; 0x03
     59e:	22 83       	std	Z+2, r18	; 0x02
     5a0:	28 c0       	rjmp	.+80     	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		}		
	} else {
		if (day/32 == 0){
     5a2:	8b 81       	ldd	r24, Y+3	; 0x03
     5a4:	9c 81       	ldd	r25, Y+4	; 0x04
     5a6:	fc 01       	movw	r30, r24
     5a8:	82 81       	ldd	r24, Z+2	; 0x02
     5aa:	93 81       	ldd	r25, Z+3	; 0x03
     5ac:	4f 96       	adiw	r24, 0x1f	; 31
     5ae:	21 e0       	ldi	r18, 0x01	; 1
     5b0:	8f 33       	cpi	r24, 0x3F	; 63
     5b2:	91 05       	cpc	r25, r1
     5b4:	08 f0       	brcs	.+2      	; 0x5b8 <_ZN6myDate7addDaysEi+0x132>
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	22 23       	and	r18, r18
     5ba:	41 f0       	breq	.+16     	; 0x5cc <_ZN6myDate7addDaysEi+0x146>
			day = tempDays;
     5bc:	29 81       	ldd	r18, Y+1	; 0x01
     5be:	3a 81       	ldd	r19, Y+2	; 0x02
     5c0:	8b 81       	ldd	r24, Y+3	; 0x03
     5c2:	9c 81       	ldd	r25, Y+4	; 0x04
     5c4:	fc 01       	movw	r30, r24
     5c6:	33 83       	std	Z+3, r19	; 0x03
     5c8:	22 83       	std	Z+2, r18	; 0x02
     5ca:	13 c0       	rjmp	.+38     	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		} else {
			addMonths(1);
     5cc:	8b 81       	ldd	r24, Y+3	; 0x03
     5ce:	9c 81       	ldd	r25, Y+4	; 0x04
     5d0:	61 e0       	ldi	r22, 0x01	; 1
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN6myDate9addMonthsEi>
			day = tempDays%32;
     5d8:	89 81       	ldd	r24, Y+1	; 0x01
     5da:	9a 81       	ldd	r25, Y+2	; 0x02
     5dc:	20 e2       	ldi	r18, 0x20	; 32
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	b9 01       	movw	r22, r18
     5e2:	0e 94 4b 18 	call	0x3096	; 0x3096 <__divmodhi4>
     5e6:	9c 01       	movw	r18, r24
     5e8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ea:	9c 81       	ldd	r25, Y+4	; 0x04
     5ec:	fc 01       	movw	r30, r24
     5ee:	33 83       	std	Z+3, r19	; 0x03
     5f0:	22 83       	std	Z+2, r18	; 0x02
		}
	}
}
     5f2:	26 96       	adiw	r28, 0x06	; 6
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	f8 94       	cli
     5f8:	de bf       	out	0x3e, r29	; 62
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	cd bf       	out	0x3d, r28	; 61
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <_ZN6myDate17checkValidityDateEv>:

BOOL myDate::checkValidityDate(){
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	00 d0       	rcall	.+0      	; 0x60a <_ZN6myDate17checkValidityDateEv+0x6>
     60a:	0f 92       	push	r0
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	9b 83       	std	Y+3, r25	; 0x03
     612:	8a 83       	std	Y+2, r24	; 0x02
	BOOL checkYear=fFalse;
     614:	19 82       	std	Y+1, r1	; 0x01
	if (month/13==0){
     616:	8a 81       	ldd	r24, Y+2	; 0x02
     618:	9b 81       	ldd	r25, Y+3	; 0x03
     61a:	fc 01       	movw	r30, r24
     61c:	80 81       	ld	r24, Z
     61e:	91 81       	ldd	r25, Z+1	; 0x01
     620:	0c 96       	adiw	r24, 0x0c	; 12
     622:	21 e0       	ldi	r18, 0x01	; 1
     624:	89 31       	cpi	r24, 0x19	; 25
     626:	91 05       	cpc	r25, r1
     628:	08 f0       	brcs	.+2      	; 0x62c <_ZN6myDate17checkValidityDateEv+0x28>
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	22 23       	and	r18, r18
     62e:	09 f4       	brne	.+2      	; 0x632 <_ZN6myDate17checkValidityDateEv+0x2e>
     630:	66 c0       	rjmp	.+204    	; 0x6fe <_ZN6myDate17checkValidityDateEv+0xfa>
			if ((month == 9 || month == 4 || month == 6) && day/31 == 0){
     632:	8a 81       	ldd	r24, Y+2	; 0x02
     634:	9b 81       	ldd	r25, Y+3	; 0x03
     636:	fc 01       	movw	r30, r24
     638:	80 81       	ld	r24, Z
     63a:	91 81       	ldd	r25, Z+1	; 0x01
     63c:	89 30       	cpi	r24, 0x09	; 9
     63e:	91 05       	cpc	r25, r1
     640:	81 f0       	breq	.+32     	; 0x662 <_ZN6myDate17checkValidityDateEv+0x5e>
     642:	8a 81       	ldd	r24, Y+2	; 0x02
     644:	9b 81       	ldd	r25, Y+3	; 0x03
     646:	fc 01       	movw	r30, r24
     648:	80 81       	ld	r24, Z
     64a:	91 81       	ldd	r25, Z+1	; 0x01
     64c:	84 30       	cpi	r24, 0x04	; 4
     64e:	91 05       	cpc	r25, r1
     650:	41 f0       	breq	.+16     	; 0x662 <_ZN6myDate17checkValidityDateEv+0x5e>
     652:	8a 81       	ldd	r24, Y+2	; 0x02
     654:	9b 81       	ldd	r25, Y+3	; 0x03
     656:	fc 01       	movw	r30, r24
     658:	80 81       	ld	r24, Z
     65a:	91 81       	ldd	r25, Z+1	; 0x01
     65c:	86 30       	cpi	r24, 0x06	; 6
     65e:	91 05       	cpc	r25, r1
     660:	59 f4       	brne	.+22     	; 0x678 <_ZN6myDate17checkValidityDateEv+0x74>
     662:	8a 81       	ldd	r24, Y+2	; 0x02
     664:	9b 81       	ldd	r25, Y+3	; 0x03
     666:	fc 01       	movw	r30, r24
     668:	82 81       	ldd	r24, Z+2	; 0x02
     66a:	93 81       	ldd	r25, Z+3	; 0x03
     66c:	4e 96       	adiw	r24, 0x1e	; 30
     66e:	8d 33       	cpi	r24, 0x3D	; 61
     670:	91 05       	cpc	r25, r1
     672:	10 f4       	brcc	.+4      	; 0x678 <_ZN6myDate17checkValidityDateEv+0x74>
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	01 c0       	rjmp	.+2      	; 0x67a <_ZN6myDate17checkValidityDateEv+0x76>
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	88 23       	and	r24, r24
     67c:	19 f0       	breq	.+6      	; 0x684 <_ZN6myDate17checkValidityDateEv+0x80>
				checkYear=fTrue;
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	89 83       	std	Y+1, r24	; 0x01
     682:	28 c0       	rjmp	.+80     	; 0x6d4 <_ZN6myDate17checkValidityDateEv+0xd0>
			} else if (month == 2 && day/29 == 0){
     684:	8a 81       	ldd	r24, Y+2	; 0x02
     686:	9b 81       	ldd	r25, Y+3	; 0x03
     688:	fc 01       	movw	r30, r24
     68a:	80 81       	ld	r24, Z
     68c:	91 81       	ldd	r25, Z+1	; 0x01
     68e:	82 30       	cpi	r24, 0x02	; 2
     690:	91 05       	cpc	r25, r1
     692:	59 f4       	brne	.+22     	; 0x6aa <_ZN6myDate17checkValidityDateEv+0xa6>
     694:	8a 81       	ldd	r24, Y+2	; 0x02
     696:	9b 81       	ldd	r25, Y+3	; 0x03
     698:	fc 01       	movw	r30, r24
     69a:	82 81       	ldd	r24, Z+2	; 0x02
     69c:	93 81       	ldd	r25, Z+3	; 0x03
     69e:	4c 96       	adiw	r24, 0x1c	; 28
     6a0:	89 33       	cpi	r24, 0x39	; 57
     6a2:	91 05       	cpc	r25, r1
     6a4:	10 f4       	brcc	.+4      	; 0x6aa <_ZN6myDate17checkValidityDateEv+0xa6>
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	01 c0       	rjmp	.+2      	; 0x6ac <_ZN6myDate17checkValidityDateEv+0xa8>
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	88 23       	and	r24, r24
     6ae:	19 f0       	breq	.+6      	; 0x6b6 <_ZN6myDate17checkValidityDateEv+0xb2>
				checkYear=fTrue;
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	89 83       	std	Y+1, r24	; 0x01
     6b4:	0f c0       	rjmp	.+30     	; 0x6d4 <_ZN6myDate17checkValidityDateEv+0xd0>
			} else{
				if (day/32 == 0){
     6b6:	8a 81       	ldd	r24, Y+2	; 0x02
     6b8:	9b 81       	ldd	r25, Y+3	; 0x03
     6ba:	fc 01       	movw	r30, r24
     6bc:	82 81       	ldd	r24, Z+2	; 0x02
     6be:	93 81       	ldd	r25, Z+3	; 0x03
     6c0:	4f 96       	adiw	r24, 0x1f	; 31
     6c2:	21 e0       	ldi	r18, 0x01	; 1
     6c4:	8f 33       	cpi	r24, 0x3F	; 63
     6c6:	91 05       	cpc	r25, r1
     6c8:	08 f0       	brcs	.+2      	; 0x6cc <_ZN6myDate17checkValidityDateEv+0xc8>
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	22 23       	and	r18, r18
     6ce:	11 f0       	breq	.+4      	; 0x6d4 <_ZN6myDate17checkValidityDateEv+0xd0>
					checkYear=fTrue;
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	89 83       	std	Y+1, r24	; 0x01
				}
			}
			
			//Check year
			if (checkYear && year>=2013){return fTrue;}
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
     6d6:	88 23       	and	r24, r24
     6d8:	59 f0       	breq	.+22     	; 0x6f0 <_ZN6myDate17checkValidityDateEv+0xec>
     6da:	8a 81       	ldd	r24, Y+2	; 0x02
     6dc:	9b 81       	ldd	r25, Y+3	; 0x03
     6de:	fc 01       	movw	r30, r24
     6e0:	84 81       	ldd	r24, Z+4	; 0x04
     6e2:	95 81       	ldd	r25, Z+5	; 0x05
     6e4:	f7 e0       	ldi	r31, 0x07	; 7
     6e6:	8d 3d       	cpi	r24, 0xDD	; 221
     6e8:	9f 07       	cpc	r25, r31
     6ea:	14 f0       	brlt	.+4      	; 0x6f0 <_ZN6myDate17checkValidityDateEv+0xec>
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	01 c0       	rjmp	.+2      	; 0x6f2 <_ZN6myDate17checkValidityDateEv+0xee>
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	88 23       	and	r24, r24
     6f4:	11 f0       	breq	.+4      	; 0x6fa <_ZN6myDate17checkValidityDateEv+0xf6>
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	03 c0       	rjmp	.+6      	; 0x700 <_ZN6myDate17checkValidityDateEv+0xfc>
			else {return fFalse;}
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	01 c0       	rjmp	.+2      	; 0x700 <_ZN6myDate17checkValidityDateEv+0xfc>
	} else {return fFalse;}
     6fe:	80 e0       	ldi	r24, 0x00	; 0
}
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <_ZN6myDate7getDateEv>:

const char * myDate::getDate(){
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
     714:	2d 97       	sbiw	r28, 0x0d	; 13
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	f8 94       	cli
     71a:	de bf       	out	0x3e, r29	; 62
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	cd bf       	out	0x3d, r28	; 61
     720:	9d 87       	std	Y+13, r25	; 0x0d
     722:	8c 87       	std	Y+12, r24	; 0x0c
	char monthString[3],dayString[3],yearString[5];
	itoa(month,monthString,10);
     724:	8c 85       	ldd	r24, Y+12	; 0x0c
     726:	9d 85       	ldd	r25, Y+13	; 0x0d
     728:	fc 01       	movw	r30, r24
     72a:	80 81       	ld	r24, Z
     72c:	91 81       	ldd	r25, Z+1	; 0x01
     72e:	9e 01       	movw	r18, r28
     730:	2f 5f       	subi	r18, 0xFF	; 255
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	b9 01       	movw	r22, r18
     736:	4a e0       	ldi	r20, 0x0A	; 10
     738:	50 e0       	ldi	r21, 0x00	; 0
     73a:	0e 94 bf 18 	call	0x317e	; 0x317e <itoa>
	itoa(day,dayString,10);
     73e:	8c 85       	ldd	r24, Y+12	; 0x0c
     740:	9d 85       	ldd	r25, Y+13	; 0x0d
     742:	fc 01       	movw	r30, r24
     744:	82 81       	ldd	r24, Z+2	; 0x02
     746:	93 81       	ldd	r25, Z+3	; 0x03
     748:	9e 01       	movw	r18, r28
     74a:	2c 5f       	subi	r18, 0xFC	; 252
     74c:	3f 4f       	sbci	r19, 0xFF	; 255
     74e:	b9 01       	movw	r22, r18
     750:	4a e0       	ldi	r20, 0x0A	; 10
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	0e 94 bf 18 	call	0x317e	; 0x317e <itoa>
	itoa(year,yearString,10);
     758:	8c 85       	ldd	r24, Y+12	; 0x0c
     75a:	9d 85       	ldd	r25, Y+13	; 0x0d
     75c:	fc 01       	movw	r30, r24
     75e:	84 81       	ldd	r24, Z+4	; 0x04
     760:	95 81       	ldd	r25, Z+5	; 0x05
     762:	9e 01       	movw	r18, r28
     764:	29 5f       	subi	r18, 0xF9	; 249
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	b9 01       	movw	r22, r18
     76a:	4a e0       	ldi	r20, 0x0A	; 10
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	0e 94 bf 18 	call	0x317e	; 0x317e <itoa>
	strcpy(dateString,monthString);
     772:	8c 85       	ldd	r24, Y+12	; 0x0c
     774:	9d 85       	ldd	r25, Y+13	; 0x0d
     776:	06 96       	adiw	r24, 0x06	; 6
     778:	9e 01       	movw	r18, r28
     77a:	2f 5f       	subi	r18, 0xFF	; 255
     77c:	3f 4f       	sbci	r19, 0xFF	; 255
     77e:	b9 01       	movw	r22, r18
     780:	0e 94 aa 18 	call	0x3154	; 0x3154 <strcpy>
	strcat(dateString,",");
     784:	8c 85       	ldd	r24, Y+12	; 0x0c
     786:	9d 85       	ldd	r25, Y+13	; 0x0d
     788:	9c 01       	movw	r18, r24
     78a:	2a 5f       	subi	r18, 0xFA	; 250
     78c:	3f 4f       	sbci	r19, 0xFF	; 255
     78e:	c9 01       	movw	r24, r18
     790:	ac 01       	movw	r20, r24
     792:	fa 01       	movw	r30, r20
     794:	01 90       	ld	r0, Z+
     796:	00 20       	and	r0, r0
     798:	e9 f7       	brne	.-6      	; 0x794 <_ZN6myDate7getDateEv+0x88>
     79a:	cf 01       	movw	r24, r30
     79c:	01 97       	sbiw	r24, 0x01	; 1
     79e:	84 1b       	sub	r24, r20
     7a0:	95 0b       	sbc	r25, r21
     7a2:	82 0f       	add	r24, r18
     7a4:	93 1f       	adc	r25, r19
     7a6:	2c e2       	ldi	r18, 0x2C	; 44
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	fc 01       	movw	r30, r24
     7ac:	31 83       	std	Z+1, r19	; 0x01
     7ae:	20 83       	st	Z, r18
	strcat(dateString,dayString);
     7b0:	8c 85       	ldd	r24, Y+12	; 0x0c
     7b2:	9d 85       	ldd	r25, Y+13	; 0x0d
     7b4:	06 96       	adiw	r24, 0x06	; 6
     7b6:	9e 01       	movw	r18, r28
     7b8:	2c 5f       	subi	r18, 0xFC	; 252
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	b9 01       	movw	r22, r18
     7be:	0e 94 96 18 	call	0x312c	; 0x312c <strcat>
	strcat(dateString,",");
     7c2:	8c 85       	ldd	r24, Y+12	; 0x0c
     7c4:	9d 85       	ldd	r25, Y+13	; 0x0d
     7c6:	9c 01       	movw	r18, r24
     7c8:	2a 5f       	subi	r18, 0xFA	; 250
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	c9 01       	movw	r24, r18
     7ce:	ac 01       	movw	r20, r24
     7d0:	fa 01       	movw	r30, r20
     7d2:	01 90       	ld	r0, Z+
     7d4:	00 20       	and	r0, r0
     7d6:	e9 f7       	brne	.-6      	; 0x7d2 <_ZN6myDate7getDateEv+0xc6>
     7d8:	cf 01       	movw	r24, r30
     7da:	01 97       	sbiw	r24, 0x01	; 1
     7dc:	84 1b       	sub	r24, r20
     7de:	95 0b       	sbc	r25, r21
     7e0:	82 0f       	add	r24, r18
     7e2:	93 1f       	adc	r25, r19
     7e4:	2c e2       	ldi	r18, 0x2C	; 44
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	fc 01       	movw	r30, r24
     7ea:	31 83       	std	Z+1, r19	; 0x01
     7ec:	20 83       	st	Z, r18
	strcat(dateString,yearString);
     7ee:	8c 85       	ldd	r24, Y+12	; 0x0c
     7f0:	9d 85       	ldd	r25, Y+13	; 0x0d
     7f2:	06 96       	adiw	r24, 0x06	; 6
     7f4:	9e 01       	movw	r18, r28
     7f6:	29 5f       	subi	r18, 0xF9	; 249
     7f8:	3f 4f       	sbci	r19, 0xFF	; 255
     7fa:	b9 01       	movw	r22, r18
     7fc:	0e 94 96 18 	call	0x312c	; 0x312c <strcat>
	dateString[15] = ' ';
     800:	8c 85       	ldd	r24, Y+12	; 0x0c
     802:	9d 85       	ldd	r25, Y+13	; 0x0d
     804:	20 e2       	ldi	r18, 0x20	; 32
     806:	fc 01       	movw	r30, r24
     808:	25 8b       	std	Z+21, r18	; 0x15
	dateString[16] = '\0';
     80a:	8c 85       	ldd	r24, Y+12	; 0x0c
     80c:	9d 85       	ldd	r25, Y+13	; 0x0d
     80e:	fc 01       	movw	r30, r24
     810:	16 8a       	std	Z+22, r1	; 0x16
	
	return dateString;
     812:	8c 85       	ldd	r24, Y+12	; 0x0c
     814:	9d 85       	ldd	r25, Y+13	; 0x0d
     816:	06 96       	adiw	r24, 0x06	; 6
     818:	2d 96       	adiw	r28, 0x0d	; 13
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	de bf       	out	0x3e, r29	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	cd bf       	out	0x3d, r28	; 61
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	08 95       	ret

0000082a <_ZN6myTimeC1Ev>:
		void addMinutes(int minutes);
		void setHour(int hour);
		void setMinute(int minute);
};

myTime::myTime():myDate(){
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	00 d0       	rcall	.+0      	; 0x830 <_ZN6myTimeC1Ev+0x6>
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	9a 83       	std	Y+2, r25	; 0x02
     836:	89 83       	std	Y+1, r24	; 0x01
     838:	89 81       	ldd	r24, Y+1	; 0x01
     83a:	9a 81       	ldd	r25, Y+2	; 0x02
     83c:	0e 94 69 00 	call	0xd2	; 0xd2 <_ZN6myDateC1Ev>
	setTime(0,0,0);
     840:	89 81       	ldd	r24, Y+1	; 0x01
     842:	9a 81       	ldd	r25, Y+2	; 0x02
     844:	60 e0       	ldi	r22, 0x00	; 0
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	40 e0       	ldi	r20, 0x00	; 0
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
}
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <_ZN6myTimeC1Eiii>:

myTime::myTime(int hour, int minute, int second):myDate(){
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	cd b7       	in	r28, 0x3d	; 61
     864:	de b7       	in	r29, 0x3e	; 62
     866:	28 97       	sbiw	r28, 0x08	; 8
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	f8 94       	cli
     86c:	de bf       	out	0x3e, r29	; 62
     86e:	0f be       	out	0x3f, r0	; 63
     870:	cd bf       	out	0x3d, r28	; 61
     872:	9a 83       	std	Y+2, r25	; 0x02
     874:	89 83       	std	Y+1, r24	; 0x01
     876:	7c 83       	std	Y+4, r23	; 0x04
     878:	6b 83       	std	Y+3, r22	; 0x03
     87a:	5e 83       	std	Y+6, r21	; 0x06
     87c:	4d 83       	std	Y+5, r20	; 0x05
     87e:	38 87       	std	Y+8, r19	; 0x08
     880:	2f 83       	std	Y+7, r18	; 0x07
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	9a 81       	ldd	r25, Y+2	; 0x02
     886:	0e 94 69 00 	call	0xd2	; 0xd2 <_ZN6myDateC1Ev>
	setTime(hour,minute,second);
     88a:	89 81       	ldd	r24, Y+1	; 0x01
     88c:	9a 81       	ldd	r25, Y+2	; 0x02
     88e:	6b 81       	ldd	r22, Y+3	; 0x03
     890:	7c 81       	ldd	r23, Y+4	; 0x04
     892:	4d 81       	ldd	r20, Y+5	; 0x05
     894:	5e 81       	ldd	r21, Y+6	; 0x06
     896:	2f 81       	ldd	r18, Y+7	; 0x07
     898:	38 85       	ldd	r19, Y+8	; 0x08
     89a:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
}
     89e:	28 96       	adiw	r28, 0x08	; 8
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	de bf       	out	0x3e, r29	; 62
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	cd bf       	out	0x3d, r28	; 61
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <_ZN6myTimeC1Eiiiiii>:

myTime::myTime(int hour,int minute,int second,int month, int day, int year):myDate(month,day,year){
     8b0:	cf 92       	push	r12
     8b2:	df 92       	push	r13
     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	2e 97       	sbiw	r28, 0x0e	; 14
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
     8d0:	9a 83       	std	Y+2, r25	; 0x02
     8d2:	89 83       	std	Y+1, r24	; 0x01
     8d4:	7c 83       	std	Y+4, r23	; 0x04
     8d6:	6b 83       	std	Y+3, r22	; 0x03
     8d8:	5e 83       	std	Y+6, r21	; 0x06
     8da:	4d 83       	std	Y+5, r20	; 0x05
     8dc:	38 87       	std	Y+8, r19	; 0x08
     8de:	2f 83       	std	Y+7, r18	; 0x07
     8e0:	1a 87       	std	Y+10, r17	; 0x0a
     8e2:	09 87       	std	Y+9, r16	; 0x09
     8e4:	fc 86       	std	Y+12, r15	; 0x0c
     8e6:	eb 86       	std	Y+11, r14	; 0x0b
     8e8:	de 86       	std	Y+14, r13	; 0x0e
     8ea:	cd 86       	std	Y+13, r12	; 0x0d
     8ec:	89 81       	ldd	r24, Y+1	; 0x01
     8ee:	9a 81       	ldd	r25, Y+2	; 0x02
     8f0:	69 85       	ldd	r22, Y+9	; 0x09
     8f2:	7a 85       	ldd	r23, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	2d 85       	ldd	r18, Y+13	; 0x0d
     8fa:	3e 85       	ldd	r19, Y+14	; 0x0e
     8fc:	0e 94 84 00 	call	0x108	; 0x108 <_ZN6myDateC1Eiii>
	setTime(hour,minute,second);
     900:	89 81       	ldd	r24, Y+1	; 0x01
     902:	9a 81       	ldd	r25, Y+2	; 0x02
     904:	6b 81       	ldd	r22, Y+3	; 0x03
     906:	7c 81       	ldd	r23, Y+4	; 0x04
     908:	4d 81       	ldd	r20, Y+5	; 0x05
     90a:	5e 81       	ldd	r21, Y+6	; 0x06
     90c:	2f 81       	ldd	r18, Y+7	; 0x07
     90e:	38 85       	ldd	r19, Y+8	; 0x08
     910:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
}
     914:	2e 96       	adiw	r28, 0x0e	; 14
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	f8 94       	cli
     91a:	de bf       	out	0x3e, r29	; 62
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	cd bf       	out	0x3d, r28	; 61
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	ff 90       	pop	r15
     92a:	ef 90       	pop	r14
     92c:	df 90       	pop	r13
     92e:	cf 90       	pop	r12
     930:	08 95       	ret

00000932 <_ZN6myTime10getSecondsEv>:

BYTE myTime::getSeconds(){
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	00 d0       	rcall	.+0      	; 0x938 <_ZN6myTime10getSecondsEv+0x6>
     938:	cd b7       	in	r28, 0x3d	; 61
     93a:	de b7       	in	r29, 0x3e	; 62
     93c:	9a 83       	std	Y+2, r25	; 0x02
     93e:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)second;
     940:	89 81       	ldd	r24, Y+1	; 0x01
     942:	9a 81       	ldd	r25, Y+2	; 0x02
     944:	fc 01       	movw	r30, r24
     946:	83 8d       	ldd	r24, Z+27	; 0x1b
     948:	94 8d       	ldd	r25, Z+28	; 0x1c
}
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <_ZN6myTime10getMinutesEv>:

BYTE myTime::getMinutes(){
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	00 d0       	rcall	.+0      	; 0x95a <_ZN6myTime10getMinutesEv+0x6>
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
     95e:	9a 83       	std	Y+2, r25	; 0x02
     960:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)minute;
     962:	89 81       	ldd	r24, Y+1	; 0x01
     964:	9a 81       	ldd	r25, Y+2	; 0x02
     966:	fc 01       	movw	r30, r24
     968:	81 8d       	ldd	r24, Z+25	; 0x19
     96a:	92 8d       	ldd	r25, Z+26	; 0x1a
}
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <_ZN6myTime8getHoursEv>:

BYTE myTime::getHours(){
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	00 d0       	rcall	.+0      	; 0x97c <_ZN6myTime8getHoursEv+0x6>
     97c:	cd b7       	in	r28, 0x3d	; 61
     97e:	de b7       	in	r29, 0x3e	; 62
     980:	9a 83       	std	Y+2, r25	; 0x02
     982:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)hour;
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	9a 81       	ldd	r25, Y+2	; 0x02
     988:	fc 01       	movw	r30, r24
     98a:	87 89       	ldd	r24, Z+23	; 0x17
     98c:	90 8d       	ldd	r25, Z+24	; 0x18
}
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	08 95       	ret

00000998 <_ZN6myTime7setTimeEPc>:

BOOL myTime::setTime(char *newTime){
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	cd b7       	in	r28, 0x3d	; 61
     99e:	de b7       	in	r29, 0x3e	; 62
     9a0:	a2 97       	sbiw	r28, 0x22	; 34
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	f8 94       	cli
     9a6:	de bf       	out	0x3e, r29	; 62
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	cd bf       	out	0x3d, r28	; 61
     9ac:	98 a3       	lds	r25, 0x58
     9ae:	8f 8f       	std	Y+31, r24	; 0x1f
     9b0:	7a a3       	lds	r23, 0x5a
     9b2:	69 a3       	lds	r22, 0x59
	int tempNum[3];
	char currentString[10];
	char tempString[10];
	strcpy(currentString,newTime);
     9b4:	ce 01       	movw	r24, r28
     9b6:	0b 96       	adiw	r24, 0x0b	; 11
     9b8:	29 a1       	lds	r18, 0x49
     9ba:	3a a1       	lds	r19, 0x4a
     9bc:	b9 01       	movw	r22, r18
     9be:	0e 94 aa 18 	call	0x3154	; 0x3154 <strcpy>
	for (int j=0; j<3; j++){
     9c2:	1a 82       	std	Y+2, r1	; 0x02
     9c4:	19 82       	std	Y+1, r1	; 0x01
     9c6:	43 c0       	rjmp	.+134    	; 0xa4e <_ZN6myTime7setTimeEPc+0xb6>
		for (int i=0; i<2; i++){
     9c8:	1c 82       	std	Y+4, r1	; 0x04
     9ca:	1b 82       	std	Y+3, r1	; 0x03
     9cc:	20 c0       	rjmp	.+64     	; 0xa0e <_ZN6myTime7setTimeEPc+0x76>
				tempString[i]=currentString[i+j*3];
     9ce:	29 81       	ldd	r18, Y+1	; 0x01
     9d0:	3a 81       	ldd	r19, Y+2	; 0x02
     9d2:	c9 01       	movw	r24, r18
     9d4:	88 0f       	add	r24, r24
     9d6:	99 1f       	adc	r25, r25
     9d8:	28 0f       	add	r18, r24
     9da:	39 1f       	adc	r19, r25
     9dc:	8b 81       	ldd	r24, Y+3	; 0x03
     9de:	9c 81       	ldd	r25, Y+4	; 0x04
     9e0:	82 0f       	add	r24, r18
     9e2:	93 1f       	adc	r25, r19
     9e4:	9e 01       	movw	r18, r28
     9e6:	25 5f       	subi	r18, 0xF5	; 245
     9e8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ea:	82 0f       	add	r24, r18
     9ec:	93 1f       	adc	r25, r19
     9ee:	fc 01       	movw	r30, r24
     9f0:	40 81       	ld	r20, Z
     9f2:	9e 01       	movw	r18, r28
     9f4:	2b 5e       	subi	r18, 0xEB	; 235
     9f6:	3f 4f       	sbci	r19, 0xFF	; 255
     9f8:	8b 81       	ldd	r24, Y+3	; 0x03
     9fa:	9c 81       	ldd	r25, Y+4	; 0x04
     9fc:	82 0f       	add	r24, r18
     9fe:	93 1f       	adc	r25, r19
     a00:	fc 01       	movw	r30, r24
     a02:	40 83       	st	Z, r20
	int tempNum[3];
	char currentString[10];
	char tempString[10];
	strcpy(currentString,newTime);
	for (int j=0; j<3; j++){
		for (int i=0; i<2; i++){
     a04:	8b 81       	ldd	r24, Y+3	; 0x03
     a06:	9c 81       	ldd	r25, Y+4	; 0x04
     a08:	01 96       	adiw	r24, 0x01	; 1
     a0a:	9c 83       	std	Y+4, r25	; 0x04
     a0c:	8b 83       	std	Y+3, r24	; 0x03
     a0e:	21 e0       	ldi	r18, 0x01	; 1
     a10:	8b 81       	ldd	r24, Y+3	; 0x03
     a12:	9c 81       	ldd	r25, Y+4	; 0x04
     a14:	82 30       	cpi	r24, 0x02	; 2
     a16:	91 05       	cpc	r25, r1
     a18:	0c f0       	brlt	.+2      	; 0xa1c <_ZN6myTime7setTimeEPc+0x84>
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	22 23       	and	r18, r18
     a1e:	b9 f6       	brne	.-82     	; 0x9ce <_ZN6myTime7setTimeEPc+0x36>
				tempString[i]=currentString[i+j*3];
		}
		tempNum[j]=atoi(tempString);
     a20:	ce 01       	movw	r24, r28
     a22:	45 96       	adiw	r24, 0x15	; 21
     a24:	0e 94 78 18 	call	0x30f0	; 0x30f0 <atoi>
     a28:	9c 01       	movw	r18, r24
     a2a:	89 81       	ldd	r24, Y+1	; 0x01
     a2c:	9a 81       	ldd	r25, Y+2	; 0x02
     a2e:	88 0f       	add	r24, r24
     a30:	99 1f       	adc	r25, r25
     a32:	ae 01       	movw	r20, r28
     a34:	4f 5f       	subi	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	84 0f       	add	r24, r20
     a3a:	95 1f       	adc	r25, r21
     a3c:	04 96       	adiw	r24, 0x04	; 4
     a3e:	fc 01       	movw	r30, r24
     a40:	31 83       	std	Z+1, r19	; 0x01
     a42:	20 83       	st	Z, r18
BOOL myTime::setTime(char *newTime){
	int tempNum[3];
	char currentString[10];
	char tempString[10];
	strcpy(currentString,newTime);
	for (int j=0; j<3; j++){
     a44:	89 81       	ldd	r24, Y+1	; 0x01
     a46:	9a 81       	ldd	r25, Y+2	; 0x02
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	9a 83       	std	Y+2, r25	; 0x02
     a4c:	89 83       	std	Y+1, r24	; 0x01
     a4e:	21 e0       	ldi	r18, 0x01	; 1
     a50:	89 81       	ldd	r24, Y+1	; 0x01
     a52:	9a 81       	ldd	r25, Y+2	; 0x02
     a54:	83 30       	cpi	r24, 0x03	; 3
     a56:	91 05       	cpc	r25, r1
     a58:	0c f0       	brlt	.+2      	; 0xa5c <_ZN6myTime7setTimeEPc+0xc4>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	22 23       	and	r18, r18
     a5e:	09 f0       	breq	.+2      	; 0xa62 <_ZN6myTime7setTimeEPc+0xca>
     a60:	b3 cf       	rjmp	.-154    	; 0x9c8 <_ZN6myTime7setTimeEPc+0x30>
		for (int i=0; i<2; i++){
				tempString[i]=currentString[i+j*3];
		}
		tempNum[j]=atoi(tempString);
	}
	if (tempNum[0]/24==0 && tempNum[1]/60==0 && tempNum[2]/60==0){
     a62:	8d 81       	ldd	r24, Y+5	; 0x05
     a64:	9e 81       	ldd	r25, Y+6	; 0x06
     a66:	47 96       	adiw	r24, 0x17	; 23
     a68:	8f 32       	cpi	r24, 0x2F	; 47
     a6a:	91 05       	cpc	r25, r1
     a6c:	c0 f4       	brcc	.+48     	; 0xa9e <_ZN6myTime7setTimeEPc+0x106>
     a6e:	8f 81       	ldd	r24, Y+7	; 0x07
     a70:	98 85       	ldd	r25, Y+8	; 0x08
     a72:	cb 96       	adiw	r24, 0x3b	; 59
     a74:	87 37       	cpi	r24, 0x77	; 119
     a76:	91 05       	cpc	r25, r1
     a78:	90 f4       	brcc	.+36     	; 0xa9e <_ZN6myTime7setTimeEPc+0x106>
     a7a:	89 85       	ldd	r24, Y+9	; 0x09
     a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a7e:	cb 96       	adiw	r24, 0x3b	; 59
     a80:	87 37       	cpi	r24, 0x77	; 119
     a82:	91 05       	cpc	r25, r1
     a84:	60 f4       	brcc	.+24     	; 0xa9e <_ZN6myTime7setTimeEPc+0x106>
		setTime(tempNum[0],tempNum[1],tempNum[2]);
     a86:	6d 81       	ldd	r22, Y+5	; 0x05
     a88:	7e 81       	ldd	r23, Y+6	; 0x06
     a8a:	4f 81       	ldd	r20, Y+7	; 0x07
     a8c:	58 85       	ldd	r21, Y+8	; 0x08
     a8e:	29 85       	ldd	r18, Y+9	; 0x09
     a90:	3a 85       	ldd	r19, Y+10	; 0x0a
     a92:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a94:	98 a1       	lds	r25, 0x48
     a96:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
		return fTrue;
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	01 c0       	rjmp	.+2      	; 0xaa0 <_ZN6myTime7setTimeEPc+0x108>
	} 
	return fFalse;
     a9e:	80 e0       	ldi	r24, 0x00	; 0
}
     aa0:	a2 96       	adiw	r28, 0x22	; 34
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	f8 94       	cli
     aa6:	de bf       	out	0x3e, r29	; 62
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	cd bf       	out	0x3d, r28	; 61
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	08 95       	ret

00000ab2 <_ZN6myTime7setTimeEiii>:

void myTime::setTime(int hour,int minute,int second){
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
     aba:	28 97       	sbiw	r28, 0x08	; 8
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	f8 94       	cli
     ac0:	de bf       	out	0x3e, r29	; 62
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	cd bf       	out	0x3d, r28	; 61
     ac6:	9a 83       	std	Y+2, r25	; 0x02
     ac8:	89 83       	std	Y+1, r24	; 0x01
     aca:	7c 83       	std	Y+4, r23	; 0x04
     acc:	6b 83       	std	Y+3, r22	; 0x03
     ace:	5e 83       	std	Y+6, r21	; 0x06
     ad0:	4d 83       	std	Y+5, r20	; 0x05
     ad2:	38 87       	std	Y+8, r19	; 0x08
     ad4:	2f 83       	std	Y+7, r18	; 0x07
	setHour(hour);
     ad6:	89 81       	ldd	r24, Y+1	; 0x01
     ad8:	9a 81       	ldd	r25, Y+2	; 0x02
     ada:	2b 81       	ldd	r18, Y+3	; 0x03
     adc:	3c 81       	ldd	r19, Y+4	; 0x04
     ade:	b9 01       	movw	r22, r18
     ae0:	0e 94 89 05 	call	0xb12	; 0xb12 <_ZN6myTime7setHourEi>
	setMinute(minute);
     ae4:	89 81       	ldd	r24, Y+1	; 0x01
     ae6:	9a 81       	ldd	r25, Y+2	; 0x02
     ae8:	2d 81       	ldd	r18, Y+5	; 0x05
     aea:	3e 81       	ldd	r19, Y+6	; 0x06
     aec:	b9 01       	movw	r22, r18
     aee:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6myTime9setMinuteEi>
	setSecond(second);
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	9a 81       	ldd	r25, Y+2	; 0x02
     af6:	2f 81       	ldd	r18, Y+7	; 0x07
     af8:	38 85       	ldd	r19, Y+8	; 0x08
     afa:	b9 01       	movw	r22, r18
     afc:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN6myTime9setSecondEi>
}
     b00:	28 96       	adiw	r28, 0x08	; 8
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	de bf       	out	0x3e, r29	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	cd bf       	out	0x3d, r28	; 61
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	08 95       	ret

00000b12 <_ZN6myTime7setHourEi>:

void myTime::setHour(int hour){
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	00 d0       	rcall	.+0      	; 0xb18 <_ZN6myTime7setHourEi+0x6>
     b18:	00 d0       	rcall	.+0      	; 0xb1a <_ZN6myTime7setHourEi+0x8>
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
     b1e:	9a 83       	std	Y+2, r25	; 0x02
     b20:	89 83       	std	Y+1, r24	; 0x01
     b22:	7c 83       	std	Y+4, r23	; 0x04
     b24:	6b 83       	std	Y+3, r22	; 0x03
	if (hour/24 == 0){
     b26:	8b 81       	ldd	r24, Y+3	; 0x03
     b28:	9c 81       	ldd	r25, Y+4	; 0x04
     b2a:	47 96       	adiw	r24, 0x17	; 23
     b2c:	8f 32       	cpi	r24, 0x2F	; 47
     b2e:	91 05       	cpc	r25, r1
     b30:	38 f4       	brcc	.+14     	; 0xb40 <_ZN6myTime7setHourEi+0x2e>
		this->hour = hour;
     b32:	89 81       	ldd	r24, Y+1	; 0x01
     b34:	9a 81       	ldd	r25, Y+2	; 0x02
     b36:	2b 81       	ldd	r18, Y+3	; 0x03
     b38:	3c 81       	ldd	r19, Y+4	; 0x04
     b3a:	fc 01       	movw	r30, r24
     b3c:	30 8f       	std	Z+24, r19	; 0x18
     b3e:	27 8b       	std	Z+23, r18	; 0x17
	}	
}
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	08 95       	ret

00000b4e <_ZN6myTime9setMinuteEi>:

void myTime::setMinute(int minute){
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	00 d0       	rcall	.+0      	; 0xb54 <_ZN6myTime9setMinuteEi+0x6>
     b54:	00 d0       	rcall	.+0      	; 0xb56 <_ZN6myTime9setMinuteEi+0x8>
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
     b5a:	9a 83       	std	Y+2, r25	; 0x02
     b5c:	89 83       	std	Y+1, r24	; 0x01
     b5e:	7c 83       	std	Y+4, r23	; 0x04
     b60:	6b 83       	std	Y+3, r22	; 0x03
	if (minute/60 == 0){
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	9c 81       	ldd	r25, Y+4	; 0x04
     b66:	cb 96       	adiw	r24, 0x3b	; 59
     b68:	87 37       	cpi	r24, 0x77	; 119
     b6a:	91 05       	cpc	r25, r1
     b6c:	38 f4       	brcc	.+14     	; 0xb7c <_ZN6myTime9setMinuteEi+0x2e>
		this->minute = minute;
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	9a 81       	ldd	r25, Y+2	; 0x02
     b72:	2b 81       	ldd	r18, Y+3	; 0x03
     b74:	3c 81       	ldd	r19, Y+4	; 0x04
     b76:	fc 01       	movw	r30, r24
     b78:	32 8f       	std	Z+26, r19	; 0x1a
     b7a:	21 8f       	std	Z+25, r18	; 0x19
	}	
}
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	08 95       	ret

00000b8a <_ZN6myTime9setSecondEi>:

void myTime::setSecond(int second){
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	00 d0       	rcall	.+0      	; 0xb90 <_ZN6myTime9setSecondEi+0x6>
     b90:	00 d0       	rcall	.+0      	; 0xb92 <_ZN6myTime9setSecondEi+0x8>
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	9a 83       	std	Y+2, r25	; 0x02
     b98:	89 83       	std	Y+1, r24	; 0x01
     b9a:	7c 83       	std	Y+4, r23	; 0x04
     b9c:	6b 83       	std	Y+3, r22	; 0x03
	if (second/60 == 0){
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	9c 81       	ldd	r25, Y+4	; 0x04
     ba2:	cb 96       	adiw	r24, 0x3b	; 59
     ba4:	87 37       	cpi	r24, 0x77	; 119
     ba6:	91 05       	cpc	r25, r1
     ba8:	38 f4       	brcc	.+14     	; 0xbb8 <_ZN6myTime9setSecondEi+0x2e>
		this->second = second;
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	9a 81       	ldd	r25, Y+2	; 0x02
     bae:	2b 81       	ldd	r18, Y+3	; 0x03
     bb0:	3c 81       	ldd	r19, Y+4	; 0x04
     bb2:	fc 01       	movw	r30, r24
     bb4:	34 8f       	std	Z+28, r19	; 0x1c
     bb6:	23 8f       	std	Z+27, r18	; 0x1b
	}	
}
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	08 95       	ret

00000bc6 <_ZN6myTime8addHoursEi>:

void myTime::addHours(int hours){
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	28 97       	sbiw	r28, 0x08	; 8
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	de bf       	out	0x3e, r29	; 62
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	cd bf       	out	0x3d, r28	; 61
     bda:	9e 83       	std	Y+6, r25	; 0x06
     bdc:	8d 83       	std	Y+5, r24	; 0x05
     bde:	78 87       	std	Y+8, r23	; 0x08
     be0:	6f 83       	std	Y+7, r22	; 0x07
	volatile int tempHours = hour + hours;
     be2:	8d 81       	ldd	r24, Y+5	; 0x05
     be4:	9e 81       	ldd	r25, Y+6	; 0x06
     be6:	fc 01       	movw	r30, r24
     be8:	27 89       	ldd	r18, Z+23	; 0x17
     bea:	30 8d       	ldd	r19, Z+24	; 0x18
     bec:	8f 81       	ldd	r24, Y+7	; 0x07
     bee:	98 85       	ldd	r25, Y+8	; 0x08
     bf0:	82 0f       	add	r24, r18
     bf2:	93 1f       	adc	r25, r19
     bf4:	9a 83       	std	Y+2, r25	; 0x02
     bf6:	89 83       	std	Y+1, r24	; 0x01
	hour = tempHours%24;
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	9a 81       	ldd	r25, Y+2	; 0x02
     bfc:	28 e1       	ldi	r18, 0x18	; 24
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	b9 01       	movw	r22, r18
     c02:	0e 94 4b 18 	call	0x3096	; 0x3096 <__divmodhi4>
     c06:	9c 01       	movw	r18, r24
     c08:	8d 81       	ldd	r24, Y+5	; 0x05
     c0a:	9e 81       	ldd	r25, Y+6	; 0x06
     c0c:	fc 01       	movw	r30, r24
     c0e:	30 8f       	std	Z+24, r19	; 0x18
     c10:	27 8b       	std	Z+23, r18	; 0x17
	if (tempHours/24 >= 1){
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	9a 81       	ldd	r25, Y+2	; 0x02
     c16:	21 e0       	ldi	r18, 0x01	; 1
     c18:	88 31       	cpi	r24, 0x18	; 24
     c1a:	91 05       	cpc	r25, r1
     c1c:	0c f4       	brge	.+2      	; 0xc20 <_ZN6myTime8addHoursEi+0x5a>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	22 23       	and	r18, r18
     c22:	91 f0       	breq	.+36     	; 0xc48 <_ZN6myTime8addHoursEi+0x82>
		volatile int daysToAdd = tempHours/24;
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	9a 81       	ldd	r25, Y+2	; 0x02
     c28:	28 e1       	ldi	r18, 0x18	; 24
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	b9 01       	movw	r22, r18
     c2e:	0e 94 4b 18 	call	0x3096	; 0x3096 <__divmodhi4>
     c32:	9b 01       	movw	r18, r22
     c34:	c9 01       	movw	r24, r18
     c36:	9c 83       	std	Y+4, r25	; 0x04
     c38:	8b 83       	std	Y+3, r24	; 0x03
		addDays(daysToAdd);
     c3a:	8d 81       	ldd	r24, Y+5	; 0x05
     c3c:	9e 81       	ldd	r25, Y+6	; 0x06
     c3e:	2b 81       	ldd	r18, Y+3	; 0x03
     c40:	3c 81       	ldd	r19, Y+4	; 0x04
     c42:	b9 01       	movw	r22, r18
     c44:	0e 94 43 02 	call	0x486	; 0x486 <_ZN6myDate7addDaysEi>
	}	
}
     c48:	28 96       	adiw	r28, 0x08	; 8
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	08 95       	ret

00000c5a <_ZN6myTime10addMinutesEi>:

void myTime::addMinutes(int minutes){
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	28 97       	sbiw	r28, 0x08	; 8
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	de bf       	out	0x3e, r29	; 62
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	cd bf       	out	0x3d, r28	; 61
     c6e:	9e 83       	std	Y+6, r25	; 0x06
     c70:	8d 83       	std	Y+5, r24	; 0x05
     c72:	78 87       	std	Y+8, r23	; 0x08
     c74:	6f 83       	std	Y+7, r22	; 0x07
	volatile int tempMinutes = minute + minutes;				//what the minutes were + added minutes
     c76:	8d 81       	ldd	r24, Y+5	; 0x05
     c78:	9e 81       	ldd	r25, Y+6	; 0x06
     c7a:	fc 01       	movw	r30, r24
     c7c:	21 8d       	ldd	r18, Z+25	; 0x19
     c7e:	32 8d       	ldd	r19, Z+26	; 0x1a
     c80:	8f 81       	ldd	r24, Y+7	; 0x07
     c82:	98 85       	ldd	r25, Y+8	; 0x08
     c84:	82 0f       	add	r24, r18
     c86:	93 1f       	adc	r25, r19
     c88:	9a 83       	std	Y+2, r25	; 0x02
     c8a:	89 83       	std	Y+1, r24	; 0x01
	minute = tempMinutes%60;
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	9a 81       	ldd	r25, Y+2	; 0x02
     c90:	2c e3       	ldi	r18, 0x3C	; 60
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	b9 01       	movw	r22, r18
     c96:	0e 94 4b 18 	call	0x3096	; 0x3096 <__divmodhi4>
     c9a:	9c 01       	movw	r18, r24
     c9c:	8d 81       	ldd	r24, Y+5	; 0x05
     c9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ca0:	fc 01       	movw	r30, r24
     ca2:	32 8f       	std	Z+26, r19	; 0x1a
     ca4:	21 8f       	std	Z+25, r18	; 0x19
	if (tempMinutes/60 >= 1){
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	9a 81       	ldd	r25, Y+2	; 0x02
     caa:	21 e0       	ldi	r18, 0x01	; 1
     cac:	8c 33       	cpi	r24, 0x3C	; 60
     cae:	91 05       	cpc	r25, r1
     cb0:	0c f4       	brge	.+2      	; 0xcb4 <_ZN6myTime10addMinutesEi+0x5a>
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	22 23       	and	r18, r18
     cb6:	91 f0       	breq	.+36     	; 0xcdc <_ZN6myTime10addMinutesEi+0x82>
		volatile int hoursToAdd = tempMinutes/60;
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	9a 81       	ldd	r25, Y+2	; 0x02
     cbc:	2c e3       	ldi	r18, 0x3C	; 60
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	b9 01       	movw	r22, r18
     cc2:	0e 94 4b 18 	call	0x3096	; 0x3096 <__divmodhi4>
     cc6:	9b 01       	movw	r18, r22
     cc8:	c9 01       	movw	r24, r18
     cca:	9c 83       	std	Y+4, r25	; 0x04
     ccc:	8b 83       	std	Y+3, r24	; 0x03
		addHours(hoursToAdd);
     cce:	2b 81       	ldd	r18, Y+3	; 0x03
     cd0:	3c 81       	ldd	r19, Y+4	; 0x04
     cd2:	8d 81       	ldd	r24, Y+5	; 0x05
     cd4:	9e 81       	ldd	r25, Y+6	; 0x06
     cd6:	b9 01       	movw	r22, r18
     cd8:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <_ZN6myTime8addHoursEi>
	}
}
     cdc:	28 96       	adiw	r28, 0x08	; 8
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	08 95       	ret

00000cee <_ZN6myTime10addSecondsEi>:

void myTime::addSeconds(int seconds){
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	28 97       	sbiw	r28, 0x08	; 8
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	9e 83       	std	Y+6, r25	; 0x06
     d04:	8d 83       	std	Y+5, r24	; 0x05
     d06:	78 87       	std	Y+8, r23	; 0x08
     d08:	6f 83       	std	Y+7, r22	; 0x07
	volatile int tempSecond = second + seconds;
     d0a:	8d 81       	ldd	r24, Y+5	; 0x05
     d0c:	9e 81       	ldd	r25, Y+6	; 0x06
     d0e:	fc 01       	movw	r30, r24
     d10:	23 8d       	ldd	r18, Z+27	; 0x1b
     d12:	34 8d       	ldd	r19, Z+28	; 0x1c
     d14:	8f 81       	ldd	r24, Y+7	; 0x07
     d16:	98 85       	ldd	r25, Y+8	; 0x08
     d18:	82 0f       	add	r24, r18
     d1a:	93 1f       	adc	r25, r19
     d1c:	9a 83       	std	Y+2, r25	; 0x02
     d1e:	89 83       	std	Y+1, r24	; 0x01
	second = (tempSecond)%60;			  //what's left over
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	9a 81       	ldd	r25, Y+2	; 0x02
     d24:	2c e3       	ldi	r18, 0x3C	; 60
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	b9 01       	movw	r22, r18
     d2a:	0e 94 4b 18 	call	0x3096	; 0x3096 <__divmodhi4>
     d2e:	9c 01       	movw	r18, r24
     d30:	8d 81       	ldd	r24, Y+5	; 0x05
     d32:	9e 81       	ldd	r25, Y+6	; 0x06
     d34:	fc 01       	movw	r30, r24
     d36:	34 8f       	std	Z+28, r19	; 0x1c
     d38:	23 8f       	std	Z+27, r18	; 0x1b
	if ((tempSecond)/60 >= 1){
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	9a 81       	ldd	r25, Y+2	; 0x02
     d3e:	21 e0       	ldi	r18, 0x01	; 1
     d40:	8c 33       	cpi	r24, 0x3C	; 60
     d42:	91 05       	cpc	r25, r1
     d44:	0c f4       	brge	.+2      	; 0xd48 <_ZN6myTime10addSecondsEi+0x5a>
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	22 23       	and	r18, r18
     d4a:	91 f0       	breq	.+36     	; 0xd70 <_ZN6myTime10addSecondsEi+0x82>
		//There are more than 60 seconds now, find out how many minutes need to be added
		volatile int minutesToAdd = (tempSecond)/60;		  //if seconds = 120, adds two minutes
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	9a 81       	ldd	r25, Y+2	; 0x02
     d50:	2c e3       	ldi	r18, 0x3C	; 60
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	b9 01       	movw	r22, r18
     d56:	0e 94 4b 18 	call	0x3096	; 0x3096 <__divmodhi4>
     d5a:	9b 01       	movw	r18, r22
     d5c:	c9 01       	movw	r24, r18
     d5e:	9c 83       	std	Y+4, r25	; 0x04
     d60:	8b 83       	std	Y+3, r24	; 0x03
		addMinutes(minutesToAdd);					  //add to minutes
     d62:	2b 81       	ldd	r18, Y+3	; 0x03
     d64:	3c 81       	ldd	r19, Y+4	; 0x04
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	b9 01       	movw	r22, r18
     d6c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <_ZN6myTime10addMinutesEi>
	}
}
     d70:	28 96       	adiw	r28, 0x08	; 8
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	08 95       	ret

00000d82 <_ZN6myTime13checkValidityEv>:

BOOL myTime::checkValidity(){
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	00 d0       	rcall	.+0      	; 0xd88 <_ZN6myTime13checkValidityEv+0x6>
     d88:	0f 92       	push	r0
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	9b 83       	std	Y+3, r25	; 0x03
     d90:	8a 83       	std	Y+2, r24	; 0x02
	BOOL stillValid=fTrue;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	89 83       	std	Y+1, r24	; 0x01
	if (second/60==0 && minute/60==0 && hour/24==0){
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	9b 81       	ldd	r25, Y+3	; 0x03
     d9a:	fc 01       	movw	r30, r24
     d9c:	83 8d       	ldd	r24, Z+27	; 0x1b
     d9e:	94 8d       	ldd	r25, Z+28	; 0x1c
     da0:	cb 96       	adiw	r24, 0x3b	; 59
     da2:	87 37       	cpi	r24, 0x77	; 119
     da4:	91 05       	cpc	r25, r1
     da6:	a0 f4       	brcc	.+40     	; 0xdd0 <_ZN6myTime13checkValidityEv+0x4e>
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	9b 81       	ldd	r25, Y+3	; 0x03
     dac:	fc 01       	movw	r30, r24
     dae:	81 8d       	ldd	r24, Z+25	; 0x19
     db0:	92 8d       	ldd	r25, Z+26	; 0x1a
     db2:	cb 96       	adiw	r24, 0x3b	; 59
     db4:	87 37       	cpi	r24, 0x77	; 119
     db6:	91 05       	cpc	r25, r1
     db8:	58 f4       	brcc	.+22     	; 0xdd0 <_ZN6myTime13checkValidityEv+0x4e>
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	9b 81       	ldd	r25, Y+3	; 0x03
     dbe:	fc 01       	movw	r30, r24
     dc0:	87 89       	ldd	r24, Z+23	; 0x17
     dc2:	90 8d       	ldd	r25, Z+24	; 0x18
     dc4:	47 96       	adiw	r24, 0x17	; 23
     dc6:	8f 32       	cpi	r24, 0x2F	; 47
     dc8:	91 05       	cpc	r25, r1
     dca:	10 f4       	brcc	.+4      	; 0xdd0 <_ZN6myTime13checkValidityEv+0x4e>
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	01 c0       	rjmp	.+2      	; 0xdd2 <_ZN6myTime13checkValidityEv+0x50>
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	88 23       	and	r24, r24
     dd4:	69 f0       	breq	.+26     	; 0xdf0 <_ZN6myTime13checkValidityEv+0x6e>
		if (checkValidityDate()){return fTrue;}
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
     dd8:	9b 81       	ldd	r25, Y+3	; 0x03
     dda:	0e 94 02 03 	call	0x604	; 0x604 <_ZN6myDate17checkValidityDateEv>
     dde:	98 2f       	mov	r25, r24
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	99 23       	and	r25, r25
     de4:	09 f4       	brne	.+2      	; 0xde8 <_ZN6myTime13checkValidityEv+0x66>
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	88 23       	and	r24, r24
     dea:	11 f0       	breq	.+4      	; 0xdf0 <_ZN6myTime13checkValidityEv+0x6e>
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	01 c0       	rjmp	.+2      	; 0xdf2 <_ZN6myTime13checkValidityEv+0x70>
	}
	return fFalse;
     df0:	80 e0       	ldi	r24, 0x00	; 0
}
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	08 95       	ret

00000dfe <_ZN6myTime7getTimeEv>:

const char * myTime::getTime(){
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	2b 97       	sbiw	r28, 0x0b	; 11
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	9b 87       	std	Y+11, r25	; 0x0b
     e14:	8a 87       	std	Y+10, r24	; 0x0a
	char hourString[3], minuteString[3],secondString[3];
	itoa(hour,hourString,10);
     e16:	8a 85       	ldd	r24, Y+10	; 0x0a
     e18:	9b 85       	ldd	r25, Y+11	; 0x0b
     e1a:	fc 01       	movw	r30, r24
     e1c:	87 89       	ldd	r24, Z+23	; 0x17
     e1e:	90 8d       	ldd	r25, Z+24	; 0x18
     e20:	9e 01       	movw	r18, r28
     e22:	2f 5f       	subi	r18, 0xFF	; 255
     e24:	3f 4f       	sbci	r19, 0xFF	; 255
     e26:	b9 01       	movw	r22, r18
     e28:	4a e0       	ldi	r20, 0x0A	; 10
     e2a:	50 e0       	ldi	r21, 0x00	; 0
     e2c:	0e 94 bf 18 	call	0x317e	; 0x317e <itoa>
	itoa(minute,minuteString,10);
     e30:	8a 85       	ldd	r24, Y+10	; 0x0a
     e32:	9b 85       	ldd	r25, Y+11	; 0x0b
     e34:	fc 01       	movw	r30, r24
     e36:	81 8d       	ldd	r24, Z+25	; 0x19
     e38:	92 8d       	ldd	r25, Z+26	; 0x1a
     e3a:	9e 01       	movw	r18, r28
     e3c:	2c 5f       	subi	r18, 0xFC	; 252
     e3e:	3f 4f       	sbci	r19, 0xFF	; 255
     e40:	b9 01       	movw	r22, r18
     e42:	4a e0       	ldi	r20, 0x0A	; 10
     e44:	50 e0       	ldi	r21, 0x00	; 0
     e46:	0e 94 bf 18 	call	0x317e	; 0x317e <itoa>
	itoa(second,secondString,10);
     e4a:	8a 85       	ldd	r24, Y+10	; 0x0a
     e4c:	9b 85       	ldd	r25, Y+11	; 0x0b
     e4e:	fc 01       	movw	r30, r24
     e50:	83 8d       	ldd	r24, Z+27	; 0x1b
     e52:	94 8d       	ldd	r25, Z+28	; 0x1c
     e54:	9e 01       	movw	r18, r28
     e56:	29 5f       	subi	r18, 0xF9	; 249
     e58:	3f 4f       	sbci	r19, 0xFF	; 255
     e5a:	b9 01       	movw	r22, r18
     e5c:	4a e0       	ldi	r20, 0x0A	; 10
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	0e 94 bf 18 	call	0x317e	; 0x317e <itoa>
	strcpy(timeString,hourString);
     e64:	8a 85       	ldd	r24, Y+10	; 0x0a
     e66:	9b 85       	ldd	r25, Y+11	; 0x0b
     e68:	4d 96       	adiw	r24, 0x1d	; 29
     e6a:	9e 01       	movw	r18, r28
     e6c:	2f 5f       	subi	r18, 0xFF	; 255
     e6e:	3f 4f       	sbci	r19, 0xFF	; 255
     e70:	b9 01       	movw	r22, r18
     e72:	0e 94 aa 18 	call	0x3154	; 0x3154 <strcpy>
	strcat(timeString,":");
     e76:	8a 85       	ldd	r24, Y+10	; 0x0a
     e78:	9b 85       	ldd	r25, Y+11	; 0x0b
     e7a:	9c 01       	movw	r18, r24
     e7c:	23 5e       	subi	r18, 0xE3	; 227
     e7e:	3f 4f       	sbci	r19, 0xFF	; 255
     e80:	c9 01       	movw	r24, r18
     e82:	ac 01       	movw	r20, r24
     e84:	fa 01       	movw	r30, r20
     e86:	01 90       	ld	r0, Z+
     e88:	00 20       	and	r0, r0
     e8a:	e9 f7       	brne	.-6      	; 0xe86 <_ZN6myTime7getTimeEv+0x88>
     e8c:	cf 01       	movw	r24, r30
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	84 1b       	sub	r24, r20
     e92:	95 0b       	sbc	r25, r21
     e94:	82 0f       	add	r24, r18
     e96:	93 1f       	adc	r25, r19
     e98:	2a e3       	ldi	r18, 0x3A	; 58
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	fc 01       	movw	r30, r24
     e9e:	31 83       	std	Z+1, r19	; 0x01
     ea0:	20 83       	st	Z, r18
	strcat(timeString,minuteString);
     ea2:	8a 85       	ldd	r24, Y+10	; 0x0a
     ea4:	9b 85       	ldd	r25, Y+11	; 0x0b
     ea6:	4d 96       	adiw	r24, 0x1d	; 29
     ea8:	9e 01       	movw	r18, r28
     eaa:	2c 5f       	subi	r18, 0xFC	; 252
     eac:	3f 4f       	sbci	r19, 0xFF	; 255
     eae:	b9 01       	movw	r22, r18
     eb0:	0e 94 96 18 	call	0x312c	; 0x312c <strcat>
	strcat(timeString,":");
     eb4:	8a 85       	ldd	r24, Y+10	; 0x0a
     eb6:	9b 85       	ldd	r25, Y+11	; 0x0b
     eb8:	9c 01       	movw	r18, r24
     eba:	23 5e       	subi	r18, 0xE3	; 227
     ebc:	3f 4f       	sbci	r19, 0xFF	; 255
     ebe:	c9 01       	movw	r24, r18
     ec0:	ac 01       	movw	r20, r24
     ec2:	fa 01       	movw	r30, r20
     ec4:	01 90       	ld	r0, Z+
     ec6:	00 20       	and	r0, r0
     ec8:	e9 f7       	brne	.-6      	; 0xec4 <_ZN6myTime7getTimeEv+0xc6>
     eca:	cf 01       	movw	r24, r30
     ecc:	01 97       	sbiw	r24, 0x01	; 1
     ece:	84 1b       	sub	r24, r20
     ed0:	95 0b       	sbc	r25, r21
     ed2:	82 0f       	add	r24, r18
     ed4:	93 1f       	adc	r25, r19
     ed6:	2a e3       	ldi	r18, 0x3A	; 58
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	fc 01       	movw	r30, r24
     edc:	31 83       	std	Z+1, r19	; 0x01
     ede:	20 83       	st	Z, r18
	strcat(timeString,secondString);
     ee0:	8a 85       	ldd	r24, Y+10	; 0x0a
     ee2:	9b 85       	ldd	r25, Y+11	; 0x0b
     ee4:	4d 96       	adiw	r24, 0x1d	; 29
     ee6:	9e 01       	movw	r18, r28
     ee8:	29 5f       	subi	r18, 0xF9	; 249
     eea:	3f 4f       	sbci	r19, 0xFF	; 255
     eec:	b9 01       	movw	r22, r18
     eee:	0e 94 96 18 	call	0x312c	; 0x312c <strcat>
	timeString[10] = ' ';
     ef2:	8a 85       	ldd	r24, Y+10	; 0x0a
     ef4:	9b 85       	ldd	r25, Y+11	; 0x0b
     ef6:	20 e2       	ldi	r18, 0x20	; 32
     ef8:	fc 01       	movw	r30, r24
     efa:	27 a3       	lds	r18, 0x57
	timeString[11] = '\0';
     efc:	8a 85       	ldd	r24, Y+10	; 0x0a
     efe:	9b 85       	ldd	r25, Y+11	; 0x0b
     f00:	fc 01       	movw	r30, r24
     f02:	10 a6       	lds	r17, 0xb0
	return timeString;
     f04:	8a 85       	ldd	r24, Y+10	; 0x0a
     f06:	9b 85       	ldd	r25, Y+11	; 0x0b
     f08:	4d 96       	adiw	r24, 0x1d	; 29
     f0a:	2b 96       	adiw	r28, 0x0b	; 11
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	08 95       	ret

00000f1c <_Z18getDateTime_eepromhh>:
BYTE EEMEM eeDay = 10;
WORD EEMEM eeYear = 2013;


/*************************************************************************************************************/
void getDateTime_eeprom(BOOL gTime, BOOL gDate){			//get date and time from EEPROM
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	2f 97       	sbiw	r28, 0x0f	; 15
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	8e 87       	std	Y+14, r24	; 0x0e
     f32:	6f 87       	std	Y+15, r22	; 0x0f
	cli();
     f34:	f8 94       	cli
	if (gTime){
     f36:	8e 85       	ldd	r24, Y+14	; 0x0e
     f38:	88 23       	and	r24, r24
     f3a:	09 f4       	brne	.+2      	; 0xf3e <_Z18getDateTime_eepromhh+0x22>
     f3c:	4b c0       	rjmp	.+150    	; 0xfd4 <_Z18getDateTime_eepromhh+0xb8>
		BYTE tempMin, tempSec, tempHour;
		int times=0;
     f3e:	1a 82       	std	Y+2, r1	; 0x02
     f40:	19 82       	std	Y+1, r1	; 0x01
		BOOL notGood=fTrue;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	8b 83       	std	Y+3, r24	; 0x03
		while(notGood && times<3){
     f46:	2c c0       	rjmp	.+88     	; 0xfa0 <_Z18getDateTime_eepromhh+0x84>
			tempSec = eeprom_read_byte(&eeSecond);
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__eerd_byte_m644pa>
     f50:	8f 83       	std	Y+7, r24	; 0x07
			tempMin = eeprom_read_byte(&eeMinute);
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__eerd_byte_m644pa>
     f5a:	88 87       	std	Y+8, r24	; 0x08
			tempHour = eeprom_read_byte(&eeHour);
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__eerd_byte_m644pa>
     f64:	89 87       	std	Y+9, r24	; 0x09
			if (tempSec/60==0 && tempMin/60==0 && tempHour/24==0){currentTime.setTime((int)tempHour,(int)tempMin,(int)tempSec); notGood=fFalse;}
     f66:	8f 81       	ldd	r24, Y+7	; 0x07
     f68:	8c 33       	cpi	r24, 0x3C	; 60
     f6a:	a8 f4       	brcc	.+42     	; 0xf96 <_Z18getDateTime_eepromhh+0x7a>
     f6c:	88 85       	ldd	r24, Y+8	; 0x08
     f6e:	8c 33       	cpi	r24, 0x3C	; 60
     f70:	90 f4       	brcc	.+36     	; 0xf96 <_Z18getDateTime_eepromhh+0x7a>
     f72:	89 85       	ldd	r24, Y+9	; 0x09
     f74:	88 31       	cpi	r24, 0x18	; 24
     f76:	78 f4       	brcc	.+30     	; 0xf96 <_Z18getDateTime_eepromhh+0x7a>
     f78:	89 85       	ldd	r24, Y+9	; 0x09
     f7a:	68 2f       	mov	r22, r24
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	88 85       	ldd	r24, Y+8	; 0x08
     f80:	48 2f       	mov	r20, r24
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	8f 81       	ldd	r24, Y+7	; 0x07
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	86 ea       	ldi	r24, 0xA6	; 166
     f8c:	91 e0       	ldi	r25, 0x01	; 1
     f8e:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
     f92:	1b 82       	std	Y+3, r1	; 0x03
     f94:	05 c0       	rjmp	.+10     	; 0xfa0 <_Z18getDateTime_eepromhh+0x84>
			else {times++;}
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	9a 81       	ldd	r25, Y+2	; 0x02
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	9a 83       	std	Y+2, r25	; 0x02
     f9e:	89 83       	std	Y+1, r24	; 0x01
	cli();
	if (gTime){
		BYTE tempMin, tempSec, tempHour;
		int times=0;
		BOOL notGood=fTrue;
		while(notGood && times<3){
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	88 23       	and	r24, r24
     fa4:	39 f0       	breq	.+14     	; 0xfb4 <_Z18getDateTime_eepromhh+0x98>
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
     faa:	83 30       	cpi	r24, 0x03	; 3
     fac:	91 05       	cpc	r25, r1
     fae:	14 f4       	brge	.+4      	; 0xfb4 <_Z18getDateTime_eepromhh+0x98>
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	01 c0       	rjmp	.+2      	; 0xfb6 <_Z18getDateTime_eepromhh+0x9a>
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	88 23       	and	r24, r24
     fb8:	39 f6       	brne	.-114    	; 0xf48 <_Z18getDateTime_eepromhh+0x2c>
			tempMin = eeprom_read_byte(&eeMinute);
			tempHour = eeprom_read_byte(&eeHour);
			if (tempSec/60==0 && tempMin/60==0 && tempHour/24==0){currentTime.setTime((int)tempHour,(int)tempMin,(int)tempSec); notGood=fFalse;}
			else {times++;}
		}
		if (notGood){currentTime.setTime(1,1,1);}
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	88 23       	and	r24, r24
     fbe:	51 f0       	breq	.+20     	; 0xfd4 <_Z18getDateTime_eepromhh+0xb8>
     fc0:	86 ea       	ldi	r24, 0xA6	; 166
     fc2:	91 e0       	ldi	r25, 0x01	; 1
     fc4:	61 e0       	ldi	r22, 0x01	; 1
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	41 e0       	ldi	r20, 0x01	; 1
     fca:	50 e0       	ldi	r21, 0x00	; 0
     fcc:	21 e0       	ldi	r18, 0x01	; 1
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
	}		
	if (gDate){
     fd4:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd6:	88 23       	and	r24, r24
     fd8:	09 f4       	brne	.+2      	; 0xfdc <_Z18getDateTime_eepromhh+0xc0>
     fda:	4e c0       	rjmp	.+156    	; 0x1078 <_Z18getDateTime_eepromhh+0x15c>
		BYTE tempDay,tempMonth;
		WORD tempYear;
		int times=0;
     fdc:	1d 82       	std	Y+5, r1	; 0x05
     fde:	1c 82       	std	Y+4, r1	; 0x04
		BOOL notGood=fTrue;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	8e 83       	std	Y+6, r24	; 0x06
		while (notGood && times<3){
     fe4:	2f c0       	rjmp	.+94     	; 0x1044 <_Z18getDateTime_eepromhh+0x128>
			tempDay = eeprom_read_byte(&eeDay);
     fe6:	84 e0       	ldi	r24, 0x04	; 4
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__eerd_byte_m644pa>
     fee:	8a 87       	std	Y+10, r24	; 0x0a
			tempMonth = eeprom_read_byte(&eeMonth);
     ff0:	83 e0       	ldi	r24, 0x03	; 3
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__eerd_byte_m644pa>
     ff8:	8b 87       	std	Y+11, r24	; 0x0b
			tempYear = eeprom_read_word(&eeYear);
     ffa:	85 e0       	ldi	r24, 0x05	; 5
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	0e 94 06 19 	call	0x320c	; 0x320c <__eerd_word_m644pa>
    1002:	9d 87       	std	Y+13, r25	; 0x0d
    1004:	8c 87       	std	Y+12, r24	; 0x0c
			if (tempDay/31==0 && tempMonth/13==0 && tempYear/10000==0){currentTime.setDate((int)tempMonth,(int)tempDay,(int)tempYear); notGood=fFalse;}
    1006:	8a 85       	ldd	r24, Y+10	; 0x0a
    1008:	8f 31       	cpi	r24, 0x1F	; 31
    100a:	b8 f4       	brcc	.+46     	; 0x103a <_Z18getDateTime_eepromhh+0x11e>
    100c:	8b 85       	ldd	r24, Y+11	; 0x0b
    100e:	8d 30       	cpi	r24, 0x0D	; 13
    1010:	a0 f4       	brcc	.+40     	; 0x103a <_Z18getDateTime_eepromhh+0x11e>
    1012:	8c 85       	ldd	r24, Y+12	; 0x0c
    1014:	9d 85       	ldd	r25, Y+13	; 0x0d
    1016:	27 e2       	ldi	r18, 0x27	; 39
    1018:	80 31       	cpi	r24, 0x10	; 16
    101a:	92 07       	cpc	r25, r18
    101c:	70 f4       	brcc	.+28     	; 0x103a <_Z18getDateTime_eepromhh+0x11e>
    101e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1020:	68 2f       	mov	r22, r24
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	8a 85       	ldd	r24, Y+10	; 0x0a
    1026:	48 2f       	mov	r20, r24
    1028:	50 e0       	ldi	r21, 0x00	; 0
    102a:	2c 85       	ldd	r18, Y+12	; 0x0c
    102c:	3d 85       	ldd	r19, Y+13	; 0x0d
    102e:	86 ea       	ldi	r24, 0xA6	; 166
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	0e 94 84 01 	call	0x308	; 0x308 <_ZN6myDate7setDateEiii>
    1036:	1e 82       	std	Y+6, r1	; 0x06
    1038:	05 c0       	rjmp	.+10     	; 0x1044 <_Z18getDateTime_eepromhh+0x128>
			else {times++;}
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
    103c:	9d 81       	ldd	r25, Y+5	; 0x05
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	9d 83       	std	Y+5, r25	; 0x05
    1042:	8c 83       	std	Y+4, r24	; 0x04
	if (gDate){
		BYTE tempDay,tempMonth;
		WORD tempYear;
		int times=0;
		BOOL notGood=fTrue;
		while (notGood && times<3){
    1044:	8e 81       	ldd	r24, Y+6	; 0x06
    1046:	88 23       	and	r24, r24
    1048:	39 f0       	breq	.+14     	; 0x1058 <_Z18getDateTime_eepromhh+0x13c>
    104a:	8c 81       	ldd	r24, Y+4	; 0x04
    104c:	9d 81       	ldd	r25, Y+5	; 0x05
    104e:	83 30       	cpi	r24, 0x03	; 3
    1050:	91 05       	cpc	r25, r1
    1052:	14 f4       	brge	.+4      	; 0x1058 <_Z18getDateTime_eepromhh+0x13c>
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	01 c0       	rjmp	.+2      	; 0x105a <_Z18getDateTime_eepromhh+0x13e>
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	88 23       	and	r24, r24
    105c:	21 f6       	brne	.-120    	; 0xfe6 <_Z18getDateTime_eepromhh+0xca>
			tempMonth = eeprom_read_byte(&eeMonth);
			tempYear = eeprom_read_word(&eeYear);
			if (tempDay/31==0 && tempMonth/13==0 && tempYear/10000==0){currentTime.setDate((int)tempMonth,(int)tempDay,(int)tempYear); notGood=fFalse;}
			else {times++;}
		}
		if (notGood){currentTime.setDate(1,1,2001);}	
    105e:	8e 81       	ldd	r24, Y+6	; 0x06
    1060:	88 23       	and	r24, r24
    1062:	51 f0       	breq	.+20     	; 0x1078 <_Z18getDateTime_eepromhh+0x15c>
    1064:	86 ea       	ldi	r24, 0xA6	; 166
    1066:	91 e0       	ldi	r25, 0x01	; 1
    1068:	61 e0       	ldi	r22, 0x01	; 1
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	41 e0       	ldi	r20, 0x01	; 1
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	21 ed       	ldi	r18, 0xD1	; 209
    1072:	37 e0       	ldi	r19, 0x07	; 7
    1074:	0e 94 84 01 	call	0x308	; 0x308 <_ZN6myDate7setDateEiii>
	}
	sei();
    1078:	78 94       	sei
}
    107a:	2f 96       	adiw	r28, 0x0f	; 15
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	de bf       	out	0x3e, r29	; 62
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	cd bf       	out	0x3d, r28	; 61
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	08 95       	ret

0000108c <_Z19saveDateTime_eepromhh>:
/*************************************************************************************************************/

void saveDateTime_eeprom(BOOL sTime, BOOL sDate){
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	29 97       	sbiw	r28, 0x09	; 9
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	88 87       	std	Y+8, r24	; 0x08
    10a2:	69 87       	std	Y+9, r22	; 0x09
	cli();
    10a4:	f8 94       	cli
	if (sTime){
    10a6:	88 85       	ldd	r24, Y+8	; 0x08
    10a8:	88 23       	and	r24, r24
    10aa:	f1 f0       	breq	.+60     	; 0x10e8 <_Z19saveDateTime_eepromhh+0x5c>
		BYTE tempSec,tempMin,tempHour;
		tempHour = currentTime.getHours();
    10ac:	86 ea       	ldi	r24, 0xA6	; 166
    10ae:	91 e0       	ldi	r25, 0x01	; 1
    10b0:	0e 94 bb 04 	call	0x976	; 0x976 <_ZN6myTime8getHoursEv>
    10b4:	89 83       	std	Y+1, r24	; 0x01
		tempMin = currentTime.getMinutes();
    10b6:	86 ea       	ldi	r24, 0xA6	; 166
    10b8:	91 e0       	ldi	r25, 0x01	; 1
    10ba:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6myTime10getMinutesEv>
    10be:	8a 83       	std	Y+2, r24	; 0x02
		tempSec = currentTime.getSeconds();
    10c0:	86 ea       	ldi	r24, 0xA6	; 166
    10c2:	91 e0       	ldi	r25, 0x01	; 1
    10c4:	0e 94 99 04 	call	0x932	; 0x932 <_ZN6myTime10getSecondsEv>
    10c8:	8b 83       	std	Y+3, r24	; 0x03
		eeprom_write_byte(&eeSecond,tempSec);
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	6b 81       	ldd	r22, Y+3	; 0x03
    10d0:	0e 94 0c 19 	call	0x3218	; 0x3218 <__eewr_byte_m644pa>
		eeprom_write_byte(&eeMinute,tempMin);
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	6a 81       	ldd	r22, Y+2	; 0x02
    10da:	0e 94 0c 19 	call	0x3218	; 0x3218 <__eewr_byte_m644pa>
		eeprom_write_byte(&eeHour,tempHour);
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	69 81       	ldd	r22, Y+1	; 0x01
    10e4:	0e 94 0c 19 	call	0x3218	; 0x3218 <__eewr_byte_m644pa>
	}
	if (sDate){
    10e8:	89 85       	ldd	r24, Y+9	; 0x09
    10ea:	88 23       	and	r24, r24
    10ec:	09 f1       	breq	.+66     	; 0x1130 <__stack+0x31>
		BYTE tempDay,tempMonth;
		WORD tempYear;
		tempYear = currentTime.getYears();
    10ee:	86 ea       	ldi	r24, 0xA6	; 166
    10f0:	91 e0       	ldi	r25, 0x01	; 1
    10f2:	0e 94 ba 00 	call	0x174	; 0x174 <_ZN6myDate8getYearsEv>
    10f6:	9d 83       	std	Y+5, r25	; 0x05
    10f8:	8c 83       	std	Y+4, r24	; 0x04
		tempMonth = currentTime.getMonths();
    10fa:	86 ea       	ldi	r24, 0xA6	; 166
    10fc:	91 e0       	ldi	r25, 0x01	; 1
    10fe:	0e 94 a9 00 	call	0x152	; 0x152 <_ZN6myDate9getMonthsEv>
    1102:	8e 83       	std	Y+6, r24	; 0x06
		tempDay = currentTime.getDays();
    1104:	86 ea       	ldi	r24, 0xA6	; 166
    1106:	91 e0       	ldi	r25, 0x01	; 1
    1108:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN6myDate7getDaysEv>
    110c:	8f 83       	std	Y+7, r24	; 0x07
		eeprom_write_word(&eeYear,tempYear);
    110e:	85 e0       	ldi	r24, 0x05	; 5
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	2c 81       	ldd	r18, Y+4	; 0x04
    1114:	3d 81       	ldd	r19, Y+5	; 0x05
    1116:	b9 01       	movw	r22, r18
    1118:	0e 94 1a 19 	call	0x3234	; 0x3234 <__eewr_word_m644pa>
		eeprom_write_byte(&eeMonth,tempMonth);
    111c:	83 e0       	ldi	r24, 0x03	; 3
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	6e 81       	ldd	r22, Y+6	; 0x06
    1122:	0e 94 0c 19 	call	0x3218	; 0x3218 <__eewr_byte_m644pa>
		eeprom_write_byte(&eeDay,tempDay);
    1126:	84 e0       	ldi	r24, 0x04	; 4
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	6f 81       	ldd	r22, Y+7	; 0x07
    112c:	0e 94 0c 19 	call	0x3218	; 0x3218 <__eewr_byte_m644pa>
	}
	sei();
    1130:	78 94       	sei
}
    1132:	29 96       	adiw	r28, 0x09	; 9
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	08 95       	ret

00001144 <_Z13PutUartChBonec>:
extern myTime currentTime;

#define updatingGAVR (flagUpdateGAVRDate || flagUpdateGAVRTime)

/**************************************************************************************************************/
void PutUartChBone(char ch){
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	0f 92       	push	r0
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSR0A & (1 << UDRE0)));
    1150:	00 00       	nop
    1152:	80 ec       	ldi	r24, 0xC0	; 192
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	fc 01       	movw	r30, r24
    1158:	80 81       	ld	r24, Z
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	80 72       	andi	r24, 0x20	; 32
    1160:	90 70       	andi	r25, 0x00	; 0
    1162:	21 e0       	ldi	r18, 0x01	; 1
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	09 f0       	breq	.+2      	; 0x116a <_Z13PutUartChBonec+0x26>
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	22 23       	and	r18, r18
    116c:	91 f7       	brne	.-28     	; 0x1152 <_Z13PutUartChBonec+0xe>
	UDR0=ch;
    116e:	86 ec       	ldi	r24, 0xC6	; 198
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	29 81       	ldd	r18, Y+1	; 0x01
    1174:	fc 01       	movw	r30, r24
    1176:	20 83       	st	Z, r18
}
    1178:	0f 90       	pop	r0
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	08 95       	ret

00001180 <_Z9PrintBonePc>:
/*************************************************************************************************************/
void PrintBone(char string[]){
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	00 d0       	rcall	.+0      	; 0x1186 <_Z9PrintBonePc+0x6>
    1186:	0f 92       	push	r0
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	9b 83       	std	Y+3, r25	; 0x03
    118e:	8a 83       	std	Y+2, r24	; 0x02
	BYTE i=0;
    1190:	19 82       	std	Y+1, r1	; 0x01
	
	while (string[i]){
    1192:	0e c0       	rjmp	.+28     	; 0x11b0 <_Z9PrintBonePc+0x30>
		PutUartChBone(string[i++]);
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	88 2f       	mov	r24, r24
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	2a 81       	ldd	r18, Y+2	; 0x02
    119c:	3b 81       	ldd	r19, Y+3	; 0x03
    119e:	82 0f       	add	r24, r18
    11a0:	93 1f       	adc	r25, r19
    11a2:	fc 01       	movw	r30, r24
    11a4:	80 81       	ld	r24, Z
    11a6:	99 81       	ldd	r25, Y+1	; 0x01
    11a8:	9f 5f       	subi	r25, 0xFF	; 255
    11aa:	99 83       	std	Y+1, r25	; 0x01
    11ac:	0e 94 a2 08 	call	0x1144	; 0x1144 <_Z13PutUartChBonec>
}
/*************************************************************************************************************/
void PrintBone(char string[]){
	BYTE i=0;
	
	while (string[i]){
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	88 2f       	mov	r24, r24
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	2a 81       	ldd	r18, Y+2	; 0x02
    11b8:	3b 81       	ldd	r19, Y+3	; 0x03
    11ba:	82 0f       	add	r24, r18
    11bc:	93 1f       	adc	r25, r19
    11be:	fc 01       	movw	r30, r24
    11c0:	90 81       	ld	r25, Z
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	99 23       	and	r25, r25
    11c6:	09 f4       	brne	.+2      	; 0x11ca <_Z9PrintBonePc+0x4a>
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	88 23       	and	r24, r24
    11cc:	19 f7       	brne	.-58     	; 0x1194 <_Z9PrintBonePc+0x14>
		PutUartChBone(string[i++]);
	}
}
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	08 95       	ret

000011da <_Z13PutUartChGAVRc>:
/*************************************************************************************************************/

void PutUartChGAVR(char ch){
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	0f 92       	push	r0
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSR1A & (1 << UDRE1)));
    11e6:	00 00       	nop
    11e8:	88 ec       	ldi	r24, 0xC8	; 200
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	fc 01       	movw	r30, r24
    11ee:	80 81       	ld	r24, Z
    11f0:	88 2f       	mov	r24, r24
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	80 72       	andi	r24, 0x20	; 32
    11f6:	90 70       	andi	r25, 0x00	; 0
    11f8:	21 e0       	ldi	r18, 0x01	; 1
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	09 f0       	breq	.+2      	; 0x1200 <_Z13PutUartChGAVRc+0x26>
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	22 23       	and	r18, r18
    1202:	91 f7       	brne	.-28     	; 0x11e8 <_Z13PutUartChGAVRc+0xe>
	UDR1=ch;
    1204:	8e ec       	ldi	r24, 0xCE	; 206
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	29 81       	ldd	r18, Y+1	; 0x01
    120a:	fc 01       	movw	r30, r24
    120c:	20 83       	st	Z, r18
}
    120e:	0f 90       	pop	r0
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	08 95       	ret

00001216 <_Z9PrintGAVRPc>:
/*************************************************************************************************************/

void PrintGAVR(char string[]){
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	00 d0       	rcall	.+0      	; 0x121c <_Z9PrintGAVRPc+0x6>
    121c:	0f 92       	push	r0
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	9b 83       	std	Y+3, r25	; 0x03
    1224:	8a 83       	std	Y+2, r24	; 0x02
	BYTE i=0;
    1226:	19 82       	std	Y+1, r1	; 0x01
	while (string[i]){
    1228:	0e c0       	rjmp	.+28     	; 0x1246 <_Z9PrintGAVRPc+0x30>
		PutUartChGAVR(string[i++]);
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	88 2f       	mov	r24, r24
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	2a 81       	ldd	r18, Y+2	; 0x02
    1232:	3b 81       	ldd	r19, Y+3	; 0x03
    1234:	82 0f       	add	r24, r18
    1236:	93 1f       	adc	r25, r19
    1238:	fc 01       	movw	r30, r24
    123a:	80 81       	ld	r24, Z
    123c:	99 81       	ldd	r25, Y+1	; 0x01
    123e:	9f 5f       	subi	r25, 0xFF	; 255
    1240:	99 83       	std	Y+1, r25	; 0x01
    1242:	0e 94 ed 08 	call	0x11da	; 0x11da <_Z13PutUartChGAVRc>
}
/*************************************************************************************************************/

void PrintGAVR(char string[]){
	BYTE i=0;
	while (string[i]){
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	88 2f       	mov	r24, r24
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	2a 81       	ldd	r18, Y+2	; 0x02
    124e:	3b 81       	ldd	r19, Y+3	; 0x03
    1250:	82 0f       	add	r24, r18
    1252:	93 1f       	adc	r25, r19
    1254:	fc 01       	movw	r30, r24
    1256:	90 81       	ld	r25, Z
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	99 23       	and	r25, r25
    125c:	09 f4       	brne	.+2      	; 0x1260 <_Z9PrintGAVRPc+0x4a>
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	88 23       	and	r24, r24
    1262:	19 f7       	brne	.-58     	; 0x122a <_Z9PrintGAVRPc+0x14>
		PutUartChGAVR(string[i++]);
	}
}
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	08 95       	ret

00001270 <_Z8sendGAVRv>:
/*************************************************************************************************************/

void sendGAVR(){
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	ca 55       	subi	r28, 0x5A	; 90
    127a:	d0 40       	sbci	r29, 0x00	; 0
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
	//Declare variables to be used.
	volatile static unsigned int state=0;
	volatile BOOL noCarriage=fTrue;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	8a 87       	std	Y+10, r24	; 0x0a
	char recChar, recString[40], sentString[40];
	unsigned int strLoc=0;
    128a:	1a 82       	std	Y+2, r1	; 0x02
    128c:	19 82       	std	Y+1, r1	; 0x01
	
	//Used for shutdown connection logic if there was a timeout in sending or receiving
	BOOL flagTimeout=fFalse;
    128e:	1b 82       	std	Y+3, r1	; 0x03
	
	//Transmission protocol
	while (flagSendingGAVR && !flagTimeout){
    1290:	3c c2       	rjmp	.+1144   	; 0x170a <_Z8sendGAVRv+0x49a>
		/* State 5: Successful transmission and reception. Kill sending flag, reset state, exit.					 */
		/* State 6: ACKBAD received, check to see if we have an invalid date/time in our clock or it was just noisy  */
		/*			and had error in transmission/reception. If valid, go to waiting state. Else exit and set flag.	 */
		/* State 7: Got the wrong ack for something, set a flag to let the WAVR do its thing then try again.		 */
		/*************************************************************************************************************/
		switch (state){
    1292:	80 91 ea 01 	lds	r24, 0x01EA
    1296:	90 91 eb 01 	lds	r25, 0x01EB
    129a:	83 30       	cpi	r24, 0x03	; 3
    129c:	91 05       	cpc	r25, r1
    129e:	09 f4       	brne	.+2      	; 0x12a2 <_Z8sendGAVRv+0x32>
    12a0:	3f c1       	rjmp	.+638    	; 0x1520 <_Z8sendGAVRv+0x2b0>
    12a2:	84 30       	cpi	r24, 0x04	; 4
    12a4:	91 05       	cpc	r25, r1
    12a6:	48 f4       	brcc	.+18     	; 0x12ba <_Z8sendGAVRv+0x4a>
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	91 05       	cpc	r25, r1
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <_Z8sendGAVRv+0x40>
    12ae:	97 c0       	rjmp	.+302    	; 0x13de <_Z8sendGAVRv+0x16e>
    12b0:	82 30       	cpi	r24, 0x02	; 2
    12b2:	91 05       	cpc	r25, r1
    12b4:	08 f0       	brcs	.+2      	; 0x12b8 <_Z8sendGAVRv+0x48>
    12b6:	a1 c0       	rjmp	.+322    	; 0x13fa <_Z8sendGAVRv+0x18a>
    12b8:	11 c0       	rjmp	.+34     	; 0x12dc <_Z8sendGAVRv+0x6c>
    12ba:	85 30       	cpi	r24, 0x05	; 5
    12bc:	91 05       	cpc	r25, r1
    12be:	09 f4       	brne	.+2      	; 0x12c2 <_Z8sendGAVRv+0x52>
    12c0:	ed c1       	rjmp	.+986    	; 0x169c <_Z8sendGAVRv+0x42c>
    12c2:	85 30       	cpi	r24, 0x05	; 5
    12c4:	91 05       	cpc	r25, r1
    12c6:	08 f4       	brcc	.+2      	; 0x12ca <_Z8sendGAVRv+0x5a>
    12c8:	de c1       	rjmp	.+956    	; 0x1686 <_Z8sendGAVRv+0x416>
    12ca:	86 30       	cpi	r24, 0x06	; 6
    12cc:	91 05       	cpc	r25, r1
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <_Z8sendGAVRv+0x62>
    12d0:	ef c1       	rjmp	.+990    	; 0x16b0 <_Z8sendGAVRv+0x440>
    12d2:	87 30       	cpi	r24, 0x07	; 7
    12d4:	91 05       	cpc	r25, r1
    12d6:	09 f4       	brne	.+2      	; 0x12da <_Z8sendGAVRv+0x6a>
    12d8:	04 c2       	rjmp	.+1032   	; 0x16e2 <_Z8sendGAVRv+0x472>
    12da:	0e c2       	rjmp	.+1052   	; 0x16f8 <_Z8sendGAVRv+0x488>
			case 0: {
				//Raise interrupts to GAVR for three ish clock cycles.
				prtGAVRINT |= (1 << bnGAVRINT);
    12dc:	85 e2       	ldi	r24, 0x25	; 37
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	25 e2       	ldi	r18, 0x25	; 37
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	f9 01       	movw	r30, r18
    12e6:	20 81       	ld	r18, Z
    12e8:	28 60       	ori	r18, 0x08	; 8
    12ea:	fc 01       	movw	r30, r24
    12ec:	20 83       	st	Z, r18
				for (int i=0; i<2; i++){asm volatile("nop");}
    12ee:	1d 82       	std	Y+5, r1	; 0x05
    12f0:	1c 82       	std	Y+4, r1	; 0x04
    12f2:	06 c0       	rjmp	.+12     	; 0x1300 <_Z8sendGAVRv+0x90>
    12f4:	00 00       	nop
    12f6:	8c 81       	ldd	r24, Y+4	; 0x04
    12f8:	9d 81       	ldd	r25, Y+5	; 0x05
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	9d 83       	std	Y+5, r25	; 0x05
    12fe:	8c 83       	std	Y+4, r24	; 0x04
    1300:	21 e0       	ldi	r18, 0x01	; 1
    1302:	8c 81       	ldd	r24, Y+4	; 0x04
    1304:	9d 81       	ldd	r25, Y+5	; 0x05
    1306:	82 30       	cpi	r24, 0x02	; 2
    1308:	91 05       	cpc	r25, r1
    130a:	0c f0       	brlt	.+2      	; 0x130e <_Z8sendGAVRv+0x9e>
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	22 23       	and	r18, r18
    1310:	89 f7       	brne	.-30     	; 0x12f4 <_Z8sendGAVRv+0x84>
				prtGAVRINT &= ~(1 << bnGAVRINT);
    1312:	85 e2       	ldi	r24, 0x25	; 37
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	25 e2       	ldi	r18, 0x25	; 37
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	f9 01       	movw	r30, r18
    131c:	20 81       	ld	r18, Z
    131e:	27 7f       	andi	r18, 0xF7	; 247
    1320:	fc 01       	movw	r30, r24
    1322:	20 83       	st	Z, r18
				state=1;
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	90 93 eb 01 	sts	0x01EB, r25
    132c:	80 93 ea 01 	sts	0x01EA, r24
				break;
    1330:	ec c1       	rjmp	.+984    	; 0x170a <_Z8sendGAVRv+0x49a>
			}//end case 0
			case 1: {
				while (noCarriage && flagSendingGAVR){
					while (!(UCSR1A & (1 << RXC1)) && flagSendingGAVR);
    1332:	00 00       	nop
    1334:	88 ec       	ldi	r24, 0xC8	; 200
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	fc 01       	movw	r30, r24
    133a:	80 81       	ld	r24, Z
    133c:	88 23       	and	r24, r24
    133e:	34 f0       	brlt	.+12     	; 0x134c <_Z8sendGAVRv+0xdc>
    1340:	80 91 d4 01 	lds	r24, 0x01D4
    1344:	88 23       	and	r24, r24
    1346:	11 f0       	breq	.+4      	; 0x134c <_Z8sendGAVRv+0xdc>
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	01 c0       	rjmp	.+2      	; 0x134e <_Z8sendGAVRv+0xde>
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	88 23       	and	r24, r24
    1350:	89 f7       	brne	.-30     	; 0x1334 <_Z8sendGAVRv+0xc4>
					if (!flagSendingGAVR){state=0; flagTimeout=fTrue; break;}
    1352:	80 91 d4 01 	lds	r24, 0x01D4
    1356:	88 23       	and	r24, r24
    1358:	41 f4       	brne	.+16     	; 0x136a <_Z8sendGAVRv+0xfa>
    135a:	10 92 eb 01 	sts	0x01EB, r1
    135e:	10 92 ea 01 	sts	0x01EA, r1
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	8b 83       	std	Y+3, r24	; 0x03
    1366:	00 00       	nop
							//recString[strLoc++] = recChar;
							if (strLoc >= 39){strLoc = 0; noCarriage=fFalse; state=7;}
						}//end if-else
					}//end if-else	
				}//end while
				break;
    1368:	d0 c1       	rjmp	.+928    	; 0x170a <_Z8sendGAVRv+0x49a>
			case 1: {
				while (noCarriage && flagSendingGAVR){
					while (!(UCSR1A & (1 << RXC1)) && flagSendingGAVR);
					if (!flagSendingGAVR){state=0; flagTimeout=fTrue; break;}
					else {
						recChar=UDR1;
    136a:	8e ec       	ldi	r24, 0xCE	; 206
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	fc 01       	movw	r30, r24
    1370:	80 81       	ld	r24, Z
    1372:	88 87       	std	Y+8, r24	; 0x08
						recString[strLoc++]=recChar;
    1374:	9e 01       	movw	r18, r28
    1376:	2d 5c       	subi	r18, 0xCD	; 205
    1378:	3f 4f       	sbci	r19, 0xFF	; 255
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	9a 81       	ldd	r25, Y+2	; 0x02
    137e:	82 0f       	add	r24, r18
    1380:	93 1f       	adc	r25, r19
    1382:	28 85       	ldd	r18, Y+8	; 0x08
    1384:	fc 01       	movw	r30, r24
    1386:	20 83       	st	Z, r18
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	9a 81       	ldd	r25, Y+2	; 0x02
    138c:	01 96       	adiw	r24, 0x01	; 1
    138e:	9a 83       	std	Y+2, r25	; 0x02
    1390:	89 83       	std	Y+1, r24	; 0x01
						if (recChar=='.'){recString[strLoc++]='\0'; state=2;}
    1392:	88 85       	ldd	r24, Y+8	; 0x08
    1394:	8e 32       	cpi	r24, 0x2E	; 46
    1396:	a9 f4       	brne	.+42     	; 0x13c2 <_Z8sendGAVRv+0x152>
    1398:	9e 01       	movw	r18, r28
    139a:	2d 5c       	subi	r18, 0xCD	; 205
    139c:	3f 4f       	sbci	r19, 0xFF	; 255
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	9a 81       	ldd	r25, Y+2	; 0x02
    13a2:	82 0f       	add	r24, r18
    13a4:	93 1f       	adc	r25, r19
    13a6:	fc 01       	movw	r30, r24
    13a8:	10 82       	st	Z, r1
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	9a 81       	ldd	r25, Y+2	; 0x02
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	9a 83       	std	Y+2, r25	; 0x02
    13b2:	89 83       	std	Y+1, r24	; 0x01
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	90 93 eb 01 	sts	0x01EB, r25
    13bc:	80 93 ea 01 	sts	0x01EA, r24
    13c0:	0e c0       	rjmp	.+28     	; 0x13de <_Z8sendGAVRv+0x16e>
						else {
							//recString[strLoc++] = recChar;
							if (strLoc >= 39){strLoc = 0; noCarriage=fFalse; state=7;}
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	9a 81       	ldd	r25, Y+2	; 0x02
    13c6:	87 32       	cpi	r24, 0x27	; 39
    13c8:	91 05       	cpc	r25, r1
    13ca:	48 f0       	brcs	.+18     	; 0x13de <_Z8sendGAVRv+0x16e>
    13cc:	1a 82       	std	Y+2, r1	; 0x02
    13ce:	19 82       	std	Y+1, r1	; 0x01
    13d0:	1a 86       	std	Y+10, r1	; 0x0a
    13d2:	87 e0       	ldi	r24, 0x07	; 7
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	90 93 eb 01 	sts	0x01EB, r25
    13da:	80 93 ea 01 	sts	0x01EA, r24
				prtGAVRINT &= ~(1 << bnGAVRINT);
				state=1;
				break;
			}//end case 0
			case 1: {
				while (noCarriage && flagSendingGAVR){
    13de:	8a 85       	ldd	r24, Y+10	; 0x0a
    13e0:	88 23       	and	r24, r24
    13e2:	31 f0       	breq	.+12     	; 0x13f0 <_Z8sendGAVRv+0x180>
    13e4:	80 91 d4 01 	lds	r24, 0x01D4
    13e8:	88 23       	and	r24, r24
    13ea:	11 f0       	breq	.+4      	; 0x13f0 <_Z8sendGAVRv+0x180>
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	01 c0       	rjmp	.+2      	; 0x13f2 <_Z8sendGAVRv+0x182>
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	88 23       	and	r24, r24
    13f4:	09 f0       	breq	.+2      	; 0x13f8 <_Z8sendGAVRv+0x188>
    13f6:	9d cf       	rjmp	.-198    	; 0x1332 <_Z8sendGAVRv+0xc2>
							//recString[strLoc++] = recChar;
							if (strLoc >= 39){strLoc = 0; noCarriage=fFalse; state=7;}
						}//end if-else
					}//end if-else	
				}//end while
				break;
    13f8:	88 c1       	rjmp	.+784    	; 0x170a <_Z8sendGAVRv+0x49a>
				}//end case 1
			case 2: {
				if (!strcmp(recString,"ACKW.")){state=3;}
    13fa:	ce 01       	movw	r24, r28
    13fc:	c3 96       	adiw	r24, 0x33	; 51
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	31 e0       	ldi	r19, 0x01	; 1
    1402:	b9 01       	movw	r22, r18
    1404:	0e 94 a1 18 	call	0x3142	; 0x3142 <strcmp>
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	39 f4       	brne	.+14     	; 0x141a <_Z8sendGAVRv+0x1aa>
    140c:	83 e0       	ldi	r24, 0x03	; 3
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	90 93 eb 01 	sts	0x01EB, r25
    1414:	80 93 ea 01 	sts	0x01EA, r24
				else if (!strcmp(recString,"ACKBAD.")){state=6;}
				//send string case.
				else if (updatingGAVR && !strcmp(recString,sentString)){state=5;}		//they match, successful send.
				else if (updatingGAVR && strcmp(recString,sentString) && strcmp(recString,"ACKBAD.")){state=7;}	//string isnt the same as ACKBAD or what we sent.
				else{state=7;} //invalid ack
				break;
    1418:	78 c1       	rjmp	.+752    	; 0x170a <_Z8sendGAVRv+0x49a>
				}//end while
				break;
				}//end case 1
			case 2: {
				if (!strcmp(recString,"ACKW.")){state=3;}
				else if (!strcmp(recString,"ACKGD.")){state=4;}
    141a:	ce 01       	movw	r24, r28
    141c:	c3 96       	adiw	r24, 0x33	; 51
    141e:	26 e0       	ldi	r18, 0x06	; 6
    1420:	31 e0       	ldi	r19, 0x01	; 1
    1422:	b9 01       	movw	r22, r18
    1424:	0e 94 a1 18 	call	0x3142	; 0x3142 <strcmp>
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	39 f4       	brne	.+14     	; 0x143a <_Z8sendGAVRv+0x1ca>
    142c:	84 e0       	ldi	r24, 0x04	; 4
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	90 93 eb 01 	sts	0x01EB, r25
    1434:	80 93 ea 01 	sts	0x01EA, r24
				else if (!strcmp(recString,"ACKBAD.")){state=6;}
				//send string case.
				else if (updatingGAVR && !strcmp(recString,sentString)){state=5;}		//they match, successful send.
				else if (updatingGAVR && strcmp(recString,sentString) && strcmp(recString,"ACKBAD.")){state=7;}	//string isnt the same as ACKBAD or what we sent.
				else{state=7;} //invalid ack
				break;
    1438:	68 c1       	rjmp	.+720    	; 0x170a <_Z8sendGAVRv+0x49a>
				break;
				}//end case 1
			case 2: {
				if (!strcmp(recString,"ACKW.")){state=3;}
				else if (!strcmp(recString,"ACKGD.")){state=4;}
				else if (!strcmp(recString,"ACKGT.")){state=4;}
    143a:	ce 01       	movw	r24, r28
    143c:	c3 96       	adiw	r24, 0x33	; 51
    143e:	2d e0       	ldi	r18, 0x0D	; 13
    1440:	31 e0       	ldi	r19, 0x01	; 1
    1442:	b9 01       	movw	r22, r18
    1444:	0e 94 a1 18 	call	0x3142	; 0x3142 <strcmp>
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	39 f4       	brne	.+14     	; 0x145a <_Z8sendGAVRv+0x1ea>
    144c:	84 e0       	ldi	r24, 0x04	; 4
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	90 93 eb 01 	sts	0x01EB, r25
    1454:	80 93 ea 01 	sts	0x01EA, r24
				else if (!strcmp(recString,"ACKBAD.")){state=6;}
				//send string case.
				else if (updatingGAVR && !strcmp(recString,sentString)){state=5;}		//they match, successful send.
				else if (updatingGAVR && strcmp(recString,sentString) && strcmp(recString,"ACKBAD.")){state=7;}	//string isnt the same as ACKBAD or what we sent.
				else{state=7;} //invalid ack
				break;
    1458:	58 c1       	rjmp	.+688    	; 0x170a <_Z8sendGAVRv+0x49a>
				}//end case 1
			case 2: {
				if (!strcmp(recString,"ACKW.")){state=3;}
				else if (!strcmp(recString,"ACKGD.")){state=4;}
				else if (!strcmp(recString,"ACKGT.")){state=4;}
				else if (!strcmp(recString,"ACKGB.")){state=4;}
    145a:	ce 01       	movw	r24, r28
    145c:	c3 96       	adiw	r24, 0x33	; 51
    145e:	24 e1       	ldi	r18, 0x14	; 20
    1460:	31 e0       	ldi	r19, 0x01	; 1
    1462:	b9 01       	movw	r22, r18
    1464:	0e 94 a1 18 	call	0x3142	; 0x3142 <strcmp>
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	39 f4       	brne	.+14     	; 0x147a <_Z8sendGAVRv+0x20a>
    146c:	84 e0       	ldi	r24, 0x04	; 4
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	90 93 eb 01 	sts	0x01EB, r25
    1474:	80 93 ea 01 	sts	0x01EA, r24
				else if (!strcmp(recString,"ACKBAD.")){state=6;}
				//send string case.
				else if (updatingGAVR && !strcmp(recString,sentString)){state=5;}		//they match, successful send.
				else if (updatingGAVR && strcmp(recString,sentString) && strcmp(recString,"ACKBAD.")){state=7;}	//string isnt the same as ACKBAD or what we sent.
				else{state=7;} //invalid ack
				break;
    1478:	48 c1       	rjmp	.+656    	; 0x170a <_Z8sendGAVRv+0x49a>
			case 2: {
				if (!strcmp(recString,"ACKW.")){state=3;}
				else if (!strcmp(recString,"ACKGD.")){state=4;}
				else if (!strcmp(recString,"ACKGT.")){state=4;}
				else if (!strcmp(recString,"ACKGB.")){state=4;}
				else if (!strcmp(recString,"ACKBAD.")){state=6;}
    147a:	ce 01       	movw	r24, r28
    147c:	c3 96       	adiw	r24, 0x33	; 51
    147e:	2b e1       	ldi	r18, 0x1B	; 27
    1480:	31 e0       	ldi	r19, 0x01	; 1
    1482:	b9 01       	movw	r22, r18
    1484:	0e 94 a1 18 	call	0x3142	; 0x3142 <strcmp>
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	39 f4       	brne	.+14     	; 0x149a <_Z8sendGAVRv+0x22a>
    148c:	86 e0       	ldi	r24, 0x06	; 6
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	90 93 eb 01 	sts	0x01EB, r25
    1494:	80 93 ea 01 	sts	0x01EA, r24
				//send string case.
				else if (updatingGAVR && !strcmp(recString,sentString)){state=5;}		//they match, successful send.
				else if (updatingGAVR && strcmp(recString,sentString) && strcmp(recString,"ACKBAD.")){state=7;}	//string isnt the same as ACKBAD or what we sent.
				else{state=7;} //invalid ack
				break;
    1498:	38 c1       	rjmp	.+624    	; 0x170a <_Z8sendGAVRv+0x49a>
				else if (!strcmp(recString,"ACKGD.")){state=4;}
				else if (!strcmp(recString,"ACKGT.")){state=4;}
				else if (!strcmp(recString,"ACKGB.")){state=4;}
				else if (!strcmp(recString,"ACKBAD.")){state=6;}
				//send string case.
				else if (updatingGAVR && !strcmp(recString,sentString)){state=5;}		//they match, successful send.
    149a:	80 91 d3 01 	lds	r24, 0x01D3
    149e:	88 23       	and	r24, r24
    14a0:	21 f4       	brne	.+8      	; 0x14aa <_Z8sendGAVRv+0x23a>
    14a2:	80 91 d2 01 	lds	r24, 0x01D2
    14a6:	88 23       	and	r24, r24
    14a8:	89 f0       	breq	.+34     	; 0x14cc <_Z8sendGAVRv+0x25c>
    14aa:	ce 01       	movw	r24, r28
    14ac:	c3 96       	adiw	r24, 0x33	; 51
    14ae:	9e 01       	movw	r18, r28
    14b0:	25 5f       	subi	r18, 0xF5	; 245
    14b2:	3f 4f       	sbci	r19, 0xFF	; 255
    14b4:	b9 01       	movw	r22, r18
    14b6:	0e 94 a1 18 	call	0x3142	; 0x3142 <strcmp>
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	39 f4       	brne	.+14     	; 0x14cc <_Z8sendGAVRv+0x25c>
    14be:	85 e0       	ldi	r24, 0x05	; 5
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	90 93 eb 01 	sts	0x01EB, r25
    14c6:	80 93 ea 01 	sts	0x01EA, r24
    14ca:	29 c0       	rjmp	.+82     	; 0x151e <_Z8sendGAVRv+0x2ae>
				else if (updatingGAVR && strcmp(recString,sentString) && strcmp(recString,"ACKBAD.")){state=7;}	//string isnt the same as ACKBAD or what we sent.
    14cc:	80 91 d3 01 	lds	r24, 0x01D3
    14d0:	88 23       	and	r24, r24
    14d2:	21 f4       	brne	.+8      	; 0x14dc <_Z8sendGAVRv+0x26c>
    14d4:	80 91 d2 01 	lds	r24, 0x01D2
    14d8:	88 23       	and	r24, r24
    14da:	d1 f0       	breq	.+52     	; 0x1510 <_Z8sendGAVRv+0x2a0>
    14dc:	ce 01       	movw	r24, r28
    14de:	c3 96       	adiw	r24, 0x33	; 51
    14e0:	9e 01       	movw	r18, r28
    14e2:	25 5f       	subi	r18, 0xF5	; 245
    14e4:	3f 4f       	sbci	r19, 0xFF	; 255
    14e6:	b9 01       	movw	r22, r18
    14e8:	0e 94 a1 18 	call	0x3142	; 0x3142 <strcmp>
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	81 f0       	breq	.+32     	; 0x1510 <_Z8sendGAVRv+0x2a0>
    14f0:	ce 01       	movw	r24, r28
    14f2:	c3 96       	adiw	r24, 0x33	; 51
    14f4:	2b e1       	ldi	r18, 0x1B	; 27
    14f6:	31 e0       	ldi	r19, 0x01	; 1
    14f8:	b9 01       	movw	r22, r18
    14fa:	0e 94 a1 18 	call	0x3142	; 0x3142 <strcmp>
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	39 f0       	breq	.+14     	; 0x1510 <_Z8sendGAVRv+0x2a0>
    1502:	87 e0       	ldi	r24, 0x07	; 7
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	90 93 eb 01 	sts	0x01EB, r25
    150a:	80 93 ea 01 	sts	0x01EA, r24
    150e:	07 c0       	rjmp	.+14     	; 0x151e <_Z8sendGAVRv+0x2ae>
				else{state=7;} //invalid ack
    1510:	87 e0       	ldi	r24, 0x07	; 7
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	90 93 eb 01 	sts	0x01EB, r25
    1518:	80 93 ea 01 	sts	0x01EA, r24
				break;
    151c:	f6 c0       	rjmp	.+492    	; 0x170a <_Z8sendGAVRv+0x49a>
    151e:	f5 c0       	rjmp	.+490    	; 0x170a <_Z8sendGAVRv+0x49a>
				}//end case 2
			case 3:{
				if (flagUserDate&&!flagUserTime){
    1520:	80 91 d5 01 	lds	r24, 0x01D5
    1524:	88 23       	and	r24, r24
    1526:	49 f0       	breq	.+18     	; 0x153a <_Z8sendGAVRv+0x2ca>
    1528:	80 91 d6 01 	lds	r24, 0x01D6
    152c:	88 23       	and	r24, r24
    152e:	29 f4       	brne	.+10     	; 0x153a <_Z8sendGAVRv+0x2ca>
					PrintGAVR("SYNGD.");
    1530:	83 e2       	ldi	r24, 0x23	; 35
    1532:	91 e0       	ldi	r25, 0x01	; 1
    1534:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
    1538:	19 c0       	rjmp	.+50     	; 0x156c <_Z8sendGAVRv+0x2fc>
				} else if (!flagUserDate&&flagUserTime){
    153a:	80 91 d5 01 	lds	r24, 0x01D5
    153e:	88 23       	and	r24, r24
    1540:	49 f4       	brne	.+18     	; 0x1554 <_Z8sendGAVRv+0x2e4>
    1542:	80 91 d6 01 	lds	r24, 0x01D6
    1546:	88 23       	and	r24, r24
    1548:	29 f0       	breq	.+10     	; 0x1554 <_Z8sendGAVRv+0x2e4>
					PrintGAVR("SYNGT.");
    154a:	8a e2       	ldi	r24, 0x2A	; 42
    154c:	91 e0       	ldi	r25, 0x01	; 1
    154e:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
    1552:	0c c0       	rjmp	.+24     	; 0x156c <_Z8sendGAVRv+0x2fc>
				} else if (flagUserTime&&flagUserDate){
    1554:	80 91 d6 01 	lds	r24, 0x01D6
    1558:	88 23       	and	r24, r24
    155a:	41 f0       	breq	.+16     	; 0x156c <_Z8sendGAVRv+0x2fc>
    155c:	80 91 d5 01 	lds	r24, 0x01D5
    1560:	88 23       	and	r24, r24
    1562:	21 f0       	breq	.+8      	; 0x156c <_Z8sendGAVRv+0x2fc>
					PrintGAVR("SYNGB.");
    1564:	81 e3       	ldi	r24, 0x31	; 49
    1566:	91 e0       	ldi	r25, 0x01	; 1
    1568:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
				} else;
				
				//If we are updating the gavr, send the time and date together regardless. preface with SYN
				if (updatingGAVR && !(flagUserDate || flagUserTime)){
    156c:	80 91 d3 01 	lds	r24, 0x01D3
    1570:	88 23       	and	r24, r24
    1572:	29 f4       	brne	.+10     	; 0x157e <_Z8sendGAVRv+0x30e>
    1574:	80 91 d2 01 	lds	r24, 0x01D2
    1578:	88 23       	and	r24, r24
    157a:	09 f4       	brne	.+2      	; 0x157e <_Z8sendGAVRv+0x30e>
    157c:	5d c0       	rjmp	.+186    	; 0x1638 <_Z8sendGAVRv+0x3c8>
    157e:	80 91 d5 01 	lds	r24, 0x01D5
    1582:	88 23       	and	r24, r24
    1584:	09 f0       	breq	.+2      	; 0x1588 <_Z8sendGAVRv+0x318>
    1586:	58 c0       	rjmp	.+176    	; 0x1638 <_Z8sendGAVRv+0x3c8>
    1588:	80 91 d6 01 	lds	r24, 0x01D6
    158c:	88 23       	and	r24, r24
    158e:	09 f0       	breq	.+2      	; 0x1592 <_Z8sendGAVRv+0x322>
    1590:	53 c0       	rjmp	.+166    	; 0x1638 <_Z8sendGAVRv+0x3c8>
					strcpy(sentString,"SYN");			//this is a syn, not ack to save logic in GAVR code. Can change if we want.
    1592:	9e 01       	movw	r18, r28
    1594:	25 5f       	subi	r18, 0xF5	; 245
    1596:	3f 4f       	sbci	r19, 0xFF	; 255
    1598:	83 e5       	ldi	r24, 0x53	; 83
    159a:	99 e5       	ldi	r25, 0x59	; 89
    159c:	ae e4       	ldi	r26, 0x4E	; 78
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	f9 01       	movw	r30, r18
    15a2:	80 83       	st	Z, r24
    15a4:	91 83       	std	Z+1, r25	; 0x01
    15a6:	a2 83       	std	Z+2, r26	; 0x02
    15a8:	b3 83       	std	Z+3, r27	; 0x03
					strcat(sentString,currentTime.getTime());
    15aa:	86 ea       	ldi	r24, 0xA6	; 166
    15ac:	91 e0       	ldi	r25, 0x01	; 1
    15ae:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN6myTime7getTimeEv>
    15b2:	9c 01       	movw	r18, r24
    15b4:	ce 01       	movw	r24, r28
    15b6:	0b 96       	adiw	r24, 0x0b	; 11
    15b8:	b9 01       	movw	r22, r18
    15ba:	0e 94 96 18 	call	0x312c	; 0x312c <strcat>
					strcat(sentString,"/");	//add delimiter.
    15be:	ce 01       	movw	r24, r28
    15c0:	0b 96       	adiw	r24, 0x0b	; 11
    15c2:	9c 01       	movw	r18, r24
    15c4:	f9 01       	movw	r30, r18
    15c6:	01 90       	ld	r0, Z+
    15c8:	00 20       	and	r0, r0
    15ca:	e9 f7       	brne	.-6      	; 0x15c6 <_Z8sendGAVRv+0x356>
    15cc:	cf 01       	movw	r24, r30
    15ce:	01 97       	sbiw	r24, 0x01	; 1
    15d0:	82 1b       	sub	r24, r18
    15d2:	93 0b       	sbc	r25, r19
    15d4:	9e 01       	movw	r18, r28
    15d6:	25 5f       	subi	r18, 0xF5	; 245
    15d8:	3f 4f       	sbci	r19, 0xFF	; 255
    15da:	82 0f       	add	r24, r18
    15dc:	93 1f       	adc	r25, r19
    15de:	2f e2       	ldi	r18, 0x2F	; 47
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	fc 01       	movw	r30, r24
    15e4:	31 83       	std	Z+1, r19	; 0x01
    15e6:	20 83       	st	Z, r18
					strcat(sentString,currentTime.getDate());
    15e8:	86 ea       	ldi	r24, 0xA6	; 166
    15ea:	91 e0       	ldi	r25, 0x01	; 1
    15ec:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN6myDate7getDateEv>
    15f0:	9c 01       	movw	r18, r24
    15f2:	ce 01       	movw	r24, r28
    15f4:	0b 96       	adiw	r24, 0x0b	; 11
    15f6:	b9 01       	movw	r22, r18
    15f8:	0e 94 96 18 	call	0x312c	; 0x312c <strcat>
					strcat(sentString,".\0");
    15fc:	ce 01       	movw	r24, r28
    15fe:	0b 96       	adiw	r24, 0x0b	; 11
    1600:	9c 01       	movw	r18, r24
    1602:	f9 01       	movw	r30, r18
    1604:	01 90       	ld	r0, Z+
    1606:	00 20       	and	r0, r0
    1608:	e9 f7       	brne	.-6      	; 0x1604 <_Z8sendGAVRv+0x394>
    160a:	cf 01       	movw	r24, r30
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	82 1b       	sub	r24, r18
    1610:	93 0b       	sbc	r25, r19
    1612:	9e 01       	movw	r18, r28
    1614:	25 5f       	subi	r18, 0xF5	; 245
    1616:	3f 4f       	sbci	r19, 0xFF	; 255
    1618:	82 0f       	add	r24, r18
    161a:	93 1f       	adc	r25, r19
    161c:	2e e2       	ldi	r18, 0x2E	; 46
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	fc 01       	movw	r30, r24
    1622:	31 83       	std	Z+1, r19	; 0x01
    1624:	20 83       	st	Z, r18
					PrintGAVR("SYN");
    1626:	88 e3       	ldi	r24, 0x38	; 56
    1628:	91 e0       	ldi	r25, 0x01	; 1
    162a:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
					printTimeDate(fFalse,fTrue,fTrue);			//date is terminated by a . so don't need to send character
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	61 e0       	ldi	r22, 0x01	; 1
    1632:	41 e0       	ldi	r20, 0x01	; 1
    1634:	0e 94 56 10 	call	0x20ac	; 0x20ac <_Z13printTimeDatehhh>
				}			
				//Reset the recString to receive the next ACK.
				for (int i=0; i<strLoc; i++){
    1638:	1f 82       	std	Y+7, r1	; 0x07
    163a:	1e 82       	std	Y+6, r1	; 0x06
    163c:	0e c0       	rjmp	.+28     	; 0x165a <_Z8sendGAVRv+0x3ea>
					recString[i]=NULL;
    163e:	9e 01       	movw	r18, r28
    1640:	2d 5c       	subi	r18, 0xCD	; 205
    1642:	3f 4f       	sbci	r19, 0xFF	; 255
    1644:	8e 81       	ldd	r24, Y+6	; 0x06
    1646:	9f 81       	ldd	r25, Y+7	; 0x07
    1648:	82 0f       	add	r24, r18
    164a:	93 1f       	adc	r25, r19
    164c:	fc 01       	movw	r30, r24
    164e:	10 82       	st	Z, r1
					strcat(sentString,".\0");
					PrintGAVR("SYN");
					printTimeDate(fFalse,fTrue,fTrue);			//date is terminated by a . so don't need to send character
				}			
				//Reset the recString to receive the next ACK.
				for (int i=0; i<strLoc; i++){
    1650:	8e 81       	ldd	r24, Y+6	; 0x06
    1652:	9f 81       	ldd	r25, Y+7	; 0x07
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	9f 83       	std	Y+7, r25	; 0x07
    1658:	8e 83       	std	Y+6, r24	; 0x06
    165a:	2e 81       	ldd	r18, Y+6	; 0x06
    165c:	3f 81       	ldd	r19, Y+7	; 0x07
    165e:	41 e0       	ldi	r20, 0x01	; 1
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	9a 81       	ldd	r25, Y+2	; 0x02
    1664:	28 17       	cp	r18, r24
    1666:	39 07       	cpc	r19, r25
    1668:	08 f0       	brcs	.+2      	; 0x166c <_Z8sendGAVRv+0x3fc>
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	44 23       	and	r20, r20
    166e:	39 f7       	brne	.-50     	; 0x163e <_Z8sendGAVRv+0x3ce>
					recString[i]=NULL;
				}
				//Reset the carriage feature, string location and go back to the receiving state.
				noCarriage=fTrue;
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	8a 87       	std	Y+10, r24	; 0x0a
				strLoc=0;
    1674:	1a 82       	std	Y+2, r1	; 0x02
    1676:	19 82       	std	Y+1, r1	; 0x01
				state=1;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	90 93 eb 01 	sts	0x01EB, r25
    1680:	80 93 ea 01 	sts	0x01EA, r24
				break;
    1684:	42 c0       	rjmp	.+132    	; 0x170a <_Z8sendGAVRv+0x49a>
				}//end case 3
			case 4:{
				//Successful communication with just flags
				PrintGAVR("SYNDONE.");	//end the communication
    1686:	8c e3       	ldi	r24, 0x3C	; 60
    1688:	91 e0       	ldi	r25, 0x01	; 1
    168a:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
				state=5;
    168e:	85 e0       	ldi	r24, 0x05	; 5
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	90 93 eb 01 	sts	0x01EB, r25
    1696:	80 93 ea 01 	sts	0x01EA, r24
				break;				
    169a:	37 c0       	rjmp	.+110    	; 0x170a <_Z8sendGAVRv+0x49a>
				}//end case 4	
			case 5:{
				//Successful communications overall
				flagSendingGAVR=fFalse;
    169c:	10 92 d4 01 	sts	0x01D4, r1
				flagWaitingToSendGAVR=fFalse;
    16a0:	10 92 d8 01 	sts	0x01D8, r1
				flagTimeout=fFalse;
    16a4:	1b 82       	std	Y+3, r1	; 0x03
				state=0;
    16a6:	10 92 eb 01 	sts	0x01EB, r1
    16aa:	10 92 ea 01 	sts	0x01EA, r1
				break;
    16ae:	2d c0       	rjmp	.+90     	; 0x170a <_Z8sendGAVRv+0x49a>
				}//end case 5
			case 6:{
				//ACKBAD. Check the date and time to see if its okay. IF okay, go to state 7 to set waiting flag. otherwise set invalid time and close through state 5.
				BOOL dateOK = currentTime.checkValidity();
    16b0:	86 ea       	ldi	r24, 0xA6	; 166
    16b2:	91 e0       	ldi	r25, 0x01	; 1
    16b4:	0e 94 c1 06 	call	0xd82	; 0xd82 <_ZN6myTime13checkValidityEv>
    16b8:	89 87       	std	Y+9, r24	; 0x09
				if (dateOK){state=7;}
    16ba:	89 85       	ldd	r24, Y+9	; 0x09
    16bc:	88 23       	and	r24, r24
    16be:	39 f0       	breq	.+14     	; 0x16ce <_Z8sendGAVRv+0x45e>
    16c0:	87 e0       	ldi	r24, 0x07	; 7
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	90 93 eb 01 	sts	0x01EB, r25
    16c8:	80 93 ea 01 	sts	0x01EA, r24
				else {state=5; flagInvalidDateTime=fTrue;}
				break;
    16cc:	1e c0       	rjmp	.+60     	; 0x170a <_Z8sendGAVRv+0x49a>
				}//end case 5
			case 6:{
				//ACKBAD. Check the date and time to see if its okay. IF okay, go to state 7 to set waiting flag. otherwise set invalid time and close through state 5.
				BOOL dateOK = currentTime.checkValidity();
				if (dateOK){state=7;}
				else {state=5; flagInvalidDateTime=fTrue;}
    16ce:	85 e0       	ldi	r24, 0x05	; 5
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	90 93 eb 01 	sts	0x01EB, r25
    16d6:	80 93 ea 01 	sts	0x01EA, r24
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	80 93 d7 01 	sts	0x01D7, r24
				break;
    16e0:	14 c0       	rjmp	.+40     	; 0x170a <_Z8sendGAVRv+0x49a>
				}//end case 6
			case 7:{
				//Got the wrong ACK back, or invalid ACK. Wait for next cycle then resend. Keep all the flags the same
				flagWaitingToSendGAVR=fTrue;
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	80 93 d8 01 	sts	0x01D8, r24
				flagSendingGAVR=fFalse;
    16e8:	10 92 d4 01 	sts	0x01D4, r1
				flagTimeout=fFalse;
    16ec:	1b 82       	std	Y+3, r1	; 0x03
				state=0;
    16ee:	10 92 eb 01 	sts	0x01EB, r1
    16f2:	10 92 ea 01 	sts	0x01EA, r1
				break;
    16f6:	09 c0       	rjmp	.+18     	; 0x170a <_Z8sendGAVRv+0x49a>
				}//end case 7
			default:{state=0; flagSendingGAVR=fFalse; noCarriage=fFalse; flagTimeout=fFalse;break;}
    16f8:	10 92 eb 01 	sts	0x01EB, r1
    16fc:	10 92 ea 01 	sts	0x01EA, r1
    1700:	10 92 d4 01 	sts	0x01D4, r1
    1704:	1a 86       	std	Y+10, r1	; 0x0a
    1706:	1b 82       	std	Y+3, r1	; 0x03
    1708:	00 00       	nop
	
	//Used for shutdown connection logic if there was a timeout in sending or receiving
	BOOL flagTimeout=fFalse;
	
	//Transmission protocol
	while (flagSendingGAVR && !flagTimeout){
    170a:	80 91 d4 01 	lds	r24, 0x01D4
    170e:	88 23       	and	r24, r24
    1710:	29 f0       	breq	.+10     	; 0x171c <_Z8sendGAVRv+0x4ac>
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	88 23       	and	r24, r24
    1716:	11 f4       	brne	.+4      	; 0x171c <_Z8sendGAVRv+0x4ac>
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	01 c0       	rjmp	.+2      	; 0x171e <_Z8sendGAVRv+0x4ae>
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	88 23       	and	r24, r24
    1720:	09 f0       	breq	.+2      	; 0x1724 <_Z8sendGAVRv+0x4b4>
    1722:	b7 cd       	rjmp	.-1170   	; 0x1292 <_Z8sendGAVRv+0x22>
			default:{state=0; flagSendingGAVR=fFalse; noCarriage=fFalse; flagTimeout=fFalse;break;}
		}//end switch
	}//end while
	
	//If there was a timeout and the wiating flag has not been set yet, make sure waiting flag.
	if (noCarriage || flagTimeout){
    1724:	8a 85       	ldd	r24, Y+10	; 0x0a
    1726:	88 23       	and	r24, r24
    1728:	19 f4       	brne	.+6      	; 0x1730 <_Z8sendGAVRv+0x4c0>
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	88 23       	and	r24, r24
    172e:	11 f0       	breq	.+4      	; 0x1734 <_Z8sendGAVRv+0x4c4>
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	01 c0       	rjmp	.+2      	; 0x1736 <_Z8sendGAVRv+0x4c6>
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	88 23       	and	r24, r24
    1738:	19 f0       	breq	.+6      	; 0x1740 <_Z8sendGAVRv+0x4d0>
		flagWaitingToSendGAVR=fTrue;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	80 93 d8 01 	sts	0x01D8, r24
	}
	
	//If we aren't waiting for the next round, don't reset the flags. If we are waiting, just reset the waiting flag. Like a stack popping
	if (!flagWaitingToSendGAVR){
    1740:	80 91 d8 01 	lds	r24, 0x01D8
    1744:	88 23       	and	r24, r24
    1746:	49 f4       	brne	.+18     	; 0x175a <_Z8sendGAVRv+0x4ea>
		flagUserDate=fFalse;
    1748:	10 92 d5 01 	sts	0x01D5, r1
		flagUserTime=fFalse;
    174c:	10 92 d6 01 	sts	0x01D6, r1
		flagUpdateGAVRDate=fFalse;
    1750:	10 92 d3 01 	sts	0x01D3, r1
		flagUpdateGAVRTime=fFalse;		
    1754:	10 92 d2 01 	sts	0x01D2, r1
    1758:	02 c0       	rjmp	.+4      	; 0x175e <_Z8sendGAVRv+0x4ee>
	} else {flagWaitingToSendGAVR=fFalse;}
    175a:	10 92 d8 01 	sts	0x01D8, r1
}//end function 	
    175e:	c6 5a       	subi	r28, 0xA6	; 166
    1760:	df 4f       	sbci	r29, 0xFF	; 255
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	f8 94       	cli
    1766:	de bf       	out	0x3e, r29	; 62
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	cd bf       	out	0x3d, r28	; 61
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	08 95       	ret

00001772 <_Z11ReceiveBonev>:
	
/*************************************************************************************************************/
void ReceiveBone(){
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	a7 97       	sbiw	r28, 0x27	; 39
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	de bf       	out	0x3e, r29	; 62
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	cd bf       	out	0x3d, r28	; 61
	volatile static unsigned int state=0;
	char recChar, recString[20];
	volatile unsigned int strLoc=0;
    1786:	19 8e       	std	Y+25, r1	; 0x19
    1788:	18 8e       	std	Y+24, r1	; 0x18
	BOOL noCarriage=fTrue;
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	89 83       	std	Y+1, r24	; 0x01
	
	while (flagReceivingBone){
    178e:	1b c2       	rjmp	.+1078   	; 0x1bc6 <_Z11ReceiveBonev+0x454>
			/* State 4: ACKBAD, string it sent was not valid. Reply and exit loop.															*/
			/* State 5: ACKERROR, invalid string or overflow. Say error then exit.															*/
			/* State 6: Graceful exit. Exit from a command like adc or temp.																*/
			/********************************************************************************************************************************/
			
			switch(state){
    1790:	80 91 e8 01 	lds	r24, 0x01E8
    1794:	90 91 e9 01 	lds	r25, 0x01E9
    1798:	83 30       	cpi	r24, 0x03	; 3
    179a:	91 05       	cpc	r25, r1
    179c:	09 f4       	brne	.+2      	; 0x17a0 <_Z11ReceiveBonev+0x2e>
    179e:	df c1       	rjmp	.+958    	; 0x1b5e <_Z11ReceiveBonev+0x3ec>
    17a0:	84 30       	cpi	r24, 0x04	; 4
    17a2:	91 05       	cpc	r25, r1
    17a4:	48 f4       	brcc	.+18     	; 0x17b8 <_Z11ReceiveBonev+0x46>
    17a6:	81 30       	cpi	r24, 0x01	; 1
    17a8:	91 05       	cpc	r25, r1
    17aa:	09 f4       	brne	.+2      	; 0x17ae <_Z11ReceiveBonev+0x3c>
    17ac:	87 c0       	rjmp	.+270    	; 0x18bc <_Z11ReceiveBonev+0x14a>
    17ae:	82 30       	cpi	r24, 0x02	; 2
    17b0:	91 05       	cpc	r25, r1
    17b2:	08 f0       	brcs	.+2      	; 0x17b6 <_Z11ReceiveBonev+0x44>
    17b4:	91 c0       	rjmp	.+290    	; 0x18d8 <_Z11ReceiveBonev+0x166>
    17b6:	0d c0       	rjmp	.+26     	; 0x17d2 <_Z11ReceiveBonev+0x60>
    17b8:	85 30       	cpi	r24, 0x05	; 5
    17ba:	91 05       	cpc	r25, r1
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <_Z11ReceiveBonev+0x4e>
    17be:	e9 c1       	rjmp	.+978    	; 0x1b92 <_Z11ReceiveBonev+0x420>
    17c0:	85 30       	cpi	r24, 0x05	; 5
    17c2:	91 05       	cpc	r25, r1
    17c4:	08 f4       	brcc	.+2      	; 0x17c8 <_Z11ReceiveBonev+0x56>
    17c6:	da c1       	rjmp	.+948    	; 0x1b7c <_Z11ReceiveBonev+0x40a>
    17c8:	86 30       	cpi	r24, 0x06	; 6
    17ca:	91 05       	cpc	r25, r1
    17cc:	09 f4       	brne	.+2      	; 0x17d0 <_Z11ReceiveBonev+0x5e>
    17ce:	ec c1       	rjmp	.+984    	; 0x1ba8 <_Z11ReceiveBonev+0x436>
    17d0:	f2 c1       	rjmp	.+996    	; 0x1bb6 <_Z11ReceiveBonev+0x444>
				case 0:{
					strLoc=0;
    17d2:	19 8e       	std	Y+25, r1	; 0x19
    17d4:	18 8e       	std	Y+24, r1	; 0x18
					recChar = UDR0;
    17d6:	86 ec       	ldi	r24, 0xC6	; 198
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	fc 01       	movw	r30, r24
    17dc:	80 81       	ld	r24, Z
    17de:	8a 83       	std	Y+2, r24	; 0x02
					if (recChar=='.'){
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	8e 32       	cpi	r24, 0x2E	; 46
    17e4:	39 f4       	brne	.+14     	; 0x17f4 <_Z11ReceiveBonev+0x82>
						state=5;
    17e6:	85 e0       	ldi	r24, 0x05	; 5
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	90 93 e9 01 	sts	0x01E9, r25
    17ee:	80 93 e8 01 	sts	0x01E8, r24
					} else  {recString[strLoc++]=recChar; state=1;}	
					break;				
    17f2:	e9 c1       	rjmp	.+978    	; 0x1bc6 <_Z11ReceiveBonev+0x454>
				case 0:{
					strLoc=0;
					recChar = UDR0;
					if (recChar=='.'){
						state=5;
					} else  {recString[strLoc++]=recChar; state=1;}	
    17f4:	88 8d       	ldd	r24, Y+24	; 0x18
    17f6:	99 8d       	ldd	r25, Y+25	; 0x19
    17f8:	9e 01       	movw	r18, r28
    17fa:	2c 5f       	subi	r18, 0xFC	; 252
    17fc:	3f 4f       	sbci	r19, 0xFF	; 255
    17fe:	28 0f       	add	r18, r24
    1800:	39 1f       	adc	r19, r25
    1802:	4a 81       	ldd	r20, Y+2	; 0x02
    1804:	f9 01       	movw	r30, r18
    1806:	40 83       	st	Z, r20
    1808:	01 96       	adiw	r24, 0x01	; 1
    180a:	99 8f       	std	Y+25, r25	; 0x19
    180c:	88 8f       	std	Y+24, r24	; 0x18
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	90 93 e9 01 	sts	0x01E9, r25
    1816:	80 93 e8 01 	sts	0x01E8, r24
					break;				
    181a:	d5 c1       	rjmp	.+938    	; 0x1bc6 <_Z11ReceiveBonev+0x454>
					}//end case 0
				case 1:{
					while (noCarriage && flagReceivingBone){	//while there isn't a timeout and no carry
						while (!(UCSR1A & (1 << RXC0)) && flagReceivingBone);		//get the next character
    181c:	00 00       	nop
    181e:	88 ec       	ldi	r24, 0xC8	; 200
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	fc 01       	movw	r30, r24
    1824:	80 81       	ld	r24, Z
    1826:	88 23       	and	r24, r24
    1828:	34 f0       	brlt	.+12     	; 0x1836 <_Z11ReceiveBonev+0xc4>
    182a:	80 91 cf 01 	lds	r24, 0x01CF
    182e:	88 23       	and	r24, r24
    1830:	11 f0       	breq	.+4      	; 0x1836 <_Z11ReceiveBonev+0xc4>
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	01 c0       	rjmp	.+2      	; 0x1838 <_Z11ReceiveBonev+0xc6>
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	88 23       	and	r24, r24
    183a:	89 f7       	brne	.-30     	; 0x181e <_Z11ReceiveBonev+0xac>
						if (!flagReceivingBone){state=0; break;}					//if there was a timeout, break out and reset state
    183c:	80 91 cf 01 	lds	r24, 0x01CF
    1840:	88 23       	and	r24, r24
    1842:	31 f4       	brne	.+12     	; 0x1850 <_Z11ReceiveBonev+0xde>
    1844:	10 92 e9 01 	sts	0x01E9, r1
    1848:	10 92 e8 01 	sts	0x01E8, r1
    184c:	00 00       	nop
						else{
							//recString[strLoc++]=recChar;
							if (strLoc >= 19){state=5;noCarriage=fFalse;}
						}//end if-else
					}//end while
					break;
    184e:	bb c1       	rjmp	.+886    	; 0x1bc6 <_Z11ReceiveBonev+0x454>
					}//end case 0
				case 1:{
					while (noCarriage && flagReceivingBone){	//while there isn't a timeout and no carry
						while (!(UCSR1A & (1 << RXC0)) && flagReceivingBone);		//get the next character
						if (!flagReceivingBone){state=0; break;}					//if there was a timeout, break out and reset state
						recChar=UDR0;
    1850:	86 ec       	ldi	r24, 0xC6	; 198
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	fc 01       	movw	r30, r24
    1856:	80 81       	ld	r24, Z
    1858:	8a 83       	std	Y+2, r24	; 0x02
						recString[strLoc++]=recChar;
    185a:	88 8d       	ldd	r24, Y+24	; 0x18
    185c:	99 8d       	ldd	r25, Y+25	; 0x19
    185e:	9e 01       	movw	r18, r28
    1860:	2c 5f       	subi	r18, 0xFC	; 252
    1862:	3f 4f       	sbci	r19, 0xFF	; 255
    1864:	28 0f       	add	r18, r24
    1866:	39 1f       	adc	r19, r25
    1868:	4a 81       	ldd	r20, Y+2	; 0x02
    186a:	f9 01       	movw	r30, r18
    186c:	40 83       	st	Z, r20
    186e:	01 96       	adiw	r24, 0x01	; 1
    1870:	99 8f       	std	Y+25, r25	; 0x19
    1872:	88 8f       	std	Y+24, r24	; 0x18
						if (recChar == '.'){recString[strLoc]='\0'; noCarriage=fFalse; state=2;}
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	8e 32       	cpi	r24, 0x2E	; 46
    1878:	89 f4       	brne	.+34     	; 0x189c <_Z11ReceiveBonev+0x12a>
    187a:	88 8d       	ldd	r24, Y+24	; 0x18
    187c:	99 8d       	ldd	r25, Y+25	; 0x19
    187e:	9e 01       	movw	r18, r28
    1880:	2c 5f       	subi	r18, 0xFC	; 252
    1882:	3f 4f       	sbci	r19, 0xFF	; 255
    1884:	82 0f       	add	r24, r18
    1886:	93 1f       	adc	r25, r19
    1888:	fc 01       	movw	r30, r24
    188a:	10 82       	st	Z, r1
    188c:	19 82       	std	Y+1, r1	; 0x01
    188e:	82 e0       	ldi	r24, 0x02	; 2
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	90 93 e9 01 	sts	0x01E9, r25
    1896:	80 93 e8 01 	sts	0x01E8, r24
    189a:	10 c0       	rjmp	.+32     	; 0x18bc <_Z11ReceiveBonev+0x14a>
						else{
							//recString[strLoc++]=recChar;
							if (strLoc >= 19){state=5;noCarriage=fFalse;}
    189c:	88 8d       	ldd	r24, Y+24	; 0x18
    189e:	99 8d       	ldd	r25, Y+25	; 0x19
    18a0:	21 e0       	ldi	r18, 0x01	; 1
    18a2:	83 31       	cpi	r24, 0x13	; 19
    18a4:	91 05       	cpc	r25, r1
    18a6:	08 f4       	brcc	.+2      	; 0x18aa <_Z11ReceiveBonev+0x138>
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	22 23       	and	r18, r18
    18ac:	39 f0       	breq	.+14     	; 0x18bc <_Z11ReceiveBonev+0x14a>
    18ae:	85 e0       	ldi	r24, 0x05	; 5
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	90 93 e9 01 	sts	0x01E9, r25
    18b6:	80 93 e8 01 	sts	0x01E8, r24
    18ba:	19 82       	std	Y+1, r1	; 0x01
						state=5;
					} else  {recString[strLoc++]=recChar; state=1;}	
					break;				
					}//end case 0
				case 1:{
					while (noCarriage && flagReceivingBone){	//while there isn't a timeout and no carry
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	88 23       	and	r24, r24
    18c0:	31 f0       	breq	.+12     	; 0x18ce <_Z11ReceiveBonev+0x15c>
    18c2:	80 91 cf 01 	lds	r24, 0x01CF
    18c6:	88 23       	and	r24, r24
    18c8:	11 f0       	breq	.+4      	; 0x18ce <_Z11ReceiveBonev+0x15c>
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	01 c0       	rjmp	.+2      	; 0x18d0 <_Z11ReceiveBonev+0x15e>
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	88 23       	and	r24, r24
    18d2:	09 f0       	breq	.+2      	; 0x18d6 <_Z11ReceiveBonev+0x164>
    18d4:	a3 cf       	rjmp	.-186    	; 0x181c <_Z11ReceiveBonev+0xaa>
						else{
							//recString[strLoc++]=recChar;
							if (strLoc >= 19){state=5;noCarriage=fFalse;}
						}//end if-else
					}//end while
					break;
    18d6:	77 c1       	rjmp	.+750    	; 0x1bc6 <_Z11ReceiveBonev+0x454>
					}//end case 1
				case 2:{
					if (!strncmp(recString,"date.",5)){printTimeDate(fTrue,fFalse,fTrue); state=6;}
    18d8:	ce 01       	movw	r24, r28
    18da:	04 96       	adiw	r24, 0x04	; 4
    18dc:	25 e4       	ldi	r18, 0x45	; 69
    18de:	31 e0       	ldi	r19, 0x01	; 1
    18e0:	b9 01       	movw	r22, r18
    18e2:	45 e0       	ldi	r20, 0x05	; 5
    18e4:	50 e0       	ldi	r21, 0x00	; 0
    18e6:	0e 94 b1 18 	call	0x3162	; 0x3162 <strncmp>
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	61 f4       	brne	.+24     	; 0x1906 <_Z11ReceiveBonev+0x194>
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	60 e0       	ldi	r22, 0x00	; 0
    18f2:	41 e0       	ldi	r20, 0x01	; 1
    18f4:	0e 94 56 10 	call	0x20ac	; 0x20ac <_Z13printTimeDatehhh>
    18f8:	86 e0       	ldi	r24, 0x06	; 6
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	90 93 e9 01 	sts	0x01E9, r25
    1900:	80 93 e8 01 	sts	0x01E8, r24
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strncmp(recString,"SYNNONE.",8)){state=3;}	
					else {state=5;}						
					break;
    1904:	5f c1       	rjmp	.+702    	; 0x1bc4 <_Z11ReceiveBonev+0x452>
					}//end while
					break;
					}//end case 1
				case 2:{
					if (!strncmp(recString,"date.",5)){printTimeDate(fTrue,fFalse,fTrue); state=6;}
					else if (!strncmp(recString,"time.",5)){printTimeDate(fTrue,fTrue,fFalse);state=6;}
    1906:	ce 01       	movw	r24, r28
    1908:	04 96       	adiw	r24, 0x04	; 4
    190a:	2b e4       	ldi	r18, 0x4B	; 75
    190c:	31 e0       	ldi	r19, 0x01	; 1
    190e:	b9 01       	movw	r22, r18
    1910:	45 e0       	ldi	r20, 0x05	; 5
    1912:	50 e0       	ldi	r21, 0x00	; 0
    1914:	0e 94 b1 18 	call	0x3162	; 0x3162 <strncmp>
    1918:	00 97       	sbiw	r24, 0x00	; 0
    191a:	61 f4       	brne	.+24     	; 0x1934 <_Z11ReceiveBonev+0x1c2>
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	61 e0       	ldi	r22, 0x01	; 1
    1920:	40 e0       	ldi	r20, 0x00	; 0
    1922:	0e 94 56 10 	call	0x20ac	; 0x20ac <_Z13printTimeDatehhh>
    1926:	86 e0       	ldi	r24, 0x06	; 6
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	90 93 e9 01 	sts	0x01E9, r25
    192e:	80 93 e8 01 	sts	0x01E8, r24
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strncmp(recString,"SYNNONE.",8)){state=3;}	
					else {state=5;}						
					break;
    1932:	48 c1       	rjmp	.+656    	; 0x1bc4 <_Z11ReceiveBonev+0x452>
					break;
					}//end case 1
				case 2:{
					if (!strncmp(recString,"date.",5)){printTimeDate(fTrue,fFalse,fTrue); state=6;}
					else if (!strncmp(recString,"time.",5)){printTimeDate(fTrue,fTrue,fFalse);state=6;}
					else if (!strncmp(recString,"both.",5)){printTimeDate(fTrue,fTrue,fTrue);state=6;}
    1934:	ce 01       	movw	r24, r28
    1936:	04 96       	adiw	r24, 0x04	; 4
    1938:	21 e5       	ldi	r18, 0x51	; 81
    193a:	31 e0       	ldi	r19, 0x01	; 1
    193c:	b9 01       	movw	r22, r18
    193e:	45 e0       	ldi	r20, 0x05	; 5
    1940:	50 e0       	ldi	r21, 0x00	; 0
    1942:	0e 94 b1 18 	call	0x3162	; 0x3162 <strncmp>
    1946:	00 97       	sbiw	r24, 0x00	; 0
    1948:	61 f4       	brne	.+24     	; 0x1962 <_Z11ReceiveBonev+0x1f0>
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	61 e0       	ldi	r22, 0x01	; 1
    194e:	41 e0       	ldi	r20, 0x01	; 1
    1950:	0e 94 56 10 	call	0x20ac	; 0x20ac <_Z13printTimeDatehhh>
    1954:	86 e0       	ldi	r24, 0x06	; 6
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	90 93 e9 01 	sts	0x01E9, r25
    195c:	80 93 e8 01 	sts	0x01E8, r24
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strncmp(recString,"SYNNONE.",8)){state=3;}	
					else {state=5;}						
					break;
    1960:	31 c1       	rjmp	.+610    	; 0x1bc4 <_Z11ReceiveBonev+0x452>
					}//end case 1
				case 2:{
					if (!strncmp(recString,"date.",5)){printTimeDate(fTrue,fFalse,fTrue); state=6;}
					else if (!strncmp(recString,"time.",5)){printTimeDate(fTrue,fTrue,fFalse);state=6;}
					else if (!strncmp(recString,"both.",5)){printTimeDate(fTrue,fTrue,fTrue);state=6;}
					else if (!strncmp(recString,"save.",5)){saveDateTime_eeprom(fTrue,fFalse);PrintBone(recString);state=6;}
    1962:	ce 01       	movw	r24, r28
    1964:	04 96       	adiw	r24, 0x04	; 4
    1966:	27 e5       	ldi	r18, 0x57	; 87
    1968:	31 e0       	ldi	r19, 0x01	; 1
    196a:	b9 01       	movw	r22, r18
    196c:	45 e0       	ldi	r20, 0x05	; 5
    196e:	50 e0       	ldi	r21, 0x00	; 0
    1970:	0e 94 b1 18 	call	0x3162	; 0x3162 <strncmp>
    1974:	00 97       	sbiw	r24, 0x00	; 0
    1976:	79 f4       	brne	.+30     	; 0x1996 <_Z11ReceiveBonev+0x224>
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	60 e0       	ldi	r22, 0x00	; 0
    197c:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
    1980:	ce 01       	movw	r24, r28
    1982:	04 96       	adiw	r24, 0x04	; 4
    1984:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
    1988:	86 e0       	ldi	r24, 0x06	; 6
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	90 93 e9 01 	sts	0x01E9, r25
    1990:	80 93 e8 01 	sts	0x01E8, r24
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strncmp(recString,"SYNNONE.",8)){state=3;}	
					else {state=5;}						
					break;
    1994:	17 c1       	rjmp	.+558    	; 0x1bc4 <_Z11ReceiveBonev+0x452>
				case 2:{
					if (!strncmp(recString,"date.",5)){printTimeDate(fTrue,fFalse,fTrue); state=6;}
					else if (!strncmp(recString,"time.",5)){printTimeDate(fTrue,fTrue,fFalse);state=6;}
					else if (!strncmp(recString,"both.",5)){printTimeDate(fTrue,fTrue,fTrue);state=6;}
					else if (!strncmp(recString,"save.",5)){saveDateTime_eeprom(fTrue,fFalse);PrintBone(recString);state=6;}
					else if (!strncmp(recString,"adc.",4)){char tempChar[7]; utoa(globalADC,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
    1996:	ce 01       	movw	r24, r28
    1998:	04 96       	adiw	r24, 0x04	; 4
    199a:	2d e5       	ldi	r18, 0x5D	; 93
    199c:	31 e0       	ldi	r19, 0x01	; 1
    199e:	b9 01       	movw	r22, r18
    19a0:	44 e0       	ldi	r20, 0x04	; 4
    19a2:	50 e0       	ldi	r21, 0x00	; 0
    19a4:	0e 94 b1 18 	call	0x3162	; 0x3162 <strncmp>
    19a8:	00 97       	sbiw	r24, 0x00	; 0
    19aa:	c1 f4       	brne	.+48     	; 0x19dc <_Z11ReceiveBonev+0x26a>
    19ac:	80 91 a2 01 	lds	r24, 0x01A2
    19b0:	90 91 a3 01 	lds	r25, 0x01A3
    19b4:	9e 01       	movw	r18, r28
    19b6:	26 5e       	subi	r18, 0xE6	; 230
    19b8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ba:	b9 01       	movw	r22, r18
    19bc:	4a e0       	ldi	r20, 0x0A	; 10
    19be:	50 e0       	ldi	r21, 0x00	; 0
    19c0:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <utoa>
    19c4:	18 a2       	lds	r17, 0x98
    19c6:	ce 01       	movw	r24, r28
    19c8:	4a 96       	adiw	r24, 0x1a	; 26
    19ca:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
    19ce:	86 e0       	ldi	r24, 0x06	; 6
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	90 93 e9 01 	sts	0x01E9, r25
    19d6:	80 93 e8 01 	sts	0x01E8, r24
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strncmp(recString,"SYNNONE.",8)){state=3;}	
					else {state=5;}						
					break;
    19da:	f4 c0       	rjmp	.+488    	; 0x1bc4 <_Z11ReceiveBonev+0x452>
					if (!strncmp(recString,"date.",5)){printTimeDate(fTrue,fFalse,fTrue); state=6;}
					else if (!strncmp(recString,"time.",5)){printTimeDate(fTrue,fTrue,fFalse);state=6;}
					else if (!strncmp(recString,"both.",5)){printTimeDate(fTrue,fTrue,fTrue);state=6;}
					else if (!strncmp(recString,"save.",5)){saveDateTime_eeprom(fTrue,fFalse);PrintBone(recString);state=6;}
					else if (!strncmp(recString,"adc.",4)){char tempChar[7]; utoa(globalADC,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
					else if (!strncmp(recString,"temp.",5)){char tempChar[7]; utoa(globalTemp,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
    19dc:	ce 01       	movw	r24, r28
    19de:	04 96       	adiw	r24, 0x04	; 4
    19e0:	22 e6       	ldi	r18, 0x62	; 98
    19e2:	31 e0       	ldi	r19, 0x01	; 1
    19e4:	b9 01       	movw	r22, r18
    19e6:	45 e0       	ldi	r20, 0x05	; 5
    19e8:	50 e0       	ldi	r21, 0x00	; 0
    19ea:	0e 94 b1 18 	call	0x3162	; 0x3162 <strncmp>
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	c1 f4       	brne	.+48     	; 0x1a22 <_Z11ReceiveBonev+0x2b0>
    19f2:	80 91 a4 01 	lds	r24, 0x01A4
    19f6:	90 91 a5 01 	lds	r25, 0x01A5
    19fa:	9e 01       	movw	r18, r28
    19fc:	2f 5d       	subi	r18, 0xDF	; 223
    19fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1a00:	b9 01       	movw	r22, r18
    1a02:	4a e0       	ldi	r20, 0x0A	; 10
    1a04:	50 e0       	ldi	r21, 0x00	; 0
    1a06:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <utoa>
    1a0a:	1f a2       	lds	r17, 0x9f
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	81 96       	adiw	r24, 0x21	; 33
    1a10:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
    1a14:	86 e0       	ldi	r24, 0x06	; 6
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	90 93 e9 01 	sts	0x01E9, r25
    1a1c:	80 93 e8 01 	sts	0x01E8, r24
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strncmp(recString,"SYNNONE.",8)){state=3;}	
					else {state=5;}						
					break;
    1a20:	d1 c0       	rjmp	.+418    	; 0x1bc4 <_Z11ReceiveBonev+0x452>
					else if (!strncmp(recString,"time.",5)){printTimeDate(fTrue,fTrue,fFalse);state=6;}
					else if (!strncmp(recString,"both.",5)){printTimeDate(fTrue,fTrue,fTrue);state=6;}
					else if (!strncmp(recString,"save.",5)){saveDateTime_eeprom(fTrue,fFalse);PrintBone(recString);state=6;}
					else if (!strncmp(recString,"adc.",4)){char tempChar[7]; utoa(globalADC,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
					else if (!strncmp(recString,"temp.",5)){char tempChar[7]; utoa(globalTemp,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
					else if (recString[2] == ':'){//valid string. Update the time anyways. Comes in every 20 minutes or so...
    1a22:	8e 81       	ldd	r24, Y+6	; 0x06
    1a24:	8a 33       	cpi	r24, 0x3A	; 58
    1a26:	09 f0       	breq	.+2      	; 0x1a2a <_Z11ReceiveBonev+0x2b8>
    1a28:	81 c0       	rjmp	.+258    	; 0x1b2c <_Z11ReceiveBonev+0x3ba>
						BOOL success=currentTime.setTime(recString);
    1a2a:	86 ea       	ldi	r24, 0xA6	; 166
    1a2c:	91 e0       	ldi	r25, 0x01	; 1
    1a2e:	9e 01       	movw	r18, r28
    1a30:	2c 5f       	subi	r18, 0xFC	; 252
    1a32:	3f 4f       	sbci	r19, 0xFF	; 255
    1a34:	b9 01       	movw	r22, r18
    1a36:	0e 94 cc 04 	call	0x998	; 0x998 <_ZN6myTime7setTimeEPc>
    1a3a:	8b 83       	std	Y+3, r24	; 0x03
						if (success){state=3;}
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	88 23       	and	r24, r24
    1a40:	39 f0       	breq	.+14     	; 0x1a50 <_Z11ReceiveBonev+0x2de>
    1a42:	83 e0       	ldi	r24, 0x03	; 3
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	90 93 e9 01 	sts	0x01E9, r25
    1a4a:	80 93 e8 01 	sts	0x01E8, r24
    1a4e:	06 c0       	rjmp	.+12     	; 0x1a5c <_Z11ReceiveBonev+0x2ea>
						else {state=4;}
    1a50:	84 e0       	ldi	r24, 0x04	; 4
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	90 93 e9 01 	sts	0x01E9, r25
    1a58:	80 93 e8 01 	sts	0x01E8, r24
						
						//Decide what I need to save and which flags need to go up.	
						if (success && !restart && !flagFreshStart){saveDateTime_eeprom(fTrue,fFalse); flagUpdateGAVRTime=fTrue;}
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	88 23       	and	r24, r24
    1a60:	81 f0       	breq	.+32     	; 0x1a82 <_Z11ReceiveBonev+0x310>
    1a62:	80 91 de 01 	lds	r24, 0x01DE
    1a66:	88 23       	and	r24, r24
    1a68:	61 f4       	brne	.+24     	; 0x1a82 <_Z11ReceiveBonev+0x310>
    1a6a:	80 91 df 01 	lds	r24, 0x01DF
    1a6e:	88 23       	and	r24, r24
    1a70:	41 f4       	brne	.+16     	; 0x1a82 <_Z11ReceiveBonev+0x310>
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	60 e0       	ldi	r22, 0x00	; 0
    1a76:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	80 93 d2 01 	sts	0x01D2, r24
    1a80:	47 c0       	rjmp	.+142    	; 0x1b10 <_Z11ReceiveBonev+0x39e>
						else if (success && !restart && flagFreshStart){saveDateTime_eeprom(fTrue,fFalse); flagUpdateGAVRTime=fTrue; flagUserDate=fTrue;}
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	88 23       	and	r24, r24
    1a86:	99 f0       	breq	.+38     	; 0x1aae <_Z11ReceiveBonev+0x33c>
    1a88:	80 91 de 01 	lds	r24, 0x01DE
    1a8c:	88 23       	and	r24, r24
    1a8e:	79 f4       	brne	.+30     	; 0x1aae <_Z11ReceiveBonev+0x33c>
    1a90:	80 91 df 01 	lds	r24, 0x01DF
    1a94:	88 23       	and	r24, r24
    1a96:	59 f0       	breq	.+22     	; 0x1aae <_Z11ReceiveBonev+0x33c>
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	60 e0       	ldi	r22, 0x00	; 0
    1a9c:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	80 93 d2 01 	sts	0x01D2, r24
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	80 93 d5 01 	sts	0x01D5, r24
    1aac:	31 c0       	rjmp	.+98     	; 0x1b10 <_Z11ReceiveBonev+0x39e>
						else if (success && restart){saveDateTime_eeprom(fTrue,fFalse); flagUpdateGAVRDate=fTrue; flagUpdateGAVRTime=fTrue;;}
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	88 23       	and	r24, r24
    1ab2:	79 f0       	breq	.+30     	; 0x1ad2 <_Z11ReceiveBonev+0x360>
    1ab4:	80 91 de 01 	lds	r24, 0x01DE
    1ab8:	88 23       	and	r24, r24
    1aba:	59 f0       	breq	.+22     	; 0x1ad2 <_Z11ReceiveBonev+0x360>
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	60 e0       	ldi	r22, 0x00	; 0
    1ac0:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	80 93 d3 01 	sts	0x01D3, r24
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	80 93 d2 01 	sts	0x01D2, r24
    1ad0:	1f c0       	rjmp	.+62     	; 0x1b10 <_Z11ReceiveBonev+0x39e>
						else if (!success && restart){flagUpdateGAVRTime=fTrue; flagUpdateGAVRDate=fTrue;}	//sends eeprom time and date
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	88 23       	and	r24, r24
    1ad6:	59 f4       	brne	.+22     	; 0x1aee <_Z11ReceiveBonev+0x37c>
    1ad8:	80 91 de 01 	lds	r24, 0x01DE
    1adc:	88 23       	and	r24, r24
    1ade:	39 f0       	breq	.+14     	; 0x1aee <_Z11ReceiveBonev+0x37c>
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	80 93 d2 01 	sts	0x01D2, r24
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	80 93 d3 01 	sts	0x01D3, r24
    1aec:	11 c0       	rjmp	.+34     	; 0x1b10 <_Z11ReceiveBonev+0x39e>
						else if (!success && flagFreshStart && !restart){flagUserTime=fTrue; flagUserDate=fTrue;} //need to get user time and date
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	88 23       	and	r24, r24
    1af2:	71 f4       	brne	.+28     	; 0x1b10 <_Z11ReceiveBonev+0x39e>
    1af4:	80 91 df 01 	lds	r24, 0x01DF
    1af8:	88 23       	and	r24, r24
    1afa:	51 f0       	breq	.+20     	; 0x1b10 <_Z11ReceiveBonev+0x39e>
    1afc:	80 91 de 01 	lds	r24, 0x01DE
    1b00:	88 23       	and	r24, r24
    1b02:	31 f4       	brne	.+12     	; 0x1b10 <_Z11ReceiveBonev+0x39e>
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	80 93 d6 01 	sts	0x01D6, r24
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	80 93 d5 01 	sts	0x01D5, r24
						else;
						//Reset flags for startup
						if (restart){restart=fFalse;}
    1b10:	80 91 de 01 	lds	r24, 0x01DE
    1b14:	88 23       	and	r24, r24
    1b16:	11 f0       	breq	.+4      	; 0x1b1c <_Z11ReceiveBonev+0x3aa>
    1b18:	10 92 de 01 	sts	0x01DE, r1
						if (flagFreshStart){flagFreshStart=fFalse;}	
    1b1c:	80 91 df 01 	lds	r24, 0x01DF
    1b20:	88 23       	and	r24, r24
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <_Z11ReceiveBonev+0x3b4>
    1b24:	4f c0       	rjmp	.+158    	; 0x1bc4 <_Z11ReceiveBonev+0x452>
    1b26:	10 92 df 01 	sts	0x01DF, r1
					} else if (!strncmp(recString,"SYNNONE.",8)){state=3;}	
					else {state=5;}						
					break;
    1b2a:	4c c0       	rjmp	.+152    	; 0x1bc4 <_Z11ReceiveBonev+0x452>
						else if (!success && flagFreshStart && !restart){flagUserTime=fTrue; flagUserDate=fTrue;} //need to get user time and date
						else;
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strncmp(recString,"SYNNONE.",8)){state=3;}	
    1b2c:	ce 01       	movw	r24, r28
    1b2e:	04 96       	adiw	r24, 0x04	; 4
    1b30:	28 e6       	ldi	r18, 0x68	; 104
    1b32:	31 e0       	ldi	r19, 0x01	; 1
    1b34:	b9 01       	movw	r22, r18
    1b36:	48 e0       	ldi	r20, 0x08	; 8
    1b38:	50 e0       	ldi	r21, 0x00	; 0
    1b3a:	0e 94 b1 18 	call	0x3162	; 0x3162 <strncmp>
    1b3e:	00 97       	sbiw	r24, 0x00	; 0
    1b40:	39 f4       	brne	.+14     	; 0x1b50 <_Z11ReceiveBonev+0x3de>
    1b42:	83 e0       	ldi	r24, 0x03	; 3
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	90 93 e9 01 	sts	0x01E9, r25
    1b4a:	80 93 e8 01 	sts	0x01E8, r24
					else {state=5;}						
					break;
    1b4e:	3a c0       	rjmp	.+116    	; 0x1bc4 <_Z11ReceiveBonev+0x452>
						else;
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strncmp(recString,"SYNNONE.",8)){state=3;}	
					else {state=5;}						
    1b50:	85 e0       	ldi	r24, 0x05	; 5
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	90 93 e9 01 	sts	0x01E9, r25
    1b58:	80 93 e8 01 	sts	0x01E8, r24
					break;
    1b5c:	33 c0       	rjmp	.+102    	; 0x1bc4 <_Z11ReceiveBonev+0x452>
					}//end case 2
				case 3:{
					//Successful receive state
					PrintBone("ACK");
    1b5e:	81 e7       	ldi	r24, 0x71	; 113
    1b60:	91 e0       	ldi	r25, 0x01	; 1
    1b62:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
					PrintBone(recString);
    1b66:	ce 01       	movw	r24, r28
    1b68:	04 96       	adiw	r24, 0x04	; 4
    1b6a:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
					state=0;
    1b6e:	10 92 e9 01 	sts	0x01E9, r1
    1b72:	10 92 e8 01 	sts	0x01E8, r1
					flagReceivingBone=fFalse;
    1b76:	10 92 cf 01 	sts	0x01CF, r1
					break;
    1b7a:	25 c0       	rjmp	.+74     	; 0x1bc6 <_Z11ReceiveBonev+0x454>
					}//end case 3
				case 4:{
					PrintBone("ACKBAD.");
    1b7c:	8b e1       	ldi	r24, 0x1B	; 27
    1b7e:	91 e0       	ldi	r25, 0x01	; 1
    1b80:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
					flagReceivingBone=fFalse;
    1b84:	10 92 cf 01 	sts	0x01CF, r1
					state=0;
    1b88:	10 92 e9 01 	sts	0x01E9, r1
    1b8c:	10 92 e8 01 	sts	0x01E8, r1
					break;
    1b90:	1a c0       	rjmp	.+52     	; 0x1bc6 <_Z11ReceiveBonev+0x454>
					}//end case 4
				case 5:{
					PrintBone("ACKERROR.");
    1b92:	85 e7       	ldi	r24, 0x75	; 117
    1b94:	91 e0       	ldi	r25, 0x01	; 1
    1b96:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
					flagReceivingBone=fFalse;
    1b9a:	10 92 cf 01 	sts	0x01CF, r1
					state=0;
    1b9e:	10 92 e9 01 	sts	0x01E9, r1
    1ba2:	10 92 e8 01 	sts	0x01E8, r1
					break;
    1ba6:	0f c0       	rjmp	.+30     	; 0x1bc6 <_Z11ReceiveBonev+0x454>
					}//end case 5
				case 6:{
					flagReceivingBone=fFalse;
    1ba8:	10 92 cf 01 	sts	0x01CF, r1
					state=0;
    1bac:	10 92 e9 01 	sts	0x01E9, r1
    1bb0:	10 92 e8 01 	sts	0x01E8, r1
					break;
    1bb4:	08 c0       	rjmp	.+16     	; 0x1bc6 <_Z11ReceiveBonev+0x454>
					}//end case 6
				default:{flagReceivingBone=fFalse; state=0;break;}
    1bb6:	10 92 cf 01 	sts	0x01CF, r1
    1bba:	10 92 e9 01 	sts	0x01E9, r1
    1bbe:	10 92 e8 01 	sts	0x01E8, r1
    1bc2:	01 c0       	rjmp	.+2      	; 0x1bc6 <_Z11ReceiveBonev+0x454>
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strncmp(recString,"SYNNONE.",8)){state=3;}	
					else {state=5;}						
					break;
    1bc4:	00 00       	nop
	volatile static unsigned int state=0;
	char recChar, recString[20];
	volatile unsigned int strLoc=0;
	BOOL noCarriage=fTrue;
	
	while (flagReceivingBone){
    1bc6:	90 91 cf 01 	lds	r25, 0x01CF
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	99 23       	and	r25, r25
    1bce:	09 f4       	brne	.+2      	; 0x1bd2 <_Z11ReceiveBonev+0x460>
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	88 23       	and	r24, r24
    1bd4:	09 f0       	breq	.+2      	; 0x1bd8 <_Z11ReceiveBonev+0x466>
    1bd6:	dc cd       	rjmp	.-1096   	; 0x1790 <_Z11ReceiveBonev+0x1e>
					break;
					}//end case 6
				default:{flagReceivingBone=fFalse; state=0;break;}
			}//end switch
	}//end while(flagUARTbone)	
}//end ReceiveBone()
    1bd8:	a7 96       	adiw	r28, 0x27	; 39
    1bda:	0f b6       	in	r0, 0x3f	; 63
    1bdc:	f8 94       	cli
    1bde:	de bf       	out	0x3e, r29	; 62
    1be0:	0f be       	out	0x3f, r0	; 63
    1be2:	cd bf       	out	0x3d, r28	; 61
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	08 95       	ret

00001bea <_Z11ReceiveGAVRv>:

/*************************************************************************************************************/
void ReceiveGAVR(){
    1bea:	cf 93       	push	r28
    1bec:	df 93       	push	r29
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
    1bf2:	e3 97       	sbiw	r28, 0x33	; 51
    1bf4:	0f b6       	in	r0, 0x3f	; 63
    1bf6:	f8 94       	cli
    1bf8:	de bf       	out	0x3e, r29	; 62
    1bfa:	0f be       	out	0x3f, r0	; 63
    1bfc:	cd bf       	out	0x3d, r28	; 61
	volatile static unsigned int state=0;
	char recChar, recString[20];
	volatile unsigned int strLoc=0;
    1bfe:	1c a2       	lds	r17, 0x9c
    1c00:	1b a2       	lds	r17, 0x9b
	BOOL noCarriage=fTrue;
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	89 83       	std	Y+1, r24	; 0x01
	
	//While Loop
	while (flagReceivingGAVR){
    1c06:	40 c2       	rjmp	.+1152   	; 0x2088 <_Z11ReceiveGAVRv+0x49e>
			/**			 go to exit state, otherwise send "ACKNO" and go to exit state 5.												   **/
			/** State 5: Exit case. Lower "flagReceivingGAVR" which causes and exit.													   **/
			/** State 6: ACKERROR state. Send "ACKERROR", then exit through state 5.													   **/
			/** Default: Set state to 0, doesn't really matter though. Exit signalling timeout to sender.								   **/
			/********************************************************************************************************************************/			
			switch(state){
    1c08:	80 91 e6 01 	lds	r24, 0x01E6
    1c0c:	90 91 e7 01 	lds	r25, 0x01E7
    1c10:	83 30       	cpi	r24, 0x03	; 3
    1c12:	91 05       	cpc	r25, r1
    1c14:	09 f4       	brne	.+2      	; 0x1c18 <_Z11ReceiveGAVRv+0x2e>
    1c16:	c9 c0       	rjmp	.+402    	; 0x1daa <_Z11ReceiveGAVRv+0x1c0>
    1c18:	84 30       	cpi	r24, 0x04	; 4
    1c1a:	91 05       	cpc	r25, r1
    1c1c:	48 f4       	brcc	.+18     	; 0x1c30 <_Z11ReceiveGAVRv+0x46>
    1c1e:	81 30       	cpi	r24, 0x01	; 1
    1c20:	91 05       	cpc	r25, r1
    1c22:	09 f4       	brne	.+2      	; 0x1c26 <_Z11ReceiveGAVRv+0x3c>
    1c24:	87 c0       	rjmp	.+270    	; 0x1d34 <_Z11ReceiveGAVRv+0x14a>
    1c26:	82 30       	cpi	r24, 0x02	; 2
    1c28:	91 05       	cpc	r25, r1
    1c2a:	08 f0       	brcs	.+2      	; 0x1c2e <_Z11ReceiveGAVRv+0x44>
    1c2c:	91 c0       	rjmp	.+290    	; 0x1d50 <_Z11ReceiveGAVRv+0x166>
    1c2e:	0d c0       	rjmp	.+26     	; 0x1c4a <_Z11ReceiveGAVRv+0x60>
    1c30:	85 30       	cpi	r24, 0x05	; 5
    1c32:	91 05       	cpc	r25, r1
    1c34:	09 f4       	brne	.+2      	; 0x1c38 <_Z11ReceiveGAVRv+0x4e>
    1c36:	0e c2       	rjmp	.+1052   	; 0x2054 <_Z11ReceiveGAVRv+0x46a>
    1c38:	85 30       	cpi	r24, 0x05	; 5
    1c3a:	91 05       	cpc	r25, r1
    1c3c:	08 f4       	brcc	.+2      	; 0x1c40 <_Z11ReceiveGAVRv+0x56>
    1c3e:	ec c1       	rjmp	.+984    	; 0x2018 <_Z11ReceiveGAVRv+0x42e>
    1c40:	86 30       	cpi	r24, 0x06	; 6
    1c42:	91 05       	cpc	r25, r1
    1c44:	09 f4       	brne	.+2      	; 0x1c48 <_Z11ReceiveGAVRv+0x5e>
    1c46:	0d c2       	rjmp	.+1050   	; 0x2062 <_Z11ReceiveGAVRv+0x478>
    1c48:	16 c2       	rjmp	.+1068   	; 0x2076 <_Z11ReceiveGAVRv+0x48c>
				case 0:{
					strLoc=0;
    1c4a:	1c a2       	lds	r17, 0x9c
    1c4c:	1b a2       	lds	r17, 0x9b
					recChar = UDR0;
    1c4e:	86 ec       	ldi	r24, 0xC6	; 198
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	fc 01       	movw	r30, r24
    1c54:	80 81       	ld	r24, Z
    1c56:	8c 87       	std	Y+12, r24	; 0x0c
					if (recChar=='.'){
    1c58:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c5a:	8e 32       	cpi	r24, 0x2E	; 46
    1c5c:	39 f4       	brne	.+14     	; 0x1c6c <_Z11ReceiveGAVRv+0x82>
						state=6;															//Go to error state.
    1c5e:	86 e0       	ldi	r24, 0x06	; 6
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	90 93 e7 01 	sts	0x01E7, r25
    1c66:	80 93 e6 01 	sts	0x01E6, r24
					} else  {recString[strLoc++]=recChar; state=1;}							//Add to string, go to state 2
					break;
    1c6a:	0e c2       	rjmp	.+1052   	; 0x2088 <_Z11ReceiveGAVRv+0x49e>
				case 0:{
					strLoc=0;
					recChar = UDR0;
					if (recChar=='.'){
						state=6;															//Go to error state.
					} else  {recString[strLoc++]=recChar; state=1;}							//Add to string, go to state 2
    1c6c:	8b a1       	lds	r24, 0x4b
    1c6e:	9c a1       	lds	r25, 0x4c
    1c70:	9e 01       	movw	r18, r28
    1c72:	21 5f       	subi	r18, 0xF1	; 241
    1c74:	3f 4f       	sbci	r19, 0xFF	; 255
    1c76:	28 0f       	add	r18, r24
    1c78:	39 1f       	adc	r19, r25
    1c7a:	4c 85       	ldd	r20, Y+12	; 0x0c
    1c7c:	f9 01       	movw	r30, r18
    1c7e:	40 83       	st	Z, r20
    1c80:	01 96       	adiw	r24, 0x01	; 1
    1c82:	9c a3       	lds	r25, 0x5c
    1c84:	8b a3       	lds	r24, 0x5b
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	90 93 e7 01 	sts	0x01E7, r25
    1c8e:	80 93 e6 01 	sts	0x01E6, r24
					break;
    1c92:	fa c1       	rjmp	.+1012   	; 0x2088 <_Z11ReceiveGAVRv+0x49e>
				}//end case 0
				case 1:{
					while (noCarriage && flagReceivingBone){	//while there isn't a timeout and no carry
						while (!(UCSR1A & (1 << RXC0)) && flagReceivingBone);				//get the next character
    1c94:	00 00       	nop
    1c96:	88 ec       	ldi	r24, 0xC8	; 200
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	fc 01       	movw	r30, r24
    1c9c:	80 81       	ld	r24, Z
    1c9e:	88 23       	and	r24, r24
    1ca0:	34 f0       	brlt	.+12     	; 0x1cae <_Z11ReceiveGAVRv+0xc4>
    1ca2:	80 91 cf 01 	lds	r24, 0x01CF
    1ca6:	88 23       	and	r24, r24
    1ca8:	11 f0       	breq	.+4      	; 0x1cae <_Z11ReceiveGAVRv+0xc4>
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	01 c0       	rjmp	.+2      	; 0x1cb0 <_Z11ReceiveGAVRv+0xc6>
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	88 23       	and	r24, r24
    1cb2:	89 f7       	brne	.-30     	; 0x1c96 <_Z11ReceiveGAVRv+0xac>
						if (!flagReceivingBone){state=0; break;}							//if there was a timeout, break out and reset state
    1cb4:	80 91 cf 01 	lds	r24, 0x01CF
    1cb8:	88 23       	and	r24, r24
    1cba:	31 f4       	brne	.+12     	; 0x1cc8 <_Z11ReceiveGAVRv+0xde>
    1cbc:	10 92 e7 01 	sts	0x01E7, r1
    1cc0:	10 92 e6 01 	sts	0x01E6, r1
    1cc4:	00 00       	nop
						recString[strLoc++]=recChar;										//'.' always included into recString
						if (recChar == '.'){recString[strLoc]='\0'; noCarriage=fFalse; state=2;}
						else if(strLoc >= 19){state=6;noCarriage=fFalse;}
						else;//end if-elseif-else
					}//end while
					break;
    1cc6:	e0 c1       	rjmp	.+960    	; 0x2088 <_Z11ReceiveGAVRv+0x49e>
				}//end case 0
				case 1:{
					while (noCarriage && flagReceivingBone){	//while there isn't a timeout and no carry
						while (!(UCSR1A & (1 << RXC0)) && flagReceivingBone);				//get the next character
						if (!flagReceivingBone){state=0; break;}							//if there was a timeout, break out and reset state
						recChar=UDR0;
    1cc8:	86 ec       	ldi	r24, 0xC6	; 198
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	fc 01       	movw	r30, r24
    1cce:	80 81       	ld	r24, Z
    1cd0:	8c 87       	std	Y+12, r24	; 0x0c
						recString[strLoc++]=recChar;										//'.' always included into recString
    1cd2:	8b a1       	lds	r24, 0x4b
    1cd4:	9c a1       	lds	r25, 0x4c
    1cd6:	9e 01       	movw	r18, r28
    1cd8:	21 5f       	subi	r18, 0xF1	; 241
    1cda:	3f 4f       	sbci	r19, 0xFF	; 255
    1cdc:	28 0f       	add	r18, r24
    1cde:	39 1f       	adc	r19, r25
    1ce0:	4c 85       	ldd	r20, Y+12	; 0x0c
    1ce2:	f9 01       	movw	r30, r18
    1ce4:	40 83       	st	Z, r20
    1ce6:	01 96       	adiw	r24, 0x01	; 1
    1ce8:	9c a3       	lds	r25, 0x5c
    1cea:	8b a3       	lds	r24, 0x5b
						if (recChar == '.'){recString[strLoc]='\0'; noCarriage=fFalse; state=2;}
    1cec:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cee:	8e 32       	cpi	r24, 0x2E	; 46
    1cf0:	89 f4       	brne	.+34     	; 0x1d14 <_Z11ReceiveGAVRv+0x12a>
    1cf2:	8b a1       	lds	r24, 0x4b
    1cf4:	9c a1       	lds	r25, 0x4c
    1cf6:	9e 01       	movw	r18, r28
    1cf8:	21 5f       	subi	r18, 0xF1	; 241
    1cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    1cfc:	82 0f       	add	r24, r18
    1cfe:	93 1f       	adc	r25, r19
    1d00:	fc 01       	movw	r30, r24
    1d02:	10 82       	st	Z, r1
    1d04:	19 82       	std	Y+1, r1	; 0x01
    1d06:	82 e0       	ldi	r24, 0x02	; 2
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	90 93 e7 01 	sts	0x01E7, r25
    1d0e:	80 93 e6 01 	sts	0x01E6, r24
    1d12:	10 c0       	rjmp	.+32     	; 0x1d34 <_Z11ReceiveGAVRv+0x14a>
						else if(strLoc >= 19){state=6;noCarriage=fFalse;}
    1d14:	8b a1       	lds	r24, 0x4b
    1d16:	9c a1       	lds	r25, 0x4c
    1d18:	21 e0       	ldi	r18, 0x01	; 1
    1d1a:	83 31       	cpi	r24, 0x13	; 19
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	08 f4       	brcc	.+2      	; 0x1d22 <_Z11ReceiveGAVRv+0x138>
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	22 23       	and	r18, r18
    1d24:	39 f0       	breq	.+14     	; 0x1d34 <_Z11ReceiveGAVRv+0x14a>
    1d26:	86 e0       	ldi	r24, 0x06	; 6
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	90 93 e7 01 	sts	0x01E7, r25
    1d2e:	80 93 e6 01 	sts	0x01E6, r24
    1d32:	19 82       	std	Y+1, r1	; 0x01
						state=6;															//Go to error state.
					} else  {recString[strLoc++]=recChar; state=1;}							//Add to string, go to state 2
					break;
				}//end case 0
				case 1:{
					while (noCarriage && flagReceivingBone){	//while there isn't a timeout and no carry
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	88 23       	and	r24, r24
    1d38:	31 f0       	breq	.+12     	; 0x1d46 <_Z11ReceiveGAVRv+0x15c>
    1d3a:	80 91 cf 01 	lds	r24, 0x01CF
    1d3e:	88 23       	and	r24, r24
    1d40:	11 f0       	breq	.+4      	; 0x1d46 <_Z11ReceiveGAVRv+0x15c>
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	01 c0       	rjmp	.+2      	; 0x1d48 <_Z11ReceiveGAVRv+0x15e>
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	88 23       	and	r24, r24
    1d4a:	09 f0       	breq	.+2      	; 0x1d4e <_Z11ReceiveGAVRv+0x164>
    1d4c:	a3 cf       	rjmp	.-186    	; 0x1c94 <_Z11ReceiveGAVRv+0xaa>
						recString[strLoc++]=recChar;										//'.' always included into recString
						if (recChar == '.'){recString[strLoc]='\0'; noCarriage=fFalse; state=2;}
						else if(strLoc >= 19){state=6;noCarriage=fFalse;}
						else;//end if-elseif-else
					}//end while
					break;
    1d4e:	9c c1       	rjmp	.+824    	; 0x2088 <_Z11ReceiveGAVRv+0x49e>
				}//end case 1
				case 2:{
					if (!strncmp(recString,"SYNNEED.",8)){state=4;} //set appropriate flags and respond in appropriate way.
    1d50:	ce 01       	movw	r24, r28
    1d52:	0f 96       	adiw	r24, 0x0f	; 15
    1d54:	2f e7       	ldi	r18, 0x7F	; 127
    1d56:	31 e0       	ldi	r19, 0x01	; 1
    1d58:	b9 01       	movw	r22, r18
    1d5a:	48 e0       	ldi	r20, 0x08	; 8
    1d5c:	50 e0       	ldi	r21, 0x00	; 0
    1d5e:	0e 94 b1 18 	call	0x3162	; 0x3162 <strncmp>
    1d62:	00 97       	sbiw	r24, 0x00	; 0
    1d64:	39 f4       	brne	.+14     	; 0x1d74 <_Z11ReceiveGAVRv+0x18a>
    1d66:	84 e0       	ldi	r24, 0x04	; 4
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	90 93 e7 01 	sts	0x01E7, r25
    1d6e:	80 93 e6 01 	sts	0x01E6, r24
					else if ((recString[4]==':') != (recString[5]==':')){state=3;}//go parse the string for a time and date. SYN03:33:12/DATE or SYN3:33:12/DATE, either char 4 or 5 is :
					else {state=6;}
					break;
    1d72:	8a c1       	rjmp	.+788    	; 0x2088 <_Z11ReceiveGAVRv+0x49e>
					}//end while
					break;
				}//end case 1
				case 2:{
					if (!strncmp(recString,"SYNNEED.",8)){state=4;} //set appropriate flags and respond in appropriate way.
					else if ((recString[4]==':') != (recString[5]==':')){state=3;}//go parse the string for a time and date. SYN03:33:12/DATE or SYN3:33:12/DATE, either char 4 or 5 is :
    1d74:	8b 89       	ldd	r24, Y+19	; 0x13
    1d76:	91 e0       	ldi	r25, 0x01	; 1
    1d78:	8a 33       	cpi	r24, 0x3A	; 58
    1d7a:	09 f0       	breq	.+2      	; 0x1d7e <_Z11ReceiveGAVRv+0x194>
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	2c 89       	ldd	r18, Y+20	; 0x14
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	2a 33       	cpi	r18, 0x3A	; 58
    1d84:	09 f0       	breq	.+2      	; 0x1d88 <_Z11ReceiveGAVRv+0x19e>
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	89 27       	eor	r24, r25
    1d8a:	88 23       	and	r24, r24
    1d8c:	39 f0       	breq	.+14     	; 0x1d9c <_Z11ReceiveGAVRv+0x1b2>
    1d8e:	83 e0       	ldi	r24, 0x03	; 3
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	90 93 e7 01 	sts	0x01E7, r25
    1d96:	80 93 e6 01 	sts	0x01E6, r24
					else {state=6;}
					break;
    1d9a:	76 c1       	rjmp	.+748    	; 0x2088 <_Z11ReceiveGAVRv+0x49e>
					break;
				}//end case 1
				case 2:{
					if (!strncmp(recString,"SYNNEED.",8)){state=4;} //set appropriate flags and respond in appropriate way.
					else if ((recString[4]==':') != (recString[5]==':')){state=3;}//go parse the string for a time and date. SYN03:33:12/DATE or SYN3:33:12/DATE, either char 4 or 5 is :
					else {state=6;}
    1d9c:	86 e0       	ldi	r24, 0x06	; 6
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	90 93 e7 01 	sts	0x01E7, r25
    1da4:	80 93 e6 01 	sts	0x01E6, r24
					break;
    1da8:	6f c1       	rjmp	.+734    	; 0x2088 <_Z11ReceiveGAVRv+0x49e>
				}//end case 2
				case 3:{
			/*----*/if (flagUserDate || flagUserTime){
    1daa:	80 91 d5 01 	lds	r24, 0x01D5
    1dae:	88 23       	and	r24, r24
    1db0:	29 f4       	brne	.+10     	; 0x1dbc <_Z11ReceiveGAVRv+0x1d2>
    1db2:	80 91 d6 01 	lds	r24, 0x01D6
    1db6:	88 23       	and	r24, r24
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <_Z11ReceiveGAVRv+0x1d2>
    1dba:	27 c1       	rjmp	.+590    	; 0x200a <_Z11ReceiveGAVRv+0x420>
					int tempNum[3]={0,0,0}, tempNum1[3]={0,0,0}, hms=0, dmy=0,placement=0;
    1dbc:	1e a2       	lds	r17, 0x9e
    1dbe:	1d a2       	lds	r17, 0x9d
    1dc0:	18 a6       	lds	r17, 0xb8
    1dc2:	1f a2       	lds	r17, 0x9f
    1dc4:	1a a6       	lds	r17, 0xba
    1dc6:	19 a6       	lds	r17, 0xb9
    1dc8:	1c a6       	lds	r17, 0xbc
    1dca:	1b a6       	lds	r17, 0xbb
    1dcc:	1e a6       	lds	r17, 0xbe
    1dce:	1d a6       	lds	r17, 0xbd
    1dd0:	18 aa       	sts	0x98, r17
    1dd2:	1f a6       	lds	r17, 0xbf
    1dd4:	1b 82       	std	Y+3, r1	; 0x03
    1dd6:	1a 82       	std	Y+2, r1	; 0x02
    1dd8:	1e 86       	std	Y+14, r1	; 0x0e
    1dda:	1d 86       	std	Y+13, r1	; 0x0d
    1ddc:	1d 82       	std	Y+5, r1	; 0x05
    1dde:	1c 82       	std	Y+4, r1	; 0x04
					//Look at string for all locations up to \0, \0 is needed to know when last digits are done
					char tempStringNum[3];
					
					//Go through the string.
					for (int i=0; i<= strLoc; i++){
    1de0:	1f 82       	std	Y+7, r1	; 0x07
    1de2:	1e 82       	std	Y+6, r1	; 0x06
    1de4:	b2 c0       	rjmp	.+356    	; 0x1f4a <_Z11ReceiveGAVRv+0x360>
						//temporary string that holds a number, new one for each
						//If the character isn't a colon, we haven't gotten 3 int values, and character isn't eof, add to tempStringNum
						if (recString[i]!=':' && hms<3 && recString[i]!='\0'){
    1de6:	9e 01       	movw	r18, r28
    1de8:	21 5f       	subi	r18, 0xF1	; 241
    1dea:	3f 4f       	sbci	r19, 0xFF	; 255
    1dec:	8e 81       	ldd	r24, Y+6	; 0x06
    1dee:	9f 81       	ldd	r25, Y+7	; 0x07
    1df0:	82 0f       	add	r24, r18
    1df2:	93 1f       	adc	r25, r19
    1df4:	fc 01       	movw	r30, r24
    1df6:	80 81       	ld	r24, Z
    1df8:	8a 33       	cpi	r24, 0x3A	; 58
    1dfa:	41 f1       	breq	.+80     	; 0x1e4c <_Z11ReceiveGAVRv+0x262>
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	9b 81       	ldd	r25, Y+3	; 0x03
    1e00:	83 30       	cpi	r24, 0x03	; 3
    1e02:	91 05       	cpc	r25, r1
    1e04:	1c f5       	brge	.+70     	; 0x1e4c <_Z11ReceiveGAVRv+0x262>
    1e06:	9e 01       	movw	r18, r28
    1e08:	21 5f       	subi	r18, 0xF1	; 241
    1e0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e10:	82 0f       	add	r24, r18
    1e12:	93 1f       	adc	r25, r19
    1e14:	fc 01       	movw	r30, r24
    1e16:	80 81       	ld	r24, Z
    1e18:	88 23       	and	r24, r24
    1e1a:	c1 f0       	breq	.+48     	; 0x1e4c <_Z11ReceiveGAVRv+0x262>
							tempStringNum[placement++]=recString[i];
    1e1c:	9e 01       	movw	r18, r28
    1e1e:	21 5f       	subi	r18, 0xF1	; 241
    1e20:	3f 4f       	sbci	r19, 0xFF	; 255
    1e22:	8e 81       	ldd	r24, Y+6	; 0x06
    1e24:	9f 81       	ldd	r25, Y+7	; 0x07
    1e26:	82 0f       	add	r24, r18
    1e28:	93 1f       	adc	r25, r19
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	40 81       	ld	r20, Z
    1e2e:	9e 01       	movw	r18, r28
    1e30:	2f 5c       	subi	r18, 0xCF	; 207
    1e32:	3f 4f       	sbci	r19, 0xFF	; 255
    1e34:	8c 81       	ldd	r24, Y+4	; 0x04
    1e36:	9d 81       	ldd	r25, Y+5	; 0x05
    1e38:	82 0f       	add	r24, r18
    1e3a:	93 1f       	adc	r25, r19
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	40 83       	st	Z, r20
    1e40:	8c 81       	ldd	r24, Y+4	; 0x04
    1e42:	9d 81       	ldd	r25, Y+5	; 0x05
    1e44:	01 96       	adiw	r24, 0x01	; 1
    1e46:	9d 83       	std	Y+5, r25	; 0x05
    1e48:	8c 83       	std	Y+4, r24	; 0x04
    1e4a:	7a c0       	rjmp	.+244    	; 0x1f40 <_Z11ReceiveGAVRv+0x356>
						//If haven't gotten 3 int's and character is colon, store int(stringNum) into tempNum[<current time param>]
						} else if (hms<2 && recString[i] == ':') {
    1e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e50:	82 30       	cpi	r24, 0x02	; 2
    1e52:	91 05       	cpc	r25, r1
    1e54:	0c f0       	brlt	.+2      	; 0x1e58 <_Z11ReceiveGAVRv+0x26e>
    1e56:	41 c0       	rjmp	.+130    	; 0x1eda <_Z11ReceiveGAVRv+0x2f0>
    1e58:	9e 01       	movw	r18, r28
    1e5a:	21 5f       	subi	r18, 0xF1	; 241
    1e5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e60:	9f 81       	ldd	r25, Y+7	; 0x07
    1e62:	82 0f       	add	r24, r18
    1e64:	93 1f       	adc	r25, r19
    1e66:	fc 01       	movw	r30, r24
    1e68:	80 81       	ld	r24, Z
    1e6a:	8a 33       	cpi	r24, 0x3A	; 58
    1e6c:	b1 f5       	brne	.+108    	; 0x1eda <_Z11ReceiveGAVRv+0x2f0>
							tempNum[hms++] = atoi(tempStringNum);
    1e6e:	ce 01       	movw	r24, r28
    1e70:	c1 96       	adiw	r24, 0x31	; 49
    1e72:	0e 94 78 18 	call	0x30f0	; 0x30f0 <atoi>
    1e76:	9c 01       	movw	r18, r24
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7c:	88 0f       	add	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	ae 01       	movw	r20, r28
    1e82:	4f 5f       	subi	r20, 0xFF	; 255
    1e84:	5f 4f       	sbci	r21, 0xFF	; 255
    1e86:	84 0f       	add	r24, r20
    1e88:	95 1f       	adc	r25, r21
    1e8a:	84 96       	adiw	r24, 0x24	; 36
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	31 83       	std	Z+1, r19	; 0x01
    1e90:	20 83       	st	Z, r18
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	9b 81       	ldd	r25, Y+3	; 0x03
    1e96:	01 96       	adiw	r24, 0x01	; 1
    1e98:	9b 83       	std	Y+3, r25	; 0x03
    1e9a:	8a 83       	std	Y+2, r24	; 0x02
							for (int j=0; j <= placement; j++){tempStringNum[j]=NULL;}	//reset the string
    1e9c:	19 86       	std	Y+9, r1	; 0x09
    1e9e:	18 86       	std	Y+8, r1	; 0x08
    1ea0:	0e c0       	rjmp	.+28     	; 0x1ebe <_Z11ReceiveGAVRv+0x2d4>
    1ea2:	9e 01       	movw	r18, r28
    1ea4:	2f 5c       	subi	r18, 0xCF	; 207
    1ea6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea8:	88 85       	ldd	r24, Y+8	; 0x08
    1eaa:	99 85       	ldd	r25, Y+9	; 0x09
    1eac:	82 0f       	add	r24, r18
    1eae:	93 1f       	adc	r25, r19
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	10 82       	st	Z, r1
    1eb4:	88 85       	ldd	r24, Y+8	; 0x08
    1eb6:	99 85       	ldd	r25, Y+9	; 0x09
    1eb8:	01 96       	adiw	r24, 0x01	; 1
    1eba:	99 87       	std	Y+9, r25	; 0x09
    1ebc:	88 87       	std	Y+8, r24	; 0x08
    1ebe:	41 e0       	ldi	r20, 0x01	; 1
    1ec0:	28 85       	ldd	r18, Y+8	; 0x08
    1ec2:	39 85       	ldd	r19, Y+9	; 0x09
    1ec4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec8:	82 17       	cp	r24, r18
    1eca:	93 07       	cpc	r25, r19
    1ecc:	0c f4       	brge	.+2      	; 0x1ed0 <_Z11ReceiveGAVRv+0x2e6>
    1ece:	40 e0       	ldi	r20, 0x00	; 0
    1ed0:	44 23       	and	r20, r20
    1ed2:	39 f7       	brne	.-50     	; 0x1ea2 <_Z11ReceiveGAVRv+0x2b8>
							placement=0;												//reset placement
    1ed4:	1d 82       	std	Y+5, r1	; 0x05
    1ed6:	1c 82       	std	Y+4, r1	; 0x04
    1ed8:	33 c0       	rjmp	.+102    	; 0x1f40 <_Z11ReceiveGAVRv+0x356>
						//If we haven't found 3 int values and current Location is at end, and end char is null, save as second
						} else if (hms<3 && (recString[i]=='\0' || i==strLoc)){
    1eda:	8a 81       	ldd	r24, Y+2	; 0x02
    1edc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ede:	83 30       	cpi	r24, 0x03	; 3
    1ee0:	91 05       	cpc	r25, r1
    1ee2:	a4 f4       	brge	.+40     	; 0x1f0c <_Z11ReceiveGAVRv+0x322>
    1ee4:	9e 01       	movw	r18, r28
    1ee6:	21 5f       	subi	r18, 0xF1	; 241
    1ee8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eea:	8e 81       	ldd	r24, Y+6	; 0x06
    1eec:	9f 81       	ldd	r25, Y+7	; 0x07
    1eee:	82 0f       	add	r24, r18
    1ef0:	93 1f       	adc	r25, r19
    1ef2:	fc 01       	movw	r30, r24
    1ef4:	80 81       	ld	r24, Z
    1ef6:	88 23       	and	r24, r24
    1ef8:	39 f0       	breq	.+14     	; 0x1f08 <_Z11ReceiveGAVRv+0x31e>
    1efa:	2e 81       	ldd	r18, Y+6	; 0x06
    1efc:	3f 81       	ldd	r19, Y+7	; 0x07
    1efe:	8b a1       	lds	r24, 0x4b
    1f00:	9c a1       	lds	r25, 0x4c
    1f02:	28 17       	cp	r18, r24
    1f04:	39 07       	cpc	r19, r25
    1f06:	11 f4       	brne	.+4      	; 0x1f0c <_Z11ReceiveGAVRv+0x322>
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	01 c0       	rjmp	.+2      	; 0x1f0e <_Z11ReceiveGAVRv+0x324>
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	88 23       	and	r24, r24
    1f10:	b9 f0       	breq	.+46     	; 0x1f40 <_Z11ReceiveGAVRv+0x356>
							tempNum[hms] = atoi(tempStringNum);
    1f12:	ce 01       	movw	r24, r28
    1f14:	c1 96       	adiw	r24, 0x31	; 49
    1f16:	0e 94 78 18 	call	0x30f0	; 0x30f0 <atoi>
    1f1a:	9c 01       	movw	r18, r24
    1f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f20:	88 0f       	add	r24, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	ae 01       	movw	r20, r28
    1f26:	4f 5f       	subi	r20, 0xFF	; 255
    1f28:	5f 4f       	sbci	r21, 0xFF	; 255
    1f2a:	84 0f       	add	r24, r20
    1f2c:	95 1f       	adc	r25, r21
    1f2e:	84 96       	adiw	r24, 0x24	; 36
    1f30:	fc 01       	movw	r30, r24
    1f32:	31 83       	std	Z+1, r19	; 0x01
    1f34:	20 83       	st	Z, r18
							hms++;	//goes to three, nothing should happen.
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	9b 81       	ldd	r25, Y+3	; 0x03
    1f3a:	01 96       	adiw	r24, 0x01	; 1
    1f3c:	9b 83       	std	Y+3, r25	; 0x03
    1f3e:	8a 83       	std	Y+2, r24	; 0x02
					int tempNum[3]={0,0,0}, tempNum1[3]={0,0,0}, hms=0, dmy=0,placement=0;
					//Look at string for all locations up to \0, \0 is needed to know when last digits are done
					char tempStringNum[3];
					
					//Go through the string.
					for (int i=0; i<= strLoc; i++){
    1f40:	8e 81       	ldd	r24, Y+6	; 0x06
    1f42:	9f 81       	ldd	r25, Y+7	; 0x07
    1f44:	01 96       	adiw	r24, 0x01	; 1
    1f46:	9f 83       	std	Y+7, r25	; 0x07
    1f48:	8e 83       	std	Y+6, r24	; 0x06
    1f4a:	2e 81       	ldd	r18, Y+6	; 0x06
    1f4c:	3f 81       	ldd	r19, Y+7	; 0x07
    1f4e:	8b a1       	lds	r24, 0x4b
    1f50:	9c a1       	lds	r25, 0x4c
    1f52:	41 e0       	ldi	r20, 0x01	; 1
    1f54:	82 17       	cp	r24, r18
    1f56:	93 07       	cpc	r25, r19
    1f58:	08 f4       	brcc	.+2      	; 0x1f5c <_Z11ReceiveGAVRv+0x372>
    1f5a:	40 e0       	ldi	r20, 0x00	; 0
    1f5c:	44 23       	and	r20, r20
    1f5e:	09 f0       	breq	.+2      	; 0x1f62 <_Z11ReceiveGAVRv+0x378>
    1f60:	42 cf       	rjmp	.-380    	; 0x1de6 <_Z11ReceiveGAVRv+0x1fc>
						}//end else if
						else;	/**********************************************THIS IS WHERE DATE PARSING SHOULD HAPPEN*****************************************/
					}//end for
										
					//Try setting the time and date
					BOOL successTime=fFalse, successDate=fFalse;
    1f62:	1a 86       	std	Y+10, r1	; 0x0a
    1f64:	1b 86       	std	Y+11, r1	; 0x0b
					if (tempNum[0]/24==0 && tempNum[1]/60==0 && tempNum[2]/60==0){successTime=fTrue;}
    1f66:	8d a1       	lds	r24, 0x4d
    1f68:	9e a1       	lds	r25, 0x4e
    1f6a:	47 96       	adiw	r24, 0x17	; 23
    1f6c:	8f 32       	cpi	r24, 0x2F	; 47
    1f6e:	91 05       	cpc	r25, r1
    1f70:	70 f4       	brcc	.+28     	; 0x1f8e <_Z11ReceiveGAVRv+0x3a4>
    1f72:	8f a1       	lds	r24, 0x4f
    1f74:	98 a5       	lds	r25, 0x68
    1f76:	cb 96       	adiw	r24, 0x3b	; 59
    1f78:	87 37       	cpi	r24, 0x77	; 119
    1f7a:	91 05       	cpc	r25, r1
    1f7c:	40 f4       	brcc	.+16     	; 0x1f8e <_Z11ReceiveGAVRv+0x3a4>
    1f7e:	89 a5       	lds	r24, 0x69
    1f80:	9a a5       	lds	r25, 0x6a
    1f82:	cb 96       	adiw	r24, 0x3b	; 59
    1f84:	87 37       	cpi	r24, 0x77	; 119
    1f86:	91 05       	cpc	r25, r1
    1f88:	10 f4       	brcc	.+4      	; 0x1f8e <_Z11ReceiveGAVRv+0x3a4>
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	8a 87       	std	Y+10, r24	; 0x0a
					if (tempNum1[0]/13==0 && tempNum1[1]/32==0 && tempNum1[2]/1000 >= 2){successDate=fTrue;}					
    1f8e:	8b a5       	lds	r24, 0x6b
    1f90:	9c a5       	lds	r25, 0x6c
    1f92:	0c 96       	adiw	r24, 0x0c	; 12
    1f94:	89 31       	cpi	r24, 0x19	; 25
    1f96:	91 05       	cpc	r25, r1
    1f98:	70 f4       	brcc	.+28     	; 0x1fb6 <_Z11ReceiveGAVRv+0x3cc>
    1f9a:	8d a5       	lds	r24, 0x6d
    1f9c:	9e a5       	lds	r25, 0x6e
    1f9e:	4f 96       	adiw	r24, 0x1f	; 31
    1fa0:	8f 33       	cpi	r24, 0x3F	; 63
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	40 f4       	brcc	.+16     	; 0x1fb6 <_Z11ReceiveGAVRv+0x3cc>
    1fa6:	8f a5       	lds	r24, 0x6f
    1fa8:	98 a9       	sts	0x48, r25
    1faa:	f7 e0       	ldi	r31, 0x07	; 7
    1fac:	80 3d       	cpi	r24, 0xD0	; 208
    1fae:	9f 07       	cpc	r25, r31
    1fb0:	14 f0       	brlt	.+4      	; 0x1fb6 <_Z11ReceiveGAVRv+0x3cc>
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	8b 87       	std	Y+11, r24	; 0x0b
					if (successTime && successDate){
    1fb6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fb8:	88 23       	and	r24, r24
    1fba:	19 f1       	breq	.+70     	; 0x2002 <_Z11ReceiveGAVRv+0x418>
    1fbc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fbe:	88 23       	and	r24, r24
    1fc0:	01 f1       	breq	.+64     	; 0x2002 <_Z11ReceiveGAVRv+0x418>
						currentTime.setTime(tempNum[0],tempNum[1],tempNum[2]);
    1fc2:	6d a1       	lds	r22, 0x4d
    1fc4:	7e a1       	lds	r23, 0x4e
    1fc6:	4f a1       	lds	r20, 0x4f
    1fc8:	58 a5       	lds	r21, 0x68
    1fca:	29 a5       	lds	r18, 0x69
    1fcc:	3a a5       	lds	r19, 0x6a
    1fce:	86 ea       	ldi	r24, 0xA6	; 166
    1fd0:	91 e0       	ldi	r25, 0x01	; 1
    1fd2:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
						currentTime.setDate(tempNum1[0],tempNum1[1],tempNum1[2]);
    1fd6:	6b a5       	lds	r22, 0x6b
    1fd8:	7c a5       	lds	r23, 0x6c
    1fda:	4d a5       	lds	r20, 0x6d
    1fdc:	5e a5       	lds	r21, 0x6e
    1fde:	2f a5       	lds	r18, 0x6f
    1fe0:	38 a9       	sts	0x48, r19
    1fe2:	86 ea       	ldi	r24, 0xA6	; 166
    1fe4:	91 e0       	ldi	r25, 0x01	; 1
    1fe6:	0e 94 84 01 	call	0x308	; 0x308 <_ZN6myDate7setDateEiii>
						saveDateTime_eeprom(fTrue,fTrue);
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	61 e0       	ldi	r22, 0x01	; 1
    1fee:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
						PrintGAVR(recString);				//has '.' termination
    1ff2:	ce 01       	movw	r24, r28
    1ff4:	0f 96       	adiw	r24, 0x0f	; 15
    1ff6:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
						flagNoGPSTime=fTrue;
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	80 93 d9 01 	sts	0x01D9, r24
    2000:	04 c0       	rjmp	.+8      	; 0x200a <_Z11ReceiveGAVRv+0x420>
					} else {
						PrintGAVR("ACKBAD.");				//Say there was an error
    2002:	8b e1       	ldi	r24, 0x1B	; 27
    2004:	91 e0       	ldi	r25, 0x01	; 1
    2006:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
					}
					}//end if flagUserDate||flagUserTime					
					//Exit
					state=5;
    200a:	85 e0       	ldi	r24, 0x05	; 5
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	90 93 e7 01 	sts	0x01E7, r25
    2012:	80 93 e6 01 	sts	0x01E6, r24
					break;
    2016:	38 c0       	rjmp	.+112    	; 0x2088 <_Z11ReceiveGAVRv+0x49e>
					}//end case 3				
				case 4:{
					if (!flagUserDate && !flagUserTime){	//If we don't need the date or time, update with what we have.
    2018:	80 91 d5 01 	lds	r24, 0x01D5
    201c:	88 23       	and	r24, r24
    201e:	79 f4       	brne	.+30     	; 0x203e <_Z11ReceiveGAVRv+0x454>
    2020:	80 91 d6 01 	lds	r24, 0x01D6
    2024:	88 23       	and	r24, r24
    2026:	59 f4       	brne	.+22     	; 0x203e <_Z11ReceiveGAVRv+0x454>
						flagUpdateGAVRDate=fTrue;
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	80 93 d3 01 	sts	0x01D3, r24
						flagUpdateGAVRTime=fTrue;
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	80 93 d2 01 	sts	0x01D2, r24
						PrintGAVR("ACKNEED.");				//respond with correct ack
    2034:	88 e8       	ldi	r24, 0x88	; 136
    2036:	91 e0       	ldi	r25, 0x01	; 1
    2038:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
    203c:	04 c0       	rjmp	.+8      	; 0x2046 <_Z11ReceiveGAVRv+0x45c>
					} else {
						PrintGAVR("ACKNO.");	//say we can't give you anything, ask the user.
    203e:	81 e9       	ldi	r24, 0x91	; 145
    2040:	91 e0       	ldi	r25, 0x01	; 1
    2042:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
						//Should be expecting something from the GAVR with user date and time, this reminds the GAVR.
					} //end if-else
					state=5;
    2046:	85 e0       	ldi	r24, 0x05	; 5
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	90 93 e7 01 	sts	0x01E7, r25
    204e:	80 93 e6 01 	sts	0x01E6, r24
					break;					
    2052:	1a c0       	rjmp	.+52     	; 0x2088 <_Z11ReceiveGAVRv+0x49e>
				}//end case 4
				case 5:{
					flagReceivingGAVR=fFalse;
    2054:	10 92 d1 01 	sts	0x01D1, r1
					state=0;		//just in case
    2058:	10 92 e7 01 	sts	0x01E7, r1
    205c:	10 92 e6 01 	sts	0x01E6, r1
					break;
    2060:	13 c0       	rjmp	.+38     	; 0x2088 <_Z11ReceiveGAVRv+0x49e>
				}//end case 5
				case 6:{
					PrintGAVR("ACKERROR.");
    2062:	85 e7       	ldi	r24, 0x75	; 117
    2064:	91 e0       	ldi	r25, 0x01	; 1
    2066:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
					state=5;
    206a:	85 e0       	ldi	r24, 0x05	; 5
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	90 93 e7 01 	sts	0x01E7, r25
    2072:	80 93 e6 01 	sts	0x01E6, r24
				}//end case 6
				default: {state=0; strLoc=0; flagReceivingGAVR=fFalse; break;}				
    2076:	10 92 e7 01 	sts	0x01E7, r1
    207a:	10 92 e6 01 	sts	0x01E6, r1
    207e:	1c a2       	lds	r17, 0x9c
    2080:	1b a2       	lds	r17, 0x9b
    2082:	10 92 d1 01 	sts	0x01D1, r1
    2086:	00 00       	nop
	char recChar, recString[20];
	volatile unsigned int strLoc=0;
	BOOL noCarriage=fTrue;
	
	//While Loop
	while (flagReceivingGAVR){
    2088:	90 91 d1 01 	lds	r25, 0x01D1
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	99 23       	and	r25, r25
    2090:	09 f4       	brne	.+2      	; 0x2094 <_Z11ReceiveGAVRv+0x4aa>
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	88 23       	and	r24, r24
    2096:	09 f0       	breq	.+2      	; 0x209a <_Z11ReceiveGAVRv+0x4b0>
    2098:	b7 cd       	rjmp	.-1170   	; 0x1c08 <_Z11ReceiveGAVRv+0x1e>
					state=5;
				}//end case 6
				default: {state=0; strLoc=0; flagReceivingGAVR=fFalse; break;}				
			}//end switch	
		}//end while flagReceivingGAVR	
}
    209a:	e3 96       	adiw	r28, 0x33	; 51
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	df 91       	pop	r29
    20a8:	cf 91       	pop	r28
    20aa:	08 95       	ret

000020ac <_Z13printTimeDatehhh>:
/*************************************************************************************************************/
//To print to WAVR, cariable needs to be false. Print to Bone requires WAVRorBone to be true
void printTimeDate(BOOL WAVRorBone, BOOL pTime,BOOL pDate){
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	eb 97       	sbiw	r28, 0x3b	; 59
    20b6:	0f b6       	in	r0, 0x3f	; 63
    20b8:	f8 94       	cli
    20ba:	de bf       	out	0x3e, r29	; 62
    20bc:	0f be       	out	0x3f, r0	; 63
    20be:	cd bf       	out	0x3d, r28	; 61
    20c0:	89 af       	sts	0x79, r24
    20c2:	6a af       	sts	0x7a, r22
    20c4:	4b af       	sts	0x7b, r20
	if (WAVRorBone){ //Printing to BeagleBone
    20c6:	89 ad       	sts	0x69, r24
    20c8:	88 23       	and	r24, r24
    20ca:	49 f1       	breq	.+82     	; 0x211e <_Z13printTimeDatehhh+0x72>
		if (pTime){
    20cc:	8a ad       	sts	0x6a, r24
    20ce:	88 23       	and	r24, r24
    20d0:	89 f0       	breq	.+34     	; 0x20f4 <_Z13printTimeDatehhh+0x48>
			char tempTime[11];
			strcpy(tempTime,currentTime.getTime());
    20d2:	86 ea       	ldi	r24, 0xA6	; 166
    20d4:	91 e0       	ldi	r25, 0x01	; 1
    20d6:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN6myTime7getTimeEv>
    20da:	9c 01       	movw	r18, r24
    20dc:	ce 01       	movw	r24, r28
    20de:	01 96       	adiw	r24, 0x01	; 1
    20e0:	b9 01       	movw	r22, r18
    20e2:	0e 94 aa 18 	call	0x3154	; 0x3154 <strcpy>
			PrintBone(tempTime);
    20e6:	ce 01       	movw	r24, r28
    20e8:	01 96       	adiw	r24, 0x01	; 1
    20ea:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
			PutUartChBone('/');
    20ee:	8f e2       	ldi	r24, 0x2F	; 47
    20f0:	0e 94 a2 08 	call	0x1144	; 0x1144 <_Z13PutUartChBonec>
		}
		if (pDate){
    20f4:	8b ad       	sts	0x6b, r24
    20f6:	88 23       	and	r24, r24
    20f8:	d1 f1       	breq	.+116    	; 0x216e <_Z13printTimeDatehhh+0xc2>
			char tempDate[17];
			strcpy(tempDate,currentTime.getDate());
    20fa:	86 ea       	ldi	r24, 0xA6	; 166
    20fc:	91 e0       	ldi	r25, 0x01	; 1
    20fe:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN6myDate7getDateEv>
    2102:	9c 01       	movw	r18, r24
    2104:	ce 01       	movw	r24, r28
    2106:	0c 96       	adiw	r24, 0x0c	; 12
    2108:	b9 01       	movw	r22, r18
    210a:	0e 94 aa 18 	call	0x3154	; 0x3154 <strcpy>
			PrintBone(tempDate);
    210e:	ce 01       	movw	r24, r28
    2110:	0c 96       	adiw	r24, 0x0c	; 12
    2112:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
			PutUartChGAVR('.');
    2116:	8e e2       	ldi	r24, 0x2E	; 46
    2118:	0e 94 ed 08 	call	0x11da	; 0x11da <_Z13PutUartChGAVRc>
    211c:	28 c0       	rjmp	.+80     	; 0x216e <_Z13printTimeDatehhh+0xc2>
		}
	} else { //Printing to GAVR
		if (pTime){
    211e:	8a ad       	sts	0x6a, r24
    2120:	88 23       	and	r24, r24
    2122:	89 f0       	breq	.+34     	; 0x2146 <_Z13printTimeDatehhh+0x9a>
			char tempTime[11];
			strcpy(tempTime,currentTime.getTime());
    2124:	86 ea       	ldi	r24, 0xA6	; 166
    2126:	91 e0       	ldi	r25, 0x01	; 1
    2128:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN6myTime7getTimeEv>
    212c:	9c 01       	movw	r18, r24
    212e:	ce 01       	movw	r24, r28
    2130:	4d 96       	adiw	r24, 0x1d	; 29
    2132:	b9 01       	movw	r22, r18
    2134:	0e 94 aa 18 	call	0x3154	; 0x3154 <strcpy>
			PrintGAVR(tempTime);
    2138:	ce 01       	movw	r24, r28
    213a:	4d 96       	adiw	r24, 0x1d	; 29
    213c:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
			PutUartChGAVR('/');
    2140:	8f e2       	ldi	r24, 0x2F	; 47
    2142:	0e 94 ed 08 	call	0x11da	; 0x11da <_Z13PutUartChGAVRc>
		}
		if (pDate){
    2146:	8b ad       	sts	0x6b, r24
    2148:	88 23       	and	r24, r24
    214a:	89 f0       	breq	.+34     	; 0x216e <_Z13printTimeDatehhh+0xc2>
			char tempDate[17];
			strcpy(tempDate,currentTime.getDate());
    214c:	86 ea       	ldi	r24, 0xA6	; 166
    214e:	91 e0       	ldi	r25, 0x01	; 1
    2150:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN6myDate7getDateEv>
    2154:	9c 01       	movw	r18, r24
    2156:	ce 01       	movw	r24, r28
    2158:	88 96       	adiw	r24, 0x28	; 40
    215a:	b9 01       	movw	r22, r18
    215c:	0e 94 aa 18 	call	0x3154	; 0x3154 <strcpy>
			PrintGAVR(tempDate);
    2160:	ce 01       	movw	r24, r28
    2162:	88 96       	adiw	r24, 0x28	; 40
    2164:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
			PutUartChGAVR('.');
    2168:	8e e2       	ldi	r24, 0x2E	; 46
    216a:	0e 94 ed 08 	call	0x11da	; 0x11da <_Z13PutUartChGAVRc>
		}
	}
}
    216e:	eb 96       	adiw	r28, 0x3b	; 59
    2170:	0f b6       	in	r0, 0x3f	; 63
    2172:	f8 94       	cli
    2174:	de bf       	out	0x3e, r29	; 62
    2176:	0f be       	out	0x3f, r0	; 63
    2178:	cd bf       	out	0x3d, r28	; 61
    217a:	df 91       	pop	r29
    217c:	cf 91       	pop	r28
    217e:	08 95       	ret

00002180 <__vector_6>:
/****************************************************************************************************************/


/*--------------------------Interrupt Service Routines------------------------------------------------------------------------------------*/
//PCINT_17: Getting information from the GAVR
ISR(PCINT2_vect){
    2180:	1f 92       	push	r1
    2182:	0f 92       	push	r0
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	0f 92       	push	r0
    2188:	11 24       	eor	r1, r1
    218a:	2f 93       	push	r18
    218c:	3f 93       	push	r19
    218e:	4f 93       	push	r20
    2190:	5f 93       	push	r21
    2192:	6f 93       	push	r22
    2194:	7f 93       	push	r23
    2196:	8f 93       	push	r24
    2198:	9f 93       	push	r25
    219a:	af 93       	push	r26
    219c:	bf 93       	push	r27
    219e:	ef 93       	push	r30
    21a0:	ff 93       	push	r31
    21a2:	cf 93       	push	r28
    21a4:	df 93       	push	r29
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
	if ((PINC & (1 << PCINT17)) && !flagShutdown){
    21aa:	86 e2       	ldi	r24, 0x26	; 38
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	fc 01       	movw	r30, r24
    21b0:	80 81       	ld	r24, Z
    21b2:	88 2f       	mov	r24, r24
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	82 70       	andi	r24, 0x02	; 2
    21b8:	90 70       	andi	r25, 0x00	; 0
    21ba:	00 97       	sbiw	r24, 0x00	; 0
    21bc:	31 f0       	breq	.+12     	; 0x21ca <__vector_6+0x4a>
    21be:	80 91 db 01 	lds	r24, 0x01DB
    21c2:	88 23       	and	r24, r24
    21c4:	11 f4       	brne	.+4      	; 0x21ca <__vector_6+0x4a>
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	01 c0       	rjmp	.+2      	; 0x21cc <__vector_6+0x4c>
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	88 23       	and	r24, r24
    21ce:	c9 f0       	breq	.+50     	; 0x2202 <__vector_6+0x82>
		//Do work, correct interrupt
		UCSR1B |= (1 << RXCIE1);
    21d0:	89 ec       	ldi	r24, 0xC9	; 201
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	29 ec       	ldi	r18, 0xC9	; 201
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	f9 01       	movw	r30, r18
    21da:	20 81       	ld	r18, Z
    21dc:	20 68       	ori	r18, 0x80	; 128
    21de:	fc 01       	movw	r30, r24
    21e0:	20 83       	st	Z, r18
		flagGoToSleep=fFalse;
    21e2:	10 92 ce 01 	sts	0x01CE, r1
		flagNormalMode=fFalse;
    21e6:	10 92 d0 01 	sts	0x01D0, r1
		__killCommINT();
    21ea:	8d e3       	ldi	r24, 0x3D	; 61
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	fc 01       	movw	r30, r24
    21f0:	10 82       	st	Z, r1
    21f2:	8d e6       	ldi	r24, 0x6D	; 109
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	fc 01       	movw	r30, r24
    21f8:	10 82       	st	Z, r1
		//Acknowledge
		PrintGAVR("ACKG");
    21fa:	88 e9       	ldi	r24, 0x98	; 152
    21fc:	91 e0       	ldi	r25, 0x01	; 1
    21fe:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
	}
}	
    2202:	df 91       	pop	r29
    2204:	cf 91       	pop	r28
    2206:	ff 91       	pop	r31
    2208:	ef 91       	pop	r30
    220a:	bf 91       	pop	r27
    220c:	af 91       	pop	r26
    220e:	9f 91       	pop	r25
    2210:	8f 91       	pop	r24
    2212:	7f 91       	pop	r23
    2214:	6f 91       	pop	r22
    2216:	5f 91       	pop	r21
    2218:	4f 91       	pop	r20
    221a:	3f 91       	pop	r19
    221c:	2f 91       	pop	r18
    221e:	0f 90       	pop	r0
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	0f 90       	pop	r0
    2224:	1f 90       	pop	r1
    2226:	18 95       	reti

00002228 <__vector_3>:

//INT2: Getting information from BeagleBone
ISR(INT2_vect){	//about to get time, get things ready
    2228:	1f 92       	push	r1
    222a:	0f 92       	push	r0
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	0f 92       	push	r0
    2230:	11 24       	eor	r1, r1
    2232:	2f 93       	push	r18
    2234:	3f 93       	push	r19
    2236:	4f 93       	push	r20
    2238:	5f 93       	push	r21
    223a:	6f 93       	push	r22
    223c:	7f 93       	push	r23
    223e:	8f 93       	push	r24
    2240:	9f 93       	push	r25
    2242:	af 93       	push	r26
    2244:	bf 93       	push	r27
    2246:	ef 93       	push	r30
    2248:	ff 93       	push	r31
    224a:	cf 93       	push	r28
    224c:	df 93       	push	r29
    224e:	cd b7       	in	r28, 0x3d	; 61
    2250:	de b7       	in	r29, 0x3e	; 62
	if (!flagShutdown){		//If things are off, don't let noise do an interrupt. Shouldn't happen anyways.
    2252:	80 91 db 01 	lds	r24, 0x01DB
    2256:	88 23       	and	r24, r24
    2258:	c9 f4       	brne	.+50     	; 0x228c <__vector_3+0x64>
		UCSR0B |= (1 << RXCIE0);
    225a:	81 ec       	ldi	r24, 0xC1	; 193
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	21 ec       	ldi	r18, 0xC1	; 193
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	f9 01       	movw	r30, r18
    2264:	20 81       	ld	r18, Z
    2266:	20 68       	ori	r18, 0x80	; 128
    2268:	fc 01       	movw	r30, r24
    226a:	20 83       	st	Z, r18
		flagGoToSleep=fFalse;	//no sleeping, wait for UART_RX
    226c:	10 92 ce 01 	sts	0x01CE, r1
		flagNormalMode=fFalse;
    2270:	10 92 d0 01 	sts	0x01D0, r1
		__killCommINT();
    2274:	8d e3       	ldi	r24, 0x3D	; 61
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	fc 01       	movw	r30, r24
    227a:	10 82       	st	Z, r1
    227c:	8d e6       	ldi	r24, 0x6D	; 109
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	fc 01       	movw	r30, r24
    2282:	10 82       	st	Z, r1
		//Acknowledge connection, disable INT2_vect
		PrintBone("ACKT");
    2284:	8d e9       	ldi	r24, 0x9D	; 157
    2286:	91 e0       	ldi	r25, 0x01	; 1
    2288:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
	}	
}
    228c:	df 91       	pop	r29
    228e:	cf 91       	pop	r28
    2290:	ff 91       	pop	r31
    2292:	ef 91       	pop	r30
    2294:	bf 91       	pop	r27
    2296:	af 91       	pop	r26
    2298:	9f 91       	pop	r25
    229a:	8f 91       	pop	r24
    229c:	7f 91       	pop	r23
    229e:	6f 91       	pop	r22
    22a0:	5f 91       	pop	r21
    22a2:	4f 91       	pop	r20
    22a4:	3f 91       	pop	r19
    22a6:	2f 91       	pop	r18
    22a8:	0f 90       	pop	r0
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	0f 90       	pop	r0
    22ae:	1f 90       	pop	r1
    22b0:	18 95       	reti

000022b2 <__vector_11>:

//RTC Timer.
ISR(TIMER2_OVF_vect){
    22b2:	1f 92       	push	r1
    22b4:	0f 92       	push	r0
    22b6:	0f b6       	in	r0, 0x3f	; 63
    22b8:	0f 92       	push	r0
    22ba:	11 24       	eor	r1, r1
    22bc:	2f 93       	push	r18
    22be:	3f 93       	push	r19
    22c0:	4f 93       	push	r20
    22c2:	5f 93       	push	r21
    22c4:	6f 93       	push	r22
    22c6:	7f 93       	push	r23
    22c8:	8f 93       	push	r24
    22ca:	9f 93       	push	r25
    22cc:	af 93       	push	r26
    22ce:	bf 93       	push	r27
    22d0:	ef 93       	push	r30
    22d2:	ff 93       	push	r31
    22d4:	cf 93       	push	r28
    22d6:	df 93       	push	r29
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
	volatile static int timeOut = 0;
	volatile static int gavrSendTimeout=0, boneReceiveTimeout=0;
	
	currentTime.addSeconds(1);
    22dc:	86 ea       	ldi	r24, 0xA6	; 166
    22de:	91 e0       	ldi	r25, 0x01	; 1
    22e0:	61 e0       	ldi	r22, 0x01	; 1
    22e2:	70 e0       	ldi	r23, 0x00	; 0
    22e4:	0e 94 77 06 	call	0xcee	; 0xcee <_ZN6myTime10addSecondsEi>
	
	//GAVR Transmission Timeout
	if (flagSendingGAVR && gavrSendTimeout <=COMM_TIMEOUT_SEC){gavrSendTimeout++;}
    22e8:	80 91 d4 01 	lds	r24, 0x01D4
    22ec:	88 23       	and	r24, r24
    22ee:	49 f0       	breq	.+18     	; 0x2302 <__vector_11+0x50>
    22f0:	80 91 e0 01 	lds	r24, 0x01E0
    22f4:	90 91 e1 01 	lds	r25, 0x01E1
    22f8:	84 30       	cpi	r24, 0x04	; 4
    22fa:	91 05       	cpc	r25, r1
    22fc:	14 f4       	brge	.+4      	; 0x2302 <__vector_11+0x50>
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	01 c0       	rjmp	.+2      	; 0x2304 <__vector_11+0x52>
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	88 23       	and	r24, r24
    2306:	51 f0       	breq	.+20     	; 0x231c <__vector_11+0x6a>
    2308:	80 91 e0 01 	lds	r24, 0x01E0
    230c:	90 91 e1 01 	lds	r25, 0x01E1
    2310:	01 96       	adiw	r24, 0x01	; 1
    2312:	90 93 e1 01 	sts	0x01E1, r25
    2316:	80 93 e0 01 	sts	0x01E0, r24
    231a:	39 c0       	rjmp	.+114    	; 0x238e <__vector_11+0xdc>
	else if (flagSendingGAVR && gavrSendTimeout > COMM_TIMEOUT_SEC){flagSendingGAVR=fFalse; gavrSendTimeout=0; __enableCommINT();}
    231c:	80 91 d4 01 	lds	r24, 0x01D4
    2320:	88 23       	and	r24, r24
    2322:	49 f0       	breq	.+18     	; 0x2336 <__vector_11+0x84>
    2324:	80 91 e0 01 	lds	r24, 0x01E0
    2328:	90 91 e1 01 	lds	r25, 0x01E1
    232c:	84 30       	cpi	r24, 0x04	; 4
    232e:	91 05       	cpc	r25, r1
    2330:	14 f0       	brlt	.+4      	; 0x2336 <__vector_11+0x84>
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	01 c0       	rjmp	.+2      	; 0x2338 <__vector_11+0x86>
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	88 23       	and	r24, r24
    233a:	a9 f0       	breq	.+42     	; 0x2366 <__vector_11+0xb4>
    233c:	10 92 d4 01 	sts	0x01D4, r1
    2340:	10 92 e1 01 	sts	0x01E1, r1
    2344:	10 92 e0 01 	sts	0x01E0, r1
    2348:	8d e3       	ldi	r24, 0x3D	; 61
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	2d e3       	ldi	r18, 0x3D	; 61
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	f9 01       	movw	r30, r18
    2352:	20 81       	ld	r18, Z
    2354:	24 60       	ori	r18, 0x04	; 4
    2356:	fc 01       	movw	r30, r24
    2358:	20 83       	st	Z, r18
    235a:	8d e6       	ldi	r24, 0x6D	; 109
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	22 e0       	ldi	r18, 0x02	; 2
    2360:	fc 01       	movw	r30, r24
    2362:	20 83       	st	Z, r18
    2364:	14 c0       	rjmp	.+40     	; 0x238e <__vector_11+0xdc>
	else if (!flagSendingGAVR && gavrSendTimeout > 0){gavrSendTimeout=0;}
    2366:	80 91 d4 01 	lds	r24, 0x01D4
    236a:	88 23       	and	r24, r24
    236c:	49 f4       	brne	.+18     	; 0x2380 <__vector_11+0xce>
    236e:	80 91 e0 01 	lds	r24, 0x01E0
    2372:	90 91 e1 01 	lds	r25, 0x01E1
    2376:	18 16       	cp	r1, r24
    2378:	19 06       	cpc	r1, r25
    237a:	14 f4       	brge	.+4      	; 0x2380 <__vector_11+0xce>
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	01 c0       	rjmp	.+2      	; 0x2382 <__vector_11+0xd0>
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	88 23       	and	r24, r24
    2384:	21 f0       	breq	.+8      	; 0x238e <__vector_11+0xdc>
    2386:	10 92 e1 01 	sts	0x01E1, r1
    238a:	10 92 e0 01 	sts	0x01E0, r1
	else;
	
	//BeagleBone Reception Timeout
	if (flagReceivingBone && boneReceiveTimeout <=COMM_TIMEOUT_SEC){boneReceiveTimeout++;}
    238e:	80 91 cf 01 	lds	r24, 0x01CF
    2392:	88 23       	and	r24, r24
    2394:	49 f0       	breq	.+18     	; 0x23a8 <__vector_11+0xf6>
    2396:	80 91 e2 01 	lds	r24, 0x01E2
    239a:	90 91 e3 01 	lds	r25, 0x01E3
    239e:	84 30       	cpi	r24, 0x04	; 4
    23a0:	91 05       	cpc	r25, r1
    23a2:	14 f4       	brge	.+4      	; 0x23a8 <__vector_11+0xf6>
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	01 c0       	rjmp	.+2      	; 0x23aa <__vector_11+0xf8>
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	88 23       	and	r24, r24
    23ac:	51 f0       	breq	.+20     	; 0x23c2 <__vector_11+0x110>
    23ae:	80 91 e2 01 	lds	r24, 0x01E2
    23b2:	90 91 e3 01 	lds	r25, 0x01E3
    23b6:	01 96       	adiw	r24, 0x01	; 1
    23b8:	90 93 e3 01 	sts	0x01E3, r25
    23bc:	80 93 e2 01 	sts	0x01E2, r24
    23c0:	39 c0       	rjmp	.+114    	; 0x2434 <__vector_11+0x182>
	else if (flagReceivingBone && boneReceiveTimeout > COMM_TIMEOUT_SEC){flagReceivingBone=fFalse; boneReceiveTimeout=0; __enableCommINT();}
    23c2:	80 91 cf 01 	lds	r24, 0x01CF
    23c6:	88 23       	and	r24, r24
    23c8:	49 f0       	breq	.+18     	; 0x23dc <__vector_11+0x12a>
    23ca:	80 91 e2 01 	lds	r24, 0x01E2
    23ce:	90 91 e3 01 	lds	r25, 0x01E3
    23d2:	84 30       	cpi	r24, 0x04	; 4
    23d4:	91 05       	cpc	r25, r1
    23d6:	14 f0       	brlt	.+4      	; 0x23dc <__vector_11+0x12a>
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	01 c0       	rjmp	.+2      	; 0x23de <__vector_11+0x12c>
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	88 23       	and	r24, r24
    23e0:	a9 f0       	breq	.+42     	; 0x240c <__vector_11+0x15a>
    23e2:	10 92 cf 01 	sts	0x01CF, r1
    23e6:	10 92 e3 01 	sts	0x01E3, r1
    23ea:	10 92 e2 01 	sts	0x01E2, r1
    23ee:	8d e3       	ldi	r24, 0x3D	; 61
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	2d e3       	ldi	r18, 0x3D	; 61
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	f9 01       	movw	r30, r18
    23f8:	20 81       	ld	r18, Z
    23fa:	24 60       	ori	r18, 0x04	; 4
    23fc:	fc 01       	movw	r30, r24
    23fe:	20 83       	st	Z, r18
    2400:	8d e6       	ldi	r24, 0x6D	; 109
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	22 e0       	ldi	r18, 0x02	; 2
    2406:	fc 01       	movw	r30, r24
    2408:	20 83       	st	Z, r18
    240a:	14 c0       	rjmp	.+40     	; 0x2434 <__vector_11+0x182>
	else if (!flagReceivingBone && boneReceiveTimeout > 0){boneReceiveTimeout=0;}
    240c:	80 91 cf 01 	lds	r24, 0x01CF
    2410:	88 23       	and	r24, r24
    2412:	49 f4       	brne	.+18     	; 0x2426 <__vector_11+0x174>
    2414:	80 91 e2 01 	lds	r24, 0x01E2
    2418:	90 91 e3 01 	lds	r25, 0x01E3
    241c:	18 16       	cp	r1, r24
    241e:	19 06       	cpc	r1, r25
    2420:	14 f4       	brge	.+4      	; 0x2426 <__vector_11+0x174>
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	01 c0       	rjmp	.+2      	; 0x2428 <__vector_11+0x176>
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	88 23       	and	r24, r24
    242a:	21 f0       	breq	.+8      	; 0x2434 <__vector_11+0x182>
    242c:	10 92 e3 01 	sts	0x01E3, r1
    2430:	10 92 e2 01 	sts	0x01E2, r1
	else;
	
	//*********This is outdated*********
	if ((flagReceivingBone == fTrue || flagGoToSleep == fFalse) && !flagNewShutdown && !restart){ //if waiting for a character in Receive0() or in main program without sleep
    2434:	80 91 cf 01 	lds	r24, 0x01CF
    2438:	81 30       	cpi	r24, 0x01	; 1
    243a:	21 f0       	breq	.+8      	; 0x2444 <__vector_11+0x192>
    243c:	80 91 ce 01 	lds	r24, 0x01CE
    2440:	88 23       	and	r24, r24
    2442:	b9 f5       	brne	.+110    	; 0x24b2 <__vector_11+0x200>
    2444:	80 91 da 01 	lds	r24, 0x01DA
    2448:	88 23       	and	r24, r24
    244a:	99 f5       	brne	.+102    	; 0x24b2 <__vector_11+0x200>
    244c:	80 91 de 01 	lds	r24, 0x01DE
    2450:	88 23       	and	r24, r24
    2452:	79 f5       	brne	.+94     	; 0x24b2 <__vector_11+0x200>
		timeOut++;
    2454:	80 91 e4 01 	lds	r24, 0x01E4
    2458:	90 91 e5 01 	lds	r25, 0x01E5
    245c:	01 96       	adiw	r24, 0x01	; 1
    245e:	90 93 e5 01 	sts	0x01E5, r25
    2462:	80 93 e4 01 	sts	0x01E4, r24
		if (timeOut >= 6){
    2466:	80 91 e4 01 	lds	r24, 0x01E4
    246a:	90 91 e5 01 	lds	r25, 0x01E5
    246e:	21 e0       	ldi	r18, 0x01	; 1
    2470:	86 30       	cpi	r24, 0x06	; 6
    2472:	91 05       	cpc	r25, r1
    2474:	0c f4       	brge	.+2      	; 0x2478 <__vector_11+0x1c6>
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	22 23       	and	r18, r18
    247a:	51 f1       	breq	.+84     	; 0x24d0 <__vector_11+0x21e>
			__enableCommINT();
    247c:	8d e3       	ldi	r24, 0x3D	; 61
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	2d e3       	ldi	r18, 0x3D	; 61
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	f9 01       	movw	r30, r18
    2486:	20 81       	ld	r18, Z
    2488:	24 60       	ori	r18, 0x04	; 4
    248a:	fc 01       	movw	r30, r24
    248c:	20 83       	st	Z, r18
    248e:	8d e6       	ldi	r24, 0x6D	; 109
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	22 e0       	ldi	r18, 0x02	; 2
    2494:	fc 01       	movw	r30, r24
    2496:	20 83       	st	Z, r18
			flagReceivingBone = fFalse;
    2498:	10 92 cf 01 	sts	0x01CF, r1
			flagGoToSleep = fTrue;
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	80 93 ce 01 	sts	0x01CE, r24
			flagNormalMode=fTrue;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	80 93 d0 01 	sts	0x01D0, r24
			timeOut = 0;
    24a8:	10 92 e5 01 	sts	0x01E5, r1
    24ac:	10 92 e4 01 	sts	0x01E4, r1
	else;
	
	//*********This is outdated*********
	if ((flagReceivingBone == fTrue || flagGoToSleep == fFalse) && !flagNewShutdown && !restart){ //if waiting for a character in Receive0() or in main program without sleep
		timeOut++;
		if (timeOut >= 6){
    24b0:	0f c0       	rjmp	.+30     	; 0x24d0 <__vector_11+0x21e>
			flagReceivingBone = fFalse;
			flagGoToSleep = fTrue;
			flagNormalMode=fTrue;
			timeOut = 0;
		}
	} else if (timeOut > 0){
    24b2:	80 91 e4 01 	lds	r24, 0x01E4
    24b6:	90 91 e5 01 	lds	r25, 0x01E5
    24ba:	21 e0       	ldi	r18, 0x01	; 1
    24bc:	18 16       	cp	r1, r24
    24be:	19 06       	cpc	r1, r25
    24c0:	0c f0       	brlt	.+2      	; 0x24c4 <__vector_11+0x212>
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	22 23       	and	r18, r18
    24c6:	21 f0       	breq	.+8      	; 0x24d0 <__vector_11+0x21e>
		timeOut = 0;
    24c8:	10 92 e5 01 	sts	0x01E5, r1
    24cc:	10 92 e4 01 	sts	0x01E4, r1
	} else;

}
    24d0:	df 91       	pop	r29
    24d2:	cf 91       	pop	r28
    24d4:	ff 91       	pop	r31
    24d6:	ef 91       	pop	r30
    24d8:	bf 91       	pop	r27
    24da:	af 91       	pop	r26
    24dc:	9f 91       	pop	r25
    24de:	8f 91       	pop	r24
    24e0:	7f 91       	pop	r23
    24e2:	6f 91       	pop	r22
    24e4:	5f 91       	pop	r21
    24e6:	4f 91       	pop	r20
    24e8:	3f 91       	pop	r19
    24ea:	2f 91       	pop	r18
    24ec:	0f 90       	pop	r0
    24ee:	0f be       	out	0x3f, r0	; 63
    24f0:	0f 90       	pop	r0
    24f2:	1f 90       	pop	r1
    24f4:	18 95       	reti

000024f6 <__vector_20>:

//UART Receive from BeagleBone
ISR(USART0_RX_vect){
    24f6:	1f 92       	push	r1
    24f8:	0f 92       	push	r0
    24fa:	0f b6       	in	r0, 0x3f	; 63
    24fc:	0f 92       	push	r0
    24fe:	11 24       	eor	r1, r1
    2500:	2f 93       	push	r18
    2502:	3f 93       	push	r19
    2504:	8f 93       	push	r24
    2506:	9f 93       	push	r25
    2508:	ef 93       	push	r30
    250a:	ff 93       	push	r31
    250c:	cf 93       	push	r28
    250e:	df 93       	push	r29
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
	UCSR0B &= ~(1 << RXCIE0);
    2514:	81 ec       	ldi	r24, 0xC1	; 193
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	21 ec       	ldi	r18, 0xC1	; 193
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	f9 01       	movw	r30, r18
    251e:	20 81       	ld	r18, Z
    2520:	2f 77       	andi	r18, 0x7F	; 127
    2522:	fc 01       	movw	r30, r24
    2524:	20 83       	st	Z, r18
	__killCommINT();				//make sure all interrupts are disabled that could cripple protocol
    2526:	8d e3       	ldi	r24, 0x3D	; 61
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	fc 01       	movw	r30, r24
    252c:	10 82       	st	Z, r1
    252e:	8d e6       	ldi	r24, 0x6D	; 109
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	fc 01       	movw	r30, r24
    2534:	10 82       	st	Z, r1
	flagReceivingBone=fTrue;
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	80 93 cf 01 	sts	0x01CF, r24
}
    253c:	df 91       	pop	r29
    253e:	cf 91       	pop	r28
    2540:	ff 91       	pop	r31
    2542:	ef 91       	pop	r30
    2544:	9f 91       	pop	r25
    2546:	8f 91       	pop	r24
    2548:	3f 91       	pop	r19
    254a:	2f 91       	pop	r18
    254c:	0f 90       	pop	r0
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	0f 90       	pop	r0
    2552:	1f 90       	pop	r1
    2554:	18 95       	reti

00002556 <__vector_28>:

ISR(USART1_RX_vect){
    2556:	1f 92       	push	r1
    2558:	0f 92       	push	r0
    255a:	0f b6       	in	r0, 0x3f	; 63
    255c:	0f 92       	push	r0
    255e:	11 24       	eor	r1, r1
    2560:	2f 93       	push	r18
    2562:	3f 93       	push	r19
    2564:	8f 93       	push	r24
    2566:	9f 93       	push	r25
    2568:	ef 93       	push	r30
    256a:	ff 93       	push	r31
    256c:	cf 93       	push	r28
    256e:	df 93       	push	r29
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
	UCSR1B &= ~(1 <<RXCIE1);	//disable interrupt
    2574:	89 ec       	ldi	r24, 0xC9	; 201
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	29 ec       	ldi	r18, 0xC9	; 201
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	f9 01       	movw	r30, r18
    257e:	20 81       	ld	r18, Z
    2580:	2f 77       	andi	r18, 0x7F	; 127
    2582:	fc 01       	movw	r30, r24
    2584:	20 83       	st	Z, r18
	__killCommINT();
    2586:	8d e3       	ldi	r24, 0x3D	; 61
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	fc 01       	movw	r30, r24
    258c:	10 82       	st	Z, r1
    258e:	8d e6       	ldi	r24, 0x6D	; 109
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	fc 01       	movw	r30, r24
    2594:	10 82       	st	Z, r1
	//flagReceivingGAVR=fTrue;
}
    2596:	df 91       	pop	r29
    2598:	cf 91       	pop	r28
    259a:	ff 91       	pop	r31
    259c:	ef 91       	pop	r30
    259e:	9f 91       	pop	r25
    25a0:	8f 91       	pop	r24
    25a2:	3f 91       	pop	r19
    25a4:	2f 91       	pop	r18
    25a6:	0f 90       	pop	r0
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	0f 90       	pop	r0
    25ac:	1f 90       	pop	r1
    25ae:	18 95       	reti

000025b0 <main>:

/*--------------------------END-Interrupt Service Routines--------------------------------------------------------------------------------*/
/*--------------------------START-Main Program--------------------------------------------------------------------------------------------*/

int main(void)
{
    25b0:	cf 93       	push	r28
    25b2:	df 93       	push	r29
    25b4:	00 d0       	rcall	.+0      	; 0x25b6 <main+0x6>
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
	//Setup
	DeviceInit();
    25ba:	0e 94 05 14 	call	0x280a	; 0x280a <_Z10DeviceInitv>
	AppInit(MYUBRR);
    25be:	81 e8       	ldi	r24, 0x81	; 129
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	0e 94 2c 14 	call	0x2858	; 0x2858 <_Z7AppInitj>
	EnableRTCTimer();
    25c6:	0e 94 42 15 	call	0x2a84	; 0x2a84 <_Z14EnableRTCTimerv>
	getDateTime_eeprom(fTrue,fTrue);
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	61 e0       	ldi	r22, 0x01	; 1
    25ce:	0e 94 8e 07 	call	0xf1c	; 0xf1c <_Z18getDateTime_eepromhh>
	sei();
    25d2:	78 94       	sei
	//Prep/make sure power/temp is good
	GetTemp();
    25d4:	0e 94 03 17 	call	0x2e06	; 0x2e06 <_Z7GetTempv>
	//flagGoodTemp=fTrue;
	TakeADC();
    25d8:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <_Z7TakeADCv>
	if (flagGoodVolts && flagGoodTemp){PowerUp(POWER_UP_INTERVAL);flagFreshStart=fTrue;}
    25dc:	80 91 dd 01 	lds	r24, 0x01DD
    25e0:	88 23       	and	r24, r24
    25e2:	61 f0       	breq	.+24     	; 0x25fc <main+0x4c>
    25e4:	80 91 dc 01 	lds	r24, 0x01DC
    25e8:	88 23       	and	r24, r24
    25ea:	41 f0       	breq	.+16     	; 0x25fc <main+0x4c>
    25ec:	88 eb       	ldi	r24, 0xB8	; 184
    25ee:	9b e0       	ldi	r25, 0x0B	; 11
    25f0:	0e 94 89 17 	call	0x2f12	; 0x2f12 <_Z7PowerUpj>
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	80 93 df 01 	sts	0x01DF, r24
    25fa:	07 c0       	rjmp	.+14     	; 0x260a <main+0x5a>
	else {flagNormalMode=fTrue;flagFreshStart=fFalse;}
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	80 93 d0 01 	sts	0x01D0, r24
    2602:	10 92 df 01 	sts	0x01DF, r1
    2606:	01 c0       	rjmp	.+2      	; 0x260a <main+0x5a>
		
	//main programming loop
	while(fTrue)
    2608:	00 00       	nop
	{				
		//If receiving UART string, go get rest of it.
		if (flagReceivingBone){
    260a:	80 91 cf 01 	lds	r24, 0x01CF
    260e:	88 23       	and	r24, r24
    2610:	b1 f0       	breq	.+44     	; 0x263e <main+0x8e>
			ReceiveBone();
    2612:	0e 94 b9 0b 	call	0x1772	; 0x1772 <_Z11ReceiveBonev>
			__enableCommINT();
    2616:	8d e3       	ldi	r24, 0x3D	; 61
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	2d e3       	ldi	r18, 0x3D	; 61
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	f9 01       	movw	r30, r18
    2620:	20 81       	ld	r18, Z
    2622:	24 60       	ori	r18, 0x04	; 4
    2624:	fc 01       	movw	r30, r24
    2626:	20 83       	st	Z, r18
    2628:	8d e6       	ldi	r24, 0x6D	; 109
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	22 e0       	ldi	r18, 0x02	; 2
    262e:	fc 01       	movw	r30, r24
    2630:	20 83       	st	Z, r18
			flagGoToSleep=fTrue;
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	80 93 ce 01 	sts	0x01CE, r24
			flagNormalMode=fTrue;
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	80 93 d0 01 	sts	0x01D0, r24
			flagNormalMode=fTrue;
		}
		*/
	
		//Communication with GAVR. Either updating the date/time on it or asking for date and time. The interal send machine deals with the flags.
		if (flagUpdateGAVRTime || flagUpdateGAVRDate || flagUserDate || flagUserTime){
    263e:	80 91 d2 01 	lds	r24, 0x01D2
    2642:	88 23       	and	r24, r24
    2644:	61 f4       	brne	.+24     	; 0x265e <main+0xae>
    2646:	80 91 d3 01 	lds	r24, 0x01D3
    264a:	88 23       	and	r24, r24
    264c:	41 f4       	brne	.+16     	; 0x265e <main+0xae>
    264e:	80 91 d5 01 	lds	r24, 0x01D5
    2652:	88 23       	and	r24, r24
    2654:	21 f4       	brne	.+8      	; 0x265e <main+0xae>
    2656:	80 91 d6 01 	lds	r24, 0x01D6
    265a:	88 23       	and	r24, r24
    265c:	c1 f0       	breq	.+48     	; 0x268e <main+0xde>
			__killCommINT();
    265e:	8d e3       	ldi	r24, 0x3D	; 61
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	fc 01       	movw	r30, r24
    2664:	10 82       	st	Z, r1
    2666:	8d e6       	ldi	r24, 0x6D	; 109
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	fc 01       	movw	r30, r24
    266c:	10 82       	st	Z, r1
			sendGAVR();
    266e:	0e 94 38 09 	call	0x1270	; 0x1270 <_Z8sendGAVRv>
			__enableCommINT();
    2672:	8d e3       	ldi	r24, 0x3D	; 61
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	2d e3       	ldi	r18, 0x3D	; 61
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	f9 01       	movw	r30, r18
    267c:	20 81       	ld	r18, Z
    267e:	24 60       	ori	r18, 0x04	; 4
    2680:	fc 01       	movw	r30, r24
    2682:	20 83       	st	Z, r18
    2684:	8d e6       	ldi	r24, 0x6D	; 109
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	22 e0       	ldi	r18, 0x02	; 2
    268a:	fc 01       	movw	r30, r24
    268c:	20 83       	st	Z, r18
		}

		//When to save to EEPROM. Saves time on lower half of the hour, saves data and time on lower half-hour of midday.
		if (flagNormalMode){
    268e:	80 91 d0 01 	lds	r24, 0x01D0
    2692:	88 23       	and	r24, r24
    2694:	49 f1       	breq	.+82     	; 0x26e8 <main+0x138>
			if (currentTime.getMinutes()%30 == 0){
    2696:	86 ea       	ldi	r24, 0xA6	; 166
    2698:	91 e0       	ldi	r25, 0x01	; 1
    269a:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6myTime10getMinutesEv>
    269e:	9e e1       	ldi	r25, 0x1E	; 30
    26a0:	69 2f       	mov	r22, r25
    26a2:	0e 94 3f 18 	call	0x307e	; 0x307e <__udivmodqi4>
    26a6:	89 2f       	mov	r24, r25
    26a8:	98 2f       	mov	r25, r24
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	99 23       	and	r25, r25
    26ae:	09 f0       	breq	.+2      	; 0x26b2 <main+0x102>
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	88 23       	and	r24, r24
    26b4:	c9 f0       	breq	.+50     	; 0x26e8 <main+0x138>
				if (currentTime.getHours()%12 == 0){
    26b6:	86 ea       	ldi	r24, 0xA6	; 166
    26b8:	91 e0       	ldi	r25, 0x01	; 1
    26ba:	0e 94 bb 04 	call	0x976	; 0x976 <_ZN6myTime8getHoursEv>
    26be:	9c e0       	ldi	r25, 0x0C	; 12
    26c0:	69 2f       	mov	r22, r25
    26c2:	0e 94 3f 18 	call	0x307e	; 0x307e <__udivmodqi4>
    26c6:	89 2f       	mov	r24, r25
    26c8:	98 2f       	mov	r25, r24
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	99 23       	and	r25, r25
    26ce:	09 f0       	breq	.+2      	; 0x26d2 <main+0x122>
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	88 23       	and	r24, r24
    26d4:	29 f0       	breq	.+10     	; 0x26e0 <main+0x130>
					saveDateTime_eeprom(fTrue,fTrue);
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	61 e0       	ldi	r22, 0x01	; 1
    26da:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
    26de:	04 c0       	rjmp	.+8      	; 0x26e8 <main+0x138>
				} else {
					saveDateTime_eeprom(fTrue,fFalse);
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	60 e0       	ldi	r22, 0x00	; 0
    26e4:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
				}	
			}						
		}
		
		//Take ADC reading to check battery level, temp to check board temperature.
		if (flagNormalMode){
    26e8:	80 91 d0 01 	lds	r24, 0x01D0
    26ec:	88 23       	and	r24, r24
    26ee:	21 f1       	breq	.+72     	; 0x2738 <main+0x188>
			TakeADC();
    26f0:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <_Z7TakeADCv>
			GetTemp();
    26f4:	0e 94 03 17 	call	0x2e06	; 0x2e06 <_Z7GetTempv>
			//If both are good & shutodwn is low, keep it low. If shutdown is high, pull low and enable restart
			if (flagGoodVolts && flagGoodTemp){
    26f8:	80 91 dd 01 	lds	r24, 0x01DD
    26fc:	88 23       	and	r24, r24
    26fe:	91 f0       	breq	.+36     	; 0x2724 <main+0x174>
    2700:	80 91 dc 01 	lds	r24, 0x01DC
    2704:	88 23       	and	r24, r24
    2706:	71 f0       	breq	.+28     	; 0x2724 <main+0x174>
				PowerUp(POWER_UP_INTERVAL);
    2708:	88 eb       	ldi	r24, 0xB8	; 184
    270a:	9b e0       	ldi	r25, 0x0B	; 11
    270c:	0e 94 89 17 	call	0x2f12	; 0x2f12 <_Z7PowerUpj>
				if( flagShutdown == fTrue){restart = fTrue;}
    2710:	80 91 db 01 	lds	r24, 0x01DB
    2714:	81 30       	cpi	r24, 0x01	; 1
    2716:	19 f4       	brne	.+6      	; 0x271e <main+0x16e>
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	80 93 de 01 	sts	0x01DE, r24
				flagShutdown = fFalse;
    271e:	10 92 db 01 	sts	0x01DB, r1
    2722:	0a c0       	rjmp	.+20     	; 0x2738 <main+0x188>
			//If one is bad and shutdown is low, pull high as well as pull new shutdown high to indicate imminent power kill
			} else {
				if (flagShutdown == fFalse){
    2724:	80 91 db 01 	lds	r24, 0x01DB
    2728:	88 23       	and	r24, r24
    272a:	19 f4       	brne	.+6      	; 0x2732 <main+0x182>
					flagNewShutdown = fTrue;
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	80 93 da 01 	sts	0x01DA, r24
				}
				flagShutdown = fTrue;
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	80 93 db 01 	sts	0x01DB, r24
			}
		}			
		
		//About to shutdown, save EEPROM
		if (flagNewShutdown){
    2738:	80 91 da 01 	lds	r24, 0x01DA
    273c:	88 23       	and	r24, r24
    273e:	b9 f0       	breq	.+46     	; 0x276e <main+0x1be>
			//Make sure nothing messes with the routine that we care about
			__killCommINT();
    2740:	8d e3       	ldi	r24, 0x3D	; 61
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	fc 01       	movw	r30, r24
    2746:	10 82       	st	Z, r1
    2748:	8d e6       	ldi	r24, 0x6D	; 109
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	fc 01       	movw	r30, r24
    274e:	10 82       	st	Z, r1
			flagGoToSleep = fTrue;
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	80 93 ce 01 	sts	0x01CE, r24
			flagReceivingBone = fFalse;
    2756:	10 92 cf 01 	sts	0x01CF, r1
			flagNoGPSTime=fFalse;
    275a:	10 92 d9 01 	sts	0x01D9, r1
			saveDateTime_eeprom(fTrue,fTrue);
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	61 e0       	ldi	r22, 0x01	; 1
    2762:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
			
			//Kill power--Alert comes in that function
			PowerDown();
    2766:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <_Z9PowerDownv>
			flagNewShutdown = fFalse;
    276a:	10 92 da 01 	sts	0x01DA, r1
		}
		
		//If Restart, broadcast date and time to BeagleBone and other AVR
		if (restart){
    276e:	80 91 de 01 	lds	r24, 0x01DE
    2772:	88 23       	and	r24, r24
    2774:	a1 f1       	breq	.+104    	; 0x27de <main+0x22e>
			__enableCommINT();	//enable BONE interrupt. Will come out with newest time. Give it 10 seconds to kill
    2776:	8d e3       	ldi	r24, 0x3D	; 61
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	2d e3       	ldi	r18, 0x3D	; 61
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	f9 01       	movw	r30, r18
    2780:	20 81       	ld	r18, Z
    2782:	24 60       	ori	r18, 0x04	; 4
    2784:	fc 01       	movw	r30, r24
    2786:	20 83       	st	Z, r18
    2788:	8d e6       	ldi	r24, 0x6D	; 109
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	22 e0       	ldi	r18, 0x02	; 2
    278e:	fc 01       	movw	r30, r24
    2790:	20 83       	st	Z, r18
			PowerUp(POWER_UP_INTERVAL);
    2792:	88 eb       	ldi	r24, 0xB8	; 184
    2794:	9b e0       	ldi	r25, 0x0B	; 11
    2796:	0e 94 89 17 	call	0x2f12	; 0x2f12 <_Z7PowerUpj>
			//Check to see if pins are ready. Use timeout of 10 seconds for pins to come high.
			int waitTime = 0;
    279a:	1a 82       	std	Y+2, r1	; 0x02
    279c:	19 82       	std	Y+1, r1	; 0x01
			while (waitTime < 3 && restart){waitTime++; Wait_sec(1);}
    279e:	09 c0       	rjmp	.+18     	; 0x27b2 <main+0x202>
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	9a 81       	ldd	r25, Y+2	; 0x02
    27a4:	01 96       	adiw	r24, 0x01	; 1
    27a6:	9a 83       	std	Y+2, r25	; 0x02
    27a8:	89 83       	std	Y+1, r24	; 0x01
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <_Z8Wait_seci>
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	9a 81       	ldd	r25, Y+2	; 0x02
    27b6:	83 30       	cpi	r24, 0x03	; 3
    27b8:	91 05       	cpc	r25, r1
    27ba:	34 f4       	brge	.+12     	; 0x27c8 <main+0x218>
    27bc:	80 91 de 01 	lds	r24, 0x01DE
    27c0:	88 23       	and	r24, r24
    27c2:	11 f0       	breq	.+4      	; 0x27c8 <main+0x218>
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	01 c0       	rjmp	.+2      	; 0x27ca <main+0x21a>
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	88 23       	and	r24, r24
    27cc:	49 f7       	brne	.-46     	; 0x27a0 <main+0x1f0>
			flagUpdateGAVRDate=fTrue;
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	80 93 d3 01 	sts	0x01D3, r24
			flagUpdateGAVRTime=fTrue;
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	80 93 d2 01 	sts	0x01D2, r24
			flagNoGPSTime=fFalse;
    27da:	10 92 d9 01 	sts	0x01D9, r1
			//If we get to here, the flag is not reset or there was a timeout. If timout, goes to sleep and on the next cycle it's awake it will try and 
			//get an updated date and time from the BeagleBone. Always update GAVR.			
		}		
		
		//If it's time to go to sleep, go to sleep. INT0 or TIM2_overflow will wake it up.
		if (flagGoToSleep){GoToSleep(flagShutdown);}
    27de:	80 91 ce 01 	lds	r24, 0x01CE
    27e2:	88 23       	and	r24, r24
    27e4:	21 f0       	breq	.+8      	; 0x27ee <main+0x23e>
    27e6:	80 91 db 01 	lds	r24, 0x01DB
    27ea:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_Z9GoToSleeph>
		
		//Add logic for an invalid date and time somehow getting in here
		if (flagInvalidDateTime){
    27ee:	80 91 d7 01 	lds	r24, 0x01D7
    27f2:	88 23       	and	r24, r24
    27f4:	09 f4       	brne	.+2      	; 0x27f8 <main+0x248>
    27f6:	08 cf       	rjmp	.-496    	; 0x2608 <main+0x58>
			flagInvalidDateTime=fFalse;
    27f8:	10 92 d7 01 	sts	0x01D7, r1
			flagUserTime=fTrue;
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	80 93 d6 01 	sts	0x01D6, r24
			flagUserDate=fTrue;	//ask user to update/confirm both date and time
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	80 93 d5 01 	sts	0x01D5, r24
	TakeADC();
	if (flagGoodVolts && flagGoodTemp){PowerUp(POWER_UP_INTERVAL);flagFreshStart=fTrue;}
	else {flagNormalMode=fTrue;flagFreshStart=fFalse;}
		
	//main programming loop
	while(fTrue)
    2808:	ff ce       	rjmp	.-514    	; 0x2608 <main+0x58>

0000280a <_Z10DeviceInitv>:

/*--------------------------END-Main Program-------------------------------------------------------------------------------------*/
/*--------------------------START-Public Funtions--------------------------------------------------------------------------------*/

/*************************************************************************************************************/
void DeviceInit(){
    280a:	cf 93       	push	r28
    280c:	df 93       	push	r29
    280e:	cd b7       	in	r28, 0x3d	; 61
    2810:	de b7       	in	r29, 0x3e	; 62
	//Set all ports to input with no pull
	DDRA = 0;
    2812:	81 e2       	ldi	r24, 0x21	; 33
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	fc 01       	movw	r30, r24
    2818:	10 82       	st	Z, r1
	DDRB = 0;
    281a:	84 e2       	ldi	r24, 0x24	; 36
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	fc 01       	movw	r30, r24
    2820:	10 82       	st	Z, r1
	DDRC = 0;
    2822:	87 e2       	ldi	r24, 0x27	; 39
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	fc 01       	movw	r30, r24
    2828:	10 82       	st	Z, r1
	DDRD = 0;
    282a:	8a e2       	ldi	r24, 0x2A	; 42
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	fc 01       	movw	r30, r24
    2830:	10 82       	st	Z, r1
	
	PORTA = 0;
    2832:	82 e2       	ldi	r24, 0x22	; 34
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	fc 01       	movw	r30, r24
    2838:	10 82       	st	Z, r1
	PORTB = 0;
    283a:	85 e2       	ldi	r24, 0x25	; 37
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	fc 01       	movw	r30, r24
    2840:	10 82       	st	Z, r1
	PORTC = 0;
    2842:	88 e2       	ldi	r24, 0x28	; 40
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	fc 01       	movw	r30, r24
    2848:	10 82       	st	Z, r1
	PORTD = 0;
    284a:	8b e2       	ldi	r24, 0x2B	; 43
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	fc 01       	movw	r30, r24
    2850:	10 82       	st	Z, r1
}
    2852:	df 91       	pop	r29
    2854:	cf 91       	pop	r28
    2856:	08 95       	ret

00002858 <_Z7AppInitj>:
/*************************************************************************************************************/
void AppInit(unsigned int ubrr){
    2858:	cf 93       	push	r28
    285a:	df 93       	push	r29
    285c:	00 d0       	rcall	.+0      	; 0x285e <_Z7AppInitj+0x6>
    285e:	cd b7       	in	r28, 0x3d	; 61
    2860:	de b7       	in	r29, 0x3e	; 62
    2862:	9a 83       	std	Y+2, r25	; 0x02
    2864:	89 83       	std	Y+1, r24	; 0x01
	
	//Set BAUD rate of UART
	UBRR0L = ubrr;   												//set low byte of baud rate
    2866:	84 ec       	ldi	r24, 0xC4	; 196
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	29 81       	ldd	r18, Y+1	; 0x01
    286c:	fc 01       	movw	r30, r24
    286e:	20 83       	st	Z, r18
	UBRR0H = (ubrr >> 8);											//set high byte of baud rate
    2870:	85 ec       	ldi	r24, 0xC5	; 197
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	29 81       	ldd	r18, Y+1	; 0x01
    2876:	3a 81       	ldd	r19, Y+2	; 0x02
    2878:	23 2f       	mov	r18, r19
    287a:	33 27       	eor	r19, r19
    287c:	fc 01       	movw	r30, r24
    287e:	20 83       	st	Z, r18
	//UCSR0A |= (1 << U2X0);										//set high speed baud clock, in ASYNC mode
	
	//Enable UART_TX0 and UART_RX0
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);
    2880:	81 ec       	ldi	r24, 0xC1	; 193
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	28 e1       	ldi	r18, 0x18	; 24
    2886:	fc 01       	movw	r30, r24
    2888:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);							//Asynchronous; 8 data bits, no parity
    288a:	82 ec       	ldi	r24, 0xC2	; 194
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	26 e0       	ldi	r18, 0x06	; 6
    2890:	fc 01       	movw	r30, r24
    2892:	20 83       	st	Z, r18
	//UCSR0B |= (1 << RXCIE0);
	
	//Set BAUD for UART1
	UBRR1L = ubrr;
    2894:	8c ec       	ldi	r24, 0xCC	; 204
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	29 81       	ldd	r18, Y+1	; 0x01
    289a:	fc 01       	movw	r30, r24
    289c:	20 83       	st	Z, r18
	UBRR0H = (ubrr >> 8);
    289e:	85 ec       	ldi	r24, 0xC5	; 197
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	29 81       	ldd	r18, Y+1	; 0x01
    28a4:	3a 81       	ldd	r19, Y+2	; 0x02
    28a6:	23 2f       	mov	r18, r19
    28a8:	33 27       	eor	r19, r19
    28aa:	fc 01       	movw	r30, r24
    28ac:	20 83       	st	Z, r18
	//UCSR1A |= (1 << U2X1);
	
	//Enable UART_TX1 and UART_RX1
	UCSR1B = (1 << TXEN1)|(1 << RXEN1);
    28ae:	89 ec       	ldi	r24, 0xC9	; 201
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	28 e1       	ldi	r18, 0x18	; 24
    28b4:	fc 01       	movw	r30, r24
    28b6:	20 83       	st	Z, r18
	UCSR1C = (1 << UCSZ11)|(1 << UCSZ10);
    28b8:	8a ec       	ldi	r24, 0xCA	; 202
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	26 e0       	ldi	r18, 0x06	; 6
    28be:	fc 01       	movw	r30, r24
    28c0:	20 83       	st	Z, r18
	//UCSR1B |= (1 << RXCIE1);
	
	//Disable power to all peripherals
	PRR0 |= (1 << PRTWI)|(1 << PRTIM2)|(1 << PRTIM0)|(1 << PRUSART1)|(1 << PRTIM1)|(1 << PRADC)|(1 << PRSPI);  //Turn EVERYTHING off initially except USART0(UART0)
    28c2:	84 e6       	ldi	r24, 0x64	; 100
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	24 e6       	ldi	r18, 0x64	; 100
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	f9 01       	movw	r30, r18
    28cc:	20 81       	ld	r18, Z
    28ce:	2d 6f       	ori	r18, 0xFD	; 253
    28d0:	fc 01       	movw	r30, r24
    28d2:	20 83       	st	Z, r18

	//Enable status LEDs
	ddrSLEEPled |= (1 << bnSLEEPled);
    28d4:	8a e2       	ldi	r24, 0x2A	; 42
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	2a e2       	ldi	r18, 0x2A	; 42
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	f9 01       	movw	r30, r18
    28de:	20 81       	ld	r18, Z
    28e0:	20 68       	ori	r18, 0x80	; 128
    28e2:	fc 01       	movw	r30, r24
    28e4:	20 83       	st	Z, r18
	ddrSTATUSled |= (1 << bnSTATUSled);
    28e6:	87 e2       	ldi	r24, 0x27	; 39
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	27 e2       	ldi	r18, 0x27	; 39
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	f9 01       	movw	r30, r18
    28f0:	20 81       	ld	r18, Z
    28f2:	24 60       	ori	r18, 0x04	; 4
    28f4:	fc 01       	movw	r30, r24
    28f6:	20 83       	st	Z, r18
	prtSLEEPled &= ~(1 << bnSLEEPled);	//turn off initially
    28f8:	8b e2       	ldi	r24, 0x2B	; 43
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	2b e2       	ldi	r18, 0x2B	; 43
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	f9 01       	movw	r30, r18
    2902:	20 81       	ld	r18, Z
    2904:	2f 77       	andi	r18, 0x7F	; 127
    2906:	fc 01       	movw	r30, r24
    2908:	20 83       	st	Z, r18
	prtSTATUSled |= (1 << bnSTATUSled);	//turn on initially
    290a:	88 e2       	ldi	r24, 0x28	; 40
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	28 e2       	ldi	r18, 0x28	; 40
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	f9 01       	movw	r30, r18
    2914:	20 81       	ld	r18, Z
    2916:	24 60       	ori	r18, 0x04	; 4
    2918:	fc 01       	movw	r30, r24
    291a:	20 83       	st	Z, r18
	
	//Enable BB and GAVR alert pins...outputs, no pull by default.
	ddrBONEINT |= (1 << bnBBint);
    291c:	81 e2       	ldi	r24, 0x21	; 33
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	21 e2       	ldi	r18, 0x21	; 33
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	f9 01       	movw	r30, r18
    2926:	20 81       	ld	r18, Z
    2928:	24 60       	ori	r18, 0x04	; 4
    292a:	fc 01       	movw	r30, r24
    292c:	20 83       	st	Z, r18
	ddrGAVRINT |= (1 << bnGAVRint);
    292e:	84 e2       	ldi	r24, 0x24	; 36
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	24 e2       	ldi	r18, 0x24	; 36
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	f9 01       	movw	r30, r18
    2938:	20 81       	ld	r18, Z
    293a:	28 60       	ori	r18, 0x08	; 8
    293c:	fc 01       	movw	r30, r24
    293e:	20 83       	st	Z, r18
	
	//Enable GAVR interrupt pin, our PB3, it's INT2
	ddrGAVRINT |= (1 << bnGAVRINT);
    2940:	84 e2       	ldi	r24, 0x24	; 36
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	24 e2       	ldi	r18, 0x24	; 36
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	f9 01       	movw	r30, r18
    294a:	20 81       	ld	r18, Z
    294c:	28 60       	ori	r18, 0x08	; 8
    294e:	fc 01       	movw	r30, r24
    2950:	20 83       	st	Z, r18
	prtGAVRINT &=  ~(1 << bnGAVRINT);	//set low at first
    2952:	85 e2       	ldi	r24, 0x25	; 37
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	25 e2       	ldi	r18, 0x25	; 37
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	f9 01       	movw	r30, r18
    295c:	20 81       	ld	r18, Z
    295e:	27 7f       	andi	r18, 0xF7	; 247
    2960:	fc 01       	movw	r30, r24
    2962:	20 83       	st	Z, r18
	
	//Enable enable signals
	ddrENABLE |= (1 << bnGPSen)|(1 << bnGAVRen)|(1 << bnLCDen)|(1 << bnBBen);
    2964:	81 e2       	ldi	r24, 0x21	; 33
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	21 e2       	ldi	r18, 0x21	; 33
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	f9 01       	movw	r30, r18
    296e:	20 81       	ld	r18, Z
    2970:	20 6f       	ori	r18, 0xF0	; 240
    2972:	fc 01       	movw	r30, r24
    2974:	20 83       	st	Z, r18
	ddrTEMPen |= (1 << bnTEMPen);
    2976:	84 e2       	ldi	r24, 0x24	; 36
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	24 e2       	ldi	r18, 0x24	; 36
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	f9 01       	movw	r30, r18
    2980:	20 81       	ld	r18, Z
    2982:	21 60       	ori	r18, 0x01	; 1
    2984:	fc 01       	movw	r30, r24
    2986:	20 83       	st	Z, r18
	ddrMAINen |= (1 << bnMAINen);
    2988:	87 e2       	ldi	r24, 0x27	; 39
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	27 e2       	ldi	r18, 0x27	; 39
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	f9 01       	movw	r30, r18
    2992:	20 81       	ld	r18, Z
    2994:	21 60       	ori	r18, 0x01	; 1
    2996:	fc 01       	movw	r30, r24
    2998:	20 83       	st	Z, r18
	PowerDown();
    299a:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <_Z9PowerDownv>
	__killTemp();
    299e:	85 e2       	ldi	r24, 0x25	; 37
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	25 e2       	ldi	r18, 0x25	; 37
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	f9 01       	movw	r30, r18
    29a8:	20 81       	ld	r18, Z
    29aa:	2e 7f       	andi	r18, 0xFE	; 254
    29ac:	fc 01       	movw	r30, r24
    29ae:	20 83       	st	Z, r18

	
	//Enable INT2. Note* Pin change interrupts will NOT wake AVR from Power-Save mode. Only INT0-2 will.
	EICRA = (1 << ISC21)|(1 << ISC20);			//falling edge of INT2 enables interrupt
    29b0:	89 e6       	ldi	r24, 0x69	; 105
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	20 e3       	ldi	r18, 0x30	; 48
    29b6:	fc 01       	movw	r30, r24
    29b8:	20 83       	st	Z, r18
	EIMSK = (1 << INT2);						//enable INT2 global interrupt
    29ba:	8d e3       	ldi	r24, 0x3D	; 61
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	24 e0       	ldi	r18, 0x04	; 4
    29c0:	fc 01       	movw	r30, r24
    29c2:	20 83       	st	Z, r18
	
	//Enable PCINT17
	PCMSK1 |= (1 << PCINT17);
    29c4:	8c e6       	ldi	r24, 0x6C	; 108
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	2c e6       	ldi	r18, 0x6C	; 108
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	f9 01       	movw	r30, r18
    29ce:	20 81       	ld	r18, Z
    29d0:	22 60       	ori	r18, 0x02	; 2
    29d2:	fc 01       	movw	r30, r24
    29d4:	20 83       	st	Z, r18
	PCICR |= (1 << PCIE0);
    29d6:	88 e6       	ldi	r24, 0x68	; 104
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	28 e6       	ldi	r18, 0x68	; 104
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	f9 01       	movw	r30, r18
    29e0:	20 81       	ld	r18, Z
    29e2:	21 60       	ori	r18, 0x01	; 1
    29e4:	fc 01       	movw	r30, r24
    29e6:	20 83       	st	Z, r18
	
	//Enable SPI for TI temperature
	ddrSpi0 |= (1 << bnMosi0)|(1 << bnSck0)|(1 << bnSS0);	//outputs
    29e8:	84 e2       	ldi	r24, 0x24	; 36
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	24 e2       	ldi	r18, 0x24	; 36
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	f9 01       	movw	r30, r18
    29f2:	20 81       	ld	r18, Z
    29f4:	20 6b       	ori	r18, 0xB0	; 176
    29f6:	fc 01       	movw	r30, r24
    29f8:	20 83       	st	Z, r18
	ddrSpi0 &= ~(1 << bnMiso0);
    29fa:	84 e2       	ldi	r24, 0x24	; 36
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	24 e2       	ldi	r18, 0x24	; 36
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	f9 01       	movw	r30, r18
    2a04:	20 81       	ld	r18, Z
    2a06:	2f 7b       	andi	r18, 0xBF	; 191
    2a08:	fc 01       	movw	r30, r24
    2a0a:	20 83       	st	Z, r18
	prtSpi0 |= (1 << bnSS0)|(1 << bnSck0);		//keep SS and SCK high
    2a0c:	85 e2       	ldi	r24, 0x25	; 37
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	25 e2       	ldi	r18, 0x25	; 37
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	f9 01       	movw	r30, r18
    2a16:	20 81       	ld	r18, Z
    2a18:	20 69       	ori	r18, 0x90	; 144
    2a1a:	fc 01       	movw	r30, r24
    2a1c:	20 83       	st	Z, r18
	prtSpi0 &= ~(1 << bnMosi0);		//keep Miso low
    2a1e:	85 e2       	ldi	r24, 0x25	; 37
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	25 e2       	ldi	r18, 0x25	; 37
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	f9 01       	movw	r30, r18
    2a28:	20 81       	ld	r18, Z
    2a2a:	2f 7d       	andi	r18, 0xDF	; 223
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	20 83       	st	Z, r18
	
	//Init variables
	flagGoToSleep = fTrue;			//changes to fTrue in final implementation
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	80 93 ce 01 	sts	0x01CE, r24
	flagReceivingBone = fFalse;
    2a36:	10 92 cf 01 	sts	0x01CF, r1
	flagNormalMode=fTrue;
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	80 93 d0 01 	sts	0x01D0, r24

	flagUpdateGAVRTime=fFalse;
    2a40:	10 92 d2 01 	sts	0x01D2, r1
	flagUpdateGAVRDate=fFalse;
    2a44:	10 92 d3 01 	sts	0x01D3, r1
	flagSendingGAVR=fFalse;
    2a48:	10 92 d4 01 	sts	0x01D4, r1
	flagUserTime=fFalse;
    2a4c:	10 92 d6 01 	sts	0x01D6, r1
	flagUserDate=fFalse;
    2a50:	10 92 d5 01 	sts	0x01D5, r1
	flagInvalidDateTime=fFalse;
    2a54:	10 92 d7 01 	sts	0x01D7, r1
	flagWaitingToSendGAVR=fFalse;
    2a58:	10 92 d8 01 	sts	0x01D8, r1
	flagNoGPSTime=fFalse;
    2a5c:	10 92 d9 01 	sts	0x01D9, r1
	
	restart=fFalse;
    2a60:	10 92 de 01 	sts	0x01DE, r1
	flagNewShutdown=fFalse;
    2a64:	10 92 da 01 	sts	0x01DA, r1
	flagShutdown  = fFalse;
    2a68:	10 92 db 01 	sts	0x01DB, r1
	flagGoodVolts=fFalse;
    2a6c:	10 92 dd 01 	sts	0x01DD, r1
	flagGoodTemp=fFalse;
    2a70:	10 92 dc 01 	sts	0x01DC, r1
	flagFreshStart=fTrue;
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	80 93 df 01 	sts	0x01DF, r24
}
    2a7a:	0f 90       	pop	r0
    2a7c:	0f 90       	pop	r0
    2a7e:	df 91       	pop	r29
    2a80:	cf 91       	pop	r28
    2a82:	08 95       	ret

00002a84 <_Z14EnableRTCTimerv>:
/*************************************************************************************************************/
void EnableRTCTimer(){
    2a84:	cf 93       	push	r28
    2a86:	df 93       	push	r29
    2a88:	cd b7       	in	r28, 0x3d	; 61
    2a8a:	de b7       	in	r29, 0x3e	; 62
	//Asynchronous should be done based on TOSC1 and TOSC2
	//Give power back to Timer2
	PRR0 &= ~(1 << PRTIM2);
    2a8c:	84 e6       	ldi	r24, 0x64	; 100
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	24 e6       	ldi	r18, 0x64	; 100
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	f9 01       	movw	r30, r18
    2a96:	20 81       	ld	r18, Z
    2a98:	2f 7b       	andi	r18, 0xBF	; 191
    2a9a:	fc 01       	movw	r30, r24
    2a9c:	20 83       	st	Z, r18
	Wait_ms(1);	//give it time to power on
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	0e 94 80 15 	call	0x2b00	; 0x2b00 <_Z7Wait_msi>
	
	//Set to Asynchronous mode, uses TOSC1/TOSC2 pins
	ASSR |= (1 << AS2);
    2aa6:	86 eb       	ldi	r24, 0xB6	; 182
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	26 eb       	ldi	r18, 0xB6	; 182
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	f9 01       	movw	r30, r18
    2ab0:	20 81       	ld	r18, Z
    2ab2:	20 62       	ori	r18, 0x20	; 32
    2ab4:	fc 01       	movw	r30, r24
    2ab6:	20 83       	st	Z, r18
	
	//Set prescaler, initialize registers
	TCCR2B |= (1 << CS22)|(1 << CS20);	//128 prescaler, should click into overflow every second
    2ab8:	81 eb       	ldi	r24, 0xB1	; 177
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	21 eb       	ldi	r18, 0xB1	; 177
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	f9 01       	movw	r30, r18
    2ac2:	20 81       	ld	r18, Z
    2ac4:	25 60       	ori	r18, 0x05	; 5
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	20 83       	st	Z, r18
	while ((ASSR & ((1 << TCR2BUB)|(1 << TCN2UB))));	//wait for it not to be busy
    2aca:	86 eb       	ldi	r24, 0xB6	; 182
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	fc 01       	movw	r30, r24
    2ad0:	80 81       	ld	r24, Z
    2ad2:	88 2f       	mov	r24, r24
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	81 71       	andi	r24, 0x11	; 17
    2ad8:	90 70       	andi	r25, 0x00	; 0
    2ada:	21 e0       	ldi	r18, 0x01	; 1
    2adc:	00 97       	sbiw	r24, 0x00	; 0
    2ade:	09 f4       	brne	.+2      	; 0x2ae2 <_Z14EnableRTCTimerv+0x5e>
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	22 23       	and	r18, r18
    2ae4:	91 f7       	brne	.-28     	; 0x2aca <_Z14EnableRTCTimerv+0x46>
	TIFR2 = (1 << TOV2);								//Clear any interrupts pending for the timer
    2ae6:	87 e3       	ldi	r24, 0x37	; 55
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	21 e0       	ldi	r18, 0x01	; 1
    2aec:	fc 01       	movw	r30, r24
    2aee:	20 83       	st	Z, r18
	TIMSK2 = (1 << TOIE2);								//Enable overflow on it
    2af0:	80 e7       	ldi	r24, 0x70	; 112
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	21 e0       	ldi	r18, 0x01	; 1
    2af6:	fc 01       	movw	r30, r24
    2af8:	20 83       	st	Z, r18
	
	//Away we go
}
    2afa:	df 91       	pop	r29
    2afc:	cf 91       	pop	r28
    2afe:	08 95       	ret

00002b00 <_Z7Wait_msi>:
/*************************************************************************************************************/
void Wait_ms(volatile int delay)
{
    2b00:	cf 93       	push	r28
    2b02:	df 93       	push	r29
    2b04:	00 d0       	rcall	.+0      	; 0x2b06 <_Z7Wait_msi+0x6>
    2b06:	00 d0       	rcall	.+0      	; 0x2b08 <_Z7Wait_msi+0x8>
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
    2b0c:	9c 83       	std	Y+4, r25	; 0x04
    2b0e:	8b 83       	std	Y+3, r24	; 0x03
	volatile int i;

	while(delay > 0){
    2b10:	18 c0       	rjmp	.+48     	; 0x2b42 <_Z7Wait_msi+0x42>
		for(i = 0; i < 800; i++){
    2b12:	1a 82       	std	Y+2, r1	; 0x02
    2b14:	19 82       	std	Y+1, r1	; 0x01
    2b16:	06 c0       	rjmp	.+12     	; 0x2b24 <_Z7Wait_msi+0x24>
			asm volatile("nop");
    2b18:	00 00       	nop
void Wait_ms(volatile int delay)
{
	volatile int i;

	while(delay > 0){
		for(i = 0; i < 800; i++){
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b1e:	01 96       	adiw	r24, 0x01	; 1
    2b20:	9a 83       	std	Y+2, r25	; 0x02
    2b22:	89 83       	std	Y+1, r24	; 0x01
    2b24:	89 81       	ldd	r24, Y+1	; 0x01
    2b26:	9a 81       	ldd	r25, Y+2	; 0x02
    2b28:	21 e0       	ldi	r18, 0x01	; 1
    2b2a:	33 e0       	ldi	r19, 0x03	; 3
    2b2c:	80 32       	cpi	r24, 0x20	; 32
    2b2e:	93 07       	cpc	r25, r19
    2b30:	0c f0       	brlt	.+2      	; 0x2b34 <_Z7Wait_msi+0x34>
    2b32:	20 e0       	ldi	r18, 0x00	; 0
    2b34:	22 23       	and	r18, r18
    2b36:	81 f7       	brne	.-32     	; 0x2b18 <_Z7Wait_msi+0x18>
			asm volatile("nop");
		}
		delay -= 1;
    2b38:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b3c:	01 97       	sbiw	r24, 0x01	; 1
    2b3e:	9c 83       	std	Y+4, r25	; 0x04
    2b40:	8b 83       	std	Y+3, r24	; 0x03
/*************************************************************************************************************/
void Wait_ms(volatile int delay)
{
	volatile int i;

	while(delay > 0){
    2b42:	8b 81       	ldd	r24, Y+3	; 0x03
    2b44:	9c 81       	ldd	r25, Y+4	; 0x04
    2b46:	21 e0       	ldi	r18, 0x01	; 1
    2b48:	18 16       	cp	r1, r24
    2b4a:	19 06       	cpc	r1, r25
    2b4c:	0c f0       	brlt	.+2      	; 0x2b50 <_Z7Wait_msi+0x50>
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	22 23       	and	r18, r18
    2b52:	f9 f6       	brne	.-66     	; 0x2b12 <_Z7Wait_msi+0x12>
		for(i = 0; i < 800; i++){
			asm volatile("nop");
		}
		delay -= 1;
	}
}
    2b54:	0f 90       	pop	r0
    2b56:	0f 90       	pop	r0
    2b58:	0f 90       	pop	r0
    2b5a:	0f 90       	pop	r0
    2b5c:	df 91       	pop	r29
    2b5e:	cf 91       	pop	r28
    2b60:	08 95       	ret

00002b62 <_Z8Wait_seci>:
/*************************************************************************************************************/
void Wait_sec(volatile int sec){
    2b62:	cf 93       	push	r28
    2b64:	df 93       	push	r29
    2b66:	00 d0       	rcall	.+0      	; 0x2b68 <_Z8Wait_seci+0x6>
    2b68:	00 d0       	rcall	.+0      	; 0x2b6a <_Z8Wait_seci+0x8>
    2b6a:	00 d0       	rcall	.+0      	; 0x2b6c <_Z8Wait_seci+0xa>
    2b6c:	cd b7       	in	r28, 0x3d	; 61
    2b6e:	de b7       	in	r29, 0x3e	; 62
    2b70:	9e 83       	std	Y+6, r25	; 0x06
    2b72:	8d 83       	std	Y+5, r24	; 0x05
	volatile int startingTime = currentTime.getSeconds();
    2b74:	86 ea       	ldi	r24, 0xA6	; 166
    2b76:	91 e0       	ldi	r25, 0x01	; 1
    2b78:	0e 94 99 04 	call	0x932	; 0x932 <_ZN6myTime10getSecondsEv>
    2b7c:	88 2f       	mov	r24, r24
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	9a 83       	std	Y+2, r25	; 0x02
    2b82:	89 83       	std	Y+1, r24	; 0x01
	volatile int endingTime= (startingTime+sec)%60;
    2b84:	29 81       	ldd	r18, Y+1	; 0x01
    2b86:	3a 81       	ldd	r19, Y+2	; 0x02
    2b88:	8d 81       	ldd	r24, Y+5	; 0x05
    2b8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b8c:	82 0f       	add	r24, r18
    2b8e:	93 1f       	adc	r25, r19
    2b90:	2c e3       	ldi	r18, 0x3C	; 60
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	b9 01       	movw	r22, r18
    2b96:	0e 94 4b 18 	call	0x3096	; 0x3096 <__divmodhi4>
    2b9a:	9c 83       	std	Y+4, r25	; 0x04
    2b9c:	8b 83       	std	Y+3, r24	; 0x03
	while (currentTime.getSeconds() != endingTime){asm volatile ("nop");}
    2b9e:	01 c0       	rjmp	.+2      	; 0x2ba2 <_Z8Wait_seci+0x40>
    2ba0:	00 00       	nop
    2ba2:	86 ea       	ldi	r24, 0xA6	; 166
    2ba4:	91 e0       	ldi	r25, 0x01	; 1
    2ba6:	0e 94 99 04 	call	0x932	; 0x932 <_ZN6myTime10getSecondsEv>
    2baa:	28 2f       	mov	r18, r24
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb2:	41 e0       	ldi	r20, 0x01	; 1
    2bb4:	28 17       	cp	r18, r24
    2bb6:	39 07       	cpc	r19, r25
    2bb8:	09 f4       	brne	.+2      	; 0x2bbc <_Z8Wait_seci+0x5a>
    2bba:	40 e0       	ldi	r20, 0x00	; 0
    2bbc:	44 23       	and	r20, r20
    2bbe:	81 f7       	brne	.-32     	; 0x2ba0 <_Z8Wait_seci+0x3e>
}
    2bc0:	26 96       	adiw	r28, 0x06	; 6
    2bc2:	0f b6       	in	r0, 0x3f	; 63
    2bc4:	f8 94       	cli
    2bc6:	de bf       	out	0x3e, r29	; 62
    2bc8:	0f be       	out	0x3f, r0	; 63
    2bca:	cd bf       	out	0x3d, r28	; 61
    2bcc:	df 91       	pop	r29
    2bce:	cf 91       	pop	r28
    2bd0:	08 95       	ret

00002bd2 <_Z9GoToSleeph>:

/*************************************************************************************************************/

void GoToSleep(BOOL shortOrLong){
    2bd2:	cf 93       	push	r28
    2bd4:	df 93       	push	r29
    2bd6:	00 d0       	rcall	.+0      	; 0x2bd8 <_Z9GoToSleeph+0x6>
    2bd8:	00 d0       	rcall	.+0      	; 0x2bda <_Z9GoToSleeph+0x8>
    2bda:	0f 92       	push	r0
    2bdc:	cd b7       	in	r28, 0x3d	; 61
    2bde:	de b7       	in	r29, 0x3e	; 62
    2be0:	8d 83       	std	Y+5, r24	; 0x05
		sei();
    2be2:	78 94       	sei
		volatile int sleepTime, sleepTicks = 0;
    2be4:	1c 82       	std	Y+4, r1	; 0x04
    2be6:	1b 82       	std	Y+3, r1	; 0x03
		//If bool is true, we are in low power mode/backup, sleep for 60 seconds then check ADC again
		if (shortOrLong == fTrue){
    2be8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bea:	81 30       	cpi	r24, 0x01	; 1
    2bec:	49 f4       	brne	.+18     	; 0x2c00 <_Z9GoToSleeph+0x2e>
			sleepTime = SLEEP_TICKS_LOWV;
    2bee:	8c e0       	ldi	r24, 0x0C	; 12
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	9a 83       	std	Y+2, r25	; 0x02
    2bf4:	89 83       	std	Y+1, r24	; 0x01
			EIMSK = 0;						//no int2
    2bf6:	8d e3       	ldi	r24, 0x3D	; 61
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	fc 01       	movw	r30, r24
    2bfc:	10 82       	st	Z, r1
    2bfe:	0d c0       	rjmp	.+26     	; 0x2c1a <_Z9GoToSleeph+0x48>
		} else {
			sleepTime = SLEEP_TICKS_HIGHV;
    2c00:	8a e0       	ldi	r24, 0x0A	; 10
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	9a 83       	std	Y+2, r25	; 0x02
    2c06:	89 83       	std	Y+1, r24	; 0x01
			EIMSK |= (1 << INT2);			//int2 is allowed.
    2c08:	8d e3       	ldi	r24, 0x3D	; 61
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	2d e3       	ldi	r18, 0x3D	; 61
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	f9 01       	movw	r30, r18
    2c12:	20 81       	ld	r18, Z
    2c14:	24 60       	ori	r18, 0x04	; 4
    2c16:	fc 01       	movw	r30, r24
    2c18:	20 83       	st	Z, r18
		}
		//Turn off status LED, put on TIM2 led
		prtSTATUSled &= ~(1 << bnSTATUSled);
    2c1a:	88 e2       	ldi	r24, 0x28	; 40
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	28 e2       	ldi	r18, 0x28	; 40
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	f9 01       	movw	r30, r18
    2c24:	20 81       	ld	r18, Z
    2c26:	2b 7f       	andi	r18, 0xFB	; 251
    2c28:	fc 01       	movw	r30, r24
    2c2a:	20 83       	st	Z, r18
		prtSLEEPled |= (1 << bnSLEEPled);
    2c2c:	8b e2       	ldi	r24, 0x2B	; 43
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	2b e2       	ldi	r18, 0x2B	; 43
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	f9 01       	movw	r30, r18
    2c36:	20 81       	ld	r18, Z
    2c38:	20 68       	ori	r18, 0x80	; 128
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	20 83       	st	Z, r18
		
		//Set to power save, then enable
		SMCR = (1 << SM1)|(1 << SM0);
    2c3e:	83 e5       	ldi	r24, 0x53	; 83
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	26 e0       	ldi	r18, 0x06	; 6
    2c44:	fc 01       	movw	r30, r24
    2c46:	20 83       	st	Z, r18
		SMCR |= (1 << SE);
    2c48:	83 e5       	ldi	r24, 0x53	; 83
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	23 e5       	ldi	r18, 0x53	; 83
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	f9 01       	movw	r30, r18
    2c52:	20 81       	ld	r18, Z
    2c54:	21 60       	ori	r18, 0x01	; 1
    2c56:	fc 01       	movw	r30, r24
    2c58:	20 83       	st	Z, r18
		
		//Give time to registers
		Wait_ms(1);
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	0e 94 80 15 	call	0x2b00	; 0x2b00 <_Z7Wait_msi>
		//Go to sleep
		while (sleepTicks < sleepTime && flagGoToSleep){
    2c62:	06 c0       	rjmp	.+12     	; 0x2c70 <_Z9GoToSleeph+0x9e>
			asm volatile("SLEEP");
    2c64:	88 95       	sleep
			sleepTicks++;
    2c66:	8b 81       	ldd	r24, Y+3	; 0x03
    2c68:	9c 81       	ldd	r25, Y+4	; 0x04
    2c6a:	01 96       	adiw	r24, 0x01	; 1
    2c6c:	9c 83       	std	Y+4, r25	; 0x04
    2c6e:	8b 83       	std	Y+3, r24	; 0x03
		SMCR |= (1 << SE);
		
		//Give time to registers
		Wait_ms(1);
		//Go to sleep
		while (sleepTicks < sleepTime && flagGoToSleep){
    2c70:	2b 81       	ldd	r18, Y+3	; 0x03
    2c72:	3c 81       	ldd	r19, Y+4	; 0x04
    2c74:	89 81       	ldd	r24, Y+1	; 0x01
    2c76:	9a 81       	ldd	r25, Y+2	; 0x02
    2c78:	28 17       	cp	r18, r24
    2c7a:	39 07       	cpc	r19, r25
    2c7c:	34 f4       	brge	.+12     	; 0x2c8a <_Z9GoToSleeph+0xb8>
    2c7e:	80 91 ce 01 	lds	r24, 0x01CE
    2c82:	88 23       	and	r24, r24
    2c84:	11 f0       	breq	.+4      	; 0x2c8a <_Z9GoToSleeph+0xb8>
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	01 c0       	rjmp	.+2      	; 0x2c8c <_Z9GoToSleeph+0xba>
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	88 23       	and	r24, r24
    2c8e:	51 f7       	brne	.-44     	; 0x2c64 <_Z9GoToSleeph+0x92>
			asm volatile("SLEEP");
			sleepTicks++;
		} //endwhile
		
		//Give it time to power back on
		Wait_ms(10);
    2c90:	8a e0       	ldi	r24, 0x0A	; 10
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	0e 94 80 15 	call	0x2b00	; 0x2b00 <_Z7Wait_msi>
		
		//Done sleeping, turn off sleeping led
		prtSLEEPled &= ~(1 << bnSLEEPled);
    2c98:	8b e2       	ldi	r24, 0x2B	; 43
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	2b e2       	ldi	r18, 0x2B	; 43
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	f9 01       	movw	r30, r18
    2ca2:	20 81       	ld	r18, Z
    2ca4:	2f 77       	andi	r18, 0x7F	; 127
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	20 83       	st	Z, r18
		prtSTATUSled |= (1 << bnSTATUSled);
    2caa:	88 e2       	ldi	r24, 0x28	; 40
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	28 e2       	ldi	r18, 0x28	; 40
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	f9 01       	movw	r30, r18
    2cb4:	20 81       	ld	r18, Z
    2cb6:	24 60       	ori	r18, 0x04	; 4
    2cb8:	fc 01       	movw	r30, r24
    2cba:	20 83       	st	Z, r18
}
    2cbc:	0f 90       	pop	r0
    2cbe:	0f 90       	pop	r0
    2cc0:	0f 90       	pop	r0
    2cc2:	0f 90       	pop	r0
    2cc4:	0f 90       	pop	r0
    2cc6:	df 91       	pop	r29
    2cc8:	cf 91       	pop	r28
    2cca:	08 95       	ret

00002ccc <_Z7TakeADCv>:
/*************************************************************************************************************/

void TakeADC(){
    2ccc:	cf 93       	push	r28
    2cce:	df 93       	push	r29
    2cd0:	00 d0       	rcall	.+0      	; 0x2cd2 <_Z7TakeADCv+0x6>
    2cd2:	00 d0       	rcall	.+0      	; 0x2cd4 <_Z7TakeADCv+0x8>
    2cd4:	cd b7       	in	r28, 0x3d	; 61
    2cd6:	de b7       	in	r29, 0x3e	; 62
	WORD adcReading = 0;
    2cd8:	1c 82       	std	Y+4, r1	; 0x04
    2cda:	1b 82       	std	Y+3, r1	; 0x03
	
	cli();
    2cdc:	f8 94       	cli
	//Turn Power on to ADC
	PRR0 &= ~(1 << PRADC);	
    2cde:	84 e6       	ldi	r24, 0x64	; 100
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	24 e6       	ldi	r18, 0x64	; 100
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	f9 01       	movw	r30, r18
    2ce8:	20 81       	ld	r18, Z
    2cea:	2e 7f       	andi	r18, 0xFE	; 254
    2cec:	fc 01       	movw	r30, r24
    2cee:	20 83       	st	Z, r18
	ADMUX |= (1 << REFS1);	//internal 1.1V reference
    2cf0:	8c e7       	ldi	r24, 0x7C	; 124
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	2c e7       	ldi	r18, 0x7C	; 124
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	f9 01       	movw	r30, r18
    2cfa:	20 81       	ld	r18, Z
    2cfc:	20 68       	ori	r18, 0x80	; 128
    2cfe:	fc 01       	movw	r30, r24
    2d00:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADEN)|(1 << ADPS2);			//clkIO/16
    2d02:	8a e7       	ldi	r24, 0x7A	; 122
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	2a e7       	ldi	r18, 0x7A	; 122
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	f9 01       	movw	r30, r18
    2d0c:	20 81       	ld	r18, Z
    2d0e:	24 68       	ori	r18, 0x84	; 132
    2d10:	fc 01       	movw	r30, r24
    2d12:	20 83       	st	Z, r18
	DIDR0 = 0xFE;								//disable all ADC's except ADC0
    2d14:	8e e7       	ldi	r24, 0x7E	; 126
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	2e ef       	ldi	r18, 0xFE	; 254
    2d1a:	fc 01       	movw	r30, r24
    2d1c:	20 83       	st	Z, r18
	Wait_ms(5);									//Tim for registers to setup
    2d1e:	85 e0       	ldi	r24, 0x05	; 5
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	0e 94 80 15 	call	0x2b00	; 0x2b00 <_Z7Wait_msi>
	
	//Run conversion twice, throw first one out
	for (int i = 0; i < 2; i++){ADCSRA |= (1 << ADSC); while (ADCSRA & (1 << ADSC));}	
    2d26:	1a 82       	std	Y+2, r1	; 0x02
    2d28:	19 82       	std	Y+1, r1	; 0x01
    2d2a:	1c c0       	rjmp	.+56     	; 0x2d64 <_Z7TakeADCv+0x98>
    2d2c:	8a e7       	ldi	r24, 0x7A	; 122
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	2a e7       	ldi	r18, 0x7A	; 122
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	f9 01       	movw	r30, r18
    2d36:	20 81       	ld	r18, Z
    2d38:	20 64       	ori	r18, 0x40	; 64
    2d3a:	fc 01       	movw	r30, r24
    2d3c:	20 83       	st	Z, r18
    2d3e:	8a e7       	ldi	r24, 0x7A	; 122
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	fc 01       	movw	r30, r24
    2d44:	80 81       	ld	r24, Z
    2d46:	88 2f       	mov	r24, r24
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	80 74       	andi	r24, 0x40	; 64
    2d4c:	90 70       	andi	r25, 0x00	; 0
    2d4e:	21 e0       	ldi	r18, 0x01	; 1
    2d50:	00 97       	sbiw	r24, 0x00	; 0
    2d52:	09 f4       	brne	.+2      	; 0x2d56 <_Z7TakeADCv+0x8a>
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	22 23       	and	r18, r18
    2d58:	91 f7       	brne	.-28     	; 0x2d3e <_Z7TakeADCv+0x72>
    2d5a:	89 81       	ldd	r24, Y+1	; 0x01
    2d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d5e:	01 96       	adiw	r24, 0x01	; 1
    2d60:	9a 83       	std	Y+2, r25	; 0x02
    2d62:	89 83       	std	Y+1, r24	; 0x01
    2d64:	21 e0       	ldi	r18, 0x01	; 1
    2d66:	89 81       	ldd	r24, Y+1	; 0x01
    2d68:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6a:	82 30       	cpi	r24, 0x02	; 2
    2d6c:	91 05       	cpc	r25, r1
    2d6e:	0c f0       	brlt	.+2      	; 0x2d72 <_Z7TakeADCv+0xa6>
    2d70:	20 e0       	ldi	r18, 0x00	; 0
    2d72:	22 23       	and	r18, r18
    2d74:	d9 f6       	brne	.-74     	; 0x2d2c <_Z7TakeADCv+0x60>
	
	//Put conversion into buffer
	adcReading = ADCL;
    2d76:	88 e7       	ldi	r24, 0x78	; 120
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	fc 01       	movw	r30, r24
    2d7c:	80 81       	ld	r24, Z
    2d7e:	88 2f       	mov	r24, r24
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	9c 83       	std	Y+4, r25	; 0x04
    2d84:	8b 83       	std	Y+3, r24	; 0x03
	adcReading |= (ADCH << 8);
    2d86:	89 e7       	ldi	r24, 0x79	; 121
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	fc 01       	movw	r30, r24
    2d8c:	80 81       	ld	r24, Z
    2d8e:	88 2f       	mov	r24, r24
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	98 2f       	mov	r25, r24
    2d94:	88 27       	eor	r24, r24
    2d96:	2b 81       	ldd	r18, Y+3	; 0x03
    2d98:	3c 81       	ldd	r19, Y+4	; 0x04
    2d9a:	82 2b       	or	r24, r18
    2d9c:	93 2b       	or	r25, r19
    2d9e:	9c 83       	std	Y+4, r25	; 0x04
    2da0:	8b 83       	std	Y+3, r24	; 0x03
		
	//Assign global reading and set flag
	globalADC=adcReading;
    2da2:	8b 81       	ldd	r24, Y+3	; 0x03
    2da4:	9c 81       	ldd	r25, Y+4	; 0x04
    2da6:	90 93 a3 01 	sts	0x01A3, r25
    2daa:	80 93 a2 01 	sts	0x01A2, r24
	flagGoodVolts = (adcReading < LOW_BATT_ADC) ? fFalse : fTrue;
    2dae:	21 e0       	ldi	r18, 0x01	; 1
    2db0:	8b 81       	ldd	r24, Y+3	; 0x03
    2db2:	9c 81       	ldd	r25, Y+4	; 0x04
    2db4:	f3 e0       	ldi	r31, 0x03	; 3
    2db6:	82 37       	cpi	r24, 0x72	; 114
    2db8:	9f 07       	cpc	r25, r31
    2dba:	08 f4       	brcc	.+2      	; 0x2dbe <_Z7TakeADCv+0xf2>
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	20 93 dd 01 	sts	0x01DD, r18
		
	//Re-enable interrupts
	sei();
    2dc2:	78 94       	sei
	
	//Disable ADC hardware/registers
	ADCSRA = 0;
    2dc4:	8a e7       	ldi	r24, 0x7A	; 122
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	fc 01       	movw	r30, r24
    2dca:	10 82       	st	Z, r1
	ADMUX = 0;
    2dcc:	8c e7       	ldi	r24, 0x7C	; 124
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	fc 01       	movw	r30, r24
    2dd2:	10 82       	st	Z, r1
	DIDR0 |= (1 << ADC0D);
    2dd4:	8e e7       	ldi	r24, 0x7E	; 126
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	2e e7       	ldi	r18, 0x7E	; 126
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	f9 01       	movw	r30, r18
    2dde:	20 81       	ld	r18, Z
    2de0:	21 60       	ori	r18, 0x01	; 1
    2de2:	fc 01       	movw	r30, r24
    2de4:	20 83       	st	Z, r18
	
	//Turn off power
	PRR0 |= (1 << PRADC);
    2de6:	84 e6       	ldi	r24, 0x64	; 100
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	24 e6       	ldi	r18, 0x64	; 100
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	f9 01       	movw	r30, r18
    2df0:	20 81       	ld	r18, Z
    2df2:	21 60       	ori	r18, 0x01	; 1
    2df4:	fc 01       	movw	r30, r24
    2df6:	20 83       	st	Z, r18
}
    2df8:	0f 90       	pop	r0
    2dfa:	0f 90       	pop	r0
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
    2e00:	df 91       	pop	r29
    2e02:	cf 91       	pop	r28
    2e04:	08 95       	ret

00002e06 <_Z7GetTempv>:

/*************************************************************************************************************/

void GetTemp(){
    2e06:	cf 93       	push	r28
    2e08:	df 93       	push	r29
    2e0a:	00 d0       	rcall	.+0      	; 0x2e0c <_Z7GetTempv+0x6>
    2e0c:	cd b7       	in	r28, 0x3d	; 61
    2e0e:	de b7       	in	r29, 0x3e	; 62
	WORD rawTemp = 0;
    2e10:	1a 82       	std	Y+2, r1	; 0x02
    2e12:	19 82       	std	Y+1, r1	; 0x01
	
	//Power on temp monitor, let it settle
	prtTEMPen |= (1 << bnTEMPen);
    2e14:	85 e2       	ldi	r24, 0x25	; 37
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	25 e2       	ldi	r18, 0x25	; 37
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	f9 01       	movw	r30, r18
    2e1e:	20 81       	ld	r18, Z
    2e20:	21 60       	ori	r18, 0x01	; 1
    2e22:	fc 01       	movw	r30, r24
    2e24:	20 83       	st	Z, r18
	PRR0 &= ~(1 << PRSPI);	
    2e26:	84 e6       	ldi	r24, 0x64	; 100
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	24 e6       	ldi	r18, 0x64	; 100
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	f9 01       	movw	r30, r18
    2e30:	20 81       	ld	r18, Z
    2e32:	2b 7f       	andi	r18, 0xFB	; 251
    2e34:	fc 01       	movw	r30, r24
    2e36:	20 83       	st	Z, r18
	SPCR |= (1 << MSTR)|(1 << SPE)|(1 << SPR0);			//enables SPI, master, fck/64
    2e38:	8c e4       	ldi	r24, 0x4C	; 76
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	2c e4       	ldi	r18, 0x4C	; 76
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	f9 01       	movw	r30, r18
    2e42:	20 81       	ld	r18, Z
    2e44:	21 65       	ori	r18, 0x51	; 81
    2e46:	fc 01       	movw	r30, r24
    2e48:	20 83       	st	Z, r18
	Wait_sec(1);
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <_Z8Wait_seci>
	//Slave select goes low, sck goes low,  to signal start of transmission
	prtSpi0 &= ~((1 << bnSck0)|(1 << bnSS0));
    2e52:	85 e2       	ldi	r24, 0x25	; 37
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	25 e2       	ldi	r18, 0x25	; 37
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	f9 01       	movw	r30, r18
    2e5c:	20 81       	ld	r18, Z
    2e5e:	2f 76       	andi	r18, 0x6F	; 111
    2e60:	fc 01       	movw	r30, r24
    2e62:	20 83       	st	Z, r18
	
	cli();
    2e64:	f8 94       	cli
	//Write to buffer to start transmission
	SPDR = 0x00;
    2e66:	8e e4       	ldi	r24, 0x4E	; 78
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	fc 01       	movw	r30, r24
    2e6c:	10 82       	st	Z, r1
	//Wait for data to be receieved.
	while (!(SPSR & (1 << SPIF)));
    2e6e:	00 00       	nop
    2e70:	8d e4       	ldi	r24, 0x4D	; 77
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	fc 01       	movw	r30, r24
    2e76:	80 81       	ld	r24, Z
    2e78:	80 95       	com	r24
    2e7a:	88 1f       	adc	r24, r24
    2e7c:	88 27       	eor	r24, r24
    2e7e:	88 1f       	adc	r24, r24
    2e80:	88 23       	and	r24, r24
    2e82:	b1 f7       	brne	.-20     	; 0x2e70 <_Z7GetTempv+0x6a>
	rawTemp = (SPDR0 << 8);
    2e84:	1a 82       	std	Y+2, r1	; 0x02
    2e86:	19 82       	std	Y+1, r1	; 0x01
	SPDR = 0x00;
    2e88:	8e e4       	ldi	r24, 0x4E	; 78
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	fc 01       	movw	r30, r24
    2e8e:	10 82       	st	Z, r1
	while (!(SPSR & (1 << SPIF)));
    2e90:	00 00       	nop
    2e92:	8d e4       	ldi	r24, 0x4D	; 77
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	fc 01       	movw	r30, r24
    2e98:	80 81       	ld	r24, Z
    2e9a:	80 95       	com	r24
    2e9c:	88 1f       	adc	r24, r24
    2e9e:	88 27       	eor	r24, r24
    2ea0:	88 1f       	adc	r24, r24
    2ea2:	88 23       	and	r24, r24
    2ea4:	b1 f7       	brne	.-20     	; 0x2e92 <_Z7GetTempv+0x8c>
	rawTemp |= SPDR0;
	
	//Set flag to correct value, update global value
	flagGoodTemp = (rawTemp < HIGH_TEMP) ? fTrue : fFalse;
    2ea6:	89 81       	ldd	r24, Y+1	; 0x01
    2ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eaa:	f2 e3       	ldi	r31, 0x32	; 50
    2eac:	84 36       	cpi	r24, 0x64	; 100
    2eae:	9f 07       	cpc	r25, r31
    2eb0:	10 f4       	brcc	.+4      	; 0x2eb6 <_Z7GetTempv+0xb0>
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	01 c0       	rjmp	.+2      	; 0x2eb8 <_Z7GetTempv+0xb2>
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	80 93 dc 01 	sts	0x01DC, r24
	globalTemp=rawTemp;
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
    2ebe:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec0:	90 93 a5 01 	sts	0x01A5, r25
    2ec4:	80 93 a4 01 	sts	0x01A4, r24
	
	//re enable interrupts
	sei();
    2ec8:	78 94       	sei
	
	//Bring SS high, clear SPCR0 register and turn power off to SPI and device
	prtSpi0 |= (1 << bnSS0)|(1 << bnSck0);
    2eca:	85 e2       	ldi	r24, 0x25	; 37
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	25 e2       	ldi	r18, 0x25	; 37
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	f9 01       	movw	r30, r18
    2ed4:	20 81       	ld	r18, Z
    2ed6:	20 69       	ori	r18, 0x90	; 144
    2ed8:	fc 01       	movw	r30, r24
    2eda:	20 83       	st	Z, r18
	SPCR=0x00;	
    2edc:	8c e4       	ldi	r24, 0x4C	; 76
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	10 82       	st	Z, r1
	prtTEMPen &= ~(1 << bnTEMPen);
    2ee4:	85 e2       	ldi	r24, 0x25	; 37
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	25 e2       	ldi	r18, 0x25	; 37
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	f9 01       	movw	r30, r18
    2eee:	20 81       	ld	r18, Z
    2ef0:	2e 7f       	andi	r18, 0xFE	; 254
    2ef2:	fc 01       	movw	r30, r24
    2ef4:	20 83       	st	Z, r18
	PRR0 |= (1 << PRSPI);
    2ef6:	84 e6       	ldi	r24, 0x64	; 100
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	24 e6       	ldi	r18, 0x64	; 100
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	f9 01       	movw	r30, r18
    2f00:	20 81       	ld	r18, Z
    2f02:	24 60       	ori	r18, 0x04	; 4
    2f04:	fc 01       	movw	r30, r24
    2f06:	20 83       	st	Z, r18
}
    2f08:	0f 90       	pop	r0
    2f0a:	0f 90       	pop	r0
    2f0c:	df 91       	pop	r29
    2f0e:	cf 91       	pop	r28
    2f10:	08 95       	ret

00002f12 <_Z7PowerUpj>:
/*************************************************************************************************************/
void PowerUp(WORD interval){
    2f12:	cf 93       	push	r28
    2f14:	df 93       	push	r29
    2f16:	00 d0       	rcall	.+0      	; 0x2f18 <_Z7PowerUpj+0x6>
    2f18:	cd b7       	in	r28, 0x3d	; 61
    2f1a:	de b7       	in	r29, 0x3e	; 62
    2f1c:	9a 83       	std	Y+2, r25	; 0x02
    2f1e:	89 83       	std	Y+1, r24	; 0x01
	cli();
    2f20:	f8 94       	cli
	
	//First power on main regulator
	__enableMain();
    2f22:	88 e2       	ldi	r24, 0x28	; 40
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	28 e2       	ldi	r18, 0x28	; 40
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	f9 01       	movw	r30, r18
    2f2c:	20 81       	ld	r18, Z
    2f2e:	21 60       	ori	r18, 0x01	; 1
    2f30:	fc 01       	movw	r30, r24
    2f32:	20 83       	st	Z, r18
	Wait_ms(interval);
    2f34:	89 81       	ldd	r24, Y+1	; 0x01
    2f36:	9a 81       	ldd	r25, Y+2	; 0x02
    2f38:	0e 94 80 15 	call	0x2b00	; 0x2b00 <_Z7Wait_msi>
	
	//Power on BeagleBone next, takes longer time.
	__enableBeagleBone();
    2f3c:	82 e2       	ldi	r24, 0x22	; 34
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	22 e2       	ldi	r18, 0x22	; 34
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	f9 01       	movw	r30, r18
    2f46:	20 81       	ld	r18, Z
    2f48:	20 61       	ori	r18, 0x10	; 16
    2f4a:	fc 01       	movw	r30, r24
    2f4c:	20 83       	st	Z, r18
	Wait_ms(interval);
    2f4e:	89 81       	ldd	r24, Y+1	; 0x01
    2f50:	9a 81       	ldd	r25, Y+2	; 0x02
    2f52:	0e 94 80 15 	call	0x2b00	; 0x2b00 <_Z7Wait_msi>
	//while (!(pinBBio & (1 << bnW0B9)));	//Wait for GPIO line to go high
	
	//Power on GAVR and Enable GPS
	__enableGPSandGAVR();
    2f56:	82 e2       	ldi	r24, 0x22	; 34
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	22 e2       	ldi	r18, 0x22	; 34
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	f9 01       	movw	r30, r18
    2f60:	20 81       	ld	r18, Z
    2f62:	20 6c       	ori	r18, 0xC0	; 192
    2f64:	fc 01       	movw	r30, r24
    2f66:	20 83       	st	Z, r18
	Wait_ms(interval);
    2f68:	89 81       	ldd	r24, Y+1	; 0x01
    2f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f6c:	0e 94 80 15 	call	0x2b00	; 0x2b00 <_Z7Wait_msi>
	//while (!(pinGAVRio & (1 << bnW3G0)));	//Wait for GPIO line to go high signifying correct boot
	
	//Power on LCD
	__enableLCD();
    2f70:	82 e2       	ldi	r24, 0x22	; 34
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	22 e2       	ldi	r18, 0x22	; 34
    2f76:	30 e0       	ldi	r19, 0x00	; 0
    2f78:	f9 01       	movw	r30, r18
    2f7a:	20 81       	ld	r18, Z
    2f7c:	20 62       	ori	r18, 0x20	; 32
    2f7e:	fc 01       	movw	r30, r24
    2f80:	20 83       	st	Z, r18
	Wait_ms(interval);
    2f82:	89 81       	ldd	r24, Y+1	; 0x01
    2f84:	9a 81       	ldd	r25, Y+2	; 0x02
    2f86:	0e 94 80 15 	call	0x2b00	; 0x2b00 <_Z7Wait_msi>
	sei();
    2f8a:	78 94       	sei
	
}
    2f8c:	0f 90       	pop	r0
    2f8e:	0f 90       	pop	r0
    2f90:	df 91       	pop	r29
    2f92:	cf 91       	pop	r28
    2f94:	08 95       	ret

00002f96 <_Z9PowerDownv>:
/*************************************************************************************************************/
void PowerDown(){
    2f96:	cf 93       	push	r28
    2f98:	df 93       	push	r29
    2f9a:	cd b7       	in	r28, 0x3d	; 61
    2f9c:	de b7       	in	r29, 0x3e	; 62
	cli();
    2f9e:	f8 94       	cli
	//Signify interrupts, wait 6 seconds for all processing to stop.
	prtInterrupts |= (1 << bnBBint)|(1 << bnGAVRint);
    2fa0:	82 e2       	ldi	r24, 0x22	; 34
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	22 e2       	ldi	r18, 0x22	; 34
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	f9 01       	movw	r30, r18
    2faa:	20 81       	ld	r18, Z
    2fac:	2c 60       	ori	r18, 0x0C	; 12
    2fae:	fc 01       	movw	r30, r24
    2fb0:	20 83       	st	Z, r18
	Wait_sec(6);
    2fb2:	86 e0       	ldi	r24, 0x06	; 6
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <_Z8Wait_seci>
	prtInterrupts &= ~((1 << bnBBint)|(1 << bnGAVRint));
    2fba:	82 e2       	ldi	r24, 0x22	; 34
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	22 e2       	ldi	r18, 0x22	; 34
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	f9 01       	movw	r30, r18
    2fc4:	20 81       	ld	r18, Z
    2fc6:	23 7f       	andi	r18, 0xF3	; 243
    2fc8:	fc 01       	movw	r30, r24
    2fca:	20 83       	st	Z, r18
	__killLCD();
    2fcc:	82 e2       	ldi	r24, 0x22	; 34
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	22 e2       	ldi	r18, 0x22	; 34
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	f9 01       	movw	r30, r18
    2fd6:	20 81       	ld	r18, Z
    2fd8:	2f 7d       	andi	r18, 0xDF	; 223
    2fda:	fc 01       	movw	r30, r24
    2fdc:	20 83       	st	Z, r18
	__killGPSandGAVR();
    2fde:	82 e2       	ldi	r24, 0x22	; 34
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	22 e2       	ldi	r18, 0x22	; 34
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	f9 01       	movw	r30, r18
    2fe8:	20 81       	ld	r18, Z
    2fea:	2f 73       	andi	r18, 0x3F	; 63
    2fec:	fc 01       	movw	r30, r24
    2fee:	20 83       	st	Z, r18
	
	//Give the BeagleBone another 6 seconds to finish it's stuff, then kill it
	Wait_sec(6);
    2ff0:	86 e0       	ldi	r24, 0x06	; 6
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <_Z8Wait_seci>
	__killBeagleBone();
    2ff8:	82 e2       	ldi	r24, 0x22	; 34
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	22 e2       	ldi	r18, 0x22	; 34
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	f9 01       	movw	r30, r18
    3002:	20 81       	ld	r18, Z
    3004:	2f 7e       	andi	r18, 0xEF	; 239
    3006:	fc 01       	movw	r30, r24
    3008:	20 83       	st	Z, r18
	__killMain();
    300a:	88 e2       	ldi	r24, 0x28	; 40
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	28 e2       	ldi	r18, 0x28	; 40
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	f9 01       	movw	r30, r18
    3014:	20 81       	ld	r18, Z
    3016:	2e 7f       	andi	r18, 0xFE	; 254
    3018:	fc 01       	movw	r30, r24
    301a:	20 83       	st	Z, r18
	sei();
    301c:	78 94       	sei
}
    301e:	df 91       	pop	r29
    3020:	cf 91       	pop	r28
    3022:	08 95       	ret

00003024 <_Z41__static_initialization_and_destruction_0ii>:
    3024:	cf 93       	push	r28
    3026:	df 93       	push	r29
    3028:	00 d0       	rcall	.+0      	; 0x302a <_Z41__static_initialization_and_destruction_0ii+0x6>
    302a:	00 d0       	rcall	.+0      	; 0x302c <_Z41__static_initialization_and_destruction_0ii+0x8>
    302c:	cd b7       	in	r28, 0x3d	; 61
    302e:	de b7       	in	r29, 0x3e	; 62
    3030:	9a 83       	std	Y+2, r25	; 0x02
    3032:	89 83       	std	Y+1, r24	; 0x01
    3034:	7c 83       	std	Y+4, r23	; 0x04
    3036:	6b 83       	std	Y+3, r22	; 0x03
    3038:	89 81       	ldd	r24, Y+1	; 0x01
    303a:	9a 81       	ldd	r25, Y+2	; 0x02
    303c:	81 30       	cpi	r24, 0x01	; 1
    303e:	91 05       	cpc	r25, r1
    3040:	51 f4       	brne	.+20     	; 0x3056 <_Z41__static_initialization_and_destruction_0ii+0x32>
    3042:	8b 81       	ldd	r24, Y+3	; 0x03
    3044:	9c 81       	ldd	r25, Y+4	; 0x04
    3046:	2f ef       	ldi	r18, 0xFF	; 255
    3048:	8f 3f       	cpi	r24, 0xFF	; 255
    304a:	92 07       	cpc	r25, r18
    304c:	21 f4       	brne	.+8      	; 0x3056 <_Z41__static_initialization_and_destruction_0ii+0x32>

/*********************************************GLOBAL VARIABLES***************************************************/
/****************************************************************************************************************/
WORD globalADC=0, globalTemp=0;
//volatile int timeOut=0;
myTime currentTime;  //The clock, MUST BE GLOBAL. In final program, will initiate with NOTHING, then GPS will update on the actual time into beaglebone, beaglebone pings us, then dunzo OR have UART into this as well, then get time and be done.
    304e:	86 ea       	ldi	r24, 0xA6	; 166
    3050:	91 e0       	ldi	r25, 0x01	; 1
    3052:	0e 94 15 04 	call	0x82a	; 0x82a <_ZN6myTimeC1Ev>
	//Give the BeagleBone another 6 seconds to finish it's stuff, then kill it
	Wait_sec(6);
	__killBeagleBone();
	__killMain();
	sei();
}
    3056:	0f 90       	pop	r0
    3058:	0f 90       	pop	r0
    305a:	0f 90       	pop	r0
    305c:	0f 90       	pop	r0
    305e:	df 91       	pop	r29
    3060:	cf 91       	pop	r28
    3062:	08 95       	ret

00003064 <_GLOBAL__sub_I__ZN6myDateC2Ev>:
    3064:	cf 93       	push	r28
    3066:	df 93       	push	r29
    3068:	cd b7       	in	r28, 0x3d	; 61
    306a:	de b7       	in	r29, 0x3e	; 62
    306c:	81 e0       	ldi	r24, 0x01	; 1
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	6f ef       	ldi	r22, 0xFF	; 255
    3072:	7f ef       	ldi	r23, 0xFF	; 255
    3074:	0e 94 12 18 	call	0x3024	; 0x3024 <_Z41__static_initialization_and_destruction_0ii>
    3078:	df 91       	pop	r29
    307a:	cf 91       	pop	r28
    307c:	08 95       	ret

0000307e <__udivmodqi4>:
    307e:	99 1b       	sub	r25, r25
    3080:	79 e0       	ldi	r23, 0x09	; 9
    3082:	04 c0       	rjmp	.+8      	; 0x308c <__udivmodqi4_ep>

00003084 <__udivmodqi4_loop>:
    3084:	99 1f       	adc	r25, r25
    3086:	96 17       	cp	r25, r22
    3088:	08 f0       	brcs	.+2      	; 0x308c <__udivmodqi4_ep>
    308a:	96 1b       	sub	r25, r22

0000308c <__udivmodqi4_ep>:
    308c:	88 1f       	adc	r24, r24
    308e:	7a 95       	dec	r23
    3090:	c9 f7       	brne	.-14     	; 0x3084 <__udivmodqi4_loop>
    3092:	80 95       	com	r24
    3094:	08 95       	ret

00003096 <__divmodhi4>:
    3096:	97 fb       	bst	r25, 7
    3098:	09 2e       	mov	r0, r25
    309a:	07 26       	eor	r0, r23
    309c:	0a d0       	rcall	.+20     	; 0x30b2 <__divmodhi4_neg1>
    309e:	77 fd       	sbrc	r23, 7
    30a0:	04 d0       	rcall	.+8      	; 0x30aa <__divmodhi4_neg2>
    30a2:	0c d0       	rcall	.+24     	; 0x30bc <__udivmodhi4>
    30a4:	06 d0       	rcall	.+12     	; 0x30b2 <__divmodhi4_neg1>
    30a6:	00 20       	and	r0, r0
    30a8:	1a f4       	brpl	.+6      	; 0x30b0 <__divmodhi4_exit>

000030aa <__divmodhi4_neg2>:
    30aa:	70 95       	com	r23
    30ac:	61 95       	neg	r22
    30ae:	7f 4f       	sbci	r23, 0xFF	; 255

000030b0 <__divmodhi4_exit>:
    30b0:	08 95       	ret

000030b2 <__divmodhi4_neg1>:
    30b2:	f6 f7       	brtc	.-4      	; 0x30b0 <__divmodhi4_exit>
    30b4:	90 95       	com	r25
    30b6:	81 95       	neg	r24
    30b8:	9f 4f       	sbci	r25, 0xFF	; 255
    30ba:	08 95       	ret

000030bc <__udivmodhi4>:
    30bc:	aa 1b       	sub	r26, r26
    30be:	bb 1b       	sub	r27, r27
    30c0:	51 e1       	ldi	r21, 0x11	; 17
    30c2:	07 c0       	rjmp	.+14     	; 0x30d2 <__udivmodhi4_ep>

000030c4 <__udivmodhi4_loop>:
    30c4:	aa 1f       	adc	r26, r26
    30c6:	bb 1f       	adc	r27, r27
    30c8:	a6 17       	cp	r26, r22
    30ca:	b7 07       	cpc	r27, r23
    30cc:	10 f0       	brcs	.+4      	; 0x30d2 <__udivmodhi4_ep>
    30ce:	a6 1b       	sub	r26, r22
    30d0:	b7 0b       	sbc	r27, r23

000030d2 <__udivmodhi4_ep>:
    30d2:	88 1f       	adc	r24, r24
    30d4:	99 1f       	adc	r25, r25
    30d6:	5a 95       	dec	r21
    30d8:	a9 f7       	brne	.-22     	; 0x30c4 <__udivmodhi4_loop>
    30da:	80 95       	com	r24
    30dc:	90 95       	com	r25
    30de:	bc 01       	movw	r22, r24
    30e0:	cd 01       	movw	r24, r26
    30e2:	08 95       	ret

000030e4 <__tablejump2__>:
    30e4:	ee 0f       	add	r30, r30
    30e6:	ff 1f       	adc	r31, r31

000030e8 <__tablejump__>:
    30e8:	05 90       	lpm	r0, Z+
    30ea:	f4 91       	lpm	r31, Z
    30ec:	e0 2d       	mov	r30, r0
    30ee:	09 94       	ijmp

000030f0 <atoi>:
    30f0:	fc 01       	movw	r30, r24
    30f2:	88 27       	eor	r24, r24
    30f4:	99 27       	eor	r25, r25
    30f6:	e8 94       	clt
    30f8:	21 91       	ld	r18, Z+
    30fa:	20 32       	cpi	r18, 0x20	; 32
    30fc:	e9 f3       	breq	.-6      	; 0x30f8 <atoi+0x8>
    30fe:	29 30       	cpi	r18, 0x09	; 9
    3100:	10 f0       	brcs	.+4      	; 0x3106 <atoi+0x16>
    3102:	2e 30       	cpi	r18, 0x0E	; 14
    3104:	c8 f3       	brcs	.-14     	; 0x30f8 <atoi+0x8>
    3106:	2b 32       	cpi	r18, 0x2B	; 43
    3108:	41 f0       	breq	.+16     	; 0x311a <atoi+0x2a>
    310a:	2d 32       	cpi	r18, 0x2D	; 45
    310c:	39 f4       	brne	.+14     	; 0x311c <atoi+0x2c>
    310e:	68 94       	set
    3110:	04 c0       	rjmp	.+8      	; 0x311a <atoi+0x2a>
    3112:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <__mulhi_const_10>
    3116:	82 0f       	add	r24, r18
    3118:	91 1d       	adc	r25, r1
    311a:	21 91       	ld	r18, Z+
    311c:	20 53       	subi	r18, 0x30	; 48
    311e:	2a 30       	cpi	r18, 0x0A	; 10
    3120:	c0 f3       	brcs	.-16     	; 0x3112 <atoi+0x22>
    3122:	1e f4       	brtc	.+6      	; 0x312a <atoi+0x3a>
    3124:	90 95       	com	r25
    3126:	81 95       	neg	r24
    3128:	9f 4f       	sbci	r25, 0xFF	; 255
    312a:	08 95       	ret

0000312c <strcat>:
    312c:	fb 01       	movw	r30, r22
    312e:	dc 01       	movw	r26, r24
    3130:	0d 90       	ld	r0, X+
    3132:	00 20       	and	r0, r0
    3134:	e9 f7       	brne	.-6      	; 0x3130 <strcat+0x4>
    3136:	11 97       	sbiw	r26, 0x01	; 1
    3138:	01 90       	ld	r0, Z+
    313a:	0d 92       	st	X+, r0
    313c:	00 20       	and	r0, r0
    313e:	e1 f7       	brne	.-8      	; 0x3138 <strcat+0xc>
    3140:	08 95       	ret

00003142 <strcmp>:
    3142:	fb 01       	movw	r30, r22
    3144:	dc 01       	movw	r26, r24
    3146:	8d 91       	ld	r24, X+
    3148:	01 90       	ld	r0, Z+
    314a:	80 19       	sub	r24, r0
    314c:	01 10       	cpse	r0, r1
    314e:	d9 f3       	breq	.-10     	; 0x3146 <strcmp+0x4>
    3150:	99 0b       	sbc	r25, r25
    3152:	08 95       	ret

00003154 <strcpy>:
    3154:	fb 01       	movw	r30, r22
    3156:	dc 01       	movw	r26, r24
    3158:	01 90       	ld	r0, Z+
    315a:	0d 92       	st	X+, r0
    315c:	00 20       	and	r0, r0
    315e:	e1 f7       	brne	.-8      	; 0x3158 <strcpy+0x4>
    3160:	08 95       	ret

00003162 <strncmp>:
    3162:	fb 01       	movw	r30, r22
    3164:	dc 01       	movw	r26, r24
    3166:	41 50       	subi	r20, 0x01	; 1
    3168:	50 40       	sbci	r21, 0x00	; 0
    316a:	30 f0       	brcs	.+12     	; 0x3178 <strncmp+0x16>
    316c:	8d 91       	ld	r24, X+
    316e:	01 90       	ld	r0, Z+
    3170:	80 19       	sub	r24, r0
    3172:	19 f4       	brne	.+6      	; 0x317a <strncmp+0x18>
    3174:	00 20       	and	r0, r0
    3176:	b9 f7       	brne	.-18     	; 0x3166 <strncmp+0x4>
    3178:	88 1b       	sub	r24, r24
    317a:	99 0b       	sbc	r25, r25
    317c:	08 95       	ret

0000317e <itoa>:
    317e:	fb 01       	movw	r30, r22
    3180:	9f 01       	movw	r18, r30
    3182:	e8 94       	clt
    3184:	42 30       	cpi	r20, 0x02	; 2
    3186:	c4 f0       	brlt	.+48     	; 0x31b8 <itoa+0x3a>
    3188:	45 32       	cpi	r20, 0x25	; 37
    318a:	b4 f4       	brge	.+44     	; 0x31b8 <itoa+0x3a>
    318c:	4a 30       	cpi	r20, 0x0A	; 10
    318e:	29 f4       	brne	.+10     	; 0x319a <itoa+0x1c>
    3190:	97 fb       	bst	r25, 7
    3192:	1e f4       	brtc	.+6      	; 0x319a <itoa+0x1c>
    3194:	90 95       	com	r25
    3196:	81 95       	neg	r24
    3198:	9f 4f       	sbci	r25, 0xFF	; 255
    319a:	64 2f       	mov	r22, r20
    319c:	77 27       	eor	r23, r23
    319e:	0e 94 5e 18 	call	0x30bc	; 0x30bc <__udivmodhi4>
    31a2:	80 5d       	subi	r24, 0xD0	; 208
    31a4:	8a 33       	cpi	r24, 0x3A	; 58
    31a6:	0c f0       	brlt	.+2      	; 0x31aa <itoa+0x2c>
    31a8:	89 5d       	subi	r24, 0xD9	; 217
    31aa:	81 93       	st	Z+, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	00 97       	sbiw	r24, 0x00	; 0
    31b0:	a1 f7       	brne	.-24     	; 0x319a <itoa+0x1c>
    31b2:	16 f4       	brtc	.+4      	; 0x31b8 <itoa+0x3a>
    31b4:	5d e2       	ldi	r21, 0x2D	; 45
    31b6:	51 93       	st	Z+, r21
    31b8:	10 82       	st	Z, r1
    31ba:	c9 01       	movw	r24, r18
    31bc:	0c 94 1f 19 	jmp	0x323e	; 0x323e <strrev>

000031c0 <__mulhi_const_10>:
    31c0:	7a e0       	ldi	r23, 0x0A	; 10
    31c2:	97 9f       	mul	r25, r23
    31c4:	90 2d       	mov	r25, r0
    31c6:	87 9f       	mul	r24, r23
    31c8:	80 2d       	mov	r24, r0
    31ca:	91 0d       	add	r25, r1
    31cc:	11 24       	eor	r1, r1
    31ce:	08 95       	ret

000031d0 <utoa>:
    31d0:	fb 01       	movw	r30, r22
    31d2:	9f 01       	movw	r18, r30
    31d4:	42 30       	cpi	r20, 0x02	; 2
    31d6:	74 f0       	brlt	.+28     	; 0x31f4 <utoa+0x24>
    31d8:	45 32       	cpi	r20, 0x25	; 37
    31da:	64 f4       	brge	.+24     	; 0x31f4 <utoa+0x24>
    31dc:	64 2f       	mov	r22, r20
    31de:	77 27       	eor	r23, r23
    31e0:	0e 94 5e 18 	call	0x30bc	; 0x30bc <__udivmodhi4>
    31e4:	80 5d       	subi	r24, 0xD0	; 208
    31e6:	8a 33       	cpi	r24, 0x3A	; 58
    31e8:	0c f0       	brlt	.+2      	; 0x31ec <utoa+0x1c>
    31ea:	89 5d       	subi	r24, 0xD9	; 217
    31ec:	81 93       	st	Z+, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	00 97       	sbiw	r24, 0x00	; 0
    31f2:	a1 f7       	brne	.-24     	; 0x31dc <utoa+0xc>
    31f4:	10 82       	st	Z, r1
    31f6:	c9 01       	movw	r24, r18
    31f8:	0c 94 1f 19 	jmp	0x323e	; 0x323e <strrev>

000031fc <__eerd_byte_m644pa>:
    31fc:	f9 99       	sbic	0x1f, 1	; 31
    31fe:	fe cf       	rjmp	.-4      	; 0x31fc <__eerd_byte_m644pa>
    3200:	92 bd       	out	0x22, r25	; 34
    3202:	81 bd       	out	0x21, r24	; 33
    3204:	f8 9a       	sbi	0x1f, 0	; 31
    3206:	99 27       	eor	r25, r25
    3208:	80 b5       	in	r24, 0x20	; 32
    320a:	08 95       	ret

0000320c <__eerd_word_m644pa>:
    320c:	a8 e1       	ldi	r26, 0x18	; 24
    320e:	b0 e0       	ldi	r27, 0x00	; 0
    3210:	42 e0       	ldi	r20, 0x02	; 2
    3212:	50 e0       	ldi	r21, 0x00	; 0
    3214:	0c 94 31 19 	jmp	0x3262	; 0x3262 <__eerd_blraw_m644pa>

00003218 <__eewr_byte_m644pa>:
    3218:	26 2f       	mov	r18, r22

0000321a <__eewr_r18_m644pa>:
    321a:	f9 99       	sbic	0x1f, 1	; 31
    321c:	fe cf       	rjmp	.-4      	; 0x321a <__eewr_r18_m644pa>
    321e:	1f ba       	out	0x1f, r1	; 31
    3220:	92 bd       	out	0x22, r25	; 34
    3222:	81 bd       	out	0x21, r24	; 33
    3224:	20 bd       	out	0x20, r18	; 32
    3226:	0f b6       	in	r0, 0x3f	; 63
    3228:	f8 94       	cli
    322a:	fa 9a       	sbi	0x1f, 2	; 31
    322c:	f9 9a       	sbi	0x1f, 1	; 31
    322e:	0f be       	out	0x3f, r0	; 63
    3230:	01 96       	adiw	r24, 0x01	; 1
    3232:	08 95       	ret

00003234 <__eewr_word_m644pa>:
    3234:	0e 94 0c 19 	call	0x3218	; 0x3218 <__eewr_byte_m644pa>
    3238:	27 2f       	mov	r18, r23
    323a:	0c 94 0d 19 	jmp	0x321a	; 0x321a <__eewr_r18_m644pa>

0000323e <strrev>:
    323e:	dc 01       	movw	r26, r24
    3240:	fc 01       	movw	r30, r24
    3242:	67 2f       	mov	r22, r23
    3244:	71 91       	ld	r23, Z+
    3246:	77 23       	and	r23, r23
    3248:	e1 f7       	brne	.-8      	; 0x3242 <strrev+0x4>
    324a:	32 97       	sbiw	r30, 0x02	; 2
    324c:	04 c0       	rjmp	.+8      	; 0x3256 <strrev+0x18>
    324e:	7c 91       	ld	r23, X
    3250:	6d 93       	st	X+, r22
    3252:	70 83       	st	Z, r23
    3254:	62 91       	ld	r22, -Z
    3256:	ae 17       	cp	r26, r30
    3258:	bf 07       	cpc	r27, r31
    325a:	c8 f3       	brcs	.-14     	; 0x324e <strrev+0x10>
    325c:	08 95       	ret

0000325e <__eerd_block_m644pa>:
    325e:	dc 01       	movw	r26, r24
    3260:	cb 01       	movw	r24, r22

00003262 <__eerd_blraw_m644pa>:
    3262:	fc 01       	movw	r30, r24
    3264:	f9 99       	sbic	0x1f, 1	; 31
    3266:	fe cf       	rjmp	.-4      	; 0x3264 <__eerd_blraw_m644pa+0x2>
    3268:	06 c0       	rjmp	.+12     	; 0x3276 <__eerd_blraw_m644pa+0x14>
    326a:	f2 bd       	out	0x22, r31	; 34
    326c:	e1 bd       	out	0x21, r30	; 33
    326e:	f8 9a       	sbi	0x1f, 0	; 31
    3270:	31 96       	adiw	r30, 0x01	; 1
    3272:	00 b4       	in	r0, 0x20	; 32
    3274:	0d 92       	st	X+, r0
    3276:	41 50       	subi	r20, 0x01	; 1
    3278:	50 40       	sbci	r21, 0x00	; 0
    327a:	b8 f7       	brcc	.-18     	; 0x326a <__eerd_blraw_m644pa+0x8>
    327c:	08 95       	ret

0000327e <_exit>:
    327e:	f8 94       	cli

00003280 <__stop_program>:
    3280:	ff cf       	rjmp	.-2      	; 0x3280 <__stop_program>
