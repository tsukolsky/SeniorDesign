
WAVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800100  00002ba8  00002c5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ba8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  00800188  00800188  00002ce4  2**0
                  ALLOC
  3 .eeprom       00000007  00810000  00810000  00002ce4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00001134  00000000  00000000  00002cec  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000588  00000000  00000000  00003e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000120  00000000  00000000  000043a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f39  00000000  00000000  000044c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000039b  00000000  00000000  00006401  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dc1  00000000  00000000  0000679c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007a8  00000000  00000000  00007560  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000a31  00000000  00000000  00007d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001035  00000000  00000000  00008739  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__vector_3>
      10:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <__vector_4>
      14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      2c:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__vector_11>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__vector_20>
      54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      68:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      6c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      70:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      74:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      78:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

0000007c <__ctors_start>:
      7c:	d3 14       	cp	r13, r3

0000007e <__ctors_end>:
      7e:	11 24       	eor	r1, r1
      80:	1f be       	out	0x3f, r1	; 63
      82:	cf ef       	ldi	r28, 0xFF	; 255
      84:	d8 e0       	ldi	r29, 0x08	; 8
      86:	de bf       	out	0x3e, r29	; 62
      88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_copy_data>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 e0       	ldi	r26, 0x00	; 0
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	e8 ea       	ldi	r30, 0xA8	; 168
      92:	fb e2       	ldi	r31, 0x2B	; 43
      94:	02 c0       	rjmp	.+4      	; 0x9a <__do_copy_data+0x10>
      96:	05 90       	lpm	r0, Z+
      98:	0d 92       	st	X+, r0
      9a:	a8 38       	cpi	r26, 0x88	; 136
      9c:	b1 07       	cpc	r27, r17
      9e:	d9 f7       	brne	.-10     	; 0x96 <__do_copy_data+0xc>

000000a0 <__do_clear_bss>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a8 e8       	ldi	r26, 0x88	; 136
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
      a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
      aa:	ae 3c       	cpi	r26, 0xCE	; 206
      ac:	b1 07       	cpc	r27, r17
      ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>

000000b0 <__do_global_ctors>:
      b0:	10 e0       	ldi	r17, 0x00	; 0
      b2:	ce e7       	ldi	r28, 0x7E	; 126
      b4:	d0 e0       	ldi	r29, 0x00	; 0
      b6:	04 c0       	rjmp	.+8      	; 0xc0 <__do_global_ctors+0x10>
      b8:	22 97       	sbiw	r28, 0x02	; 2
      ba:	fe 01       	movw	r30, r28
      bc:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__tablejump__>
      c0:	cc 37       	cpi	r28, 0x7C	; 124
      c2:	d1 07       	cpc	r29, r17
      c4:	c9 f7       	brne	.-14     	; 0xb8 <__do_global_ctors+0x8>
      c6:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <main>
      ca:	0c 94 d2 15 	jmp	0x2ba4	; 0x2ba4 <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <_ZN6myDateC1Ev>:
		void setYear(int year);
		void addMonths(int months);
		void addYears(int years);
};

myDate::myDate(){
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	00 d0       	rcall	.+0      	; 0xd8 <_ZN6myDateC1Ev+0x6>
      d8:	cd b7       	in	r28, 0x3d	; 61
      da:	de b7       	in	r29, 0x3e	; 62
      dc:	9a 83       	std	Y+2, r25	; 0x02
      de:	89 83       	std	Y+1, r24	; 0x01
	month = 0;
      e0:	89 81       	ldd	r24, Y+1	; 0x01
      e2:	9a 81       	ldd	r25, Y+2	; 0x02
      e4:	fc 01       	movw	r30, r24
      e6:	11 82       	std	Z+1, r1	; 0x01
      e8:	10 82       	st	Z, r1
	day = 0;
      ea:	89 81       	ldd	r24, Y+1	; 0x01
      ec:	9a 81       	ldd	r25, Y+2	; 0x02
      ee:	fc 01       	movw	r30, r24
      f0:	13 82       	std	Z+3, r1	; 0x03
      f2:	12 82       	std	Z+2, r1	; 0x02
	year = 0;
      f4:	89 81       	ldd	r24, Y+1	; 0x01
      f6:	9a 81       	ldd	r25, Y+2	; 0x02
      f8:	fc 01       	movw	r30, r24
      fa:	15 82       	std	Z+5, r1	; 0x05
      fc:	14 82       	std	Z+4, r1	; 0x04
}
      fe:	0f 90       	pop	r0
     100:	0f 90       	pop	r0
     102:	df 91       	pop	r29
     104:	cf 91       	pop	r28
     106:	08 95       	ret

00000108 <_ZN6myDateC1Eiii>:

myDate::myDate(int month,int day,int year){
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
     110:	28 97       	sbiw	r28, 0x08	; 8
     112:	0f b6       	in	r0, 0x3f	; 63
     114:	f8 94       	cli
     116:	de bf       	out	0x3e, r29	; 62
     118:	0f be       	out	0x3f, r0	; 63
     11a:	cd bf       	out	0x3d, r28	; 61
     11c:	9a 83       	std	Y+2, r25	; 0x02
     11e:	89 83       	std	Y+1, r24	; 0x01
     120:	7c 83       	std	Y+4, r23	; 0x04
     122:	6b 83       	std	Y+3, r22	; 0x03
     124:	5e 83       	std	Y+6, r21	; 0x06
     126:	4d 83       	std	Y+5, r20	; 0x05
     128:	38 87       	std	Y+8, r19	; 0x08
     12a:	2f 83       	std	Y+7, r18	; 0x07
	setDate(month,day,year);
     12c:	89 81       	ldd	r24, Y+1	; 0x01
     12e:	9a 81       	ldd	r25, Y+2	; 0x02
     130:	6b 81       	ldd	r22, Y+3	; 0x03
     132:	7c 81       	ldd	r23, Y+4	; 0x04
     134:	4d 81       	ldd	r20, Y+5	; 0x05
     136:	5e 81       	ldd	r21, Y+6	; 0x06
     138:	2f 81       	ldd	r18, Y+7	; 0x07
     13a:	38 85       	ldd	r19, Y+8	; 0x08
     13c:	0e 94 84 01 	call	0x308	; 0x308 <_ZN6myDate7setDateEiii>
}
     140:	28 96       	adiw	r28, 0x08	; 8
     142:	0f b6       	in	r0, 0x3f	; 63
     144:	f8 94       	cli
     146:	de bf       	out	0x3e, r29	; 62
     148:	0f be       	out	0x3f, r0	; 63
     14a:	cd bf       	out	0x3d, r28	; 61
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	08 95       	ret

00000152 <_ZN6myDate9getMonthsEv>:

BYTE myDate::getMonths(){
     152:	cf 93       	push	r28
     154:	df 93       	push	r29
     156:	00 d0       	rcall	.+0      	; 0x158 <_ZN6myDate9getMonthsEv+0x6>
     158:	cd b7       	in	r28, 0x3d	; 61
     15a:	de b7       	in	r29, 0x3e	; 62
     15c:	9a 83       	std	Y+2, r25	; 0x02
     15e:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)month;
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	9a 81       	ldd	r25, Y+2	; 0x02
     164:	fc 01       	movw	r30, r24
     166:	80 81       	ld	r24, Z
     168:	91 81       	ldd	r25, Z+1	; 0x01
}
     16a:	0f 90       	pop	r0
     16c:	0f 90       	pop	r0
     16e:	df 91       	pop	r29
     170:	cf 91       	pop	r28
     172:	08 95       	ret

00000174 <_ZN6myDate8getYearsEv>:

WORD myDate::getYears(){
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
     178:	00 d0       	rcall	.+0      	; 0x17a <_ZN6myDate8getYearsEv+0x6>
     17a:	cd b7       	in	r28, 0x3d	; 61
     17c:	de b7       	in	r29, 0x3e	; 62
     17e:	9a 83       	std	Y+2, r25	; 0x02
     180:	89 83       	std	Y+1, r24	; 0x01
	return (WORD)year;
     182:	89 81       	ldd	r24, Y+1	; 0x01
     184:	9a 81       	ldd	r25, Y+2	; 0x02
     186:	fc 01       	movw	r30, r24
     188:	84 81       	ldd	r24, Z+4	; 0x04
     18a:	95 81       	ldd	r25, Z+5	; 0x05
}
     18c:	0f 90       	pop	r0
     18e:	0f 90       	pop	r0
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <_ZN6myDate7getDaysEv>:

BYTE myDate::getDays(){
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	00 d0       	rcall	.+0      	; 0x19c <_ZN6myDate7getDaysEv+0x6>
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
     1a0:	9a 83       	std	Y+2, r25	; 0x02
     1a2:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)day;
     1a4:	89 81       	ldd	r24, Y+1	; 0x01
     1a6:	9a 81       	ldd	r25, Y+2	; 0x02
     1a8:	fc 01       	movw	r30, r24
     1aa:	82 81       	ldd	r24, Z+2	; 0x02
     1ac:	93 81       	ldd	r25, Z+3	; 0x03
}
     1ae:	0f 90       	pop	r0
     1b0:	0f 90       	pop	r0
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	08 95       	ret

000001b8 <_ZN6myDate8setMonthEi>:

void myDate::setMonth(int month){
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	00 d0       	rcall	.+0      	; 0x1be <_ZN6myDate8setMonthEi+0x6>
     1be:	00 d0       	rcall	.+0      	; 0x1c0 <_ZN6myDate8setMonthEi+0x8>
     1c0:	cd b7       	in	r28, 0x3d	; 61
     1c2:	de b7       	in	r29, 0x3e	; 62
     1c4:	9a 83       	std	Y+2, r25	; 0x02
     1c6:	89 83       	std	Y+1, r24	; 0x01
     1c8:	7c 83       	std	Y+4, r23	; 0x04
     1ca:	6b 83       	std	Y+3, r22	; 0x03
	if (month/13 == 0){
     1cc:	8b 81       	ldd	r24, Y+3	; 0x03
     1ce:	9c 81       	ldd	r25, Y+4	; 0x04
     1d0:	0c 96       	adiw	r24, 0x0c	; 12
     1d2:	89 31       	cpi	r24, 0x19	; 25
     1d4:	91 05       	cpc	r25, r1
     1d6:	38 f4       	brcc	.+14     	; 0x1e6 <_ZN6myDate8setMonthEi+0x2e>
		this->month = month;
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
     1da:	9a 81       	ldd	r25, Y+2	; 0x02
     1dc:	2b 81       	ldd	r18, Y+3	; 0x03
     1de:	3c 81       	ldd	r19, Y+4	; 0x04
     1e0:	fc 01       	movw	r30, r24
     1e2:	31 83       	std	Z+1, r19	; 0x01
     1e4:	20 83       	st	Z, r18
	}
}
     1e6:	0f 90       	pop	r0
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <_ZN6myDate6setDayEi>:

void myDate::setDay(int day){
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	00 d0       	rcall	.+0      	; 0x1fa <_ZN6myDate6setDayEi+0x6>
     1fa:	00 d0       	rcall	.+0      	; 0x1fc <_ZN6myDate6setDayEi+0x8>
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
     200:	9a 83       	std	Y+2, r25	; 0x02
     202:	89 83       	std	Y+1, r24	; 0x01
     204:	7c 83       	std	Y+4, r23	; 0x04
     206:	6b 83       	std	Y+3, r22	; 0x03
	if ((month == 9 || month == 4 || month == 6) && day/31 == 0){
     208:	89 81       	ldd	r24, Y+1	; 0x01
     20a:	9a 81       	ldd	r25, Y+2	; 0x02
     20c:	fc 01       	movw	r30, r24
     20e:	80 81       	ld	r24, Z
     210:	91 81       	ldd	r25, Z+1	; 0x01
     212:	89 30       	cpi	r24, 0x09	; 9
     214:	91 05       	cpc	r25, r1
     216:	81 f0       	breq	.+32     	; 0x238 <_ZN6myDate6setDayEi+0x44>
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	9a 81       	ldd	r25, Y+2	; 0x02
     21c:	fc 01       	movw	r30, r24
     21e:	80 81       	ld	r24, Z
     220:	91 81       	ldd	r25, Z+1	; 0x01
     222:	84 30       	cpi	r24, 0x04	; 4
     224:	91 05       	cpc	r25, r1
     226:	41 f0       	breq	.+16     	; 0x238 <_ZN6myDate6setDayEi+0x44>
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	9a 81       	ldd	r25, Y+2	; 0x02
     22c:	fc 01       	movw	r30, r24
     22e:	80 81       	ld	r24, Z
     230:	91 81       	ldd	r25, Z+1	; 0x01
     232:	86 30       	cpi	r24, 0x06	; 6
     234:	91 05       	cpc	r25, r1
     236:	41 f4       	brne	.+16     	; 0x248 <_ZN6myDate6setDayEi+0x54>
     238:	8b 81       	ldd	r24, Y+3	; 0x03
     23a:	9c 81       	ldd	r25, Y+4	; 0x04
     23c:	4e 96       	adiw	r24, 0x1e	; 30
     23e:	8d 33       	cpi	r24, 0x3D	; 61
     240:	91 05       	cpc	r25, r1
     242:	10 f4       	brcc	.+4      	; 0x248 <_ZN6myDate6setDayEi+0x54>
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	01 c0       	rjmp	.+2      	; 0x24a <_ZN6myDate6setDayEi+0x56>
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	88 23       	and	r24, r24
     24c:	41 f0       	breq	.+16     	; 0x25e <_ZN6myDate6setDayEi+0x6a>
		this->day = day;
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	9a 81       	ldd	r25, Y+2	; 0x02
     252:	2b 81       	ldd	r18, Y+3	; 0x03
     254:	3c 81       	ldd	r19, Y+4	; 0x04
     256:	fc 01       	movw	r30, r24
     258:	33 83       	std	Z+3, r19	; 0x03
     25a:	22 83       	std	Z+2, r18	; 0x02
     25c:	28 c0       	rjmp	.+80     	; 0x2ae <_ZN6myDate6setDayEi+0xba>
	} else if (month == 2 && day/29 == 0){
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	9a 81       	ldd	r25, Y+2	; 0x02
     262:	fc 01       	movw	r30, r24
     264:	80 81       	ld	r24, Z
     266:	91 81       	ldd	r25, Z+1	; 0x01
     268:	82 30       	cpi	r24, 0x02	; 2
     26a:	91 05       	cpc	r25, r1
     26c:	41 f4       	brne	.+16     	; 0x27e <_ZN6myDate6setDayEi+0x8a>
     26e:	8b 81       	ldd	r24, Y+3	; 0x03
     270:	9c 81       	ldd	r25, Y+4	; 0x04
     272:	4c 96       	adiw	r24, 0x1c	; 28
     274:	89 33       	cpi	r24, 0x39	; 57
     276:	91 05       	cpc	r25, r1
     278:	10 f4       	brcc	.+4      	; 0x27e <_ZN6myDate6setDayEi+0x8a>
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	01 c0       	rjmp	.+2      	; 0x280 <_ZN6myDate6setDayEi+0x8c>
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	88 23       	and	r24, r24
     282:	41 f0       	breq	.+16     	; 0x294 <_ZN6myDate6setDayEi+0xa0>
		this->day = day;
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	9a 81       	ldd	r25, Y+2	; 0x02
     288:	2b 81       	ldd	r18, Y+3	; 0x03
     28a:	3c 81       	ldd	r19, Y+4	; 0x04
     28c:	fc 01       	movw	r30, r24
     28e:	33 83       	std	Z+3, r19	; 0x03
     290:	22 83       	std	Z+2, r18	; 0x02
     292:	0d c0       	rjmp	.+26     	; 0x2ae <_ZN6myDate6setDayEi+0xba>
	} else{
		if (day/32 == 0){
     294:	8b 81       	ldd	r24, Y+3	; 0x03
     296:	9c 81       	ldd	r25, Y+4	; 0x04
     298:	4f 96       	adiw	r24, 0x1f	; 31
     29a:	8f 33       	cpi	r24, 0x3F	; 63
     29c:	91 05       	cpc	r25, r1
     29e:	38 f4       	brcc	.+14     	; 0x2ae <_ZN6myDate6setDayEi+0xba>
			this->day = day;
     2a0:	89 81       	ldd	r24, Y+1	; 0x01
     2a2:	9a 81       	ldd	r25, Y+2	; 0x02
     2a4:	2b 81       	ldd	r18, Y+3	; 0x03
     2a6:	3c 81       	ldd	r19, Y+4	; 0x04
     2a8:	fc 01       	movw	r30, r24
     2aa:	33 83       	std	Z+3, r19	; 0x03
     2ac:	22 83       	std	Z+2, r18	; 0x02
		}		
	}
}
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	08 95       	ret

000002bc <_ZN6myDate7setYearEi>:

void myDate::setYear(int year){
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	00 d0       	rcall	.+0      	; 0x2c2 <_ZN6myDate7setYearEi+0x6>
     2c2:	00 d0       	rcall	.+0      	; 0x2c4 <_ZN6myDate7setYearEi+0x8>
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
     2c8:	9a 83       	std	Y+2, r25	; 0x02
     2ca:	89 83       	std	Y+1, r24	; 0x01
     2cc:	7c 83       	std	Y+4, r23	; 0x04
     2ce:	6b 83       	std	Y+3, r22	; 0x03
	if (year >= 2000){
     2d0:	8b 81       	ldd	r24, Y+3	; 0x03
     2d2:	9c 81       	ldd	r25, Y+4	; 0x04
     2d4:	27 e0       	ldi	r18, 0x07	; 7
     2d6:	80 3d       	cpi	r24, 0xD0	; 208
     2d8:	92 07       	cpc	r25, r18
     2da:	44 f0       	brlt	.+16     	; 0x2ec <_ZN6myDate7setYearEi+0x30>
		this->year = year;
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	9a 81       	ldd	r25, Y+2	; 0x02
     2e0:	2b 81       	ldd	r18, Y+3	; 0x03
     2e2:	3c 81       	ldd	r19, Y+4	; 0x04
     2e4:	fc 01       	movw	r30, r24
     2e6:	35 83       	std	Z+5, r19	; 0x05
     2e8:	24 83       	std	Z+4, r18	; 0x04
     2ea:	07 c0       	rjmp	.+14     	; 0x2fa <_ZN6myDate7setYearEi+0x3e>
	} else {
		this->year = 1010;
     2ec:	89 81       	ldd	r24, Y+1	; 0x01
     2ee:	9a 81       	ldd	r25, Y+2	; 0x02
     2f0:	22 ef       	ldi	r18, 0xF2	; 242
     2f2:	33 e0       	ldi	r19, 0x03	; 3
     2f4:	fc 01       	movw	r30, r24
     2f6:	35 83       	std	Z+5, r19	; 0x05
     2f8:	24 83       	std	Z+4, r18	; 0x04
	}	
}
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	08 95       	ret

00000308 <_ZN6myDate7setDateEiii>:

void myDate::setDate(int month, int day, int year){
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	cd b7       	in	r28, 0x3d	; 61
     30e:	de b7       	in	r29, 0x3e	; 62
     310:	28 97       	sbiw	r28, 0x08	; 8
     312:	0f b6       	in	r0, 0x3f	; 63
     314:	f8 94       	cli
     316:	de bf       	out	0x3e, r29	; 62
     318:	0f be       	out	0x3f, r0	; 63
     31a:	cd bf       	out	0x3d, r28	; 61
     31c:	9a 83       	std	Y+2, r25	; 0x02
     31e:	89 83       	std	Y+1, r24	; 0x01
     320:	7c 83       	std	Y+4, r23	; 0x04
     322:	6b 83       	std	Y+3, r22	; 0x03
     324:	5e 83       	std	Y+6, r21	; 0x06
     326:	4d 83       	std	Y+5, r20	; 0x05
     328:	38 87       	std	Y+8, r19	; 0x08
     32a:	2f 83       	std	Y+7, r18	; 0x07
	setMonth(month);
     32c:	89 81       	ldd	r24, Y+1	; 0x01
     32e:	9a 81       	ldd	r25, Y+2	; 0x02
     330:	2b 81       	ldd	r18, Y+3	; 0x03
     332:	3c 81       	ldd	r19, Y+4	; 0x04
     334:	b9 01       	movw	r22, r18
     336:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN6myDate8setMonthEi>
	setDay(day);
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	9a 81       	ldd	r25, Y+2	; 0x02
     33e:	2d 81       	ldd	r18, Y+5	; 0x05
     340:	3e 81       	ldd	r19, Y+6	; 0x06
     342:	b9 01       	movw	r22, r18
     344:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_ZN6myDate6setDayEi>
	setYear(year);
     348:	89 81       	ldd	r24, Y+1	; 0x01
     34a:	9a 81       	ldd	r25, Y+2	; 0x02
     34c:	2f 81       	ldd	r18, Y+7	; 0x07
     34e:	38 85       	ldd	r19, Y+8	; 0x08
     350:	b9 01       	movw	r22, r18
     352:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_ZN6myDate7setYearEi>
}
     356:	28 96       	adiw	r28, 0x08	; 8
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	0f be       	out	0x3f, r0	; 63
     360:	cd bf       	out	0x3d, r28	; 61
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	08 95       	ret

00000368 <_ZN6myDate8addYearsEi>:


void myDate::addYears(int years){	//allows negative years to come in, therefore subtracting years
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	00 d0       	rcall	.+0      	; 0x36e <_ZN6myDate8addYearsEi+0x6>
     36e:	00 d0       	rcall	.+0      	; 0x370 <_ZN6myDate8addYearsEi+0x8>
     370:	00 d0       	rcall	.+0      	; 0x372 <_ZN6myDate8addYearsEi+0xa>
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	9c 83       	std	Y+4, r25	; 0x04
     378:	8b 83       	std	Y+3, r24	; 0x03
     37a:	7e 83       	std	Y+6, r23	; 0x06
     37c:	6d 83       	std	Y+5, r22	; 0x05
	volatile int tempYears = year + years;
     37e:	8b 81       	ldd	r24, Y+3	; 0x03
     380:	9c 81       	ldd	r25, Y+4	; 0x04
     382:	fc 01       	movw	r30, r24
     384:	24 81       	ldd	r18, Z+4	; 0x04
     386:	35 81       	ldd	r19, Z+5	; 0x05
     388:	8d 81       	ldd	r24, Y+5	; 0x05
     38a:	9e 81       	ldd	r25, Y+6	; 0x06
     38c:	82 0f       	add	r24, r18
     38e:	93 1f       	adc	r25, r19
     390:	9a 83       	std	Y+2, r25	; 0x02
     392:	89 83       	std	Y+1, r24	; 0x01
	if (tempYears > 2012){
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	9a 81       	ldd	r25, Y+2	; 0x02
     398:	21 e0       	ldi	r18, 0x01	; 1
     39a:	f7 e0       	ldi	r31, 0x07	; 7
     39c:	8d 3d       	cpi	r24, 0xDD	; 221
     39e:	9f 07       	cpc	r25, r31
     3a0:	0c f4       	brge	.+2      	; 0x3a4 <_ZN6myDate8addYearsEi+0x3c>
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	22 23       	and	r18, r18
     3a6:	39 f0       	breq	.+14     	; 0x3b6 <_ZN6myDate8addYearsEi+0x4e>
		year = tempYears;
     3a8:	29 81       	ldd	r18, Y+1	; 0x01
     3aa:	3a 81       	ldd	r19, Y+2	; 0x02
     3ac:	8b 81       	ldd	r24, Y+3	; 0x03
     3ae:	9c 81       	ldd	r25, Y+4	; 0x04
     3b0:	fc 01       	movw	r30, r24
     3b2:	35 83       	std	Z+5, r19	; 0x05
     3b4:	24 83       	std	Z+4, r18	; 0x04
	}
}
     3b6:	26 96       	adiw	r28, 0x06	; 6
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	f8 94       	cli
     3bc:	de bf       	out	0x3e, r29	; 62
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	cd bf       	out	0x3d, r28	; 61
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <_ZN6myDate9addMonthsEi>:

void myDate::addMonths(int months){	//adds months depending on number of months currently on.
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
     3d0:	2a 97       	sbiw	r28, 0x0a	; 10
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	f8 94       	cli
     3d6:	de bf       	out	0x3e, r29	; 62
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	cd bf       	out	0x3d, r28	; 61
     3dc:	98 87       	std	Y+8, r25	; 0x08
     3de:	8f 83       	std	Y+7, r24	; 0x07
     3e0:	7a 87       	std	Y+10, r23	; 0x0a
     3e2:	69 87       	std	Y+9, r22	; 0x09
	volatile int tempMonths = month + months;
     3e4:	8f 81       	ldd	r24, Y+7	; 0x07
     3e6:	98 85       	ldd	r25, Y+8	; 0x08
     3e8:	fc 01       	movw	r30, r24
     3ea:	20 81       	ld	r18, Z
     3ec:	31 81       	ldd	r19, Z+1	; 0x01
     3ee:	89 85       	ldd	r24, Y+9	; 0x09
     3f0:	9a 85       	ldd	r25, Y+10	; 0x0a
     3f2:	82 0f       	add	r24, r18
     3f4:	93 1f       	adc	r25, r19
     3f6:	9e 83       	std	Y+6, r25	; 0x06
     3f8:	8d 83       	std	Y+5, r24	; 0x05
	if (tempMonths > 12 && tempMonths < 25){
     3fa:	8d 81       	ldd	r24, Y+5	; 0x05
     3fc:	9e 81       	ldd	r25, Y+6	; 0x06
     3fe:	8d 30       	cpi	r24, 0x0D	; 13
     400:	91 05       	cpc	r25, r1
     402:	3c f0       	brlt	.+14     	; 0x412 <_ZN6myDate9addMonthsEi+0x4a>
     404:	8d 81       	ldd	r24, Y+5	; 0x05
     406:	9e 81       	ldd	r25, Y+6	; 0x06
     408:	89 31       	cpi	r24, 0x19	; 25
     40a:	91 05       	cpc	r25, r1
     40c:	14 f4       	brge	.+4      	; 0x412 <_ZN6myDate9addMonthsEi+0x4a>
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	01 c0       	rjmp	.+2      	; 0x414 <_ZN6myDate9addMonthsEi+0x4c>
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	88 23       	and	r24, r24
     416:	61 f0       	breq	.+24     	; 0x430 <_ZN6myDate9addMonthsEi+0x68>
		int yearsToAdd = 1;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	9a 83       	std	Y+2, r25	; 0x02
     41e:	89 83       	std	Y+1, r24	; 0x01
		addYears(yearsToAdd);
     420:	8f 81       	ldd	r24, Y+7	; 0x07
     422:	98 85       	ldd	r25, Y+8	; 0x08
     424:	29 81       	ldd	r18, Y+1	; 0x01
     426:	3a 81       	ldd	r19, Y+2	; 0x02
     428:	b9 01       	movw	r22, r18
     42a:	0e 94 b4 01 	call	0x368	; 0x368 <_ZN6myDate8addYearsEi>
     42e:	22 c0       	rjmp	.+68     	; 0x474 <_ZN6myDate9addMonthsEi+0xac>
	} else if (tempMonths >= 25){
     430:	8d 81       	ldd	r24, Y+5	; 0x05
     432:	9e 81       	ldd	r25, Y+6	; 0x06
     434:	21 e0       	ldi	r18, 0x01	; 1
     436:	89 31       	cpi	r24, 0x19	; 25
     438:	91 05       	cpc	r25, r1
     43a:	0c f4       	brge	.+2      	; 0x43e <_ZN6myDate9addMonthsEi+0x76>
     43c:	20 e0       	ldi	r18, 0x00	; 0
     43e:	22 23       	and	r18, r18
     440:	91 f0       	breq	.+36     	; 0x466 <_ZN6myDate9addMonthsEi+0x9e>
		int yearsToAdd = tempMonths/12;
     442:	8d 81       	ldd	r24, Y+5	; 0x05
     444:	9e 81       	ldd	r25, Y+6	; 0x06
     446:	2c e0       	ldi	r18, 0x0C	; 12
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	b9 01       	movw	r22, r18
     44c:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__divmodhi4>
     450:	9b 01       	movw	r18, r22
     452:	3c 83       	std	Y+4, r19	; 0x04
     454:	2b 83       	std	Y+3, r18	; 0x03
		addYears(yearsToAdd);
     456:	8f 81       	ldd	r24, Y+7	; 0x07
     458:	98 85       	ldd	r25, Y+8	; 0x08
     45a:	2b 81       	ldd	r18, Y+3	; 0x03
     45c:	3c 81       	ldd	r19, Y+4	; 0x04
     45e:	b9 01       	movw	r22, r18
     460:	0e 94 b4 01 	call	0x368	; 0x368 <_ZN6myDate8addYearsEi>
     464:	07 c0       	rjmp	.+14     	; 0x474 <_ZN6myDate9addMonthsEi+0xac>
	} else {
		month = tempMonths;
     466:	2d 81       	ldd	r18, Y+5	; 0x05
     468:	3e 81       	ldd	r19, Y+6	; 0x06
     46a:	8f 81       	ldd	r24, Y+7	; 0x07
     46c:	98 85       	ldd	r25, Y+8	; 0x08
     46e:	fc 01       	movw	r30, r24
     470:	31 83       	std	Z+1, r19	; 0x01
     472:	20 83       	st	Z, r18
	}	
}
     474:	2a 96       	adiw	r28, 0x0a	; 10
     476:	0f b6       	in	r0, 0x3f	; 63
     478:	f8 94       	cli
     47a:	de bf       	out	0x3e, r29	; 62
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	cd bf       	out	0x3d, r28	; 61
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <_ZN6myDate7addDaysEi>:

void myDate::addDays(int days){
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	00 d0       	rcall	.+0      	; 0x48c <_ZN6myDate7addDaysEi+0x6>
     48c:	00 d0       	rcall	.+0      	; 0x48e <_ZN6myDate7addDaysEi+0x8>
     48e:	00 d0       	rcall	.+0      	; 0x490 <_ZN6myDate7addDaysEi+0xa>
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
     494:	9c 83       	std	Y+4, r25	; 0x04
     496:	8b 83       	std	Y+3, r24	; 0x03
     498:	7e 83       	std	Y+6, r23	; 0x06
     49a:	6d 83       	std	Y+5, r22	; 0x05
	volatile int tempDays = days + day;
     49c:	8b 81       	ldd	r24, Y+3	; 0x03
     49e:	9c 81       	ldd	r25, Y+4	; 0x04
     4a0:	fc 01       	movw	r30, r24
     4a2:	22 81       	ldd	r18, Z+2	; 0x02
     4a4:	33 81       	ldd	r19, Z+3	; 0x03
     4a6:	8d 81       	ldd	r24, Y+5	; 0x05
     4a8:	9e 81       	ldd	r25, Y+6	; 0x06
     4aa:	82 0f       	add	r24, r18
     4ac:	93 1f       	adc	r25, r19
     4ae:	9a 83       	std	Y+2, r25	; 0x02
     4b0:	89 83       	std	Y+1, r24	; 0x01
	//Logic for incrementing days the right way. We are assuming no more than one month will be added
	if (month == 9 || month == 4 || month == 6){	//30 days in a month
     4b2:	8b 81       	ldd	r24, Y+3	; 0x03
     4b4:	9c 81       	ldd	r25, Y+4	; 0x04
     4b6:	fc 01       	movw	r30, r24
     4b8:	80 81       	ld	r24, Z
     4ba:	91 81       	ldd	r25, Z+1	; 0x01
     4bc:	89 30       	cpi	r24, 0x09	; 9
     4be:	91 05       	cpc	r25, r1
     4c0:	81 f0       	breq	.+32     	; 0x4e2 <_ZN6myDate7addDaysEi+0x5c>
     4c2:	8b 81       	ldd	r24, Y+3	; 0x03
     4c4:	9c 81       	ldd	r25, Y+4	; 0x04
     4c6:	fc 01       	movw	r30, r24
     4c8:	80 81       	ld	r24, Z
     4ca:	91 81       	ldd	r25, Z+1	; 0x01
     4cc:	84 30       	cpi	r24, 0x04	; 4
     4ce:	91 05       	cpc	r25, r1
     4d0:	41 f0       	breq	.+16     	; 0x4e2 <_ZN6myDate7addDaysEi+0x5c>
     4d2:	8b 81       	ldd	r24, Y+3	; 0x03
     4d4:	9c 81       	ldd	r25, Y+4	; 0x04
     4d6:	fc 01       	movw	r30, r24
     4d8:	80 81       	ld	r24, Z
     4da:	91 81       	ldd	r25, Z+1	; 0x01
     4dc:	86 30       	cpi	r24, 0x06	; 6
     4de:	91 05       	cpc	r25, r1
     4e0:	11 f4       	brne	.+4      	; 0x4e6 <_ZN6myDate7addDaysEi+0x60>
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <_ZN6myDate7addDaysEi+0x62>
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	88 23       	and	r24, r24
     4ea:	31 f1       	breq	.+76     	; 0x538 <_ZN6myDate7addDaysEi+0xb2>
		if (tempDays/31 == 0){	
     4ec:	89 81       	ldd	r24, Y+1	; 0x01
     4ee:	9a 81       	ldd	r25, Y+2	; 0x02
     4f0:	4e 96       	adiw	r24, 0x1e	; 30
     4f2:	21 e0       	ldi	r18, 0x01	; 1
     4f4:	8d 33       	cpi	r24, 0x3D	; 61
     4f6:	91 05       	cpc	r25, r1
     4f8:	08 f0       	brcs	.+2      	; 0x4fc <_ZN6myDate7addDaysEi+0x76>
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	22 23       	and	r18, r18
     4fe:	41 f0       	breq	.+16     	; 0x510 <_ZN6myDate7addDaysEi+0x8a>
			day = tempDays;
     500:	29 81       	ldd	r18, Y+1	; 0x01
     502:	3a 81       	ldd	r19, Y+2	; 0x02
     504:	8b 81       	ldd	r24, Y+3	; 0x03
     506:	9c 81       	ldd	r25, Y+4	; 0x04
     508:	fc 01       	movw	r30, r24
     50a:	33 83       	std	Z+3, r19	; 0x03
     50c:	22 83       	std	Z+2, r18	; 0x02
     50e:	71 c0       	rjmp	.+226    	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		} else {
			addMonths(1);	//just add 1 month
     510:	8b 81       	ldd	r24, Y+3	; 0x03
     512:	9c 81       	ldd	r25, Y+4	; 0x04
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN6myDate9addMonthsEi>
			day = tempDays%31;			
     51c:	89 81       	ldd	r24, Y+1	; 0x01
     51e:	9a 81       	ldd	r25, Y+2	; 0x02
     520:	2f e1       	ldi	r18, 0x1F	; 31
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	b9 01       	movw	r22, r18
     526:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__divmodhi4>
     52a:	9c 01       	movw	r18, r24
     52c:	8b 81       	ldd	r24, Y+3	; 0x03
     52e:	9c 81       	ldd	r25, Y+4	; 0x04
     530:	fc 01       	movw	r30, r24
     532:	33 83       	std	Z+3, r19	; 0x03
     534:	22 83       	std	Z+2, r18	; 0x02
     536:	5d c0       	rjmp	.+186    	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		}
	} else if (month == 2){
     538:	8b 81       	ldd	r24, Y+3	; 0x03
     53a:	9c 81       	ldd	r25, Y+4	; 0x04
     53c:	fc 01       	movw	r30, r24
     53e:	80 81       	ld	r24, Z
     540:	91 81       	ldd	r25, Z+1	; 0x01
     542:	21 e0       	ldi	r18, 0x01	; 1
     544:	82 30       	cpi	r24, 0x02	; 2
     546:	91 05       	cpc	r25, r1
     548:	09 f0       	breq	.+2      	; 0x54c <_ZN6myDate7addDaysEi+0xc6>
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	22 23       	and	r18, r18
     54e:	49 f1       	breq	.+82     	; 0x5a2 <_ZN6myDate7addDaysEi+0x11c>
		if(day/29 == 0){		//Don't take into account LeapYear
     550:	8b 81       	ldd	r24, Y+3	; 0x03
     552:	9c 81       	ldd	r25, Y+4	; 0x04
     554:	fc 01       	movw	r30, r24
     556:	82 81       	ldd	r24, Z+2	; 0x02
     558:	93 81       	ldd	r25, Z+3	; 0x03
     55a:	4c 96       	adiw	r24, 0x1c	; 28
     55c:	21 e0       	ldi	r18, 0x01	; 1
     55e:	89 33       	cpi	r24, 0x39	; 57
     560:	91 05       	cpc	r25, r1
     562:	08 f0       	brcs	.+2      	; 0x566 <_ZN6myDate7addDaysEi+0xe0>
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	22 23       	and	r18, r18
     568:	41 f0       	breq	.+16     	; 0x57a <_ZN6myDate7addDaysEi+0xf4>
			day = tempDays;
     56a:	29 81       	ldd	r18, Y+1	; 0x01
     56c:	3a 81       	ldd	r19, Y+2	; 0x02
     56e:	8b 81       	ldd	r24, Y+3	; 0x03
     570:	9c 81       	ldd	r25, Y+4	; 0x04
     572:	fc 01       	movw	r30, r24
     574:	33 83       	std	Z+3, r19	; 0x03
     576:	22 83       	std	Z+2, r18	; 0x02
     578:	3c c0       	rjmp	.+120    	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		} else {
			addMonths(1);
     57a:	8b 81       	ldd	r24, Y+3	; 0x03
     57c:	9c 81       	ldd	r25, Y+4	; 0x04
     57e:	61 e0       	ldi	r22, 0x01	; 1
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN6myDate9addMonthsEi>
			day = tempDays%29;
     586:	89 81       	ldd	r24, Y+1	; 0x01
     588:	9a 81       	ldd	r25, Y+2	; 0x02
     58a:	2d e1       	ldi	r18, 0x1D	; 29
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	b9 01       	movw	r22, r18
     590:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__divmodhi4>
     594:	9c 01       	movw	r18, r24
     596:	8b 81       	ldd	r24, Y+3	; 0x03
     598:	9c 81       	ldd	r25, Y+4	; 0x04
     59a:	fc 01       	movw	r30, r24
     59c:	33 83       	std	Z+3, r19	; 0x03
     59e:	22 83       	std	Z+2, r18	; 0x02
     5a0:	28 c0       	rjmp	.+80     	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		}		
	} else {
		if (day/32 == 0){
     5a2:	8b 81       	ldd	r24, Y+3	; 0x03
     5a4:	9c 81       	ldd	r25, Y+4	; 0x04
     5a6:	fc 01       	movw	r30, r24
     5a8:	82 81       	ldd	r24, Z+2	; 0x02
     5aa:	93 81       	ldd	r25, Z+3	; 0x03
     5ac:	4f 96       	adiw	r24, 0x1f	; 31
     5ae:	21 e0       	ldi	r18, 0x01	; 1
     5b0:	8f 33       	cpi	r24, 0x3F	; 63
     5b2:	91 05       	cpc	r25, r1
     5b4:	08 f0       	brcs	.+2      	; 0x5b8 <_ZN6myDate7addDaysEi+0x132>
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	22 23       	and	r18, r18
     5ba:	41 f0       	breq	.+16     	; 0x5cc <_ZN6myDate7addDaysEi+0x146>
			day = tempDays;
     5bc:	29 81       	ldd	r18, Y+1	; 0x01
     5be:	3a 81       	ldd	r19, Y+2	; 0x02
     5c0:	8b 81       	ldd	r24, Y+3	; 0x03
     5c2:	9c 81       	ldd	r25, Y+4	; 0x04
     5c4:	fc 01       	movw	r30, r24
     5c6:	33 83       	std	Z+3, r19	; 0x03
     5c8:	22 83       	std	Z+2, r18	; 0x02
     5ca:	13 c0       	rjmp	.+38     	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		} else {
			addMonths(1);
     5cc:	8b 81       	ldd	r24, Y+3	; 0x03
     5ce:	9c 81       	ldd	r25, Y+4	; 0x04
     5d0:	61 e0       	ldi	r22, 0x01	; 1
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN6myDate9addMonthsEi>
			day = tempDays%32;
     5d8:	89 81       	ldd	r24, Y+1	; 0x01
     5da:	9a 81       	ldd	r25, Y+2	; 0x02
     5dc:	20 e2       	ldi	r18, 0x20	; 32
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	b9 01       	movw	r22, r18
     5e2:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__divmodhi4>
     5e6:	9c 01       	movw	r18, r24
     5e8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ea:	9c 81       	ldd	r25, Y+4	; 0x04
     5ec:	fc 01       	movw	r30, r24
     5ee:	33 83       	std	Z+3, r19	; 0x03
     5f0:	22 83       	std	Z+2, r18	; 0x02
		}
	}
}
     5f2:	26 96       	adiw	r28, 0x06	; 6
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	f8 94       	cli
     5f8:	de bf       	out	0x3e, r29	; 62
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	cd bf       	out	0x3d, r28	; 61
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <_ZN6myDate17checkValidityDateEv>:

BOOL myDate::checkValidityDate(){
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	00 d0       	rcall	.+0      	; 0x60a <_ZN6myDate17checkValidityDateEv+0x6>
     60a:	0f 92       	push	r0
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	9b 83       	std	Y+3, r25	; 0x03
     612:	8a 83       	std	Y+2, r24	; 0x02
	BOOL checkYear=fFalse;
     614:	19 82       	std	Y+1, r1	; 0x01
	if (month/13==0){
     616:	8a 81       	ldd	r24, Y+2	; 0x02
     618:	9b 81       	ldd	r25, Y+3	; 0x03
     61a:	fc 01       	movw	r30, r24
     61c:	80 81       	ld	r24, Z
     61e:	91 81       	ldd	r25, Z+1	; 0x01
     620:	0c 96       	adiw	r24, 0x0c	; 12
     622:	21 e0       	ldi	r18, 0x01	; 1
     624:	89 31       	cpi	r24, 0x19	; 25
     626:	91 05       	cpc	r25, r1
     628:	08 f0       	brcs	.+2      	; 0x62c <_ZN6myDate17checkValidityDateEv+0x28>
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	22 23       	and	r18, r18
     62e:	09 f4       	brne	.+2      	; 0x632 <_ZN6myDate17checkValidityDateEv+0x2e>
     630:	66 c0       	rjmp	.+204    	; 0x6fe <_ZN6myDate17checkValidityDateEv+0xfa>
			if ((month == 9 || month == 4 || month == 6) && day/31 == 0){
     632:	8a 81       	ldd	r24, Y+2	; 0x02
     634:	9b 81       	ldd	r25, Y+3	; 0x03
     636:	fc 01       	movw	r30, r24
     638:	80 81       	ld	r24, Z
     63a:	91 81       	ldd	r25, Z+1	; 0x01
     63c:	89 30       	cpi	r24, 0x09	; 9
     63e:	91 05       	cpc	r25, r1
     640:	81 f0       	breq	.+32     	; 0x662 <_ZN6myDate17checkValidityDateEv+0x5e>
     642:	8a 81       	ldd	r24, Y+2	; 0x02
     644:	9b 81       	ldd	r25, Y+3	; 0x03
     646:	fc 01       	movw	r30, r24
     648:	80 81       	ld	r24, Z
     64a:	91 81       	ldd	r25, Z+1	; 0x01
     64c:	84 30       	cpi	r24, 0x04	; 4
     64e:	91 05       	cpc	r25, r1
     650:	41 f0       	breq	.+16     	; 0x662 <_ZN6myDate17checkValidityDateEv+0x5e>
     652:	8a 81       	ldd	r24, Y+2	; 0x02
     654:	9b 81       	ldd	r25, Y+3	; 0x03
     656:	fc 01       	movw	r30, r24
     658:	80 81       	ld	r24, Z
     65a:	91 81       	ldd	r25, Z+1	; 0x01
     65c:	86 30       	cpi	r24, 0x06	; 6
     65e:	91 05       	cpc	r25, r1
     660:	59 f4       	brne	.+22     	; 0x678 <_ZN6myDate17checkValidityDateEv+0x74>
     662:	8a 81       	ldd	r24, Y+2	; 0x02
     664:	9b 81       	ldd	r25, Y+3	; 0x03
     666:	fc 01       	movw	r30, r24
     668:	82 81       	ldd	r24, Z+2	; 0x02
     66a:	93 81       	ldd	r25, Z+3	; 0x03
     66c:	4e 96       	adiw	r24, 0x1e	; 30
     66e:	8d 33       	cpi	r24, 0x3D	; 61
     670:	91 05       	cpc	r25, r1
     672:	10 f4       	brcc	.+4      	; 0x678 <_ZN6myDate17checkValidityDateEv+0x74>
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	01 c0       	rjmp	.+2      	; 0x67a <_ZN6myDate17checkValidityDateEv+0x76>
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	88 23       	and	r24, r24
     67c:	19 f0       	breq	.+6      	; 0x684 <_ZN6myDate17checkValidityDateEv+0x80>
				checkYear=fTrue;
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	89 83       	std	Y+1, r24	; 0x01
     682:	28 c0       	rjmp	.+80     	; 0x6d4 <_ZN6myDate17checkValidityDateEv+0xd0>
			} else if (month == 2 && day/29 == 0){
     684:	8a 81       	ldd	r24, Y+2	; 0x02
     686:	9b 81       	ldd	r25, Y+3	; 0x03
     688:	fc 01       	movw	r30, r24
     68a:	80 81       	ld	r24, Z
     68c:	91 81       	ldd	r25, Z+1	; 0x01
     68e:	82 30       	cpi	r24, 0x02	; 2
     690:	91 05       	cpc	r25, r1
     692:	59 f4       	brne	.+22     	; 0x6aa <_ZN6myDate17checkValidityDateEv+0xa6>
     694:	8a 81       	ldd	r24, Y+2	; 0x02
     696:	9b 81       	ldd	r25, Y+3	; 0x03
     698:	fc 01       	movw	r30, r24
     69a:	82 81       	ldd	r24, Z+2	; 0x02
     69c:	93 81       	ldd	r25, Z+3	; 0x03
     69e:	4c 96       	adiw	r24, 0x1c	; 28
     6a0:	89 33       	cpi	r24, 0x39	; 57
     6a2:	91 05       	cpc	r25, r1
     6a4:	10 f4       	brcc	.+4      	; 0x6aa <_ZN6myDate17checkValidityDateEv+0xa6>
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	01 c0       	rjmp	.+2      	; 0x6ac <_ZN6myDate17checkValidityDateEv+0xa8>
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	88 23       	and	r24, r24
     6ae:	19 f0       	breq	.+6      	; 0x6b6 <_ZN6myDate17checkValidityDateEv+0xb2>
				checkYear=fTrue;
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	89 83       	std	Y+1, r24	; 0x01
     6b4:	0f c0       	rjmp	.+30     	; 0x6d4 <_ZN6myDate17checkValidityDateEv+0xd0>
			} else{
				if (day/32 == 0){
     6b6:	8a 81       	ldd	r24, Y+2	; 0x02
     6b8:	9b 81       	ldd	r25, Y+3	; 0x03
     6ba:	fc 01       	movw	r30, r24
     6bc:	82 81       	ldd	r24, Z+2	; 0x02
     6be:	93 81       	ldd	r25, Z+3	; 0x03
     6c0:	4f 96       	adiw	r24, 0x1f	; 31
     6c2:	21 e0       	ldi	r18, 0x01	; 1
     6c4:	8f 33       	cpi	r24, 0x3F	; 63
     6c6:	91 05       	cpc	r25, r1
     6c8:	08 f0       	brcs	.+2      	; 0x6cc <_ZN6myDate17checkValidityDateEv+0xc8>
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	22 23       	and	r18, r18
     6ce:	11 f0       	breq	.+4      	; 0x6d4 <_ZN6myDate17checkValidityDateEv+0xd0>
					checkYear=fTrue;
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	89 83       	std	Y+1, r24	; 0x01
				}
			}
			
			//Check year
			if (checkYear && year>=2013){return fTrue;}
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
     6d6:	88 23       	and	r24, r24
     6d8:	59 f0       	breq	.+22     	; 0x6f0 <_ZN6myDate17checkValidityDateEv+0xec>
     6da:	8a 81       	ldd	r24, Y+2	; 0x02
     6dc:	9b 81       	ldd	r25, Y+3	; 0x03
     6de:	fc 01       	movw	r30, r24
     6e0:	84 81       	ldd	r24, Z+4	; 0x04
     6e2:	95 81       	ldd	r25, Z+5	; 0x05
     6e4:	f7 e0       	ldi	r31, 0x07	; 7
     6e6:	8d 3d       	cpi	r24, 0xDD	; 221
     6e8:	9f 07       	cpc	r25, r31
     6ea:	14 f0       	brlt	.+4      	; 0x6f0 <_ZN6myDate17checkValidityDateEv+0xec>
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	01 c0       	rjmp	.+2      	; 0x6f2 <_ZN6myDate17checkValidityDateEv+0xee>
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	88 23       	and	r24, r24
     6f4:	11 f0       	breq	.+4      	; 0x6fa <_ZN6myDate17checkValidityDateEv+0xf6>
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	03 c0       	rjmp	.+6      	; 0x700 <_ZN6myDate17checkValidityDateEv+0xfc>
			else {return fFalse;}
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	01 c0       	rjmp	.+2      	; 0x700 <_ZN6myDate17checkValidityDateEv+0xfc>
	} else {return fFalse;}
     6fe:	80 e0       	ldi	r24, 0x00	; 0
}
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <_ZN6myDate7getDateEv>:

const char * myDate::getDate(){
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
     714:	2d 97       	sbiw	r28, 0x0d	; 13
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	f8 94       	cli
     71a:	de bf       	out	0x3e, r29	; 62
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	cd bf       	out	0x3d, r28	; 61
     720:	9d 87       	std	Y+13, r25	; 0x0d
     722:	8c 87       	std	Y+12, r24	; 0x0c
	char monthString[3],dayString[3],yearString[5];
	itoa(month,monthString,10);
     724:	8c 85       	ldd	r24, Y+12	; 0x0c
     726:	9d 85       	ldd	r25, Y+13	; 0x0d
     728:	fc 01       	movw	r30, r24
     72a:	80 81       	ld	r24, Z
     72c:	91 81       	ldd	r25, Z+1	; 0x01
     72e:	9e 01       	movw	r18, r28
     730:	2f 5f       	subi	r18, 0xFF	; 255
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	b9 01       	movw	r22, r18
     736:	4a e0       	ldi	r20, 0x0A	; 10
     738:	50 e0       	ldi	r21, 0x00	; 0
     73a:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <itoa>
	itoa(day,dayString,10);
     73e:	8c 85       	ldd	r24, Y+12	; 0x0c
     740:	9d 85       	ldd	r25, Y+13	; 0x0d
     742:	fc 01       	movw	r30, r24
     744:	82 81       	ldd	r24, Z+2	; 0x02
     746:	93 81       	ldd	r25, Z+3	; 0x03
     748:	9e 01       	movw	r18, r28
     74a:	2c 5f       	subi	r18, 0xFC	; 252
     74c:	3f 4f       	sbci	r19, 0xFF	; 255
     74e:	b9 01       	movw	r22, r18
     750:	4a e0       	ldi	r20, 0x0A	; 10
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <itoa>
	itoa(year,yearString,10);
     758:	8c 85       	ldd	r24, Y+12	; 0x0c
     75a:	9d 85       	ldd	r25, Y+13	; 0x0d
     75c:	fc 01       	movw	r30, r24
     75e:	84 81       	ldd	r24, Z+4	; 0x04
     760:	95 81       	ldd	r25, Z+5	; 0x05
     762:	9e 01       	movw	r18, r28
     764:	29 5f       	subi	r18, 0xF9	; 249
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	b9 01       	movw	r22, r18
     76a:	4a e0       	ldi	r20, 0x0A	; 10
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <itoa>
	strcpy(dateString,monthString);
     772:	8c 85       	ldd	r24, Y+12	; 0x0c
     774:	9d 85       	ldd	r25, Y+13	; 0x0d
     776:	06 96       	adiw	r24, 0x06	; 6
     778:	9e 01       	movw	r18, r28
     77a:	2f 5f       	subi	r18, 0xFF	; 255
     77c:	3f 4f       	sbci	r19, 0xFF	; 255
     77e:	b9 01       	movw	r22, r18
     780:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <strcpy>
	strcat(dateString,",");
     784:	8c 85       	ldd	r24, Y+12	; 0x0c
     786:	9d 85       	ldd	r25, Y+13	; 0x0d
     788:	9c 01       	movw	r18, r24
     78a:	2a 5f       	subi	r18, 0xFA	; 250
     78c:	3f 4f       	sbci	r19, 0xFF	; 255
     78e:	c9 01       	movw	r24, r18
     790:	ac 01       	movw	r20, r24
     792:	fa 01       	movw	r30, r20
     794:	01 90       	ld	r0, Z+
     796:	00 20       	and	r0, r0
     798:	e9 f7       	brne	.-6      	; 0x794 <_ZN6myDate7getDateEv+0x88>
     79a:	cf 01       	movw	r24, r30
     79c:	01 97       	sbiw	r24, 0x01	; 1
     79e:	84 1b       	sub	r24, r20
     7a0:	95 0b       	sbc	r25, r21
     7a2:	82 0f       	add	r24, r18
     7a4:	93 1f       	adc	r25, r19
     7a6:	2c e2       	ldi	r18, 0x2C	; 44
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	fc 01       	movw	r30, r24
     7ac:	31 83       	std	Z+1, r19	; 0x01
     7ae:	20 83       	st	Z, r18
	strcat(dateString,dayString);
     7b0:	8c 85       	ldd	r24, Y+12	; 0x0c
     7b2:	9d 85       	ldd	r25, Y+13	; 0x0d
     7b4:	06 96       	adiw	r24, 0x06	; 6
     7b6:	9e 01       	movw	r18, r28
     7b8:	2c 5f       	subi	r18, 0xFC	; 252
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	b9 01       	movw	r22, r18
     7be:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <strcat>
	strcat(dateString,",");
     7c2:	8c 85       	ldd	r24, Y+12	; 0x0c
     7c4:	9d 85       	ldd	r25, Y+13	; 0x0d
     7c6:	9c 01       	movw	r18, r24
     7c8:	2a 5f       	subi	r18, 0xFA	; 250
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	c9 01       	movw	r24, r18
     7ce:	ac 01       	movw	r20, r24
     7d0:	fa 01       	movw	r30, r20
     7d2:	01 90       	ld	r0, Z+
     7d4:	00 20       	and	r0, r0
     7d6:	e9 f7       	brne	.-6      	; 0x7d2 <_ZN6myDate7getDateEv+0xc6>
     7d8:	cf 01       	movw	r24, r30
     7da:	01 97       	sbiw	r24, 0x01	; 1
     7dc:	84 1b       	sub	r24, r20
     7de:	95 0b       	sbc	r25, r21
     7e0:	82 0f       	add	r24, r18
     7e2:	93 1f       	adc	r25, r19
     7e4:	2c e2       	ldi	r18, 0x2C	; 44
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	fc 01       	movw	r30, r24
     7ea:	31 83       	std	Z+1, r19	; 0x01
     7ec:	20 83       	st	Z, r18
	strcat(dateString,yearString);
     7ee:	8c 85       	ldd	r24, Y+12	; 0x0c
     7f0:	9d 85       	ldd	r25, Y+13	; 0x0d
     7f2:	06 96       	adiw	r24, 0x06	; 6
     7f4:	9e 01       	movw	r18, r28
     7f6:	29 5f       	subi	r18, 0xF9	; 249
     7f8:	3f 4f       	sbci	r19, 0xFF	; 255
     7fa:	b9 01       	movw	r22, r18
     7fc:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <strcat>
	dateString[15] = ' ';
     800:	8c 85       	ldd	r24, Y+12	; 0x0c
     802:	9d 85       	ldd	r25, Y+13	; 0x0d
     804:	20 e2       	ldi	r18, 0x20	; 32
     806:	fc 01       	movw	r30, r24
     808:	25 8b       	std	Z+21, r18	; 0x15
	dateString[16] = '\0';
     80a:	8c 85       	ldd	r24, Y+12	; 0x0c
     80c:	9d 85       	ldd	r25, Y+13	; 0x0d
     80e:	fc 01       	movw	r30, r24
     810:	16 8a       	std	Z+22, r1	; 0x16
	
	return dateString;
     812:	8c 85       	ldd	r24, Y+12	; 0x0c
     814:	9d 85       	ldd	r25, Y+13	; 0x0d
     816:	06 96       	adiw	r24, 0x06	; 6
     818:	2d 96       	adiw	r28, 0x0d	; 13
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	de bf       	out	0x3e, r29	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	cd bf       	out	0x3d, r28	; 61
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	08 95       	ret

0000082a <_ZN6myTimeC1Ev>:
		void addMinutes(int minutes);
		void setHour(int hour);
		void setMinute(int minute);
};

myTime::myTime():myDate(){
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	00 d0       	rcall	.+0      	; 0x830 <_ZN6myTimeC1Ev+0x6>
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	9a 83       	std	Y+2, r25	; 0x02
     836:	89 83       	std	Y+1, r24	; 0x01
     838:	89 81       	ldd	r24, Y+1	; 0x01
     83a:	9a 81       	ldd	r25, Y+2	; 0x02
     83c:	0e 94 69 00 	call	0xd2	; 0xd2 <_ZN6myDateC1Ev>
	setTime(0,0,0);
     840:	89 81       	ldd	r24, Y+1	; 0x01
     842:	9a 81       	ldd	r25, Y+2	; 0x02
     844:	60 e0       	ldi	r22, 0x00	; 0
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	40 e0       	ldi	r20, 0x00	; 0
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
}
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <_ZN6myTimeC1Eiii>:

myTime::myTime(int hour, int minute, int second):myDate(){
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	cd b7       	in	r28, 0x3d	; 61
     864:	de b7       	in	r29, 0x3e	; 62
     866:	28 97       	sbiw	r28, 0x08	; 8
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	f8 94       	cli
     86c:	de bf       	out	0x3e, r29	; 62
     86e:	0f be       	out	0x3f, r0	; 63
     870:	cd bf       	out	0x3d, r28	; 61
     872:	9a 83       	std	Y+2, r25	; 0x02
     874:	89 83       	std	Y+1, r24	; 0x01
     876:	7c 83       	std	Y+4, r23	; 0x04
     878:	6b 83       	std	Y+3, r22	; 0x03
     87a:	5e 83       	std	Y+6, r21	; 0x06
     87c:	4d 83       	std	Y+5, r20	; 0x05
     87e:	38 87       	std	Y+8, r19	; 0x08
     880:	2f 83       	std	Y+7, r18	; 0x07
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	9a 81       	ldd	r25, Y+2	; 0x02
     886:	0e 94 69 00 	call	0xd2	; 0xd2 <_ZN6myDateC1Ev>
	setTime(hour,minute,second);
     88a:	89 81       	ldd	r24, Y+1	; 0x01
     88c:	9a 81       	ldd	r25, Y+2	; 0x02
     88e:	6b 81       	ldd	r22, Y+3	; 0x03
     890:	7c 81       	ldd	r23, Y+4	; 0x04
     892:	4d 81       	ldd	r20, Y+5	; 0x05
     894:	5e 81       	ldd	r21, Y+6	; 0x06
     896:	2f 81       	ldd	r18, Y+7	; 0x07
     898:	38 85       	ldd	r19, Y+8	; 0x08
     89a:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
}
     89e:	28 96       	adiw	r28, 0x08	; 8
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	de bf       	out	0x3e, r29	; 62
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	cd bf       	out	0x3d, r28	; 61
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <_ZN6myTimeC1Eiiiiii>:

myTime::myTime(int hour,int minute,int second,int month, int day, int year):myDate(month,day,year){
     8b0:	cf 92       	push	r12
     8b2:	df 92       	push	r13
     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	2e 97       	sbiw	r28, 0x0e	; 14
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
     8d0:	9a 83       	std	Y+2, r25	; 0x02
     8d2:	89 83       	std	Y+1, r24	; 0x01
     8d4:	7c 83       	std	Y+4, r23	; 0x04
     8d6:	6b 83       	std	Y+3, r22	; 0x03
     8d8:	5e 83       	std	Y+6, r21	; 0x06
     8da:	4d 83       	std	Y+5, r20	; 0x05
     8dc:	38 87       	std	Y+8, r19	; 0x08
     8de:	2f 83       	std	Y+7, r18	; 0x07
     8e0:	1a 87       	std	Y+10, r17	; 0x0a
     8e2:	09 87       	std	Y+9, r16	; 0x09
     8e4:	fc 86       	std	Y+12, r15	; 0x0c
     8e6:	eb 86       	std	Y+11, r14	; 0x0b
     8e8:	de 86       	std	Y+14, r13	; 0x0e
     8ea:	cd 86       	std	Y+13, r12	; 0x0d
     8ec:	89 81       	ldd	r24, Y+1	; 0x01
     8ee:	9a 81       	ldd	r25, Y+2	; 0x02
     8f0:	69 85       	ldd	r22, Y+9	; 0x09
     8f2:	7a 85       	ldd	r23, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	2d 85       	ldd	r18, Y+13	; 0x0d
     8fa:	3e 85       	ldd	r19, Y+14	; 0x0e
     8fc:	0e 94 84 00 	call	0x108	; 0x108 <_ZN6myDateC1Eiii>
	setTime(hour,minute,second);
     900:	89 81       	ldd	r24, Y+1	; 0x01
     902:	9a 81       	ldd	r25, Y+2	; 0x02
     904:	6b 81       	ldd	r22, Y+3	; 0x03
     906:	7c 81       	ldd	r23, Y+4	; 0x04
     908:	4d 81       	ldd	r20, Y+5	; 0x05
     90a:	5e 81       	ldd	r21, Y+6	; 0x06
     90c:	2f 81       	ldd	r18, Y+7	; 0x07
     90e:	38 85       	ldd	r19, Y+8	; 0x08
     910:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
}
     914:	2e 96       	adiw	r28, 0x0e	; 14
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	f8 94       	cli
     91a:	de bf       	out	0x3e, r29	; 62
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	cd bf       	out	0x3d, r28	; 61
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	ff 90       	pop	r15
     92a:	ef 90       	pop	r14
     92c:	df 90       	pop	r13
     92e:	cf 90       	pop	r12
     930:	08 95       	ret

00000932 <_ZN6myTime10getSecondsEv>:

BYTE myTime::getSeconds(){
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	00 d0       	rcall	.+0      	; 0x938 <_ZN6myTime10getSecondsEv+0x6>
     938:	cd b7       	in	r28, 0x3d	; 61
     93a:	de b7       	in	r29, 0x3e	; 62
     93c:	9a 83       	std	Y+2, r25	; 0x02
     93e:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)second;
     940:	89 81       	ldd	r24, Y+1	; 0x01
     942:	9a 81       	ldd	r25, Y+2	; 0x02
     944:	fc 01       	movw	r30, r24
     946:	83 8d       	ldd	r24, Z+27	; 0x1b
     948:	94 8d       	ldd	r25, Z+28	; 0x1c
}
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <_ZN6myTime10getMinutesEv>:

BYTE myTime::getMinutes(){
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	00 d0       	rcall	.+0      	; 0x95a <_ZN6myTime10getMinutesEv+0x6>
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
     95e:	9a 83       	std	Y+2, r25	; 0x02
     960:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)minute;
     962:	89 81       	ldd	r24, Y+1	; 0x01
     964:	9a 81       	ldd	r25, Y+2	; 0x02
     966:	fc 01       	movw	r30, r24
     968:	81 8d       	ldd	r24, Z+25	; 0x19
     96a:	92 8d       	ldd	r25, Z+26	; 0x1a
}
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <_ZN6myTime8getHoursEv>:

BYTE myTime::getHours(){
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	00 d0       	rcall	.+0      	; 0x97c <_ZN6myTime8getHoursEv+0x6>
     97c:	cd b7       	in	r28, 0x3d	; 61
     97e:	de b7       	in	r29, 0x3e	; 62
     980:	9a 83       	std	Y+2, r25	; 0x02
     982:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)hour;
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	9a 81       	ldd	r25, Y+2	; 0x02
     988:	fc 01       	movw	r30, r24
     98a:	87 89       	ldd	r24, Z+23	; 0x17
     98c:	90 8d       	ldd	r25, Z+24	; 0x18
}
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	08 95       	ret

00000998 <_ZN6myTime7setTimeEPc>:

BOOL myTime::setTime(char *newTime){
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	cd b7       	in	r28, 0x3d	; 61
     99e:	de b7       	in	r29, 0x3e	; 62
     9a0:	a2 97       	sbiw	r28, 0x22	; 34
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	f8 94       	cli
     9a6:	de bf       	out	0x3e, r29	; 62
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	cd bf       	out	0x3d, r28	; 61
     9ac:	98 a3       	lds	r25, 0x58
     9ae:	8f 8f       	std	Y+31, r24	; 0x1f
     9b0:	7a a3       	lds	r23, 0x5a
     9b2:	69 a3       	lds	r22, 0x59
	int tempNum[3];
	char currentString[10];
	char tempString[10];
	strcpy(currentString,newTime);
     9b4:	ce 01       	movw	r24, r28
     9b6:	0b 96       	adiw	r24, 0x0b	; 11
     9b8:	29 a1       	lds	r18, 0x49
     9ba:	3a a1       	lds	r19, 0x4a
     9bc:	b9 01       	movw	r22, r18
     9be:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <strcpy>
	for (int j=0; j<3; j++){
     9c2:	1a 82       	std	Y+2, r1	; 0x02
     9c4:	19 82       	std	Y+1, r1	; 0x01
     9c6:	43 c0       	rjmp	.+134    	; 0xa4e <_ZN6myTime7setTimeEPc+0xb6>
		for (int i=0; i<2; i++){
     9c8:	1c 82       	std	Y+4, r1	; 0x04
     9ca:	1b 82       	std	Y+3, r1	; 0x03
     9cc:	20 c0       	rjmp	.+64     	; 0xa0e <_ZN6myTime7setTimeEPc+0x76>
				tempString[i]=currentString[i+j*3];
     9ce:	29 81       	ldd	r18, Y+1	; 0x01
     9d0:	3a 81       	ldd	r19, Y+2	; 0x02
     9d2:	c9 01       	movw	r24, r18
     9d4:	88 0f       	add	r24, r24
     9d6:	99 1f       	adc	r25, r25
     9d8:	28 0f       	add	r18, r24
     9da:	39 1f       	adc	r19, r25
     9dc:	8b 81       	ldd	r24, Y+3	; 0x03
     9de:	9c 81       	ldd	r25, Y+4	; 0x04
     9e0:	82 0f       	add	r24, r18
     9e2:	93 1f       	adc	r25, r19
     9e4:	9e 01       	movw	r18, r28
     9e6:	25 5f       	subi	r18, 0xF5	; 245
     9e8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ea:	82 0f       	add	r24, r18
     9ec:	93 1f       	adc	r25, r19
     9ee:	fc 01       	movw	r30, r24
     9f0:	40 81       	ld	r20, Z
     9f2:	9e 01       	movw	r18, r28
     9f4:	2b 5e       	subi	r18, 0xEB	; 235
     9f6:	3f 4f       	sbci	r19, 0xFF	; 255
     9f8:	8b 81       	ldd	r24, Y+3	; 0x03
     9fa:	9c 81       	ldd	r25, Y+4	; 0x04
     9fc:	82 0f       	add	r24, r18
     9fe:	93 1f       	adc	r25, r19
     a00:	fc 01       	movw	r30, r24
     a02:	40 83       	st	Z, r20
	int tempNum[3];
	char currentString[10];
	char tempString[10];
	strcpy(currentString,newTime);
	for (int j=0; j<3; j++){
		for (int i=0; i<2; i++){
     a04:	8b 81       	ldd	r24, Y+3	; 0x03
     a06:	9c 81       	ldd	r25, Y+4	; 0x04
     a08:	01 96       	adiw	r24, 0x01	; 1
     a0a:	9c 83       	std	Y+4, r25	; 0x04
     a0c:	8b 83       	std	Y+3, r24	; 0x03
     a0e:	21 e0       	ldi	r18, 0x01	; 1
     a10:	8b 81       	ldd	r24, Y+3	; 0x03
     a12:	9c 81       	ldd	r25, Y+4	; 0x04
     a14:	82 30       	cpi	r24, 0x02	; 2
     a16:	91 05       	cpc	r25, r1
     a18:	0c f0       	brlt	.+2      	; 0xa1c <_ZN6myTime7setTimeEPc+0x84>
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	22 23       	and	r18, r18
     a1e:	b9 f6       	brne	.-82     	; 0x9ce <_ZN6myTime7setTimeEPc+0x36>
				tempString[i]=currentString[i+j*3];
		}
		tempNum[j]=atoi(tempString);
     a20:	ce 01       	movw	r24, r28
     a22:	45 96       	adiw	r24, 0x15	; 21
     a24:	0e 94 19 15 	call	0x2a32	; 0x2a32 <atoi>
     a28:	9c 01       	movw	r18, r24
     a2a:	89 81       	ldd	r24, Y+1	; 0x01
     a2c:	9a 81       	ldd	r25, Y+2	; 0x02
     a2e:	88 0f       	add	r24, r24
     a30:	99 1f       	adc	r25, r25
     a32:	ae 01       	movw	r20, r28
     a34:	4f 5f       	subi	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	84 0f       	add	r24, r20
     a3a:	95 1f       	adc	r25, r21
     a3c:	04 96       	adiw	r24, 0x04	; 4
     a3e:	fc 01       	movw	r30, r24
     a40:	31 83       	std	Z+1, r19	; 0x01
     a42:	20 83       	st	Z, r18
BOOL myTime::setTime(char *newTime){
	int tempNum[3];
	char currentString[10];
	char tempString[10];
	strcpy(currentString,newTime);
	for (int j=0; j<3; j++){
     a44:	89 81       	ldd	r24, Y+1	; 0x01
     a46:	9a 81       	ldd	r25, Y+2	; 0x02
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	9a 83       	std	Y+2, r25	; 0x02
     a4c:	89 83       	std	Y+1, r24	; 0x01
     a4e:	21 e0       	ldi	r18, 0x01	; 1
     a50:	89 81       	ldd	r24, Y+1	; 0x01
     a52:	9a 81       	ldd	r25, Y+2	; 0x02
     a54:	83 30       	cpi	r24, 0x03	; 3
     a56:	91 05       	cpc	r25, r1
     a58:	0c f0       	brlt	.+2      	; 0xa5c <_ZN6myTime7setTimeEPc+0xc4>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	22 23       	and	r18, r18
     a5e:	09 f0       	breq	.+2      	; 0xa62 <_ZN6myTime7setTimeEPc+0xca>
     a60:	b3 cf       	rjmp	.-154    	; 0x9c8 <_ZN6myTime7setTimeEPc+0x30>
		for (int i=0; i<2; i++){
				tempString[i]=currentString[i+j*3];
		}
		tempNum[j]=atoi(tempString);
	}
	if (tempNum[0]/24==0 && tempNum[1]/60==0 && tempNum[2]/60==0){
     a62:	8d 81       	ldd	r24, Y+5	; 0x05
     a64:	9e 81       	ldd	r25, Y+6	; 0x06
     a66:	47 96       	adiw	r24, 0x17	; 23
     a68:	8f 32       	cpi	r24, 0x2F	; 47
     a6a:	91 05       	cpc	r25, r1
     a6c:	c0 f4       	brcc	.+48     	; 0xa9e <_ZN6myTime7setTimeEPc+0x106>
     a6e:	8f 81       	ldd	r24, Y+7	; 0x07
     a70:	98 85       	ldd	r25, Y+8	; 0x08
     a72:	cb 96       	adiw	r24, 0x3b	; 59
     a74:	87 37       	cpi	r24, 0x77	; 119
     a76:	91 05       	cpc	r25, r1
     a78:	90 f4       	brcc	.+36     	; 0xa9e <_ZN6myTime7setTimeEPc+0x106>
     a7a:	89 85       	ldd	r24, Y+9	; 0x09
     a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a7e:	cb 96       	adiw	r24, 0x3b	; 59
     a80:	87 37       	cpi	r24, 0x77	; 119
     a82:	91 05       	cpc	r25, r1
     a84:	60 f4       	brcc	.+24     	; 0xa9e <_ZN6myTime7setTimeEPc+0x106>
		setTime(tempNum[0],tempNum[1],tempNum[2]);
     a86:	6d 81       	ldd	r22, Y+5	; 0x05
     a88:	7e 81       	ldd	r23, Y+6	; 0x06
     a8a:	4f 81       	ldd	r20, Y+7	; 0x07
     a8c:	58 85       	ldd	r21, Y+8	; 0x08
     a8e:	29 85       	ldd	r18, Y+9	; 0x09
     a90:	3a 85       	ldd	r19, Y+10	; 0x0a
     a92:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a94:	98 a1       	lds	r25, 0x48
     a96:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
		return fTrue;
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	01 c0       	rjmp	.+2      	; 0xaa0 <_ZN6myTime7setTimeEPc+0x108>
	} 
	return fFalse;
     a9e:	80 e0       	ldi	r24, 0x00	; 0
}
     aa0:	a2 96       	adiw	r28, 0x22	; 34
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	f8 94       	cli
     aa6:	de bf       	out	0x3e, r29	; 62
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	cd bf       	out	0x3d, r28	; 61
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	08 95       	ret

00000ab2 <_ZN6myTime7setTimeEiii>:

void myTime::setTime(int hour,int minute,int second){
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
     aba:	28 97       	sbiw	r28, 0x08	; 8
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	f8 94       	cli
     ac0:	de bf       	out	0x3e, r29	; 62
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	cd bf       	out	0x3d, r28	; 61
     ac6:	9a 83       	std	Y+2, r25	; 0x02
     ac8:	89 83       	std	Y+1, r24	; 0x01
     aca:	7c 83       	std	Y+4, r23	; 0x04
     acc:	6b 83       	std	Y+3, r22	; 0x03
     ace:	5e 83       	std	Y+6, r21	; 0x06
     ad0:	4d 83       	std	Y+5, r20	; 0x05
     ad2:	38 87       	std	Y+8, r19	; 0x08
     ad4:	2f 83       	std	Y+7, r18	; 0x07
	setHour(hour);
     ad6:	89 81       	ldd	r24, Y+1	; 0x01
     ad8:	9a 81       	ldd	r25, Y+2	; 0x02
     ada:	2b 81       	ldd	r18, Y+3	; 0x03
     adc:	3c 81       	ldd	r19, Y+4	; 0x04
     ade:	b9 01       	movw	r22, r18
     ae0:	0e 94 89 05 	call	0xb12	; 0xb12 <_ZN6myTime7setHourEi>
	setMinute(minute);
     ae4:	89 81       	ldd	r24, Y+1	; 0x01
     ae6:	9a 81       	ldd	r25, Y+2	; 0x02
     ae8:	2d 81       	ldd	r18, Y+5	; 0x05
     aea:	3e 81       	ldd	r19, Y+6	; 0x06
     aec:	b9 01       	movw	r22, r18
     aee:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6myTime9setMinuteEi>
	setSecond(second);
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	9a 81       	ldd	r25, Y+2	; 0x02
     af6:	2f 81       	ldd	r18, Y+7	; 0x07
     af8:	38 85       	ldd	r19, Y+8	; 0x08
     afa:	b9 01       	movw	r22, r18
     afc:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN6myTime9setSecondEi>
}
     b00:	28 96       	adiw	r28, 0x08	; 8
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	de bf       	out	0x3e, r29	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	cd bf       	out	0x3d, r28	; 61
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	08 95       	ret

00000b12 <_ZN6myTime7setHourEi>:

void myTime::setHour(int hour){
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	00 d0       	rcall	.+0      	; 0xb18 <_ZN6myTime7setHourEi+0x6>
     b18:	00 d0       	rcall	.+0      	; 0xb1a <_ZN6myTime7setHourEi+0x8>
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
     b1e:	9a 83       	std	Y+2, r25	; 0x02
     b20:	89 83       	std	Y+1, r24	; 0x01
     b22:	7c 83       	std	Y+4, r23	; 0x04
     b24:	6b 83       	std	Y+3, r22	; 0x03
	if (hour/24 == 0){
     b26:	8b 81       	ldd	r24, Y+3	; 0x03
     b28:	9c 81       	ldd	r25, Y+4	; 0x04
     b2a:	47 96       	adiw	r24, 0x17	; 23
     b2c:	8f 32       	cpi	r24, 0x2F	; 47
     b2e:	91 05       	cpc	r25, r1
     b30:	38 f4       	brcc	.+14     	; 0xb40 <_ZN6myTime7setHourEi+0x2e>
		this->hour = hour;
     b32:	89 81       	ldd	r24, Y+1	; 0x01
     b34:	9a 81       	ldd	r25, Y+2	; 0x02
     b36:	2b 81       	ldd	r18, Y+3	; 0x03
     b38:	3c 81       	ldd	r19, Y+4	; 0x04
     b3a:	fc 01       	movw	r30, r24
     b3c:	30 8f       	std	Z+24, r19	; 0x18
     b3e:	27 8b       	std	Z+23, r18	; 0x17
	}	
}
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	08 95       	ret

00000b4e <_ZN6myTime9setMinuteEi>:

void myTime::setMinute(int minute){
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	00 d0       	rcall	.+0      	; 0xb54 <_ZN6myTime9setMinuteEi+0x6>
     b54:	00 d0       	rcall	.+0      	; 0xb56 <_ZN6myTime9setMinuteEi+0x8>
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
     b5a:	9a 83       	std	Y+2, r25	; 0x02
     b5c:	89 83       	std	Y+1, r24	; 0x01
     b5e:	7c 83       	std	Y+4, r23	; 0x04
     b60:	6b 83       	std	Y+3, r22	; 0x03
	if (minute/60 == 0){
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	9c 81       	ldd	r25, Y+4	; 0x04
     b66:	cb 96       	adiw	r24, 0x3b	; 59
     b68:	87 37       	cpi	r24, 0x77	; 119
     b6a:	91 05       	cpc	r25, r1
     b6c:	38 f4       	brcc	.+14     	; 0xb7c <_ZN6myTime9setMinuteEi+0x2e>
		this->minute = minute;
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	9a 81       	ldd	r25, Y+2	; 0x02
     b72:	2b 81       	ldd	r18, Y+3	; 0x03
     b74:	3c 81       	ldd	r19, Y+4	; 0x04
     b76:	fc 01       	movw	r30, r24
     b78:	32 8f       	std	Z+26, r19	; 0x1a
     b7a:	21 8f       	std	Z+25, r18	; 0x19
	}	
}
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	08 95       	ret

00000b8a <_ZN6myTime9setSecondEi>:

void myTime::setSecond(int second){
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	00 d0       	rcall	.+0      	; 0xb90 <_ZN6myTime9setSecondEi+0x6>
     b90:	00 d0       	rcall	.+0      	; 0xb92 <_ZN6myTime9setSecondEi+0x8>
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	9a 83       	std	Y+2, r25	; 0x02
     b98:	89 83       	std	Y+1, r24	; 0x01
     b9a:	7c 83       	std	Y+4, r23	; 0x04
     b9c:	6b 83       	std	Y+3, r22	; 0x03
	if (second/60 == 0){
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	9c 81       	ldd	r25, Y+4	; 0x04
     ba2:	cb 96       	adiw	r24, 0x3b	; 59
     ba4:	87 37       	cpi	r24, 0x77	; 119
     ba6:	91 05       	cpc	r25, r1
     ba8:	38 f4       	brcc	.+14     	; 0xbb8 <_ZN6myTime9setSecondEi+0x2e>
		this->second = second;
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	9a 81       	ldd	r25, Y+2	; 0x02
     bae:	2b 81       	ldd	r18, Y+3	; 0x03
     bb0:	3c 81       	ldd	r19, Y+4	; 0x04
     bb2:	fc 01       	movw	r30, r24
     bb4:	34 8f       	std	Z+28, r19	; 0x1c
     bb6:	23 8f       	std	Z+27, r18	; 0x1b
	}	
}
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	08 95       	ret

00000bc6 <_ZN6myTime8addHoursEi>:

void myTime::addHours(int hours){
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	28 97       	sbiw	r28, 0x08	; 8
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	de bf       	out	0x3e, r29	; 62
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	cd bf       	out	0x3d, r28	; 61
     bda:	9e 83       	std	Y+6, r25	; 0x06
     bdc:	8d 83       	std	Y+5, r24	; 0x05
     bde:	78 87       	std	Y+8, r23	; 0x08
     be0:	6f 83       	std	Y+7, r22	; 0x07
	volatile int tempHours = hour + hours;
     be2:	8d 81       	ldd	r24, Y+5	; 0x05
     be4:	9e 81       	ldd	r25, Y+6	; 0x06
     be6:	fc 01       	movw	r30, r24
     be8:	27 89       	ldd	r18, Z+23	; 0x17
     bea:	30 8d       	ldd	r19, Z+24	; 0x18
     bec:	8f 81       	ldd	r24, Y+7	; 0x07
     bee:	98 85       	ldd	r25, Y+8	; 0x08
     bf0:	82 0f       	add	r24, r18
     bf2:	93 1f       	adc	r25, r19
     bf4:	9a 83       	std	Y+2, r25	; 0x02
     bf6:	89 83       	std	Y+1, r24	; 0x01
	hour = tempHours%24;
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	9a 81       	ldd	r25, Y+2	; 0x02
     bfc:	28 e1       	ldi	r18, 0x18	; 24
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	b9 01       	movw	r22, r18
     c02:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__divmodhi4>
     c06:	9c 01       	movw	r18, r24
     c08:	8d 81       	ldd	r24, Y+5	; 0x05
     c0a:	9e 81       	ldd	r25, Y+6	; 0x06
     c0c:	fc 01       	movw	r30, r24
     c0e:	30 8f       	std	Z+24, r19	; 0x18
     c10:	27 8b       	std	Z+23, r18	; 0x17
	if (tempHours/24 >= 1){
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	9a 81       	ldd	r25, Y+2	; 0x02
     c16:	21 e0       	ldi	r18, 0x01	; 1
     c18:	88 31       	cpi	r24, 0x18	; 24
     c1a:	91 05       	cpc	r25, r1
     c1c:	0c f4       	brge	.+2      	; 0xc20 <_ZN6myTime8addHoursEi+0x5a>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	22 23       	and	r18, r18
     c22:	91 f0       	breq	.+36     	; 0xc48 <_ZN6myTime8addHoursEi+0x82>
		volatile int daysToAdd = tempHours/24;
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	9a 81       	ldd	r25, Y+2	; 0x02
     c28:	28 e1       	ldi	r18, 0x18	; 24
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	b9 01       	movw	r22, r18
     c2e:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__divmodhi4>
     c32:	9b 01       	movw	r18, r22
     c34:	c9 01       	movw	r24, r18
     c36:	9c 83       	std	Y+4, r25	; 0x04
     c38:	8b 83       	std	Y+3, r24	; 0x03
		addDays(daysToAdd);
     c3a:	8d 81       	ldd	r24, Y+5	; 0x05
     c3c:	9e 81       	ldd	r25, Y+6	; 0x06
     c3e:	2b 81       	ldd	r18, Y+3	; 0x03
     c40:	3c 81       	ldd	r19, Y+4	; 0x04
     c42:	b9 01       	movw	r22, r18
     c44:	0e 94 43 02 	call	0x486	; 0x486 <_ZN6myDate7addDaysEi>
	}	
}
     c48:	28 96       	adiw	r28, 0x08	; 8
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	08 95       	ret

00000c5a <_ZN6myTime10addMinutesEi>:

void myTime::addMinutes(int minutes){
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	28 97       	sbiw	r28, 0x08	; 8
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	de bf       	out	0x3e, r29	; 62
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	cd bf       	out	0x3d, r28	; 61
     c6e:	9e 83       	std	Y+6, r25	; 0x06
     c70:	8d 83       	std	Y+5, r24	; 0x05
     c72:	78 87       	std	Y+8, r23	; 0x08
     c74:	6f 83       	std	Y+7, r22	; 0x07
	volatile int tempMinutes = minute + minutes;				//what the minutes were + added minutes
     c76:	8d 81       	ldd	r24, Y+5	; 0x05
     c78:	9e 81       	ldd	r25, Y+6	; 0x06
     c7a:	fc 01       	movw	r30, r24
     c7c:	21 8d       	ldd	r18, Z+25	; 0x19
     c7e:	32 8d       	ldd	r19, Z+26	; 0x1a
     c80:	8f 81       	ldd	r24, Y+7	; 0x07
     c82:	98 85       	ldd	r25, Y+8	; 0x08
     c84:	82 0f       	add	r24, r18
     c86:	93 1f       	adc	r25, r19
     c88:	9a 83       	std	Y+2, r25	; 0x02
     c8a:	89 83       	std	Y+1, r24	; 0x01
	minute = tempMinutes%60;
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	9a 81       	ldd	r25, Y+2	; 0x02
     c90:	2c e3       	ldi	r18, 0x3C	; 60
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	b9 01       	movw	r22, r18
     c96:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__divmodhi4>
     c9a:	9c 01       	movw	r18, r24
     c9c:	8d 81       	ldd	r24, Y+5	; 0x05
     c9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ca0:	fc 01       	movw	r30, r24
     ca2:	32 8f       	std	Z+26, r19	; 0x1a
     ca4:	21 8f       	std	Z+25, r18	; 0x19
	if (tempMinutes/60 >= 1){
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	9a 81       	ldd	r25, Y+2	; 0x02
     caa:	21 e0       	ldi	r18, 0x01	; 1
     cac:	8c 33       	cpi	r24, 0x3C	; 60
     cae:	91 05       	cpc	r25, r1
     cb0:	0c f4       	brge	.+2      	; 0xcb4 <_ZN6myTime10addMinutesEi+0x5a>
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	22 23       	and	r18, r18
     cb6:	91 f0       	breq	.+36     	; 0xcdc <_ZN6myTime10addMinutesEi+0x82>
		volatile int hoursToAdd = tempMinutes/60;
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	9a 81       	ldd	r25, Y+2	; 0x02
     cbc:	2c e3       	ldi	r18, 0x3C	; 60
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	b9 01       	movw	r22, r18
     cc2:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__divmodhi4>
     cc6:	9b 01       	movw	r18, r22
     cc8:	c9 01       	movw	r24, r18
     cca:	9c 83       	std	Y+4, r25	; 0x04
     ccc:	8b 83       	std	Y+3, r24	; 0x03
		addHours(hoursToAdd);
     cce:	2b 81       	ldd	r18, Y+3	; 0x03
     cd0:	3c 81       	ldd	r19, Y+4	; 0x04
     cd2:	8d 81       	ldd	r24, Y+5	; 0x05
     cd4:	9e 81       	ldd	r25, Y+6	; 0x06
     cd6:	b9 01       	movw	r22, r18
     cd8:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <_ZN6myTime8addHoursEi>
	}
}
     cdc:	28 96       	adiw	r28, 0x08	; 8
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	08 95       	ret

00000cee <_ZN6myTime10addSecondsEi>:

void myTime::addSeconds(int seconds){
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	28 97       	sbiw	r28, 0x08	; 8
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	9e 83       	std	Y+6, r25	; 0x06
     d04:	8d 83       	std	Y+5, r24	; 0x05
     d06:	78 87       	std	Y+8, r23	; 0x08
     d08:	6f 83       	std	Y+7, r22	; 0x07
	volatile int tempSecond = second + seconds;
     d0a:	8d 81       	ldd	r24, Y+5	; 0x05
     d0c:	9e 81       	ldd	r25, Y+6	; 0x06
     d0e:	fc 01       	movw	r30, r24
     d10:	23 8d       	ldd	r18, Z+27	; 0x1b
     d12:	34 8d       	ldd	r19, Z+28	; 0x1c
     d14:	8f 81       	ldd	r24, Y+7	; 0x07
     d16:	98 85       	ldd	r25, Y+8	; 0x08
     d18:	82 0f       	add	r24, r18
     d1a:	93 1f       	adc	r25, r19
     d1c:	9a 83       	std	Y+2, r25	; 0x02
     d1e:	89 83       	std	Y+1, r24	; 0x01
	second = (tempSecond)%60;			  //what's left over
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	9a 81       	ldd	r25, Y+2	; 0x02
     d24:	2c e3       	ldi	r18, 0x3C	; 60
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	b9 01       	movw	r22, r18
     d2a:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__divmodhi4>
     d2e:	9c 01       	movw	r18, r24
     d30:	8d 81       	ldd	r24, Y+5	; 0x05
     d32:	9e 81       	ldd	r25, Y+6	; 0x06
     d34:	fc 01       	movw	r30, r24
     d36:	34 8f       	std	Z+28, r19	; 0x1c
     d38:	23 8f       	std	Z+27, r18	; 0x1b
	if ((tempSecond)/60 >= 1){
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	9a 81       	ldd	r25, Y+2	; 0x02
     d3e:	21 e0       	ldi	r18, 0x01	; 1
     d40:	8c 33       	cpi	r24, 0x3C	; 60
     d42:	91 05       	cpc	r25, r1
     d44:	0c f4       	brge	.+2      	; 0xd48 <_ZN6myTime10addSecondsEi+0x5a>
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	22 23       	and	r18, r18
     d4a:	91 f0       	breq	.+36     	; 0xd70 <_ZN6myTime10addSecondsEi+0x82>
		//There are more than 60 seconds now, find out how many minutes need to be added
		volatile int minutesToAdd = (tempSecond)/60;		  //if seconds = 120, adds two minutes
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	9a 81       	ldd	r25, Y+2	; 0x02
     d50:	2c e3       	ldi	r18, 0x3C	; 60
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	b9 01       	movw	r22, r18
     d56:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__divmodhi4>
     d5a:	9b 01       	movw	r18, r22
     d5c:	c9 01       	movw	r24, r18
     d5e:	9c 83       	std	Y+4, r25	; 0x04
     d60:	8b 83       	std	Y+3, r24	; 0x03
		addMinutes(minutesToAdd);					  //add to minutes
     d62:	2b 81       	ldd	r18, Y+3	; 0x03
     d64:	3c 81       	ldd	r19, Y+4	; 0x04
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	b9 01       	movw	r22, r18
     d6c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <_ZN6myTime10addMinutesEi>
	}
}
     d70:	28 96       	adiw	r28, 0x08	; 8
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	08 95       	ret

00000d82 <_ZN6myTime13checkValidityEv>:

BOOL myTime::checkValidity(){
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	00 d0       	rcall	.+0      	; 0xd88 <_ZN6myTime13checkValidityEv+0x6>
     d88:	0f 92       	push	r0
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	9b 83       	std	Y+3, r25	; 0x03
     d90:	8a 83       	std	Y+2, r24	; 0x02
	BOOL stillValid=fTrue;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	89 83       	std	Y+1, r24	; 0x01
	if (second/60==0 && minute/60==0 && hour/24==0){
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	9b 81       	ldd	r25, Y+3	; 0x03
     d9a:	fc 01       	movw	r30, r24
     d9c:	83 8d       	ldd	r24, Z+27	; 0x1b
     d9e:	94 8d       	ldd	r25, Z+28	; 0x1c
     da0:	cb 96       	adiw	r24, 0x3b	; 59
     da2:	87 37       	cpi	r24, 0x77	; 119
     da4:	91 05       	cpc	r25, r1
     da6:	a0 f4       	brcc	.+40     	; 0xdd0 <_ZN6myTime13checkValidityEv+0x4e>
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	9b 81       	ldd	r25, Y+3	; 0x03
     dac:	fc 01       	movw	r30, r24
     dae:	81 8d       	ldd	r24, Z+25	; 0x19
     db0:	92 8d       	ldd	r25, Z+26	; 0x1a
     db2:	cb 96       	adiw	r24, 0x3b	; 59
     db4:	87 37       	cpi	r24, 0x77	; 119
     db6:	91 05       	cpc	r25, r1
     db8:	58 f4       	brcc	.+22     	; 0xdd0 <_ZN6myTime13checkValidityEv+0x4e>
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	9b 81       	ldd	r25, Y+3	; 0x03
     dbe:	fc 01       	movw	r30, r24
     dc0:	87 89       	ldd	r24, Z+23	; 0x17
     dc2:	90 8d       	ldd	r25, Z+24	; 0x18
     dc4:	47 96       	adiw	r24, 0x17	; 23
     dc6:	8f 32       	cpi	r24, 0x2F	; 47
     dc8:	91 05       	cpc	r25, r1
     dca:	10 f4       	brcc	.+4      	; 0xdd0 <_ZN6myTime13checkValidityEv+0x4e>
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	01 c0       	rjmp	.+2      	; 0xdd2 <_ZN6myTime13checkValidityEv+0x50>
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	88 23       	and	r24, r24
     dd4:	69 f0       	breq	.+26     	; 0xdf0 <_ZN6myTime13checkValidityEv+0x6e>
		if (checkValidityDate()){return fTrue;}
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
     dd8:	9b 81       	ldd	r25, Y+3	; 0x03
     dda:	0e 94 02 03 	call	0x604	; 0x604 <_ZN6myDate17checkValidityDateEv>
     dde:	98 2f       	mov	r25, r24
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	99 23       	and	r25, r25
     de4:	09 f4       	brne	.+2      	; 0xde8 <_ZN6myTime13checkValidityEv+0x66>
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	88 23       	and	r24, r24
     dea:	11 f0       	breq	.+4      	; 0xdf0 <_ZN6myTime13checkValidityEv+0x6e>
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	01 c0       	rjmp	.+2      	; 0xdf2 <_ZN6myTime13checkValidityEv+0x70>
	}
	return fFalse;
     df0:	80 e0       	ldi	r24, 0x00	; 0
}
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	08 95       	ret

00000dfe <_ZN6myTime7getTimeEv>:

const char * myTime::getTime(){
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	2b 97       	sbiw	r28, 0x0b	; 11
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	9b 87       	std	Y+11, r25	; 0x0b
     e14:	8a 87       	std	Y+10, r24	; 0x0a
	char hourString[3], minuteString[3],secondString[3];
	itoa(hour,hourString,10);
     e16:	8a 85       	ldd	r24, Y+10	; 0x0a
     e18:	9b 85       	ldd	r25, Y+11	; 0x0b
     e1a:	fc 01       	movw	r30, r24
     e1c:	87 89       	ldd	r24, Z+23	; 0x17
     e1e:	90 8d       	ldd	r25, Z+24	; 0x18
     e20:	9e 01       	movw	r18, r28
     e22:	2f 5f       	subi	r18, 0xFF	; 255
     e24:	3f 4f       	sbci	r19, 0xFF	; 255
     e26:	b9 01       	movw	r22, r18
     e28:	4a e0       	ldi	r20, 0x0A	; 10
     e2a:	50 e0       	ldi	r21, 0x00	; 0
     e2c:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <itoa>
	itoa(minute,minuteString,10);
     e30:	8a 85       	ldd	r24, Y+10	; 0x0a
     e32:	9b 85       	ldd	r25, Y+11	; 0x0b
     e34:	fc 01       	movw	r30, r24
     e36:	81 8d       	ldd	r24, Z+25	; 0x19
     e38:	92 8d       	ldd	r25, Z+26	; 0x1a
     e3a:	9e 01       	movw	r18, r28
     e3c:	2c 5f       	subi	r18, 0xFC	; 252
     e3e:	3f 4f       	sbci	r19, 0xFF	; 255
     e40:	b9 01       	movw	r22, r18
     e42:	4a e0       	ldi	r20, 0x0A	; 10
     e44:	50 e0       	ldi	r21, 0x00	; 0
     e46:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <itoa>
	itoa(second,secondString,10);
     e4a:	8a 85       	ldd	r24, Y+10	; 0x0a
     e4c:	9b 85       	ldd	r25, Y+11	; 0x0b
     e4e:	fc 01       	movw	r30, r24
     e50:	83 8d       	ldd	r24, Z+27	; 0x1b
     e52:	94 8d       	ldd	r25, Z+28	; 0x1c
     e54:	9e 01       	movw	r18, r28
     e56:	29 5f       	subi	r18, 0xF9	; 249
     e58:	3f 4f       	sbci	r19, 0xFF	; 255
     e5a:	b9 01       	movw	r22, r18
     e5c:	4a e0       	ldi	r20, 0x0A	; 10
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <itoa>
	strcpy(timeString,hourString);
     e64:	8a 85       	ldd	r24, Y+10	; 0x0a
     e66:	9b 85       	ldd	r25, Y+11	; 0x0b
     e68:	4d 96       	adiw	r24, 0x1d	; 29
     e6a:	9e 01       	movw	r18, r28
     e6c:	2f 5f       	subi	r18, 0xFF	; 255
     e6e:	3f 4f       	sbci	r19, 0xFF	; 255
     e70:	b9 01       	movw	r22, r18
     e72:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <strcpy>
	strcat(timeString,":");
     e76:	8a 85       	ldd	r24, Y+10	; 0x0a
     e78:	9b 85       	ldd	r25, Y+11	; 0x0b
     e7a:	9c 01       	movw	r18, r24
     e7c:	23 5e       	subi	r18, 0xE3	; 227
     e7e:	3f 4f       	sbci	r19, 0xFF	; 255
     e80:	c9 01       	movw	r24, r18
     e82:	ac 01       	movw	r20, r24
     e84:	fa 01       	movw	r30, r20
     e86:	01 90       	ld	r0, Z+
     e88:	00 20       	and	r0, r0
     e8a:	e9 f7       	brne	.-6      	; 0xe86 <_ZN6myTime7getTimeEv+0x88>
     e8c:	cf 01       	movw	r24, r30
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	84 1b       	sub	r24, r20
     e92:	95 0b       	sbc	r25, r21
     e94:	82 0f       	add	r24, r18
     e96:	93 1f       	adc	r25, r19
     e98:	2a e3       	ldi	r18, 0x3A	; 58
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	fc 01       	movw	r30, r24
     e9e:	31 83       	std	Z+1, r19	; 0x01
     ea0:	20 83       	st	Z, r18
	strcat(timeString,minuteString);
     ea2:	8a 85       	ldd	r24, Y+10	; 0x0a
     ea4:	9b 85       	ldd	r25, Y+11	; 0x0b
     ea6:	4d 96       	adiw	r24, 0x1d	; 29
     ea8:	9e 01       	movw	r18, r28
     eaa:	2c 5f       	subi	r18, 0xFC	; 252
     eac:	3f 4f       	sbci	r19, 0xFF	; 255
     eae:	b9 01       	movw	r22, r18
     eb0:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <strcat>
	strcat(timeString,":");
     eb4:	8a 85       	ldd	r24, Y+10	; 0x0a
     eb6:	9b 85       	ldd	r25, Y+11	; 0x0b
     eb8:	9c 01       	movw	r18, r24
     eba:	23 5e       	subi	r18, 0xE3	; 227
     ebc:	3f 4f       	sbci	r19, 0xFF	; 255
     ebe:	c9 01       	movw	r24, r18
     ec0:	ac 01       	movw	r20, r24
     ec2:	fa 01       	movw	r30, r20
     ec4:	01 90       	ld	r0, Z+
     ec6:	00 20       	and	r0, r0
     ec8:	e9 f7       	brne	.-6      	; 0xec4 <_ZN6myTime7getTimeEv+0xc6>
     eca:	cf 01       	movw	r24, r30
     ecc:	01 97       	sbiw	r24, 0x01	; 1
     ece:	84 1b       	sub	r24, r20
     ed0:	95 0b       	sbc	r25, r21
     ed2:	82 0f       	add	r24, r18
     ed4:	93 1f       	adc	r25, r19
     ed6:	2a e3       	ldi	r18, 0x3A	; 58
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	fc 01       	movw	r30, r24
     edc:	31 83       	std	Z+1, r19	; 0x01
     ede:	20 83       	st	Z, r18
	strcat(timeString,secondString);
     ee0:	8a 85       	ldd	r24, Y+10	; 0x0a
     ee2:	9b 85       	ldd	r25, Y+11	; 0x0b
     ee4:	4d 96       	adiw	r24, 0x1d	; 29
     ee6:	9e 01       	movw	r18, r28
     ee8:	29 5f       	subi	r18, 0xF9	; 249
     eea:	3f 4f       	sbci	r19, 0xFF	; 255
     eec:	b9 01       	movw	r22, r18
     eee:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <strcat>
	timeString[10] = ' ';
     ef2:	8a 85       	ldd	r24, Y+10	; 0x0a
     ef4:	9b 85       	ldd	r25, Y+11	; 0x0b
     ef6:	20 e2       	ldi	r18, 0x20	; 32
     ef8:	fc 01       	movw	r30, r24
     efa:	27 a3       	lds	r18, 0x57
	timeString[11] = '\0';
     efc:	8a 85       	ldd	r24, Y+10	; 0x0a
     efe:	9b 85       	ldd	r25, Y+11	; 0x0b
     f00:	fc 01       	movw	r30, r24
     f02:	10 a6       	lds	r17, 0xb0
	return timeString;
     f04:	8a 85       	ldd	r24, Y+10	; 0x0a
     f06:	9b 85       	ldd	r25, Y+11	; 0x0b
     f08:	4d 96       	adiw	r24, 0x1d	; 29
     f0a:	2b 96       	adiw	r28, 0x0b	; 11
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	08 95       	ret

00000f1c <_Z18getDateTime_eepromhh>:
BYTE EEMEM eeDay = 10;
WORD EEMEM eeYear = 2013;


/*************************************************************************************************************/
void getDateTime_eeprom(BOOL gTime, BOOL gDate){			//get date and time from EEPROM
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	2f 97       	sbiw	r28, 0x0f	; 15
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	8e 87       	std	Y+14, r24	; 0x0e
     f32:	6f 87       	std	Y+15, r22	; 0x0f
	cli();
     f34:	f8 94       	cli
	if (gTime){
     f36:	8e 85       	ldd	r24, Y+14	; 0x0e
     f38:	88 23       	and	r24, r24
     f3a:	09 f4       	brne	.+2      	; 0xf3e <_Z18getDateTime_eepromhh+0x22>
     f3c:	4b c0       	rjmp	.+150    	; 0xfd4 <_Z18getDateTime_eepromhh+0xb8>
		BYTE tempMin, tempSec, tempHour;
		int times=0;
     f3e:	1a 82       	std	Y+2, r1	; 0x02
     f40:	19 82       	std	Y+1, r1	; 0x01
		BOOL notGood=fTrue;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	8b 83       	std	Y+3, r24	; 0x03
		while(notGood && times<3){
     f46:	2c c0       	rjmp	.+88     	; 0xfa0 <_Z18getDateTime_eepromhh+0x84>
			tempSec = eeprom_read_byte(&eeSecond);
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__eerd_byte_m324pa>
     f50:	8f 83       	std	Y+7, r24	; 0x07
			tempMin = eeprom_read_byte(&eeMinute);
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__eerd_byte_m324pa>
     f5a:	88 87       	std	Y+8, r24	; 0x08
			tempHour = eeprom_read_byte(&eeHour);
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__eerd_byte_m324pa>
     f64:	89 87       	std	Y+9, r24	; 0x09
			if (tempSec/60==0 && tempMin/60==0 && tempHour/24==0){currentTime.setTime((int)tempHour,(int)tempMin,(int)tempSec); notGood=fFalse;}
     f66:	8f 81       	ldd	r24, Y+7	; 0x07
     f68:	8c 33       	cpi	r24, 0x3C	; 60
     f6a:	a8 f4       	brcc	.+42     	; 0xf96 <_Z18getDateTime_eepromhh+0x7a>
     f6c:	88 85       	ldd	r24, Y+8	; 0x08
     f6e:	8c 33       	cpi	r24, 0x3C	; 60
     f70:	90 f4       	brcc	.+36     	; 0xf96 <_Z18getDateTime_eepromhh+0x7a>
     f72:	89 85       	ldd	r24, Y+9	; 0x09
     f74:	88 31       	cpi	r24, 0x18	; 24
     f76:	78 f4       	brcc	.+30     	; 0xf96 <_Z18getDateTime_eepromhh+0x7a>
     f78:	89 85       	ldd	r24, Y+9	; 0x09
     f7a:	68 2f       	mov	r22, r24
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	88 85       	ldd	r24, Y+8	; 0x08
     f80:	48 2f       	mov	r20, r24
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	8f 81       	ldd	r24, Y+7	; 0x07
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	8c e8       	ldi	r24, 0x8C	; 140
     f8c:	91 e0       	ldi	r25, 0x01	; 1
     f8e:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
     f92:	1b 82       	std	Y+3, r1	; 0x03
     f94:	05 c0       	rjmp	.+10     	; 0xfa0 <_Z18getDateTime_eepromhh+0x84>
			else {times++;}
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	9a 81       	ldd	r25, Y+2	; 0x02
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	9a 83       	std	Y+2, r25	; 0x02
     f9e:	89 83       	std	Y+1, r24	; 0x01
	cli();
	if (gTime){
		BYTE tempMin, tempSec, tempHour;
		int times=0;
		BOOL notGood=fTrue;
		while(notGood && times<3){
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	88 23       	and	r24, r24
     fa4:	39 f0       	breq	.+14     	; 0xfb4 <_Z18getDateTime_eepromhh+0x98>
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
     faa:	83 30       	cpi	r24, 0x03	; 3
     fac:	91 05       	cpc	r25, r1
     fae:	14 f4       	brge	.+4      	; 0xfb4 <_Z18getDateTime_eepromhh+0x98>
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	01 c0       	rjmp	.+2      	; 0xfb6 <_Z18getDateTime_eepromhh+0x9a>
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	88 23       	and	r24, r24
     fb8:	39 f6       	brne	.-114    	; 0xf48 <_Z18getDateTime_eepromhh+0x2c>
			tempMin = eeprom_read_byte(&eeMinute);
			tempHour = eeprom_read_byte(&eeHour);
			if (tempSec/60==0 && tempMin/60==0 && tempHour/24==0){currentTime.setTime((int)tempHour,(int)tempMin,(int)tempSec); notGood=fFalse;}
			else {times++;}
		}
		if (notGood){currentTime.setTime(1,1,1);}
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	88 23       	and	r24, r24
     fbe:	51 f0       	breq	.+20     	; 0xfd4 <_Z18getDateTime_eepromhh+0xb8>
     fc0:	8c e8       	ldi	r24, 0x8C	; 140
     fc2:	91 e0       	ldi	r25, 0x01	; 1
     fc4:	61 e0       	ldi	r22, 0x01	; 1
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	41 e0       	ldi	r20, 0x01	; 1
     fca:	50 e0       	ldi	r21, 0x00	; 0
     fcc:	21 e0       	ldi	r18, 0x01	; 1
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
	}		
	if (gDate){
     fd4:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd6:	88 23       	and	r24, r24
     fd8:	09 f4       	brne	.+2      	; 0xfdc <_Z18getDateTime_eepromhh+0xc0>
     fda:	4e c0       	rjmp	.+156    	; 0x1078 <_Z18getDateTime_eepromhh+0x15c>
		BYTE tempDay,tempMonth;
		WORD tempYear;
		int times=0;
     fdc:	1d 82       	std	Y+5, r1	; 0x05
     fde:	1c 82       	std	Y+4, r1	; 0x04
		BOOL notGood=fTrue;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	8e 83       	std	Y+6, r24	; 0x06
		while (notGood && times<3){
     fe4:	2f c0       	rjmp	.+94     	; 0x1044 <_Z18getDateTime_eepromhh+0x128>
			tempDay = eeprom_read_byte(&eeDay);
     fe6:	84 e0       	ldi	r24, 0x04	; 4
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__eerd_byte_m324pa>
     fee:	8a 87       	std	Y+10, r24	; 0x0a
			tempMonth = eeprom_read_byte(&eeMonth);
     ff0:	83 e0       	ldi	r24, 0x03	; 3
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__eerd_byte_m324pa>
     ff8:	8b 87       	std	Y+11, r24	; 0x0b
			tempYear = eeprom_read_word(&eeYear);
     ffa:	85 e0       	ldi	r24, 0x05	; 5
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__eerd_word_m324pa>
    1002:	9d 87       	std	Y+13, r25	; 0x0d
    1004:	8c 87       	std	Y+12, r24	; 0x0c
			if (tempDay/31==0 && tempMonth/13==0 && tempYear/10000==0){currentTime.setDate((int)tempMonth,(int)tempDay,(int)tempYear); notGood=fFalse;}
    1006:	8a 85       	ldd	r24, Y+10	; 0x0a
    1008:	8f 31       	cpi	r24, 0x1F	; 31
    100a:	b8 f4       	brcc	.+46     	; 0x103a <_Z18getDateTime_eepromhh+0x11e>
    100c:	8b 85       	ldd	r24, Y+11	; 0x0b
    100e:	8d 30       	cpi	r24, 0x0D	; 13
    1010:	a0 f4       	brcc	.+40     	; 0x103a <_Z18getDateTime_eepromhh+0x11e>
    1012:	8c 85       	ldd	r24, Y+12	; 0x0c
    1014:	9d 85       	ldd	r25, Y+13	; 0x0d
    1016:	27 e2       	ldi	r18, 0x27	; 39
    1018:	80 31       	cpi	r24, 0x10	; 16
    101a:	92 07       	cpc	r25, r18
    101c:	70 f4       	brcc	.+28     	; 0x103a <_Z18getDateTime_eepromhh+0x11e>
    101e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1020:	68 2f       	mov	r22, r24
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	8a 85       	ldd	r24, Y+10	; 0x0a
    1026:	48 2f       	mov	r20, r24
    1028:	50 e0       	ldi	r21, 0x00	; 0
    102a:	2c 85       	ldd	r18, Y+12	; 0x0c
    102c:	3d 85       	ldd	r19, Y+13	; 0x0d
    102e:	8c e8       	ldi	r24, 0x8C	; 140
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	0e 94 84 01 	call	0x308	; 0x308 <_ZN6myDate7setDateEiii>
    1036:	1e 82       	std	Y+6, r1	; 0x06
    1038:	05 c0       	rjmp	.+10     	; 0x1044 <_Z18getDateTime_eepromhh+0x128>
			else {times++;}
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
    103c:	9d 81       	ldd	r25, Y+5	; 0x05
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	9d 83       	std	Y+5, r25	; 0x05
    1042:	8c 83       	std	Y+4, r24	; 0x04
	if (gDate){
		BYTE tempDay,tempMonth;
		WORD tempYear;
		int times=0;
		BOOL notGood=fTrue;
		while (notGood && times<3){
    1044:	8e 81       	ldd	r24, Y+6	; 0x06
    1046:	88 23       	and	r24, r24
    1048:	39 f0       	breq	.+14     	; 0x1058 <_Z18getDateTime_eepromhh+0x13c>
    104a:	8c 81       	ldd	r24, Y+4	; 0x04
    104c:	9d 81       	ldd	r25, Y+5	; 0x05
    104e:	83 30       	cpi	r24, 0x03	; 3
    1050:	91 05       	cpc	r25, r1
    1052:	14 f4       	brge	.+4      	; 0x1058 <_Z18getDateTime_eepromhh+0x13c>
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	01 c0       	rjmp	.+2      	; 0x105a <_Z18getDateTime_eepromhh+0x13e>
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	88 23       	and	r24, r24
    105c:	21 f6       	brne	.-120    	; 0xfe6 <_Z18getDateTime_eepromhh+0xca>
			tempMonth = eeprom_read_byte(&eeMonth);
			tempYear = eeprom_read_word(&eeYear);
			if (tempDay/31==0 && tempMonth/13==0 && tempYear/10000==0){currentTime.setDate((int)tempMonth,(int)tempDay,(int)tempYear); notGood=fFalse;}
			else {times++;}
		}
		if (notGood){currentTime.setDate(1,1,2001);}	
    105e:	8e 81       	ldd	r24, Y+6	; 0x06
    1060:	88 23       	and	r24, r24
    1062:	51 f0       	breq	.+20     	; 0x1078 <_Z18getDateTime_eepromhh+0x15c>
    1064:	8c e8       	ldi	r24, 0x8C	; 140
    1066:	91 e0       	ldi	r25, 0x01	; 1
    1068:	61 e0       	ldi	r22, 0x01	; 1
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	41 e0       	ldi	r20, 0x01	; 1
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	21 ed       	ldi	r18, 0xD1	; 209
    1072:	37 e0       	ldi	r19, 0x07	; 7
    1074:	0e 94 84 01 	call	0x308	; 0x308 <_ZN6myDate7setDateEiii>
	}
	sei();
    1078:	78 94       	sei
}
    107a:	2f 96       	adiw	r28, 0x0f	; 15
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	de bf       	out	0x3e, r29	; 62
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	cd bf       	out	0x3d, r28	; 61
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	08 95       	ret

0000108c <_Z19saveDateTime_eepromhh>:
/*************************************************************************************************************/

void saveDateTime_eeprom(BOOL sTime, BOOL sDate){
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	29 97       	sbiw	r28, 0x09	; 9
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	88 87       	std	Y+8, r24	; 0x08
    10a2:	69 87       	std	Y+9, r22	; 0x09
	cli();
    10a4:	f8 94       	cli
	if (sTime){
    10a6:	88 85       	ldd	r24, Y+8	; 0x08
    10a8:	88 23       	and	r24, r24
    10aa:	f1 f0       	breq	.+60     	; 0x10e8 <_Z19saveDateTime_eepromhh+0x5c>
		BYTE tempSec,tempMin,tempHour;
		tempHour = currentTime.getHours();
    10ac:	8c e8       	ldi	r24, 0x8C	; 140
    10ae:	91 e0       	ldi	r25, 0x01	; 1
    10b0:	0e 94 bb 04 	call	0x976	; 0x976 <_ZN6myTime8getHoursEv>
    10b4:	89 83       	std	Y+1, r24	; 0x01
		tempMin = currentTime.getMinutes();
    10b6:	8c e8       	ldi	r24, 0x8C	; 140
    10b8:	91 e0       	ldi	r25, 0x01	; 1
    10ba:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6myTime10getMinutesEv>
    10be:	8a 83       	std	Y+2, r24	; 0x02
		tempSec = currentTime.getSeconds();
    10c0:	8c e8       	ldi	r24, 0x8C	; 140
    10c2:	91 e0       	ldi	r25, 0x01	; 1
    10c4:	0e 94 99 04 	call	0x932	; 0x932 <_ZN6myTime10getSecondsEv>
    10c8:	8b 83       	std	Y+3, r24	; 0x03
		eeprom_write_byte(&eeSecond,tempSec);
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	6b 81       	ldd	r22, Y+3	; 0x03
    10d0:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__eewr_byte_m324pa>
		eeprom_write_byte(&eeMinute,tempMin);
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	6a 81       	ldd	r22, Y+2	; 0x02
    10da:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__eewr_byte_m324pa>
		eeprom_write_byte(&eeHour,tempHour);
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	69 81       	ldd	r22, Y+1	; 0x01
    10e4:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__eewr_byte_m324pa>
	}
	if (sDate){
    10e8:	89 85       	ldd	r24, Y+9	; 0x09
    10ea:	88 23       	and	r24, r24
    10ec:	09 f1       	breq	.+66     	; 0x1130 <_Z19saveDateTime_eepromhh+0xa4>
		BYTE tempDay,tempMonth;
		WORD tempYear;
		tempYear = currentTime.getYears();
    10ee:	8c e8       	ldi	r24, 0x8C	; 140
    10f0:	91 e0       	ldi	r25, 0x01	; 1
    10f2:	0e 94 ba 00 	call	0x174	; 0x174 <_ZN6myDate8getYearsEv>
    10f6:	9d 83       	std	Y+5, r25	; 0x05
    10f8:	8c 83       	std	Y+4, r24	; 0x04
		tempMonth = currentTime.getMonths();
    10fa:	8c e8       	ldi	r24, 0x8C	; 140
    10fc:	91 e0       	ldi	r25, 0x01	; 1
    10fe:	0e 94 a9 00 	call	0x152	; 0x152 <_ZN6myDate9getMonthsEv>
    1102:	8e 83       	std	Y+6, r24	; 0x06
		tempDay = currentTime.getDays();
    1104:	8c e8       	ldi	r24, 0x8C	; 140
    1106:	91 e0       	ldi	r25, 0x01	; 1
    1108:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN6myDate7getDaysEv>
    110c:	8f 83       	std	Y+7, r24	; 0x07
		eeprom_write_word(&eeYear,tempYear);
    110e:	85 e0       	ldi	r24, 0x05	; 5
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	2c 81       	ldd	r18, Y+4	; 0x04
    1114:	3d 81       	ldd	r19, Y+5	; 0x05
    1116:	b9 01       	movw	r22, r18
    1118:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <__eewr_word_m324pa>
		eeprom_write_byte(&eeMonth,tempMonth);
    111c:	83 e0       	ldi	r24, 0x03	; 3
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	6e 81       	ldd	r22, Y+6	; 0x06
    1122:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__eewr_byte_m324pa>
		eeprom_write_byte(&eeDay,tempDay);
    1126:	84 e0       	ldi	r24, 0x04	; 4
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	6f 81       	ldd	r22, Y+7	; 0x07
    112c:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__eewr_byte_m324pa>
	}
	sei();
    1130:	78 94       	sei
}
    1132:	29 96       	adiw	r28, 0x09	; 9
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	08 95       	ret

00001144 <_Z13PutUartChBonec>:
extern myTime currentTime;

#define updatingGAVR (flagUpdateGAVRDate || flagUpdateGAVRTime)

/**************************************************************************************************************/
void PutUartChBone(char ch){
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	0f 92       	push	r0
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSR0A & (1 << UDRE0)));
    1150:	00 00       	nop
    1152:	80 ec       	ldi	r24, 0xC0	; 192
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	fc 01       	movw	r30, r24
    1158:	80 81       	ld	r24, Z
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	80 72       	andi	r24, 0x20	; 32
    1160:	90 70       	andi	r25, 0x00	; 0
    1162:	21 e0       	ldi	r18, 0x01	; 1
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	09 f0       	breq	.+2      	; 0x116a <_Z13PutUartChBonec+0x26>
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	22 23       	and	r18, r18
    116c:	91 f7       	brne	.-28     	; 0x1152 <_Z13PutUartChBonec+0xe>
	UDR0=ch;
    116e:	86 ec       	ldi	r24, 0xC6	; 198
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	29 81       	ldd	r18, Y+1	; 0x01
    1174:	fc 01       	movw	r30, r24
    1176:	20 83       	st	Z, r18
}
    1178:	0f 90       	pop	r0
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	08 95       	ret

00001180 <_Z9PrintBonePc>:
/*************************************************************************************************************/
void PrintBone(char string[]){
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	00 d0       	rcall	.+0      	; 0x1186 <_Z9PrintBonePc+0x6>
    1186:	0f 92       	push	r0
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	9b 83       	std	Y+3, r25	; 0x03
    118e:	8a 83       	std	Y+2, r24	; 0x02
	BYTE i=0;
    1190:	19 82       	std	Y+1, r1	; 0x01
	
	while (string[i]){
    1192:	0e c0       	rjmp	.+28     	; 0x11b0 <_Z9PrintBonePc+0x30>
		PutUartChBone(string[i++]);
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	88 2f       	mov	r24, r24
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	2a 81       	ldd	r18, Y+2	; 0x02
    119c:	3b 81       	ldd	r19, Y+3	; 0x03
    119e:	82 0f       	add	r24, r18
    11a0:	93 1f       	adc	r25, r19
    11a2:	fc 01       	movw	r30, r24
    11a4:	80 81       	ld	r24, Z
    11a6:	99 81       	ldd	r25, Y+1	; 0x01
    11a8:	9f 5f       	subi	r25, 0xFF	; 255
    11aa:	99 83       	std	Y+1, r25	; 0x01
    11ac:	0e 94 a2 08 	call	0x1144	; 0x1144 <_Z13PutUartChBonec>
}
/*************************************************************************************************************/
void PrintBone(char string[]){
	BYTE i=0;
	
	while (string[i]){
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	88 2f       	mov	r24, r24
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	2a 81       	ldd	r18, Y+2	; 0x02
    11b8:	3b 81       	ldd	r19, Y+3	; 0x03
    11ba:	82 0f       	add	r24, r18
    11bc:	93 1f       	adc	r25, r19
    11be:	fc 01       	movw	r30, r24
    11c0:	90 81       	ld	r25, Z
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	99 23       	and	r25, r25
    11c6:	09 f4       	brne	.+2      	; 0x11ca <_Z9PrintBonePc+0x4a>
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	88 23       	and	r24, r24
    11cc:	19 f7       	brne	.-58     	; 0x1194 <_Z9PrintBonePc+0x14>
		PutUartChBone(string[i++]);
	}
}
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	08 95       	ret

000011da <_Z13PutUartChGAVRc>:
/*************************************************************************************************************/

void PutUartChGAVR(char ch){
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	0f 92       	push	r0
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSR1A & (1 << UDRE1)));
    11e6:	00 00       	nop
    11e8:	88 ec       	ldi	r24, 0xC8	; 200
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	fc 01       	movw	r30, r24
    11ee:	80 81       	ld	r24, Z
    11f0:	88 2f       	mov	r24, r24
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	80 72       	andi	r24, 0x20	; 32
    11f6:	90 70       	andi	r25, 0x00	; 0
    11f8:	21 e0       	ldi	r18, 0x01	; 1
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	09 f0       	breq	.+2      	; 0x1200 <_Z13PutUartChGAVRc+0x26>
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	22 23       	and	r18, r18
    1202:	91 f7       	brne	.-28     	; 0x11e8 <_Z13PutUartChGAVRc+0xe>
	UDR1=ch;
    1204:	8e ec       	ldi	r24, 0xCE	; 206
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	29 81       	ldd	r18, Y+1	; 0x01
    120a:	fc 01       	movw	r30, r24
    120c:	20 83       	st	Z, r18
}
    120e:	0f 90       	pop	r0
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	08 95       	ret

00001216 <_Z9PrintGAVRPc>:
/*************************************************************************************************************/

void PrintGAVR(char string[]){
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	00 d0       	rcall	.+0      	; 0x121c <_Z9PrintGAVRPc+0x6>
    121c:	0f 92       	push	r0
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	9b 83       	std	Y+3, r25	; 0x03
    1224:	8a 83       	std	Y+2, r24	; 0x02
	BYTE i=0;
    1226:	19 82       	std	Y+1, r1	; 0x01
	while (string[i]){
    1228:	0e c0       	rjmp	.+28     	; 0x1246 <_Z9PrintGAVRPc+0x30>
		PutUartChGAVR(string[i++]);
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	88 2f       	mov	r24, r24
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	2a 81       	ldd	r18, Y+2	; 0x02
    1232:	3b 81       	ldd	r19, Y+3	; 0x03
    1234:	82 0f       	add	r24, r18
    1236:	93 1f       	adc	r25, r19
    1238:	fc 01       	movw	r30, r24
    123a:	80 81       	ld	r24, Z
    123c:	99 81       	ldd	r25, Y+1	; 0x01
    123e:	9f 5f       	subi	r25, 0xFF	; 255
    1240:	99 83       	std	Y+1, r25	; 0x01
    1242:	0e 94 ed 08 	call	0x11da	; 0x11da <_Z13PutUartChGAVRc>
}
/*************************************************************************************************************/

void PrintGAVR(char string[]){
	BYTE i=0;
	while (string[i]){
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	88 2f       	mov	r24, r24
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	2a 81       	ldd	r18, Y+2	; 0x02
    124e:	3b 81       	ldd	r19, Y+3	; 0x03
    1250:	82 0f       	add	r24, r18
    1252:	93 1f       	adc	r25, r19
    1254:	fc 01       	movw	r30, r24
    1256:	90 81       	ld	r25, Z
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	99 23       	and	r25, r25
    125c:	09 f4       	brne	.+2      	; 0x1260 <_Z9PrintGAVRPc+0x4a>
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	88 23       	and	r24, r24
    1262:	19 f7       	brne	.-58     	; 0x122a <_Z9PrintGAVRPc+0x14>
		PutUartChGAVR(string[i++]);
	}
}
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	08 95       	ret

00001270 <_Z8sendGAVRv>:
/*************************************************************************************************************/

void sendGAVR(){
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	ca 55       	subi	r28, 0x5A	; 90
    127a:	d0 40       	sbci	r29, 0x00	; 0
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
	//Declare variables to be used.
	volatile static unsigned int state=0;
	volatile BOOL noCarriage=fTrue;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	8a 87       	std	Y+10, r24	; 0x0a
	char recChar, recString[40], sentString[40];
	unsigned int strLoc=0;
    128a:	1a 82       	std	Y+2, r1	; 0x02
    128c:	19 82       	std	Y+1, r1	; 0x01
	
	//Going to be a global
	BOOL flagTimeout=fFalse;
    128e:	1b 82       	std	Y+3, r1	; 0x03
	
	//Transmission protocol
	while (flagSendingGAVR){
    1290:	2b c2       	rjmp	.+1110   	; 0x16e8 <_Z8sendGAVRv+0x478>
		/* State 5: Successful transmission and reception. Kill sending flag, reset state, exit.					 */
		/* State 6: ACKBAD received, check to see if we have an invalid date/time in our clock or it was just noisy  */
		/*			and had error in transmission/reception. If valid, go to waiting state. Else exit and set flag.	 */
		/* State 7: Got the wrong ack for something, set a flag to let the WAVR do its thing then try again.		 */
		/*************************************************************************************************************/
		switch (state){
    1292:	80 91 cc 01 	lds	r24, 0x01CC
    1296:	90 91 cd 01 	lds	r25, 0x01CD
    129a:	83 30       	cpi	r24, 0x03	; 3
    129c:	91 05       	cpc	r25, r1
    129e:	09 f4       	brne	.+2      	; 0x12a2 <_Z8sendGAVRv+0x32>
    12a0:	45 c1       	rjmp	.+650    	; 0x152c <_Z8sendGAVRv+0x2bc>
    12a2:	84 30       	cpi	r24, 0x04	; 4
    12a4:	91 05       	cpc	r25, r1
    12a6:	48 f4       	brcc	.+18     	; 0x12ba <_Z8sendGAVRv+0x4a>
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	91 05       	cpc	r25, r1
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <_Z8sendGAVRv+0x40>
    12ae:	a6 c0       	rjmp	.+332    	; 0x13fc <_Z8sendGAVRv+0x18c>
    12b0:	82 30       	cpi	r24, 0x02	; 2
    12b2:	91 05       	cpc	r25, r1
    12b4:	08 f0       	brcs	.+2      	; 0x12b8 <_Z8sendGAVRv+0x48>
    12b6:	b0 c0       	rjmp	.+352    	; 0x1418 <_Z8sendGAVRv+0x1a8>
    12b8:	11 c0       	rjmp	.+34     	; 0x12dc <_Z8sendGAVRv+0x6c>
    12ba:	85 30       	cpi	r24, 0x05	; 5
    12bc:	91 05       	cpc	r25, r1
    12be:	09 f4       	brne	.+2      	; 0x12c2 <_Z8sendGAVRv+0x52>
    12c0:	dd c1       	rjmp	.+954    	; 0x167c <_Z8sendGAVRv+0x40c>
    12c2:	85 30       	cpi	r24, 0x05	; 5
    12c4:	91 05       	cpc	r25, r1
    12c6:	08 f4       	brcc	.+2      	; 0x12ca <_Z8sendGAVRv+0x5a>
    12c8:	ce c1       	rjmp	.+924    	; 0x1666 <_Z8sendGAVRv+0x3f6>
    12ca:	86 30       	cpi	r24, 0x06	; 6
    12cc:	91 05       	cpc	r25, r1
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <_Z8sendGAVRv+0x62>
    12d0:	df c1       	rjmp	.+958    	; 0x1690 <_Z8sendGAVRv+0x420>
    12d2:	87 30       	cpi	r24, 0x07	; 7
    12d4:	91 05       	cpc	r25, r1
    12d6:	09 f4       	brne	.+2      	; 0x12da <_Z8sendGAVRv+0x6a>
    12d8:	f4 c1       	rjmp	.+1000   	; 0x16c2 <_Z8sendGAVRv+0x452>
    12da:	fd c1       	rjmp	.+1018   	; 0x16d6 <_Z8sendGAVRv+0x466>
			case 0: {
				prtGAVRINT |= (1 << bnGAVRINT);
    12dc:	85 e2       	ldi	r24, 0x25	; 37
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	25 e2       	ldi	r18, 0x25	; 37
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	f9 01       	movw	r30, r18
    12e6:	20 81       	ld	r18, Z
    12e8:	28 60       	ori	r18, 0x08	; 8
    12ea:	fc 01       	movw	r30, r24
    12ec:	20 83       	st	Z, r18
				for (int i=0; i<2; i++){asm volatile("nop");}
    12ee:	1d 82       	std	Y+5, r1	; 0x05
    12f0:	1c 82       	std	Y+4, r1	; 0x04
    12f2:	06 c0       	rjmp	.+12     	; 0x1300 <_Z8sendGAVRv+0x90>
    12f4:	00 00       	nop
    12f6:	8c 81       	ldd	r24, Y+4	; 0x04
    12f8:	9d 81       	ldd	r25, Y+5	; 0x05
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	9d 83       	std	Y+5, r25	; 0x05
    12fe:	8c 83       	std	Y+4, r24	; 0x04
    1300:	21 e0       	ldi	r18, 0x01	; 1
    1302:	8c 81       	ldd	r24, Y+4	; 0x04
    1304:	9d 81       	ldd	r25, Y+5	; 0x05
    1306:	82 30       	cpi	r24, 0x02	; 2
    1308:	91 05       	cpc	r25, r1
    130a:	0c f0       	brlt	.+2      	; 0x130e <_Z8sendGAVRv+0x9e>
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	22 23       	and	r18, r18
    1310:	89 f7       	brne	.-30     	; 0x12f4 <_Z8sendGAVRv+0x84>
				prtGAVRINT &= ~(1 << bnGAVRINT);
    1312:	85 e2       	ldi	r24, 0x25	; 37
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	25 e2       	ldi	r18, 0x25	; 37
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	f9 01       	movw	r30, r18
    131c:	20 81       	ld	r18, Z
    131e:	27 7f       	andi	r18, 0xF7	; 247
    1320:	fc 01       	movw	r30, r24
    1322:	20 83       	st	Z, r18
				state=1;
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	90 93 cd 01 	sts	0x01CD, r25
    132c:	80 93 cc 01 	sts	0x01CC, r24
				break;
    1330:	db c1       	rjmp	.+950    	; 0x16e8 <_Z8sendGAVRv+0x478>
			}//end case 0
			case 1: {
				while (noCarriage && flagSendingGAVR){
					while (!(UCSR1A & (1 << RXC1)) && flagSendingGAVR);
    1332:	00 00       	nop
    1334:	88 ec       	ldi	r24, 0xC8	; 200
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	fc 01       	movw	r30, r24
    133a:	80 81       	ld	r24, Z
    133c:	88 23       	and	r24, r24
    133e:	34 f0       	brlt	.+12     	; 0x134c <_Z8sendGAVRv+0xdc>
    1340:	80 91 b9 01 	lds	r24, 0x01B9
    1344:	88 23       	and	r24, r24
    1346:	11 f0       	breq	.+4      	; 0x134c <_Z8sendGAVRv+0xdc>
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	01 c0       	rjmp	.+2      	; 0x134e <_Z8sendGAVRv+0xde>
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	88 23       	and	r24, r24
    1350:	89 f7       	brne	.-30     	; 0x1334 <_Z8sendGAVRv+0xc4>
					if (!flagSendingGAVR){state=0; flagTimeout=fTrue; break;}
    1352:	80 91 b9 01 	lds	r24, 0x01B9
    1356:	88 23       	and	r24, r24
    1358:	41 f4       	brne	.+16     	; 0x136a <_Z8sendGAVRv+0xfa>
    135a:	10 92 cd 01 	sts	0x01CD, r1
    135e:	10 92 cc 01 	sts	0x01CC, r1
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	8b 83       	std	Y+3, r24	; 0x03
    1366:	00 00       	nop
							recString[strLoc++] = recChar;
							if (strLoc >= 39){strLoc = 0; noCarriage=fFalse; state=7;}
						}//end if-else
					}//end if-else	
				}//end while
				break;
    1368:	bf c1       	rjmp	.+894    	; 0x16e8 <_Z8sendGAVRv+0x478>
			case 1: {
				while (noCarriage && flagSendingGAVR){
					while (!(UCSR1A & (1 << RXC1)) && flagSendingGAVR);
					if (!flagSendingGAVR){state=0; flagTimeout=fTrue; break;}
					else {
						recChar=UDR1;
    136a:	8e ec       	ldi	r24, 0xCE	; 206
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	fc 01       	movw	r30, r24
    1370:	80 81       	ld	r24, Z
    1372:	88 87       	std	Y+8, r24	; 0x08
						recString[strLoc++]=recChar;
    1374:	9e 01       	movw	r18, r28
    1376:	2d 5c       	subi	r18, 0xCD	; 205
    1378:	3f 4f       	sbci	r19, 0xFF	; 255
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	9a 81       	ldd	r25, Y+2	; 0x02
    137e:	82 0f       	add	r24, r18
    1380:	93 1f       	adc	r25, r19
    1382:	28 85       	ldd	r18, Y+8	; 0x08
    1384:	fc 01       	movw	r30, r24
    1386:	20 83       	st	Z, r18
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	9a 81       	ldd	r25, Y+2	; 0x02
    138c:	01 96       	adiw	r24, 0x01	; 1
    138e:	9a 83       	std	Y+2, r25	; 0x02
    1390:	89 83       	std	Y+1, r24	; 0x01
						if (recChar=='.'){recString[strLoc++]='\0'; state=2;}
    1392:	88 85       	ldd	r24, Y+8	; 0x08
    1394:	8e 32       	cpi	r24, 0x2E	; 46
    1396:	a9 f4       	brne	.+42     	; 0x13c2 <_Z8sendGAVRv+0x152>
    1398:	9e 01       	movw	r18, r28
    139a:	2d 5c       	subi	r18, 0xCD	; 205
    139c:	3f 4f       	sbci	r19, 0xFF	; 255
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	9a 81       	ldd	r25, Y+2	; 0x02
    13a2:	82 0f       	add	r24, r18
    13a4:	93 1f       	adc	r25, r19
    13a6:	fc 01       	movw	r30, r24
    13a8:	10 82       	st	Z, r1
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	9a 81       	ldd	r25, Y+2	; 0x02
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	9a 83       	std	Y+2, r25	; 0x02
    13b2:	89 83       	std	Y+1, r24	; 0x01
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	90 93 cd 01 	sts	0x01CD, r25
    13bc:	80 93 cc 01 	sts	0x01CC, r24
    13c0:	1d c0       	rjmp	.+58     	; 0x13fc <_Z8sendGAVRv+0x18c>
						else {
							recString[strLoc++] = recChar;
    13c2:	9e 01       	movw	r18, r28
    13c4:	2d 5c       	subi	r18, 0xCD	; 205
    13c6:	3f 4f       	sbci	r19, 0xFF	; 255
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	9a 81       	ldd	r25, Y+2	; 0x02
    13cc:	82 0f       	add	r24, r18
    13ce:	93 1f       	adc	r25, r19
    13d0:	28 85       	ldd	r18, Y+8	; 0x08
    13d2:	fc 01       	movw	r30, r24
    13d4:	20 83       	st	Z, r18
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	9a 81       	ldd	r25, Y+2	; 0x02
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	9a 83       	std	Y+2, r25	; 0x02
    13de:	89 83       	std	Y+1, r24	; 0x01
							if (strLoc >= 39){strLoc = 0; noCarriage=fFalse; state=7;}
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	9a 81       	ldd	r25, Y+2	; 0x02
    13e4:	87 32       	cpi	r24, 0x27	; 39
    13e6:	91 05       	cpc	r25, r1
    13e8:	48 f0       	brcs	.+18     	; 0x13fc <_Z8sendGAVRv+0x18c>
    13ea:	1a 82       	std	Y+2, r1	; 0x02
    13ec:	19 82       	std	Y+1, r1	; 0x01
    13ee:	1a 86       	std	Y+10, r1	; 0x0a
    13f0:	87 e0       	ldi	r24, 0x07	; 7
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	90 93 cd 01 	sts	0x01CD, r25
    13f8:	80 93 cc 01 	sts	0x01CC, r24
				prtGAVRINT &= ~(1 << bnGAVRINT);
				state=1;
				break;
			}//end case 0
			case 1: {
				while (noCarriage && flagSendingGAVR){
    13fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    13fe:	88 23       	and	r24, r24
    1400:	31 f0       	breq	.+12     	; 0x140e <_Z8sendGAVRv+0x19e>
    1402:	80 91 b9 01 	lds	r24, 0x01B9
    1406:	88 23       	and	r24, r24
    1408:	11 f0       	breq	.+4      	; 0x140e <_Z8sendGAVRv+0x19e>
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	01 c0       	rjmp	.+2      	; 0x1410 <_Z8sendGAVRv+0x1a0>
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	88 23       	and	r24, r24
    1412:	09 f0       	breq	.+2      	; 0x1416 <_Z8sendGAVRv+0x1a6>
    1414:	8e cf       	rjmp	.-228    	; 0x1332 <_Z8sendGAVRv+0xc2>
							recString[strLoc++] = recChar;
							if (strLoc >= 39){strLoc = 0; noCarriage=fFalse; state=7;}
						}//end if-else
					}//end if-else	
				}//end while
				break;
    1416:	68 c1       	rjmp	.+720    	; 0x16e8 <_Z8sendGAVRv+0x478>
				}//end case 1
			case 2: {
				if (!strcmp(recString,"ACKW.")){state=3;}
    1418:	ce 01       	movw	r24, r28
    141a:	c3 96       	adiw	r24, 0x33	; 51
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	31 e0       	ldi	r19, 0x01	; 1
    1420:	b9 01       	movw	r22, r18
    1422:	0e 94 42 15 	call	0x2a84	; 0x2a84 <strcmp>
    1426:	00 97       	sbiw	r24, 0x00	; 0
    1428:	39 f4       	brne	.+14     	; 0x1438 <_Z8sendGAVRv+0x1c8>
    142a:	83 e0       	ldi	r24, 0x03	; 3
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	90 93 cd 01 	sts	0x01CD, r25
    1432:	80 93 cc 01 	sts	0x01CC, r24
				else if (!strcmp(recString,"ACKBAD")){state=6;}
				//send string case.
				else if (updatingGAVR && !strcmp(recString,sentString)){state=5;}
				else if (updatingGAVR && strcmp(recString,sentString)){state=7;}
				else{state=7;} //invalid ack
				break;
    1436:	58 c1       	rjmp	.+688    	; 0x16e8 <_Z8sendGAVRv+0x478>
				}//end while
				break;
				}//end case 1
			case 2: {
				if (!strcmp(recString,"ACKW.")){state=3;}
				else if (!strcmp(recString,"ACKGD")){state=4;}
    1438:	ce 01       	movw	r24, r28
    143a:	c3 96       	adiw	r24, 0x33	; 51
    143c:	26 e0       	ldi	r18, 0x06	; 6
    143e:	31 e0       	ldi	r19, 0x01	; 1
    1440:	b9 01       	movw	r22, r18
    1442:	0e 94 42 15 	call	0x2a84	; 0x2a84 <strcmp>
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	39 f4       	brne	.+14     	; 0x1458 <_Z8sendGAVRv+0x1e8>
    144a:	84 e0       	ldi	r24, 0x04	; 4
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	90 93 cd 01 	sts	0x01CD, r25
    1452:	80 93 cc 01 	sts	0x01CC, r24
				else if (!strcmp(recString,"ACKBAD")){state=6;}
				//send string case.
				else if (updatingGAVR && !strcmp(recString,sentString)){state=5;}
				else if (updatingGAVR && strcmp(recString,sentString)){state=7;}
				else{state=7;} //invalid ack
				break;
    1456:	48 c1       	rjmp	.+656    	; 0x16e8 <_Z8sendGAVRv+0x478>
				break;
				}//end case 1
			case 2: {
				if (!strcmp(recString,"ACKW.")){state=3;}
				else if (!strcmp(recString,"ACKGD")){state=4;}
				else if (!strcmp(recString,"ACKGT")){state=4;}
    1458:	ce 01       	movw	r24, r28
    145a:	c3 96       	adiw	r24, 0x33	; 51
    145c:	2c e0       	ldi	r18, 0x0C	; 12
    145e:	31 e0       	ldi	r19, 0x01	; 1
    1460:	b9 01       	movw	r22, r18
    1462:	0e 94 42 15 	call	0x2a84	; 0x2a84 <strcmp>
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	39 f4       	brne	.+14     	; 0x1478 <_Z8sendGAVRv+0x208>
    146a:	84 e0       	ldi	r24, 0x04	; 4
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	90 93 cd 01 	sts	0x01CD, r25
    1472:	80 93 cc 01 	sts	0x01CC, r24
				else if (!strcmp(recString,"ACKBAD")){state=6;}
				//send string case.
				else if (updatingGAVR && !strcmp(recString,sentString)){state=5;}
				else if (updatingGAVR && strcmp(recString,sentString)){state=7;}
				else{state=7;} //invalid ack
				break;
    1476:	38 c1       	rjmp	.+624    	; 0x16e8 <_Z8sendGAVRv+0x478>
				}//end case 1
			case 2: {
				if (!strcmp(recString,"ACKW.")){state=3;}
				else if (!strcmp(recString,"ACKGD")){state=4;}
				else if (!strcmp(recString,"ACKGT")){state=4;}
				else if (!strcmp(recString,"ACKGB")){state=4;}
    1478:	ce 01       	movw	r24, r28
    147a:	c3 96       	adiw	r24, 0x33	; 51
    147c:	22 e1       	ldi	r18, 0x12	; 18
    147e:	31 e0       	ldi	r19, 0x01	; 1
    1480:	b9 01       	movw	r22, r18
    1482:	0e 94 42 15 	call	0x2a84	; 0x2a84 <strcmp>
    1486:	00 97       	sbiw	r24, 0x00	; 0
    1488:	39 f4       	brne	.+14     	; 0x1498 <_Z8sendGAVRv+0x228>
    148a:	84 e0       	ldi	r24, 0x04	; 4
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	90 93 cd 01 	sts	0x01CD, r25
    1492:	80 93 cc 01 	sts	0x01CC, r24
				else if (!strcmp(recString,"ACKBAD")){state=6;}
				//send string case.
				else if (updatingGAVR && !strcmp(recString,sentString)){state=5;}
				else if (updatingGAVR && strcmp(recString,sentString)){state=7;}
				else{state=7;} //invalid ack
				break;
    1496:	28 c1       	rjmp	.+592    	; 0x16e8 <_Z8sendGAVRv+0x478>
			case 2: {
				if (!strcmp(recString,"ACKW.")){state=3;}
				else if (!strcmp(recString,"ACKGD")){state=4;}
				else if (!strcmp(recString,"ACKGT")){state=4;}
				else if (!strcmp(recString,"ACKGB")){state=4;}
				else if (!strcmp(recString,"ACKBAD")){state=6;}
    1498:	ce 01       	movw	r24, r28
    149a:	c3 96       	adiw	r24, 0x33	; 51
    149c:	28 e1       	ldi	r18, 0x18	; 24
    149e:	31 e0       	ldi	r19, 0x01	; 1
    14a0:	b9 01       	movw	r22, r18
    14a2:	0e 94 42 15 	call	0x2a84	; 0x2a84 <strcmp>
    14a6:	00 97       	sbiw	r24, 0x00	; 0
    14a8:	39 f4       	brne	.+14     	; 0x14b8 <_Z8sendGAVRv+0x248>
    14aa:	86 e0       	ldi	r24, 0x06	; 6
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	90 93 cd 01 	sts	0x01CD, r25
    14b2:	80 93 cc 01 	sts	0x01CC, r24
				//send string case.
				else if (updatingGAVR && !strcmp(recString,sentString)){state=5;}
				else if (updatingGAVR && strcmp(recString,sentString)){state=7;}
				else{state=7;} //invalid ack
				break;
    14b6:	18 c1       	rjmp	.+560    	; 0x16e8 <_Z8sendGAVRv+0x478>
				else if (!strcmp(recString,"ACKGD")){state=4;}
				else if (!strcmp(recString,"ACKGT")){state=4;}
				else if (!strcmp(recString,"ACKGB")){state=4;}
				else if (!strcmp(recString,"ACKBAD")){state=6;}
				//send string case.
				else if (updatingGAVR && !strcmp(recString,sentString)){state=5;}
    14b8:	80 91 b8 01 	lds	r24, 0x01B8
    14bc:	88 23       	and	r24, r24
    14be:	21 f4       	brne	.+8      	; 0x14c8 <_Z8sendGAVRv+0x258>
    14c0:	80 91 b7 01 	lds	r24, 0x01B7
    14c4:	88 23       	and	r24, r24
    14c6:	89 f0       	breq	.+34     	; 0x14ea <_Z8sendGAVRv+0x27a>
    14c8:	ce 01       	movw	r24, r28
    14ca:	c3 96       	adiw	r24, 0x33	; 51
    14cc:	9e 01       	movw	r18, r28
    14ce:	25 5f       	subi	r18, 0xF5	; 245
    14d0:	3f 4f       	sbci	r19, 0xFF	; 255
    14d2:	b9 01       	movw	r22, r18
    14d4:	0e 94 42 15 	call	0x2a84	; 0x2a84 <strcmp>
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	39 f4       	brne	.+14     	; 0x14ea <_Z8sendGAVRv+0x27a>
    14dc:	85 e0       	ldi	r24, 0x05	; 5
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	90 93 cd 01 	sts	0x01CD, r25
    14e4:	80 93 cc 01 	sts	0x01CC, r24
    14e8:	20 c0       	rjmp	.+64     	; 0x152a <_Z8sendGAVRv+0x2ba>
				else if (updatingGAVR && strcmp(recString,sentString)){state=7;}
    14ea:	80 91 b8 01 	lds	r24, 0x01B8
    14ee:	88 23       	and	r24, r24
    14f0:	21 f4       	brne	.+8      	; 0x14fa <_Z8sendGAVRv+0x28a>
    14f2:	80 91 b7 01 	lds	r24, 0x01B7
    14f6:	88 23       	and	r24, r24
    14f8:	89 f0       	breq	.+34     	; 0x151c <_Z8sendGAVRv+0x2ac>
    14fa:	ce 01       	movw	r24, r28
    14fc:	c3 96       	adiw	r24, 0x33	; 51
    14fe:	9e 01       	movw	r18, r28
    1500:	25 5f       	subi	r18, 0xF5	; 245
    1502:	3f 4f       	sbci	r19, 0xFF	; 255
    1504:	b9 01       	movw	r22, r18
    1506:	0e 94 42 15 	call	0x2a84	; 0x2a84 <strcmp>
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	39 f0       	breq	.+14     	; 0x151c <_Z8sendGAVRv+0x2ac>
    150e:	87 e0       	ldi	r24, 0x07	; 7
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	90 93 cd 01 	sts	0x01CD, r25
    1516:	80 93 cc 01 	sts	0x01CC, r24
    151a:	07 c0       	rjmp	.+14     	; 0x152a <_Z8sendGAVRv+0x2ba>
				else{state=7;} //invalid ack
    151c:	87 e0       	ldi	r24, 0x07	; 7
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	90 93 cd 01 	sts	0x01CD, r25
    1524:	80 93 cc 01 	sts	0x01CC, r24
				break;
    1528:	df c0       	rjmp	.+446    	; 0x16e8 <_Z8sendGAVRv+0x478>
    152a:	de c0       	rjmp	.+444    	; 0x16e8 <_Z8sendGAVRv+0x478>
				}//end case 2
			case 3:{
				if (flagUserDate&&!flagUserTime){
    152c:	80 91 ba 01 	lds	r24, 0x01BA
    1530:	88 23       	and	r24, r24
    1532:	49 f0       	breq	.+18     	; 0x1546 <_Z8sendGAVRv+0x2d6>
    1534:	80 91 bb 01 	lds	r24, 0x01BB
    1538:	88 23       	and	r24, r24
    153a:	29 f4       	brne	.+10     	; 0x1546 <_Z8sendGAVRv+0x2d6>
					PrintGAVR("SYNGD.");
    153c:	8f e1       	ldi	r24, 0x1F	; 31
    153e:	91 e0       	ldi	r25, 0x01	; 1
    1540:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
    1544:	19 c0       	rjmp	.+50     	; 0x1578 <_Z8sendGAVRv+0x308>
				} else if (!flagUserDate&&flagUserTime){
    1546:	80 91 ba 01 	lds	r24, 0x01BA
    154a:	88 23       	and	r24, r24
    154c:	49 f4       	brne	.+18     	; 0x1560 <_Z8sendGAVRv+0x2f0>
    154e:	80 91 bb 01 	lds	r24, 0x01BB
    1552:	88 23       	and	r24, r24
    1554:	29 f0       	breq	.+10     	; 0x1560 <_Z8sendGAVRv+0x2f0>
					PrintGAVR("SYNGT.");
    1556:	86 e2       	ldi	r24, 0x26	; 38
    1558:	91 e0       	ldi	r25, 0x01	; 1
    155a:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
    155e:	0c c0       	rjmp	.+24     	; 0x1578 <_Z8sendGAVRv+0x308>
				} else if (flagUserTime&&flagUserDate){
    1560:	80 91 bb 01 	lds	r24, 0x01BB
    1564:	88 23       	and	r24, r24
    1566:	41 f0       	breq	.+16     	; 0x1578 <_Z8sendGAVRv+0x308>
    1568:	80 91 ba 01 	lds	r24, 0x01BA
    156c:	88 23       	and	r24, r24
    156e:	21 f0       	breq	.+8      	; 0x1578 <_Z8sendGAVRv+0x308>
					PrintGAVR("SYNGB.");
    1570:	8d e2       	ldi	r24, 0x2D	; 45
    1572:	91 e0       	ldi	r25, 0x01	; 1
    1574:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
				} else;
				
				//If we are updating the gavr, send the time and date together regardless. preface with SYN
				if (updatingGAVR && !(flagUserDate || flagUserTime)){
    1578:	80 91 b8 01 	lds	r24, 0x01B8
    157c:	88 23       	and	r24, r24
    157e:	29 f4       	brne	.+10     	; 0x158a <_Z8sendGAVRv+0x31a>
    1580:	80 91 b7 01 	lds	r24, 0x01B7
    1584:	88 23       	and	r24, r24
    1586:	09 f4       	brne	.+2      	; 0x158a <_Z8sendGAVRv+0x31a>
    1588:	47 c0       	rjmp	.+142    	; 0x1618 <_Z8sendGAVRv+0x3a8>
    158a:	80 91 ba 01 	lds	r24, 0x01BA
    158e:	88 23       	and	r24, r24
    1590:	09 f0       	breq	.+2      	; 0x1594 <_Z8sendGAVRv+0x324>
    1592:	42 c0       	rjmp	.+132    	; 0x1618 <_Z8sendGAVRv+0x3a8>
    1594:	80 91 bb 01 	lds	r24, 0x01BB
    1598:	88 23       	and	r24, r24
    159a:	f1 f5       	brne	.+124    	; 0x1618 <_Z8sendGAVRv+0x3a8>
					strcpy(sentString,"SYN");
    159c:	9e 01       	movw	r18, r28
    159e:	25 5f       	subi	r18, 0xF5	; 245
    15a0:	3f 4f       	sbci	r19, 0xFF	; 255
    15a2:	83 e5       	ldi	r24, 0x53	; 83
    15a4:	99 e5       	ldi	r25, 0x59	; 89
    15a6:	ae e4       	ldi	r26, 0x4E	; 78
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	f9 01       	movw	r30, r18
    15ac:	80 83       	st	Z, r24
    15ae:	91 83       	std	Z+1, r25	; 0x01
    15b0:	a2 83       	std	Z+2, r26	; 0x02
    15b2:	b3 83       	std	Z+3, r27	; 0x03
					strcat(sentString,currentTime.getTime());
    15b4:	8c e8       	ldi	r24, 0x8C	; 140
    15b6:	91 e0       	ldi	r25, 0x01	; 1
    15b8:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN6myTime7getTimeEv>
    15bc:	9c 01       	movw	r18, r24
    15be:	ce 01       	movw	r24, r28
    15c0:	0b 96       	adiw	r24, 0x0b	; 11
    15c2:	b9 01       	movw	r22, r18
    15c4:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <strcat>
					strcat(sentString,currentTime.getDate());
    15c8:	8c e8       	ldi	r24, 0x8C	; 140
    15ca:	91 e0       	ldi	r25, 0x01	; 1
    15cc:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN6myDate7getDateEv>
    15d0:	9c 01       	movw	r18, r24
    15d2:	ce 01       	movw	r24, r28
    15d4:	0b 96       	adiw	r24, 0x0b	; 11
    15d6:	b9 01       	movw	r22, r18
    15d8:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <strcat>
					strcat(sentString,".\0");
    15dc:	ce 01       	movw	r24, r28
    15de:	0b 96       	adiw	r24, 0x0b	; 11
    15e0:	9c 01       	movw	r18, r24
    15e2:	f9 01       	movw	r30, r18
    15e4:	01 90       	ld	r0, Z+
    15e6:	00 20       	and	r0, r0
    15e8:	e9 f7       	brne	.-6      	; 0x15e4 <_Z8sendGAVRv+0x374>
    15ea:	cf 01       	movw	r24, r30
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	82 1b       	sub	r24, r18
    15f0:	93 0b       	sbc	r25, r19
    15f2:	9e 01       	movw	r18, r28
    15f4:	25 5f       	subi	r18, 0xF5	; 245
    15f6:	3f 4f       	sbci	r19, 0xFF	; 255
    15f8:	82 0f       	add	r24, r18
    15fa:	93 1f       	adc	r25, r19
    15fc:	2e e2       	ldi	r18, 0x2E	; 46
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	fc 01       	movw	r30, r24
    1602:	31 83       	std	Z+1, r19	; 0x01
    1604:	20 83       	st	Z, r18
					PrintGAVR("SYN");
    1606:	84 e3       	ldi	r24, 0x34	; 52
    1608:	91 e0       	ldi	r25, 0x01	; 1
    160a:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
					printTimeDate(fFalse,fTrue,fTrue);			//date is terminated by a . so don't need to send character
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	61 e0       	ldi	r22, 0x01	; 1
    1612:	41 e0       	ldi	r20, 0x01	; 1
    1614:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_Z13printTimeDatehhh>
				}				
				for (int i=0; i<strLoc; i++){
    1618:	1f 82       	std	Y+7, r1	; 0x07
    161a:	1e 82       	std	Y+6, r1	; 0x06
    161c:	0e c0       	rjmp	.+28     	; 0x163a <_Z8sendGAVRv+0x3ca>
					recString[i]=NULL;
    161e:	9e 01       	movw	r18, r28
    1620:	2d 5c       	subi	r18, 0xCD	; 205
    1622:	3f 4f       	sbci	r19, 0xFF	; 255
    1624:	8e 81       	ldd	r24, Y+6	; 0x06
    1626:	9f 81       	ldd	r25, Y+7	; 0x07
    1628:	82 0f       	add	r24, r18
    162a:	93 1f       	adc	r25, r19
    162c:	fc 01       	movw	r30, r24
    162e:	10 82       	st	Z, r1
					strcat(sentString,currentTime.getDate());
					strcat(sentString,".\0");
					PrintGAVR("SYN");
					printTimeDate(fFalse,fTrue,fTrue);			//date is terminated by a . so don't need to send character
				}				
				for (int i=0; i<strLoc; i++){
    1630:	8e 81       	ldd	r24, Y+6	; 0x06
    1632:	9f 81       	ldd	r25, Y+7	; 0x07
    1634:	01 96       	adiw	r24, 0x01	; 1
    1636:	9f 83       	std	Y+7, r25	; 0x07
    1638:	8e 83       	std	Y+6, r24	; 0x06
    163a:	2e 81       	ldd	r18, Y+6	; 0x06
    163c:	3f 81       	ldd	r19, Y+7	; 0x07
    163e:	41 e0       	ldi	r20, 0x01	; 1
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	9a 81       	ldd	r25, Y+2	; 0x02
    1644:	28 17       	cp	r18, r24
    1646:	39 07       	cpc	r19, r25
    1648:	08 f0       	brcs	.+2      	; 0x164c <_Z8sendGAVRv+0x3dc>
    164a:	40 e0       	ldi	r20, 0x00	; 0
    164c:	44 23       	and	r20, r20
    164e:	39 f7       	brne	.-50     	; 0x161e <_Z8sendGAVRv+0x3ae>
					recString[i]=NULL;
				}
				noCarriage=fTrue;
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	8a 87       	std	Y+10, r24	; 0x0a
				strLoc=0;
    1654:	1a 82       	std	Y+2, r1	; 0x02
    1656:	19 82       	std	Y+1, r1	; 0x01
				state=1;
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	90 93 cd 01 	sts	0x01CD, r25
    1660:	80 93 cc 01 	sts	0x01CC, r24
				break;
    1664:	41 c0       	rjmp	.+130    	; 0x16e8 <_Z8sendGAVRv+0x478>
				}//end case 3
			case 4:{
				//jSuccessful communication with just flags
				PrintGAVR("SYNDONE.");	//end the communication
    1666:	88 e3       	ldi	r24, 0x38	; 56
    1668:	91 e0       	ldi	r25, 0x01	; 1
    166a:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
				state=5;
    166e:	85 e0       	ldi	r24, 0x05	; 5
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	90 93 cd 01 	sts	0x01CD, r25
    1676:	80 93 cc 01 	sts	0x01CC, r24
				break;				
    167a:	36 c0       	rjmp	.+108    	; 0x16e8 <_Z8sendGAVRv+0x478>
				}//end case 4	
			case 5:{
				//Successful communications overall
				flagSendingGAVR=fFalse;
    167c:	10 92 b9 01 	sts	0x01B9, r1
				flagWaitingToSendGAVR=fFalse;
    1680:	10 92 bd 01 	sts	0x01BD, r1
				flagTimeout=fFalse;
    1684:	1b 82       	std	Y+3, r1	; 0x03
				state=0;
    1686:	10 92 cd 01 	sts	0x01CD, r1
    168a:	10 92 cc 01 	sts	0x01CC, r1
				break;
    168e:	2c c0       	rjmp	.+88     	; 0x16e8 <_Z8sendGAVRv+0x478>
				}//end case 5
			case 6:{
				//ACKBAD. Check the date and time to see if its okay.
				BOOL dateOK = currentTime.checkValidity();
    1690:	8c e8       	ldi	r24, 0x8C	; 140
    1692:	91 e0       	ldi	r25, 0x01	; 1
    1694:	0e 94 c1 06 	call	0xd82	; 0xd82 <_ZN6myTime13checkValidityEv>
    1698:	89 87       	std	Y+9, r24	; 0x09
				if (dateOK){state=7;}
    169a:	89 85       	ldd	r24, Y+9	; 0x09
    169c:	88 23       	and	r24, r24
    169e:	39 f0       	breq	.+14     	; 0x16ae <_Z8sendGAVRv+0x43e>
    16a0:	87 e0       	ldi	r24, 0x07	; 7
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	90 93 cd 01 	sts	0x01CD, r25
    16a8:	80 93 cc 01 	sts	0x01CC, r24
				else {state=0;flagSendingGAVR=fFalse; flagInvalidDateTime=fTrue;}
				break;
    16ac:	1d c0       	rjmp	.+58     	; 0x16e8 <_Z8sendGAVRv+0x478>
				}//end case 5
			case 6:{
				//ACKBAD. Check the date and time to see if its okay.
				BOOL dateOK = currentTime.checkValidity();
				if (dateOK){state=7;}
				else {state=0;flagSendingGAVR=fFalse; flagInvalidDateTime=fTrue;}
    16ae:	10 92 cd 01 	sts	0x01CD, r1
    16b2:	10 92 cc 01 	sts	0x01CC, r1
    16b6:	10 92 b9 01 	sts	0x01B9, r1
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	80 93 bc 01 	sts	0x01BC, r24
				break;
    16c0:	13 c0       	rjmp	.+38     	; 0x16e8 <_Z8sendGAVRv+0x478>
				}//end case 6
			case 7:{
				//Got the wrong ACK back, or invalid ACK. Wait for next cycle then resend. Keep all the flags the same
				flagWaitingToSendGAVR=fTrue;
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	80 93 bd 01 	sts	0x01BD, r24
				flagSendingGAVR=fFalse;
    16c8:	10 92 b9 01 	sts	0x01B9, r1
				state=0;
    16cc:	10 92 cd 01 	sts	0x01CD, r1
    16d0:	10 92 cc 01 	sts	0x01CC, r1
				break;
    16d4:	09 c0       	rjmp	.+18     	; 0x16e8 <_Z8sendGAVRv+0x478>
				}//end case 7
			default:{state=0; flagSendingGAVR=fFalse; noCarriage=fFalse; flagTimeout=fFalse;break;}
    16d6:	10 92 cd 01 	sts	0x01CD, r1
    16da:	10 92 cc 01 	sts	0x01CC, r1
    16de:	10 92 b9 01 	sts	0x01B9, r1
    16e2:	1a 86       	std	Y+10, r1	; 0x0a
    16e4:	1b 82       	std	Y+3, r1	; 0x03
    16e6:	00 00       	nop
	
	//Going to be a global
	BOOL flagTimeout=fFalse;
	
	//Transmission protocol
	while (flagSendingGAVR){
    16e8:	90 91 b9 01 	lds	r25, 0x01B9
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	99 23       	and	r25, r25
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <_Z8sendGAVRv+0x484>
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	88 23       	and	r24, r24
    16f6:	09 f0       	breq	.+2      	; 0x16fa <_Z8sendGAVRv+0x48a>
    16f8:	cc cd       	rjmp	.-1128   	; 0x1292 <_Z8sendGAVRv+0x22>
				break;
				}//end case 7
			default:{state=0; flagSendingGAVR=fFalse; noCarriage=fFalse; flagTimeout=fFalse;break;}
		}//end switch
	}//end while
	if (noCarriage || flagTimeout){
    16fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    16fc:	88 23       	and	r24, r24
    16fe:	19 f4       	brne	.+6      	; 0x1706 <_Z8sendGAVRv+0x496>
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	88 23       	and	r24, r24
    1704:	11 f0       	breq	.+4      	; 0x170a <_Z8sendGAVRv+0x49a>
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	01 c0       	rjmp	.+2      	; 0x170c <_Z8sendGAVRv+0x49c>
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	88 23       	and	r24, r24
    170e:	19 f0       	breq	.+6      	; 0x1716 <_Z8sendGAVRv+0x4a6>
		flagWaitingToSendGAVR=fTrue;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	80 93 bd 01 	sts	0x01BD, r24
	}
	//If we aren't waiting for the next round, don't reset the flags.
	if (!flagWaitingToSendGAVR){
    1716:	80 91 bd 01 	lds	r24, 0x01BD
    171a:	88 23       	and	r24, r24
    171c:	41 f4       	brne	.+16     	; 0x172e <_Z8sendGAVRv+0x4be>
		flagUserDate=fFalse;
    171e:	10 92 ba 01 	sts	0x01BA, r1
		flagUserTime=fFalse;
    1722:	10 92 bb 01 	sts	0x01BB, r1
		flagUpdateGAVRDate=fFalse;
    1726:	10 92 b8 01 	sts	0x01B8, r1
		flagUpdateGAVRTime=fFalse;		
    172a:	10 92 b7 01 	sts	0x01B7, r1
	}
	
}//end function 	
    172e:	c6 5a       	subi	r28, 0xA6	; 166
    1730:	df 4f       	sbci	r29, 0xFF	; 255
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	08 95       	ret

00001742 <_Z11ReceiveBonev>:
	
/*************************************************************************************************************/
void ReceiveBone(){
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	a7 97       	sbiw	r28, 0x27	; 39
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	de bf       	out	0x3e, r29	; 62
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	cd bf       	out	0x3d, r28	; 61
	volatile static unsigned int state=0;
	char recChar, recString[20];
	volatile unsigned int strLoc=0;
    1756:	19 8e       	std	Y+25, r1	; 0x19
    1758:	18 8e       	std	Y+24, r1	; 0x18
	BOOL noCarriage=fTrue;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	89 83       	std	Y+1, r24	; 0x01
	
	while (flagReceivingBone){
    175e:	17 c2       	rjmp	.+1070   	; 0x1b8e <_Z11ReceiveBonev+0x44c>
			/* State 4: ACKBAD, string it sent was not valid. Reply and exit loop.															*/
			/* State 5: ACKERROR, invalid string or overflow. Say error then exit.															*/
			/* State 6: Graceful exit. Exit from a command like adc or temp.																*/
			/********************************************************************************************************************************/
			
			switch(state){
    1760:	80 91 ca 01 	lds	r24, 0x01CA
    1764:	90 91 cb 01 	lds	r25, 0x01CB
    1768:	83 30       	cpi	r24, 0x03	; 3
    176a:	91 05       	cpc	r25, r1
    176c:	09 f4       	brne	.+2      	; 0x1770 <_Z11ReceiveBonev+0x2e>
    176e:	db c1       	rjmp	.+950    	; 0x1b26 <_Z11ReceiveBonev+0x3e4>
    1770:	84 30       	cpi	r24, 0x04	; 4
    1772:	91 05       	cpc	r25, r1
    1774:	48 f4       	brcc	.+18     	; 0x1788 <_Z11ReceiveBonev+0x46>
    1776:	81 30       	cpi	r24, 0x01	; 1
    1778:	91 05       	cpc	r25, r1
    177a:	09 f4       	brne	.+2      	; 0x177e <_Z11ReceiveBonev+0x3c>
    177c:	8f c0       	rjmp	.+286    	; 0x189c <_Z11ReceiveBonev+0x15a>
    177e:	82 30       	cpi	r24, 0x02	; 2
    1780:	91 05       	cpc	r25, r1
    1782:	08 f0       	brcs	.+2      	; 0x1786 <_Z11ReceiveBonev+0x44>
    1784:	9b c0       	rjmp	.+310    	; 0x18bc <_Z11ReceiveBonev+0x17a>
    1786:	0d c0       	rjmp	.+26     	; 0x17a2 <_Z11ReceiveBonev+0x60>
    1788:	85 30       	cpi	r24, 0x05	; 5
    178a:	91 05       	cpc	r25, r1
    178c:	09 f4       	brne	.+2      	; 0x1790 <_Z11ReceiveBonev+0x4e>
    178e:	e5 c1       	rjmp	.+970    	; 0x1b5a <_Z11ReceiveBonev+0x418>
    1790:	85 30       	cpi	r24, 0x05	; 5
    1792:	91 05       	cpc	r25, r1
    1794:	08 f4       	brcc	.+2      	; 0x1798 <_Z11ReceiveBonev+0x56>
    1796:	d6 c1       	rjmp	.+940    	; 0x1b44 <_Z11ReceiveBonev+0x402>
    1798:	86 30       	cpi	r24, 0x06	; 6
    179a:	91 05       	cpc	r25, r1
    179c:	09 f4       	brne	.+2      	; 0x17a0 <_Z11ReceiveBonev+0x5e>
    179e:	e8 c1       	rjmp	.+976    	; 0x1b70 <_Z11ReceiveBonev+0x42e>
    17a0:	ee c1       	rjmp	.+988    	; 0x1b7e <_Z11ReceiveBonev+0x43c>
				case 0:{
					strLoc=0;
    17a2:	19 8e       	std	Y+25, r1	; 0x19
    17a4:	18 8e       	std	Y+24, r1	; 0x18
					recChar = UDR0;
    17a6:	86 ec       	ldi	r24, 0xC6	; 198
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	fc 01       	movw	r30, r24
    17ac:	80 81       	ld	r24, Z
    17ae:	8a 83       	std	Y+2, r24	; 0x02
					if (recChar=='.'){
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	8e 32       	cpi	r24, 0x2E	; 46
    17b4:	39 f4       	brne	.+14     	; 0x17c4 <_Z11ReceiveBonev+0x82>
						state=5;
    17b6:	85 e0       	ldi	r24, 0x05	; 5
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	90 93 cb 01 	sts	0x01CB, r25
    17be:	80 93 ca 01 	sts	0x01CA, r24
					} else  {recString[strLoc++]=recChar; state=1;}	
					break;				
    17c2:	e5 c1       	rjmp	.+970    	; 0x1b8e <_Z11ReceiveBonev+0x44c>
				case 0:{
					strLoc=0;
					recChar = UDR0;
					if (recChar=='.'){
						state=5;
					} else  {recString[strLoc++]=recChar; state=1;}	
    17c4:	88 8d       	ldd	r24, Y+24	; 0x18
    17c6:	99 8d       	ldd	r25, Y+25	; 0x19
    17c8:	9e 01       	movw	r18, r28
    17ca:	2c 5f       	subi	r18, 0xFC	; 252
    17cc:	3f 4f       	sbci	r19, 0xFF	; 255
    17ce:	28 0f       	add	r18, r24
    17d0:	39 1f       	adc	r19, r25
    17d2:	4a 81       	ldd	r20, Y+2	; 0x02
    17d4:	f9 01       	movw	r30, r18
    17d6:	40 83       	st	Z, r20
    17d8:	01 96       	adiw	r24, 0x01	; 1
    17da:	99 8f       	std	Y+25, r25	; 0x19
    17dc:	88 8f       	std	Y+24, r24	; 0x18
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	90 93 cb 01 	sts	0x01CB, r25
    17e6:	80 93 ca 01 	sts	0x01CA, r24
					break;				
    17ea:	d1 c1       	rjmp	.+930    	; 0x1b8e <_Z11ReceiveBonev+0x44c>
					}//end case 0
				case 1:{
					while (noCarriage && flagReceivingBone){
						while (!(UCSR1A & (1 << RXC0)) && flagReceivingBone);
    17ec:	00 00       	nop
    17ee:	88 ec       	ldi	r24, 0xC8	; 200
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	fc 01       	movw	r30, r24
    17f4:	80 81       	ld	r24, Z
    17f6:	88 23       	and	r24, r24
    17f8:	34 f0       	brlt	.+12     	; 0x1806 <_Z11ReceiveBonev+0xc4>
    17fa:	80 91 b5 01 	lds	r24, 0x01B5
    17fe:	88 23       	and	r24, r24
    1800:	11 f0       	breq	.+4      	; 0x1806 <_Z11ReceiveBonev+0xc4>
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	01 c0       	rjmp	.+2      	; 0x1808 <_Z11ReceiveBonev+0xc6>
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	88 23       	and	r24, r24
    180a:	89 f7       	brne	.-30     	; 0x17ee <_Z11ReceiveBonev+0xac>
						if (!flagReceivingBone){break;}
    180c:	80 91 b5 01 	lds	r24, 0x01B5
    1810:	88 23       	and	r24, r24
    1812:	09 f4       	brne	.+2      	; 0x1816 <_Z11ReceiveBonev+0xd4>
    1814:	51 c0       	rjmp	.+162    	; 0x18b8 <_Z11ReceiveBonev+0x176>
						recChar=UDR0;
    1816:	86 ec       	ldi	r24, 0xC6	; 198
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	fc 01       	movw	r30, r24
    181c:	80 81       	ld	r24, Z
    181e:	8a 83       	std	Y+2, r24	; 0x02
						recString[strLoc++]=recChar;
    1820:	88 8d       	ldd	r24, Y+24	; 0x18
    1822:	99 8d       	ldd	r25, Y+25	; 0x19
    1824:	9e 01       	movw	r18, r28
    1826:	2c 5f       	subi	r18, 0xFC	; 252
    1828:	3f 4f       	sbci	r19, 0xFF	; 255
    182a:	28 0f       	add	r18, r24
    182c:	39 1f       	adc	r19, r25
    182e:	4a 81       	ldd	r20, Y+2	; 0x02
    1830:	f9 01       	movw	r30, r18
    1832:	40 83       	st	Z, r20
    1834:	01 96       	adiw	r24, 0x01	; 1
    1836:	99 8f       	std	Y+25, r25	; 0x19
    1838:	88 8f       	std	Y+24, r24	; 0x18
						if (recChar == '.'){recString[strLoc]='\0'; noCarriage=fFalse; state=2;}
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	8e 32       	cpi	r24, 0x2E	; 46
    183e:	89 f4       	brne	.+34     	; 0x1862 <_Z11ReceiveBonev+0x120>
    1840:	88 8d       	ldd	r24, Y+24	; 0x18
    1842:	99 8d       	ldd	r25, Y+25	; 0x19
    1844:	9e 01       	movw	r18, r28
    1846:	2c 5f       	subi	r18, 0xFC	; 252
    1848:	3f 4f       	sbci	r19, 0xFF	; 255
    184a:	82 0f       	add	r24, r18
    184c:	93 1f       	adc	r25, r19
    184e:	fc 01       	movw	r30, r24
    1850:	10 82       	st	Z, r1
    1852:	19 82       	std	Y+1, r1	; 0x01
    1854:	82 e0       	ldi	r24, 0x02	; 2
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	90 93 cb 01 	sts	0x01CB, r25
    185c:	80 93 ca 01 	sts	0x01CA, r24
    1860:	1d c0       	rjmp	.+58     	; 0x189c <_Z11ReceiveBonev+0x15a>
						else{
							recString[strLoc++]=recChar;
    1862:	88 8d       	ldd	r24, Y+24	; 0x18
    1864:	99 8d       	ldd	r25, Y+25	; 0x19
    1866:	9e 01       	movw	r18, r28
    1868:	2c 5f       	subi	r18, 0xFC	; 252
    186a:	3f 4f       	sbci	r19, 0xFF	; 255
    186c:	28 0f       	add	r18, r24
    186e:	39 1f       	adc	r19, r25
    1870:	4a 81       	ldd	r20, Y+2	; 0x02
    1872:	f9 01       	movw	r30, r18
    1874:	40 83       	st	Z, r20
    1876:	01 96       	adiw	r24, 0x01	; 1
    1878:	99 8f       	std	Y+25, r25	; 0x19
    187a:	88 8f       	std	Y+24, r24	; 0x18
							if (strLoc >= 19){state=5;noCarriage=fFalse;}
    187c:	88 8d       	ldd	r24, Y+24	; 0x18
    187e:	99 8d       	ldd	r25, Y+25	; 0x19
    1880:	21 e0       	ldi	r18, 0x01	; 1
    1882:	83 31       	cpi	r24, 0x13	; 19
    1884:	91 05       	cpc	r25, r1
    1886:	08 f4       	brcc	.+2      	; 0x188a <_Z11ReceiveBonev+0x148>
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	22 23       	and	r18, r18
    188c:	39 f0       	breq	.+14     	; 0x189c <_Z11ReceiveBonev+0x15a>
    188e:	85 e0       	ldi	r24, 0x05	; 5
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	90 93 cb 01 	sts	0x01CB, r25
    1896:	80 93 ca 01 	sts	0x01CA, r24
    189a:	19 82       	std	Y+1, r1	; 0x01
						state=5;
					} else  {recString[strLoc++]=recChar; state=1;}	
					break;				
					}//end case 0
				case 1:{
					while (noCarriage && flagReceivingBone){
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	88 23       	and	r24, r24
    18a0:	31 f0       	breq	.+12     	; 0x18ae <_Z11ReceiveBonev+0x16c>
    18a2:	80 91 b5 01 	lds	r24, 0x01B5
    18a6:	88 23       	and	r24, r24
    18a8:	11 f0       	breq	.+4      	; 0x18ae <_Z11ReceiveBonev+0x16c>
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	01 c0       	rjmp	.+2      	; 0x18b0 <_Z11ReceiveBonev+0x16e>
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	88 23       	and	r24, r24
    18b2:	09 f0       	breq	.+2      	; 0x18b6 <_Z11ReceiveBonev+0x174>
    18b4:	9b cf       	rjmp	.-202    	; 0x17ec <_Z11ReceiveBonev+0xaa>
						else{
							recString[strLoc++]=recChar;
							if (strLoc >= 19){state=5;noCarriage=fFalse;}
						}//end if-else
					}//end while
					break;
    18b6:	6b c1       	rjmp	.+726    	; 0x1b8e <_Z11ReceiveBonev+0x44c>
					break;				
					}//end case 0
				case 1:{
					while (noCarriage && flagReceivingBone){
						while (!(UCSR1A & (1 << RXC0)) && flagReceivingBone);
						if (!flagReceivingBone){break;}
    18b8:	00 00       	nop
						else{
							recString[strLoc++]=recChar;
							if (strLoc >= 19){state=5;noCarriage=fFalse;}
						}//end if-else
					}//end while
					break;
    18ba:	69 c1       	rjmp	.+722    	; 0x1b8e <_Z11ReceiveBonev+0x44c>
					}//end case 1
				case 2:{
					if (!strcmp(recString,"date.")){printTimeDate(fTrue,fFalse,fTrue); state=6;}
    18bc:	ce 01       	movw	r24, r28
    18be:	04 96       	adiw	r24, 0x04	; 4
    18c0:	21 e4       	ldi	r18, 0x41	; 65
    18c2:	31 e0       	ldi	r19, 0x01	; 1
    18c4:	b9 01       	movw	r22, r18
    18c6:	0e 94 42 15 	call	0x2a84	; 0x2a84 <strcmp>
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	61 f4       	brne	.+24     	; 0x18e6 <_Z11ReceiveBonev+0x1a4>
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	60 e0       	ldi	r22, 0x00	; 0
    18d2:	41 e0       	ldi	r20, 0x01	; 1
    18d4:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_Z13printTimeDatehhh>
    18d8:	86 e0       	ldi	r24, 0x06	; 6
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	90 93 cb 01 	sts	0x01CB, r25
    18e0:	80 93 ca 01 	sts	0x01CA, r24
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strcmp(recString,"SYNNONE.")){state=3;}	
					else {state=5;}						
					break;
    18e4:	53 c1       	rjmp	.+678    	; 0x1b8c <_Z11ReceiveBonev+0x44a>
					}//end while
					break;
					}//end case 1
				case 2:{
					if (!strcmp(recString,"date.")){printTimeDate(fTrue,fFalse,fTrue); state=6;}
					else if (!strcmp(recString,"time.")){printTimeDate(fTrue,fTrue,fFalse);state=6;}
    18e6:	ce 01       	movw	r24, r28
    18e8:	04 96       	adiw	r24, 0x04	; 4
    18ea:	27 e4       	ldi	r18, 0x47	; 71
    18ec:	31 e0       	ldi	r19, 0x01	; 1
    18ee:	b9 01       	movw	r22, r18
    18f0:	0e 94 42 15 	call	0x2a84	; 0x2a84 <strcmp>
    18f4:	00 97       	sbiw	r24, 0x00	; 0
    18f6:	61 f4       	brne	.+24     	; 0x1910 <_Z11ReceiveBonev+0x1ce>
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	61 e0       	ldi	r22, 0x01	; 1
    18fc:	40 e0       	ldi	r20, 0x00	; 0
    18fe:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_Z13printTimeDatehhh>
    1902:	86 e0       	ldi	r24, 0x06	; 6
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	90 93 cb 01 	sts	0x01CB, r25
    190a:	80 93 ca 01 	sts	0x01CA, r24
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strcmp(recString,"SYNNONE.")){state=3;}	
					else {state=5;}						
					break;
    190e:	3e c1       	rjmp	.+636    	; 0x1b8c <_Z11ReceiveBonev+0x44a>
					break;
					}//end case 1
				case 2:{
					if (!strcmp(recString,"date.")){printTimeDate(fTrue,fFalse,fTrue); state=6;}
					else if (!strcmp(recString,"time.")){printTimeDate(fTrue,fTrue,fFalse);state=6;}
					else if (!strcmp(recString,"both.")){printTimeDate(fTrue,fTrue,fTrue);state=6;}
    1910:	ce 01       	movw	r24, r28
    1912:	04 96       	adiw	r24, 0x04	; 4
    1914:	2d e4       	ldi	r18, 0x4D	; 77
    1916:	31 e0       	ldi	r19, 0x01	; 1
    1918:	b9 01       	movw	r22, r18
    191a:	0e 94 42 15 	call	0x2a84	; 0x2a84 <strcmp>
    191e:	00 97       	sbiw	r24, 0x00	; 0
    1920:	61 f4       	brne	.+24     	; 0x193a <_Z11ReceiveBonev+0x1f8>
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	61 e0       	ldi	r22, 0x01	; 1
    1926:	41 e0       	ldi	r20, 0x01	; 1
    1928:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_Z13printTimeDatehhh>
    192c:	86 e0       	ldi	r24, 0x06	; 6
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	90 93 cb 01 	sts	0x01CB, r25
    1934:	80 93 ca 01 	sts	0x01CA, r24
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strcmp(recString,"SYNNONE.")){state=3;}	
					else {state=5;}						
					break;
    1938:	29 c1       	rjmp	.+594    	; 0x1b8c <_Z11ReceiveBonev+0x44a>
					}//end case 1
				case 2:{
					if (!strcmp(recString,"date.")){printTimeDate(fTrue,fFalse,fTrue); state=6;}
					else if (!strcmp(recString,"time.")){printTimeDate(fTrue,fTrue,fFalse);state=6;}
					else if (!strcmp(recString,"both.")){printTimeDate(fTrue,fTrue,fTrue);state=6;}
					else if (!strcmp(recString,"save.")){saveDateTime_eeprom(fTrue,fFalse);PrintBone(recString);state=6;}
    193a:	ce 01       	movw	r24, r28
    193c:	04 96       	adiw	r24, 0x04	; 4
    193e:	23 e5       	ldi	r18, 0x53	; 83
    1940:	31 e0       	ldi	r19, 0x01	; 1
    1942:	b9 01       	movw	r22, r18
    1944:	0e 94 42 15 	call	0x2a84	; 0x2a84 <strcmp>
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	79 f4       	brne	.+30     	; 0x196a <_Z11ReceiveBonev+0x228>
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	60 e0       	ldi	r22, 0x00	; 0
    1950:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
    1954:	ce 01       	movw	r24, r28
    1956:	04 96       	adiw	r24, 0x04	; 4
    1958:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
    195c:	86 e0       	ldi	r24, 0x06	; 6
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	90 93 cb 01 	sts	0x01CB, r25
    1964:	80 93 ca 01 	sts	0x01CA, r24
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strcmp(recString,"SYNNONE.")){state=3;}	
					else {state=5;}						
					break;
    1968:	11 c1       	rjmp	.+546    	; 0x1b8c <_Z11ReceiveBonev+0x44a>
				case 2:{
					if (!strcmp(recString,"date.")){printTimeDate(fTrue,fFalse,fTrue); state=6;}
					else if (!strcmp(recString,"time.")){printTimeDate(fTrue,fTrue,fFalse);state=6;}
					else if (!strcmp(recString,"both.")){printTimeDate(fTrue,fTrue,fTrue);state=6;}
					else if (!strcmp(recString,"save.")){saveDateTime_eeprom(fTrue,fFalse);PrintBone(recString);state=6;}
					else if (!strcmp(recString,"adc.")){char tempChar[7]; utoa(globalADC,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
    196a:	ce 01       	movw	r24, r28
    196c:	04 96       	adiw	r24, 0x04	; 4
    196e:	29 e5       	ldi	r18, 0x59	; 89
    1970:	31 e0       	ldi	r19, 0x01	; 1
    1972:	b9 01       	movw	r22, r18
    1974:	0e 94 42 15 	call	0x2a84	; 0x2a84 <strcmp>
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	c1 f4       	brne	.+48     	; 0x19ac <_Z11ReceiveBonev+0x26a>
    197c:	80 91 88 01 	lds	r24, 0x0188
    1980:	90 91 89 01 	lds	r25, 0x0189
    1984:	9e 01       	movw	r18, r28
    1986:	26 5e       	subi	r18, 0xE6	; 230
    1988:	3f 4f       	sbci	r19, 0xFF	; 255
    198a:	b9 01       	movw	r22, r18
    198c:	4a e0       	ldi	r20, 0x0A	; 10
    198e:	50 e0       	ldi	r21, 0x00	; 0
    1990:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <utoa>
    1994:	18 a2       	lds	r17, 0x98
    1996:	ce 01       	movw	r24, r28
    1998:	4a 96       	adiw	r24, 0x1a	; 26
    199a:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
    199e:	86 e0       	ldi	r24, 0x06	; 6
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	90 93 cb 01 	sts	0x01CB, r25
    19a6:	80 93 ca 01 	sts	0x01CA, r24
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strcmp(recString,"SYNNONE.")){state=3;}	
					else {state=5;}						
					break;
    19aa:	f0 c0       	rjmp	.+480    	; 0x1b8c <_Z11ReceiveBonev+0x44a>
					if (!strcmp(recString,"date.")){printTimeDate(fTrue,fFalse,fTrue); state=6;}
					else if (!strcmp(recString,"time.")){printTimeDate(fTrue,fTrue,fFalse);state=6;}
					else if (!strcmp(recString,"both.")){printTimeDate(fTrue,fTrue,fTrue);state=6;}
					else if (!strcmp(recString,"save.")){saveDateTime_eeprom(fTrue,fFalse);PrintBone(recString);state=6;}
					else if (!strcmp(recString,"adc.")){char tempChar[7]; utoa(globalADC,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
					else if (!strcmp(recString,"temp.")){char tempChar[7]; utoa(globalTemp,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
    19ac:	ce 01       	movw	r24, r28
    19ae:	04 96       	adiw	r24, 0x04	; 4
    19b0:	2e e5       	ldi	r18, 0x5E	; 94
    19b2:	31 e0       	ldi	r19, 0x01	; 1
    19b4:	b9 01       	movw	r22, r18
    19b6:	0e 94 42 15 	call	0x2a84	; 0x2a84 <strcmp>
    19ba:	00 97       	sbiw	r24, 0x00	; 0
    19bc:	c1 f4       	brne	.+48     	; 0x19ee <_Z11ReceiveBonev+0x2ac>
    19be:	80 91 8a 01 	lds	r24, 0x018A
    19c2:	90 91 8b 01 	lds	r25, 0x018B
    19c6:	9e 01       	movw	r18, r28
    19c8:	2f 5d       	subi	r18, 0xDF	; 223
    19ca:	3f 4f       	sbci	r19, 0xFF	; 255
    19cc:	b9 01       	movw	r22, r18
    19ce:	4a e0       	ldi	r20, 0x0A	; 10
    19d0:	50 e0       	ldi	r21, 0x00	; 0
    19d2:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <utoa>
    19d6:	1f a2       	lds	r17, 0x9f
    19d8:	ce 01       	movw	r24, r28
    19da:	81 96       	adiw	r24, 0x21	; 33
    19dc:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
    19e0:	86 e0       	ldi	r24, 0x06	; 6
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	90 93 cb 01 	sts	0x01CB, r25
    19e8:	80 93 ca 01 	sts	0x01CA, r24
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strcmp(recString,"SYNNONE.")){state=3;}	
					else {state=5;}						
					break;
    19ec:	cf c0       	rjmp	.+414    	; 0x1b8c <_Z11ReceiveBonev+0x44a>
					else if (!strcmp(recString,"time.")){printTimeDate(fTrue,fTrue,fFalse);state=6;}
					else if (!strcmp(recString,"both.")){printTimeDate(fTrue,fTrue,fTrue);state=6;}
					else if (!strcmp(recString,"save.")){saveDateTime_eeprom(fTrue,fFalse);PrintBone(recString);state=6;}
					else if (!strcmp(recString,"adc.")){char tempChar[7]; utoa(globalADC,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
					else if (!strcmp(recString,"temp.")){char tempChar[7]; utoa(globalTemp,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
					else if (recString[2] == ':'){//valid string. Update the time anyways. Comes in every 20 minutes or so...
    19ee:	8e 81       	ldd	r24, Y+6	; 0x06
    19f0:	8a 33       	cpi	r24, 0x3A	; 58
    19f2:	09 f0       	breq	.+2      	; 0x19f6 <_Z11ReceiveBonev+0x2b4>
    19f4:	81 c0       	rjmp	.+258    	; 0x1af8 <_Z11ReceiveBonev+0x3b6>
						BOOL success=currentTime.setTime(recString);
    19f6:	8c e8       	ldi	r24, 0x8C	; 140
    19f8:	91 e0       	ldi	r25, 0x01	; 1
    19fa:	9e 01       	movw	r18, r28
    19fc:	2c 5f       	subi	r18, 0xFC	; 252
    19fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1a00:	b9 01       	movw	r22, r18
    1a02:	0e 94 cc 04 	call	0x998	; 0x998 <_ZN6myTime7setTimeEPc>
    1a06:	8b 83       	std	Y+3, r24	; 0x03
						if (success){state=3;}
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0a:	88 23       	and	r24, r24
    1a0c:	39 f0       	breq	.+14     	; 0x1a1c <_Z11ReceiveBonev+0x2da>
    1a0e:	83 e0       	ldi	r24, 0x03	; 3
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	90 93 cb 01 	sts	0x01CB, r25
    1a16:	80 93 ca 01 	sts	0x01CA, r24
    1a1a:	06 c0       	rjmp	.+12     	; 0x1a28 <_Z11ReceiveBonev+0x2e6>
						else {state=4;}
    1a1c:	84 e0       	ldi	r24, 0x04	; 4
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	90 93 cb 01 	sts	0x01CB, r25
    1a24:	80 93 ca 01 	sts	0x01CA, r24
						
						//Decide what I need to save and which flags need to go up.	
						if (success && !restart && !flagFreshStart){saveDateTime_eeprom(fTrue,fFalse); flagUpdateGAVRTime=fTrue;}
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	88 23       	and	r24, r24
    1a2c:	81 f0       	breq	.+32     	; 0x1a4e <_Z11ReceiveBonev+0x30c>
    1a2e:	80 91 c2 01 	lds	r24, 0x01C2
    1a32:	88 23       	and	r24, r24
    1a34:	61 f4       	brne	.+24     	; 0x1a4e <_Z11ReceiveBonev+0x30c>
    1a36:	80 91 c3 01 	lds	r24, 0x01C3
    1a3a:	88 23       	and	r24, r24
    1a3c:	41 f4       	brne	.+16     	; 0x1a4e <_Z11ReceiveBonev+0x30c>
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	60 e0       	ldi	r22, 0x00	; 0
    1a42:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	80 93 b7 01 	sts	0x01B7, r24
    1a4c:	47 c0       	rjmp	.+142    	; 0x1adc <_Z11ReceiveBonev+0x39a>
						else if (success && !restart && flagFreshStart){saveDateTime_eeprom(fTrue,fFalse); flagUpdateGAVRTime=fTrue; flagUserDate=fTrue;}
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	88 23       	and	r24, r24
    1a52:	99 f0       	breq	.+38     	; 0x1a7a <_Z11ReceiveBonev+0x338>
    1a54:	80 91 c2 01 	lds	r24, 0x01C2
    1a58:	88 23       	and	r24, r24
    1a5a:	79 f4       	brne	.+30     	; 0x1a7a <_Z11ReceiveBonev+0x338>
    1a5c:	80 91 c3 01 	lds	r24, 0x01C3
    1a60:	88 23       	and	r24, r24
    1a62:	59 f0       	breq	.+22     	; 0x1a7a <_Z11ReceiveBonev+0x338>
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	60 e0       	ldi	r22, 0x00	; 0
    1a68:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	80 93 b7 01 	sts	0x01B7, r24
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	80 93 ba 01 	sts	0x01BA, r24
    1a78:	31 c0       	rjmp	.+98     	; 0x1adc <_Z11ReceiveBonev+0x39a>
						else if (success && restart && !flagFreshStart){saveDateTime_eeprom(fTrue,fFalse); flagUpdateGAVRDate=fTrue; flagUpdateGAVRTime=fTrue;;}
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	88 23       	and	r24, r24
    1a7e:	99 f0       	breq	.+38     	; 0x1aa6 <_Z11ReceiveBonev+0x364>
    1a80:	80 91 c2 01 	lds	r24, 0x01C2
    1a84:	88 23       	and	r24, r24
    1a86:	79 f0       	breq	.+30     	; 0x1aa6 <_Z11ReceiveBonev+0x364>
    1a88:	80 91 c3 01 	lds	r24, 0x01C3
    1a8c:	88 23       	and	r24, r24
    1a8e:	59 f4       	brne	.+22     	; 0x1aa6 <_Z11ReceiveBonev+0x364>
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	60 e0       	ldi	r22, 0x00	; 0
    1a94:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	80 93 b8 01 	sts	0x01B8, r24
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	80 93 b7 01 	sts	0x01B7, r24
    1aa4:	1b c0       	rjmp	.+54     	; 0x1adc <_Z11ReceiveBonev+0x39a>
						else if (!success && restart){flagUpdateGAVRTime=fTrue; flagUpdateGAVRDate=fTrue;}	//sends eeprom time and date
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	88 23       	and	r24, r24
    1aaa:	59 f4       	brne	.+22     	; 0x1ac2 <_Z11ReceiveBonev+0x380>
    1aac:	80 91 c2 01 	lds	r24, 0x01C2
    1ab0:	88 23       	and	r24, r24
    1ab2:	39 f0       	breq	.+14     	; 0x1ac2 <_Z11ReceiveBonev+0x380>
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	80 93 b7 01 	sts	0x01B7, r24
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	80 93 b8 01 	sts	0x01B8, r24
    1ac0:	0d c0       	rjmp	.+26     	; 0x1adc <_Z11ReceiveBonev+0x39a>
						else if (!success && flagFreshStart){flagUserTime=fTrue; flagUserDate=fTrue;} //need to get user time and date
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	88 23       	and	r24, r24
    1ac6:	51 f4       	brne	.+20     	; 0x1adc <_Z11ReceiveBonev+0x39a>
    1ac8:	80 91 c3 01 	lds	r24, 0x01C3
    1acc:	88 23       	and	r24, r24
    1ace:	31 f0       	breq	.+12     	; 0x1adc <_Z11ReceiveBonev+0x39a>
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	80 93 bb 01 	sts	0x01BB, r24
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	80 93 ba 01 	sts	0x01BA, r24
						else;
						//Reset flags for startup
						if (restart){restart=fFalse;}
    1adc:	80 91 c2 01 	lds	r24, 0x01C2
    1ae0:	88 23       	and	r24, r24
    1ae2:	11 f0       	breq	.+4      	; 0x1ae8 <_Z11ReceiveBonev+0x3a6>
    1ae4:	10 92 c2 01 	sts	0x01C2, r1
						if (flagFreshStart){flagFreshStart=fFalse;}	
    1ae8:	80 91 c3 01 	lds	r24, 0x01C3
    1aec:	88 23       	and	r24, r24
    1aee:	09 f4       	brne	.+2      	; 0x1af2 <_Z11ReceiveBonev+0x3b0>
    1af0:	4d c0       	rjmp	.+154    	; 0x1b8c <_Z11ReceiveBonev+0x44a>
    1af2:	10 92 c3 01 	sts	0x01C3, r1
					} else if (!strcmp(recString,"SYNNONE.")){state=3;}	
					else {state=5;}						
					break;
    1af6:	4a c0       	rjmp	.+148    	; 0x1b8c <_Z11ReceiveBonev+0x44a>
						else if (!success && flagFreshStart){flagUserTime=fTrue; flagUserDate=fTrue;} //need to get user time and date
						else;
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strcmp(recString,"SYNNONE.")){state=3;}	
    1af8:	ce 01       	movw	r24, r28
    1afa:	04 96       	adiw	r24, 0x04	; 4
    1afc:	24 e6       	ldi	r18, 0x64	; 100
    1afe:	31 e0       	ldi	r19, 0x01	; 1
    1b00:	b9 01       	movw	r22, r18
    1b02:	0e 94 42 15 	call	0x2a84	; 0x2a84 <strcmp>
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	39 f4       	brne	.+14     	; 0x1b18 <_Z11ReceiveBonev+0x3d6>
    1b0a:	83 e0       	ldi	r24, 0x03	; 3
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	90 93 cb 01 	sts	0x01CB, r25
    1b12:	80 93 ca 01 	sts	0x01CA, r24
					else {state=5;}						
					break;
    1b16:	3a c0       	rjmp	.+116    	; 0x1b8c <_Z11ReceiveBonev+0x44a>
						else;
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strcmp(recString,"SYNNONE.")){state=3;}	
					else {state=5;}						
    1b18:	85 e0       	ldi	r24, 0x05	; 5
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	90 93 cb 01 	sts	0x01CB, r25
    1b20:	80 93 ca 01 	sts	0x01CA, r24
					break;
    1b24:	33 c0       	rjmp	.+102    	; 0x1b8c <_Z11ReceiveBonev+0x44a>
					}//end case 2
				case 3:{
					//Successful receive state
					PrintBone("ACK");
    1b26:	8d e6       	ldi	r24, 0x6D	; 109
    1b28:	91 e0       	ldi	r25, 0x01	; 1
    1b2a:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
					PrintBone(recString);
    1b2e:	ce 01       	movw	r24, r28
    1b30:	04 96       	adiw	r24, 0x04	; 4
    1b32:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
					state=0;
    1b36:	10 92 cb 01 	sts	0x01CB, r1
    1b3a:	10 92 ca 01 	sts	0x01CA, r1
					flagReceivingBone=fFalse;
    1b3e:	10 92 b5 01 	sts	0x01B5, r1
					break;
    1b42:	25 c0       	rjmp	.+74     	; 0x1b8e <_Z11ReceiveBonev+0x44c>
					}//end case 3
				case 4:{
					PrintBone("ACKBAD.");
    1b44:	81 e7       	ldi	r24, 0x71	; 113
    1b46:	91 e0       	ldi	r25, 0x01	; 1
    1b48:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
					flagReceivingBone=fFalse;
    1b4c:	10 92 b5 01 	sts	0x01B5, r1
					state=0;
    1b50:	10 92 cb 01 	sts	0x01CB, r1
    1b54:	10 92 ca 01 	sts	0x01CA, r1
					break;
    1b58:	1a c0       	rjmp	.+52     	; 0x1b8e <_Z11ReceiveBonev+0x44c>
					}//end case 4
				case 5:{
					PrintBone("ACKERROR.");
    1b5a:	89 e7       	ldi	r24, 0x79	; 121
    1b5c:	91 e0       	ldi	r25, 0x01	; 1
    1b5e:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
					flagReceivingBone=fFalse;
    1b62:	10 92 b5 01 	sts	0x01B5, r1
					state=0;
    1b66:	10 92 cb 01 	sts	0x01CB, r1
    1b6a:	10 92 ca 01 	sts	0x01CA, r1
					break;
    1b6e:	0f c0       	rjmp	.+30     	; 0x1b8e <_Z11ReceiveBonev+0x44c>
					}//end case 5
				case 6:{
					flagReceivingBone=fFalse;
    1b70:	10 92 b5 01 	sts	0x01B5, r1
					state=0;
    1b74:	10 92 cb 01 	sts	0x01CB, r1
    1b78:	10 92 ca 01 	sts	0x01CA, r1
					break;
    1b7c:	08 c0       	rjmp	.+16     	; 0x1b8e <_Z11ReceiveBonev+0x44c>
					}//end case 6
				default:{flagReceivingBone=fFalse; state=0;break;}
    1b7e:	10 92 b5 01 	sts	0x01B5, r1
    1b82:	10 92 cb 01 	sts	0x01CB, r1
    1b86:	10 92 ca 01 	sts	0x01CA, r1
    1b8a:	01 c0       	rjmp	.+2      	; 0x1b8e <_Z11ReceiveBonev+0x44c>
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strcmp(recString,"SYNNONE.")){state=3;}	
					else {state=5;}						
					break;
    1b8c:	00 00       	nop
	volatile static unsigned int state=0;
	char recChar, recString[20];
	volatile unsigned int strLoc=0;
	BOOL noCarriage=fTrue;
	
	while (flagReceivingBone){
    1b8e:	90 91 b5 01 	lds	r25, 0x01B5
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	99 23       	and	r25, r25
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <_Z11ReceiveBonev+0x458>
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	88 23       	and	r24, r24
    1b9c:	09 f0       	breq	.+2      	; 0x1ba0 <_Z11ReceiveBonev+0x45e>
    1b9e:	e0 cd       	rjmp	.-1088   	; 0x1760 <_Z11ReceiveBonev+0x1e>
					break;
					}//end case 6
				default:{flagReceivingBone=fFalse; state=0;break;}
			}//end switch
	}//end while(flagUARTbone)	
}//end ReceiveBone()
    1ba0:	a7 96       	adiw	r28, 0x27	; 39
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	f8 94       	cli
    1ba6:	de bf       	out	0x3e, r29	; 62
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	cd bf       	out	0x3d, r28	; 61
    1bac:	df 91       	pop	r29
    1bae:	cf 91       	pop	r28
    1bb0:	08 95       	ret

00001bb2 <_Z13printTimeDatehhh>:

/*************************************************************************************************************/

//To print to WAVR, cariable needs to be false. Print to Bone requires WAVRorBone to be true
void printTimeDate(BOOL WAVRorBone, BOOL pTime,BOOL pDate){
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	eb 97       	sbiw	r28, 0x3b	; 59
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	de bf       	out	0x3e, r29	; 62
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	cd bf       	out	0x3d, r28	; 61
    1bc6:	89 af       	sts	0x79, r24
    1bc8:	6a af       	sts	0x7a, r22
    1bca:	4b af       	sts	0x7b, r20
	if (WAVRorBone){ //Printing to BeagleBone
    1bcc:	89 ad       	sts	0x69, r24
    1bce:	88 23       	and	r24, r24
    1bd0:	49 f1       	breq	.+82     	; 0x1c24 <_Z13printTimeDatehhh+0x72>
		if (pTime){
    1bd2:	8a ad       	sts	0x6a, r24
    1bd4:	88 23       	and	r24, r24
    1bd6:	89 f0       	breq	.+34     	; 0x1bfa <_Z13printTimeDatehhh+0x48>
			char tempTime[11];
			strcpy(tempTime,currentTime.getTime());
    1bd8:	8c e8       	ldi	r24, 0x8C	; 140
    1bda:	91 e0       	ldi	r25, 0x01	; 1
    1bdc:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN6myTime7getTimeEv>
    1be0:	9c 01       	movw	r18, r24
    1be2:	ce 01       	movw	r24, r28
    1be4:	01 96       	adiw	r24, 0x01	; 1
    1be6:	b9 01       	movw	r22, r18
    1be8:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <strcpy>
			PrintBone(tempTime);
    1bec:	ce 01       	movw	r24, r28
    1bee:	01 96       	adiw	r24, 0x01	; 1
    1bf0:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
			PutUartChBone('/');
    1bf4:	8f e2       	ldi	r24, 0x2F	; 47
    1bf6:	0e 94 a2 08 	call	0x1144	; 0x1144 <_Z13PutUartChBonec>
		}
		if (pDate){
    1bfa:	8b ad       	sts	0x6b, r24
    1bfc:	88 23       	and	r24, r24
    1bfe:	d1 f1       	breq	.+116    	; 0x1c74 <_Z13printTimeDatehhh+0xc2>
			char tempDate[17];
			strcpy(tempDate,currentTime.getDate());
    1c00:	8c e8       	ldi	r24, 0x8C	; 140
    1c02:	91 e0       	ldi	r25, 0x01	; 1
    1c04:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN6myDate7getDateEv>
    1c08:	9c 01       	movw	r18, r24
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	0c 96       	adiw	r24, 0x0c	; 12
    1c0e:	b9 01       	movw	r22, r18
    1c10:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <strcpy>
			PrintBone(tempDate);
    1c14:	ce 01       	movw	r24, r28
    1c16:	0c 96       	adiw	r24, 0x0c	; 12
    1c18:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
			PutUartChGAVR('.');
    1c1c:	8e e2       	ldi	r24, 0x2E	; 46
    1c1e:	0e 94 ed 08 	call	0x11da	; 0x11da <_Z13PutUartChGAVRc>
    1c22:	28 c0       	rjmp	.+80     	; 0x1c74 <_Z13printTimeDatehhh+0xc2>
		}
	} else { //Printing to GAVR
		if (pTime){
    1c24:	8a ad       	sts	0x6a, r24
    1c26:	88 23       	and	r24, r24
    1c28:	89 f0       	breq	.+34     	; 0x1c4c <_Z13printTimeDatehhh+0x9a>
			char tempTime[11];
			strcpy(tempTime,currentTime.getTime());
    1c2a:	8c e8       	ldi	r24, 0x8C	; 140
    1c2c:	91 e0       	ldi	r25, 0x01	; 1
    1c2e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN6myTime7getTimeEv>
    1c32:	9c 01       	movw	r18, r24
    1c34:	ce 01       	movw	r24, r28
    1c36:	4d 96       	adiw	r24, 0x1d	; 29
    1c38:	b9 01       	movw	r22, r18
    1c3a:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <strcpy>
			PrintGAVR(tempTime);
    1c3e:	ce 01       	movw	r24, r28
    1c40:	4d 96       	adiw	r24, 0x1d	; 29
    1c42:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
			PutUartChGAVR('/');
    1c46:	8f e2       	ldi	r24, 0x2F	; 47
    1c48:	0e 94 ed 08 	call	0x11da	; 0x11da <_Z13PutUartChGAVRc>
		}
		if (pDate){
    1c4c:	8b ad       	sts	0x6b, r24
    1c4e:	88 23       	and	r24, r24
    1c50:	89 f0       	breq	.+34     	; 0x1c74 <_Z13printTimeDatehhh+0xc2>
			char tempDate[17];
			strcpy(tempDate,currentTime.getDate());
    1c52:	8c e8       	ldi	r24, 0x8C	; 140
    1c54:	91 e0       	ldi	r25, 0x01	; 1
    1c56:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN6myDate7getDateEv>
    1c5a:	9c 01       	movw	r18, r24
    1c5c:	ce 01       	movw	r24, r28
    1c5e:	88 96       	adiw	r24, 0x28	; 40
    1c60:	b9 01       	movw	r22, r18
    1c62:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <strcpy>
			PrintGAVR(tempDate);
    1c66:	ce 01       	movw	r24, r28
    1c68:	88 96       	adiw	r24, 0x28	; 40
    1c6a:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
			PutUartChGAVR('.');
    1c6e:	8e e2       	ldi	r24, 0x2E	; 46
    1c70:	0e 94 ed 08 	call	0x11da	; 0x11da <_Z13PutUartChGAVRc>
		}
	}
}
    1c74:	eb 96       	adiw	r28, 0x3b	; 59
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	de bf       	out	0x3e, r29	; 62
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	cd bf       	out	0x3d, r28	; 61
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	08 95       	ret

00001c86 <__vector_4>:
/*==============================================================================================================*/
/****************************************************************************************************************/


/*--------------------------Interrupt Service Routines------------------------------------------------------------------------------------*/
ISR(PCINT0_vect){
    1c86:	1f 92       	push	r1
    1c88:	0f 92       	push	r0
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	0f 92       	push	r0
    1c8e:	11 24       	eor	r1, r1
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
	
	
}	
    1c98:	df 91       	pop	r29
    1c9a:	cf 91       	pop	r28
    1c9c:	0f 90       	pop	r0
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	0f 90       	pop	r0
    1ca2:	1f 90       	pop	r1
    1ca4:	18 95       	reti

00001ca6 <__vector_3>:


ISR(INT2_vect){	//about to get time, get things ready
    1ca6:	1f 92       	push	r1
    1ca8:	0f 92       	push	r0
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	0f 92       	push	r0
    1cae:	11 24       	eor	r1, r1
    1cb0:	2f 93       	push	r18
    1cb2:	3f 93       	push	r19
    1cb4:	4f 93       	push	r20
    1cb6:	5f 93       	push	r21
    1cb8:	6f 93       	push	r22
    1cba:	7f 93       	push	r23
    1cbc:	8f 93       	push	r24
    1cbe:	9f 93       	push	r25
    1cc0:	af 93       	push	r26
    1cc2:	bf 93       	push	r27
    1cc4:	ef 93       	push	r30
    1cc6:	ff 93       	push	r31
    1cc8:	cf 93       	push	r28
    1cca:	df 93       	push	r29
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
	if (!flagShutdown){		//If things are off, don't let noise do an interrupt. Shouldn't happen anyways.
    1cd0:	80 91 bf 01 	lds	r24, 0x01BF
    1cd4:	88 23       	and	r24, r24
    1cd6:	c9 f4       	brne	.+50     	; 0x1d0a <__vector_3+0x64>
		UCSR0B |= (1 << RXCIE0);
    1cd8:	81 ec       	ldi	r24, 0xC1	; 193
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	21 ec       	ldi	r18, 0xC1	; 193
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	f9 01       	movw	r30, r18
    1ce2:	20 81       	ld	r18, Z
    1ce4:	20 68       	ori	r18, 0x80	; 128
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	20 83       	st	Z, r18
		flagGoToSleep=fFalse;	//no sleeping, wait for UART_RX
    1cea:	10 92 b4 01 	sts	0x01B4, r1
		flagNormalMode=fFalse;
    1cee:	10 92 b6 01 	sts	0x01B6, r1
		__killLevel1INT();
    1cf2:	8d e3       	ldi	r24, 0x3D	; 61
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	10 82       	st	Z, r1
    1cfa:	8b e6       	ldi	r24, 0x6B	; 107
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	fc 01       	movw	r30, r24
    1d00:	10 82       	st	Z, r1
		//Acknowledge connection, disable INT2_vect
		PrintBone("ACKT");
    1d02:	83 e8       	ldi	r24, 0x83	; 131
    1d04:	91 e0       	ldi	r25, 0x01	; 1
    1d06:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
	}	
}
    1d0a:	df 91       	pop	r29
    1d0c:	cf 91       	pop	r28
    1d0e:	ff 91       	pop	r31
    1d10:	ef 91       	pop	r30
    1d12:	bf 91       	pop	r27
    1d14:	af 91       	pop	r26
    1d16:	9f 91       	pop	r25
    1d18:	8f 91       	pop	r24
    1d1a:	7f 91       	pop	r23
    1d1c:	6f 91       	pop	r22
    1d1e:	5f 91       	pop	r21
    1d20:	4f 91       	pop	r20
    1d22:	3f 91       	pop	r19
    1d24:	2f 91       	pop	r18
    1d26:	0f 90       	pop	r0
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	0f 90       	pop	r0
    1d2c:	1f 90       	pop	r1
    1d2e:	18 95       	reti

00001d30 <__vector_11>:

ISR(TIMER2_OVF_vect){
    1d30:	1f 92       	push	r1
    1d32:	0f 92       	push	r0
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	0f 92       	push	r0
    1d38:	11 24       	eor	r1, r1
    1d3a:	2f 93       	push	r18
    1d3c:	3f 93       	push	r19
    1d3e:	4f 93       	push	r20
    1d40:	5f 93       	push	r21
    1d42:	6f 93       	push	r22
    1d44:	7f 93       	push	r23
    1d46:	8f 93       	push	r24
    1d48:	9f 93       	push	r25
    1d4a:	af 93       	push	r26
    1d4c:	bf 93       	push	r27
    1d4e:	ef 93       	push	r30
    1d50:	ff 93       	push	r31
    1d52:	cf 93       	push	r28
    1d54:	df 93       	push	r29
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
	volatile static int timeOut = 0;
	volatile static int gavrSendTimeout=0, boneReceiveTimeout=0;
	
	currentTime.addSeconds(1);
    1d5a:	8c e8       	ldi	r24, 0x8C	; 140
    1d5c:	91 e0       	ldi	r25, 0x01	; 1
    1d5e:	61 e0       	ldi	r22, 0x01	; 1
    1d60:	70 e0       	ldi	r23, 0x00	; 0
    1d62:	0e 94 77 06 	call	0xcee	; 0xcee <_ZN6myTime10addSecondsEi>
	
	//GAVR Transmission Timeout
	if (flagSendingGAVR && gavrSendTimeout <=COMM_TIMEOUT_SEC){gavrSendTimeout++;}
    1d66:	80 91 b9 01 	lds	r24, 0x01B9
    1d6a:	88 23       	and	r24, r24
    1d6c:	49 f0       	breq	.+18     	; 0x1d80 <__vector_11+0x50>
    1d6e:	80 91 c4 01 	lds	r24, 0x01C4
    1d72:	90 91 c5 01 	lds	r25, 0x01C5
    1d76:	84 30       	cpi	r24, 0x04	; 4
    1d78:	91 05       	cpc	r25, r1
    1d7a:	14 f4       	brge	.+4      	; 0x1d80 <__vector_11+0x50>
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	01 c0       	rjmp	.+2      	; 0x1d82 <__vector_11+0x52>
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	88 23       	and	r24, r24
    1d84:	51 f0       	breq	.+20     	; 0x1d9a <__vector_11+0x6a>
    1d86:	80 91 c4 01 	lds	r24, 0x01C4
    1d8a:	90 91 c5 01 	lds	r25, 0x01C5
    1d8e:	01 96       	adiw	r24, 0x01	; 1
    1d90:	90 93 c5 01 	sts	0x01C5, r25
    1d94:	80 93 c4 01 	sts	0x01C4, r24
    1d98:	34 c0       	rjmp	.+104    	; 0x1e02 <__vector_11+0xd2>
	else if (flagSendingGAVR && gavrSendTimeout > COMM_TIMEOUT_SEC){flagSendingGAVR=fFalse; gavrSendTimeout=0; __enableLevel1INT();}
    1d9a:	80 91 b9 01 	lds	r24, 0x01B9
    1d9e:	88 23       	and	r24, r24
    1da0:	49 f0       	breq	.+18     	; 0x1db4 <__vector_11+0x84>
    1da2:	80 91 c4 01 	lds	r24, 0x01C4
    1da6:	90 91 c5 01 	lds	r25, 0x01C5
    1daa:	84 30       	cpi	r24, 0x04	; 4
    1dac:	91 05       	cpc	r25, r1
    1dae:	14 f0       	brlt	.+4      	; 0x1db4 <__vector_11+0x84>
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	01 c0       	rjmp	.+2      	; 0x1db6 <__vector_11+0x86>
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	88 23       	and	r24, r24
    1db8:	81 f0       	breq	.+32     	; 0x1dda <__vector_11+0xaa>
    1dba:	10 92 b9 01 	sts	0x01B9, r1
    1dbe:	10 92 c5 01 	sts	0x01C5, r1
    1dc2:	10 92 c4 01 	sts	0x01C4, r1
    1dc6:	8d e3       	ldi	r24, 0x3D	; 61
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	2d e3       	ldi	r18, 0x3D	; 61
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	f9 01       	movw	r30, r18
    1dd0:	20 81       	ld	r18, Z
    1dd2:	24 60       	ori	r18, 0x04	; 4
    1dd4:	fc 01       	movw	r30, r24
    1dd6:	20 83       	st	Z, r18
    1dd8:	14 c0       	rjmp	.+40     	; 0x1e02 <__vector_11+0xd2>
	else if (!flagSendingGAVR && gavrSendTimeout > 0){gavrSendTimeout=0;}
    1dda:	80 91 b9 01 	lds	r24, 0x01B9
    1dde:	88 23       	and	r24, r24
    1de0:	49 f4       	brne	.+18     	; 0x1df4 <__vector_11+0xc4>
    1de2:	80 91 c4 01 	lds	r24, 0x01C4
    1de6:	90 91 c5 01 	lds	r25, 0x01C5
    1dea:	18 16       	cp	r1, r24
    1dec:	19 06       	cpc	r1, r25
    1dee:	14 f4       	brge	.+4      	; 0x1df4 <__vector_11+0xc4>
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	01 c0       	rjmp	.+2      	; 0x1df6 <__vector_11+0xc6>
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	88 23       	and	r24, r24
    1df8:	21 f0       	breq	.+8      	; 0x1e02 <__vector_11+0xd2>
    1dfa:	10 92 c5 01 	sts	0x01C5, r1
    1dfe:	10 92 c4 01 	sts	0x01C4, r1
	else;
	
	//BeagleBone Reception Timeout
	if (flagReceivingBone && boneReceiveTimeout <=COMM_TIMEOUT_SEC){boneReceiveTimeout++;}
    1e02:	80 91 b5 01 	lds	r24, 0x01B5
    1e06:	88 23       	and	r24, r24
    1e08:	49 f0       	breq	.+18     	; 0x1e1c <__vector_11+0xec>
    1e0a:	80 91 c6 01 	lds	r24, 0x01C6
    1e0e:	90 91 c7 01 	lds	r25, 0x01C7
    1e12:	84 30       	cpi	r24, 0x04	; 4
    1e14:	91 05       	cpc	r25, r1
    1e16:	14 f4       	brge	.+4      	; 0x1e1c <__vector_11+0xec>
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	01 c0       	rjmp	.+2      	; 0x1e1e <__vector_11+0xee>
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	88 23       	and	r24, r24
    1e20:	51 f0       	breq	.+20     	; 0x1e36 <__vector_11+0x106>
    1e22:	80 91 c6 01 	lds	r24, 0x01C6
    1e26:	90 91 c7 01 	lds	r25, 0x01C7
    1e2a:	01 96       	adiw	r24, 0x01	; 1
    1e2c:	90 93 c7 01 	sts	0x01C7, r25
    1e30:	80 93 c6 01 	sts	0x01C6, r24
    1e34:	34 c0       	rjmp	.+104    	; 0x1e9e <__vector_11+0x16e>
	else if (flagReceivingBone && boneReceiveTimeout > COMM_TIMEOUT_SEC){flagReceivingBone=fFalse; boneReceiveTimeout=0; __enableLevel1INT();}
    1e36:	80 91 b5 01 	lds	r24, 0x01B5
    1e3a:	88 23       	and	r24, r24
    1e3c:	49 f0       	breq	.+18     	; 0x1e50 <__vector_11+0x120>
    1e3e:	80 91 c6 01 	lds	r24, 0x01C6
    1e42:	90 91 c7 01 	lds	r25, 0x01C7
    1e46:	84 30       	cpi	r24, 0x04	; 4
    1e48:	91 05       	cpc	r25, r1
    1e4a:	14 f0       	brlt	.+4      	; 0x1e50 <__vector_11+0x120>
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	01 c0       	rjmp	.+2      	; 0x1e52 <__vector_11+0x122>
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	88 23       	and	r24, r24
    1e54:	81 f0       	breq	.+32     	; 0x1e76 <__vector_11+0x146>
    1e56:	10 92 b5 01 	sts	0x01B5, r1
    1e5a:	10 92 c7 01 	sts	0x01C7, r1
    1e5e:	10 92 c6 01 	sts	0x01C6, r1
    1e62:	8d e3       	ldi	r24, 0x3D	; 61
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	2d e3       	ldi	r18, 0x3D	; 61
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	f9 01       	movw	r30, r18
    1e6c:	20 81       	ld	r18, Z
    1e6e:	24 60       	ori	r18, 0x04	; 4
    1e70:	fc 01       	movw	r30, r24
    1e72:	20 83       	st	Z, r18
    1e74:	14 c0       	rjmp	.+40     	; 0x1e9e <__vector_11+0x16e>
	else if (!flagReceivingBone && boneReceiveTimeout > 0){boneReceiveTimeout=0;}
    1e76:	80 91 b5 01 	lds	r24, 0x01B5
    1e7a:	88 23       	and	r24, r24
    1e7c:	49 f4       	brne	.+18     	; 0x1e90 <__vector_11+0x160>
    1e7e:	80 91 c6 01 	lds	r24, 0x01C6
    1e82:	90 91 c7 01 	lds	r25, 0x01C7
    1e86:	18 16       	cp	r1, r24
    1e88:	19 06       	cpc	r1, r25
    1e8a:	14 f4       	brge	.+4      	; 0x1e90 <__vector_11+0x160>
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	01 c0       	rjmp	.+2      	; 0x1e92 <__vector_11+0x162>
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	88 23       	and	r24, r24
    1e94:	21 f0       	breq	.+8      	; 0x1e9e <__vector_11+0x16e>
    1e96:	10 92 c7 01 	sts	0x01C7, r1
    1e9a:	10 92 c6 01 	sts	0x01C6, r1
	else;
	
	//*********This is outdated*********
	if ((flagReceivingBone == fTrue || flagGoToSleep == fFalse) && !flagNewShutdown && !restart){ //if waiting for a character in Receive0() or in main program without sleep
    1e9e:	80 91 b5 01 	lds	r24, 0x01B5
    1ea2:	81 30       	cpi	r24, 0x01	; 1
    1ea4:	21 f0       	breq	.+8      	; 0x1eae <__vector_11+0x17e>
    1ea6:	80 91 b4 01 	lds	r24, 0x01B4
    1eaa:	88 23       	and	r24, r24
    1eac:	91 f5       	brne	.+100    	; 0x1f12 <__vector_11+0x1e2>
    1eae:	80 91 be 01 	lds	r24, 0x01BE
    1eb2:	88 23       	and	r24, r24
    1eb4:	71 f5       	brne	.+92     	; 0x1f12 <__vector_11+0x1e2>
    1eb6:	80 91 c2 01 	lds	r24, 0x01C2
    1eba:	88 23       	and	r24, r24
    1ebc:	51 f5       	brne	.+84     	; 0x1f12 <__vector_11+0x1e2>
		timeOut++;
    1ebe:	80 91 c8 01 	lds	r24, 0x01C8
    1ec2:	90 91 c9 01 	lds	r25, 0x01C9
    1ec6:	01 96       	adiw	r24, 0x01	; 1
    1ec8:	90 93 c9 01 	sts	0x01C9, r25
    1ecc:	80 93 c8 01 	sts	0x01C8, r24
		if (timeOut >= 6){
    1ed0:	80 91 c8 01 	lds	r24, 0x01C8
    1ed4:	90 91 c9 01 	lds	r25, 0x01C9
    1ed8:	21 e0       	ldi	r18, 0x01	; 1
    1eda:	86 30       	cpi	r24, 0x06	; 6
    1edc:	91 05       	cpc	r25, r1
    1ede:	0c f4       	brge	.+2      	; 0x1ee2 <__vector_11+0x1b2>
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	22 23       	and	r18, r18
    1ee4:	29 f1       	breq	.+74     	; 0x1f30 <__vector_11+0x200>
			__enableLevel1INT();
    1ee6:	8d e3       	ldi	r24, 0x3D	; 61
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	2d e3       	ldi	r18, 0x3D	; 61
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	f9 01       	movw	r30, r18
    1ef0:	20 81       	ld	r18, Z
    1ef2:	24 60       	ori	r18, 0x04	; 4
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	20 83       	st	Z, r18
			flagReceivingBone = fFalse;
    1ef8:	10 92 b5 01 	sts	0x01B5, r1
			flagGoToSleep = fTrue;
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	80 93 b4 01 	sts	0x01B4, r24
			flagNormalMode=fTrue;
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	80 93 b6 01 	sts	0x01B6, r24
			timeOut = 0;
    1f08:	10 92 c9 01 	sts	0x01C9, r1
    1f0c:	10 92 c8 01 	sts	0x01C8, r1
	else;
	
	//*********This is outdated*********
	if ((flagReceivingBone == fTrue || flagGoToSleep == fFalse) && !flagNewShutdown && !restart){ //if waiting for a character in Receive0() or in main program without sleep
		timeOut++;
		if (timeOut >= 6){
    1f10:	0f c0       	rjmp	.+30     	; 0x1f30 <__vector_11+0x200>
			flagReceivingBone = fFalse;
			flagGoToSleep = fTrue;
			flagNormalMode=fTrue;
			timeOut = 0;
		}
	} else if (timeOut > 0){
    1f12:	80 91 c8 01 	lds	r24, 0x01C8
    1f16:	90 91 c9 01 	lds	r25, 0x01C9
    1f1a:	21 e0       	ldi	r18, 0x01	; 1
    1f1c:	18 16       	cp	r1, r24
    1f1e:	19 06       	cpc	r1, r25
    1f20:	0c f0       	brlt	.+2      	; 0x1f24 <__vector_11+0x1f4>
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	22 23       	and	r18, r18
    1f26:	21 f0       	breq	.+8      	; 0x1f30 <__vector_11+0x200>
		timeOut = 0;
    1f28:	10 92 c9 01 	sts	0x01C9, r1
    1f2c:	10 92 c8 01 	sts	0x01C8, r1
	} else;

}
    1f30:	df 91       	pop	r29
    1f32:	cf 91       	pop	r28
    1f34:	ff 91       	pop	r31
    1f36:	ef 91       	pop	r30
    1f38:	bf 91       	pop	r27
    1f3a:	af 91       	pop	r26
    1f3c:	9f 91       	pop	r25
    1f3e:	8f 91       	pop	r24
    1f40:	7f 91       	pop	r23
    1f42:	6f 91       	pop	r22
    1f44:	5f 91       	pop	r21
    1f46:	4f 91       	pop	r20
    1f48:	3f 91       	pop	r19
    1f4a:	2f 91       	pop	r18
    1f4c:	0f 90       	pop	r0
    1f4e:	0f be       	out	0x3f, r0	; 63
    1f50:	0f 90       	pop	r0
    1f52:	1f 90       	pop	r1
    1f54:	18 95       	reti

00001f56 <__vector_20>:

ISR(USART0_RX_vect){
    1f56:	1f 92       	push	r1
    1f58:	0f 92       	push	r0
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	0f 92       	push	r0
    1f5e:	11 24       	eor	r1, r1
    1f60:	2f 93       	push	r18
    1f62:	3f 93       	push	r19
    1f64:	8f 93       	push	r24
    1f66:	9f 93       	push	r25
    1f68:	ef 93       	push	r30
    1f6a:	ff 93       	push	r31
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
	UCSR0B &= ~(1 << RXCIE0);
    1f74:	81 ec       	ldi	r24, 0xC1	; 193
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	21 ec       	ldi	r18, 0xC1	; 193
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	f9 01       	movw	r30, r18
    1f7e:	20 81       	ld	r18, Z
    1f80:	2f 77       	andi	r18, 0x7F	; 127
    1f82:	fc 01       	movw	r30, r24
    1f84:	20 83       	st	Z, r18
	__killLevel1INT();
    1f86:	8d e3       	ldi	r24, 0x3D	; 61
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	10 82       	st	Z, r1
    1f8e:	8b e6       	ldi	r24, 0x6B	; 107
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	fc 01       	movw	r30, r24
    1f94:	10 82       	st	Z, r1
	flagReceivingBone=fTrue;
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	80 93 b5 01 	sts	0x01B5, r24
}
    1f9c:	df 91       	pop	r29
    1f9e:	cf 91       	pop	r28
    1fa0:	ff 91       	pop	r31
    1fa2:	ef 91       	pop	r30
    1fa4:	9f 91       	pop	r25
    1fa6:	8f 91       	pop	r24
    1fa8:	3f 91       	pop	r19
    1faa:	2f 91       	pop	r18
    1fac:	0f 90       	pop	r0
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	0f 90       	pop	r0
    1fb2:	1f 90       	pop	r1
    1fb4:	18 95       	reti

00001fb6 <main>:

/*--------------------------END-Interrupt Service Routines--------------------------------------------------------------------------------*/
/*--------------------------START-Main Program--------------------------------------------------------------------------------------------*/

int main(void)
{
    1fb6:	cf 93       	push	r28
    1fb8:	df 93       	push	r29
    1fba:	00 d0       	rcall	.+0      	; 0x1fbc <main+0x6>
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
	//Setup
	DeviceInit();
    1fc0:	0e 94 56 11 	call	0x22ac	; 0x22ac <_Z10DeviceInitv>
	AppInit(MYUBRR);
    1fc4:	81 e8       	ldi	r24, 0x81	; 129
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	0e 94 7d 11 	call	0x22fa	; 0x22fa <_Z7AppInitj>
	EnableRTCTimer();
    1fcc:	0e 94 66 12 	call	0x24cc	; 0x24cc <_Z14EnableRTCTimerv>
	getDateTime_eeprom(fTrue,fTrue);
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	61 e0       	ldi	r22, 0x01	; 1
    1fd4:	0e 94 8e 07 	call	0xf1c	; 0xf1c <_Z18getDateTime_eepromhh>
	sei();
    1fd8:	78 94       	sei
	//Prep/make sure power/temp is good
	GetTemp();
    1fda:	0e 94 2b 14 	call	0x2856	; 0x2856 <_Z7GetTempv>
	//flagGoodTemp=fTrue;
	TakeADC();
    1fde:	0e 94 8a 13 	call	0x2714	; 0x2714 <_Z7TakeADCv>
	if (flagGoodVolts && flagGoodTemp){__powPeriph();flagFreshStart=fTrue;}
    1fe2:	80 91 c1 01 	lds	r24, 0x01C1
    1fe6:	88 23       	and	r24, r24
    1fe8:	d1 f0       	breq	.+52     	; 0x201e <main+0x68>
    1fea:	80 91 c0 01 	lds	r24, 0x01C0
    1fee:	88 23       	and	r24, r24
    1ff0:	b1 f0       	breq	.+44     	; 0x201e <main+0x68>
    1ff2:	82 e2       	ldi	r24, 0x22	; 34
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	22 e2       	ldi	r18, 0x22	; 34
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	f9 01       	movw	r30, r18
    1ffc:	20 81       	ld	r18, Z
    1ffe:	20 6e       	ori	r18, 0xE0	; 224
    2000:	fc 01       	movw	r30, r24
    2002:	20 83       	st	Z, r18
    2004:	85 e2       	ldi	r24, 0x25	; 37
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	25 e2       	ldi	r18, 0x25	; 37
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	f9 01       	movw	r30, r18
    200e:	20 81       	ld	r18, Z
    2010:	21 60       	ori	r18, 0x01	; 1
    2012:	fc 01       	movw	r30, r24
    2014:	20 83       	st	Z, r18
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	80 93 c3 01 	sts	0x01C3, r24
    201c:	07 c0       	rjmp	.+14     	; 0x202c <main+0x76>
	else {flagNormalMode=fTrue;flagFreshStart=fFalse;}
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	80 93 b6 01 	sts	0x01B6, r24
    2024:	10 92 c3 01 	sts	0x01C3, r1
    2028:	01 c0       	rjmp	.+2      	; 0x202c <main+0x76>
		
	//main programming loop
	while(fTrue)
    202a:	00 00       	nop
	{				
		//If receiving UART string, go get rest of it.
		if (flagReceivingBone){
    202c:	80 91 b5 01 	lds	r24, 0x01B5
    2030:	88 23       	and	r24, r24
    2032:	89 f0       	breq	.+34     	; 0x2056 <main+0xa0>
			ReceiveBone();
    2034:	0e 94 a1 0b 	call	0x1742	; 0x1742 <_Z11ReceiveBonev>
			__enableLevel1INT();
    2038:	8d e3       	ldi	r24, 0x3D	; 61
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	2d e3       	ldi	r18, 0x3D	; 61
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	f9 01       	movw	r30, r18
    2042:	20 81       	ld	r18, Z
    2044:	24 60       	ori	r18, 0x04	; 4
    2046:	fc 01       	movw	r30, r24
    2048:	20 83       	st	Z, r18
			flagGoToSleep = fTrue;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	80 93 b4 01 	sts	0x01B4, r24
			flagNormalMode=fTrue;
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	80 93 b6 01 	sts	0x01B6, r24
		}
	
		if (flagUpdateGAVRTime || flagUpdateGAVRDate || flagUserDate || flagUserTime){
    2056:	80 91 b7 01 	lds	r24, 0x01B7
    205a:	88 23       	and	r24, r24
    205c:	61 f4       	brne	.+24     	; 0x2076 <main+0xc0>
    205e:	80 91 b8 01 	lds	r24, 0x01B8
    2062:	88 23       	and	r24, r24
    2064:	41 f4       	brne	.+16     	; 0x2076 <main+0xc0>
    2066:	80 91 ba 01 	lds	r24, 0x01BA
    206a:	88 23       	and	r24, r24
    206c:	21 f4       	brne	.+8      	; 0x2076 <main+0xc0>
    206e:	80 91 bb 01 	lds	r24, 0x01BB
    2072:	88 23       	and	r24, r24
    2074:	59 f0       	breq	.+22     	; 0x208c <main+0xd6>
			sendGAVR();
    2076:	0e 94 38 09 	call	0x1270	; 0x1270 <_Z8sendGAVRv>
			__enableLevel1INT();
    207a:	8d e3       	ldi	r24, 0x3D	; 61
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	2d e3       	ldi	r18, 0x3D	; 61
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	f9 01       	movw	r30, r18
    2084:	20 81       	ld	r18, Z
    2086:	24 60       	ori	r18, 0x04	; 4
    2088:	fc 01       	movw	r30, r24
    208a:	20 83       	st	Z, r18
		}

		//When to save to EEPROM. Saves time on lower half of the hour, saves data and time on lower half-hour of midday.
		if (flagNormalMode){
    208c:	80 91 b6 01 	lds	r24, 0x01B6
    2090:	88 23       	and	r24, r24
    2092:	49 f1       	breq	.+82     	; 0x20e6 <main+0x130>
			if (currentTime.getMinutes()%30 == 0){
    2094:	8c e8       	ldi	r24, 0x8C	; 140
    2096:	91 e0       	ldi	r25, 0x01	; 1
    2098:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6myTime10getMinutesEv>
    209c:	9e e1       	ldi	r25, 0x1E	; 30
    209e:	69 2f       	mov	r22, r25
    20a0:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__udivmodqi4>
    20a4:	89 2f       	mov	r24, r25
    20a6:	98 2f       	mov	r25, r24
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	99 23       	and	r25, r25
    20ac:	09 f0       	breq	.+2      	; 0x20b0 <main+0xfa>
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	88 23       	and	r24, r24
    20b2:	c9 f0       	breq	.+50     	; 0x20e6 <main+0x130>
				if (currentTime.getHours()%12 == 0){
    20b4:	8c e8       	ldi	r24, 0x8C	; 140
    20b6:	91 e0       	ldi	r25, 0x01	; 1
    20b8:	0e 94 bb 04 	call	0x976	; 0x976 <_ZN6myTime8getHoursEv>
    20bc:	9c e0       	ldi	r25, 0x0C	; 12
    20be:	69 2f       	mov	r22, r25
    20c0:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__udivmodqi4>
    20c4:	89 2f       	mov	r24, r25
    20c6:	98 2f       	mov	r25, r24
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	99 23       	and	r25, r25
    20cc:	09 f0       	breq	.+2      	; 0x20d0 <main+0x11a>
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	88 23       	and	r24, r24
    20d2:	29 f0       	breq	.+10     	; 0x20de <main+0x128>
					saveDateTime_eeprom(fTrue,fTrue);
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	61 e0       	ldi	r22, 0x01	; 1
    20d8:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
    20dc:	04 c0       	rjmp	.+8      	; 0x20e6 <main+0x130>
				} else {
					saveDateTime_eeprom(fTrue,fFalse);
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	60 e0       	ldi	r22, 0x00	; 0
    20e2:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
				}	
			}						
		}
		
		//Take ADC reading to check battery level, temp to check board temperature.
		if (flagNormalMode){
    20e6:	80 91 b6 01 	lds	r24, 0x01B6
    20ea:	88 23       	and	r24, r24
    20ec:	91 f1       	breq	.+100    	; 0x2152 <main+0x19c>
			TakeADC();
    20ee:	0e 94 8a 13 	call	0x2714	; 0x2714 <_Z7TakeADCv>
			GetTemp();
    20f2:	0e 94 2b 14 	call	0x2856	; 0x2856 <_Z7GetTempv>
			//If both are good & shutodwn is low, keep it low. If shutdown is high, pull low and enable restart
			if (flagGoodVolts && flagGoodTemp){
    20f6:	80 91 c1 01 	lds	r24, 0x01C1
    20fa:	88 23       	and	r24, r24
    20fc:	01 f1       	breq	.+64     	; 0x213e <main+0x188>
    20fe:	80 91 c0 01 	lds	r24, 0x01C0
    2102:	88 23       	and	r24, r24
    2104:	e1 f0       	breq	.+56     	; 0x213e <main+0x188>
				__powPeriph();
    2106:	82 e2       	ldi	r24, 0x22	; 34
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	22 e2       	ldi	r18, 0x22	; 34
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	f9 01       	movw	r30, r18
    2110:	20 81       	ld	r18, Z
    2112:	20 6e       	ori	r18, 0xE0	; 224
    2114:	fc 01       	movw	r30, r24
    2116:	20 83       	st	Z, r18
    2118:	85 e2       	ldi	r24, 0x25	; 37
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	25 e2       	ldi	r18, 0x25	; 37
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	f9 01       	movw	r30, r18
    2122:	20 81       	ld	r18, Z
    2124:	21 60       	ori	r18, 0x01	; 1
    2126:	fc 01       	movw	r30, r24
    2128:	20 83       	st	Z, r18
				if( flagShutdown == fTrue){restart = fTrue;}
    212a:	80 91 bf 01 	lds	r24, 0x01BF
    212e:	81 30       	cpi	r24, 0x01	; 1
    2130:	19 f4       	brne	.+6      	; 0x2138 <main+0x182>
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	80 93 c2 01 	sts	0x01C2, r24
				flagShutdown = fFalse;
    2138:	10 92 bf 01 	sts	0x01BF, r1
    213c:	0a c0       	rjmp	.+20     	; 0x2152 <main+0x19c>
			//If one is bad and shutdown is low, pull high as well as pull new shutdown high to indicate imminent power kill
			} else {
				if (flagShutdown == fFalse){
    213e:	80 91 bf 01 	lds	r24, 0x01BF
    2142:	88 23       	and	r24, r24
    2144:	19 f4       	brne	.+6      	; 0x214c <main+0x196>
					flagNewShutdown = fTrue;
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	80 93 be 01 	sts	0x01BE, r24
				}
				flagShutdown = fTrue;
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	80 93 bf 01 	sts	0x01BF, r24
			}
		}			
		
		//About to shutdown, save EEPROM
		if (flagNewShutdown){
    2152:	80 91 be 01 	lds	r24, 0x01BE
    2156:	88 23       	and	r24, r24
    2158:	09 f4       	brne	.+2      	; 0x215c <main+0x1a6>
    215a:	5f c0       	rjmp	.+190    	; 0x221a <main+0x264>
			//Make sure nothing messes with the routine that we care about
			EIMSK = 0;
    215c:	8d e3       	ldi	r24, 0x3D	; 61
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	fc 01       	movw	r30, r24
    2162:	10 82       	st	Z, r1
			flagGoToSleep = fTrue;
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	80 93 b4 01 	sts	0x01B4, r24
			flagReceivingBone = fFalse;
    216a:	10 92 b5 01 	sts	0x01B5, r1
			saveDateTime_eeprom(fTrue,fTrue);
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	61 e0       	ldi	r22, 0x01	; 1
    2172:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
			
			//Alert BeagleBone and Graphics AVR that powerdown is imminent=> raise SHUTDOWN PINS for 3 clk cycles
			prtBBleds |= (1 << bnBBint);
    2176:	82 e2       	ldi	r24, 0x22	; 34
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	22 e2       	ldi	r18, 0x22	; 34
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	f9 01       	movw	r30, r18
    2180:	20 81       	ld	r18, Z
    2182:	22 60       	ori	r18, 0x02	; 2
    2184:	fc 01       	movw	r30, r24
    2186:	20 83       	st	Z, r18
			prtGAVRleds |= (1 << bnGAVRint);
    2188:	82 e2       	ldi	r24, 0x22	; 34
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	22 e2       	ldi	r18, 0x22	; 34
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	f9 01       	movw	r30, r18
    2192:	20 81       	ld	r18, Z
    2194:	28 60       	ori	r18, 0x08	; 8
    2196:	fc 01       	movw	r30, r24
    2198:	20 83       	st	Z, r18
			if (!flagGoodTemp){
    219a:	80 91 c0 01 	lds	r24, 0x01C0
    219e:	88 23       	and	r24, r24
    21a0:	91 f4       	brne	.+36     	; 0x21c6 <main+0x210>
				prtBBleds |= (1 << bnBBtemp);
    21a2:	82 e2       	ldi	r24, 0x22	; 34
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	22 e2       	ldi	r18, 0x22	; 34
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	f9 01       	movw	r30, r18
    21ac:	20 81       	ld	r18, Z
    21ae:	24 60       	ori	r18, 0x04	; 4
    21b0:	fc 01       	movw	r30, r24
    21b2:	20 83       	st	Z, r18
				prtGAVRleds |= (1 << bnGAVRtemp);
    21b4:	82 e2       	ldi	r24, 0x22	; 34
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	22 e2       	ldi	r18, 0x22	; 34
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	f9 01       	movw	r30, r18
    21be:	20 81       	ld	r18, Z
    21c0:	20 61       	ori	r18, 0x10	; 16
    21c2:	fc 01       	movw	r30, r24
    21c4:	20 83       	st	Z, r18
			}
			
			//Five seconds for processing to finish on other chips
			Wait_sec(6);	
    21c6:	86 e0       	ldi	r24, 0x06	; 6
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	0e 94 d5 12 	call	0x25aa	; 0x25aa <_Z8Wait_seci>
			
			prtBBleds &= ~((1 << bnBBint)|(1 << bnBBtemp));
    21ce:	82 e2       	ldi	r24, 0x22	; 34
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	22 e2       	ldi	r18, 0x22	; 34
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	f9 01       	movw	r30, r18
    21d8:	20 81       	ld	r18, Z
    21da:	29 7f       	andi	r18, 0xF9	; 249
    21dc:	fc 01       	movw	r30, r24
    21de:	20 83       	st	Z, r18
			prtGAVRleds &= ~((1 << bnGAVRint)|(1 << bnGAVRtemp));
    21e0:	82 e2       	ldi	r24, 0x22	; 34
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	22 e2       	ldi	r18, 0x22	; 34
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	f9 01       	movw	r30, r18
    21ea:	20 81       	ld	r18, Z
    21ec:	27 7e       	andi	r18, 0xE7	; 231
    21ee:	fc 01       	movw	r30, r24
    21f0:	20 83       	st	Z, r18
			
			//Kill power
			__killPeriphPow();
    21f2:	82 e2       	ldi	r24, 0x22	; 34
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	22 e2       	ldi	r18, 0x22	; 34
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	f9 01       	movw	r30, r18
    21fc:	20 81       	ld	r18, Z
    21fe:	2f 71       	andi	r18, 0x1F	; 31
    2200:	fc 01       	movw	r30, r24
    2202:	20 83       	st	Z, r18
    2204:	85 e2       	ldi	r24, 0x25	; 37
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	25 e2       	ldi	r18, 0x25	; 37
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	f9 01       	movw	r30, r18
    220e:	20 81       	ld	r18, Z
    2210:	2e 7f       	andi	r18, 0xFE	; 254
    2212:	fc 01       	movw	r30, r24
    2214:	20 83       	st	Z, r18
			flagNewShutdown = fFalse;
    2216:	10 92 be 01 	sts	0x01BE, r1
		}
		
		//If Restart, broadcast date and time to BeagleBone and other AVR
		if (restart){
    221a:	80 91 c2 01 	lds	r24, 0x01C2
    221e:	88 23       	and	r24, r24
    2220:	d9 f1       	breq	.+118    	; 0x2298 <main+0x2e2>
			__enableLevel1INT();	//enable BONE interrupt. Will come out with newest time. Give it 10 seconds to kill
    2222:	8d e3       	ldi	r24, 0x3D	; 61
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	2d e3       	ldi	r18, 0x3D	; 61
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	f9 01       	movw	r30, r18
    222c:	20 81       	ld	r18, Z
    222e:	24 60       	ori	r18, 0x04	; 4
    2230:	fc 01       	movw	r30, r24
    2232:	20 83       	st	Z, r18
			__powPeriph();
    2234:	82 e2       	ldi	r24, 0x22	; 34
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	22 e2       	ldi	r18, 0x22	; 34
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	f9 01       	movw	r30, r18
    223e:	20 81       	ld	r18, Z
    2240:	20 6e       	ori	r18, 0xE0	; 224
    2242:	fc 01       	movw	r30, r24
    2244:	20 83       	st	Z, r18
    2246:	85 e2       	ldi	r24, 0x25	; 37
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	25 e2       	ldi	r18, 0x25	; 37
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	f9 01       	movw	r30, r18
    2250:	20 81       	ld	r18, Z
    2252:	21 60       	ori	r18, 0x01	; 1
    2254:	fc 01       	movw	r30, r24
    2256:	20 83       	st	Z, r18
			//Check to see if pins are ready. Use timeout of 10 seconds for pins to come high.
			int waitTime = 0;
    2258:	1a 82       	std	Y+2, r1	; 0x02
    225a:	19 82       	std	Y+1, r1	; 0x01
			while (waitTime < 3 && restart){waitTime++; Wait_sec(1);}
    225c:	09 c0       	rjmp	.+18     	; 0x2270 <main+0x2ba>
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	9a 81       	ldd	r25, Y+2	; 0x02
    2262:	01 96       	adiw	r24, 0x01	; 1
    2264:	9a 83       	std	Y+2, r25	; 0x02
    2266:	89 83       	std	Y+1, r24	; 0x01
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	0e 94 d5 12 	call	0x25aa	; 0x25aa <_Z8Wait_seci>
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	9a 81       	ldd	r25, Y+2	; 0x02
    2274:	83 30       	cpi	r24, 0x03	; 3
    2276:	91 05       	cpc	r25, r1
    2278:	34 f4       	brge	.+12     	; 0x2286 <main+0x2d0>
    227a:	80 91 c2 01 	lds	r24, 0x01C2
    227e:	88 23       	and	r24, r24
    2280:	11 f0       	breq	.+4      	; 0x2286 <main+0x2d0>
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	01 c0       	rjmp	.+2      	; 0x2288 <main+0x2d2>
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	88 23       	and	r24, r24
    228a:	49 f7       	brne	.-46     	; 0x225e <main+0x2a8>
			flagUpdateGAVRDate=fTrue;
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	80 93 b8 01 	sts	0x01B8, r24
			flagUpdateGAVRTime=fTrue;
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	80 93 b7 01 	sts	0x01B7, r24
			//get an updated date and time from the BeagleBone. Always update GAVR.			
		}		
		
			
		//If it's time to go to sleep, go to sleep. INT0 or TIM2_overflow will wake it up.
		if (flagGoToSleep){GoToSleep(flagShutdown);}
    2298:	80 91 b4 01 	lds	r24, 0x01B4
    229c:	88 23       	and	r24, r24
    229e:	09 f4       	brne	.+2      	; 0x22a2 <main+0x2ec>
    22a0:	c4 ce       	rjmp	.-632    	; 0x202a <main+0x74>
    22a2:	80 91 bf 01 	lds	r24, 0x01BF
    22a6:	0e 94 0d 13 	call	0x261a	; 0x261a <_Z9GoToSleeph>
	TakeADC();
	if (flagGoodVolts && flagGoodTemp){__powPeriph();flagFreshStart=fTrue;}
	else {flagNormalMode=fTrue;flagFreshStart=fFalse;}
		
	//main programming loop
	while(fTrue)
    22aa:	bf ce       	rjmp	.-642    	; 0x202a <main+0x74>

000022ac <_Z10DeviceInitv>:

/*--------------------------END-Main Program-------------------------------------------------------------------------------------*/
/*--------------------------START-Public Funtions--------------------------------------------------------------------------------*/

/*************************************************************************************************************/
void DeviceInit(){
    22ac:	cf 93       	push	r28
    22ae:	df 93       	push	r29
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
	//Set all ports to input with no pull
	DDRA = 0;
    22b4:	81 e2       	ldi	r24, 0x21	; 33
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	fc 01       	movw	r30, r24
    22ba:	10 82       	st	Z, r1
	DDRB = 0;
    22bc:	84 e2       	ldi	r24, 0x24	; 36
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	fc 01       	movw	r30, r24
    22c2:	10 82       	st	Z, r1
	DDRC = 0;
    22c4:	87 e2       	ldi	r24, 0x27	; 39
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	fc 01       	movw	r30, r24
    22ca:	10 82       	st	Z, r1
	DDRD = 0;
    22cc:	8a e2       	ldi	r24, 0x2A	; 42
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	fc 01       	movw	r30, r24
    22d2:	10 82       	st	Z, r1
	
	PORTA = 0;
    22d4:	82 e2       	ldi	r24, 0x22	; 34
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	fc 01       	movw	r30, r24
    22da:	10 82       	st	Z, r1
	PORTB = 0;
    22dc:	85 e2       	ldi	r24, 0x25	; 37
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	fc 01       	movw	r30, r24
    22e2:	10 82       	st	Z, r1
	PORTC = 0;
    22e4:	88 e2       	ldi	r24, 0x28	; 40
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	fc 01       	movw	r30, r24
    22ea:	10 82       	st	Z, r1
	PORTD = 0;
    22ec:	8b e2       	ldi	r24, 0x2B	; 43
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	fc 01       	movw	r30, r24
    22f2:	10 82       	st	Z, r1
}
    22f4:	df 91       	pop	r29
    22f6:	cf 91       	pop	r28
    22f8:	08 95       	ret

000022fa <_Z7AppInitj>:
/*************************************************************************************************************/
void AppInit(unsigned int ubrr){
    22fa:	cf 93       	push	r28
    22fc:	df 93       	push	r29
    22fe:	00 d0       	rcall	.+0      	; 0x2300 <_Z7AppInitj+0x6>
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
    2304:	9a 83       	std	Y+2, r25	; 0x02
    2306:	89 83       	std	Y+1, r24	; 0x01
	
	//Set BAUD rate of UART
	UBRR0L = ubrr;   												//set low byte of baud rate
    2308:	84 ec       	ldi	r24, 0xC4	; 196
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	29 81       	ldd	r18, Y+1	; 0x01
    230e:	fc 01       	movw	r30, r24
    2310:	20 83       	st	Z, r18
	UBRR0H = (ubrr >> 8);											//set high byte of baud rate
    2312:	85 ec       	ldi	r24, 0xC5	; 197
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	29 81       	ldd	r18, Y+1	; 0x01
    2318:	3a 81       	ldd	r19, Y+2	; 0x02
    231a:	23 2f       	mov	r18, r19
    231c:	33 27       	eor	r19, r19
    231e:	fc 01       	movw	r30, r24
    2320:	20 83       	st	Z, r18
	//UCSR0A |= (1 << U2X0);										//set high speed baud clock, in ASYNC mode
	
	//Enable UART_TX0 and UART_RX0
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);
    2322:	81 ec       	ldi	r24, 0xC1	; 193
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	28 e1       	ldi	r18, 0x18	; 24
    2328:	fc 01       	movw	r30, r24
    232a:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);							//Asynchronous; 8 data bits, no parity
    232c:	82 ec       	ldi	r24, 0xC2	; 194
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	26 e0       	ldi	r18, 0x06	; 6
    2332:	fc 01       	movw	r30, r24
    2334:	20 83       	st	Z, r18
	//UCSR0B |= (1 << RXCIE0);
	
	//Disable power to all peripherals
	PRR0 |= (1 << PRTWI)|(1 << PRTIM2)|(1 << PRTIM0)|(1 << PRUSART1)|(1 << PRTIM1)|(1 << PRADC)|(1 << PRSPI);  //Turn EVERYTHING off initially except USART0(UART0)
    2336:	84 e6       	ldi	r24, 0x64	; 100
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	24 e6       	ldi	r18, 0x64	; 100
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	f9 01       	movw	r30, r18
    2340:	20 81       	ld	r18, Z
    2342:	2d 6f       	ori	r18, 0xFD	; 253
    2344:	fc 01       	movw	r30, r24
    2346:	20 83       	st	Z, r18

	//Enable status LEDs
	ddrSLEEPled |= (1 << bnSLEEPled);
    2348:	8a e2       	ldi	r24, 0x2A	; 42
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	2a e2       	ldi	r18, 0x2A	; 42
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	f9 01       	movw	r30, r18
    2352:	20 81       	ld	r18, Z
    2354:	20 68       	ori	r18, 0x80	; 128
    2356:	fc 01       	movw	r30, r24
    2358:	20 83       	st	Z, r18
	ddrSTATUSled |= (1 << bnSTATUSled);
    235a:	87 e2       	ldi	r24, 0x27	; 39
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	27 e2       	ldi	r18, 0x27	; 39
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	f9 01       	movw	r30, r18
    2364:	20 81       	ld	r18, Z
    2366:	24 60       	ori	r18, 0x04	; 4
    2368:	fc 01       	movw	r30, r24
    236a:	20 83       	st	Z, r18
	prtSLEEPled &= ~(1 << bnSLEEPled);	//turn off initially
    236c:	8b e2       	ldi	r24, 0x2B	; 43
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	2b e2       	ldi	r18, 0x2B	; 43
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	f9 01       	movw	r30, r18
    2376:	20 81       	ld	r18, Z
    2378:	2f 77       	andi	r18, 0x7F	; 127
    237a:	fc 01       	movw	r30, r24
    237c:	20 83       	st	Z, r18
	prtSTATUSled |= (1 << bnSTATUSled);	//turn on initially
    237e:	88 e2       	ldi	r24, 0x28	; 40
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	28 e2       	ldi	r18, 0x28	; 40
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	f9 01       	movw	r30, r18
    2388:	20 81       	ld	r18, Z
    238a:	24 60       	ori	r18, 0x04	; 4
    238c:	fc 01       	movw	r30, r24
    238e:	20 83       	st	Z, r18
	
	//Enable BB and GAVR alert pins...outputs, no pull by default.
	ddrBBleds |= (1 << bnBBint)|(1 << bnBBtemp);
    2390:	81 e2       	ldi	r24, 0x21	; 33
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	21 e2       	ldi	r18, 0x21	; 33
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	f9 01       	movw	r30, r18
    239a:	20 81       	ld	r18, Z
    239c:	26 60       	ori	r18, 0x06	; 6
    239e:	fc 01       	movw	r30, r24
    23a0:	20 83       	st	Z, r18
	ddrGAVRleds |= (1 << bnGAVRint)|(1 << bnGAVRtemp);
    23a2:	81 e2       	ldi	r24, 0x21	; 33
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	21 e2       	ldi	r18, 0x21	; 33
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	f9 01       	movw	r30, r18
    23ac:	20 81       	ld	r18, Z
    23ae:	28 61       	ori	r18, 0x18	; 24
    23b0:	fc 01       	movw	r30, r24
    23b2:	20 83       	st	Z, r18
	
	//Enable GAVR interrupt pin, our PB3, it's INT2
	ddrGAVRINT |= (1 << bnGAVRINT);
    23b4:	84 e2       	ldi	r24, 0x24	; 36
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	24 e2       	ldi	r18, 0x24	; 36
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	f9 01       	movw	r30, r18
    23be:	20 81       	ld	r18, Z
    23c0:	28 60       	ori	r18, 0x08	; 8
    23c2:	fc 01       	movw	r30, r24
    23c4:	20 83       	st	Z, r18
	prtGAVRINT &=  ~(1 << bnGAVRINT);	//set low at first
    23c6:	85 e2       	ldi	r24, 0x25	; 37
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	25 e2       	ldi	r18, 0x25	; 37
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	f9 01       	movw	r30, r18
    23d0:	20 81       	ld	r18, Z
    23d2:	27 7f       	andi	r18, 0xF7	; 247
    23d4:	fc 01       	movw	r30, r24
    23d6:	20 83       	st	Z, r18
	
	//Enable enable signals
	ddrENABLE |= (1 << bnGPSen)|(1 << bnGAVRen)|(1 << bnLCDen);
    23d8:	81 e2       	ldi	r24, 0x21	; 33
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	21 e2       	ldi	r18, 0x21	; 33
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	f9 01       	movw	r30, r18
    23e2:	20 81       	ld	r18, Z
    23e4:	20 6e       	ori	r18, 0xE0	; 224
    23e6:	fc 01       	movw	r30, r24
    23e8:	20 83       	st	Z, r18
	ddrBBen |= (1 << bnBBen);
    23ea:	84 e2       	ldi	r24, 0x24	; 36
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	24 e2       	ldi	r18, 0x24	; 36
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	f9 01       	movw	r30, r18
    23f4:	20 81       	ld	r18, Z
    23f6:	21 60       	ori	r18, 0x01	; 1
    23f8:	fc 01       	movw	r30, r24
    23fa:	20 83       	st	Z, r18
	ddrTEMPen |= (1 << bnTEMPen);
    23fc:	84 e2       	ldi	r24, 0x24	; 36
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	24 e2       	ldi	r18, 0x24	; 36
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	f9 01       	movw	r30, r18
    2406:	20 81       	ld	r18, Z
    2408:	22 60       	ori	r18, 0x02	; 2
    240a:	fc 01       	movw	r30, r24
    240c:	20 83       	st	Z, r18
	prtTEMPen |= (1 << bnTEMPen);
    240e:	85 e2       	ldi	r24, 0x25	; 37
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	25 e2       	ldi	r18, 0x25	; 37
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	f9 01       	movw	r30, r18
    2418:	20 81       	ld	r18, Z
    241a:	22 60       	ori	r18, 0x02	; 2
    241c:	fc 01       	movw	r30, r24
    241e:	20 83       	st	Z, r18
	

	
	//Enable INT2. Note* Pin change interrupts will NOT wake AVR from Power-Save mode. Only INT0-2 will.
	EICRA = (1 << ISC21)|(1 << ISC20);			//falling edge of INT2 enables interrupt
    2420:	89 e6       	ldi	r24, 0x69	; 105
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	20 e3       	ldi	r18, 0x30	; 48
    2426:	fc 01       	movw	r30, r24
    2428:	20 83       	st	Z, r18
	EIMSK = (1 << INT2);			//enable INT2 global interrupt
    242a:	8d e3       	ldi	r24, 0x3D	; 61
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	24 e0       	ldi	r18, 0x04	; 4
    2430:	fc 01       	movw	r30, r24
    2432:	20 83       	st	Z, r18
	
	//Enable SPI for TI temperature
	ddrSpi0 |= (1 << bnMosi0)|(1 << bnSck0)|(1 << bnSS0);	//outputs
    2434:	84 e2       	ldi	r24, 0x24	; 36
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	24 e2       	ldi	r18, 0x24	; 36
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	f9 01       	movw	r30, r18
    243e:	20 81       	ld	r18, Z
    2440:	20 6b       	ori	r18, 0xB0	; 176
    2442:	fc 01       	movw	r30, r24
    2444:	20 83       	st	Z, r18
	ddrSpi0 &= ~(1 << bnMiso0);
    2446:	84 e2       	ldi	r24, 0x24	; 36
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	24 e2       	ldi	r18, 0x24	; 36
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	f9 01       	movw	r30, r18
    2450:	20 81       	ld	r18, Z
    2452:	2f 7b       	andi	r18, 0xBF	; 191
    2454:	fc 01       	movw	r30, r24
    2456:	20 83       	st	Z, r18
	prtSpi0 |= (1 << bnSS0)|(1 << bnSck0);		//keep SS and SCK high
    2458:	85 e2       	ldi	r24, 0x25	; 37
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	25 e2       	ldi	r18, 0x25	; 37
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	f9 01       	movw	r30, r18
    2462:	20 81       	ld	r18, Z
    2464:	20 69       	ori	r18, 0x90	; 144
    2466:	fc 01       	movw	r30, r24
    2468:	20 83       	st	Z, r18
	prtSpi0 &= ~(1 << bnMosi0);		//keep Miso low
    246a:	85 e2       	ldi	r24, 0x25	; 37
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	25 e2       	ldi	r18, 0x25	; 37
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	f9 01       	movw	r30, r18
    2474:	20 81       	ld	r18, Z
    2476:	2f 7d       	andi	r18, 0xDF	; 223
    2478:	fc 01       	movw	r30, r24
    247a:	20 83       	st	Z, r18
	
	//Init variables
	flagGoToSleep = fTrue;			//changes to fTrue in final implementation
    247c:	81 e0       	ldi	r24, 0x01	; 1
    247e:	80 93 b4 01 	sts	0x01B4, r24
	flagReceivingBone = fFalse;
    2482:	10 92 b5 01 	sts	0x01B5, r1
	flagNormalMode=fTrue;
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	80 93 b6 01 	sts	0x01B6, r24

	flagUpdateGAVRTime=fFalse;
    248c:	10 92 b7 01 	sts	0x01B7, r1
	flagUpdateGAVRDate=fFalse;
    2490:	10 92 b8 01 	sts	0x01B8, r1
	flagSendingGAVR=fFalse;
    2494:	10 92 b9 01 	sts	0x01B9, r1
	flagUserTime=fFalse;
    2498:	10 92 bb 01 	sts	0x01BB, r1
	flagUserDate=fFalse;
    249c:	10 92 ba 01 	sts	0x01BA, r1
	flagInvalidDateTime=fFalse;
    24a0:	10 92 bc 01 	sts	0x01BC, r1
	flagWaitingToSendGAVR=fFalse;
    24a4:	10 92 bd 01 	sts	0x01BD, r1
	
	restart=fFalse;
    24a8:	10 92 c2 01 	sts	0x01C2, r1
	flagNewShutdown=fFalse;
    24ac:	10 92 be 01 	sts	0x01BE, r1
	flagShutdown  = fFalse;
    24b0:	10 92 bf 01 	sts	0x01BF, r1
	flagGoodVolts=fFalse;
    24b4:	10 92 c1 01 	sts	0x01C1, r1
	flagGoodTemp=fFalse;
    24b8:	10 92 c0 01 	sts	0x01C0, r1
	flagFreshStart=fTrue;
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	80 93 c3 01 	sts	0x01C3, r24
}
    24c2:	0f 90       	pop	r0
    24c4:	0f 90       	pop	r0
    24c6:	df 91       	pop	r29
    24c8:	cf 91       	pop	r28
    24ca:	08 95       	ret

000024cc <_Z14EnableRTCTimerv>:
/*************************************************************************************************************/
void EnableRTCTimer(){
    24cc:	cf 93       	push	r28
    24ce:	df 93       	push	r29
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
	//Asynchronous should be done based on TOSC1 and TOSC2
	//Give power back to Timer2
	PRR0 &= ~(1 << PRTIM2);
    24d4:	84 e6       	ldi	r24, 0x64	; 100
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	24 e6       	ldi	r18, 0x64	; 100
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	f9 01       	movw	r30, r18
    24de:	20 81       	ld	r18, Z
    24e0:	2f 7b       	andi	r18, 0xBF	; 191
    24e2:	fc 01       	movw	r30, r24
    24e4:	20 83       	st	Z, r18
	Wait_ms(1);	//give it time to power on
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	0e 94 a4 12 	call	0x2548	; 0x2548 <_Z7Wait_msi>
	
	//Set to Asynchronous mode, uses TOSC1/TOSC2 pins
	ASSR |= (1 << AS2);
    24ee:	86 eb       	ldi	r24, 0xB6	; 182
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	26 eb       	ldi	r18, 0xB6	; 182
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	f9 01       	movw	r30, r18
    24f8:	20 81       	ld	r18, Z
    24fa:	20 62       	ori	r18, 0x20	; 32
    24fc:	fc 01       	movw	r30, r24
    24fe:	20 83       	st	Z, r18
	
	//Set prescaler, initialize registers
	TCCR2B |= (1 << CS22)|(1 << CS20);	//128 prescaler, should click into overflow every second
    2500:	81 eb       	ldi	r24, 0xB1	; 177
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	21 eb       	ldi	r18, 0xB1	; 177
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	f9 01       	movw	r30, r18
    250a:	20 81       	ld	r18, Z
    250c:	25 60       	ori	r18, 0x05	; 5
    250e:	fc 01       	movw	r30, r24
    2510:	20 83       	st	Z, r18
	while ((ASSR & ((1 << TCR2BUB)|(1 << TCN2UB))));	//wait for it not to be busy
    2512:	86 eb       	ldi	r24, 0xB6	; 182
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	fc 01       	movw	r30, r24
    2518:	80 81       	ld	r24, Z
    251a:	88 2f       	mov	r24, r24
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	81 71       	andi	r24, 0x11	; 17
    2520:	90 70       	andi	r25, 0x00	; 0
    2522:	21 e0       	ldi	r18, 0x01	; 1
    2524:	00 97       	sbiw	r24, 0x00	; 0
    2526:	09 f4       	brne	.+2      	; 0x252a <_Z14EnableRTCTimerv+0x5e>
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	22 23       	and	r18, r18
    252c:	91 f7       	brne	.-28     	; 0x2512 <_Z14EnableRTCTimerv+0x46>
	TIFR2 = (1 << TOV2);								//Clear any interrupts pending for the timer
    252e:	87 e3       	ldi	r24, 0x37	; 55
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	21 e0       	ldi	r18, 0x01	; 1
    2534:	fc 01       	movw	r30, r24
    2536:	20 83       	st	Z, r18
	TIMSK2 = (1 << TOIE2);								//Enable overflow on it
    2538:	80 e7       	ldi	r24, 0x70	; 112
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	21 e0       	ldi	r18, 0x01	; 1
    253e:	fc 01       	movw	r30, r24
    2540:	20 83       	st	Z, r18
	
	//Away we go
}
    2542:	df 91       	pop	r29
    2544:	cf 91       	pop	r28
    2546:	08 95       	ret

00002548 <_Z7Wait_msi>:
/*************************************************************************************************************/
void Wait_ms(volatile int delay)
{
    2548:	cf 93       	push	r28
    254a:	df 93       	push	r29
    254c:	00 d0       	rcall	.+0      	; 0x254e <_Z7Wait_msi+0x6>
    254e:	00 d0       	rcall	.+0      	; 0x2550 <_Z7Wait_msi+0x8>
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
    2554:	9c 83       	std	Y+4, r25	; 0x04
    2556:	8b 83       	std	Y+3, r24	; 0x03
	volatile int i;

	while(delay > 0){
    2558:	18 c0       	rjmp	.+48     	; 0x258a <_Z7Wait_msi+0x42>
		for(i = 0; i < 800; i++){
    255a:	1a 82       	std	Y+2, r1	; 0x02
    255c:	19 82       	std	Y+1, r1	; 0x01
    255e:	06 c0       	rjmp	.+12     	; 0x256c <_Z7Wait_msi+0x24>
			asm volatile("nop");
    2560:	00 00       	nop
void Wait_ms(volatile int delay)
{
	volatile int i;

	while(delay > 0){
		for(i = 0; i < 800; i++){
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	9a 81       	ldd	r25, Y+2	; 0x02
    2566:	01 96       	adiw	r24, 0x01	; 1
    2568:	9a 83       	std	Y+2, r25	; 0x02
    256a:	89 83       	std	Y+1, r24	; 0x01
    256c:	89 81       	ldd	r24, Y+1	; 0x01
    256e:	9a 81       	ldd	r25, Y+2	; 0x02
    2570:	21 e0       	ldi	r18, 0x01	; 1
    2572:	33 e0       	ldi	r19, 0x03	; 3
    2574:	80 32       	cpi	r24, 0x20	; 32
    2576:	93 07       	cpc	r25, r19
    2578:	0c f0       	brlt	.+2      	; 0x257c <_Z7Wait_msi+0x34>
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	22 23       	and	r18, r18
    257e:	81 f7       	brne	.-32     	; 0x2560 <_Z7Wait_msi+0x18>
			asm volatile("nop");
		}
		delay -= 1;
    2580:	8b 81       	ldd	r24, Y+3	; 0x03
    2582:	9c 81       	ldd	r25, Y+4	; 0x04
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	9c 83       	std	Y+4, r25	; 0x04
    2588:	8b 83       	std	Y+3, r24	; 0x03
/*************************************************************************************************************/
void Wait_ms(volatile int delay)
{
	volatile int i;

	while(delay > 0){
    258a:	8b 81       	ldd	r24, Y+3	; 0x03
    258c:	9c 81       	ldd	r25, Y+4	; 0x04
    258e:	21 e0       	ldi	r18, 0x01	; 1
    2590:	18 16       	cp	r1, r24
    2592:	19 06       	cpc	r1, r25
    2594:	0c f0       	brlt	.+2      	; 0x2598 <_Z7Wait_msi+0x50>
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	22 23       	and	r18, r18
    259a:	f9 f6       	brne	.-66     	; 0x255a <_Z7Wait_msi+0x12>
		for(i = 0; i < 800; i++){
			asm volatile("nop");
		}
		delay -= 1;
	}
}
    259c:	0f 90       	pop	r0
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	df 91       	pop	r29
    25a6:	cf 91       	pop	r28
    25a8:	08 95       	ret

000025aa <_Z8Wait_seci>:
/*************************************************************************************************************/
void Wait_sec(volatile int sec){
    25aa:	cf 93       	push	r28
    25ac:	df 93       	push	r29
    25ae:	00 d0       	rcall	.+0      	; 0x25b0 <_Z8Wait_seci+0x6>
    25b0:	00 d0       	rcall	.+0      	; 0x25b2 <_Z8Wait_seci+0x8>
    25b2:	00 d0       	rcall	.+0      	; 0x25b4 <_Z8Wait_seci+0xa>
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
    25b8:	9e 83       	std	Y+6, r25	; 0x06
    25ba:	8d 83       	std	Y+5, r24	; 0x05
	volatile int startingTime = currentTime.getSeconds();
    25bc:	8c e8       	ldi	r24, 0x8C	; 140
    25be:	91 e0       	ldi	r25, 0x01	; 1
    25c0:	0e 94 99 04 	call	0x932	; 0x932 <_ZN6myTime10getSecondsEv>
    25c4:	88 2f       	mov	r24, r24
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	9a 83       	std	Y+2, r25	; 0x02
    25ca:	89 83       	std	Y+1, r24	; 0x01
	volatile int endingTime= (startingTime+sec)%60;
    25cc:	29 81       	ldd	r18, Y+1	; 0x01
    25ce:	3a 81       	ldd	r19, Y+2	; 0x02
    25d0:	8d 81       	ldd	r24, Y+5	; 0x05
    25d2:	9e 81       	ldd	r25, Y+6	; 0x06
    25d4:	82 0f       	add	r24, r18
    25d6:	93 1f       	adc	r25, r19
    25d8:	2c e3       	ldi	r18, 0x3C	; 60
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	b9 01       	movw	r22, r18
    25de:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__divmodhi4>
    25e2:	9c 83       	std	Y+4, r25	; 0x04
    25e4:	8b 83       	std	Y+3, r24	; 0x03
	while (currentTime.getSeconds() != endingTime){asm volatile ("nop");}
    25e6:	01 c0       	rjmp	.+2      	; 0x25ea <_Z8Wait_seci+0x40>
    25e8:	00 00       	nop
    25ea:	8c e8       	ldi	r24, 0x8C	; 140
    25ec:	91 e0       	ldi	r25, 0x01	; 1
    25ee:	0e 94 99 04 	call	0x932	; 0x932 <_ZN6myTime10getSecondsEv>
    25f2:	28 2f       	mov	r18, r24
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	8b 81       	ldd	r24, Y+3	; 0x03
    25f8:	9c 81       	ldd	r25, Y+4	; 0x04
    25fa:	41 e0       	ldi	r20, 0x01	; 1
    25fc:	28 17       	cp	r18, r24
    25fe:	39 07       	cpc	r19, r25
    2600:	09 f4       	brne	.+2      	; 0x2604 <_Z8Wait_seci+0x5a>
    2602:	40 e0       	ldi	r20, 0x00	; 0
    2604:	44 23       	and	r20, r20
    2606:	81 f7       	brne	.-32     	; 0x25e8 <_Z8Wait_seci+0x3e>
}
    2608:	26 96       	adiw	r28, 0x06	; 6
    260a:	0f b6       	in	r0, 0x3f	; 63
    260c:	f8 94       	cli
    260e:	de bf       	out	0x3e, r29	; 62
    2610:	0f be       	out	0x3f, r0	; 63
    2612:	cd bf       	out	0x3d, r28	; 61
    2614:	df 91       	pop	r29
    2616:	cf 91       	pop	r28
    2618:	08 95       	ret

0000261a <_Z9GoToSleeph>:

/*************************************************************************************************************/

void GoToSleep(BOOL shortOrLong){
    261a:	cf 93       	push	r28
    261c:	df 93       	push	r29
    261e:	00 d0       	rcall	.+0      	; 0x2620 <_Z9GoToSleeph+0x6>
    2620:	00 d0       	rcall	.+0      	; 0x2622 <_Z9GoToSleeph+0x8>
    2622:	0f 92       	push	r0
    2624:	cd b7       	in	r28, 0x3d	; 61
    2626:	de b7       	in	r29, 0x3e	; 62
    2628:	8d 83       	std	Y+5, r24	; 0x05
		sei();
    262a:	78 94       	sei
		volatile int sleepTime, sleepTicks = 0;
    262c:	1c 82       	std	Y+4, r1	; 0x04
    262e:	1b 82       	std	Y+3, r1	; 0x03
		//If bool is true, we are in low power mode/backup, sleep for 60 seconds then check ADC again
		if (shortOrLong == fTrue){
    2630:	8d 81       	ldd	r24, Y+5	; 0x05
    2632:	81 30       	cpi	r24, 0x01	; 1
    2634:	49 f4       	brne	.+18     	; 0x2648 <_Z9GoToSleeph+0x2e>
			sleepTime = SLEEP_TICKS_LOWV;
    2636:	8c e0       	ldi	r24, 0x0C	; 12
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	9a 83       	std	Y+2, r25	; 0x02
    263c:	89 83       	std	Y+1, r24	; 0x01
			EIMSK = 0;						//no int2
    263e:	8d e3       	ldi	r24, 0x3D	; 61
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	fc 01       	movw	r30, r24
    2644:	10 82       	st	Z, r1
    2646:	0d c0       	rjmp	.+26     	; 0x2662 <_Z9GoToSleeph+0x48>
		} else {
			sleepTime = SLEEP_TICKS_HIGHV;
    2648:	8a e0       	ldi	r24, 0x0A	; 10
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	9a 83       	std	Y+2, r25	; 0x02
    264e:	89 83       	std	Y+1, r24	; 0x01
			EIMSK |= (1 << INT2);			//int2 is allowed.
    2650:	8d e3       	ldi	r24, 0x3D	; 61
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	2d e3       	ldi	r18, 0x3D	; 61
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	f9 01       	movw	r30, r18
    265a:	20 81       	ld	r18, Z
    265c:	24 60       	ori	r18, 0x04	; 4
    265e:	fc 01       	movw	r30, r24
    2660:	20 83       	st	Z, r18
		}
		//Turn off status LED, put on TIM2 led
		prtSTATUSled &= ~(1 << bnSTATUSled);
    2662:	88 e2       	ldi	r24, 0x28	; 40
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	28 e2       	ldi	r18, 0x28	; 40
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	f9 01       	movw	r30, r18
    266c:	20 81       	ld	r18, Z
    266e:	2b 7f       	andi	r18, 0xFB	; 251
    2670:	fc 01       	movw	r30, r24
    2672:	20 83       	st	Z, r18
		prtSLEEPled |= (1 << bnSLEEPled);
    2674:	8b e2       	ldi	r24, 0x2B	; 43
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	2b e2       	ldi	r18, 0x2B	; 43
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	f9 01       	movw	r30, r18
    267e:	20 81       	ld	r18, Z
    2680:	20 68       	ori	r18, 0x80	; 128
    2682:	fc 01       	movw	r30, r24
    2684:	20 83       	st	Z, r18
		
		//Set to power save, then enable
		SMCR = (1 << SM1)|(1 << SM0);
    2686:	83 e5       	ldi	r24, 0x53	; 83
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	26 e0       	ldi	r18, 0x06	; 6
    268c:	fc 01       	movw	r30, r24
    268e:	20 83       	st	Z, r18
		SMCR |= (1 << SE);
    2690:	83 e5       	ldi	r24, 0x53	; 83
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	23 e5       	ldi	r18, 0x53	; 83
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	f9 01       	movw	r30, r18
    269a:	20 81       	ld	r18, Z
    269c:	21 60       	ori	r18, 0x01	; 1
    269e:	fc 01       	movw	r30, r24
    26a0:	20 83       	st	Z, r18
		
		//Give time to registers
		Wait_ms(1);
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	0e 94 a4 12 	call	0x2548	; 0x2548 <_Z7Wait_msi>
		//Go to sleep
		while (sleepTicks < sleepTime && flagGoToSleep){
    26aa:	06 c0       	rjmp	.+12     	; 0x26b8 <_Z9GoToSleeph+0x9e>
			asm volatile("SLEEP");
    26ac:	88 95       	sleep
			sleepTicks++;
    26ae:	8b 81       	ldd	r24, Y+3	; 0x03
    26b0:	9c 81       	ldd	r25, Y+4	; 0x04
    26b2:	01 96       	adiw	r24, 0x01	; 1
    26b4:	9c 83       	std	Y+4, r25	; 0x04
    26b6:	8b 83       	std	Y+3, r24	; 0x03
		SMCR |= (1 << SE);
		
		//Give time to registers
		Wait_ms(1);
		//Go to sleep
		while (sleepTicks < sleepTime && flagGoToSleep){
    26b8:	2b 81       	ldd	r18, Y+3	; 0x03
    26ba:	3c 81       	ldd	r19, Y+4	; 0x04
    26bc:	89 81       	ldd	r24, Y+1	; 0x01
    26be:	9a 81       	ldd	r25, Y+2	; 0x02
    26c0:	28 17       	cp	r18, r24
    26c2:	39 07       	cpc	r19, r25
    26c4:	34 f4       	brge	.+12     	; 0x26d2 <_Z9GoToSleeph+0xb8>
    26c6:	80 91 b4 01 	lds	r24, 0x01B4
    26ca:	88 23       	and	r24, r24
    26cc:	11 f0       	breq	.+4      	; 0x26d2 <_Z9GoToSleeph+0xb8>
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	01 c0       	rjmp	.+2      	; 0x26d4 <_Z9GoToSleeph+0xba>
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	88 23       	and	r24, r24
    26d6:	51 f7       	brne	.-44     	; 0x26ac <_Z9GoToSleeph+0x92>
			asm volatile("SLEEP");
			sleepTicks++;
		} //endwhile
		
		//Give it time to power back on
		Wait_ms(10);
    26d8:	8a e0       	ldi	r24, 0x0A	; 10
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	0e 94 a4 12 	call	0x2548	; 0x2548 <_Z7Wait_msi>
		
		//Done sleeping, turn off sleeping led
		prtSLEEPled &= ~(1 << bnSLEEPled);
    26e0:	8b e2       	ldi	r24, 0x2B	; 43
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	2b e2       	ldi	r18, 0x2B	; 43
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	f9 01       	movw	r30, r18
    26ea:	20 81       	ld	r18, Z
    26ec:	2f 77       	andi	r18, 0x7F	; 127
    26ee:	fc 01       	movw	r30, r24
    26f0:	20 83       	st	Z, r18
		prtSTATUSled |= (1 << bnSTATUSled);
    26f2:	88 e2       	ldi	r24, 0x28	; 40
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	28 e2       	ldi	r18, 0x28	; 40
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	f9 01       	movw	r30, r18
    26fc:	20 81       	ld	r18, Z
    26fe:	24 60       	ori	r18, 0x04	; 4
    2700:	fc 01       	movw	r30, r24
    2702:	20 83       	st	Z, r18
}
    2704:	0f 90       	pop	r0
    2706:	0f 90       	pop	r0
    2708:	0f 90       	pop	r0
    270a:	0f 90       	pop	r0
    270c:	0f 90       	pop	r0
    270e:	df 91       	pop	r29
    2710:	cf 91       	pop	r28
    2712:	08 95       	ret

00002714 <_Z7TakeADCv>:
/*************************************************************************************************************/

void TakeADC(){
    2714:	cf 93       	push	r28
    2716:	df 93       	push	r29
    2718:	00 d0       	rcall	.+0      	; 0x271a <_Z7TakeADCv+0x6>
    271a:	00 d0       	rcall	.+0      	; 0x271c <_Z7TakeADCv+0x8>
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
	WORD adcReading = 0;
    2720:	1c 82       	std	Y+4, r1	; 0x04
    2722:	1b 82       	std	Y+3, r1	; 0x03
	
	cli();
    2724:	f8 94       	cli
	//Turn Power on to ADC
	PRR0 &= ~(1 << PRADC);	
    2726:	84 e6       	ldi	r24, 0x64	; 100
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	24 e6       	ldi	r18, 0x64	; 100
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	f9 01       	movw	r30, r18
    2730:	20 81       	ld	r18, Z
    2732:	2e 7f       	andi	r18, 0xFE	; 254
    2734:	fc 01       	movw	r30, r24
    2736:	20 83       	st	Z, r18
	ADMUX |= (1 << REFS1);	//internal 1.1V reference
    2738:	8c e7       	ldi	r24, 0x7C	; 124
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	2c e7       	ldi	r18, 0x7C	; 124
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	f9 01       	movw	r30, r18
    2742:	20 81       	ld	r18, Z
    2744:	20 68       	ori	r18, 0x80	; 128
    2746:	fc 01       	movw	r30, r24
    2748:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADEN)|(1 << ADPS2);			//clkIO/16
    274a:	8a e7       	ldi	r24, 0x7A	; 122
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	2a e7       	ldi	r18, 0x7A	; 122
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	f9 01       	movw	r30, r18
    2754:	20 81       	ld	r18, Z
    2756:	24 68       	ori	r18, 0x84	; 132
    2758:	fc 01       	movw	r30, r24
    275a:	20 83       	st	Z, r18
	DIDR0 = 0xFE;								//disable all ADC's except ADC0
    275c:	8e e7       	ldi	r24, 0x7E	; 126
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	2e ef       	ldi	r18, 0xFE	; 254
    2762:	fc 01       	movw	r30, r24
    2764:	20 83       	st	Z, r18
	Wait_ms(5);									//Tim for registers to setup
    2766:	85 e0       	ldi	r24, 0x05	; 5
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	0e 94 a4 12 	call	0x2548	; 0x2548 <_Z7Wait_msi>
	
	//Run conversion twice, throw first one out
	for (int i = 0; i < 2; i++){ADCSRA |= (1 << ADSC); while (ADCSRA & (1 << ADSC));}	
    276e:	1a 82       	std	Y+2, r1	; 0x02
    2770:	19 82       	std	Y+1, r1	; 0x01
    2772:	1c c0       	rjmp	.+56     	; 0x27ac <_Z7TakeADCv+0x98>
    2774:	8a e7       	ldi	r24, 0x7A	; 122
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	2a e7       	ldi	r18, 0x7A	; 122
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	f9 01       	movw	r30, r18
    277e:	20 81       	ld	r18, Z
    2780:	20 64       	ori	r18, 0x40	; 64
    2782:	fc 01       	movw	r30, r24
    2784:	20 83       	st	Z, r18
    2786:	8a e7       	ldi	r24, 0x7A	; 122
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	fc 01       	movw	r30, r24
    278c:	80 81       	ld	r24, Z
    278e:	88 2f       	mov	r24, r24
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	80 74       	andi	r24, 0x40	; 64
    2794:	90 70       	andi	r25, 0x00	; 0
    2796:	21 e0       	ldi	r18, 0x01	; 1
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	09 f4       	brne	.+2      	; 0x279e <_Z7TakeADCv+0x8a>
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	22 23       	and	r18, r18
    27a0:	91 f7       	brne	.-28     	; 0x2786 <_Z7TakeADCv+0x72>
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	9a 81       	ldd	r25, Y+2	; 0x02
    27a6:	01 96       	adiw	r24, 0x01	; 1
    27a8:	9a 83       	std	Y+2, r25	; 0x02
    27aa:	89 83       	std	Y+1, r24	; 0x01
    27ac:	21 e0       	ldi	r18, 0x01	; 1
    27ae:	89 81       	ldd	r24, Y+1	; 0x01
    27b0:	9a 81       	ldd	r25, Y+2	; 0x02
    27b2:	82 30       	cpi	r24, 0x02	; 2
    27b4:	91 05       	cpc	r25, r1
    27b6:	0c f0       	brlt	.+2      	; 0x27ba <_Z7TakeADCv+0xa6>
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	22 23       	and	r18, r18
    27bc:	d9 f6       	brne	.-74     	; 0x2774 <_Z7TakeADCv+0x60>
	
	//Put conversion into buffer
	adcReading = ADCL;
    27be:	88 e7       	ldi	r24, 0x78	; 120
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	fc 01       	movw	r30, r24
    27c4:	80 81       	ld	r24, Z
    27c6:	88 2f       	mov	r24, r24
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	9c 83       	std	Y+4, r25	; 0x04
    27cc:	8b 83       	std	Y+3, r24	; 0x03
	adcReading |= (ADCH << 8);
    27ce:	89 e7       	ldi	r24, 0x79	; 121
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	fc 01       	movw	r30, r24
    27d4:	80 81       	ld	r24, Z
    27d6:	88 2f       	mov	r24, r24
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	98 2f       	mov	r25, r24
    27dc:	88 27       	eor	r24, r24
    27de:	2b 81       	ldd	r18, Y+3	; 0x03
    27e0:	3c 81       	ldd	r19, Y+4	; 0x04
    27e2:	82 2b       	or	r24, r18
    27e4:	93 2b       	or	r25, r19
    27e6:	9c 83       	std	Y+4, r25	; 0x04
    27e8:	8b 83       	std	Y+3, r24	; 0x03
	
	//Re-enable interrupts
	sei();
    27ea:	78 94       	sei
	
	//Disable ADC hardware/registers
	ADCSRA = 0;
    27ec:	8a e7       	ldi	r24, 0x7A	; 122
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	fc 01       	movw	r30, r24
    27f2:	10 82       	st	Z, r1
	ADMUX = 0;
    27f4:	8c e7       	ldi	r24, 0x7C	; 124
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	fc 01       	movw	r30, r24
    27fa:	10 82       	st	Z, r1
	DIDR0 |= (1 << ADC0D);
    27fc:	8e e7       	ldi	r24, 0x7E	; 126
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	2e e7       	ldi	r18, 0x7E	; 126
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	f9 01       	movw	r30, r18
    2806:	20 81       	ld	r18, Z
    2808:	21 60       	ori	r18, 0x01	; 1
    280a:	fc 01       	movw	r30, r24
    280c:	20 83       	st	Z, r18
	
	//Turn off power
	PRR0 |= (1 << PRADC);
    280e:	84 e6       	ldi	r24, 0x64	; 100
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	24 e6       	ldi	r18, 0x64	; 100
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	f9 01       	movw	r30, r18
    2818:	20 81       	ld	r18, Z
    281a:	21 60       	ori	r18, 0x01	; 1
    281c:	fc 01       	movw	r30, r24
    281e:	20 83       	st	Z, r18
	
	//Do work
	Wait_ms(5);
    2820:	85 e0       	ldi	r24, 0x05	; 5
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	0e 94 a4 12 	call	0x2548	; 0x2548 <_Z7Wait_msi>

	flagGoodVolts = (adcReading < LOW_BATT_ADC) ? fFalse : fTrue;
    2828:	21 e0       	ldi	r18, 0x01	; 1
    282a:	8b 81       	ldd	r24, Y+3	; 0x03
    282c:	9c 81       	ldd	r25, Y+4	; 0x04
    282e:	f1 e0       	ldi	r31, 0x01	; 1
    2830:	8c 32       	cpi	r24, 0x2C	; 44
    2832:	9f 07       	cpc	r25, r31
    2834:	08 f4       	brcc	.+2      	; 0x2838 <_Z7TakeADCv+0x124>
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	20 93 c1 01 	sts	0x01C1, r18
	
	globalADC=adcReading;
    283c:	8b 81       	ldd	r24, Y+3	; 0x03
    283e:	9c 81       	ldd	r25, Y+4	; 0x04
    2840:	90 93 89 01 	sts	0x0189, r25
    2844:	80 93 88 01 	sts	0x0188, r24
}
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	0f 90       	pop	r0
    284e:	0f 90       	pop	r0
    2850:	df 91       	pop	r29
    2852:	cf 91       	pop	r28
    2854:	08 95       	ret

00002856 <_Z7GetTempv>:

/*************************************************************************************************************/

void GetTemp(){
    2856:	cf 93       	push	r28
    2858:	df 93       	push	r29
    285a:	00 d0       	rcall	.+0      	; 0x285c <_Z7GetTempv+0x6>
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
	WORD rawTemp = 0;
    2860:	1a 82       	std	Y+2, r1	; 0x02
    2862:	19 82       	std	Y+1, r1	; 0x01
	
	//Power on temp monitor, let it settle
	//prtTEMPen |= (1 << bnTEMPen);
	PRR0 &= ~(1 << PRSPI);	
    2864:	84 e6       	ldi	r24, 0x64	; 100
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	24 e6       	ldi	r18, 0x64	; 100
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	f9 01       	movw	r30, r18
    286e:	20 81       	ld	r18, Z
    2870:	2b 7f       	andi	r18, 0xFB	; 251
    2872:	fc 01       	movw	r30, r24
    2874:	20 83       	st	Z, r18
	SPCR0 |= (1 << MSTR0)|(1 << SPE0)|(1 << SPR00);			//enables SPI, master, fck/64
    2876:	8c e4       	ldi	r24, 0x4C	; 76
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	2c e4       	ldi	r18, 0x4C	; 76
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	f9 01       	movw	r30, r18
    2880:	20 81       	ld	r18, Z
    2882:	21 65       	ori	r18, 0x51	; 81
    2884:	fc 01       	movw	r30, r24
    2886:	20 83       	st	Z, r18
	Wait_ms(200);
    2888:	88 ec       	ldi	r24, 0xC8	; 200
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	0e 94 a4 12 	call	0x2548	; 0x2548 <_Z7Wait_msi>
	//Slave select goes low, sck goes low,  to signal start of transmission
	prtSpi0 &= ~((1 << bnSck0)|(1 << bnSS0));
    2890:	85 e2       	ldi	r24, 0x25	; 37
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	25 e2       	ldi	r18, 0x25	; 37
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	f9 01       	movw	r30, r18
    289a:	20 81       	ld	r18, Z
    289c:	2f 76       	andi	r18, 0x6F	; 111
    289e:	fc 01       	movw	r30, r24
    28a0:	20 83       	st	Z, r18
	
	cli();
    28a2:	f8 94       	cli
	//Write to buffer to start transmission
	SPDR0 = 0x00;
    28a4:	8e e4       	ldi	r24, 0x4E	; 78
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	fc 01       	movw	r30, r24
    28aa:	10 82       	st	Z, r1
	//Wait for data to be receieved.
	while (!(SPSR0 & (1 << SPIF0)));
    28ac:	00 00       	nop
    28ae:	8d e4       	ldi	r24, 0x4D	; 77
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	fc 01       	movw	r30, r24
    28b4:	80 81       	ld	r24, Z
    28b6:	80 95       	com	r24
    28b8:	88 1f       	adc	r24, r24
    28ba:	88 27       	eor	r24, r24
    28bc:	88 1f       	adc	r24, r24
    28be:	88 23       	and	r24, r24
    28c0:	b1 f7       	brne	.-20     	; 0x28ae <_Z7GetTempv+0x58>
	rawTemp = (SPDR0 << 8);
    28c2:	8e e4       	ldi	r24, 0x4E	; 78
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	fc 01       	movw	r30, r24
    28c8:	80 81       	ld	r24, Z
    28ca:	88 2f       	mov	r24, r24
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	98 2f       	mov	r25, r24
    28d0:	88 27       	eor	r24, r24
    28d2:	9a 83       	std	Y+2, r25	; 0x02
    28d4:	89 83       	std	Y+1, r24	; 0x01
	SPDR0 = 0x00;
    28d6:	8e e4       	ldi	r24, 0x4E	; 78
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	fc 01       	movw	r30, r24
    28dc:	10 82       	st	Z, r1
	while (!(SPSR0 & (1 << SPIF0)));
    28de:	00 00       	nop
    28e0:	8d e4       	ldi	r24, 0x4D	; 77
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	fc 01       	movw	r30, r24
    28e6:	80 81       	ld	r24, Z
    28e8:	80 95       	com	r24
    28ea:	88 1f       	adc	r24, r24
    28ec:	88 27       	eor	r24, r24
    28ee:	88 1f       	adc	r24, r24
    28f0:	88 23       	and	r24, r24
    28f2:	b1 f7       	brne	.-20     	; 0x28e0 <_Z7GetTempv+0x8a>
	rawTemp |= SPDR0;
    28f4:	8e e4       	ldi	r24, 0x4E	; 78
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	fc 01       	movw	r30, r24
    28fa:	80 81       	ld	r24, Z
    28fc:	88 2f       	mov	r24, r24
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	29 81       	ldd	r18, Y+1	; 0x01
    2902:	3a 81       	ldd	r19, Y+2	; 0x02
    2904:	82 2b       	or	r24, r18
    2906:	93 2b       	or	r25, r19
    2908:	9a 83       	std	Y+2, r25	; 0x02
    290a:	89 83       	std	Y+1, r24	; 0x01
	//Set flag to correct value.
	flagGoodTemp = (rawTemp < HIGH_TEMP) ? fTrue : fFalse;
    290c:	89 81       	ldd	r24, Y+1	; 0x01
    290e:	9a 81       	ldd	r25, Y+2	; 0x02
    2910:	f2 e3       	ldi	r31, 0x32	; 50
    2912:	84 36       	cpi	r24, 0x64	; 100
    2914:	9f 07       	cpc	r25, r31
    2916:	10 f4       	brcc	.+4      	; 0x291c <_Z7GetTempv+0xc6>
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	01 c0       	rjmp	.+2      	; 0x291e <_Z7GetTempv+0xc8>
    291c:	80 e0       	ldi	r24, 0x00	; 0
    291e:	80 93 c0 01 	sts	0x01C0, r24
	//re enable interrupts
	sei();
    2922:	78 94       	sei
	
	//Bring SS high, clear SPCR0 register and turn power off to SPI and device
	prtSpi0 |= (1 << bnSS0)|(1 << bnSck0);
    2924:	85 e2       	ldi	r24, 0x25	; 37
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	25 e2       	ldi	r18, 0x25	; 37
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	f9 01       	movw	r30, r18
    292e:	20 81       	ld	r18, Z
    2930:	20 69       	ori	r18, 0x90	; 144
    2932:	fc 01       	movw	r30, r24
    2934:	20 83       	st	Z, r18
	SPCR0=0x00;	
    2936:	8c e4       	ldi	r24, 0x4C	; 76
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	fc 01       	movw	r30, r24
    293c:	10 82       	st	Z, r1
	//prtTEMPen &= ~(1 << bnTEMPen);
	PRR0 |= (1 << PRSPI);
    293e:	84 e6       	ldi	r24, 0x64	; 100
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	24 e6       	ldi	r18, 0x64	; 100
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	f9 01       	movw	r30, r18
    2948:	20 81       	ld	r18, Z
    294a:	24 60       	ori	r18, 0x04	; 4
    294c:	fc 01       	movw	r30, r24
    294e:	20 83       	st	Z, r18

	globalTemp=rawTemp;
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	9a 81       	ldd	r25, Y+2	; 0x02
    2954:	90 93 8b 01 	sts	0x018B, r25
    2958:	80 93 8a 01 	sts	0x018A, r24
}
    295c:	0f 90       	pop	r0
    295e:	0f 90       	pop	r0
    2960:	df 91       	pop	r29
    2962:	cf 91       	pop	r28
    2964:	08 95       	ret

00002966 <_Z41__static_initialization_and_destruction_0ii>:
    2966:	cf 93       	push	r28
    2968:	df 93       	push	r29
    296a:	00 d0       	rcall	.+0      	; 0x296c <_Z41__static_initialization_and_destruction_0ii+0x6>
    296c:	00 d0       	rcall	.+0      	; 0x296e <_Z41__static_initialization_and_destruction_0ii+0x8>
    296e:	cd b7       	in	r28, 0x3d	; 61
    2970:	de b7       	in	r29, 0x3e	; 62
    2972:	9a 83       	std	Y+2, r25	; 0x02
    2974:	89 83       	std	Y+1, r24	; 0x01
    2976:	7c 83       	std	Y+4, r23	; 0x04
    2978:	6b 83       	std	Y+3, r22	; 0x03
    297a:	89 81       	ldd	r24, Y+1	; 0x01
    297c:	9a 81       	ldd	r25, Y+2	; 0x02
    297e:	81 30       	cpi	r24, 0x01	; 1
    2980:	91 05       	cpc	r25, r1
    2982:	51 f4       	brne	.+20     	; 0x2998 <_Z41__static_initialization_and_destruction_0ii+0x32>
    2984:	8b 81       	ldd	r24, Y+3	; 0x03
    2986:	9c 81       	ldd	r25, Y+4	; 0x04
    2988:	2f ef       	ldi	r18, 0xFF	; 255
    298a:	8f 3f       	cpi	r24, 0xFF	; 255
    298c:	92 07       	cpc	r25, r18
    298e:	21 f4       	brne	.+8      	; 0x2998 <_Z41__static_initialization_and_destruction_0ii+0x32>

/*********************************************GLOBAL VARIABLES***************************************************/
/****************************************************************************************************************/
WORD globalADC=0, globalTemp=0;
//volatile int timeOut=0;
myTime currentTime;  //The clock, MUST BE GLOBAL. In final program, will initiate with NOTHING, then GPS will update on the actual time into beaglebone, beaglebone pings us, then dunzo OR have UART into this as well, then get time and be done.
    2990:	8c e8       	ldi	r24, 0x8C	; 140
    2992:	91 e0       	ldi	r25, 0x01	; 1
    2994:	0e 94 15 04 	call	0x82a	; 0x82a <_ZN6myTimeC1Ev>
	SPCR0=0x00;	
	//prtTEMPen &= ~(1 << bnTEMPen);
	PRR0 |= (1 << PRSPI);

	globalTemp=rawTemp;
}
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	df 91       	pop	r29
    29a2:	cf 91       	pop	r28
    29a4:	08 95       	ret

000029a6 <_GLOBAL__sub_I__ZN6myDateC2Ev>:
    29a6:	cf 93       	push	r28
    29a8:	df 93       	push	r29
    29aa:	cd b7       	in	r28, 0x3d	; 61
    29ac:	de b7       	in	r29, 0x3e	; 62
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	6f ef       	ldi	r22, 0xFF	; 255
    29b4:	7f ef       	ldi	r23, 0xFF	; 255
    29b6:	0e 94 b3 14 	call	0x2966	; 0x2966 <_Z41__static_initialization_and_destruction_0ii>
    29ba:	df 91       	pop	r29
    29bc:	cf 91       	pop	r28
    29be:	08 95       	ret

000029c0 <__udivmodqi4>:
    29c0:	99 1b       	sub	r25, r25
    29c2:	79 e0       	ldi	r23, 0x09	; 9
    29c4:	04 c0       	rjmp	.+8      	; 0x29ce <__udivmodqi4_ep>

000029c6 <__udivmodqi4_loop>:
    29c6:	99 1f       	adc	r25, r25
    29c8:	96 17       	cp	r25, r22
    29ca:	08 f0       	brcs	.+2      	; 0x29ce <__udivmodqi4_ep>
    29cc:	96 1b       	sub	r25, r22

000029ce <__udivmodqi4_ep>:
    29ce:	88 1f       	adc	r24, r24
    29d0:	7a 95       	dec	r23
    29d2:	c9 f7       	brne	.-14     	; 0x29c6 <__udivmodqi4_loop>
    29d4:	80 95       	com	r24
    29d6:	08 95       	ret

000029d8 <__divmodhi4>:
    29d8:	97 fb       	bst	r25, 7
    29da:	09 2e       	mov	r0, r25
    29dc:	07 26       	eor	r0, r23
    29de:	0a d0       	rcall	.+20     	; 0x29f4 <__divmodhi4_neg1>
    29e0:	77 fd       	sbrc	r23, 7
    29e2:	04 d0       	rcall	.+8      	; 0x29ec <__divmodhi4_neg2>
    29e4:	0c d0       	rcall	.+24     	; 0x29fe <__udivmodhi4>
    29e6:	06 d0       	rcall	.+12     	; 0x29f4 <__divmodhi4_neg1>
    29e8:	00 20       	and	r0, r0
    29ea:	1a f4       	brpl	.+6      	; 0x29f2 <__divmodhi4_exit>

000029ec <__divmodhi4_neg2>:
    29ec:	70 95       	com	r23
    29ee:	61 95       	neg	r22
    29f0:	7f 4f       	sbci	r23, 0xFF	; 255

000029f2 <__divmodhi4_exit>:
    29f2:	08 95       	ret

000029f4 <__divmodhi4_neg1>:
    29f4:	f6 f7       	brtc	.-4      	; 0x29f2 <__divmodhi4_exit>
    29f6:	90 95       	com	r25
    29f8:	81 95       	neg	r24
    29fa:	9f 4f       	sbci	r25, 0xFF	; 255
    29fc:	08 95       	ret

000029fe <__udivmodhi4>:
    29fe:	aa 1b       	sub	r26, r26
    2a00:	bb 1b       	sub	r27, r27
    2a02:	51 e1       	ldi	r21, 0x11	; 17
    2a04:	07 c0       	rjmp	.+14     	; 0x2a14 <__udivmodhi4_ep>

00002a06 <__udivmodhi4_loop>:
    2a06:	aa 1f       	adc	r26, r26
    2a08:	bb 1f       	adc	r27, r27
    2a0a:	a6 17       	cp	r26, r22
    2a0c:	b7 07       	cpc	r27, r23
    2a0e:	10 f0       	brcs	.+4      	; 0x2a14 <__udivmodhi4_ep>
    2a10:	a6 1b       	sub	r26, r22
    2a12:	b7 0b       	sbc	r27, r23

00002a14 <__udivmodhi4_ep>:
    2a14:	88 1f       	adc	r24, r24
    2a16:	99 1f       	adc	r25, r25
    2a18:	5a 95       	dec	r21
    2a1a:	a9 f7       	brne	.-22     	; 0x2a06 <__udivmodhi4_loop>
    2a1c:	80 95       	com	r24
    2a1e:	90 95       	com	r25
    2a20:	bc 01       	movw	r22, r24
    2a22:	cd 01       	movw	r24, r26
    2a24:	08 95       	ret

00002a26 <__tablejump2__>:
    2a26:	ee 0f       	add	r30, r30
    2a28:	ff 1f       	adc	r31, r31

00002a2a <__tablejump__>:
    2a2a:	05 90       	lpm	r0, Z+
    2a2c:	f4 91       	lpm	r31, Z
    2a2e:	e0 2d       	mov	r30, r0
    2a30:	09 94       	ijmp

00002a32 <atoi>:
    2a32:	fc 01       	movw	r30, r24
    2a34:	88 27       	eor	r24, r24
    2a36:	99 27       	eor	r25, r25
    2a38:	e8 94       	clt
    2a3a:	21 91       	ld	r18, Z+
    2a3c:	20 32       	cpi	r18, 0x20	; 32
    2a3e:	e9 f3       	breq	.-6      	; 0x2a3a <atoi+0x8>
    2a40:	29 30       	cpi	r18, 0x09	; 9
    2a42:	10 f0       	brcs	.+4      	; 0x2a48 <atoi+0x16>
    2a44:	2e 30       	cpi	r18, 0x0E	; 14
    2a46:	c8 f3       	brcs	.-14     	; 0x2a3a <atoi+0x8>
    2a48:	2b 32       	cpi	r18, 0x2B	; 43
    2a4a:	41 f0       	breq	.+16     	; 0x2a5c <atoi+0x2a>
    2a4c:	2d 32       	cpi	r18, 0x2D	; 45
    2a4e:	39 f4       	brne	.+14     	; 0x2a5e <atoi+0x2c>
    2a50:	68 94       	set
    2a52:	04 c0       	rjmp	.+8      	; 0x2a5c <atoi+0x2a>
    2a54:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <__mulhi_const_10>
    2a58:	82 0f       	add	r24, r18
    2a5a:	91 1d       	adc	r25, r1
    2a5c:	21 91       	ld	r18, Z+
    2a5e:	20 53       	subi	r18, 0x30	; 48
    2a60:	2a 30       	cpi	r18, 0x0A	; 10
    2a62:	c0 f3       	brcs	.-16     	; 0x2a54 <atoi+0x22>
    2a64:	1e f4       	brtc	.+6      	; 0x2a6c <atoi+0x3a>
    2a66:	90 95       	com	r25
    2a68:	81 95       	neg	r24
    2a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a6c:	08 95       	ret

00002a6e <strcat>:
    2a6e:	fb 01       	movw	r30, r22
    2a70:	dc 01       	movw	r26, r24
    2a72:	0d 90       	ld	r0, X+
    2a74:	00 20       	and	r0, r0
    2a76:	e9 f7       	brne	.-6      	; 0x2a72 <strcat+0x4>
    2a78:	11 97       	sbiw	r26, 0x01	; 1
    2a7a:	01 90       	ld	r0, Z+
    2a7c:	0d 92       	st	X+, r0
    2a7e:	00 20       	and	r0, r0
    2a80:	e1 f7       	brne	.-8      	; 0x2a7a <strcat+0xc>
    2a82:	08 95       	ret

00002a84 <strcmp>:
    2a84:	fb 01       	movw	r30, r22
    2a86:	dc 01       	movw	r26, r24
    2a88:	8d 91       	ld	r24, X+
    2a8a:	01 90       	ld	r0, Z+
    2a8c:	80 19       	sub	r24, r0
    2a8e:	01 10       	cpse	r0, r1
    2a90:	d9 f3       	breq	.-10     	; 0x2a88 <strcmp+0x4>
    2a92:	99 0b       	sbc	r25, r25
    2a94:	08 95       	ret

00002a96 <strcpy>:
    2a96:	fb 01       	movw	r30, r22
    2a98:	dc 01       	movw	r26, r24
    2a9a:	01 90       	ld	r0, Z+
    2a9c:	0d 92       	st	X+, r0
    2a9e:	00 20       	and	r0, r0
    2aa0:	e1 f7       	brne	.-8      	; 0x2a9a <strcpy+0x4>
    2aa2:	08 95       	ret

00002aa4 <itoa>:
    2aa4:	fb 01       	movw	r30, r22
    2aa6:	9f 01       	movw	r18, r30
    2aa8:	e8 94       	clt
    2aaa:	42 30       	cpi	r20, 0x02	; 2
    2aac:	c4 f0       	brlt	.+48     	; 0x2ade <itoa+0x3a>
    2aae:	45 32       	cpi	r20, 0x25	; 37
    2ab0:	b4 f4       	brge	.+44     	; 0x2ade <itoa+0x3a>
    2ab2:	4a 30       	cpi	r20, 0x0A	; 10
    2ab4:	29 f4       	brne	.+10     	; 0x2ac0 <itoa+0x1c>
    2ab6:	97 fb       	bst	r25, 7
    2ab8:	1e f4       	brtc	.+6      	; 0x2ac0 <itoa+0x1c>
    2aba:	90 95       	com	r25
    2abc:	81 95       	neg	r24
    2abe:	9f 4f       	sbci	r25, 0xFF	; 255
    2ac0:	64 2f       	mov	r22, r20
    2ac2:	77 27       	eor	r23, r23
    2ac4:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__udivmodhi4>
    2ac8:	80 5d       	subi	r24, 0xD0	; 208
    2aca:	8a 33       	cpi	r24, 0x3A	; 58
    2acc:	0c f0       	brlt	.+2      	; 0x2ad0 <itoa+0x2c>
    2ace:	89 5d       	subi	r24, 0xD9	; 217
    2ad0:	81 93       	st	Z+, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	00 97       	sbiw	r24, 0x00	; 0
    2ad6:	a1 f7       	brne	.-24     	; 0x2ac0 <itoa+0x1c>
    2ad8:	16 f4       	brtc	.+4      	; 0x2ade <itoa+0x3a>
    2ada:	5d e2       	ldi	r21, 0x2D	; 45
    2adc:	51 93       	st	Z+, r21
    2ade:	10 82       	st	Z, r1
    2ae0:	c9 01       	movw	r24, r18
    2ae2:	0c 94 b2 15 	jmp	0x2b64	; 0x2b64 <strrev>

00002ae6 <__mulhi_const_10>:
    2ae6:	7a e0       	ldi	r23, 0x0A	; 10
    2ae8:	97 9f       	mul	r25, r23
    2aea:	90 2d       	mov	r25, r0
    2aec:	87 9f       	mul	r24, r23
    2aee:	80 2d       	mov	r24, r0
    2af0:	91 0d       	add	r25, r1
    2af2:	11 24       	eor	r1, r1
    2af4:	08 95       	ret

00002af6 <utoa>:
    2af6:	fb 01       	movw	r30, r22
    2af8:	9f 01       	movw	r18, r30
    2afa:	42 30       	cpi	r20, 0x02	; 2
    2afc:	74 f0       	brlt	.+28     	; 0x2b1a <utoa+0x24>
    2afe:	45 32       	cpi	r20, 0x25	; 37
    2b00:	64 f4       	brge	.+24     	; 0x2b1a <utoa+0x24>
    2b02:	64 2f       	mov	r22, r20
    2b04:	77 27       	eor	r23, r23
    2b06:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__udivmodhi4>
    2b0a:	80 5d       	subi	r24, 0xD0	; 208
    2b0c:	8a 33       	cpi	r24, 0x3A	; 58
    2b0e:	0c f0       	brlt	.+2      	; 0x2b12 <utoa+0x1c>
    2b10:	89 5d       	subi	r24, 0xD9	; 217
    2b12:	81 93       	st	Z+, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	00 97       	sbiw	r24, 0x00	; 0
    2b18:	a1 f7       	brne	.-24     	; 0x2b02 <utoa+0xc>
    2b1a:	10 82       	st	Z, r1
    2b1c:	c9 01       	movw	r24, r18
    2b1e:	0c 94 b2 15 	jmp	0x2b64	; 0x2b64 <strrev>

00002b22 <__eerd_byte_m324pa>:
    2b22:	f9 99       	sbic	0x1f, 1	; 31
    2b24:	fe cf       	rjmp	.-4      	; 0x2b22 <__eerd_byte_m324pa>
    2b26:	92 bd       	out	0x22, r25	; 34
    2b28:	81 bd       	out	0x21, r24	; 33
    2b2a:	f8 9a       	sbi	0x1f, 0	; 31
    2b2c:	99 27       	eor	r25, r25
    2b2e:	80 b5       	in	r24, 0x20	; 32
    2b30:	08 95       	ret

00002b32 <__eerd_word_m324pa>:
    2b32:	a8 e1       	ldi	r26, 0x18	; 24
    2b34:	b0 e0       	ldi	r27, 0x00	; 0
    2b36:	42 e0       	ldi	r20, 0x02	; 2
    2b38:	50 e0       	ldi	r21, 0x00	; 0
    2b3a:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <__eerd_blraw_m324pa>

00002b3e <__eewr_byte_m324pa>:
    2b3e:	26 2f       	mov	r18, r22

00002b40 <__eewr_r18_m324pa>:
    2b40:	f9 99       	sbic	0x1f, 1	; 31
    2b42:	fe cf       	rjmp	.-4      	; 0x2b40 <__eewr_r18_m324pa>
    2b44:	1f ba       	out	0x1f, r1	; 31
    2b46:	92 bd       	out	0x22, r25	; 34
    2b48:	81 bd       	out	0x21, r24	; 33
    2b4a:	20 bd       	out	0x20, r18	; 32
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	f8 94       	cli
    2b50:	fa 9a       	sbi	0x1f, 2	; 31
    2b52:	f9 9a       	sbi	0x1f, 1	; 31
    2b54:	0f be       	out	0x3f, r0	; 63
    2b56:	01 96       	adiw	r24, 0x01	; 1
    2b58:	08 95       	ret

00002b5a <__eewr_word_m324pa>:
    2b5a:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__eewr_byte_m324pa>
    2b5e:	27 2f       	mov	r18, r23
    2b60:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__eewr_r18_m324pa>

00002b64 <strrev>:
    2b64:	dc 01       	movw	r26, r24
    2b66:	fc 01       	movw	r30, r24
    2b68:	67 2f       	mov	r22, r23
    2b6a:	71 91       	ld	r23, Z+
    2b6c:	77 23       	and	r23, r23
    2b6e:	e1 f7       	brne	.-8      	; 0x2b68 <strrev+0x4>
    2b70:	32 97       	sbiw	r30, 0x02	; 2
    2b72:	04 c0       	rjmp	.+8      	; 0x2b7c <strrev+0x18>
    2b74:	7c 91       	ld	r23, X
    2b76:	6d 93       	st	X+, r22
    2b78:	70 83       	st	Z, r23
    2b7a:	62 91       	ld	r22, -Z
    2b7c:	ae 17       	cp	r26, r30
    2b7e:	bf 07       	cpc	r27, r31
    2b80:	c8 f3       	brcs	.-14     	; 0x2b74 <strrev+0x10>
    2b82:	08 95       	ret

00002b84 <__eerd_block_m324pa>:
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22

00002b88 <__eerd_blraw_m324pa>:
    2b88:	fc 01       	movw	r30, r24
    2b8a:	f9 99       	sbic	0x1f, 1	; 31
    2b8c:	fe cf       	rjmp	.-4      	; 0x2b8a <__eerd_blraw_m324pa+0x2>
    2b8e:	06 c0       	rjmp	.+12     	; 0x2b9c <__eerd_blraw_m324pa+0x14>
    2b90:	f2 bd       	out	0x22, r31	; 34
    2b92:	e1 bd       	out	0x21, r30	; 33
    2b94:	f8 9a       	sbi	0x1f, 0	; 31
    2b96:	31 96       	adiw	r30, 0x01	; 1
    2b98:	00 b4       	in	r0, 0x20	; 32
    2b9a:	0d 92       	st	X+, r0
    2b9c:	41 50       	subi	r20, 0x01	; 1
    2b9e:	50 40       	sbci	r21, 0x00	; 0
    2ba0:	b8 f7       	brcc	.-18     	; 0x2b90 <__eerd_blraw_m324pa+0x8>
    2ba2:	08 95       	ret

00002ba4 <_exit>:
    2ba4:	f8 94       	cli

00002ba6 <__stop_program>:
    2ba6:	ff cf       	rjmp	.-2      	; 0x2ba6 <__stop_program>
