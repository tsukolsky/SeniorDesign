
WAVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  00002ca6  00002d5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ca6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  00800184  00800184  00002dde  2**0
                  ALLOC
  3 .eeprom       00000007  00810000  00810000  00002dde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00001134  00000000  00000000  00002de8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000588  00000000  00000000  00003f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000120  00000000  00000000  000044a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f96  00000000  00000000  000045c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000039b  00000000  00000000  0000655e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e0a  00000000  00000000  000068f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000830  00000000  00000000  00007704  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000a81  00000000  00000000  00007f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000115b  00000000  00000000  000089b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__vector_3>
      10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      18:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__vector_6>
      1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      2c:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__vector_11>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 b9 0f 	jmp	0x1f72	; 0x1f72 <__vector_20>
      54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      68:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      6c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      70:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <__vector_28>
      74:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      78:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

0000007c <__ctors_start>:
      7c:	52 15       	cp	r21, r2

0000007e <__ctors_end>:
      7e:	11 24       	eor	r1, r1
      80:	1f be       	out	0x3f, r1	; 63
      82:	cf ef       	ldi	r28, 0xFF	; 255
      84:	d8 e0       	ldi	r29, 0x08	; 8
      86:	de bf       	out	0x3e, r29	; 62
      88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_copy_data>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 e0       	ldi	r26, 0x00	; 0
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	e6 ea       	ldi	r30, 0xA6	; 166
      92:	fc e2       	ldi	r31, 0x2C	; 44
      94:	02 c0       	rjmp	.+4      	; 0x9a <__do_copy_data+0x10>
      96:	05 90       	lpm	r0, Z+
      98:	0d 92       	st	X+, r0
      9a:	a4 38       	cpi	r26, 0x84	; 132
      9c:	b1 07       	cpc	r27, r17
      9e:	d9 f7       	brne	.-10     	; 0x96 <__do_copy_data+0xc>

000000a0 <__do_clear_bss>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a4 e8       	ldi	r26, 0x84	; 132
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
      a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
      aa:	aa 3c       	cpi	r26, 0xCA	; 202
      ac:	b1 07       	cpc	r27, r17
      ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>

000000b0 <__do_global_ctors>:
      b0:	10 e0       	ldi	r17, 0x00	; 0
      b2:	ce e7       	ldi	r28, 0x7E	; 126
      b4:	d0 e0       	ldi	r29, 0x00	; 0
      b6:	04 c0       	rjmp	.+8      	; 0xc0 <__do_global_ctors+0x10>
      b8:	22 97       	sbiw	r28, 0x02	; 2
      ba:	fe 01       	movw	r30, r28
      bc:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__tablejump__>
      c0:	cc 37       	cpi	r28, 0x7C	; 124
      c2:	d1 07       	cpc	r29, r17
      c4:	c9 f7       	brne	.-14     	; 0xb8 <__do_global_ctors+0x8>
      c6:	0e 94 16 10 	call	0x202c	; 0x202c <main>
      ca:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <_ZN6myDateC1Ev>:
		void setYear(int year);
		void addMonths(int months);
		void addYears(int years);
};

myDate::myDate(){
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	00 d0       	rcall	.+0      	; 0xd8 <_ZN6myDateC1Ev+0x6>
      d8:	cd b7       	in	r28, 0x3d	; 61
      da:	de b7       	in	r29, 0x3e	; 62
      dc:	9a 83       	std	Y+2, r25	; 0x02
      de:	89 83       	std	Y+1, r24	; 0x01
	month = 0;
      e0:	89 81       	ldd	r24, Y+1	; 0x01
      e2:	9a 81       	ldd	r25, Y+2	; 0x02
      e4:	fc 01       	movw	r30, r24
      e6:	11 82       	std	Z+1, r1	; 0x01
      e8:	10 82       	st	Z, r1
	day = 0;
      ea:	89 81       	ldd	r24, Y+1	; 0x01
      ec:	9a 81       	ldd	r25, Y+2	; 0x02
      ee:	fc 01       	movw	r30, r24
      f0:	13 82       	std	Z+3, r1	; 0x03
      f2:	12 82       	std	Z+2, r1	; 0x02
	year = 0;
      f4:	89 81       	ldd	r24, Y+1	; 0x01
      f6:	9a 81       	ldd	r25, Y+2	; 0x02
      f8:	fc 01       	movw	r30, r24
      fa:	15 82       	std	Z+5, r1	; 0x05
      fc:	14 82       	std	Z+4, r1	; 0x04
}
      fe:	0f 90       	pop	r0
     100:	0f 90       	pop	r0
     102:	df 91       	pop	r29
     104:	cf 91       	pop	r28
     106:	08 95       	ret

00000108 <_ZN6myDateC1Eiii>:

myDate::myDate(int month,int day,int year){
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
     110:	28 97       	sbiw	r28, 0x08	; 8
     112:	0f b6       	in	r0, 0x3f	; 63
     114:	f8 94       	cli
     116:	de bf       	out	0x3e, r29	; 62
     118:	0f be       	out	0x3f, r0	; 63
     11a:	cd bf       	out	0x3d, r28	; 61
     11c:	9a 83       	std	Y+2, r25	; 0x02
     11e:	89 83       	std	Y+1, r24	; 0x01
     120:	7c 83       	std	Y+4, r23	; 0x04
     122:	6b 83       	std	Y+3, r22	; 0x03
     124:	5e 83       	std	Y+6, r21	; 0x06
     126:	4d 83       	std	Y+5, r20	; 0x05
     128:	38 87       	std	Y+8, r19	; 0x08
     12a:	2f 83       	std	Y+7, r18	; 0x07
	setDate(month,day,year);
     12c:	89 81       	ldd	r24, Y+1	; 0x01
     12e:	9a 81       	ldd	r25, Y+2	; 0x02
     130:	6b 81       	ldd	r22, Y+3	; 0x03
     132:	7c 81       	ldd	r23, Y+4	; 0x04
     134:	4d 81       	ldd	r20, Y+5	; 0x05
     136:	5e 81       	ldd	r21, Y+6	; 0x06
     138:	2f 81       	ldd	r18, Y+7	; 0x07
     13a:	38 85       	ldd	r19, Y+8	; 0x08
     13c:	0e 94 84 01 	call	0x308	; 0x308 <_ZN6myDate7setDateEiii>
}
     140:	28 96       	adiw	r28, 0x08	; 8
     142:	0f b6       	in	r0, 0x3f	; 63
     144:	f8 94       	cli
     146:	de bf       	out	0x3e, r29	; 62
     148:	0f be       	out	0x3f, r0	; 63
     14a:	cd bf       	out	0x3d, r28	; 61
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	08 95       	ret

00000152 <_ZN6myDate9getMonthsEv>:

BYTE myDate::getMonths(){
     152:	cf 93       	push	r28
     154:	df 93       	push	r29
     156:	00 d0       	rcall	.+0      	; 0x158 <_ZN6myDate9getMonthsEv+0x6>
     158:	cd b7       	in	r28, 0x3d	; 61
     15a:	de b7       	in	r29, 0x3e	; 62
     15c:	9a 83       	std	Y+2, r25	; 0x02
     15e:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)month;
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	9a 81       	ldd	r25, Y+2	; 0x02
     164:	fc 01       	movw	r30, r24
     166:	80 81       	ld	r24, Z
     168:	91 81       	ldd	r25, Z+1	; 0x01
}
     16a:	0f 90       	pop	r0
     16c:	0f 90       	pop	r0
     16e:	df 91       	pop	r29
     170:	cf 91       	pop	r28
     172:	08 95       	ret

00000174 <_ZN6myDate8getYearsEv>:

WORD myDate::getYears(){
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
     178:	00 d0       	rcall	.+0      	; 0x17a <_ZN6myDate8getYearsEv+0x6>
     17a:	cd b7       	in	r28, 0x3d	; 61
     17c:	de b7       	in	r29, 0x3e	; 62
     17e:	9a 83       	std	Y+2, r25	; 0x02
     180:	89 83       	std	Y+1, r24	; 0x01
	return (WORD)year;
     182:	89 81       	ldd	r24, Y+1	; 0x01
     184:	9a 81       	ldd	r25, Y+2	; 0x02
     186:	fc 01       	movw	r30, r24
     188:	84 81       	ldd	r24, Z+4	; 0x04
     18a:	95 81       	ldd	r25, Z+5	; 0x05
}
     18c:	0f 90       	pop	r0
     18e:	0f 90       	pop	r0
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <_ZN6myDate7getDaysEv>:

BYTE myDate::getDays(){
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	00 d0       	rcall	.+0      	; 0x19c <_ZN6myDate7getDaysEv+0x6>
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
     1a0:	9a 83       	std	Y+2, r25	; 0x02
     1a2:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)day;
     1a4:	89 81       	ldd	r24, Y+1	; 0x01
     1a6:	9a 81       	ldd	r25, Y+2	; 0x02
     1a8:	fc 01       	movw	r30, r24
     1aa:	82 81       	ldd	r24, Z+2	; 0x02
     1ac:	93 81       	ldd	r25, Z+3	; 0x03
}
     1ae:	0f 90       	pop	r0
     1b0:	0f 90       	pop	r0
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	08 95       	ret

000001b8 <_ZN6myDate8setMonthEi>:

void myDate::setMonth(int month){
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	00 d0       	rcall	.+0      	; 0x1be <_ZN6myDate8setMonthEi+0x6>
     1be:	00 d0       	rcall	.+0      	; 0x1c0 <_ZN6myDate8setMonthEi+0x8>
     1c0:	cd b7       	in	r28, 0x3d	; 61
     1c2:	de b7       	in	r29, 0x3e	; 62
     1c4:	9a 83       	std	Y+2, r25	; 0x02
     1c6:	89 83       	std	Y+1, r24	; 0x01
     1c8:	7c 83       	std	Y+4, r23	; 0x04
     1ca:	6b 83       	std	Y+3, r22	; 0x03
	if (month/13 == 0){
     1cc:	8b 81       	ldd	r24, Y+3	; 0x03
     1ce:	9c 81       	ldd	r25, Y+4	; 0x04
     1d0:	0c 96       	adiw	r24, 0x0c	; 12
     1d2:	89 31       	cpi	r24, 0x19	; 25
     1d4:	91 05       	cpc	r25, r1
     1d6:	38 f4       	brcc	.+14     	; 0x1e6 <_ZN6myDate8setMonthEi+0x2e>
		this->month = month;
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
     1da:	9a 81       	ldd	r25, Y+2	; 0x02
     1dc:	2b 81       	ldd	r18, Y+3	; 0x03
     1de:	3c 81       	ldd	r19, Y+4	; 0x04
     1e0:	fc 01       	movw	r30, r24
     1e2:	31 83       	std	Z+1, r19	; 0x01
     1e4:	20 83       	st	Z, r18
	}
}
     1e6:	0f 90       	pop	r0
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <_ZN6myDate6setDayEi>:

void myDate::setDay(int day){
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	00 d0       	rcall	.+0      	; 0x1fa <_ZN6myDate6setDayEi+0x6>
     1fa:	00 d0       	rcall	.+0      	; 0x1fc <_ZN6myDate6setDayEi+0x8>
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
     200:	9a 83       	std	Y+2, r25	; 0x02
     202:	89 83       	std	Y+1, r24	; 0x01
     204:	7c 83       	std	Y+4, r23	; 0x04
     206:	6b 83       	std	Y+3, r22	; 0x03
	if ((month == 9 || month == 4 || month == 6) && day/31 == 0){
     208:	89 81       	ldd	r24, Y+1	; 0x01
     20a:	9a 81       	ldd	r25, Y+2	; 0x02
     20c:	fc 01       	movw	r30, r24
     20e:	80 81       	ld	r24, Z
     210:	91 81       	ldd	r25, Z+1	; 0x01
     212:	89 30       	cpi	r24, 0x09	; 9
     214:	91 05       	cpc	r25, r1
     216:	81 f0       	breq	.+32     	; 0x238 <_ZN6myDate6setDayEi+0x44>
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	9a 81       	ldd	r25, Y+2	; 0x02
     21c:	fc 01       	movw	r30, r24
     21e:	80 81       	ld	r24, Z
     220:	91 81       	ldd	r25, Z+1	; 0x01
     222:	84 30       	cpi	r24, 0x04	; 4
     224:	91 05       	cpc	r25, r1
     226:	41 f0       	breq	.+16     	; 0x238 <_ZN6myDate6setDayEi+0x44>
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	9a 81       	ldd	r25, Y+2	; 0x02
     22c:	fc 01       	movw	r30, r24
     22e:	80 81       	ld	r24, Z
     230:	91 81       	ldd	r25, Z+1	; 0x01
     232:	86 30       	cpi	r24, 0x06	; 6
     234:	91 05       	cpc	r25, r1
     236:	41 f4       	brne	.+16     	; 0x248 <_ZN6myDate6setDayEi+0x54>
     238:	8b 81       	ldd	r24, Y+3	; 0x03
     23a:	9c 81       	ldd	r25, Y+4	; 0x04
     23c:	4e 96       	adiw	r24, 0x1e	; 30
     23e:	8d 33       	cpi	r24, 0x3D	; 61
     240:	91 05       	cpc	r25, r1
     242:	10 f4       	brcc	.+4      	; 0x248 <_ZN6myDate6setDayEi+0x54>
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	01 c0       	rjmp	.+2      	; 0x24a <_ZN6myDate6setDayEi+0x56>
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	88 23       	and	r24, r24
     24c:	41 f0       	breq	.+16     	; 0x25e <_ZN6myDate6setDayEi+0x6a>
		this->day = day;
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	9a 81       	ldd	r25, Y+2	; 0x02
     252:	2b 81       	ldd	r18, Y+3	; 0x03
     254:	3c 81       	ldd	r19, Y+4	; 0x04
     256:	fc 01       	movw	r30, r24
     258:	33 83       	std	Z+3, r19	; 0x03
     25a:	22 83       	std	Z+2, r18	; 0x02
     25c:	28 c0       	rjmp	.+80     	; 0x2ae <_ZN6myDate6setDayEi+0xba>
	} else if (month == 2 && day/29 == 0){
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	9a 81       	ldd	r25, Y+2	; 0x02
     262:	fc 01       	movw	r30, r24
     264:	80 81       	ld	r24, Z
     266:	91 81       	ldd	r25, Z+1	; 0x01
     268:	82 30       	cpi	r24, 0x02	; 2
     26a:	91 05       	cpc	r25, r1
     26c:	41 f4       	brne	.+16     	; 0x27e <_ZN6myDate6setDayEi+0x8a>
     26e:	8b 81       	ldd	r24, Y+3	; 0x03
     270:	9c 81       	ldd	r25, Y+4	; 0x04
     272:	4c 96       	adiw	r24, 0x1c	; 28
     274:	89 33       	cpi	r24, 0x39	; 57
     276:	91 05       	cpc	r25, r1
     278:	10 f4       	brcc	.+4      	; 0x27e <_ZN6myDate6setDayEi+0x8a>
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	01 c0       	rjmp	.+2      	; 0x280 <_ZN6myDate6setDayEi+0x8c>
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	88 23       	and	r24, r24
     282:	41 f0       	breq	.+16     	; 0x294 <_ZN6myDate6setDayEi+0xa0>
		this->day = day;
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	9a 81       	ldd	r25, Y+2	; 0x02
     288:	2b 81       	ldd	r18, Y+3	; 0x03
     28a:	3c 81       	ldd	r19, Y+4	; 0x04
     28c:	fc 01       	movw	r30, r24
     28e:	33 83       	std	Z+3, r19	; 0x03
     290:	22 83       	std	Z+2, r18	; 0x02
     292:	0d c0       	rjmp	.+26     	; 0x2ae <_ZN6myDate6setDayEi+0xba>
	} else{
		if (day/32 == 0){
     294:	8b 81       	ldd	r24, Y+3	; 0x03
     296:	9c 81       	ldd	r25, Y+4	; 0x04
     298:	4f 96       	adiw	r24, 0x1f	; 31
     29a:	8f 33       	cpi	r24, 0x3F	; 63
     29c:	91 05       	cpc	r25, r1
     29e:	38 f4       	brcc	.+14     	; 0x2ae <_ZN6myDate6setDayEi+0xba>
			this->day = day;
     2a0:	89 81       	ldd	r24, Y+1	; 0x01
     2a2:	9a 81       	ldd	r25, Y+2	; 0x02
     2a4:	2b 81       	ldd	r18, Y+3	; 0x03
     2a6:	3c 81       	ldd	r19, Y+4	; 0x04
     2a8:	fc 01       	movw	r30, r24
     2aa:	33 83       	std	Z+3, r19	; 0x03
     2ac:	22 83       	std	Z+2, r18	; 0x02
		}		
	}
}
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	08 95       	ret

000002bc <_ZN6myDate7setYearEi>:

void myDate::setYear(int year){
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	00 d0       	rcall	.+0      	; 0x2c2 <_ZN6myDate7setYearEi+0x6>
     2c2:	00 d0       	rcall	.+0      	; 0x2c4 <_ZN6myDate7setYearEi+0x8>
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
     2c8:	9a 83       	std	Y+2, r25	; 0x02
     2ca:	89 83       	std	Y+1, r24	; 0x01
     2cc:	7c 83       	std	Y+4, r23	; 0x04
     2ce:	6b 83       	std	Y+3, r22	; 0x03
	if (year >= 2000){
     2d0:	8b 81       	ldd	r24, Y+3	; 0x03
     2d2:	9c 81       	ldd	r25, Y+4	; 0x04
     2d4:	27 e0       	ldi	r18, 0x07	; 7
     2d6:	80 3d       	cpi	r24, 0xD0	; 208
     2d8:	92 07       	cpc	r25, r18
     2da:	44 f0       	brlt	.+16     	; 0x2ec <_ZN6myDate7setYearEi+0x30>
		this->year = year;
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	9a 81       	ldd	r25, Y+2	; 0x02
     2e0:	2b 81       	ldd	r18, Y+3	; 0x03
     2e2:	3c 81       	ldd	r19, Y+4	; 0x04
     2e4:	fc 01       	movw	r30, r24
     2e6:	35 83       	std	Z+5, r19	; 0x05
     2e8:	24 83       	std	Z+4, r18	; 0x04
     2ea:	07 c0       	rjmp	.+14     	; 0x2fa <_ZN6myDate7setYearEi+0x3e>
	} else {
		this->year = 1010;
     2ec:	89 81       	ldd	r24, Y+1	; 0x01
     2ee:	9a 81       	ldd	r25, Y+2	; 0x02
     2f0:	22 ef       	ldi	r18, 0xF2	; 242
     2f2:	33 e0       	ldi	r19, 0x03	; 3
     2f4:	fc 01       	movw	r30, r24
     2f6:	35 83       	std	Z+5, r19	; 0x05
     2f8:	24 83       	std	Z+4, r18	; 0x04
	}	
}
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	08 95       	ret

00000308 <_ZN6myDate7setDateEiii>:

void myDate::setDate(int month, int day, int year){
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	cd b7       	in	r28, 0x3d	; 61
     30e:	de b7       	in	r29, 0x3e	; 62
     310:	28 97       	sbiw	r28, 0x08	; 8
     312:	0f b6       	in	r0, 0x3f	; 63
     314:	f8 94       	cli
     316:	de bf       	out	0x3e, r29	; 62
     318:	0f be       	out	0x3f, r0	; 63
     31a:	cd bf       	out	0x3d, r28	; 61
     31c:	9a 83       	std	Y+2, r25	; 0x02
     31e:	89 83       	std	Y+1, r24	; 0x01
     320:	7c 83       	std	Y+4, r23	; 0x04
     322:	6b 83       	std	Y+3, r22	; 0x03
     324:	5e 83       	std	Y+6, r21	; 0x06
     326:	4d 83       	std	Y+5, r20	; 0x05
     328:	38 87       	std	Y+8, r19	; 0x08
     32a:	2f 83       	std	Y+7, r18	; 0x07
	setMonth(month);
     32c:	89 81       	ldd	r24, Y+1	; 0x01
     32e:	9a 81       	ldd	r25, Y+2	; 0x02
     330:	2b 81       	ldd	r18, Y+3	; 0x03
     332:	3c 81       	ldd	r19, Y+4	; 0x04
     334:	b9 01       	movw	r22, r18
     336:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN6myDate8setMonthEi>
	setDay(day);
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	9a 81       	ldd	r25, Y+2	; 0x02
     33e:	2d 81       	ldd	r18, Y+5	; 0x05
     340:	3e 81       	ldd	r19, Y+6	; 0x06
     342:	b9 01       	movw	r22, r18
     344:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_ZN6myDate6setDayEi>
	setYear(year);
     348:	89 81       	ldd	r24, Y+1	; 0x01
     34a:	9a 81       	ldd	r25, Y+2	; 0x02
     34c:	2f 81       	ldd	r18, Y+7	; 0x07
     34e:	38 85       	ldd	r19, Y+8	; 0x08
     350:	b9 01       	movw	r22, r18
     352:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_ZN6myDate7setYearEi>
}
     356:	28 96       	adiw	r28, 0x08	; 8
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	0f be       	out	0x3f, r0	; 63
     360:	cd bf       	out	0x3d, r28	; 61
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	08 95       	ret

00000368 <_ZN6myDate8addYearsEi>:


void myDate::addYears(int years){	//allows negative years to come in, therefore subtracting years
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	00 d0       	rcall	.+0      	; 0x36e <_ZN6myDate8addYearsEi+0x6>
     36e:	00 d0       	rcall	.+0      	; 0x370 <_ZN6myDate8addYearsEi+0x8>
     370:	00 d0       	rcall	.+0      	; 0x372 <_ZN6myDate8addYearsEi+0xa>
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	9c 83       	std	Y+4, r25	; 0x04
     378:	8b 83       	std	Y+3, r24	; 0x03
     37a:	7e 83       	std	Y+6, r23	; 0x06
     37c:	6d 83       	std	Y+5, r22	; 0x05
	volatile int tempYears = year + years;
     37e:	8b 81       	ldd	r24, Y+3	; 0x03
     380:	9c 81       	ldd	r25, Y+4	; 0x04
     382:	fc 01       	movw	r30, r24
     384:	24 81       	ldd	r18, Z+4	; 0x04
     386:	35 81       	ldd	r19, Z+5	; 0x05
     388:	8d 81       	ldd	r24, Y+5	; 0x05
     38a:	9e 81       	ldd	r25, Y+6	; 0x06
     38c:	82 0f       	add	r24, r18
     38e:	93 1f       	adc	r25, r19
     390:	9a 83       	std	Y+2, r25	; 0x02
     392:	89 83       	std	Y+1, r24	; 0x01
	if (tempYears > 2012){
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	9a 81       	ldd	r25, Y+2	; 0x02
     398:	21 e0       	ldi	r18, 0x01	; 1
     39a:	f7 e0       	ldi	r31, 0x07	; 7
     39c:	8d 3d       	cpi	r24, 0xDD	; 221
     39e:	9f 07       	cpc	r25, r31
     3a0:	0c f4       	brge	.+2      	; 0x3a4 <_ZN6myDate8addYearsEi+0x3c>
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	22 23       	and	r18, r18
     3a6:	39 f0       	breq	.+14     	; 0x3b6 <_ZN6myDate8addYearsEi+0x4e>
		year = tempYears;
     3a8:	29 81       	ldd	r18, Y+1	; 0x01
     3aa:	3a 81       	ldd	r19, Y+2	; 0x02
     3ac:	8b 81       	ldd	r24, Y+3	; 0x03
     3ae:	9c 81       	ldd	r25, Y+4	; 0x04
     3b0:	fc 01       	movw	r30, r24
     3b2:	35 83       	std	Z+5, r19	; 0x05
     3b4:	24 83       	std	Z+4, r18	; 0x04
	}
}
     3b6:	26 96       	adiw	r28, 0x06	; 6
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	f8 94       	cli
     3bc:	de bf       	out	0x3e, r29	; 62
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	cd bf       	out	0x3d, r28	; 61
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <_ZN6myDate9addMonthsEi>:

void myDate::addMonths(int months){	//adds months depending on number of months currently on.
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
     3d0:	2a 97       	sbiw	r28, 0x0a	; 10
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	f8 94       	cli
     3d6:	de bf       	out	0x3e, r29	; 62
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	cd bf       	out	0x3d, r28	; 61
     3dc:	98 87       	std	Y+8, r25	; 0x08
     3de:	8f 83       	std	Y+7, r24	; 0x07
     3e0:	7a 87       	std	Y+10, r23	; 0x0a
     3e2:	69 87       	std	Y+9, r22	; 0x09
	volatile int tempMonths = month + months;
     3e4:	8f 81       	ldd	r24, Y+7	; 0x07
     3e6:	98 85       	ldd	r25, Y+8	; 0x08
     3e8:	fc 01       	movw	r30, r24
     3ea:	20 81       	ld	r18, Z
     3ec:	31 81       	ldd	r19, Z+1	; 0x01
     3ee:	89 85       	ldd	r24, Y+9	; 0x09
     3f0:	9a 85       	ldd	r25, Y+10	; 0x0a
     3f2:	82 0f       	add	r24, r18
     3f4:	93 1f       	adc	r25, r19
     3f6:	9e 83       	std	Y+6, r25	; 0x06
     3f8:	8d 83       	std	Y+5, r24	; 0x05
	if (tempMonths > 12 && tempMonths < 25){
     3fa:	8d 81       	ldd	r24, Y+5	; 0x05
     3fc:	9e 81       	ldd	r25, Y+6	; 0x06
     3fe:	8d 30       	cpi	r24, 0x0D	; 13
     400:	91 05       	cpc	r25, r1
     402:	3c f0       	brlt	.+14     	; 0x412 <_ZN6myDate9addMonthsEi+0x4a>
     404:	8d 81       	ldd	r24, Y+5	; 0x05
     406:	9e 81       	ldd	r25, Y+6	; 0x06
     408:	89 31       	cpi	r24, 0x19	; 25
     40a:	91 05       	cpc	r25, r1
     40c:	14 f4       	brge	.+4      	; 0x412 <_ZN6myDate9addMonthsEi+0x4a>
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	01 c0       	rjmp	.+2      	; 0x414 <_ZN6myDate9addMonthsEi+0x4c>
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	88 23       	and	r24, r24
     416:	61 f0       	breq	.+24     	; 0x430 <_ZN6myDate9addMonthsEi+0x68>
		int yearsToAdd = 1;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	9a 83       	std	Y+2, r25	; 0x02
     41e:	89 83       	std	Y+1, r24	; 0x01
		addYears(yearsToAdd);
     420:	8f 81       	ldd	r24, Y+7	; 0x07
     422:	98 85       	ldd	r25, Y+8	; 0x08
     424:	29 81       	ldd	r18, Y+1	; 0x01
     426:	3a 81       	ldd	r19, Y+2	; 0x02
     428:	b9 01       	movw	r22, r18
     42a:	0e 94 b4 01 	call	0x368	; 0x368 <_ZN6myDate8addYearsEi>
     42e:	22 c0       	rjmp	.+68     	; 0x474 <_ZN6myDate9addMonthsEi+0xac>
	} else if (tempMonths >= 25){
     430:	8d 81       	ldd	r24, Y+5	; 0x05
     432:	9e 81       	ldd	r25, Y+6	; 0x06
     434:	21 e0       	ldi	r18, 0x01	; 1
     436:	89 31       	cpi	r24, 0x19	; 25
     438:	91 05       	cpc	r25, r1
     43a:	0c f4       	brge	.+2      	; 0x43e <_ZN6myDate9addMonthsEi+0x76>
     43c:	20 e0       	ldi	r18, 0x00	; 0
     43e:	22 23       	and	r18, r18
     440:	91 f0       	breq	.+36     	; 0x466 <_ZN6myDate9addMonthsEi+0x9e>
		int yearsToAdd = tempMonths/12;
     442:	8d 81       	ldd	r24, Y+5	; 0x05
     444:	9e 81       	ldd	r25, Y+6	; 0x06
     446:	2c e0       	ldi	r18, 0x0C	; 12
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	b9 01       	movw	r22, r18
     44c:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__divmodhi4>
     450:	9b 01       	movw	r18, r22
     452:	3c 83       	std	Y+4, r19	; 0x04
     454:	2b 83       	std	Y+3, r18	; 0x03
		addYears(yearsToAdd);
     456:	8f 81       	ldd	r24, Y+7	; 0x07
     458:	98 85       	ldd	r25, Y+8	; 0x08
     45a:	2b 81       	ldd	r18, Y+3	; 0x03
     45c:	3c 81       	ldd	r19, Y+4	; 0x04
     45e:	b9 01       	movw	r22, r18
     460:	0e 94 b4 01 	call	0x368	; 0x368 <_ZN6myDate8addYearsEi>
     464:	07 c0       	rjmp	.+14     	; 0x474 <_ZN6myDate9addMonthsEi+0xac>
	} else {
		month = tempMonths;
     466:	2d 81       	ldd	r18, Y+5	; 0x05
     468:	3e 81       	ldd	r19, Y+6	; 0x06
     46a:	8f 81       	ldd	r24, Y+7	; 0x07
     46c:	98 85       	ldd	r25, Y+8	; 0x08
     46e:	fc 01       	movw	r30, r24
     470:	31 83       	std	Z+1, r19	; 0x01
     472:	20 83       	st	Z, r18
	}	
}
     474:	2a 96       	adiw	r28, 0x0a	; 10
     476:	0f b6       	in	r0, 0x3f	; 63
     478:	f8 94       	cli
     47a:	de bf       	out	0x3e, r29	; 62
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	cd bf       	out	0x3d, r28	; 61
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <_ZN6myDate7addDaysEi>:

void myDate::addDays(int days){
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	00 d0       	rcall	.+0      	; 0x48c <_ZN6myDate7addDaysEi+0x6>
     48c:	00 d0       	rcall	.+0      	; 0x48e <_ZN6myDate7addDaysEi+0x8>
     48e:	00 d0       	rcall	.+0      	; 0x490 <_ZN6myDate7addDaysEi+0xa>
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
     494:	9c 83       	std	Y+4, r25	; 0x04
     496:	8b 83       	std	Y+3, r24	; 0x03
     498:	7e 83       	std	Y+6, r23	; 0x06
     49a:	6d 83       	std	Y+5, r22	; 0x05
	volatile int tempDays = days + day;
     49c:	8b 81       	ldd	r24, Y+3	; 0x03
     49e:	9c 81       	ldd	r25, Y+4	; 0x04
     4a0:	fc 01       	movw	r30, r24
     4a2:	22 81       	ldd	r18, Z+2	; 0x02
     4a4:	33 81       	ldd	r19, Z+3	; 0x03
     4a6:	8d 81       	ldd	r24, Y+5	; 0x05
     4a8:	9e 81       	ldd	r25, Y+6	; 0x06
     4aa:	82 0f       	add	r24, r18
     4ac:	93 1f       	adc	r25, r19
     4ae:	9a 83       	std	Y+2, r25	; 0x02
     4b0:	89 83       	std	Y+1, r24	; 0x01
	//Logic for incrementing days the right way. We are assuming no more than one month will be added
	if (month == 9 || month == 4 || month == 6){	//30 days in a month
     4b2:	8b 81       	ldd	r24, Y+3	; 0x03
     4b4:	9c 81       	ldd	r25, Y+4	; 0x04
     4b6:	fc 01       	movw	r30, r24
     4b8:	80 81       	ld	r24, Z
     4ba:	91 81       	ldd	r25, Z+1	; 0x01
     4bc:	89 30       	cpi	r24, 0x09	; 9
     4be:	91 05       	cpc	r25, r1
     4c0:	81 f0       	breq	.+32     	; 0x4e2 <_ZN6myDate7addDaysEi+0x5c>
     4c2:	8b 81       	ldd	r24, Y+3	; 0x03
     4c4:	9c 81       	ldd	r25, Y+4	; 0x04
     4c6:	fc 01       	movw	r30, r24
     4c8:	80 81       	ld	r24, Z
     4ca:	91 81       	ldd	r25, Z+1	; 0x01
     4cc:	84 30       	cpi	r24, 0x04	; 4
     4ce:	91 05       	cpc	r25, r1
     4d0:	41 f0       	breq	.+16     	; 0x4e2 <_ZN6myDate7addDaysEi+0x5c>
     4d2:	8b 81       	ldd	r24, Y+3	; 0x03
     4d4:	9c 81       	ldd	r25, Y+4	; 0x04
     4d6:	fc 01       	movw	r30, r24
     4d8:	80 81       	ld	r24, Z
     4da:	91 81       	ldd	r25, Z+1	; 0x01
     4dc:	86 30       	cpi	r24, 0x06	; 6
     4de:	91 05       	cpc	r25, r1
     4e0:	11 f4       	brne	.+4      	; 0x4e6 <_ZN6myDate7addDaysEi+0x60>
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <_ZN6myDate7addDaysEi+0x62>
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	88 23       	and	r24, r24
     4ea:	31 f1       	breq	.+76     	; 0x538 <_ZN6myDate7addDaysEi+0xb2>
		if (tempDays/31 == 0){	
     4ec:	89 81       	ldd	r24, Y+1	; 0x01
     4ee:	9a 81       	ldd	r25, Y+2	; 0x02
     4f0:	4e 96       	adiw	r24, 0x1e	; 30
     4f2:	21 e0       	ldi	r18, 0x01	; 1
     4f4:	8d 33       	cpi	r24, 0x3D	; 61
     4f6:	91 05       	cpc	r25, r1
     4f8:	08 f0       	brcs	.+2      	; 0x4fc <_ZN6myDate7addDaysEi+0x76>
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	22 23       	and	r18, r18
     4fe:	41 f0       	breq	.+16     	; 0x510 <_ZN6myDate7addDaysEi+0x8a>
			day = tempDays;
     500:	29 81       	ldd	r18, Y+1	; 0x01
     502:	3a 81       	ldd	r19, Y+2	; 0x02
     504:	8b 81       	ldd	r24, Y+3	; 0x03
     506:	9c 81       	ldd	r25, Y+4	; 0x04
     508:	fc 01       	movw	r30, r24
     50a:	33 83       	std	Z+3, r19	; 0x03
     50c:	22 83       	std	Z+2, r18	; 0x02
     50e:	71 c0       	rjmp	.+226    	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		} else {
			addMonths(1);	//just add 1 month
     510:	8b 81       	ldd	r24, Y+3	; 0x03
     512:	9c 81       	ldd	r25, Y+4	; 0x04
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN6myDate9addMonthsEi>
			day = tempDays%31;			
     51c:	89 81       	ldd	r24, Y+1	; 0x01
     51e:	9a 81       	ldd	r25, Y+2	; 0x02
     520:	2f e1       	ldi	r18, 0x1F	; 31
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	b9 01       	movw	r22, r18
     526:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__divmodhi4>
     52a:	9c 01       	movw	r18, r24
     52c:	8b 81       	ldd	r24, Y+3	; 0x03
     52e:	9c 81       	ldd	r25, Y+4	; 0x04
     530:	fc 01       	movw	r30, r24
     532:	33 83       	std	Z+3, r19	; 0x03
     534:	22 83       	std	Z+2, r18	; 0x02
     536:	5d c0       	rjmp	.+186    	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		}
	} else if (month == 2){
     538:	8b 81       	ldd	r24, Y+3	; 0x03
     53a:	9c 81       	ldd	r25, Y+4	; 0x04
     53c:	fc 01       	movw	r30, r24
     53e:	80 81       	ld	r24, Z
     540:	91 81       	ldd	r25, Z+1	; 0x01
     542:	21 e0       	ldi	r18, 0x01	; 1
     544:	82 30       	cpi	r24, 0x02	; 2
     546:	91 05       	cpc	r25, r1
     548:	09 f0       	breq	.+2      	; 0x54c <_ZN6myDate7addDaysEi+0xc6>
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	22 23       	and	r18, r18
     54e:	49 f1       	breq	.+82     	; 0x5a2 <_ZN6myDate7addDaysEi+0x11c>
		if(day/29 == 0){		//Don't take into account LeapYear
     550:	8b 81       	ldd	r24, Y+3	; 0x03
     552:	9c 81       	ldd	r25, Y+4	; 0x04
     554:	fc 01       	movw	r30, r24
     556:	82 81       	ldd	r24, Z+2	; 0x02
     558:	93 81       	ldd	r25, Z+3	; 0x03
     55a:	4c 96       	adiw	r24, 0x1c	; 28
     55c:	21 e0       	ldi	r18, 0x01	; 1
     55e:	89 33       	cpi	r24, 0x39	; 57
     560:	91 05       	cpc	r25, r1
     562:	08 f0       	brcs	.+2      	; 0x566 <_ZN6myDate7addDaysEi+0xe0>
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	22 23       	and	r18, r18
     568:	41 f0       	breq	.+16     	; 0x57a <_ZN6myDate7addDaysEi+0xf4>
			day = tempDays;
     56a:	29 81       	ldd	r18, Y+1	; 0x01
     56c:	3a 81       	ldd	r19, Y+2	; 0x02
     56e:	8b 81       	ldd	r24, Y+3	; 0x03
     570:	9c 81       	ldd	r25, Y+4	; 0x04
     572:	fc 01       	movw	r30, r24
     574:	33 83       	std	Z+3, r19	; 0x03
     576:	22 83       	std	Z+2, r18	; 0x02
     578:	3c c0       	rjmp	.+120    	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		} else {
			addMonths(1);
     57a:	8b 81       	ldd	r24, Y+3	; 0x03
     57c:	9c 81       	ldd	r25, Y+4	; 0x04
     57e:	61 e0       	ldi	r22, 0x01	; 1
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN6myDate9addMonthsEi>
			day = tempDays%29;
     586:	89 81       	ldd	r24, Y+1	; 0x01
     588:	9a 81       	ldd	r25, Y+2	; 0x02
     58a:	2d e1       	ldi	r18, 0x1D	; 29
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	b9 01       	movw	r22, r18
     590:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__divmodhi4>
     594:	9c 01       	movw	r18, r24
     596:	8b 81       	ldd	r24, Y+3	; 0x03
     598:	9c 81       	ldd	r25, Y+4	; 0x04
     59a:	fc 01       	movw	r30, r24
     59c:	33 83       	std	Z+3, r19	; 0x03
     59e:	22 83       	std	Z+2, r18	; 0x02
     5a0:	28 c0       	rjmp	.+80     	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		}		
	} else {
		if (day/32 == 0){
     5a2:	8b 81       	ldd	r24, Y+3	; 0x03
     5a4:	9c 81       	ldd	r25, Y+4	; 0x04
     5a6:	fc 01       	movw	r30, r24
     5a8:	82 81       	ldd	r24, Z+2	; 0x02
     5aa:	93 81       	ldd	r25, Z+3	; 0x03
     5ac:	4f 96       	adiw	r24, 0x1f	; 31
     5ae:	21 e0       	ldi	r18, 0x01	; 1
     5b0:	8f 33       	cpi	r24, 0x3F	; 63
     5b2:	91 05       	cpc	r25, r1
     5b4:	08 f0       	brcs	.+2      	; 0x5b8 <_ZN6myDate7addDaysEi+0x132>
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	22 23       	and	r18, r18
     5ba:	41 f0       	breq	.+16     	; 0x5cc <_ZN6myDate7addDaysEi+0x146>
			day = tempDays;
     5bc:	29 81       	ldd	r18, Y+1	; 0x01
     5be:	3a 81       	ldd	r19, Y+2	; 0x02
     5c0:	8b 81       	ldd	r24, Y+3	; 0x03
     5c2:	9c 81       	ldd	r25, Y+4	; 0x04
     5c4:	fc 01       	movw	r30, r24
     5c6:	33 83       	std	Z+3, r19	; 0x03
     5c8:	22 83       	std	Z+2, r18	; 0x02
     5ca:	13 c0       	rjmp	.+38     	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		} else {
			addMonths(1);
     5cc:	8b 81       	ldd	r24, Y+3	; 0x03
     5ce:	9c 81       	ldd	r25, Y+4	; 0x04
     5d0:	61 e0       	ldi	r22, 0x01	; 1
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN6myDate9addMonthsEi>
			day = tempDays%32;
     5d8:	89 81       	ldd	r24, Y+1	; 0x01
     5da:	9a 81       	ldd	r25, Y+2	; 0x02
     5dc:	20 e2       	ldi	r18, 0x20	; 32
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	b9 01       	movw	r22, r18
     5e2:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__divmodhi4>
     5e6:	9c 01       	movw	r18, r24
     5e8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ea:	9c 81       	ldd	r25, Y+4	; 0x04
     5ec:	fc 01       	movw	r30, r24
     5ee:	33 83       	std	Z+3, r19	; 0x03
     5f0:	22 83       	std	Z+2, r18	; 0x02
		}
	}
}
     5f2:	26 96       	adiw	r28, 0x06	; 6
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	f8 94       	cli
     5f8:	de bf       	out	0x3e, r29	; 62
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	cd bf       	out	0x3d, r28	; 61
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <_ZN6myDate17checkValidityDateEv>:

BOOL myDate::checkValidityDate(){
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	00 d0       	rcall	.+0      	; 0x60a <_ZN6myDate17checkValidityDateEv+0x6>
     60a:	0f 92       	push	r0
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	9b 83       	std	Y+3, r25	; 0x03
     612:	8a 83       	std	Y+2, r24	; 0x02
	BOOL checkYear=fFalse;
     614:	19 82       	std	Y+1, r1	; 0x01
	if (month/13==0){
     616:	8a 81       	ldd	r24, Y+2	; 0x02
     618:	9b 81       	ldd	r25, Y+3	; 0x03
     61a:	fc 01       	movw	r30, r24
     61c:	80 81       	ld	r24, Z
     61e:	91 81       	ldd	r25, Z+1	; 0x01
     620:	0c 96       	adiw	r24, 0x0c	; 12
     622:	21 e0       	ldi	r18, 0x01	; 1
     624:	89 31       	cpi	r24, 0x19	; 25
     626:	91 05       	cpc	r25, r1
     628:	08 f0       	brcs	.+2      	; 0x62c <_ZN6myDate17checkValidityDateEv+0x28>
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	22 23       	and	r18, r18
     62e:	09 f4       	brne	.+2      	; 0x632 <_ZN6myDate17checkValidityDateEv+0x2e>
     630:	66 c0       	rjmp	.+204    	; 0x6fe <_ZN6myDate17checkValidityDateEv+0xfa>
			if ((month == 9 || month == 4 || month == 6) && day/31 == 0){
     632:	8a 81       	ldd	r24, Y+2	; 0x02
     634:	9b 81       	ldd	r25, Y+3	; 0x03
     636:	fc 01       	movw	r30, r24
     638:	80 81       	ld	r24, Z
     63a:	91 81       	ldd	r25, Z+1	; 0x01
     63c:	89 30       	cpi	r24, 0x09	; 9
     63e:	91 05       	cpc	r25, r1
     640:	81 f0       	breq	.+32     	; 0x662 <_ZN6myDate17checkValidityDateEv+0x5e>
     642:	8a 81       	ldd	r24, Y+2	; 0x02
     644:	9b 81       	ldd	r25, Y+3	; 0x03
     646:	fc 01       	movw	r30, r24
     648:	80 81       	ld	r24, Z
     64a:	91 81       	ldd	r25, Z+1	; 0x01
     64c:	84 30       	cpi	r24, 0x04	; 4
     64e:	91 05       	cpc	r25, r1
     650:	41 f0       	breq	.+16     	; 0x662 <_ZN6myDate17checkValidityDateEv+0x5e>
     652:	8a 81       	ldd	r24, Y+2	; 0x02
     654:	9b 81       	ldd	r25, Y+3	; 0x03
     656:	fc 01       	movw	r30, r24
     658:	80 81       	ld	r24, Z
     65a:	91 81       	ldd	r25, Z+1	; 0x01
     65c:	86 30       	cpi	r24, 0x06	; 6
     65e:	91 05       	cpc	r25, r1
     660:	59 f4       	brne	.+22     	; 0x678 <_ZN6myDate17checkValidityDateEv+0x74>
     662:	8a 81       	ldd	r24, Y+2	; 0x02
     664:	9b 81       	ldd	r25, Y+3	; 0x03
     666:	fc 01       	movw	r30, r24
     668:	82 81       	ldd	r24, Z+2	; 0x02
     66a:	93 81       	ldd	r25, Z+3	; 0x03
     66c:	4e 96       	adiw	r24, 0x1e	; 30
     66e:	8d 33       	cpi	r24, 0x3D	; 61
     670:	91 05       	cpc	r25, r1
     672:	10 f4       	brcc	.+4      	; 0x678 <_ZN6myDate17checkValidityDateEv+0x74>
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	01 c0       	rjmp	.+2      	; 0x67a <_ZN6myDate17checkValidityDateEv+0x76>
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	88 23       	and	r24, r24
     67c:	19 f0       	breq	.+6      	; 0x684 <_ZN6myDate17checkValidityDateEv+0x80>
				checkYear=fTrue;
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	89 83       	std	Y+1, r24	; 0x01
     682:	28 c0       	rjmp	.+80     	; 0x6d4 <_ZN6myDate17checkValidityDateEv+0xd0>
			} else if (month == 2 && day/29 == 0){
     684:	8a 81       	ldd	r24, Y+2	; 0x02
     686:	9b 81       	ldd	r25, Y+3	; 0x03
     688:	fc 01       	movw	r30, r24
     68a:	80 81       	ld	r24, Z
     68c:	91 81       	ldd	r25, Z+1	; 0x01
     68e:	82 30       	cpi	r24, 0x02	; 2
     690:	91 05       	cpc	r25, r1
     692:	59 f4       	brne	.+22     	; 0x6aa <_ZN6myDate17checkValidityDateEv+0xa6>
     694:	8a 81       	ldd	r24, Y+2	; 0x02
     696:	9b 81       	ldd	r25, Y+3	; 0x03
     698:	fc 01       	movw	r30, r24
     69a:	82 81       	ldd	r24, Z+2	; 0x02
     69c:	93 81       	ldd	r25, Z+3	; 0x03
     69e:	4c 96       	adiw	r24, 0x1c	; 28
     6a0:	89 33       	cpi	r24, 0x39	; 57
     6a2:	91 05       	cpc	r25, r1
     6a4:	10 f4       	brcc	.+4      	; 0x6aa <_ZN6myDate17checkValidityDateEv+0xa6>
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	01 c0       	rjmp	.+2      	; 0x6ac <_ZN6myDate17checkValidityDateEv+0xa8>
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	88 23       	and	r24, r24
     6ae:	19 f0       	breq	.+6      	; 0x6b6 <_ZN6myDate17checkValidityDateEv+0xb2>
				checkYear=fTrue;
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	89 83       	std	Y+1, r24	; 0x01
     6b4:	0f c0       	rjmp	.+30     	; 0x6d4 <_ZN6myDate17checkValidityDateEv+0xd0>
			} else{
				if (day/32 == 0){
     6b6:	8a 81       	ldd	r24, Y+2	; 0x02
     6b8:	9b 81       	ldd	r25, Y+3	; 0x03
     6ba:	fc 01       	movw	r30, r24
     6bc:	82 81       	ldd	r24, Z+2	; 0x02
     6be:	93 81       	ldd	r25, Z+3	; 0x03
     6c0:	4f 96       	adiw	r24, 0x1f	; 31
     6c2:	21 e0       	ldi	r18, 0x01	; 1
     6c4:	8f 33       	cpi	r24, 0x3F	; 63
     6c6:	91 05       	cpc	r25, r1
     6c8:	08 f0       	brcs	.+2      	; 0x6cc <_ZN6myDate17checkValidityDateEv+0xc8>
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	22 23       	and	r18, r18
     6ce:	11 f0       	breq	.+4      	; 0x6d4 <_ZN6myDate17checkValidityDateEv+0xd0>
					checkYear=fTrue;
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	89 83       	std	Y+1, r24	; 0x01
				}
			}
			
			//Check year
			if (checkYear && year>=2013){return fTrue;}
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
     6d6:	88 23       	and	r24, r24
     6d8:	59 f0       	breq	.+22     	; 0x6f0 <_ZN6myDate17checkValidityDateEv+0xec>
     6da:	8a 81       	ldd	r24, Y+2	; 0x02
     6dc:	9b 81       	ldd	r25, Y+3	; 0x03
     6de:	fc 01       	movw	r30, r24
     6e0:	84 81       	ldd	r24, Z+4	; 0x04
     6e2:	95 81       	ldd	r25, Z+5	; 0x05
     6e4:	f7 e0       	ldi	r31, 0x07	; 7
     6e6:	8d 3d       	cpi	r24, 0xDD	; 221
     6e8:	9f 07       	cpc	r25, r31
     6ea:	14 f0       	brlt	.+4      	; 0x6f0 <_ZN6myDate17checkValidityDateEv+0xec>
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	01 c0       	rjmp	.+2      	; 0x6f2 <_ZN6myDate17checkValidityDateEv+0xee>
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	88 23       	and	r24, r24
     6f4:	11 f0       	breq	.+4      	; 0x6fa <_ZN6myDate17checkValidityDateEv+0xf6>
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	03 c0       	rjmp	.+6      	; 0x700 <_ZN6myDate17checkValidityDateEv+0xfc>
			else {return fFalse;}
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	01 c0       	rjmp	.+2      	; 0x700 <_ZN6myDate17checkValidityDateEv+0xfc>
	} else {return fFalse;}
     6fe:	80 e0       	ldi	r24, 0x00	; 0
}
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <_ZN6myDate7getDateEv>:

const char * myDate::getDate(){
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
     714:	2d 97       	sbiw	r28, 0x0d	; 13
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	f8 94       	cli
     71a:	de bf       	out	0x3e, r29	; 62
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	cd bf       	out	0x3d, r28	; 61
     720:	9d 87       	std	Y+13, r25	; 0x0d
     722:	8c 87       	std	Y+12, r24	; 0x0c
	char monthString[3],dayString[3],yearString[5];
	itoa(month,monthString,10);
     724:	8c 85       	ldd	r24, Y+12	; 0x0c
     726:	9d 85       	ldd	r25, Y+13	; 0x0d
     728:	fc 01       	movw	r30, r24
     72a:	80 81       	ld	r24, Z
     72c:	91 81       	ldd	r25, Z+1	; 0x01
     72e:	9e 01       	movw	r18, r28
     730:	2f 5f       	subi	r18, 0xFF	; 255
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	b9 01       	movw	r22, r18
     736:	4a e0       	ldi	r20, 0x0A	; 10
     738:	50 e0       	ldi	r21, 0x00	; 0
     73a:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <itoa>
	itoa(day,dayString,10);
     73e:	8c 85       	ldd	r24, Y+12	; 0x0c
     740:	9d 85       	ldd	r25, Y+13	; 0x0d
     742:	fc 01       	movw	r30, r24
     744:	82 81       	ldd	r24, Z+2	; 0x02
     746:	93 81       	ldd	r25, Z+3	; 0x03
     748:	9e 01       	movw	r18, r28
     74a:	2c 5f       	subi	r18, 0xFC	; 252
     74c:	3f 4f       	sbci	r19, 0xFF	; 255
     74e:	b9 01       	movw	r22, r18
     750:	4a e0       	ldi	r20, 0x0A	; 10
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <itoa>
	itoa(year,yearString,10);
     758:	8c 85       	ldd	r24, Y+12	; 0x0c
     75a:	9d 85       	ldd	r25, Y+13	; 0x0d
     75c:	fc 01       	movw	r30, r24
     75e:	84 81       	ldd	r24, Z+4	; 0x04
     760:	95 81       	ldd	r25, Z+5	; 0x05
     762:	9e 01       	movw	r18, r28
     764:	29 5f       	subi	r18, 0xF9	; 249
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	b9 01       	movw	r22, r18
     76a:	4a e0       	ldi	r20, 0x0A	; 10
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <itoa>
	strcpy(dateString,monthString);
     772:	8c 85       	ldd	r24, Y+12	; 0x0c
     774:	9d 85       	ldd	r25, Y+13	; 0x0d
     776:	06 96       	adiw	r24, 0x06	; 6
     778:	9e 01       	movw	r18, r28
     77a:	2f 5f       	subi	r18, 0xFF	; 255
     77c:	3f 4f       	sbci	r19, 0xFF	; 255
     77e:	b9 01       	movw	r22, r18
     780:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <strcpy>
	strcat(dateString,",");
     784:	8c 85       	ldd	r24, Y+12	; 0x0c
     786:	9d 85       	ldd	r25, Y+13	; 0x0d
     788:	9c 01       	movw	r18, r24
     78a:	2a 5f       	subi	r18, 0xFA	; 250
     78c:	3f 4f       	sbci	r19, 0xFF	; 255
     78e:	c9 01       	movw	r24, r18
     790:	ac 01       	movw	r20, r24
     792:	fa 01       	movw	r30, r20
     794:	01 90       	ld	r0, Z+
     796:	00 20       	and	r0, r0
     798:	e9 f7       	brne	.-6      	; 0x794 <_ZN6myDate7getDateEv+0x88>
     79a:	cf 01       	movw	r24, r30
     79c:	01 97       	sbiw	r24, 0x01	; 1
     79e:	84 1b       	sub	r24, r20
     7a0:	95 0b       	sbc	r25, r21
     7a2:	82 0f       	add	r24, r18
     7a4:	93 1f       	adc	r25, r19
     7a6:	2c e2       	ldi	r18, 0x2C	; 44
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	fc 01       	movw	r30, r24
     7ac:	31 83       	std	Z+1, r19	; 0x01
     7ae:	20 83       	st	Z, r18
	strcat(dateString,dayString);
     7b0:	8c 85       	ldd	r24, Y+12	; 0x0c
     7b2:	9d 85       	ldd	r25, Y+13	; 0x0d
     7b4:	06 96       	adiw	r24, 0x06	; 6
     7b6:	9e 01       	movw	r18, r28
     7b8:	2c 5f       	subi	r18, 0xFC	; 252
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	b9 01       	movw	r22, r18
     7be:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <strcat>
	strcat(dateString,",");
     7c2:	8c 85       	ldd	r24, Y+12	; 0x0c
     7c4:	9d 85       	ldd	r25, Y+13	; 0x0d
     7c6:	9c 01       	movw	r18, r24
     7c8:	2a 5f       	subi	r18, 0xFA	; 250
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	c9 01       	movw	r24, r18
     7ce:	ac 01       	movw	r20, r24
     7d0:	fa 01       	movw	r30, r20
     7d2:	01 90       	ld	r0, Z+
     7d4:	00 20       	and	r0, r0
     7d6:	e9 f7       	brne	.-6      	; 0x7d2 <_ZN6myDate7getDateEv+0xc6>
     7d8:	cf 01       	movw	r24, r30
     7da:	01 97       	sbiw	r24, 0x01	; 1
     7dc:	84 1b       	sub	r24, r20
     7de:	95 0b       	sbc	r25, r21
     7e0:	82 0f       	add	r24, r18
     7e2:	93 1f       	adc	r25, r19
     7e4:	2c e2       	ldi	r18, 0x2C	; 44
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	fc 01       	movw	r30, r24
     7ea:	31 83       	std	Z+1, r19	; 0x01
     7ec:	20 83       	st	Z, r18
	strcat(dateString,yearString);
     7ee:	8c 85       	ldd	r24, Y+12	; 0x0c
     7f0:	9d 85       	ldd	r25, Y+13	; 0x0d
     7f2:	06 96       	adiw	r24, 0x06	; 6
     7f4:	9e 01       	movw	r18, r28
     7f6:	29 5f       	subi	r18, 0xF9	; 249
     7f8:	3f 4f       	sbci	r19, 0xFF	; 255
     7fa:	b9 01       	movw	r22, r18
     7fc:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <strcat>
	dateString[15] = ' ';
     800:	8c 85       	ldd	r24, Y+12	; 0x0c
     802:	9d 85       	ldd	r25, Y+13	; 0x0d
     804:	20 e2       	ldi	r18, 0x20	; 32
     806:	fc 01       	movw	r30, r24
     808:	25 8b       	std	Z+21, r18	; 0x15
	dateString[16] = '\0';
     80a:	8c 85       	ldd	r24, Y+12	; 0x0c
     80c:	9d 85       	ldd	r25, Y+13	; 0x0d
     80e:	fc 01       	movw	r30, r24
     810:	16 8a       	std	Z+22, r1	; 0x16
	
	return dateString;
     812:	8c 85       	ldd	r24, Y+12	; 0x0c
     814:	9d 85       	ldd	r25, Y+13	; 0x0d
     816:	06 96       	adiw	r24, 0x06	; 6
     818:	2d 96       	adiw	r28, 0x0d	; 13
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	de bf       	out	0x3e, r29	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	cd bf       	out	0x3d, r28	; 61
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	08 95       	ret

0000082a <_ZN6myTimeC1Ev>:
		void addMinutes(int minutes);
		void setHour(int hour);
		void setMinute(int minute);
};

myTime::myTime():myDate(){
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	00 d0       	rcall	.+0      	; 0x830 <_ZN6myTimeC1Ev+0x6>
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	9a 83       	std	Y+2, r25	; 0x02
     836:	89 83       	std	Y+1, r24	; 0x01
     838:	89 81       	ldd	r24, Y+1	; 0x01
     83a:	9a 81       	ldd	r25, Y+2	; 0x02
     83c:	0e 94 69 00 	call	0xd2	; 0xd2 <_ZN6myDateC1Ev>
	setTime(0,0,0);
     840:	89 81       	ldd	r24, Y+1	; 0x01
     842:	9a 81       	ldd	r25, Y+2	; 0x02
     844:	60 e0       	ldi	r22, 0x00	; 0
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	40 e0       	ldi	r20, 0x00	; 0
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
}
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <_ZN6myTimeC1Eiii>:

myTime::myTime(int hour, int minute, int second):myDate(){
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	cd b7       	in	r28, 0x3d	; 61
     864:	de b7       	in	r29, 0x3e	; 62
     866:	28 97       	sbiw	r28, 0x08	; 8
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	f8 94       	cli
     86c:	de bf       	out	0x3e, r29	; 62
     86e:	0f be       	out	0x3f, r0	; 63
     870:	cd bf       	out	0x3d, r28	; 61
     872:	9a 83       	std	Y+2, r25	; 0x02
     874:	89 83       	std	Y+1, r24	; 0x01
     876:	7c 83       	std	Y+4, r23	; 0x04
     878:	6b 83       	std	Y+3, r22	; 0x03
     87a:	5e 83       	std	Y+6, r21	; 0x06
     87c:	4d 83       	std	Y+5, r20	; 0x05
     87e:	38 87       	std	Y+8, r19	; 0x08
     880:	2f 83       	std	Y+7, r18	; 0x07
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	9a 81       	ldd	r25, Y+2	; 0x02
     886:	0e 94 69 00 	call	0xd2	; 0xd2 <_ZN6myDateC1Ev>
	setTime(hour,minute,second);
     88a:	89 81       	ldd	r24, Y+1	; 0x01
     88c:	9a 81       	ldd	r25, Y+2	; 0x02
     88e:	6b 81       	ldd	r22, Y+3	; 0x03
     890:	7c 81       	ldd	r23, Y+4	; 0x04
     892:	4d 81       	ldd	r20, Y+5	; 0x05
     894:	5e 81       	ldd	r21, Y+6	; 0x06
     896:	2f 81       	ldd	r18, Y+7	; 0x07
     898:	38 85       	ldd	r19, Y+8	; 0x08
     89a:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
}
     89e:	28 96       	adiw	r28, 0x08	; 8
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	de bf       	out	0x3e, r29	; 62
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	cd bf       	out	0x3d, r28	; 61
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <_ZN6myTimeC1Eiiiiii>:

myTime::myTime(int hour,int minute,int second,int month, int day, int year):myDate(month,day,year){
     8b0:	cf 92       	push	r12
     8b2:	df 92       	push	r13
     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	2e 97       	sbiw	r28, 0x0e	; 14
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
     8d0:	9a 83       	std	Y+2, r25	; 0x02
     8d2:	89 83       	std	Y+1, r24	; 0x01
     8d4:	7c 83       	std	Y+4, r23	; 0x04
     8d6:	6b 83       	std	Y+3, r22	; 0x03
     8d8:	5e 83       	std	Y+6, r21	; 0x06
     8da:	4d 83       	std	Y+5, r20	; 0x05
     8dc:	38 87       	std	Y+8, r19	; 0x08
     8de:	2f 83       	std	Y+7, r18	; 0x07
     8e0:	1a 87       	std	Y+10, r17	; 0x0a
     8e2:	09 87       	std	Y+9, r16	; 0x09
     8e4:	fc 86       	std	Y+12, r15	; 0x0c
     8e6:	eb 86       	std	Y+11, r14	; 0x0b
     8e8:	de 86       	std	Y+14, r13	; 0x0e
     8ea:	cd 86       	std	Y+13, r12	; 0x0d
     8ec:	89 81       	ldd	r24, Y+1	; 0x01
     8ee:	9a 81       	ldd	r25, Y+2	; 0x02
     8f0:	69 85       	ldd	r22, Y+9	; 0x09
     8f2:	7a 85       	ldd	r23, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	2d 85       	ldd	r18, Y+13	; 0x0d
     8fa:	3e 85       	ldd	r19, Y+14	; 0x0e
     8fc:	0e 94 84 00 	call	0x108	; 0x108 <_ZN6myDateC1Eiii>
	setTime(hour,minute,second);
     900:	89 81       	ldd	r24, Y+1	; 0x01
     902:	9a 81       	ldd	r25, Y+2	; 0x02
     904:	6b 81       	ldd	r22, Y+3	; 0x03
     906:	7c 81       	ldd	r23, Y+4	; 0x04
     908:	4d 81       	ldd	r20, Y+5	; 0x05
     90a:	5e 81       	ldd	r21, Y+6	; 0x06
     90c:	2f 81       	ldd	r18, Y+7	; 0x07
     90e:	38 85       	ldd	r19, Y+8	; 0x08
     910:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
}
     914:	2e 96       	adiw	r28, 0x0e	; 14
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	f8 94       	cli
     91a:	de bf       	out	0x3e, r29	; 62
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	cd bf       	out	0x3d, r28	; 61
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	ff 90       	pop	r15
     92a:	ef 90       	pop	r14
     92c:	df 90       	pop	r13
     92e:	cf 90       	pop	r12
     930:	08 95       	ret

00000932 <_ZN6myTime10getSecondsEv>:

BYTE myTime::getSeconds(){
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	00 d0       	rcall	.+0      	; 0x938 <_ZN6myTime10getSecondsEv+0x6>
     938:	cd b7       	in	r28, 0x3d	; 61
     93a:	de b7       	in	r29, 0x3e	; 62
     93c:	9a 83       	std	Y+2, r25	; 0x02
     93e:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)second;
     940:	89 81       	ldd	r24, Y+1	; 0x01
     942:	9a 81       	ldd	r25, Y+2	; 0x02
     944:	fc 01       	movw	r30, r24
     946:	83 8d       	ldd	r24, Z+27	; 0x1b
     948:	94 8d       	ldd	r25, Z+28	; 0x1c
}
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <_ZN6myTime10getMinutesEv>:

BYTE myTime::getMinutes(){
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	00 d0       	rcall	.+0      	; 0x95a <_ZN6myTime10getMinutesEv+0x6>
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
     95e:	9a 83       	std	Y+2, r25	; 0x02
     960:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)minute;
     962:	89 81       	ldd	r24, Y+1	; 0x01
     964:	9a 81       	ldd	r25, Y+2	; 0x02
     966:	fc 01       	movw	r30, r24
     968:	81 8d       	ldd	r24, Z+25	; 0x19
     96a:	92 8d       	ldd	r25, Z+26	; 0x1a
}
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <_ZN6myTime8getHoursEv>:

BYTE myTime::getHours(){
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	00 d0       	rcall	.+0      	; 0x97c <_ZN6myTime8getHoursEv+0x6>
     97c:	cd b7       	in	r28, 0x3d	; 61
     97e:	de b7       	in	r29, 0x3e	; 62
     980:	9a 83       	std	Y+2, r25	; 0x02
     982:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)hour;
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	9a 81       	ldd	r25, Y+2	; 0x02
     988:	fc 01       	movw	r30, r24
     98a:	87 89       	ldd	r24, Z+23	; 0x17
     98c:	90 8d       	ldd	r25, Z+24	; 0x18
}
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	08 95       	ret

00000998 <_ZN6myTime7setTimeEPc>:

BOOL myTime::setTime(char *newTime){
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	cd b7       	in	r28, 0x3d	; 61
     99e:	de b7       	in	r29, 0x3e	; 62
     9a0:	a2 97       	sbiw	r28, 0x22	; 34
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	f8 94       	cli
     9a6:	de bf       	out	0x3e, r29	; 62
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	cd bf       	out	0x3d, r28	; 61
     9ac:	98 a3       	lds	r25, 0x58
     9ae:	8f 8f       	std	Y+31, r24	; 0x1f
     9b0:	7a a3       	lds	r23, 0x5a
     9b2:	69 a3       	lds	r22, 0x59
	int tempNum[3];
	char currentString[10];
	char tempString[10];
	strcpy(currentString,newTime);
     9b4:	ce 01       	movw	r24, r28
     9b6:	0b 96       	adiw	r24, 0x0b	; 11
     9b8:	29 a1       	lds	r18, 0x49
     9ba:	3a a1       	lds	r19, 0x4a
     9bc:	b9 01       	movw	r22, r18
     9be:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <strcpy>
	for (int j=0; j<3; j++){
     9c2:	1a 82       	std	Y+2, r1	; 0x02
     9c4:	19 82       	std	Y+1, r1	; 0x01
     9c6:	43 c0       	rjmp	.+134    	; 0xa4e <_ZN6myTime7setTimeEPc+0xb6>
		for (int i=0; i<2; i++){
     9c8:	1c 82       	std	Y+4, r1	; 0x04
     9ca:	1b 82       	std	Y+3, r1	; 0x03
     9cc:	20 c0       	rjmp	.+64     	; 0xa0e <_ZN6myTime7setTimeEPc+0x76>
				tempString[i]=currentString[i+j*3];
     9ce:	29 81       	ldd	r18, Y+1	; 0x01
     9d0:	3a 81       	ldd	r19, Y+2	; 0x02
     9d2:	c9 01       	movw	r24, r18
     9d4:	88 0f       	add	r24, r24
     9d6:	99 1f       	adc	r25, r25
     9d8:	28 0f       	add	r18, r24
     9da:	39 1f       	adc	r19, r25
     9dc:	8b 81       	ldd	r24, Y+3	; 0x03
     9de:	9c 81       	ldd	r25, Y+4	; 0x04
     9e0:	82 0f       	add	r24, r18
     9e2:	93 1f       	adc	r25, r19
     9e4:	9e 01       	movw	r18, r28
     9e6:	25 5f       	subi	r18, 0xF5	; 245
     9e8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ea:	82 0f       	add	r24, r18
     9ec:	93 1f       	adc	r25, r19
     9ee:	fc 01       	movw	r30, r24
     9f0:	40 81       	ld	r20, Z
     9f2:	9e 01       	movw	r18, r28
     9f4:	2b 5e       	subi	r18, 0xEB	; 235
     9f6:	3f 4f       	sbci	r19, 0xFF	; 255
     9f8:	8b 81       	ldd	r24, Y+3	; 0x03
     9fa:	9c 81       	ldd	r25, Y+4	; 0x04
     9fc:	82 0f       	add	r24, r18
     9fe:	93 1f       	adc	r25, r19
     a00:	fc 01       	movw	r30, r24
     a02:	40 83       	st	Z, r20
	int tempNum[3];
	char currentString[10];
	char tempString[10];
	strcpy(currentString,newTime);
	for (int j=0; j<3; j++){
		for (int i=0; i<2; i++){
     a04:	8b 81       	ldd	r24, Y+3	; 0x03
     a06:	9c 81       	ldd	r25, Y+4	; 0x04
     a08:	01 96       	adiw	r24, 0x01	; 1
     a0a:	9c 83       	std	Y+4, r25	; 0x04
     a0c:	8b 83       	std	Y+3, r24	; 0x03
     a0e:	21 e0       	ldi	r18, 0x01	; 1
     a10:	8b 81       	ldd	r24, Y+3	; 0x03
     a12:	9c 81       	ldd	r25, Y+4	; 0x04
     a14:	82 30       	cpi	r24, 0x02	; 2
     a16:	91 05       	cpc	r25, r1
     a18:	0c f0       	brlt	.+2      	; 0xa1c <_ZN6myTime7setTimeEPc+0x84>
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	22 23       	and	r18, r18
     a1e:	b9 f6       	brne	.-82     	; 0x9ce <_ZN6myTime7setTimeEPc+0x36>
				tempString[i]=currentString[i+j*3];
		}
		tempNum[j]=atoi(tempString);
     a20:	ce 01       	movw	r24, r28
     a22:	45 96       	adiw	r24, 0x15	; 21
     a24:	0e 94 98 15 	call	0x2b30	; 0x2b30 <atoi>
     a28:	9c 01       	movw	r18, r24
     a2a:	89 81       	ldd	r24, Y+1	; 0x01
     a2c:	9a 81       	ldd	r25, Y+2	; 0x02
     a2e:	88 0f       	add	r24, r24
     a30:	99 1f       	adc	r25, r25
     a32:	ae 01       	movw	r20, r28
     a34:	4f 5f       	subi	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	84 0f       	add	r24, r20
     a3a:	95 1f       	adc	r25, r21
     a3c:	04 96       	adiw	r24, 0x04	; 4
     a3e:	fc 01       	movw	r30, r24
     a40:	31 83       	std	Z+1, r19	; 0x01
     a42:	20 83       	st	Z, r18
BOOL myTime::setTime(char *newTime){
	int tempNum[3];
	char currentString[10];
	char tempString[10];
	strcpy(currentString,newTime);
	for (int j=0; j<3; j++){
     a44:	89 81       	ldd	r24, Y+1	; 0x01
     a46:	9a 81       	ldd	r25, Y+2	; 0x02
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	9a 83       	std	Y+2, r25	; 0x02
     a4c:	89 83       	std	Y+1, r24	; 0x01
     a4e:	21 e0       	ldi	r18, 0x01	; 1
     a50:	89 81       	ldd	r24, Y+1	; 0x01
     a52:	9a 81       	ldd	r25, Y+2	; 0x02
     a54:	83 30       	cpi	r24, 0x03	; 3
     a56:	91 05       	cpc	r25, r1
     a58:	0c f0       	brlt	.+2      	; 0xa5c <_ZN6myTime7setTimeEPc+0xc4>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	22 23       	and	r18, r18
     a5e:	09 f0       	breq	.+2      	; 0xa62 <_ZN6myTime7setTimeEPc+0xca>
     a60:	b3 cf       	rjmp	.-154    	; 0x9c8 <_ZN6myTime7setTimeEPc+0x30>
		for (int i=0; i<2; i++){
				tempString[i]=currentString[i+j*3];
		}
		tempNum[j]=atoi(tempString);
	}
	if (tempNum[0]/24==0 && tempNum[1]/60==0 && tempNum[2]/60==0){
     a62:	8d 81       	ldd	r24, Y+5	; 0x05
     a64:	9e 81       	ldd	r25, Y+6	; 0x06
     a66:	47 96       	adiw	r24, 0x17	; 23
     a68:	8f 32       	cpi	r24, 0x2F	; 47
     a6a:	91 05       	cpc	r25, r1
     a6c:	c0 f4       	brcc	.+48     	; 0xa9e <_ZN6myTime7setTimeEPc+0x106>
     a6e:	8f 81       	ldd	r24, Y+7	; 0x07
     a70:	98 85       	ldd	r25, Y+8	; 0x08
     a72:	cb 96       	adiw	r24, 0x3b	; 59
     a74:	87 37       	cpi	r24, 0x77	; 119
     a76:	91 05       	cpc	r25, r1
     a78:	90 f4       	brcc	.+36     	; 0xa9e <_ZN6myTime7setTimeEPc+0x106>
     a7a:	89 85       	ldd	r24, Y+9	; 0x09
     a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a7e:	cb 96       	adiw	r24, 0x3b	; 59
     a80:	87 37       	cpi	r24, 0x77	; 119
     a82:	91 05       	cpc	r25, r1
     a84:	60 f4       	brcc	.+24     	; 0xa9e <_ZN6myTime7setTimeEPc+0x106>
		setTime(tempNum[0],tempNum[1],tempNum[2]);
     a86:	6d 81       	ldd	r22, Y+5	; 0x05
     a88:	7e 81       	ldd	r23, Y+6	; 0x06
     a8a:	4f 81       	ldd	r20, Y+7	; 0x07
     a8c:	58 85       	ldd	r21, Y+8	; 0x08
     a8e:	29 85       	ldd	r18, Y+9	; 0x09
     a90:	3a 85       	ldd	r19, Y+10	; 0x0a
     a92:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a94:	98 a1       	lds	r25, 0x48
     a96:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
		return fTrue;
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	01 c0       	rjmp	.+2      	; 0xaa0 <_ZN6myTime7setTimeEPc+0x108>
	} 
	return fFalse;
     a9e:	80 e0       	ldi	r24, 0x00	; 0
}
     aa0:	a2 96       	adiw	r28, 0x22	; 34
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	f8 94       	cli
     aa6:	de bf       	out	0x3e, r29	; 62
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	cd bf       	out	0x3d, r28	; 61
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	08 95       	ret

00000ab2 <_ZN6myTime7setTimeEiii>:

void myTime::setTime(int hour,int minute,int second){
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
     aba:	28 97       	sbiw	r28, 0x08	; 8
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	f8 94       	cli
     ac0:	de bf       	out	0x3e, r29	; 62
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	cd bf       	out	0x3d, r28	; 61
     ac6:	9a 83       	std	Y+2, r25	; 0x02
     ac8:	89 83       	std	Y+1, r24	; 0x01
     aca:	7c 83       	std	Y+4, r23	; 0x04
     acc:	6b 83       	std	Y+3, r22	; 0x03
     ace:	5e 83       	std	Y+6, r21	; 0x06
     ad0:	4d 83       	std	Y+5, r20	; 0x05
     ad2:	38 87       	std	Y+8, r19	; 0x08
     ad4:	2f 83       	std	Y+7, r18	; 0x07
	setHour(hour);
     ad6:	89 81       	ldd	r24, Y+1	; 0x01
     ad8:	9a 81       	ldd	r25, Y+2	; 0x02
     ada:	2b 81       	ldd	r18, Y+3	; 0x03
     adc:	3c 81       	ldd	r19, Y+4	; 0x04
     ade:	b9 01       	movw	r22, r18
     ae0:	0e 94 89 05 	call	0xb12	; 0xb12 <_ZN6myTime7setHourEi>
	setMinute(minute);
     ae4:	89 81       	ldd	r24, Y+1	; 0x01
     ae6:	9a 81       	ldd	r25, Y+2	; 0x02
     ae8:	2d 81       	ldd	r18, Y+5	; 0x05
     aea:	3e 81       	ldd	r19, Y+6	; 0x06
     aec:	b9 01       	movw	r22, r18
     aee:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6myTime9setMinuteEi>
	setSecond(second);
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	9a 81       	ldd	r25, Y+2	; 0x02
     af6:	2f 81       	ldd	r18, Y+7	; 0x07
     af8:	38 85       	ldd	r19, Y+8	; 0x08
     afa:	b9 01       	movw	r22, r18
     afc:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN6myTime9setSecondEi>
}
     b00:	28 96       	adiw	r28, 0x08	; 8
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	de bf       	out	0x3e, r29	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	cd bf       	out	0x3d, r28	; 61
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	08 95       	ret

00000b12 <_ZN6myTime7setHourEi>:

void myTime::setHour(int hour){
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	00 d0       	rcall	.+0      	; 0xb18 <_ZN6myTime7setHourEi+0x6>
     b18:	00 d0       	rcall	.+0      	; 0xb1a <_ZN6myTime7setHourEi+0x8>
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
     b1e:	9a 83       	std	Y+2, r25	; 0x02
     b20:	89 83       	std	Y+1, r24	; 0x01
     b22:	7c 83       	std	Y+4, r23	; 0x04
     b24:	6b 83       	std	Y+3, r22	; 0x03
	if (hour/24 == 0){
     b26:	8b 81       	ldd	r24, Y+3	; 0x03
     b28:	9c 81       	ldd	r25, Y+4	; 0x04
     b2a:	47 96       	adiw	r24, 0x17	; 23
     b2c:	8f 32       	cpi	r24, 0x2F	; 47
     b2e:	91 05       	cpc	r25, r1
     b30:	38 f4       	brcc	.+14     	; 0xb40 <_ZN6myTime7setHourEi+0x2e>
		this->hour = hour;
     b32:	89 81       	ldd	r24, Y+1	; 0x01
     b34:	9a 81       	ldd	r25, Y+2	; 0x02
     b36:	2b 81       	ldd	r18, Y+3	; 0x03
     b38:	3c 81       	ldd	r19, Y+4	; 0x04
     b3a:	fc 01       	movw	r30, r24
     b3c:	30 8f       	std	Z+24, r19	; 0x18
     b3e:	27 8b       	std	Z+23, r18	; 0x17
	}	
}
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	08 95       	ret

00000b4e <_ZN6myTime9setMinuteEi>:

void myTime::setMinute(int minute){
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	00 d0       	rcall	.+0      	; 0xb54 <_ZN6myTime9setMinuteEi+0x6>
     b54:	00 d0       	rcall	.+0      	; 0xb56 <_ZN6myTime9setMinuteEi+0x8>
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
     b5a:	9a 83       	std	Y+2, r25	; 0x02
     b5c:	89 83       	std	Y+1, r24	; 0x01
     b5e:	7c 83       	std	Y+4, r23	; 0x04
     b60:	6b 83       	std	Y+3, r22	; 0x03
	if (minute/60 == 0){
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	9c 81       	ldd	r25, Y+4	; 0x04
     b66:	cb 96       	adiw	r24, 0x3b	; 59
     b68:	87 37       	cpi	r24, 0x77	; 119
     b6a:	91 05       	cpc	r25, r1
     b6c:	38 f4       	brcc	.+14     	; 0xb7c <_ZN6myTime9setMinuteEi+0x2e>
		this->minute = minute;
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	9a 81       	ldd	r25, Y+2	; 0x02
     b72:	2b 81       	ldd	r18, Y+3	; 0x03
     b74:	3c 81       	ldd	r19, Y+4	; 0x04
     b76:	fc 01       	movw	r30, r24
     b78:	32 8f       	std	Z+26, r19	; 0x1a
     b7a:	21 8f       	std	Z+25, r18	; 0x19
	}	
}
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	08 95       	ret

00000b8a <_ZN6myTime9setSecondEi>:

void myTime::setSecond(int second){
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	00 d0       	rcall	.+0      	; 0xb90 <_ZN6myTime9setSecondEi+0x6>
     b90:	00 d0       	rcall	.+0      	; 0xb92 <_ZN6myTime9setSecondEi+0x8>
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	9a 83       	std	Y+2, r25	; 0x02
     b98:	89 83       	std	Y+1, r24	; 0x01
     b9a:	7c 83       	std	Y+4, r23	; 0x04
     b9c:	6b 83       	std	Y+3, r22	; 0x03
	if (second/60 == 0){
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	9c 81       	ldd	r25, Y+4	; 0x04
     ba2:	cb 96       	adiw	r24, 0x3b	; 59
     ba4:	87 37       	cpi	r24, 0x77	; 119
     ba6:	91 05       	cpc	r25, r1
     ba8:	38 f4       	brcc	.+14     	; 0xbb8 <_ZN6myTime9setSecondEi+0x2e>
		this->second = second;
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	9a 81       	ldd	r25, Y+2	; 0x02
     bae:	2b 81       	ldd	r18, Y+3	; 0x03
     bb0:	3c 81       	ldd	r19, Y+4	; 0x04
     bb2:	fc 01       	movw	r30, r24
     bb4:	34 8f       	std	Z+28, r19	; 0x1c
     bb6:	23 8f       	std	Z+27, r18	; 0x1b
	}	
}
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	08 95       	ret

00000bc6 <_ZN6myTime8addHoursEi>:

void myTime::addHours(int hours){
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	28 97       	sbiw	r28, 0x08	; 8
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	de bf       	out	0x3e, r29	; 62
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	cd bf       	out	0x3d, r28	; 61
     bda:	9e 83       	std	Y+6, r25	; 0x06
     bdc:	8d 83       	std	Y+5, r24	; 0x05
     bde:	78 87       	std	Y+8, r23	; 0x08
     be0:	6f 83       	std	Y+7, r22	; 0x07
	volatile int tempHours = hour + hours;
     be2:	8d 81       	ldd	r24, Y+5	; 0x05
     be4:	9e 81       	ldd	r25, Y+6	; 0x06
     be6:	fc 01       	movw	r30, r24
     be8:	27 89       	ldd	r18, Z+23	; 0x17
     bea:	30 8d       	ldd	r19, Z+24	; 0x18
     bec:	8f 81       	ldd	r24, Y+7	; 0x07
     bee:	98 85       	ldd	r25, Y+8	; 0x08
     bf0:	82 0f       	add	r24, r18
     bf2:	93 1f       	adc	r25, r19
     bf4:	9a 83       	std	Y+2, r25	; 0x02
     bf6:	89 83       	std	Y+1, r24	; 0x01
	hour = tempHours%24;
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	9a 81       	ldd	r25, Y+2	; 0x02
     bfc:	28 e1       	ldi	r18, 0x18	; 24
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	b9 01       	movw	r22, r18
     c02:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__divmodhi4>
     c06:	9c 01       	movw	r18, r24
     c08:	8d 81       	ldd	r24, Y+5	; 0x05
     c0a:	9e 81       	ldd	r25, Y+6	; 0x06
     c0c:	fc 01       	movw	r30, r24
     c0e:	30 8f       	std	Z+24, r19	; 0x18
     c10:	27 8b       	std	Z+23, r18	; 0x17
	if (tempHours/24 >= 1){
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	9a 81       	ldd	r25, Y+2	; 0x02
     c16:	21 e0       	ldi	r18, 0x01	; 1
     c18:	88 31       	cpi	r24, 0x18	; 24
     c1a:	91 05       	cpc	r25, r1
     c1c:	0c f4       	brge	.+2      	; 0xc20 <_ZN6myTime8addHoursEi+0x5a>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	22 23       	and	r18, r18
     c22:	91 f0       	breq	.+36     	; 0xc48 <_ZN6myTime8addHoursEi+0x82>
		volatile int daysToAdd = tempHours/24;
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	9a 81       	ldd	r25, Y+2	; 0x02
     c28:	28 e1       	ldi	r18, 0x18	; 24
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	b9 01       	movw	r22, r18
     c2e:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__divmodhi4>
     c32:	9b 01       	movw	r18, r22
     c34:	c9 01       	movw	r24, r18
     c36:	9c 83       	std	Y+4, r25	; 0x04
     c38:	8b 83       	std	Y+3, r24	; 0x03
		addDays(daysToAdd);
     c3a:	8d 81       	ldd	r24, Y+5	; 0x05
     c3c:	9e 81       	ldd	r25, Y+6	; 0x06
     c3e:	2b 81       	ldd	r18, Y+3	; 0x03
     c40:	3c 81       	ldd	r19, Y+4	; 0x04
     c42:	b9 01       	movw	r22, r18
     c44:	0e 94 43 02 	call	0x486	; 0x486 <_ZN6myDate7addDaysEi>
	}	
}
     c48:	28 96       	adiw	r28, 0x08	; 8
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	08 95       	ret

00000c5a <_ZN6myTime10addMinutesEi>:

void myTime::addMinutes(int minutes){
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	28 97       	sbiw	r28, 0x08	; 8
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	de bf       	out	0x3e, r29	; 62
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	cd bf       	out	0x3d, r28	; 61
     c6e:	9e 83       	std	Y+6, r25	; 0x06
     c70:	8d 83       	std	Y+5, r24	; 0x05
     c72:	78 87       	std	Y+8, r23	; 0x08
     c74:	6f 83       	std	Y+7, r22	; 0x07
	volatile int tempMinutes = minute + minutes;				//what the minutes were + added minutes
     c76:	8d 81       	ldd	r24, Y+5	; 0x05
     c78:	9e 81       	ldd	r25, Y+6	; 0x06
     c7a:	fc 01       	movw	r30, r24
     c7c:	21 8d       	ldd	r18, Z+25	; 0x19
     c7e:	32 8d       	ldd	r19, Z+26	; 0x1a
     c80:	8f 81       	ldd	r24, Y+7	; 0x07
     c82:	98 85       	ldd	r25, Y+8	; 0x08
     c84:	82 0f       	add	r24, r18
     c86:	93 1f       	adc	r25, r19
     c88:	9a 83       	std	Y+2, r25	; 0x02
     c8a:	89 83       	std	Y+1, r24	; 0x01
	minute = tempMinutes%60;
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	9a 81       	ldd	r25, Y+2	; 0x02
     c90:	2c e3       	ldi	r18, 0x3C	; 60
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	b9 01       	movw	r22, r18
     c96:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__divmodhi4>
     c9a:	9c 01       	movw	r18, r24
     c9c:	8d 81       	ldd	r24, Y+5	; 0x05
     c9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ca0:	fc 01       	movw	r30, r24
     ca2:	32 8f       	std	Z+26, r19	; 0x1a
     ca4:	21 8f       	std	Z+25, r18	; 0x19
	if (tempMinutes/60 >= 1){
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	9a 81       	ldd	r25, Y+2	; 0x02
     caa:	21 e0       	ldi	r18, 0x01	; 1
     cac:	8c 33       	cpi	r24, 0x3C	; 60
     cae:	91 05       	cpc	r25, r1
     cb0:	0c f4       	brge	.+2      	; 0xcb4 <_ZN6myTime10addMinutesEi+0x5a>
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	22 23       	and	r18, r18
     cb6:	91 f0       	breq	.+36     	; 0xcdc <_ZN6myTime10addMinutesEi+0x82>
		volatile int hoursToAdd = tempMinutes/60;
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	9a 81       	ldd	r25, Y+2	; 0x02
     cbc:	2c e3       	ldi	r18, 0x3C	; 60
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	b9 01       	movw	r22, r18
     cc2:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__divmodhi4>
     cc6:	9b 01       	movw	r18, r22
     cc8:	c9 01       	movw	r24, r18
     cca:	9c 83       	std	Y+4, r25	; 0x04
     ccc:	8b 83       	std	Y+3, r24	; 0x03
		addHours(hoursToAdd);
     cce:	2b 81       	ldd	r18, Y+3	; 0x03
     cd0:	3c 81       	ldd	r19, Y+4	; 0x04
     cd2:	8d 81       	ldd	r24, Y+5	; 0x05
     cd4:	9e 81       	ldd	r25, Y+6	; 0x06
     cd6:	b9 01       	movw	r22, r18
     cd8:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <_ZN6myTime8addHoursEi>
	}
}
     cdc:	28 96       	adiw	r28, 0x08	; 8
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	08 95       	ret

00000cee <_ZN6myTime10addSecondsEi>:

void myTime::addSeconds(int seconds){
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	28 97       	sbiw	r28, 0x08	; 8
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	9e 83       	std	Y+6, r25	; 0x06
     d04:	8d 83       	std	Y+5, r24	; 0x05
     d06:	78 87       	std	Y+8, r23	; 0x08
     d08:	6f 83       	std	Y+7, r22	; 0x07
	volatile int tempSecond = second + seconds;
     d0a:	8d 81       	ldd	r24, Y+5	; 0x05
     d0c:	9e 81       	ldd	r25, Y+6	; 0x06
     d0e:	fc 01       	movw	r30, r24
     d10:	23 8d       	ldd	r18, Z+27	; 0x1b
     d12:	34 8d       	ldd	r19, Z+28	; 0x1c
     d14:	8f 81       	ldd	r24, Y+7	; 0x07
     d16:	98 85       	ldd	r25, Y+8	; 0x08
     d18:	82 0f       	add	r24, r18
     d1a:	93 1f       	adc	r25, r19
     d1c:	9a 83       	std	Y+2, r25	; 0x02
     d1e:	89 83       	std	Y+1, r24	; 0x01
	second = (tempSecond)%60;			  //what's left over
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	9a 81       	ldd	r25, Y+2	; 0x02
     d24:	2c e3       	ldi	r18, 0x3C	; 60
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	b9 01       	movw	r22, r18
     d2a:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__divmodhi4>
     d2e:	9c 01       	movw	r18, r24
     d30:	8d 81       	ldd	r24, Y+5	; 0x05
     d32:	9e 81       	ldd	r25, Y+6	; 0x06
     d34:	fc 01       	movw	r30, r24
     d36:	34 8f       	std	Z+28, r19	; 0x1c
     d38:	23 8f       	std	Z+27, r18	; 0x1b
	if ((tempSecond)/60 >= 1){
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	9a 81       	ldd	r25, Y+2	; 0x02
     d3e:	21 e0       	ldi	r18, 0x01	; 1
     d40:	8c 33       	cpi	r24, 0x3C	; 60
     d42:	91 05       	cpc	r25, r1
     d44:	0c f4       	brge	.+2      	; 0xd48 <_ZN6myTime10addSecondsEi+0x5a>
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	22 23       	and	r18, r18
     d4a:	91 f0       	breq	.+36     	; 0xd70 <_ZN6myTime10addSecondsEi+0x82>
		//There are more than 60 seconds now, find out how many minutes need to be added
		volatile int minutesToAdd = (tempSecond)/60;		  //if seconds = 120, adds two minutes
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	9a 81       	ldd	r25, Y+2	; 0x02
     d50:	2c e3       	ldi	r18, 0x3C	; 60
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	b9 01       	movw	r22, r18
     d56:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__divmodhi4>
     d5a:	9b 01       	movw	r18, r22
     d5c:	c9 01       	movw	r24, r18
     d5e:	9c 83       	std	Y+4, r25	; 0x04
     d60:	8b 83       	std	Y+3, r24	; 0x03
		addMinutes(minutesToAdd);					  //add to minutes
     d62:	2b 81       	ldd	r18, Y+3	; 0x03
     d64:	3c 81       	ldd	r19, Y+4	; 0x04
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	b9 01       	movw	r22, r18
     d6c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <_ZN6myTime10addMinutesEi>
	}
}
     d70:	28 96       	adiw	r28, 0x08	; 8
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	08 95       	ret

00000d82 <_ZN6myTime13checkValidityEv>:

BOOL myTime::checkValidity(){
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	00 d0       	rcall	.+0      	; 0xd88 <_ZN6myTime13checkValidityEv+0x6>
     d88:	0f 92       	push	r0
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	9b 83       	std	Y+3, r25	; 0x03
     d90:	8a 83       	std	Y+2, r24	; 0x02
	BOOL stillValid=fTrue;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	89 83       	std	Y+1, r24	; 0x01
	if (second/60==0 && minute/60==0 && hour/24==0){
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	9b 81       	ldd	r25, Y+3	; 0x03
     d9a:	fc 01       	movw	r30, r24
     d9c:	83 8d       	ldd	r24, Z+27	; 0x1b
     d9e:	94 8d       	ldd	r25, Z+28	; 0x1c
     da0:	cb 96       	adiw	r24, 0x3b	; 59
     da2:	87 37       	cpi	r24, 0x77	; 119
     da4:	91 05       	cpc	r25, r1
     da6:	a0 f4       	brcc	.+40     	; 0xdd0 <_ZN6myTime13checkValidityEv+0x4e>
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	9b 81       	ldd	r25, Y+3	; 0x03
     dac:	fc 01       	movw	r30, r24
     dae:	81 8d       	ldd	r24, Z+25	; 0x19
     db0:	92 8d       	ldd	r25, Z+26	; 0x1a
     db2:	cb 96       	adiw	r24, 0x3b	; 59
     db4:	87 37       	cpi	r24, 0x77	; 119
     db6:	91 05       	cpc	r25, r1
     db8:	58 f4       	brcc	.+22     	; 0xdd0 <_ZN6myTime13checkValidityEv+0x4e>
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	9b 81       	ldd	r25, Y+3	; 0x03
     dbe:	fc 01       	movw	r30, r24
     dc0:	87 89       	ldd	r24, Z+23	; 0x17
     dc2:	90 8d       	ldd	r25, Z+24	; 0x18
     dc4:	47 96       	adiw	r24, 0x17	; 23
     dc6:	8f 32       	cpi	r24, 0x2F	; 47
     dc8:	91 05       	cpc	r25, r1
     dca:	10 f4       	brcc	.+4      	; 0xdd0 <_ZN6myTime13checkValidityEv+0x4e>
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	01 c0       	rjmp	.+2      	; 0xdd2 <_ZN6myTime13checkValidityEv+0x50>
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	88 23       	and	r24, r24
     dd4:	69 f0       	breq	.+26     	; 0xdf0 <_ZN6myTime13checkValidityEv+0x6e>
		if (checkValidityDate()){return fTrue;}
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
     dd8:	9b 81       	ldd	r25, Y+3	; 0x03
     dda:	0e 94 02 03 	call	0x604	; 0x604 <_ZN6myDate17checkValidityDateEv>
     dde:	98 2f       	mov	r25, r24
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	99 23       	and	r25, r25
     de4:	09 f4       	brne	.+2      	; 0xde8 <_ZN6myTime13checkValidityEv+0x66>
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	88 23       	and	r24, r24
     dea:	11 f0       	breq	.+4      	; 0xdf0 <_ZN6myTime13checkValidityEv+0x6e>
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	01 c0       	rjmp	.+2      	; 0xdf2 <_ZN6myTime13checkValidityEv+0x70>
	}
	return fFalse;
     df0:	80 e0       	ldi	r24, 0x00	; 0
}
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	08 95       	ret

00000dfe <_ZN6myTime7getTimeEv>:

const char * myTime::getTime(){
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	2b 97       	sbiw	r28, 0x0b	; 11
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	9b 87       	std	Y+11, r25	; 0x0b
     e14:	8a 87       	std	Y+10, r24	; 0x0a
	char hourString[3], minuteString[3],secondString[3];
	itoa(hour,hourString,10);
     e16:	8a 85       	ldd	r24, Y+10	; 0x0a
     e18:	9b 85       	ldd	r25, Y+11	; 0x0b
     e1a:	fc 01       	movw	r30, r24
     e1c:	87 89       	ldd	r24, Z+23	; 0x17
     e1e:	90 8d       	ldd	r25, Z+24	; 0x18
     e20:	9e 01       	movw	r18, r28
     e22:	2f 5f       	subi	r18, 0xFF	; 255
     e24:	3f 4f       	sbci	r19, 0xFF	; 255
     e26:	b9 01       	movw	r22, r18
     e28:	4a e0       	ldi	r20, 0x0A	; 10
     e2a:	50 e0       	ldi	r21, 0x00	; 0
     e2c:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <itoa>
	itoa(minute,minuteString,10);
     e30:	8a 85       	ldd	r24, Y+10	; 0x0a
     e32:	9b 85       	ldd	r25, Y+11	; 0x0b
     e34:	fc 01       	movw	r30, r24
     e36:	81 8d       	ldd	r24, Z+25	; 0x19
     e38:	92 8d       	ldd	r25, Z+26	; 0x1a
     e3a:	9e 01       	movw	r18, r28
     e3c:	2c 5f       	subi	r18, 0xFC	; 252
     e3e:	3f 4f       	sbci	r19, 0xFF	; 255
     e40:	b9 01       	movw	r22, r18
     e42:	4a e0       	ldi	r20, 0x0A	; 10
     e44:	50 e0       	ldi	r21, 0x00	; 0
     e46:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <itoa>
	itoa(second,secondString,10);
     e4a:	8a 85       	ldd	r24, Y+10	; 0x0a
     e4c:	9b 85       	ldd	r25, Y+11	; 0x0b
     e4e:	fc 01       	movw	r30, r24
     e50:	83 8d       	ldd	r24, Z+27	; 0x1b
     e52:	94 8d       	ldd	r25, Z+28	; 0x1c
     e54:	9e 01       	movw	r18, r28
     e56:	29 5f       	subi	r18, 0xF9	; 249
     e58:	3f 4f       	sbci	r19, 0xFF	; 255
     e5a:	b9 01       	movw	r22, r18
     e5c:	4a e0       	ldi	r20, 0x0A	; 10
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <itoa>
	strcpy(timeString,hourString);
     e64:	8a 85       	ldd	r24, Y+10	; 0x0a
     e66:	9b 85       	ldd	r25, Y+11	; 0x0b
     e68:	4d 96       	adiw	r24, 0x1d	; 29
     e6a:	9e 01       	movw	r18, r28
     e6c:	2f 5f       	subi	r18, 0xFF	; 255
     e6e:	3f 4f       	sbci	r19, 0xFF	; 255
     e70:	b9 01       	movw	r22, r18
     e72:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <strcpy>
	strcat(timeString,":");
     e76:	8a 85       	ldd	r24, Y+10	; 0x0a
     e78:	9b 85       	ldd	r25, Y+11	; 0x0b
     e7a:	9c 01       	movw	r18, r24
     e7c:	23 5e       	subi	r18, 0xE3	; 227
     e7e:	3f 4f       	sbci	r19, 0xFF	; 255
     e80:	c9 01       	movw	r24, r18
     e82:	ac 01       	movw	r20, r24
     e84:	fa 01       	movw	r30, r20
     e86:	01 90       	ld	r0, Z+
     e88:	00 20       	and	r0, r0
     e8a:	e9 f7       	brne	.-6      	; 0xe86 <_ZN6myTime7getTimeEv+0x88>
     e8c:	cf 01       	movw	r24, r30
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	84 1b       	sub	r24, r20
     e92:	95 0b       	sbc	r25, r21
     e94:	82 0f       	add	r24, r18
     e96:	93 1f       	adc	r25, r19
     e98:	2a e3       	ldi	r18, 0x3A	; 58
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	fc 01       	movw	r30, r24
     e9e:	31 83       	std	Z+1, r19	; 0x01
     ea0:	20 83       	st	Z, r18
	strcat(timeString,minuteString);
     ea2:	8a 85       	ldd	r24, Y+10	; 0x0a
     ea4:	9b 85       	ldd	r25, Y+11	; 0x0b
     ea6:	4d 96       	adiw	r24, 0x1d	; 29
     ea8:	9e 01       	movw	r18, r28
     eaa:	2c 5f       	subi	r18, 0xFC	; 252
     eac:	3f 4f       	sbci	r19, 0xFF	; 255
     eae:	b9 01       	movw	r22, r18
     eb0:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <strcat>
	strcat(timeString,":");
     eb4:	8a 85       	ldd	r24, Y+10	; 0x0a
     eb6:	9b 85       	ldd	r25, Y+11	; 0x0b
     eb8:	9c 01       	movw	r18, r24
     eba:	23 5e       	subi	r18, 0xE3	; 227
     ebc:	3f 4f       	sbci	r19, 0xFF	; 255
     ebe:	c9 01       	movw	r24, r18
     ec0:	ac 01       	movw	r20, r24
     ec2:	fa 01       	movw	r30, r20
     ec4:	01 90       	ld	r0, Z+
     ec6:	00 20       	and	r0, r0
     ec8:	e9 f7       	brne	.-6      	; 0xec4 <_ZN6myTime7getTimeEv+0xc6>
     eca:	cf 01       	movw	r24, r30
     ecc:	01 97       	sbiw	r24, 0x01	; 1
     ece:	84 1b       	sub	r24, r20
     ed0:	95 0b       	sbc	r25, r21
     ed2:	82 0f       	add	r24, r18
     ed4:	93 1f       	adc	r25, r19
     ed6:	2a e3       	ldi	r18, 0x3A	; 58
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	fc 01       	movw	r30, r24
     edc:	31 83       	std	Z+1, r19	; 0x01
     ede:	20 83       	st	Z, r18
	strcat(timeString,secondString);
     ee0:	8a 85       	ldd	r24, Y+10	; 0x0a
     ee2:	9b 85       	ldd	r25, Y+11	; 0x0b
     ee4:	4d 96       	adiw	r24, 0x1d	; 29
     ee6:	9e 01       	movw	r18, r28
     ee8:	29 5f       	subi	r18, 0xF9	; 249
     eea:	3f 4f       	sbci	r19, 0xFF	; 255
     eec:	b9 01       	movw	r22, r18
     eee:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <strcat>
	timeString[10] = ' ';
     ef2:	8a 85       	ldd	r24, Y+10	; 0x0a
     ef4:	9b 85       	ldd	r25, Y+11	; 0x0b
     ef6:	20 e2       	ldi	r18, 0x20	; 32
     ef8:	fc 01       	movw	r30, r24
     efa:	27 a3       	lds	r18, 0x57
	timeString[11] = '\0';
     efc:	8a 85       	ldd	r24, Y+10	; 0x0a
     efe:	9b 85       	ldd	r25, Y+11	; 0x0b
     f00:	fc 01       	movw	r30, r24
     f02:	10 a6       	lds	r17, 0xb0
	return timeString;
     f04:	8a 85       	ldd	r24, Y+10	; 0x0a
     f06:	9b 85       	ldd	r25, Y+11	; 0x0b
     f08:	4d 96       	adiw	r24, 0x1d	; 29
     f0a:	2b 96       	adiw	r28, 0x0b	; 11
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	08 95       	ret

00000f1c <_Z18getDateTime_eepromhh>:
BYTE EEMEM eeDay = 10;
WORD EEMEM eeYear = 2013;


/*************************************************************************************************************/
void getDateTime_eeprom(BOOL gTime, BOOL gDate){			//get date and time from EEPROM
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	2f 97       	sbiw	r28, 0x0f	; 15
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	8e 87       	std	Y+14, r24	; 0x0e
     f32:	6f 87       	std	Y+15, r22	; 0x0f
	cli();
     f34:	f8 94       	cli
	if (gTime){
     f36:	8e 85       	ldd	r24, Y+14	; 0x0e
     f38:	88 23       	and	r24, r24
     f3a:	09 f4       	brne	.+2      	; 0xf3e <_Z18getDateTime_eepromhh+0x22>
     f3c:	4b c0       	rjmp	.+150    	; 0xfd4 <_Z18getDateTime_eepromhh+0xb8>
		BYTE tempMin, tempSec, tempHour;
		int times=0;
     f3e:	1a 82       	std	Y+2, r1	; 0x02
     f40:	19 82       	std	Y+1, r1	; 0x01
		BOOL notGood=fTrue;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	8b 83       	std	Y+3, r24	; 0x03
		while(notGood && times<3){
     f46:	2c c0       	rjmp	.+88     	; 0xfa0 <_Z18getDateTime_eepromhh+0x84>
			tempSec = eeprom_read_byte(&eeSecond);
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__eerd_byte_m324pa>
     f50:	8f 83       	std	Y+7, r24	; 0x07
			tempMin = eeprom_read_byte(&eeMinute);
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__eerd_byte_m324pa>
     f5a:	88 87       	std	Y+8, r24	; 0x08
			tempHour = eeprom_read_byte(&eeHour);
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__eerd_byte_m324pa>
     f64:	89 87       	std	Y+9, r24	; 0x09
			if (tempSec/60==0 && tempMin/60==0 && tempHour/24==0){currentTime.setTime((int)tempHour,(int)tempMin,(int)tempSec); notGood=fFalse;}
     f66:	8f 81       	ldd	r24, Y+7	; 0x07
     f68:	8c 33       	cpi	r24, 0x3C	; 60
     f6a:	a8 f4       	brcc	.+42     	; 0xf96 <_Z18getDateTime_eepromhh+0x7a>
     f6c:	88 85       	ldd	r24, Y+8	; 0x08
     f6e:	8c 33       	cpi	r24, 0x3C	; 60
     f70:	90 f4       	brcc	.+36     	; 0xf96 <_Z18getDateTime_eepromhh+0x7a>
     f72:	89 85       	ldd	r24, Y+9	; 0x09
     f74:	88 31       	cpi	r24, 0x18	; 24
     f76:	78 f4       	brcc	.+30     	; 0xf96 <_Z18getDateTime_eepromhh+0x7a>
     f78:	89 85       	ldd	r24, Y+9	; 0x09
     f7a:	68 2f       	mov	r22, r24
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	88 85       	ldd	r24, Y+8	; 0x08
     f80:	48 2f       	mov	r20, r24
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	8f 81       	ldd	r24, Y+7	; 0x07
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	88 e8       	ldi	r24, 0x88	; 136
     f8c:	91 e0       	ldi	r25, 0x01	; 1
     f8e:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
     f92:	1b 82       	std	Y+3, r1	; 0x03
     f94:	05 c0       	rjmp	.+10     	; 0xfa0 <_Z18getDateTime_eepromhh+0x84>
			else {times++;}
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	9a 81       	ldd	r25, Y+2	; 0x02
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	9a 83       	std	Y+2, r25	; 0x02
     f9e:	89 83       	std	Y+1, r24	; 0x01
	cli();
	if (gTime){
		BYTE tempMin, tempSec, tempHour;
		int times=0;
		BOOL notGood=fTrue;
		while(notGood && times<3){
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	88 23       	and	r24, r24
     fa4:	39 f0       	breq	.+14     	; 0xfb4 <_Z18getDateTime_eepromhh+0x98>
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
     faa:	83 30       	cpi	r24, 0x03	; 3
     fac:	91 05       	cpc	r25, r1
     fae:	14 f4       	brge	.+4      	; 0xfb4 <_Z18getDateTime_eepromhh+0x98>
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	01 c0       	rjmp	.+2      	; 0xfb6 <_Z18getDateTime_eepromhh+0x9a>
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	88 23       	and	r24, r24
     fb8:	39 f6       	brne	.-114    	; 0xf48 <_Z18getDateTime_eepromhh+0x2c>
			tempMin = eeprom_read_byte(&eeMinute);
			tempHour = eeprom_read_byte(&eeHour);
			if (tempSec/60==0 && tempMin/60==0 && tempHour/24==0){currentTime.setTime((int)tempHour,(int)tempMin,(int)tempSec); notGood=fFalse;}
			else {times++;}
		}
		if (notGood){currentTime.setTime(1,1,1);}
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	88 23       	and	r24, r24
     fbe:	51 f0       	breq	.+20     	; 0xfd4 <_Z18getDateTime_eepromhh+0xb8>
     fc0:	88 e8       	ldi	r24, 0x88	; 136
     fc2:	91 e0       	ldi	r25, 0x01	; 1
     fc4:	61 e0       	ldi	r22, 0x01	; 1
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	41 e0       	ldi	r20, 0x01	; 1
     fca:	50 e0       	ldi	r21, 0x00	; 0
     fcc:	21 e0       	ldi	r18, 0x01	; 1
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
	}		
	if (gDate){
     fd4:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd6:	88 23       	and	r24, r24
     fd8:	09 f4       	brne	.+2      	; 0xfdc <_Z18getDateTime_eepromhh+0xc0>
     fda:	4e c0       	rjmp	.+156    	; 0x1078 <_Z18getDateTime_eepromhh+0x15c>
		BYTE tempDay,tempMonth;
		WORD tempYear;
		int times=0;
     fdc:	1d 82       	std	Y+5, r1	; 0x05
     fde:	1c 82       	std	Y+4, r1	; 0x04
		BOOL notGood=fTrue;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	8e 83       	std	Y+6, r24	; 0x06
		while (notGood && times<3){
     fe4:	2f c0       	rjmp	.+94     	; 0x1044 <_Z18getDateTime_eepromhh+0x128>
			tempDay = eeprom_read_byte(&eeDay);
     fe6:	84 e0       	ldi	r24, 0x04	; 4
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__eerd_byte_m324pa>
     fee:	8a 87       	std	Y+10, r24	; 0x0a
			tempMonth = eeprom_read_byte(&eeMonth);
     ff0:	83 e0       	ldi	r24, 0x03	; 3
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__eerd_byte_m324pa>
     ff8:	8b 87       	std	Y+11, r24	; 0x0b
			tempYear = eeprom_read_word(&eeYear);
     ffa:	85 e0       	ldi	r24, 0x05	; 5
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__eerd_word_m324pa>
    1002:	9d 87       	std	Y+13, r25	; 0x0d
    1004:	8c 87       	std	Y+12, r24	; 0x0c
			if (tempDay/31==0 && tempMonth/13==0 && tempYear/10000==0){currentTime.setDate((int)tempMonth,(int)tempDay,(int)tempYear); notGood=fFalse;}
    1006:	8a 85       	ldd	r24, Y+10	; 0x0a
    1008:	8f 31       	cpi	r24, 0x1F	; 31
    100a:	b8 f4       	brcc	.+46     	; 0x103a <_Z18getDateTime_eepromhh+0x11e>
    100c:	8b 85       	ldd	r24, Y+11	; 0x0b
    100e:	8d 30       	cpi	r24, 0x0D	; 13
    1010:	a0 f4       	brcc	.+40     	; 0x103a <_Z18getDateTime_eepromhh+0x11e>
    1012:	8c 85       	ldd	r24, Y+12	; 0x0c
    1014:	9d 85       	ldd	r25, Y+13	; 0x0d
    1016:	27 e2       	ldi	r18, 0x27	; 39
    1018:	80 31       	cpi	r24, 0x10	; 16
    101a:	92 07       	cpc	r25, r18
    101c:	70 f4       	brcc	.+28     	; 0x103a <_Z18getDateTime_eepromhh+0x11e>
    101e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1020:	68 2f       	mov	r22, r24
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	8a 85       	ldd	r24, Y+10	; 0x0a
    1026:	48 2f       	mov	r20, r24
    1028:	50 e0       	ldi	r21, 0x00	; 0
    102a:	2c 85       	ldd	r18, Y+12	; 0x0c
    102c:	3d 85       	ldd	r19, Y+13	; 0x0d
    102e:	88 e8       	ldi	r24, 0x88	; 136
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	0e 94 84 01 	call	0x308	; 0x308 <_ZN6myDate7setDateEiii>
    1036:	1e 82       	std	Y+6, r1	; 0x06
    1038:	05 c0       	rjmp	.+10     	; 0x1044 <_Z18getDateTime_eepromhh+0x128>
			else {times++;}
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
    103c:	9d 81       	ldd	r25, Y+5	; 0x05
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	9d 83       	std	Y+5, r25	; 0x05
    1042:	8c 83       	std	Y+4, r24	; 0x04
	if (gDate){
		BYTE tempDay,tempMonth;
		WORD tempYear;
		int times=0;
		BOOL notGood=fTrue;
		while (notGood && times<3){
    1044:	8e 81       	ldd	r24, Y+6	; 0x06
    1046:	88 23       	and	r24, r24
    1048:	39 f0       	breq	.+14     	; 0x1058 <_Z18getDateTime_eepromhh+0x13c>
    104a:	8c 81       	ldd	r24, Y+4	; 0x04
    104c:	9d 81       	ldd	r25, Y+5	; 0x05
    104e:	83 30       	cpi	r24, 0x03	; 3
    1050:	91 05       	cpc	r25, r1
    1052:	14 f4       	brge	.+4      	; 0x1058 <_Z18getDateTime_eepromhh+0x13c>
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	01 c0       	rjmp	.+2      	; 0x105a <_Z18getDateTime_eepromhh+0x13e>
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	88 23       	and	r24, r24
    105c:	21 f6       	brne	.-120    	; 0xfe6 <_Z18getDateTime_eepromhh+0xca>
			tempMonth = eeprom_read_byte(&eeMonth);
			tempYear = eeprom_read_word(&eeYear);
			if (tempDay/31==0 && tempMonth/13==0 && tempYear/10000==0){currentTime.setDate((int)tempMonth,(int)tempDay,(int)tempYear); notGood=fFalse;}
			else {times++;}
		}
		if (notGood){currentTime.setDate(1,1,2001);}	
    105e:	8e 81       	ldd	r24, Y+6	; 0x06
    1060:	88 23       	and	r24, r24
    1062:	51 f0       	breq	.+20     	; 0x1078 <_Z18getDateTime_eepromhh+0x15c>
    1064:	88 e8       	ldi	r24, 0x88	; 136
    1066:	91 e0       	ldi	r25, 0x01	; 1
    1068:	61 e0       	ldi	r22, 0x01	; 1
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	41 e0       	ldi	r20, 0x01	; 1
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	21 ed       	ldi	r18, 0xD1	; 209
    1072:	37 e0       	ldi	r19, 0x07	; 7
    1074:	0e 94 84 01 	call	0x308	; 0x308 <_ZN6myDate7setDateEiii>
	}
	sei();
    1078:	78 94       	sei
}
    107a:	2f 96       	adiw	r28, 0x0f	; 15
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	de bf       	out	0x3e, r29	; 62
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	cd bf       	out	0x3d, r28	; 61
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	08 95       	ret

0000108c <_Z19saveDateTime_eepromhh>:
/*************************************************************************************************************/

void saveDateTime_eeprom(BOOL sTime, BOOL sDate){
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	29 97       	sbiw	r28, 0x09	; 9
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	88 87       	std	Y+8, r24	; 0x08
    10a2:	69 87       	std	Y+9, r22	; 0x09
	cli();
    10a4:	f8 94       	cli
	if (sTime){
    10a6:	88 85       	ldd	r24, Y+8	; 0x08
    10a8:	88 23       	and	r24, r24
    10aa:	f1 f0       	breq	.+60     	; 0x10e8 <_Z19saveDateTime_eepromhh+0x5c>
		BYTE tempSec,tempMin,tempHour;
		tempHour = currentTime.getHours();
    10ac:	88 e8       	ldi	r24, 0x88	; 136
    10ae:	91 e0       	ldi	r25, 0x01	; 1
    10b0:	0e 94 bb 04 	call	0x976	; 0x976 <_ZN6myTime8getHoursEv>
    10b4:	89 83       	std	Y+1, r24	; 0x01
		tempMin = currentTime.getMinutes();
    10b6:	88 e8       	ldi	r24, 0x88	; 136
    10b8:	91 e0       	ldi	r25, 0x01	; 1
    10ba:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6myTime10getMinutesEv>
    10be:	8a 83       	std	Y+2, r24	; 0x02
		tempSec = currentTime.getSeconds();
    10c0:	88 e8       	ldi	r24, 0x88	; 136
    10c2:	91 e0       	ldi	r25, 0x01	; 1
    10c4:	0e 94 99 04 	call	0x932	; 0x932 <_ZN6myTime10getSecondsEv>
    10c8:	8b 83       	std	Y+3, r24	; 0x03
		eeprom_write_byte(&eeSecond,tempSec);
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	6b 81       	ldd	r22, Y+3	; 0x03
    10d0:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <__eewr_byte_m324pa>
		eeprom_write_byte(&eeMinute,tempMin);
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	6a 81       	ldd	r22, Y+2	; 0x02
    10da:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <__eewr_byte_m324pa>
		eeprom_write_byte(&eeHour,tempHour);
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	69 81       	ldd	r22, Y+1	; 0x01
    10e4:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <__eewr_byte_m324pa>
	}
	if (sDate){
    10e8:	89 85       	ldd	r24, Y+9	; 0x09
    10ea:	88 23       	and	r24, r24
    10ec:	09 f1       	breq	.+66     	; 0x1130 <_Z19saveDateTime_eepromhh+0xa4>
		BYTE tempDay,tempMonth;
		WORD tempYear;
		tempYear = currentTime.getYears();
    10ee:	88 e8       	ldi	r24, 0x88	; 136
    10f0:	91 e0       	ldi	r25, 0x01	; 1
    10f2:	0e 94 ba 00 	call	0x174	; 0x174 <_ZN6myDate8getYearsEv>
    10f6:	9d 83       	std	Y+5, r25	; 0x05
    10f8:	8c 83       	std	Y+4, r24	; 0x04
		tempMonth = currentTime.getMonths();
    10fa:	88 e8       	ldi	r24, 0x88	; 136
    10fc:	91 e0       	ldi	r25, 0x01	; 1
    10fe:	0e 94 a9 00 	call	0x152	; 0x152 <_ZN6myDate9getMonthsEv>
    1102:	8e 83       	std	Y+6, r24	; 0x06
		tempDay = currentTime.getDays();
    1104:	88 e8       	ldi	r24, 0x88	; 136
    1106:	91 e0       	ldi	r25, 0x01	; 1
    1108:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN6myDate7getDaysEv>
    110c:	8f 83       	std	Y+7, r24	; 0x07
		eeprom_write_word(&eeYear,tempYear);
    110e:	85 e0       	ldi	r24, 0x05	; 5
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	2c 81       	ldd	r18, Y+4	; 0x04
    1114:	3d 81       	ldd	r19, Y+5	; 0x05
    1116:	b9 01       	movw	r22, r18
    1118:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <__eewr_word_m324pa>
		eeprom_write_byte(&eeMonth,tempMonth);
    111c:	83 e0       	ldi	r24, 0x03	; 3
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	6e 81       	ldd	r22, Y+6	; 0x06
    1122:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <__eewr_byte_m324pa>
		eeprom_write_byte(&eeDay,tempDay);
    1126:	84 e0       	ldi	r24, 0x04	; 4
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	6f 81       	ldd	r22, Y+7	; 0x07
    112c:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <__eewr_byte_m324pa>
	}
	sei();
    1130:	78 94       	sei
}
    1132:	29 96       	adiw	r28, 0x09	; 9
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	08 95       	ret

00001144 <_Z13PutUartChBonec>:
extern myTime currentTime;

#define updatingGAVR (flagUpdateGAVRDate || flagUpdateGAVRTime)

/**************************************************************************************************************/
void PutUartChBone(char ch){
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	0f 92       	push	r0
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSR0A & (1 << UDRE0)));
    1150:	00 00       	nop
    1152:	80 ec       	ldi	r24, 0xC0	; 192
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	fc 01       	movw	r30, r24
    1158:	80 81       	ld	r24, Z
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	80 72       	andi	r24, 0x20	; 32
    1160:	90 70       	andi	r25, 0x00	; 0
    1162:	21 e0       	ldi	r18, 0x01	; 1
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	09 f0       	breq	.+2      	; 0x116a <_Z13PutUartChBonec+0x26>
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	22 23       	and	r18, r18
    116c:	91 f7       	brne	.-28     	; 0x1152 <_Z13PutUartChBonec+0xe>
	UDR0=ch;
    116e:	86 ec       	ldi	r24, 0xC6	; 198
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	29 81       	ldd	r18, Y+1	; 0x01
    1174:	fc 01       	movw	r30, r24
    1176:	20 83       	st	Z, r18
}
    1178:	0f 90       	pop	r0
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	08 95       	ret

00001180 <_Z9PrintBonePc>:
/*************************************************************************************************************/
void PrintBone(char string[]){
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	00 d0       	rcall	.+0      	; 0x1186 <_Z9PrintBonePc+0x6>
    1186:	0f 92       	push	r0
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	9b 83       	std	Y+3, r25	; 0x03
    118e:	8a 83       	std	Y+2, r24	; 0x02
	BYTE i=0;
    1190:	19 82       	std	Y+1, r1	; 0x01
	
	while (string[i]){
    1192:	0e c0       	rjmp	.+28     	; 0x11b0 <_Z9PrintBonePc+0x30>
		PutUartChBone(string[i++]);
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	88 2f       	mov	r24, r24
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	2a 81       	ldd	r18, Y+2	; 0x02
    119c:	3b 81       	ldd	r19, Y+3	; 0x03
    119e:	82 0f       	add	r24, r18
    11a0:	93 1f       	adc	r25, r19
    11a2:	fc 01       	movw	r30, r24
    11a4:	80 81       	ld	r24, Z
    11a6:	99 81       	ldd	r25, Y+1	; 0x01
    11a8:	9f 5f       	subi	r25, 0xFF	; 255
    11aa:	99 83       	std	Y+1, r25	; 0x01
    11ac:	0e 94 a2 08 	call	0x1144	; 0x1144 <_Z13PutUartChBonec>
}
/*************************************************************************************************************/
void PrintBone(char string[]){
	BYTE i=0;
	
	while (string[i]){
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	88 2f       	mov	r24, r24
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	2a 81       	ldd	r18, Y+2	; 0x02
    11b8:	3b 81       	ldd	r19, Y+3	; 0x03
    11ba:	82 0f       	add	r24, r18
    11bc:	93 1f       	adc	r25, r19
    11be:	fc 01       	movw	r30, r24
    11c0:	90 81       	ld	r25, Z
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	99 23       	and	r25, r25
    11c6:	09 f4       	brne	.+2      	; 0x11ca <_Z9PrintBonePc+0x4a>
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	88 23       	and	r24, r24
    11cc:	19 f7       	brne	.-58     	; 0x1194 <_Z9PrintBonePc+0x14>
		PutUartChBone(string[i++]);
	}
}
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	08 95       	ret

000011da <_Z13PutUartChGAVRc>:
/*************************************************************************************************************/

void PutUartChGAVR(char ch){
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	0f 92       	push	r0
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSR1A & (1 << UDRE1)));
    11e6:	00 00       	nop
    11e8:	88 ec       	ldi	r24, 0xC8	; 200
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	fc 01       	movw	r30, r24
    11ee:	80 81       	ld	r24, Z
    11f0:	88 2f       	mov	r24, r24
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	80 72       	andi	r24, 0x20	; 32
    11f6:	90 70       	andi	r25, 0x00	; 0
    11f8:	21 e0       	ldi	r18, 0x01	; 1
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	09 f0       	breq	.+2      	; 0x1200 <_Z13PutUartChGAVRc+0x26>
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	22 23       	and	r18, r18
    1202:	91 f7       	brne	.-28     	; 0x11e8 <_Z13PutUartChGAVRc+0xe>
	UDR1=ch;
    1204:	8e ec       	ldi	r24, 0xCE	; 206
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	29 81       	ldd	r18, Y+1	; 0x01
    120a:	fc 01       	movw	r30, r24
    120c:	20 83       	st	Z, r18
}
    120e:	0f 90       	pop	r0
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	08 95       	ret

00001216 <_Z9PrintGAVRPc>:
/*************************************************************************************************************/

void PrintGAVR(char string[]){
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	00 d0       	rcall	.+0      	; 0x121c <_Z9PrintGAVRPc+0x6>
    121c:	0f 92       	push	r0
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	9b 83       	std	Y+3, r25	; 0x03
    1224:	8a 83       	std	Y+2, r24	; 0x02
	BYTE i=0;
    1226:	19 82       	std	Y+1, r1	; 0x01
	while (string[i]){
    1228:	0e c0       	rjmp	.+28     	; 0x1246 <_Z9PrintGAVRPc+0x30>
		PutUartChGAVR(string[i++]);
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	88 2f       	mov	r24, r24
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	2a 81       	ldd	r18, Y+2	; 0x02
    1232:	3b 81       	ldd	r19, Y+3	; 0x03
    1234:	82 0f       	add	r24, r18
    1236:	93 1f       	adc	r25, r19
    1238:	fc 01       	movw	r30, r24
    123a:	80 81       	ld	r24, Z
    123c:	99 81       	ldd	r25, Y+1	; 0x01
    123e:	9f 5f       	subi	r25, 0xFF	; 255
    1240:	99 83       	std	Y+1, r25	; 0x01
    1242:	0e 94 ed 08 	call	0x11da	; 0x11da <_Z13PutUartChGAVRc>
}
/*************************************************************************************************************/

void PrintGAVR(char string[]){
	BYTE i=0;
	while (string[i]){
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	88 2f       	mov	r24, r24
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	2a 81       	ldd	r18, Y+2	; 0x02
    124e:	3b 81       	ldd	r19, Y+3	; 0x03
    1250:	82 0f       	add	r24, r18
    1252:	93 1f       	adc	r25, r19
    1254:	fc 01       	movw	r30, r24
    1256:	90 81       	ld	r25, Z
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	99 23       	and	r25, r25
    125c:	09 f4       	brne	.+2      	; 0x1260 <_Z9PrintGAVRPc+0x4a>
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	88 23       	and	r24, r24
    1262:	19 f7       	brne	.-58     	; 0x122a <_Z9PrintGAVRPc+0x14>
		PutUartChGAVR(string[i++]);
	}
}
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	08 95       	ret

00001270 <_Z8sendGAVRv>:
/*************************************************************************************************************/

void sendGAVR(){
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	ca 55       	subi	r28, 0x5A	; 90
    127a:	d0 40       	sbci	r29, 0x00	; 0
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
	//Declare variables to be used.
	volatile static unsigned int state=0;
	volatile BOOL noCarriage=fTrue;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	8a 87       	std	Y+10, r24	; 0x0a
	char recChar, recString[40], sentString[40];
	unsigned int strLoc=0;
    128a:	1a 82       	std	Y+2, r1	; 0x02
    128c:	19 82       	std	Y+1, r1	; 0x01
	
	//Used for shutdown connection logic if there was a timeout in sending or receiving
	BOOL flagTimeout=fFalse;
    128e:	1b 82       	std	Y+3, r1	; 0x03
	
	//Transmission protocol
	while (flagSendingGAVR && !flagTimeout){
    1290:	3c c2       	rjmp	.+1144   	; 0x170a <_Z8sendGAVRv+0x49a>
		/* State 5: Successful transmission and reception. Kill sending flag, reset state, exit.					 */
		/* State 6: ACKBAD received, check to see if we have an invalid date/time in our clock or it was just noisy  */
		/*			and had error in transmission/reception. If valid, go to waiting state. Else exit and set flag.	 */
		/* State 7: Got the wrong ack for something, set a flag to let the WAVR do its thing then try again.		 */
		/*************************************************************************************************************/
		switch (state){
    1292:	80 91 c8 01 	lds	r24, 0x01C8
    1296:	90 91 c9 01 	lds	r25, 0x01C9
    129a:	83 30       	cpi	r24, 0x03	; 3
    129c:	91 05       	cpc	r25, r1
    129e:	09 f4       	brne	.+2      	; 0x12a2 <_Z8sendGAVRv+0x32>
    12a0:	3f c1       	rjmp	.+638    	; 0x1520 <_Z8sendGAVRv+0x2b0>
    12a2:	84 30       	cpi	r24, 0x04	; 4
    12a4:	91 05       	cpc	r25, r1
    12a6:	48 f4       	brcc	.+18     	; 0x12ba <_Z8sendGAVRv+0x4a>
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	91 05       	cpc	r25, r1
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <_Z8sendGAVRv+0x40>
    12ae:	97 c0       	rjmp	.+302    	; 0x13de <_Z8sendGAVRv+0x16e>
    12b0:	82 30       	cpi	r24, 0x02	; 2
    12b2:	91 05       	cpc	r25, r1
    12b4:	08 f0       	brcs	.+2      	; 0x12b8 <_Z8sendGAVRv+0x48>
    12b6:	a1 c0       	rjmp	.+322    	; 0x13fa <_Z8sendGAVRv+0x18a>
    12b8:	11 c0       	rjmp	.+34     	; 0x12dc <_Z8sendGAVRv+0x6c>
    12ba:	85 30       	cpi	r24, 0x05	; 5
    12bc:	91 05       	cpc	r25, r1
    12be:	09 f4       	brne	.+2      	; 0x12c2 <_Z8sendGAVRv+0x52>
    12c0:	ed c1       	rjmp	.+986    	; 0x169c <_Z8sendGAVRv+0x42c>
    12c2:	85 30       	cpi	r24, 0x05	; 5
    12c4:	91 05       	cpc	r25, r1
    12c6:	08 f4       	brcc	.+2      	; 0x12ca <_Z8sendGAVRv+0x5a>
    12c8:	de c1       	rjmp	.+956    	; 0x1686 <_Z8sendGAVRv+0x416>
    12ca:	86 30       	cpi	r24, 0x06	; 6
    12cc:	91 05       	cpc	r25, r1
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <_Z8sendGAVRv+0x62>
    12d0:	ef c1       	rjmp	.+990    	; 0x16b0 <_Z8sendGAVRv+0x440>
    12d2:	87 30       	cpi	r24, 0x07	; 7
    12d4:	91 05       	cpc	r25, r1
    12d6:	09 f4       	brne	.+2      	; 0x12da <_Z8sendGAVRv+0x6a>
    12d8:	04 c2       	rjmp	.+1032   	; 0x16e2 <_Z8sendGAVRv+0x472>
    12da:	0e c2       	rjmp	.+1052   	; 0x16f8 <_Z8sendGAVRv+0x488>
			case 0: {
				//Raise interrupts to GAVR for three ish clock cycles.
				prtGAVRINT |= (1 << bnGAVRINT);
    12dc:	85 e2       	ldi	r24, 0x25	; 37
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	25 e2       	ldi	r18, 0x25	; 37
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	f9 01       	movw	r30, r18
    12e6:	20 81       	ld	r18, Z
    12e8:	28 60       	ori	r18, 0x08	; 8
    12ea:	fc 01       	movw	r30, r24
    12ec:	20 83       	st	Z, r18
				for (int i=0; i<2; i++){asm volatile("nop");}
    12ee:	1d 82       	std	Y+5, r1	; 0x05
    12f0:	1c 82       	std	Y+4, r1	; 0x04
    12f2:	06 c0       	rjmp	.+12     	; 0x1300 <_Z8sendGAVRv+0x90>
    12f4:	00 00       	nop
    12f6:	8c 81       	ldd	r24, Y+4	; 0x04
    12f8:	9d 81       	ldd	r25, Y+5	; 0x05
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	9d 83       	std	Y+5, r25	; 0x05
    12fe:	8c 83       	std	Y+4, r24	; 0x04
    1300:	21 e0       	ldi	r18, 0x01	; 1
    1302:	8c 81       	ldd	r24, Y+4	; 0x04
    1304:	9d 81       	ldd	r25, Y+5	; 0x05
    1306:	82 30       	cpi	r24, 0x02	; 2
    1308:	91 05       	cpc	r25, r1
    130a:	0c f0       	brlt	.+2      	; 0x130e <_Z8sendGAVRv+0x9e>
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	22 23       	and	r18, r18
    1310:	89 f7       	brne	.-30     	; 0x12f4 <_Z8sendGAVRv+0x84>
				prtGAVRINT &= ~(1 << bnGAVRINT);
    1312:	85 e2       	ldi	r24, 0x25	; 37
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	25 e2       	ldi	r18, 0x25	; 37
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	f9 01       	movw	r30, r18
    131c:	20 81       	ld	r18, Z
    131e:	27 7f       	andi	r18, 0xF7	; 247
    1320:	fc 01       	movw	r30, r24
    1322:	20 83       	st	Z, r18
				state=1;
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	90 93 c9 01 	sts	0x01C9, r25
    132c:	80 93 c8 01 	sts	0x01C8, r24
				break;
    1330:	ec c1       	rjmp	.+984    	; 0x170a <_Z8sendGAVRv+0x49a>
			}//end case 0
			case 1: {
				while (noCarriage && flagSendingGAVR){
					while (!(UCSR1A & (1 << RXC1)) && flagSendingGAVR);
    1332:	00 00       	nop
    1334:	88 ec       	ldi	r24, 0xC8	; 200
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	fc 01       	movw	r30, r24
    133a:	80 81       	ld	r24, Z
    133c:	88 23       	and	r24, r24
    133e:	34 f0       	brlt	.+12     	; 0x134c <_Z8sendGAVRv+0xdc>
    1340:	80 91 b5 01 	lds	r24, 0x01B5
    1344:	88 23       	and	r24, r24
    1346:	11 f0       	breq	.+4      	; 0x134c <_Z8sendGAVRv+0xdc>
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	01 c0       	rjmp	.+2      	; 0x134e <_Z8sendGAVRv+0xde>
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	88 23       	and	r24, r24
    1350:	89 f7       	brne	.-30     	; 0x1334 <_Z8sendGAVRv+0xc4>
					if (!flagSendingGAVR){state=0; flagTimeout=fTrue; break;}
    1352:	80 91 b5 01 	lds	r24, 0x01B5
    1356:	88 23       	and	r24, r24
    1358:	41 f4       	brne	.+16     	; 0x136a <_Z8sendGAVRv+0xfa>
    135a:	10 92 c9 01 	sts	0x01C9, r1
    135e:	10 92 c8 01 	sts	0x01C8, r1
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	8b 83       	std	Y+3, r24	; 0x03
    1366:	00 00       	nop
							//recString[strLoc++] = recChar;
							if (strLoc >= 39){strLoc = 0; noCarriage=fFalse; state=7;}
						}//end if-else
					}//end if-else	
				}//end while
				break;
    1368:	d0 c1       	rjmp	.+928    	; 0x170a <_Z8sendGAVRv+0x49a>
			case 1: {
				while (noCarriage && flagSendingGAVR){
					while (!(UCSR1A & (1 << RXC1)) && flagSendingGAVR);
					if (!flagSendingGAVR){state=0; flagTimeout=fTrue; break;}
					else {
						recChar=UDR1;
    136a:	8e ec       	ldi	r24, 0xCE	; 206
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	fc 01       	movw	r30, r24
    1370:	80 81       	ld	r24, Z
    1372:	88 87       	std	Y+8, r24	; 0x08
						recString[strLoc++]=recChar;
    1374:	9e 01       	movw	r18, r28
    1376:	2d 5c       	subi	r18, 0xCD	; 205
    1378:	3f 4f       	sbci	r19, 0xFF	; 255
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	9a 81       	ldd	r25, Y+2	; 0x02
    137e:	82 0f       	add	r24, r18
    1380:	93 1f       	adc	r25, r19
    1382:	28 85       	ldd	r18, Y+8	; 0x08
    1384:	fc 01       	movw	r30, r24
    1386:	20 83       	st	Z, r18
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	9a 81       	ldd	r25, Y+2	; 0x02
    138c:	01 96       	adiw	r24, 0x01	; 1
    138e:	9a 83       	std	Y+2, r25	; 0x02
    1390:	89 83       	std	Y+1, r24	; 0x01
						if (recChar=='.'){recString[strLoc++]='\0'; state=2;}
    1392:	88 85       	ldd	r24, Y+8	; 0x08
    1394:	8e 32       	cpi	r24, 0x2E	; 46
    1396:	a9 f4       	brne	.+42     	; 0x13c2 <_Z8sendGAVRv+0x152>
    1398:	9e 01       	movw	r18, r28
    139a:	2d 5c       	subi	r18, 0xCD	; 205
    139c:	3f 4f       	sbci	r19, 0xFF	; 255
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	9a 81       	ldd	r25, Y+2	; 0x02
    13a2:	82 0f       	add	r24, r18
    13a4:	93 1f       	adc	r25, r19
    13a6:	fc 01       	movw	r30, r24
    13a8:	10 82       	st	Z, r1
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	9a 81       	ldd	r25, Y+2	; 0x02
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	9a 83       	std	Y+2, r25	; 0x02
    13b2:	89 83       	std	Y+1, r24	; 0x01
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	90 93 c9 01 	sts	0x01C9, r25
    13bc:	80 93 c8 01 	sts	0x01C8, r24
    13c0:	0e c0       	rjmp	.+28     	; 0x13de <_Z8sendGAVRv+0x16e>
						else {
							//recString[strLoc++] = recChar;
							if (strLoc >= 39){strLoc = 0; noCarriage=fFalse; state=7;}
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	9a 81       	ldd	r25, Y+2	; 0x02
    13c6:	87 32       	cpi	r24, 0x27	; 39
    13c8:	91 05       	cpc	r25, r1
    13ca:	48 f0       	brcs	.+18     	; 0x13de <_Z8sendGAVRv+0x16e>
    13cc:	1a 82       	std	Y+2, r1	; 0x02
    13ce:	19 82       	std	Y+1, r1	; 0x01
    13d0:	1a 86       	std	Y+10, r1	; 0x0a
    13d2:	87 e0       	ldi	r24, 0x07	; 7
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	90 93 c9 01 	sts	0x01C9, r25
    13da:	80 93 c8 01 	sts	0x01C8, r24
				prtGAVRINT &= ~(1 << bnGAVRINT);
				state=1;
				break;
			}//end case 0
			case 1: {
				while (noCarriage && flagSendingGAVR){
    13de:	8a 85       	ldd	r24, Y+10	; 0x0a
    13e0:	88 23       	and	r24, r24
    13e2:	31 f0       	breq	.+12     	; 0x13f0 <_Z8sendGAVRv+0x180>
    13e4:	80 91 b5 01 	lds	r24, 0x01B5
    13e8:	88 23       	and	r24, r24
    13ea:	11 f0       	breq	.+4      	; 0x13f0 <_Z8sendGAVRv+0x180>
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	01 c0       	rjmp	.+2      	; 0x13f2 <_Z8sendGAVRv+0x182>
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	88 23       	and	r24, r24
    13f4:	09 f0       	breq	.+2      	; 0x13f8 <_Z8sendGAVRv+0x188>
    13f6:	9d cf       	rjmp	.-198    	; 0x1332 <_Z8sendGAVRv+0xc2>
							//recString[strLoc++] = recChar;
							if (strLoc >= 39){strLoc = 0; noCarriage=fFalse; state=7;}
						}//end if-else
					}//end if-else	
				}//end while
				break;
    13f8:	88 c1       	rjmp	.+784    	; 0x170a <_Z8sendGAVRv+0x49a>
				}//end case 1
			case 2: {
				if (!strcmp(recString,"ACKW.")){state=3;}
    13fa:	ce 01       	movw	r24, r28
    13fc:	c3 96       	adiw	r24, 0x33	; 51
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	31 e0       	ldi	r19, 0x01	; 1
    1402:	b9 01       	movw	r22, r18
    1404:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <strcmp>
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	39 f4       	brne	.+14     	; 0x141a <_Z8sendGAVRv+0x1aa>
    140c:	83 e0       	ldi	r24, 0x03	; 3
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	90 93 c9 01 	sts	0x01C9, r25
    1414:	80 93 c8 01 	sts	0x01C8, r24
				else if (!strcmp(recString,"ACKBAD.")){state=6;}
				//send string case.
				else if (updatingGAVR && !strcmp(recString,sentString)){state=5;}		//they match, successful send.
				else if (updatingGAVR && strcmp(recString,sentString) && strcmp(recString,"ACKBAD.")){state=7;}	//string isnt the same as ACKBAD or what we sent.
				else{state=7;} //invalid ack
				break;
    1418:	78 c1       	rjmp	.+752    	; 0x170a <_Z8sendGAVRv+0x49a>
				}//end while
				break;
				}//end case 1
			case 2: {
				if (!strcmp(recString,"ACKW.")){state=3;}
				else if (!strcmp(recString,"ACKGD.")){state=4;}
    141a:	ce 01       	movw	r24, r28
    141c:	c3 96       	adiw	r24, 0x33	; 51
    141e:	26 e0       	ldi	r18, 0x06	; 6
    1420:	31 e0       	ldi	r19, 0x01	; 1
    1422:	b9 01       	movw	r22, r18
    1424:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <strcmp>
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	39 f4       	brne	.+14     	; 0x143a <_Z8sendGAVRv+0x1ca>
    142c:	84 e0       	ldi	r24, 0x04	; 4
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	90 93 c9 01 	sts	0x01C9, r25
    1434:	80 93 c8 01 	sts	0x01C8, r24
				else if (!strcmp(recString,"ACKBAD.")){state=6;}
				//send string case.
				else if (updatingGAVR && !strcmp(recString,sentString)){state=5;}		//they match, successful send.
				else if (updatingGAVR && strcmp(recString,sentString) && strcmp(recString,"ACKBAD.")){state=7;}	//string isnt the same as ACKBAD or what we sent.
				else{state=7;} //invalid ack
				break;
    1438:	68 c1       	rjmp	.+720    	; 0x170a <_Z8sendGAVRv+0x49a>
				break;
				}//end case 1
			case 2: {
				if (!strcmp(recString,"ACKW.")){state=3;}
				else if (!strcmp(recString,"ACKGD.")){state=4;}
				else if (!strcmp(recString,"ACKGT.")){state=4;}
    143a:	ce 01       	movw	r24, r28
    143c:	c3 96       	adiw	r24, 0x33	; 51
    143e:	2d e0       	ldi	r18, 0x0D	; 13
    1440:	31 e0       	ldi	r19, 0x01	; 1
    1442:	b9 01       	movw	r22, r18
    1444:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <strcmp>
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	39 f4       	brne	.+14     	; 0x145a <_Z8sendGAVRv+0x1ea>
    144c:	84 e0       	ldi	r24, 0x04	; 4
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	90 93 c9 01 	sts	0x01C9, r25
    1454:	80 93 c8 01 	sts	0x01C8, r24
				else if (!strcmp(recString,"ACKBAD.")){state=6;}
				//send string case.
				else if (updatingGAVR && !strcmp(recString,sentString)){state=5;}		//they match, successful send.
				else if (updatingGAVR && strcmp(recString,sentString) && strcmp(recString,"ACKBAD.")){state=7;}	//string isnt the same as ACKBAD or what we sent.
				else{state=7;} //invalid ack
				break;
    1458:	58 c1       	rjmp	.+688    	; 0x170a <_Z8sendGAVRv+0x49a>
				}//end case 1
			case 2: {
				if (!strcmp(recString,"ACKW.")){state=3;}
				else if (!strcmp(recString,"ACKGD.")){state=4;}
				else if (!strcmp(recString,"ACKGT.")){state=4;}
				else if (!strcmp(recString,"ACKGB.")){state=4;}
    145a:	ce 01       	movw	r24, r28
    145c:	c3 96       	adiw	r24, 0x33	; 51
    145e:	24 e1       	ldi	r18, 0x14	; 20
    1460:	31 e0       	ldi	r19, 0x01	; 1
    1462:	b9 01       	movw	r22, r18
    1464:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <strcmp>
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	39 f4       	brne	.+14     	; 0x147a <_Z8sendGAVRv+0x20a>
    146c:	84 e0       	ldi	r24, 0x04	; 4
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	90 93 c9 01 	sts	0x01C9, r25
    1474:	80 93 c8 01 	sts	0x01C8, r24
				else if (!strcmp(recString,"ACKBAD.")){state=6;}
				//send string case.
				else if (updatingGAVR && !strcmp(recString,sentString)){state=5;}		//they match, successful send.
				else if (updatingGAVR && strcmp(recString,sentString) && strcmp(recString,"ACKBAD.")){state=7;}	//string isnt the same as ACKBAD or what we sent.
				else{state=7;} //invalid ack
				break;
    1478:	48 c1       	rjmp	.+656    	; 0x170a <_Z8sendGAVRv+0x49a>
			case 2: {
				if (!strcmp(recString,"ACKW.")){state=3;}
				else if (!strcmp(recString,"ACKGD.")){state=4;}
				else if (!strcmp(recString,"ACKGT.")){state=4;}
				else if (!strcmp(recString,"ACKGB.")){state=4;}
				else if (!strcmp(recString,"ACKBAD.")){state=6;}
    147a:	ce 01       	movw	r24, r28
    147c:	c3 96       	adiw	r24, 0x33	; 51
    147e:	2b e1       	ldi	r18, 0x1B	; 27
    1480:	31 e0       	ldi	r19, 0x01	; 1
    1482:	b9 01       	movw	r22, r18
    1484:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <strcmp>
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	39 f4       	brne	.+14     	; 0x149a <_Z8sendGAVRv+0x22a>
    148c:	86 e0       	ldi	r24, 0x06	; 6
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	90 93 c9 01 	sts	0x01C9, r25
    1494:	80 93 c8 01 	sts	0x01C8, r24
				//send string case.
				else if (updatingGAVR && !strcmp(recString,sentString)){state=5;}		//they match, successful send.
				else if (updatingGAVR && strcmp(recString,sentString) && strcmp(recString,"ACKBAD.")){state=7;}	//string isnt the same as ACKBAD or what we sent.
				else{state=7;} //invalid ack
				break;
    1498:	38 c1       	rjmp	.+624    	; 0x170a <_Z8sendGAVRv+0x49a>
				else if (!strcmp(recString,"ACKGD.")){state=4;}
				else if (!strcmp(recString,"ACKGT.")){state=4;}
				else if (!strcmp(recString,"ACKGB.")){state=4;}
				else if (!strcmp(recString,"ACKBAD.")){state=6;}
				//send string case.
				else if (updatingGAVR && !strcmp(recString,sentString)){state=5;}		//they match, successful send.
    149a:	80 91 b4 01 	lds	r24, 0x01B4
    149e:	88 23       	and	r24, r24
    14a0:	21 f4       	brne	.+8      	; 0x14aa <_Z8sendGAVRv+0x23a>
    14a2:	80 91 b3 01 	lds	r24, 0x01B3
    14a6:	88 23       	and	r24, r24
    14a8:	89 f0       	breq	.+34     	; 0x14cc <_Z8sendGAVRv+0x25c>
    14aa:	ce 01       	movw	r24, r28
    14ac:	c3 96       	adiw	r24, 0x33	; 51
    14ae:	9e 01       	movw	r18, r28
    14b0:	25 5f       	subi	r18, 0xF5	; 245
    14b2:	3f 4f       	sbci	r19, 0xFF	; 255
    14b4:	b9 01       	movw	r22, r18
    14b6:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <strcmp>
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	39 f4       	brne	.+14     	; 0x14cc <_Z8sendGAVRv+0x25c>
    14be:	85 e0       	ldi	r24, 0x05	; 5
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	90 93 c9 01 	sts	0x01C9, r25
    14c6:	80 93 c8 01 	sts	0x01C8, r24
    14ca:	29 c0       	rjmp	.+82     	; 0x151e <_Z8sendGAVRv+0x2ae>
				else if (updatingGAVR && strcmp(recString,sentString) && strcmp(recString,"ACKBAD.")){state=7;}	//string isnt the same as ACKBAD or what we sent.
    14cc:	80 91 b4 01 	lds	r24, 0x01B4
    14d0:	88 23       	and	r24, r24
    14d2:	21 f4       	brne	.+8      	; 0x14dc <_Z8sendGAVRv+0x26c>
    14d4:	80 91 b3 01 	lds	r24, 0x01B3
    14d8:	88 23       	and	r24, r24
    14da:	d1 f0       	breq	.+52     	; 0x1510 <_Z8sendGAVRv+0x2a0>
    14dc:	ce 01       	movw	r24, r28
    14de:	c3 96       	adiw	r24, 0x33	; 51
    14e0:	9e 01       	movw	r18, r28
    14e2:	25 5f       	subi	r18, 0xF5	; 245
    14e4:	3f 4f       	sbci	r19, 0xFF	; 255
    14e6:	b9 01       	movw	r22, r18
    14e8:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <strcmp>
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	81 f0       	breq	.+32     	; 0x1510 <_Z8sendGAVRv+0x2a0>
    14f0:	ce 01       	movw	r24, r28
    14f2:	c3 96       	adiw	r24, 0x33	; 51
    14f4:	2b e1       	ldi	r18, 0x1B	; 27
    14f6:	31 e0       	ldi	r19, 0x01	; 1
    14f8:	b9 01       	movw	r22, r18
    14fa:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <strcmp>
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	39 f0       	breq	.+14     	; 0x1510 <_Z8sendGAVRv+0x2a0>
    1502:	87 e0       	ldi	r24, 0x07	; 7
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	90 93 c9 01 	sts	0x01C9, r25
    150a:	80 93 c8 01 	sts	0x01C8, r24
    150e:	07 c0       	rjmp	.+14     	; 0x151e <_Z8sendGAVRv+0x2ae>
				else{state=7;} //invalid ack
    1510:	87 e0       	ldi	r24, 0x07	; 7
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	90 93 c9 01 	sts	0x01C9, r25
    1518:	80 93 c8 01 	sts	0x01C8, r24
				break;
    151c:	f6 c0       	rjmp	.+492    	; 0x170a <_Z8sendGAVRv+0x49a>
    151e:	f5 c0       	rjmp	.+490    	; 0x170a <_Z8sendGAVRv+0x49a>
				}//end case 2
			case 3:{
				if (flagUserDate&&!flagUserTime){
    1520:	80 91 b6 01 	lds	r24, 0x01B6
    1524:	88 23       	and	r24, r24
    1526:	49 f0       	breq	.+18     	; 0x153a <_Z8sendGAVRv+0x2ca>
    1528:	80 91 b7 01 	lds	r24, 0x01B7
    152c:	88 23       	and	r24, r24
    152e:	29 f4       	brne	.+10     	; 0x153a <_Z8sendGAVRv+0x2ca>
					PrintGAVR("SYNGD.");
    1530:	83 e2       	ldi	r24, 0x23	; 35
    1532:	91 e0       	ldi	r25, 0x01	; 1
    1534:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
    1538:	19 c0       	rjmp	.+50     	; 0x156c <_Z8sendGAVRv+0x2fc>
				} else if (!flagUserDate&&flagUserTime){
    153a:	80 91 b6 01 	lds	r24, 0x01B6
    153e:	88 23       	and	r24, r24
    1540:	49 f4       	brne	.+18     	; 0x1554 <_Z8sendGAVRv+0x2e4>
    1542:	80 91 b7 01 	lds	r24, 0x01B7
    1546:	88 23       	and	r24, r24
    1548:	29 f0       	breq	.+10     	; 0x1554 <_Z8sendGAVRv+0x2e4>
					PrintGAVR("SYNGT.");
    154a:	8a e2       	ldi	r24, 0x2A	; 42
    154c:	91 e0       	ldi	r25, 0x01	; 1
    154e:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
    1552:	0c c0       	rjmp	.+24     	; 0x156c <_Z8sendGAVRv+0x2fc>
				} else if (flagUserTime&&flagUserDate){
    1554:	80 91 b7 01 	lds	r24, 0x01B7
    1558:	88 23       	and	r24, r24
    155a:	41 f0       	breq	.+16     	; 0x156c <_Z8sendGAVRv+0x2fc>
    155c:	80 91 b6 01 	lds	r24, 0x01B6
    1560:	88 23       	and	r24, r24
    1562:	21 f0       	breq	.+8      	; 0x156c <_Z8sendGAVRv+0x2fc>
					PrintGAVR("SYNGB.");
    1564:	81 e3       	ldi	r24, 0x31	; 49
    1566:	91 e0       	ldi	r25, 0x01	; 1
    1568:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
				} else;
				
				//If we are updating the gavr, send the time and date together regardless. preface with SYN
				if (updatingGAVR && !(flagUserDate || flagUserTime)){
    156c:	80 91 b4 01 	lds	r24, 0x01B4
    1570:	88 23       	and	r24, r24
    1572:	29 f4       	brne	.+10     	; 0x157e <_Z8sendGAVRv+0x30e>
    1574:	80 91 b3 01 	lds	r24, 0x01B3
    1578:	88 23       	and	r24, r24
    157a:	09 f4       	brne	.+2      	; 0x157e <_Z8sendGAVRv+0x30e>
    157c:	5d c0       	rjmp	.+186    	; 0x1638 <_Z8sendGAVRv+0x3c8>
    157e:	80 91 b6 01 	lds	r24, 0x01B6
    1582:	88 23       	and	r24, r24
    1584:	09 f0       	breq	.+2      	; 0x1588 <_Z8sendGAVRv+0x318>
    1586:	58 c0       	rjmp	.+176    	; 0x1638 <_Z8sendGAVRv+0x3c8>
    1588:	80 91 b7 01 	lds	r24, 0x01B7
    158c:	88 23       	and	r24, r24
    158e:	09 f0       	breq	.+2      	; 0x1592 <_Z8sendGAVRv+0x322>
    1590:	53 c0       	rjmp	.+166    	; 0x1638 <_Z8sendGAVRv+0x3c8>
					strcpy(sentString,"SYN");			//this is a syn, not ack to save logic in GAVR code. Can change if we want.
    1592:	9e 01       	movw	r18, r28
    1594:	25 5f       	subi	r18, 0xF5	; 245
    1596:	3f 4f       	sbci	r19, 0xFF	; 255
    1598:	83 e5       	ldi	r24, 0x53	; 83
    159a:	99 e5       	ldi	r25, 0x59	; 89
    159c:	ae e4       	ldi	r26, 0x4E	; 78
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	f9 01       	movw	r30, r18
    15a2:	80 83       	st	Z, r24
    15a4:	91 83       	std	Z+1, r25	; 0x01
    15a6:	a2 83       	std	Z+2, r26	; 0x02
    15a8:	b3 83       	std	Z+3, r27	; 0x03
					strcat(sentString,currentTime.getTime());
    15aa:	88 e8       	ldi	r24, 0x88	; 136
    15ac:	91 e0       	ldi	r25, 0x01	; 1
    15ae:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN6myTime7getTimeEv>
    15b2:	9c 01       	movw	r18, r24
    15b4:	ce 01       	movw	r24, r28
    15b6:	0b 96       	adiw	r24, 0x0b	; 11
    15b8:	b9 01       	movw	r22, r18
    15ba:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <strcat>
					strcat(sentString,"/");	//add delimiter.
    15be:	ce 01       	movw	r24, r28
    15c0:	0b 96       	adiw	r24, 0x0b	; 11
    15c2:	9c 01       	movw	r18, r24
    15c4:	f9 01       	movw	r30, r18
    15c6:	01 90       	ld	r0, Z+
    15c8:	00 20       	and	r0, r0
    15ca:	e9 f7       	brne	.-6      	; 0x15c6 <_Z8sendGAVRv+0x356>
    15cc:	cf 01       	movw	r24, r30
    15ce:	01 97       	sbiw	r24, 0x01	; 1
    15d0:	82 1b       	sub	r24, r18
    15d2:	93 0b       	sbc	r25, r19
    15d4:	9e 01       	movw	r18, r28
    15d6:	25 5f       	subi	r18, 0xF5	; 245
    15d8:	3f 4f       	sbci	r19, 0xFF	; 255
    15da:	82 0f       	add	r24, r18
    15dc:	93 1f       	adc	r25, r19
    15de:	2f e2       	ldi	r18, 0x2F	; 47
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	fc 01       	movw	r30, r24
    15e4:	31 83       	std	Z+1, r19	; 0x01
    15e6:	20 83       	st	Z, r18
					strcat(sentString,currentTime.getDate());
    15e8:	88 e8       	ldi	r24, 0x88	; 136
    15ea:	91 e0       	ldi	r25, 0x01	; 1
    15ec:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN6myDate7getDateEv>
    15f0:	9c 01       	movw	r18, r24
    15f2:	ce 01       	movw	r24, r28
    15f4:	0b 96       	adiw	r24, 0x0b	; 11
    15f6:	b9 01       	movw	r22, r18
    15f8:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <strcat>
					strcat(sentString,".\0");
    15fc:	ce 01       	movw	r24, r28
    15fe:	0b 96       	adiw	r24, 0x0b	; 11
    1600:	9c 01       	movw	r18, r24
    1602:	f9 01       	movw	r30, r18
    1604:	01 90       	ld	r0, Z+
    1606:	00 20       	and	r0, r0
    1608:	e9 f7       	brne	.-6      	; 0x1604 <_Z8sendGAVRv+0x394>
    160a:	cf 01       	movw	r24, r30
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	82 1b       	sub	r24, r18
    1610:	93 0b       	sbc	r25, r19
    1612:	9e 01       	movw	r18, r28
    1614:	25 5f       	subi	r18, 0xF5	; 245
    1616:	3f 4f       	sbci	r19, 0xFF	; 255
    1618:	82 0f       	add	r24, r18
    161a:	93 1f       	adc	r25, r19
    161c:	2e e2       	ldi	r18, 0x2E	; 46
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	fc 01       	movw	r30, r24
    1622:	31 83       	std	Z+1, r19	; 0x01
    1624:	20 83       	st	Z, r18
					PrintGAVR("SYN");
    1626:	88 e3       	ldi	r24, 0x38	; 56
    1628:	91 e0       	ldi	r25, 0x01	; 1
    162a:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
					printTimeDate(fFalse,fTrue,fTrue);			//date is terminated by a . so don't need to send character
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	61 e0       	ldi	r22, 0x01	; 1
    1632:	41 e0       	ldi	r20, 0x01	; 1
    1634:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <_Z13printTimeDatehhh>
				}			
				//Reset the recString to receive the next ACK.
				for (int i=0; i<strLoc; i++){
    1638:	1f 82       	std	Y+7, r1	; 0x07
    163a:	1e 82       	std	Y+6, r1	; 0x06
    163c:	0e c0       	rjmp	.+28     	; 0x165a <_Z8sendGAVRv+0x3ea>
					recString[i]=NULL;
    163e:	9e 01       	movw	r18, r28
    1640:	2d 5c       	subi	r18, 0xCD	; 205
    1642:	3f 4f       	sbci	r19, 0xFF	; 255
    1644:	8e 81       	ldd	r24, Y+6	; 0x06
    1646:	9f 81       	ldd	r25, Y+7	; 0x07
    1648:	82 0f       	add	r24, r18
    164a:	93 1f       	adc	r25, r19
    164c:	fc 01       	movw	r30, r24
    164e:	10 82       	st	Z, r1
					strcat(sentString,".\0");
					PrintGAVR("SYN");
					printTimeDate(fFalse,fTrue,fTrue);			//date is terminated by a . so don't need to send character
				}			
				//Reset the recString to receive the next ACK.
				for (int i=0; i<strLoc; i++){
    1650:	8e 81       	ldd	r24, Y+6	; 0x06
    1652:	9f 81       	ldd	r25, Y+7	; 0x07
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	9f 83       	std	Y+7, r25	; 0x07
    1658:	8e 83       	std	Y+6, r24	; 0x06
    165a:	2e 81       	ldd	r18, Y+6	; 0x06
    165c:	3f 81       	ldd	r19, Y+7	; 0x07
    165e:	41 e0       	ldi	r20, 0x01	; 1
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	9a 81       	ldd	r25, Y+2	; 0x02
    1664:	28 17       	cp	r18, r24
    1666:	39 07       	cpc	r19, r25
    1668:	08 f0       	brcs	.+2      	; 0x166c <_Z8sendGAVRv+0x3fc>
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	44 23       	and	r20, r20
    166e:	39 f7       	brne	.-50     	; 0x163e <_Z8sendGAVRv+0x3ce>
					recString[i]=NULL;
				}
				//Reset the carriage feature, string location and go back to the receiving state.
				noCarriage=fTrue;
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	8a 87       	std	Y+10, r24	; 0x0a
				strLoc=0;
    1674:	1a 82       	std	Y+2, r1	; 0x02
    1676:	19 82       	std	Y+1, r1	; 0x01
				state=1;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	90 93 c9 01 	sts	0x01C9, r25
    1680:	80 93 c8 01 	sts	0x01C8, r24
				break;
    1684:	42 c0       	rjmp	.+132    	; 0x170a <_Z8sendGAVRv+0x49a>
				}//end case 3
			case 4:{
				//Successful communication with just flags
				PrintGAVR("SYNDONE.");	//end the communication
    1686:	8c e3       	ldi	r24, 0x3C	; 60
    1688:	91 e0       	ldi	r25, 0x01	; 1
    168a:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
				state=5;
    168e:	85 e0       	ldi	r24, 0x05	; 5
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	90 93 c9 01 	sts	0x01C9, r25
    1696:	80 93 c8 01 	sts	0x01C8, r24
				break;				
    169a:	37 c0       	rjmp	.+110    	; 0x170a <_Z8sendGAVRv+0x49a>
				}//end case 4	
			case 5:{
				//Successful communications overall
				flagSendingGAVR=fFalse;
    169c:	10 92 b5 01 	sts	0x01B5, r1
				flagWaitingToSendGAVR=fFalse;
    16a0:	10 92 b9 01 	sts	0x01B9, r1
				flagTimeout=fFalse;
    16a4:	1b 82       	std	Y+3, r1	; 0x03
				state=0;
    16a6:	10 92 c9 01 	sts	0x01C9, r1
    16aa:	10 92 c8 01 	sts	0x01C8, r1
				break;
    16ae:	2d c0       	rjmp	.+90     	; 0x170a <_Z8sendGAVRv+0x49a>
				}//end case 5
			case 6:{
				//ACKBAD. Check the date and time to see if its okay. IF okay, go to state 7 to set waiting flag. otherwise set invalid time and close through state 5.
				BOOL dateOK = currentTime.checkValidity();
    16b0:	88 e8       	ldi	r24, 0x88	; 136
    16b2:	91 e0       	ldi	r25, 0x01	; 1
    16b4:	0e 94 c1 06 	call	0xd82	; 0xd82 <_ZN6myTime13checkValidityEv>
    16b8:	89 87       	std	Y+9, r24	; 0x09
				if (dateOK){state=7;}
    16ba:	89 85       	ldd	r24, Y+9	; 0x09
    16bc:	88 23       	and	r24, r24
    16be:	39 f0       	breq	.+14     	; 0x16ce <_Z8sendGAVRv+0x45e>
    16c0:	87 e0       	ldi	r24, 0x07	; 7
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	90 93 c9 01 	sts	0x01C9, r25
    16c8:	80 93 c8 01 	sts	0x01C8, r24
				else {state=5; flagInvalidDateTime=fTrue;}
				break;
    16cc:	1e c0       	rjmp	.+60     	; 0x170a <_Z8sendGAVRv+0x49a>
				}//end case 5
			case 6:{
				//ACKBAD. Check the date and time to see if its okay. IF okay, go to state 7 to set waiting flag. otherwise set invalid time and close through state 5.
				BOOL dateOK = currentTime.checkValidity();
				if (dateOK){state=7;}
				else {state=5; flagInvalidDateTime=fTrue;}
    16ce:	85 e0       	ldi	r24, 0x05	; 5
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	90 93 c9 01 	sts	0x01C9, r25
    16d6:	80 93 c8 01 	sts	0x01C8, r24
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	80 93 b8 01 	sts	0x01B8, r24
				break;
    16e0:	14 c0       	rjmp	.+40     	; 0x170a <_Z8sendGAVRv+0x49a>
				}//end case 6
			case 7:{
				//Got the wrong ACK back, or invalid ACK. Wait for next cycle then resend. Keep all the flags the same
				flagWaitingToSendGAVR=fTrue;
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	80 93 b9 01 	sts	0x01B9, r24
				flagSendingGAVR=fFalse;
    16e8:	10 92 b5 01 	sts	0x01B5, r1
				flagTimeout=fFalse;
    16ec:	1b 82       	std	Y+3, r1	; 0x03
				state=0;
    16ee:	10 92 c9 01 	sts	0x01C9, r1
    16f2:	10 92 c8 01 	sts	0x01C8, r1
				break;
    16f6:	09 c0       	rjmp	.+18     	; 0x170a <_Z8sendGAVRv+0x49a>
				}//end case 7
			default:{state=0; flagSendingGAVR=fFalse; noCarriage=fFalse; flagTimeout=fFalse;break;}
    16f8:	10 92 c9 01 	sts	0x01C9, r1
    16fc:	10 92 c8 01 	sts	0x01C8, r1
    1700:	10 92 b5 01 	sts	0x01B5, r1
    1704:	1a 86       	std	Y+10, r1	; 0x0a
    1706:	1b 82       	std	Y+3, r1	; 0x03
    1708:	00 00       	nop
	
	//Used for shutdown connection logic if there was a timeout in sending or receiving
	BOOL flagTimeout=fFalse;
	
	//Transmission protocol
	while (flagSendingGAVR && !flagTimeout){
    170a:	80 91 b5 01 	lds	r24, 0x01B5
    170e:	88 23       	and	r24, r24
    1710:	29 f0       	breq	.+10     	; 0x171c <_Z8sendGAVRv+0x4ac>
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	88 23       	and	r24, r24
    1716:	11 f4       	brne	.+4      	; 0x171c <_Z8sendGAVRv+0x4ac>
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	01 c0       	rjmp	.+2      	; 0x171e <_Z8sendGAVRv+0x4ae>
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	88 23       	and	r24, r24
    1720:	09 f0       	breq	.+2      	; 0x1724 <_Z8sendGAVRv+0x4b4>
    1722:	b7 cd       	rjmp	.-1170   	; 0x1292 <_Z8sendGAVRv+0x22>
			default:{state=0; flagSendingGAVR=fFalse; noCarriage=fFalse; flagTimeout=fFalse;break;}
		}//end switch
	}//end while
	
	//If there was a timeout and the wiating flag has not been set yet, make sure waiting flag.
	if (noCarriage || flagTimeout){
    1724:	8a 85       	ldd	r24, Y+10	; 0x0a
    1726:	88 23       	and	r24, r24
    1728:	19 f4       	brne	.+6      	; 0x1730 <_Z8sendGAVRv+0x4c0>
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	88 23       	and	r24, r24
    172e:	11 f0       	breq	.+4      	; 0x1734 <_Z8sendGAVRv+0x4c4>
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	01 c0       	rjmp	.+2      	; 0x1736 <_Z8sendGAVRv+0x4c6>
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	88 23       	and	r24, r24
    1738:	19 f0       	breq	.+6      	; 0x1740 <_Z8sendGAVRv+0x4d0>
		flagWaitingToSendGAVR=fTrue;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	80 93 b9 01 	sts	0x01B9, r24
	}
	
	//If we aren't waiting for the next round, don't reset the flags. If we are waiting, just reset the waiting flag. Like a stack popping
	if (!flagWaitingToSendGAVR){
    1740:	80 91 b9 01 	lds	r24, 0x01B9
    1744:	88 23       	and	r24, r24
    1746:	49 f4       	brne	.+18     	; 0x175a <_Z8sendGAVRv+0x4ea>
		flagUserDate=fFalse;
    1748:	10 92 b6 01 	sts	0x01B6, r1
		flagUserTime=fFalse;
    174c:	10 92 b7 01 	sts	0x01B7, r1
		flagUpdateGAVRDate=fFalse;
    1750:	10 92 b4 01 	sts	0x01B4, r1
		flagUpdateGAVRTime=fFalse;		
    1754:	10 92 b3 01 	sts	0x01B3, r1
    1758:	02 c0       	rjmp	.+4      	; 0x175e <_Z8sendGAVRv+0x4ee>
	} else {flagWaitingToSendGAVR=fFalse;}
    175a:	10 92 b9 01 	sts	0x01B9, r1
}//end function 	
    175e:	c6 5a       	subi	r28, 0xA6	; 166
    1760:	df 4f       	sbci	r29, 0xFF	; 255
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	f8 94       	cli
    1766:	de bf       	out	0x3e, r29	; 62
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	cd bf       	out	0x3d, r28	; 61
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	08 95       	ret

00001772 <_Z11ReceiveBonev>:
	
/*************************************************************************************************************/
void ReceiveBone(){
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	a7 97       	sbiw	r28, 0x27	; 39
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	de bf       	out	0x3e, r29	; 62
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	cd bf       	out	0x3d, r28	; 61
	volatile static unsigned int state=0;
	char recChar, recString[20];
	volatile unsigned int strLoc=0;
    1786:	19 8e       	std	Y+25, r1	; 0x19
    1788:	18 8e       	std	Y+24, r1	; 0x18
	BOOL noCarriage=fTrue;
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	89 83       	std	Y+1, r24	; 0x01
	
	while (flagReceivingBone){
    178e:	0d c2       	rjmp	.+1050   	; 0x1baa <_Z11ReceiveBonev+0x438>
			/* State 4: ACKBAD, string it sent was not valid. Reply and exit loop.															*/
			/* State 5: ACKERROR, invalid string or overflow. Say error then exit.															*/
			/* State 6: Graceful exit. Exit from a command like adc or temp.																*/
			/********************************************************************************************************************************/
			
			switch(state){
    1790:	80 91 c6 01 	lds	r24, 0x01C6
    1794:	90 91 c7 01 	lds	r25, 0x01C7
    1798:	83 30       	cpi	r24, 0x03	; 3
    179a:	91 05       	cpc	r25, r1
    179c:	09 f4       	brne	.+2      	; 0x17a0 <_Z11ReceiveBonev+0x2e>
    179e:	d1 c1       	rjmp	.+930    	; 0x1b42 <_Z11ReceiveBonev+0x3d0>
    17a0:	84 30       	cpi	r24, 0x04	; 4
    17a2:	91 05       	cpc	r25, r1
    17a4:	48 f4       	brcc	.+18     	; 0x17b8 <_Z11ReceiveBonev+0x46>
    17a6:	81 30       	cpi	r24, 0x01	; 1
    17a8:	91 05       	cpc	r25, r1
    17aa:	09 f4       	brne	.+2      	; 0x17ae <_Z11ReceiveBonev+0x3c>
    17ac:	87 c0       	rjmp	.+270    	; 0x18bc <_Z11ReceiveBonev+0x14a>
    17ae:	82 30       	cpi	r24, 0x02	; 2
    17b0:	91 05       	cpc	r25, r1
    17b2:	08 f0       	brcs	.+2      	; 0x17b6 <_Z11ReceiveBonev+0x44>
    17b4:	91 c0       	rjmp	.+290    	; 0x18d8 <_Z11ReceiveBonev+0x166>
    17b6:	0d c0       	rjmp	.+26     	; 0x17d2 <_Z11ReceiveBonev+0x60>
    17b8:	85 30       	cpi	r24, 0x05	; 5
    17ba:	91 05       	cpc	r25, r1
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <_Z11ReceiveBonev+0x4e>
    17be:	db c1       	rjmp	.+950    	; 0x1b76 <_Z11ReceiveBonev+0x404>
    17c0:	85 30       	cpi	r24, 0x05	; 5
    17c2:	91 05       	cpc	r25, r1
    17c4:	08 f4       	brcc	.+2      	; 0x17c8 <_Z11ReceiveBonev+0x56>
    17c6:	cc c1       	rjmp	.+920    	; 0x1b60 <_Z11ReceiveBonev+0x3ee>
    17c8:	86 30       	cpi	r24, 0x06	; 6
    17ca:	91 05       	cpc	r25, r1
    17cc:	09 f4       	brne	.+2      	; 0x17d0 <_Z11ReceiveBonev+0x5e>
    17ce:	de c1       	rjmp	.+956    	; 0x1b8c <_Z11ReceiveBonev+0x41a>
    17d0:	e4 c1       	rjmp	.+968    	; 0x1b9a <_Z11ReceiveBonev+0x428>
				case 0:{
					strLoc=0;
    17d2:	19 8e       	std	Y+25, r1	; 0x19
    17d4:	18 8e       	std	Y+24, r1	; 0x18
					recChar = UDR0;
    17d6:	86 ec       	ldi	r24, 0xC6	; 198
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	fc 01       	movw	r30, r24
    17dc:	80 81       	ld	r24, Z
    17de:	8a 83       	std	Y+2, r24	; 0x02
					if (recChar=='.'){
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	8e 32       	cpi	r24, 0x2E	; 46
    17e4:	39 f4       	brne	.+14     	; 0x17f4 <_Z11ReceiveBonev+0x82>
						state=5;
    17e6:	85 e0       	ldi	r24, 0x05	; 5
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	90 93 c7 01 	sts	0x01C7, r25
    17ee:	80 93 c6 01 	sts	0x01C6, r24
					} else  {recString[strLoc++]=recChar; state=1;}	
					break;				
    17f2:	db c1       	rjmp	.+950    	; 0x1baa <_Z11ReceiveBonev+0x438>
				case 0:{
					strLoc=0;
					recChar = UDR0;
					if (recChar=='.'){
						state=5;
					} else  {recString[strLoc++]=recChar; state=1;}	
    17f4:	88 8d       	ldd	r24, Y+24	; 0x18
    17f6:	99 8d       	ldd	r25, Y+25	; 0x19
    17f8:	9e 01       	movw	r18, r28
    17fa:	2c 5f       	subi	r18, 0xFC	; 252
    17fc:	3f 4f       	sbci	r19, 0xFF	; 255
    17fe:	28 0f       	add	r18, r24
    1800:	39 1f       	adc	r19, r25
    1802:	4a 81       	ldd	r20, Y+2	; 0x02
    1804:	f9 01       	movw	r30, r18
    1806:	40 83       	st	Z, r20
    1808:	01 96       	adiw	r24, 0x01	; 1
    180a:	99 8f       	std	Y+25, r25	; 0x19
    180c:	88 8f       	std	Y+24, r24	; 0x18
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	90 93 c7 01 	sts	0x01C7, r25
    1816:	80 93 c6 01 	sts	0x01C6, r24
					break;				
    181a:	c7 c1       	rjmp	.+910    	; 0x1baa <_Z11ReceiveBonev+0x438>
					}//end case 0
				case 1:{
					while (noCarriage && flagReceivingBone){	//while there isn't a timeout and no carry
						while (!(UCSR1A & (1 << RXC0)) && flagReceivingBone);		//get the next character
    181c:	00 00       	nop
    181e:	88 ec       	ldi	r24, 0xC8	; 200
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	fc 01       	movw	r30, r24
    1824:	80 81       	ld	r24, Z
    1826:	88 23       	and	r24, r24
    1828:	34 f0       	brlt	.+12     	; 0x1836 <_Z11ReceiveBonev+0xc4>
    182a:	80 91 b1 01 	lds	r24, 0x01B1
    182e:	88 23       	and	r24, r24
    1830:	11 f0       	breq	.+4      	; 0x1836 <_Z11ReceiveBonev+0xc4>
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	01 c0       	rjmp	.+2      	; 0x1838 <_Z11ReceiveBonev+0xc6>
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	88 23       	and	r24, r24
    183a:	89 f7       	brne	.-30     	; 0x181e <_Z11ReceiveBonev+0xac>
						if (!flagReceivingBone){state=0; break;}					//if there was a timeout, break out and reset state
    183c:	80 91 b1 01 	lds	r24, 0x01B1
    1840:	88 23       	and	r24, r24
    1842:	31 f4       	brne	.+12     	; 0x1850 <_Z11ReceiveBonev+0xde>
    1844:	10 92 c7 01 	sts	0x01C7, r1
    1848:	10 92 c6 01 	sts	0x01C6, r1
    184c:	00 00       	nop
						else{
							//recString[strLoc++]=recChar;
							if (strLoc >= 19){state=5;noCarriage=fFalse;}
						}//end if-else
					}//end while
					break;
    184e:	ad c1       	rjmp	.+858    	; 0x1baa <_Z11ReceiveBonev+0x438>
					}//end case 0
				case 1:{
					while (noCarriage && flagReceivingBone){	//while there isn't a timeout and no carry
						while (!(UCSR1A & (1 << RXC0)) && flagReceivingBone);		//get the next character
						if (!flagReceivingBone){state=0; break;}					//if there was a timeout, break out and reset state
						recChar=UDR0;
    1850:	86 ec       	ldi	r24, 0xC6	; 198
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	fc 01       	movw	r30, r24
    1856:	80 81       	ld	r24, Z
    1858:	8a 83       	std	Y+2, r24	; 0x02
						recString[strLoc++]=recChar;
    185a:	88 8d       	ldd	r24, Y+24	; 0x18
    185c:	99 8d       	ldd	r25, Y+25	; 0x19
    185e:	9e 01       	movw	r18, r28
    1860:	2c 5f       	subi	r18, 0xFC	; 252
    1862:	3f 4f       	sbci	r19, 0xFF	; 255
    1864:	28 0f       	add	r18, r24
    1866:	39 1f       	adc	r19, r25
    1868:	4a 81       	ldd	r20, Y+2	; 0x02
    186a:	f9 01       	movw	r30, r18
    186c:	40 83       	st	Z, r20
    186e:	01 96       	adiw	r24, 0x01	; 1
    1870:	99 8f       	std	Y+25, r25	; 0x19
    1872:	88 8f       	std	Y+24, r24	; 0x18
						if (recChar == '.'){recString[strLoc]='\0'; noCarriage=fFalse; state=2;}
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	8e 32       	cpi	r24, 0x2E	; 46
    1878:	89 f4       	brne	.+34     	; 0x189c <_Z11ReceiveBonev+0x12a>
    187a:	88 8d       	ldd	r24, Y+24	; 0x18
    187c:	99 8d       	ldd	r25, Y+25	; 0x19
    187e:	9e 01       	movw	r18, r28
    1880:	2c 5f       	subi	r18, 0xFC	; 252
    1882:	3f 4f       	sbci	r19, 0xFF	; 255
    1884:	82 0f       	add	r24, r18
    1886:	93 1f       	adc	r25, r19
    1888:	fc 01       	movw	r30, r24
    188a:	10 82       	st	Z, r1
    188c:	19 82       	std	Y+1, r1	; 0x01
    188e:	82 e0       	ldi	r24, 0x02	; 2
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	90 93 c7 01 	sts	0x01C7, r25
    1896:	80 93 c6 01 	sts	0x01C6, r24
    189a:	10 c0       	rjmp	.+32     	; 0x18bc <_Z11ReceiveBonev+0x14a>
						else{
							//recString[strLoc++]=recChar;
							if (strLoc >= 19){state=5;noCarriage=fFalse;}
    189c:	88 8d       	ldd	r24, Y+24	; 0x18
    189e:	99 8d       	ldd	r25, Y+25	; 0x19
    18a0:	21 e0       	ldi	r18, 0x01	; 1
    18a2:	83 31       	cpi	r24, 0x13	; 19
    18a4:	91 05       	cpc	r25, r1
    18a6:	08 f4       	brcc	.+2      	; 0x18aa <_Z11ReceiveBonev+0x138>
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	22 23       	and	r18, r18
    18ac:	39 f0       	breq	.+14     	; 0x18bc <_Z11ReceiveBonev+0x14a>
    18ae:	85 e0       	ldi	r24, 0x05	; 5
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	90 93 c7 01 	sts	0x01C7, r25
    18b6:	80 93 c6 01 	sts	0x01C6, r24
    18ba:	19 82       	std	Y+1, r1	; 0x01
						state=5;
					} else  {recString[strLoc++]=recChar; state=1;}	
					break;				
					}//end case 0
				case 1:{
					while (noCarriage && flagReceivingBone){	//while there isn't a timeout and no carry
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	88 23       	and	r24, r24
    18c0:	31 f0       	breq	.+12     	; 0x18ce <_Z11ReceiveBonev+0x15c>
    18c2:	80 91 b1 01 	lds	r24, 0x01B1
    18c6:	88 23       	and	r24, r24
    18c8:	11 f0       	breq	.+4      	; 0x18ce <_Z11ReceiveBonev+0x15c>
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	01 c0       	rjmp	.+2      	; 0x18d0 <_Z11ReceiveBonev+0x15e>
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	88 23       	and	r24, r24
    18d2:	09 f0       	breq	.+2      	; 0x18d6 <_Z11ReceiveBonev+0x164>
    18d4:	a3 cf       	rjmp	.-186    	; 0x181c <_Z11ReceiveBonev+0xaa>
						else{
							//recString[strLoc++]=recChar;
							if (strLoc >= 19){state=5;noCarriage=fFalse;}
						}//end if-else
					}//end while
					break;
    18d6:	69 c1       	rjmp	.+722    	; 0x1baa <_Z11ReceiveBonev+0x438>
					}//end case 1
				case 2:{
					if (!strcmp(recString,"date.")){printTimeDate(fTrue,fFalse,fTrue); state=6;}
    18d8:	ce 01       	movw	r24, r28
    18da:	04 96       	adiw	r24, 0x04	; 4
    18dc:	25 e4       	ldi	r18, 0x45	; 69
    18de:	31 e0       	ldi	r19, 0x01	; 1
    18e0:	b9 01       	movw	r22, r18
    18e2:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <strcmp>
    18e6:	00 97       	sbiw	r24, 0x00	; 0
    18e8:	61 f4       	brne	.+24     	; 0x1902 <_Z11ReceiveBonev+0x190>
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	60 e0       	ldi	r22, 0x00	; 0
    18ee:	41 e0       	ldi	r20, 0x01	; 1
    18f0:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <_Z13printTimeDatehhh>
    18f4:	86 e0       	ldi	r24, 0x06	; 6
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	90 93 c7 01 	sts	0x01C7, r25
    18fc:	80 93 c6 01 	sts	0x01C6, r24
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strcmp(recString,"SYNNONE.")){state=3;}	
					else {state=5;}						
					break;
    1900:	53 c1       	rjmp	.+678    	; 0x1ba8 <_Z11ReceiveBonev+0x436>
					}//end while
					break;
					}//end case 1
				case 2:{
					if (!strcmp(recString,"date.")){printTimeDate(fTrue,fFalse,fTrue); state=6;}
					else if (!strcmp(recString,"time.")){printTimeDate(fTrue,fTrue,fFalse);state=6;}
    1902:	ce 01       	movw	r24, r28
    1904:	04 96       	adiw	r24, 0x04	; 4
    1906:	2b e4       	ldi	r18, 0x4B	; 75
    1908:	31 e0       	ldi	r19, 0x01	; 1
    190a:	b9 01       	movw	r22, r18
    190c:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <strcmp>
    1910:	00 97       	sbiw	r24, 0x00	; 0
    1912:	61 f4       	brne	.+24     	; 0x192c <_Z11ReceiveBonev+0x1ba>
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	61 e0       	ldi	r22, 0x01	; 1
    1918:	40 e0       	ldi	r20, 0x00	; 0
    191a:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <_Z13printTimeDatehhh>
    191e:	86 e0       	ldi	r24, 0x06	; 6
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	90 93 c7 01 	sts	0x01C7, r25
    1926:	80 93 c6 01 	sts	0x01C6, r24
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strcmp(recString,"SYNNONE.")){state=3;}	
					else {state=5;}						
					break;
    192a:	3e c1       	rjmp	.+636    	; 0x1ba8 <_Z11ReceiveBonev+0x436>
					break;
					}//end case 1
				case 2:{
					if (!strcmp(recString,"date.")){printTimeDate(fTrue,fFalse,fTrue); state=6;}
					else if (!strcmp(recString,"time.")){printTimeDate(fTrue,fTrue,fFalse);state=6;}
					else if (!strcmp(recString,"both.")){printTimeDate(fTrue,fTrue,fTrue);state=6;}
    192c:	ce 01       	movw	r24, r28
    192e:	04 96       	adiw	r24, 0x04	; 4
    1930:	21 e5       	ldi	r18, 0x51	; 81
    1932:	31 e0       	ldi	r19, 0x01	; 1
    1934:	b9 01       	movw	r22, r18
    1936:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <strcmp>
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	61 f4       	brne	.+24     	; 0x1956 <_Z11ReceiveBonev+0x1e4>
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	61 e0       	ldi	r22, 0x01	; 1
    1942:	41 e0       	ldi	r20, 0x01	; 1
    1944:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <_Z13printTimeDatehhh>
    1948:	86 e0       	ldi	r24, 0x06	; 6
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	90 93 c7 01 	sts	0x01C7, r25
    1950:	80 93 c6 01 	sts	0x01C6, r24
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strcmp(recString,"SYNNONE.")){state=3;}	
					else {state=5;}						
					break;
    1954:	29 c1       	rjmp	.+594    	; 0x1ba8 <_Z11ReceiveBonev+0x436>
					}//end case 1
				case 2:{
					if (!strcmp(recString,"date.")){printTimeDate(fTrue,fFalse,fTrue); state=6;}
					else if (!strcmp(recString,"time.")){printTimeDate(fTrue,fTrue,fFalse);state=6;}
					else if (!strcmp(recString,"both.")){printTimeDate(fTrue,fTrue,fTrue);state=6;}
					else if (!strcmp(recString,"save.")){saveDateTime_eeprom(fTrue,fFalse);PrintBone(recString);state=6;}
    1956:	ce 01       	movw	r24, r28
    1958:	04 96       	adiw	r24, 0x04	; 4
    195a:	27 e5       	ldi	r18, 0x57	; 87
    195c:	31 e0       	ldi	r19, 0x01	; 1
    195e:	b9 01       	movw	r22, r18
    1960:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <strcmp>
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	79 f4       	brne	.+30     	; 0x1986 <_Z11ReceiveBonev+0x214>
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	60 e0       	ldi	r22, 0x00	; 0
    196c:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
    1970:	ce 01       	movw	r24, r28
    1972:	04 96       	adiw	r24, 0x04	; 4
    1974:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
    1978:	86 e0       	ldi	r24, 0x06	; 6
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	90 93 c7 01 	sts	0x01C7, r25
    1980:	80 93 c6 01 	sts	0x01C6, r24
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strcmp(recString,"SYNNONE.")){state=3;}	
					else {state=5;}						
					break;
    1984:	11 c1       	rjmp	.+546    	; 0x1ba8 <_Z11ReceiveBonev+0x436>
				case 2:{
					if (!strcmp(recString,"date.")){printTimeDate(fTrue,fFalse,fTrue); state=6;}
					else if (!strcmp(recString,"time.")){printTimeDate(fTrue,fTrue,fFalse);state=6;}
					else if (!strcmp(recString,"both.")){printTimeDate(fTrue,fTrue,fTrue);state=6;}
					else if (!strcmp(recString,"save.")){saveDateTime_eeprom(fTrue,fFalse);PrintBone(recString);state=6;}
					else if (!strcmp(recString,"adc.")){char tempChar[7]; utoa(globalADC,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
    1986:	ce 01       	movw	r24, r28
    1988:	04 96       	adiw	r24, 0x04	; 4
    198a:	2d e5       	ldi	r18, 0x5D	; 93
    198c:	31 e0       	ldi	r19, 0x01	; 1
    198e:	b9 01       	movw	r22, r18
    1990:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <strcmp>
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	c1 f4       	brne	.+48     	; 0x19c8 <_Z11ReceiveBonev+0x256>
    1998:	80 91 84 01 	lds	r24, 0x0184
    199c:	90 91 85 01 	lds	r25, 0x0185
    19a0:	9e 01       	movw	r18, r28
    19a2:	26 5e       	subi	r18, 0xE6	; 230
    19a4:	3f 4f       	sbci	r19, 0xFF	; 255
    19a6:	b9 01       	movw	r22, r18
    19a8:	4a e0       	ldi	r20, 0x0A	; 10
    19aa:	50 e0       	ldi	r21, 0x00	; 0
    19ac:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <utoa>
    19b0:	18 a2       	lds	r17, 0x98
    19b2:	ce 01       	movw	r24, r28
    19b4:	4a 96       	adiw	r24, 0x1a	; 26
    19b6:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
    19ba:	86 e0       	ldi	r24, 0x06	; 6
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	90 93 c7 01 	sts	0x01C7, r25
    19c2:	80 93 c6 01 	sts	0x01C6, r24
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strcmp(recString,"SYNNONE.")){state=3;}	
					else {state=5;}						
					break;
    19c6:	f0 c0       	rjmp	.+480    	; 0x1ba8 <_Z11ReceiveBonev+0x436>
					if (!strcmp(recString,"date.")){printTimeDate(fTrue,fFalse,fTrue); state=6;}
					else if (!strcmp(recString,"time.")){printTimeDate(fTrue,fTrue,fFalse);state=6;}
					else if (!strcmp(recString,"both.")){printTimeDate(fTrue,fTrue,fTrue);state=6;}
					else if (!strcmp(recString,"save.")){saveDateTime_eeprom(fTrue,fFalse);PrintBone(recString);state=6;}
					else if (!strcmp(recString,"adc.")){char tempChar[7]; utoa(globalADC,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
					else if (!strcmp(recString,"temp.")){char tempChar[7]; utoa(globalTemp,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
    19c8:	ce 01       	movw	r24, r28
    19ca:	04 96       	adiw	r24, 0x04	; 4
    19cc:	22 e6       	ldi	r18, 0x62	; 98
    19ce:	31 e0       	ldi	r19, 0x01	; 1
    19d0:	b9 01       	movw	r22, r18
    19d2:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <strcmp>
    19d6:	00 97       	sbiw	r24, 0x00	; 0
    19d8:	c1 f4       	brne	.+48     	; 0x1a0a <_Z11ReceiveBonev+0x298>
    19da:	80 91 86 01 	lds	r24, 0x0186
    19de:	90 91 87 01 	lds	r25, 0x0187
    19e2:	9e 01       	movw	r18, r28
    19e4:	2f 5d       	subi	r18, 0xDF	; 223
    19e6:	3f 4f       	sbci	r19, 0xFF	; 255
    19e8:	b9 01       	movw	r22, r18
    19ea:	4a e0       	ldi	r20, 0x0A	; 10
    19ec:	50 e0       	ldi	r21, 0x00	; 0
    19ee:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <utoa>
    19f2:	1f a2       	lds	r17, 0x9f
    19f4:	ce 01       	movw	r24, r28
    19f6:	81 96       	adiw	r24, 0x21	; 33
    19f8:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
    19fc:	86 e0       	ldi	r24, 0x06	; 6
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	90 93 c7 01 	sts	0x01C7, r25
    1a04:	80 93 c6 01 	sts	0x01C6, r24
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strcmp(recString,"SYNNONE.")){state=3;}	
					else {state=5;}						
					break;
    1a08:	cf c0       	rjmp	.+414    	; 0x1ba8 <_Z11ReceiveBonev+0x436>
					else if (!strcmp(recString,"time.")){printTimeDate(fTrue,fTrue,fFalse);state=6;}
					else if (!strcmp(recString,"both.")){printTimeDate(fTrue,fTrue,fTrue);state=6;}
					else if (!strcmp(recString,"save.")){saveDateTime_eeprom(fTrue,fFalse);PrintBone(recString);state=6;}
					else if (!strcmp(recString,"adc.")){char tempChar[7]; utoa(globalADC,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
					else if (!strcmp(recString,"temp.")){char tempChar[7]; utoa(globalTemp,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
					else if (recString[2] == ':'){//valid string. Update the time anyways. Comes in every 20 minutes or so...
    1a0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a0c:	8a 33       	cpi	r24, 0x3A	; 58
    1a0e:	09 f0       	breq	.+2      	; 0x1a12 <_Z11ReceiveBonev+0x2a0>
    1a10:	81 c0       	rjmp	.+258    	; 0x1b14 <_Z11ReceiveBonev+0x3a2>
						BOOL success=currentTime.setTime(recString);
    1a12:	88 e8       	ldi	r24, 0x88	; 136
    1a14:	91 e0       	ldi	r25, 0x01	; 1
    1a16:	9e 01       	movw	r18, r28
    1a18:	2c 5f       	subi	r18, 0xFC	; 252
    1a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1c:	b9 01       	movw	r22, r18
    1a1e:	0e 94 cc 04 	call	0x998	; 0x998 <_ZN6myTime7setTimeEPc>
    1a22:	8b 83       	std	Y+3, r24	; 0x03
						if (success){state=3;}
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	88 23       	and	r24, r24
    1a28:	39 f0       	breq	.+14     	; 0x1a38 <_Z11ReceiveBonev+0x2c6>
    1a2a:	83 e0       	ldi	r24, 0x03	; 3
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	90 93 c7 01 	sts	0x01C7, r25
    1a32:	80 93 c6 01 	sts	0x01C6, r24
    1a36:	06 c0       	rjmp	.+12     	; 0x1a44 <_Z11ReceiveBonev+0x2d2>
						else {state=4;}
    1a38:	84 e0       	ldi	r24, 0x04	; 4
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	90 93 c7 01 	sts	0x01C7, r25
    1a40:	80 93 c6 01 	sts	0x01C6, r24
						
						//Decide what I need to save and which flags need to go up.	
						if (success && !restart && !flagFreshStart){saveDateTime_eeprom(fTrue,fFalse); flagUpdateGAVRTime=fTrue;}
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	88 23       	and	r24, r24
    1a48:	81 f0       	breq	.+32     	; 0x1a6a <_Z11ReceiveBonev+0x2f8>
    1a4a:	80 91 be 01 	lds	r24, 0x01BE
    1a4e:	88 23       	and	r24, r24
    1a50:	61 f4       	brne	.+24     	; 0x1a6a <_Z11ReceiveBonev+0x2f8>
    1a52:	80 91 bf 01 	lds	r24, 0x01BF
    1a56:	88 23       	and	r24, r24
    1a58:	41 f4       	brne	.+16     	; 0x1a6a <_Z11ReceiveBonev+0x2f8>
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	60 e0       	ldi	r22, 0x00	; 0
    1a5e:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	80 93 b3 01 	sts	0x01B3, r24
    1a68:	47 c0       	rjmp	.+142    	; 0x1af8 <_Z11ReceiveBonev+0x386>
						else if (success && !restart && flagFreshStart){saveDateTime_eeprom(fTrue,fFalse); flagUpdateGAVRTime=fTrue; flagUserDate=fTrue;}
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	88 23       	and	r24, r24
    1a6e:	99 f0       	breq	.+38     	; 0x1a96 <_Z11ReceiveBonev+0x324>
    1a70:	80 91 be 01 	lds	r24, 0x01BE
    1a74:	88 23       	and	r24, r24
    1a76:	79 f4       	brne	.+30     	; 0x1a96 <_Z11ReceiveBonev+0x324>
    1a78:	80 91 bf 01 	lds	r24, 0x01BF
    1a7c:	88 23       	and	r24, r24
    1a7e:	59 f0       	breq	.+22     	; 0x1a96 <_Z11ReceiveBonev+0x324>
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	60 e0       	ldi	r22, 0x00	; 0
    1a84:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	80 93 b3 01 	sts	0x01B3, r24
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	80 93 b6 01 	sts	0x01B6, r24
    1a94:	31 c0       	rjmp	.+98     	; 0x1af8 <_Z11ReceiveBonev+0x386>
						else if (success && restart){saveDateTime_eeprom(fTrue,fFalse); flagUpdateGAVRDate=fTrue; flagUpdateGAVRTime=fTrue;;}
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	88 23       	and	r24, r24
    1a9a:	79 f0       	breq	.+30     	; 0x1aba <_Z11ReceiveBonev+0x348>
    1a9c:	80 91 be 01 	lds	r24, 0x01BE
    1aa0:	88 23       	and	r24, r24
    1aa2:	59 f0       	breq	.+22     	; 0x1aba <_Z11ReceiveBonev+0x348>
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	60 e0       	ldi	r22, 0x00	; 0
    1aa8:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	80 93 b4 01 	sts	0x01B4, r24
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	80 93 b3 01 	sts	0x01B3, r24
    1ab8:	1f c0       	rjmp	.+62     	; 0x1af8 <_Z11ReceiveBonev+0x386>
						else if (!success && restart){flagUpdateGAVRTime=fTrue; flagUpdateGAVRDate=fTrue;}	//sends eeprom time and date
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	88 23       	and	r24, r24
    1abe:	59 f4       	brne	.+22     	; 0x1ad6 <_Z11ReceiveBonev+0x364>
    1ac0:	80 91 be 01 	lds	r24, 0x01BE
    1ac4:	88 23       	and	r24, r24
    1ac6:	39 f0       	breq	.+14     	; 0x1ad6 <_Z11ReceiveBonev+0x364>
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	80 93 b3 01 	sts	0x01B3, r24
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	80 93 b4 01 	sts	0x01B4, r24
    1ad4:	11 c0       	rjmp	.+34     	; 0x1af8 <_Z11ReceiveBonev+0x386>
						else if (!success && flagFreshStart && !restart){flagUserTime=fTrue; flagUserDate=fTrue;} //need to get user time and date
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	88 23       	and	r24, r24
    1ada:	71 f4       	brne	.+28     	; 0x1af8 <_Z11ReceiveBonev+0x386>
    1adc:	80 91 bf 01 	lds	r24, 0x01BF
    1ae0:	88 23       	and	r24, r24
    1ae2:	51 f0       	breq	.+20     	; 0x1af8 <_Z11ReceiveBonev+0x386>
    1ae4:	80 91 be 01 	lds	r24, 0x01BE
    1ae8:	88 23       	and	r24, r24
    1aea:	31 f4       	brne	.+12     	; 0x1af8 <_Z11ReceiveBonev+0x386>
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	80 93 b7 01 	sts	0x01B7, r24
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	80 93 b6 01 	sts	0x01B6, r24
						else;
						//Reset flags for startup
						if (restart){restart=fFalse;}
    1af8:	80 91 be 01 	lds	r24, 0x01BE
    1afc:	88 23       	and	r24, r24
    1afe:	11 f0       	breq	.+4      	; 0x1b04 <_Z11ReceiveBonev+0x392>
    1b00:	10 92 be 01 	sts	0x01BE, r1
						if (flagFreshStart){flagFreshStart=fFalse;}	
    1b04:	80 91 bf 01 	lds	r24, 0x01BF
    1b08:	88 23       	and	r24, r24
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <_Z11ReceiveBonev+0x39c>
    1b0c:	4d c0       	rjmp	.+154    	; 0x1ba8 <_Z11ReceiveBonev+0x436>
    1b0e:	10 92 bf 01 	sts	0x01BF, r1
					} else if (!strcmp(recString,"SYNNONE.")){state=3;}	
					else {state=5;}						
					break;
    1b12:	4a c0       	rjmp	.+148    	; 0x1ba8 <_Z11ReceiveBonev+0x436>
						else if (!success && flagFreshStart && !restart){flagUserTime=fTrue; flagUserDate=fTrue;} //need to get user time and date
						else;
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strcmp(recString,"SYNNONE.")){state=3;}	
    1b14:	ce 01       	movw	r24, r28
    1b16:	04 96       	adiw	r24, 0x04	; 4
    1b18:	28 e6       	ldi	r18, 0x68	; 104
    1b1a:	31 e0       	ldi	r19, 0x01	; 1
    1b1c:	b9 01       	movw	r22, r18
    1b1e:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <strcmp>
    1b22:	00 97       	sbiw	r24, 0x00	; 0
    1b24:	39 f4       	brne	.+14     	; 0x1b34 <_Z11ReceiveBonev+0x3c2>
    1b26:	83 e0       	ldi	r24, 0x03	; 3
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	90 93 c7 01 	sts	0x01C7, r25
    1b2e:	80 93 c6 01 	sts	0x01C6, r24
					else {state=5;}						
					break;
    1b32:	3a c0       	rjmp	.+116    	; 0x1ba8 <_Z11ReceiveBonev+0x436>
						else;
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strcmp(recString,"SYNNONE.")){state=3;}	
					else {state=5;}						
    1b34:	85 e0       	ldi	r24, 0x05	; 5
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	90 93 c7 01 	sts	0x01C7, r25
    1b3c:	80 93 c6 01 	sts	0x01C6, r24
					break;
    1b40:	33 c0       	rjmp	.+102    	; 0x1ba8 <_Z11ReceiveBonev+0x436>
					}//end case 2
				case 3:{
					//Successful receive state
					PrintBone("ACK");
    1b42:	81 e7       	ldi	r24, 0x71	; 113
    1b44:	91 e0       	ldi	r25, 0x01	; 1
    1b46:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
					PrintBone(recString);
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	04 96       	adiw	r24, 0x04	; 4
    1b4e:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
					state=0;
    1b52:	10 92 c7 01 	sts	0x01C7, r1
    1b56:	10 92 c6 01 	sts	0x01C6, r1
					flagReceivingBone=fFalse;
    1b5a:	10 92 b1 01 	sts	0x01B1, r1
					break;
    1b5e:	25 c0       	rjmp	.+74     	; 0x1baa <_Z11ReceiveBonev+0x438>
					}//end case 3
				case 4:{
					PrintBone("ACKBAD.");
    1b60:	8b e1       	ldi	r24, 0x1B	; 27
    1b62:	91 e0       	ldi	r25, 0x01	; 1
    1b64:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
					flagReceivingBone=fFalse;
    1b68:	10 92 b1 01 	sts	0x01B1, r1
					state=0;
    1b6c:	10 92 c7 01 	sts	0x01C7, r1
    1b70:	10 92 c6 01 	sts	0x01C6, r1
					break;
    1b74:	1a c0       	rjmp	.+52     	; 0x1baa <_Z11ReceiveBonev+0x438>
					}//end case 4
				case 5:{
					PrintBone("ACKERROR.");
    1b76:	85 e7       	ldi	r24, 0x75	; 117
    1b78:	91 e0       	ldi	r25, 0x01	; 1
    1b7a:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
					flagReceivingBone=fFalse;
    1b7e:	10 92 b1 01 	sts	0x01B1, r1
					state=0;
    1b82:	10 92 c7 01 	sts	0x01C7, r1
    1b86:	10 92 c6 01 	sts	0x01C6, r1
					break;
    1b8a:	0f c0       	rjmp	.+30     	; 0x1baa <_Z11ReceiveBonev+0x438>
					}//end case 5
				case 6:{
					flagReceivingBone=fFalse;
    1b8c:	10 92 b1 01 	sts	0x01B1, r1
					state=0;
    1b90:	10 92 c7 01 	sts	0x01C7, r1
    1b94:	10 92 c6 01 	sts	0x01C6, r1
					break;
    1b98:	08 c0       	rjmp	.+16     	; 0x1baa <_Z11ReceiveBonev+0x438>
					}//end case 6
				default:{flagReceivingBone=fFalse; state=0;break;}
    1b9a:	10 92 b1 01 	sts	0x01B1, r1
    1b9e:	10 92 c7 01 	sts	0x01C7, r1
    1ba2:	10 92 c6 01 	sts	0x01C6, r1
    1ba6:	01 c0       	rjmp	.+2      	; 0x1baa <_Z11ReceiveBonev+0x438>
						//Reset flags for startup
						if (restart){restart=fFalse;}
						if (flagFreshStart){flagFreshStart=fFalse;}	
					} else if (!strcmp(recString,"SYNNONE.")){state=3;}	
					else {state=5;}						
					break;
    1ba8:	00 00       	nop
	volatile static unsigned int state=0;
	char recChar, recString[20];
	volatile unsigned int strLoc=0;
	BOOL noCarriage=fTrue;
	
	while (flagReceivingBone){
    1baa:	90 91 b1 01 	lds	r25, 0x01B1
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	99 23       	and	r25, r25
    1bb2:	09 f4       	brne	.+2      	; 0x1bb6 <_Z11ReceiveBonev+0x444>
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	88 23       	and	r24, r24
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <_Z11ReceiveBonev+0x44a>
    1bba:	ea cd       	rjmp	.-1068   	; 0x1790 <_Z11ReceiveBonev+0x1e>
					break;
					}//end case 6
				default:{flagReceivingBone=fFalse; state=0;break;}
			}//end switch
	}//end while(flagUARTbone)	
}//end ReceiveBone()
    1bbc:	a7 96       	adiw	r28, 0x27	; 39
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	df 91       	pop	r29
    1bca:	cf 91       	pop	r28
    1bcc:	08 95       	ret

00001bce <_Z13printTimeDatehhh>:

/*************************************************************************************************************/

//To print to WAVR, cariable needs to be false. Print to Bone requires WAVRorBone to be true
void printTimeDate(BOOL WAVRorBone, BOOL pTime,BOOL pDate){
    1bce:	cf 93       	push	r28
    1bd0:	df 93       	push	r29
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    1bd6:	eb 97       	sbiw	r28, 0x3b	; 59
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
    1be2:	89 af       	sts	0x79, r24
    1be4:	6a af       	sts	0x7a, r22
    1be6:	4b af       	sts	0x7b, r20
	if (WAVRorBone){ //Printing to BeagleBone
    1be8:	89 ad       	sts	0x69, r24
    1bea:	88 23       	and	r24, r24
    1bec:	49 f1       	breq	.+82     	; 0x1c40 <_Z13printTimeDatehhh+0x72>
		if (pTime){
    1bee:	8a ad       	sts	0x6a, r24
    1bf0:	88 23       	and	r24, r24
    1bf2:	89 f0       	breq	.+34     	; 0x1c16 <_Z13printTimeDatehhh+0x48>
			char tempTime[11];
			strcpy(tempTime,currentTime.getTime());
    1bf4:	88 e8       	ldi	r24, 0x88	; 136
    1bf6:	91 e0       	ldi	r25, 0x01	; 1
    1bf8:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN6myTime7getTimeEv>
    1bfc:	9c 01       	movw	r18, r24
    1bfe:	ce 01       	movw	r24, r28
    1c00:	01 96       	adiw	r24, 0x01	; 1
    1c02:	b9 01       	movw	r22, r18
    1c04:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <strcpy>
			PrintBone(tempTime);
    1c08:	ce 01       	movw	r24, r28
    1c0a:	01 96       	adiw	r24, 0x01	; 1
    1c0c:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
			PutUartChBone('/');
    1c10:	8f e2       	ldi	r24, 0x2F	; 47
    1c12:	0e 94 a2 08 	call	0x1144	; 0x1144 <_Z13PutUartChBonec>
		}
		if (pDate){
    1c16:	8b ad       	sts	0x6b, r24
    1c18:	88 23       	and	r24, r24
    1c1a:	d1 f1       	breq	.+116    	; 0x1c90 <_Z13printTimeDatehhh+0xc2>
			char tempDate[17];
			strcpy(tempDate,currentTime.getDate());
    1c1c:	88 e8       	ldi	r24, 0x88	; 136
    1c1e:	91 e0       	ldi	r25, 0x01	; 1
    1c20:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN6myDate7getDateEv>
    1c24:	9c 01       	movw	r18, r24
    1c26:	ce 01       	movw	r24, r28
    1c28:	0c 96       	adiw	r24, 0x0c	; 12
    1c2a:	b9 01       	movw	r22, r18
    1c2c:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <strcpy>
			PrintBone(tempDate);
    1c30:	ce 01       	movw	r24, r28
    1c32:	0c 96       	adiw	r24, 0x0c	; 12
    1c34:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
			PutUartChGAVR('.');
    1c38:	8e e2       	ldi	r24, 0x2E	; 46
    1c3a:	0e 94 ed 08 	call	0x11da	; 0x11da <_Z13PutUartChGAVRc>
    1c3e:	28 c0       	rjmp	.+80     	; 0x1c90 <_Z13printTimeDatehhh+0xc2>
		}
	} else { //Printing to GAVR
		if (pTime){
    1c40:	8a ad       	sts	0x6a, r24
    1c42:	88 23       	and	r24, r24
    1c44:	89 f0       	breq	.+34     	; 0x1c68 <_Z13printTimeDatehhh+0x9a>
			char tempTime[11];
			strcpy(tempTime,currentTime.getTime());
    1c46:	88 e8       	ldi	r24, 0x88	; 136
    1c48:	91 e0       	ldi	r25, 0x01	; 1
    1c4a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN6myTime7getTimeEv>
    1c4e:	9c 01       	movw	r18, r24
    1c50:	ce 01       	movw	r24, r28
    1c52:	4d 96       	adiw	r24, 0x1d	; 29
    1c54:	b9 01       	movw	r22, r18
    1c56:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <strcpy>
			PrintGAVR(tempTime);
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	4d 96       	adiw	r24, 0x1d	; 29
    1c5e:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
			PutUartChGAVR('/');
    1c62:	8f e2       	ldi	r24, 0x2F	; 47
    1c64:	0e 94 ed 08 	call	0x11da	; 0x11da <_Z13PutUartChGAVRc>
		}
		if (pDate){
    1c68:	8b ad       	sts	0x6b, r24
    1c6a:	88 23       	and	r24, r24
    1c6c:	89 f0       	breq	.+34     	; 0x1c90 <_Z13printTimeDatehhh+0xc2>
			char tempDate[17];
			strcpy(tempDate,currentTime.getDate());
    1c6e:	88 e8       	ldi	r24, 0x88	; 136
    1c70:	91 e0       	ldi	r25, 0x01	; 1
    1c72:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN6myDate7getDateEv>
    1c76:	9c 01       	movw	r18, r24
    1c78:	ce 01       	movw	r24, r28
    1c7a:	88 96       	adiw	r24, 0x28	; 40
    1c7c:	b9 01       	movw	r22, r18
    1c7e:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <strcpy>
			PrintGAVR(tempDate);
    1c82:	ce 01       	movw	r24, r28
    1c84:	88 96       	adiw	r24, 0x28	; 40
    1c86:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
			PutUartChGAVR('.');
    1c8a:	8e e2       	ldi	r24, 0x2E	; 46
    1c8c:	0e 94 ed 08 	call	0x11da	; 0x11da <_Z13PutUartChGAVRc>
		}
	}
}
    1c90:	eb 96       	adiw	r28, 0x3b	; 59
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	de bf       	out	0x3e, r29	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	cd bf       	out	0x3d, r28	; 61
    1c9c:	df 91       	pop	r29
    1c9e:	cf 91       	pop	r28
    1ca0:	08 95       	ret

00001ca2 <__vector_6>:
/****************************************************************************************************************/


/*--------------------------Interrupt Service Routines------------------------------------------------------------------------------------*/
//PCINT_17: Getting information from the GAVR
ISR(PCINT2_vect){
    1ca2:	1f 92       	push	r1
    1ca4:	0f 92       	push	r0
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	0f 92       	push	r0
    1caa:	11 24       	eor	r1, r1
    1cac:	cf 93       	push	r28
    1cae:	df 93       	push	r29
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
	
	
}	
    1cb4:	df 91       	pop	r29
    1cb6:	cf 91       	pop	r28
    1cb8:	0f 90       	pop	r0
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	0f 90       	pop	r0
    1cbe:	1f 90       	pop	r1
    1cc0:	18 95       	reti

00001cc2 <__vector_3>:

//INT2: Getting information from BeagleBone
ISR(INT2_vect){	//about to get time, get things ready
    1cc2:	1f 92       	push	r1
    1cc4:	0f 92       	push	r0
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	0f 92       	push	r0
    1cca:	11 24       	eor	r1, r1
    1ccc:	2f 93       	push	r18
    1cce:	3f 93       	push	r19
    1cd0:	4f 93       	push	r20
    1cd2:	5f 93       	push	r21
    1cd4:	6f 93       	push	r22
    1cd6:	7f 93       	push	r23
    1cd8:	8f 93       	push	r24
    1cda:	9f 93       	push	r25
    1cdc:	af 93       	push	r26
    1cde:	bf 93       	push	r27
    1ce0:	ef 93       	push	r30
    1ce2:	ff 93       	push	r31
    1ce4:	cf 93       	push	r28
    1ce6:	df 93       	push	r29
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
	if (!flagShutdown){		//If things are off, don't let noise do an interrupt. Shouldn't happen anyways.
    1cec:	80 91 bb 01 	lds	r24, 0x01BB
    1cf0:	88 23       	and	r24, r24
    1cf2:	c9 f4       	brne	.+50     	; 0x1d26 <__vector_3+0x64>
		UCSR0B |= (1 << RXCIE0);
    1cf4:	81 ec       	ldi	r24, 0xC1	; 193
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	21 ec       	ldi	r18, 0xC1	; 193
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	f9 01       	movw	r30, r18
    1cfe:	20 81       	ld	r18, Z
    1d00:	20 68       	ori	r18, 0x80	; 128
    1d02:	fc 01       	movw	r30, r24
    1d04:	20 83       	st	Z, r18
		flagGoToSleep=fFalse;	//no sleeping, wait for UART_RX
    1d06:	10 92 b0 01 	sts	0x01B0, r1
		flagNormalMode=fFalse;
    1d0a:	10 92 b2 01 	sts	0x01B2, r1
		__killCommINT();
    1d0e:	8d e3       	ldi	r24, 0x3D	; 61
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	fc 01       	movw	r30, r24
    1d14:	10 82       	st	Z, r1
    1d16:	8b e6       	ldi	r24, 0x6B	; 107
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	10 82       	st	Z, r1
		//Acknowledge connection, disable INT2_vect
		PrintBone("ACKT");
    1d1e:	8f e7       	ldi	r24, 0x7F	; 127
    1d20:	91 e0       	ldi	r25, 0x01	; 1
    1d22:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
	}	
}
    1d26:	df 91       	pop	r29
    1d28:	cf 91       	pop	r28
    1d2a:	ff 91       	pop	r31
    1d2c:	ef 91       	pop	r30
    1d2e:	bf 91       	pop	r27
    1d30:	af 91       	pop	r26
    1d32:	9f 91       	pop	r25
    1d34:	8f 91       	pop	r24
    1d36:	7f 91       	pop	r23
    1d38:	6f 91       	pop	r22
    1d3a:	5f 91       	pop	r21
    1d3c:	4f 91       	pop	r20
    1d3e:	3f 91       	pop	r19
    1d40:	2f 91       	pop	r18
    1d42:	0f 90       	pop	r0
    1d44:	0f be       	out	0x3f, r0	; 63
    1d46:	0f 90       	pop	r0
    1d48:	1f 90       	pop	r1
    1d4a:	18 95       	reti

00001d4c <__vector_11>:

//RTC Timer.
ISR(TIMER2_OVF_vect){
    1d4c:	1f 92       	push	r1
    1d4e:	0f 92       	push	r0
    1d50:	0f b6       	in	r0, 0x3f	; 63
    1d52:	0f 92       	push	r0
    1d54:	11 24       	eor	r1, r1
    1d56:	2f 93       	push	r18
    1d58:	3f 93       	push	r19
    1d5a:	4f 93       	push	r20
    1d5c:	5f 93       	push	r21
    1d5e:	6f 93       	push	r22
    1d60:	7f 93       	push	r23
    1d62:	8f 93       	push	r24
    1d64:	9f 93       	push	r25
    1d66:	af 93       	push	r26
    1d68:	bf 93       	push	r27
    1d6a:	ef 93       	push	r30
    1d6c:	ff 93       	push	r31
    1d6e:	cf 93       	push	r28
    1d70:	df 93       	push	r29
    1d72:	cd b7       	in	r28, 0x3d	; 61
    1d74:	de b7       	in	r29, 0x3e	; 62
	volatile static int timeOut = 0;
	volatile static int gavrSendTimeout=0, boneReceiveTimeout=0;
	
	currentTime.addSeconds(1);
    1d76:	88 e8       	ldi	r24, 0x88	; 136
    1d78:	91 e0       	ldi	r25, 0x01	; 1
    1d7a:	61 e0       	ldi	r22, 0x01	; 1
    1d7c:	70 e0       	ldi	r23, 0x00	; 0
    1d7e:	0e 94 77 06 	call	0xcee	; 0xcee <_ZN6myTime10addSecondsEi>
	
	//GAVR Transmission Timeout
	if (flagSendingGAVR && gavrSendTimeout <=COMM_TIMEOUT_SEC){gavrSendTimeout++;}
    1d82:	80 91 b5 01 	lds	r24, 0x01B5
    1d86:	88 23       	and	r24, r24
    1d88:	49 f0       	breq	.+18     	; 0x1d9c <__vector_11+0x50>
    1d8a:	80 91 c0 01 	lds	r24, 0x01C0
    1d8e:	90 91 c1 01 	lds	r25, 0x01C1
    1d92:	84 30       	cpi	r24, 0x04	; 4
    1d94:	91 05       	cpc	r25, r1
    1d96:	14 f4       	brge	.+4      	; 0x1d9c <__vector_11+0x50>
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	01 c0       	rjmp	.+2      	; 0x1d9e <__vector_11+0x52>
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	88 23       	and	r24, r24
    1da0:	51 f0       	breq	.+20     	; 0x1db6 <__vector_11+0x6a>
    1da2:	80 91 c0 01 	lds	r24, 0x01C0
    1da6:	90 91 c1 01 	lds	r25, 0x01C1
    1daa:	01 96       	adiw	r24, 0x01	; 1
    1dac:	90 93 c1 01 	sts	0x01C1, r25
    1db0:	80 93 c0 01 	sts	0x01C0, r24
    1db4:	34 c0       	rjmp	.+104    	; 0x1e1e <__vector_11+0xd2>
	else if (flagSendingGAVR && gavrSendTimeout > COMM_TIMEOUT_SEC){flagSendingGAVR=fFalse; gavrSendTimeout=0; __enableCommINT();}
    1db6:	80 91 b5 01 	lds	r24, 0x01B5
    1dba:	88 23       	and	r24, r24
    1dbc:	49 f0       	breq	.+18     	; 0x1dd0 <__vector_11+0x84>
    1dbe:	80 91 c0 01 	lds	r24, 0x01C0
    1dc2:	90 91 c1 01 	lds	r25, 0x01C1
    1dc6:	84 30       	cpi	r24, 0x04	; 4
    1dc8:	91 05       	cpc	r25, r1
    1dca:	14 f0       	brlt	.+4      	; 0x1dd0 <__vector_11+0x84>
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	01 c0       	rjmp	.+2      	; 0x1dd2 <__vector_11+0x86>
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	88 23       	and	r24, r24
    1dd4:	81 f0       	breq	.+32     	; 0x1df6 <__vector_11+0xaa>
    1dd6:	10 92 b5 01 	sts	0x01B5, r1
    1dda:	10 92 c1 01 	sts	0x01C1, r1
    1dde:	10 92 c0 01 	sts	0x01C0, r1
    1de2:	8d e3       	ldi	r24, 0x3D	; 61
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	2d e3       	ldi	r18, 0x3D	; 61
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	f9 01       	movw	r30, r18
    1dec:	20 81       	ld	r18, Z
    1dee:	24 60       	ori	r18, 0x04	; 4
    1df0:	fc 01       	movw	r30, r24
    1df2:	20 83       	st	Z, r18
    1df4:	14 c0       	rjmp	.+40     	; 0x1e1e <__vector_11+0xd2>
	else if (!flagSendingGAVR && gavrSendTimeout > 0){gavrSendTimeout=0;}
    1df6:	80 91 b5 01 	lds	r24, 0x01B5
    1dfa:	88 23       	and	r24, r24
    1dfc:	49 f4       	brne	.+18     	; 0x1e10 <__vector_11+0xc4>
    1dfe:	80 91 c0 01 	lds	r24, 0x01C0
    1e02:	90 91 c1 01 	lds	r25, 0x01C1
    1e06:	18 16       	cp	r1, r24
    1e08:	19 06       	cpc	r1, r25
    1e0a:	14 f4       	brge	.+4      	; 0x1e10 <__vector_11+0xc4>
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	01 c0       	rjmp	.+2      	; 0x1e12 <__vector_11+0xc6>
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	88 23       	and	r24, r24
    1e14:	21 f0       	breq	.+8      	; 0x1e1e <__vector_11+0xd2>
    1e16:	10 92 c1 01 	sts	0x01C1, r1
    1e1a:	10 92 c0 01 	sts	0x01C0, r1
	else;
	
	//BeagleBone Reception Timeout
	if (flagReceivingBone && boneReceiveTimeout <=COMM_TIMEOUT_SEC){boneReceiveTimeout++;}
    1e1e:	80 91 b1 01 	lds	r24, 0x01B1
    1e22:	88 23       	and	r24, r24
    1e24:	49 f0       	breq	.+18     	; 0x1e38 <__vector_11+0xec>
    1e26:	80 91 c2 01 	lds	r24, 0x01C2
    1e2a:	90 91 c3 01 	lds	r25, 0x01C3
    1e2e:	84 30       	cpi	r24, 0x04	; 4
    1e30:	91 05       	cpc	r25, r1
    1e32:	14 f4       	brge	.+4      	; 0x1e38 <__vector_11+0xec>
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	01 c0       	rjmp	.+2      	; 0x1e3a <__vector_11+0xee>
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	88 23       	and	r24, r24
    1e3c:	51 f0       	breq	.+20     	; 0x1e52 <__vector_11+0x106>
    1e3e:	80 91 c2 01 	lds	r24, 0x01C2
    1e42:	90 91 c3 01 	lds	r25, 0x01C3
    1e46:	01 96       	adiw	r24, 0x01	; 1
    1e48:	90 93 c3 01 	sts	0x01C3, r25
    1e4c:	80 93 c2 01 	sts	0x01C2, r24
    1e50:	34 c0       	rjmp	.+104    	; 0x1eba <__vector_11+0x16e>
	else if (flagReceivingBone && boneReceiveTimeout > COMM_TIMEOUT_SEC){flagReceivingBone=fFalse; boneReceiveTimeout=0; __enableCommINT();}
    1e52:	80 91 b1 01 	lds	r24, 0x01B1
    1e56:	88 23       	and	r24, r24
    1e58:	49 f0       	breq	.+18     	; 0x1e6c <__vector_11+0x120>
    1e5a:	80 91 c2 01 	lds	r24, 0x01C2
    1e5e:	90 91 c3 01 	lds	r25, 0x01C3
    1e62:	84 30       	cpi	r24, 0x04	; 4
    1e64:	91 05       	cpc	r25, r1
    1e66:	14 f0       	brlt	.+4      	; 0x1e6c <__vector_11+0x120>
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	01 c0       	rjmp	.+2      	; 0x1e6e <__vector_11+0x122>
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	88 23       	and	r24, r24
    1e70:	81 f0       	breq	.+32     	; 0x1e92 <__vector_11+0x146>
    1e72:	10 92 b1 01 	sts	0x01B1, r1
    1e76:	10 92 c3 01 	sts	0x01C3, r1
    1e7a:	10 92 c2 01 	sts	0x01C2, r1
    1e7e:	8d e3       	ldi	r24, 0x3D	; 61
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	2d e3       	ldi	r18, 0x3D	; 61
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	f9 01       	movw	r30, r18
    1e88:	20 81       	ld	r18, Z
    1e8a:	24 60       	ori	r18, 0x04	; 4
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	20 83       	st	Z, r18
    1e90:	14 c0       	rjmp	.+40     	; 0x1eba <__vector_11+0x16e>
	else if (!flagReceivingBone && boneReceiveTimeout > 0){boneReceiveTimeout=0;}
    1e92:	80 91 b1 01 	lds	r24, 0x01B1
    1e96:	88 23       	and	r24, r24
    1e98:	49 f4       	brne	.+18     	; 0x1eac <__vector_11+0x160>
    1e9a:	80 91 c2 01 	lds	r24, 0x01C2
    1e9e:	90 91 c3 01 	lds	r25, 0x01C3
    1ea2:	18 16       	cp	r1, r24
    1ea4:	19 06       	cpc	r1, r25
    1ea6:	14 f4       	brge	.+4      	; 0x1eac <__vector_11+0x160>
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	01 c0       	rjmp	.+2      	; 0x1eae <__vector_11+0x162>
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	88 23       	and	r24, r24
    1eb0:	21 f0       	breq	.+8      	; 0x1eba <__vector_11+0x16e>
    1eb2:	10 92 c3 01 	sts	0x01C3, r1
    1eb6:	10 92 c2 01 	sts	0x01C2, r1
	else;
	
	//*********This is outdated*********
	if ((flagReceivingBone == fTrue || flagGoToSleep == fFalse) && !flagNewShutdown && !restart){ //if waiting for a character in Receive0() or in main program without sleep
    1eba:	80 91 b1 01 	lds	r24, 0x01B1
    1ebe:	81 30       	cpi	r24, 0x01	; 1
    1ec0:	21 f0       	breq	.+8      	; 0x1eca <__vector_11+0x17e>
    1ec2:	80 91 b0 01 	lds	r24, 0x01B0
    1ec6:	88 23       	and	r24, r24
    1ec8:	91 f5       	brne	.+100    	; 0x1f2e <__vector_11+0x1e2>
    1eca:	80 91 ba 01 	lds	r24, 0x01BA
    1ece:	88 23       	and	r24, r24
    1ed0:	71 f5       	brne	.+92     	; 0x1f2e <__vector_11+0x1e2>
    1ed2:	80 91 be 01 	lds	r24, 0x01BE
    1ed6:	88 23       	and	r24, r24
    1ed8:	51 f5       	brne	.+84     	; 0x1f2e <__vector_11+0x1e2>
		timeOut++;
    1eda:	80 91 c4 01 	lds	r24, 0x01C4
    1ede:	90 91 c5 01 	lds	r25, 0x01C5
    1ee2:	01 96       	adiw	r24, 0x01	; 1
    1ee4:	90 93 c5 01 	sts	0x01C5, r25
    1ee8:	80 93 c4 01 	sts	0x01C4, r24
		if (timeOut >= 6){
    1eec:	80 91 c4 01 	lds	r24, 0x01C4
    1ef0:	90 91 c5 01 	lds	r25, 0x01C5
    1ef4:	21 e0       	ldi	r18, 0x01	; 1
    1ef6:	86 30       	cpi	r24, 0x06	; 6
    1ef8:	91 05       	cpc	r25, r1
    1efa:	0c f4       	brge	.+2      	; 0x1efe <__vector_11+0x1b2>
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	22 23       	and	r18, r18
    1f00:	29 f1       	breq	.+74     	; 0x1f4c <__vector_11+0x200>
			__enableCommINT();
    1f02:	8d e3       	ldi	r24, 0x3D	; 61
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	2d e3       	ldi	r18, 0x3D	; 61
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	f9 01       	movw	r30, r18
    1f0c:	20 81       	ld	r18, Z
    1f0e:	24 60       	ori	r18, 0x04	; 4
    1f10:	fc 01       	movw	r30, r24
    1f12:	20 83       	st	Z, r18
			flagReceivingBone = fFalse;
    1f14:	10 92 b1 01 	sts	0x01B1, r1
			flagGoToSleep = fTrue;
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	80 93 b0 01 	sts	0x01B0, r24
			flagNormalMode=fTrue;
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	80 93 b2 01 	sts	0x01B2, r24
			timeOut = 0;
    1f24:	10 92 c5 01 	sts	0x01C5, r1
    1f28:	10 92 c4 01 	sts	0x01C4, r1
	else;
	
	//*********This is outdated*********
	if ((flagReceivingBone == fTrue || flagGoToSleep == fFalse) && !flagNewShutdown && !restart){ //if waiting for a character in Receive0() or in main program without sleep
		timeOut++;
		if (timeOut >= 6){
    1f2c:	0f c0       	rjmp	.+30     	; 0x1f4c <__vector_11+0x200>
			flagReceivingBone = fFalse;
			flagGoToSleep = fTrue;
			flagNormalMode=fTrue;
			timeOut = 0;
		}
	} else if (timeOut > 0){
    1f2e:	80 91 c4 01 	lds	r24, 0x01C4
    1f32:	90 91 c5 01 	lds	r25, 0x01C5
    1f36:	21 e0       	ldi	r18, 0x01	; 1
    1f38:	18 16       	cp	r1, r24
    1f3a:	19 06       	cpc	r1, r25
    1f3c:	0c f0       	brlt	.+2      	; 0x1f40 <__vector_11+0x1f4>
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	22 23       	and	r18, r18
    1f42:	21 f0       	breq	.+8      	; 0x1f4c <__vector_11+0x200>
		timeOut = 0;
    1f44:	10 92 c5 01 	sts	0x01C5, r1
    1f48:	10 92 c4 01 	sts	0x01C4, r1
	} else;

}
    1f4c:	df 91       	pop	r29
    1f4e:	cf 91       	pop	r28
    1f50:	ff 91       	pop	r31
    1f52:	ef 91       	pop	r30
    1f54:	bf 91       	pop	r27
    1f56:	af 91       	pop	r26
    1f58:	9f 91       	pop	r25
    1f5a:	8f 91       	pop	r24
    1f5c:	7f 91       	pop	r23
    1f5e:	6f 91       	pop	r22
    1f60:	5f 91       	pop	r21
    1f62:	4f 91       	pop	r20
    1f64:	3f 91       	pop	r19
    1f66:	2f 91       	pop	r18
    1f68:	0f 90       	pop	r0
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	0f 90       	pop	r0
    1f6e:	1f 90       	pop	r1
    1f70:	18 95       	reti

00001f72 <__vector_20>:

//UART Receive from BeagleBone
ISR(USART0_RX_vect){
    1f72:	1f 92       	push	r1
    1f74:	0f 92       	push	r0
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	0f 92       	push	r0
    1f7a:	11 24       	eor	r1, r1
    1f7c:	2f 93       	push	r18
    1f7e:	3f 93       	push	r19
    1f80:	8f 93       	push	r24
    1f82:	9f 93       	push	r25
    1f84:	ef 93       	push	r30
    1f86:	ff 93       	push	r31
    1f88:	cf 93       	push	r28
    1f8a:	df 93       	push	r29
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
	UCSR0B &= ~(1 << RXCIE0);
    1f90:	81 ec       	ldi	r24, 0xC1	; 193
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	21 ec       	ldi	r18, 0xC1	; 193
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	f9 01       	movw	r30, r18
    1f9a:	20 81       	ld	r18, Z
    1f9c:	2f 77       	andi	r18, 0x7F	; 127
    1f9e:	fc 01       	movw	r30, r24
    1fa0:	20 83       	st	Z, r18
	__killCommINT();				//make sure all interrupts are disabled that could cripple protocol
    1fa2:	8d e3       	ldi	r24, 0x3D	; 61
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	10 82       	st	Z, r1
    1faa:	8b e6       	ldi	r24, 0x6B	; 107
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	fc 01       	movw	r30, r24
    1fb0:	10 82       	st	Z, r1
	flagReceivingBone=fTrue;
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	80 93 b1 01 	sts	0x01B1, r24
}
    1fb8:	df 91       	pop	r29
    1fba:	cf 91       	pop	r28
    1fbc:	ff 91       	pop	r31
    1fbe:	ef 91       	pop	r30
    1fc0:	9f 91       	pop	r25
    1fc2:	8f 91       	pop	r24
    1fc4:	3f 91       	pop	r19
    1fc6:	2f 91       	pop	r18
    1fc8:	0f 90       	pop	r0
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	0f 90       	pop	r0
    1fce:	1f 90       	pop	r1
    1fd0:	18 95       	reti

00001fd2 <__vector_28>:

ISR(USART1_RX_vect){
    1fd2:	1f 92       	push	r1
    1fd4:	0f 92       	push	r0
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	0f 92       	push	r0
    1fda:	11 24       	eor	r1, r1
    1fdc:	2f 93       	push	r18
    1fde:	3f 93       	push	r19
    1fe0:	8f 93       	push	r24
    1fe2:	9f 93       	push	r25
    1fe4:	ef 93       	push	r30
    1fe6:	ff 93       	push	r31
    1fe8:	cf 93       	push	r28
    1fea:	df 93       	push	r29
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
	UCSR1B &= ~(1 <<RXCIE1);	//disable interrupt
    1ff0:	89 ec       	ldi	r24, 0xC9	; 201
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	29 ec       	ldi	r18, 0xC9	; 201
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	f9 01       	movw	r30, r18
    1ffa:	20 81       	ld	r18, Z
    1ffc:	2f 77       	andi	r18, 0x7F	; 127
    1ffe:	fc 01       	movw	r30, r24
    2000:	20 83       	st	Z, r18
	__killCommINT();
    2002:	8d e3       	ldi	r24, 0x3D	; 61
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	fc 01       	movw	r30, r24
    2008:	10 82       	st	Z, r1
    200a:	8b e6       	ldi	r24, 0x6B	; 107
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	fc 01       	movw	r30, r24
    2010:	10 82       	st	Z, r1
	//flagReceivingGAVR=fTrue;
}
    2012:	df 91       	pop	r29
    2014:	cf 91       	pop	r28
    2016:	ff 91       	pop	r31
    2018:	ef 91       	pop	r30
    201a:	9f 91       	pop	r25
    201c:	8f 91       	pop	r24
    201e:	3f 91       	pop	r19
    2020:	2f 91       	pop	r18
    2022:	0f 90       	pop	r0
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	0f 90       	pop	r0
    2028:	1f 90       	pop	r1
    202a:	18 95       	reti

0000202c <main>:

/*--------------------------END-Interrupt Service Routines--------------------------------------------------------------------------------*/
/*--------------------------START-Main Program--------------------------------------------------------------------------------------------*/

int main(void)
{
    202c:	cf 93       	push	r28
    202e:	df 93       	push	r29
    2030:	00 d0       	rcall	.+0      	; 0x2032 <main+0x6>
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
	//Setup
	DeviceInit();
    2036:	0e 94 30 11 	call	0x2260	; 0x2260 <_Z10DeviceInitv>
	AppInit(MYUBRR);
    203a:	81 e8       	ldi	r24, 0x81	; 129
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	0e 94 57 11 	call	0x22ae	; 0x22ae <_Z7AppInitj>
	EnableRTCTimer();
    2042:	0e 94 42 12 	call	0x2484	; 0x2484 <_Z14EnableRTCTimerv>
	getDateTime_eeprom(fTrue,fTrue);
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	61 e0       	ldi	r22, 0x01	; 1
    204a:	0e 94 8e 07 	call	0xf1c	; 0xf1c <_Z18getDateTime_eepromhh>
	sei();
    204e:	78 94       	sei
	//Prep/make sure power/temp is good
	GetTemp();
    2050:	0e 94 03 14 	call	0x2806	; 0x2806 <_Z7GetTempv>
	//flagGoodTemp=fTrue;
	TakeADC();
    2054:	0e 94 66 13 	call	0x26cc	; 0x26cc <_Z7TakeADCv>
	if (flagGoodVolts && flagGoodTemp){PowerUp(POWER_UP_INTERVAL);flagFreshStart=fTrue;}
    2058:	80 91 bd 01 	lds	r24, 0x01BD
    205c:	88 23       	and	r24, r24
    205e:	61 f0       	breq	.+24     	; 0x2078 <main+0x4c>
    2060:	80 91 bc 01 	lds	r24, 0x01BC
    2064:	88 23       	and	r24, r24
    2066:	41 f0       	breq	.+16     	; 0x2078 <main+0x4c>
    2068:	88 ee       	ldi	r24, 0xE8	; 232
    206a:	93 e0       	ldi	r25, 0x03	; 3
    206c:	0e 94 8b 14 	call	0x2916	; 0x2916 <_Z7PowerUpj>
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	80 93 bf 01 	sts	0x01BF, r24
    2076:	07 c0       	rjmp	.+14     	; 0x2086 <main+0x5a>
	else {flagNormalMode=fTrue;flagFreshStart=fFalse;}
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	80 93 b2 01 	sts	0x01B2, r24
    207e:	10 92 bf 01 	sts	0x01BF, r1
    2082:	01 c0       	rjmp	.+2      	; 0x2086 <main+0x5a>
		
	//main programming loop
	while(fTrue)
    2084:	00 00       	nop
	{				
		//If receiving UART string, go get rest of it.
		if (flagReceivingBone){
    2086:	80 91 b1 01 	lds	r24, 0x01B1
    208a:	88 23       	and	r24, r24
    208c:	89 f0       	breq	.+34     	; 0x20b0 <main+0x84>
			ReceiveBone();
    208e:	0e 94 b9 0b 	call	0x1772	; 0x1772 <_Z11ReceiveBonev>
			__enableCommINT();
    2092:	8d e3       	ldi	r24, 0x3D	; 61
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	2d e3       	ldi	r18, 0x3D	; 61
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	f9 01       	movw	r30, r18
    209c:	20 81       	ld	r18, Z
    209e:	24 60       	ori	r18, 0x04	; 4
    20a0:	fc 01       	movw	r30, r24
    20a2:	20 83       	st	Z, r18
			flagGoToSleep=fTrue;
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	80 93 b0 01 	sts	0x01B0, r24
			flagNormalMode=fTrue;
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	80 93 b2 01 	sts	0x01B2, r24
		}
	
		//Communication with GAVR. Either updating the date/time on it or asking for date and time. The interal send machine deals with the flags.
		if (flagUpdateGAVRTime || flagUpdateGAVRDate || flagUserDate || flagUserTime){
    20b0:	80 91 b3 01 	lds	r24, 0x01B3
    20b4:	88 23       	and	r24, r24
    20b6:	61 f4       	brne	.+24     	; 0x20d0 <main+0xa4>
    20b8:	80 91 b4 01 	lds	r24, 0x01B4
    20bc:	88 23       	and	r24, r24
    20be:	41 f4       	brne	.+16     	; 0x20d0 <main+0xa4>
    20c0:	80 91 b6 01 	lds	r24, 0x01B6
    20c4:	88 23       	and	r24, r24
    20c6:	21 f4       	brne	.+8      	; 0x20d0 <main+0xa4>
    20c8:	80 91 b7 01 	lds	r24, 0x01B7
    20cc:	88 23       	and	r24, r24
    20ce:	99 f0       	breq	.+38     	; 0x20f6 <main+0xca>
			__killCommINT();
    20d0:	8d e3       	ldi	r24, 0x3D	; 61
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	fc 01       	movw	r30, r24
    20d6:	10 82       	st	Z, r1
    20d8:	8b e6       	ldi	r24, 0x6B	; 107
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	fc 01       	movw	r30, r24
    20de:	10 82       	st	Z, r1
			sendGAVR();
    20e0:	0e 94 38 09 	call	0x1270	; 0x1270 <_Z8sendGAVRv>
			__enableCommINT();
    20e4:	8d e3       	ldi	r24, 0x3D	; 61
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	2d e3       	ldi	r18, 0x3D	; 61
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	f9 01       	movw	r30, r18
    20ee:	20 81       	ld	r18, Z
    20f0:	24 60       	ori	r18, 0x04	; 4
    20f2:	fc 01       	movw	r30, r24
    20f4:	20 83       	st	Z, r18
		}

		//When to save to EEPROM. Saves time on lower half of the hour, saves data and time on lower half-hour of midday.
		if (flagNormalMode){
    20f6:	80 91 b2 01 	lds	r24, 0x01B2
    20fa:	88 23       	and	r24, r24
    20fc:	49 f1       	breq	.+82     	; 0x2150 <main+0x124>
			if (currentTime.getMinutes()%30 == 0){
    20fe:	88 e8       	ldi	r24, 0x88	; 136
    2100:	91 e0       	ldi	r25, 0x01	; 1
    2102:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6myTime10getMinutesEv>
    2106:	9e e1       	ldi	r25, 0x1E	; 30
    2108:	69 2f       	mov	r22, r25
    210a:	0e 94 5f 15 	call	0x2abe	; 0x2abe <__udivmodqi4>
    210e:	89 2f       	mov	r24, r25
    2110:	98 2f       	mov	r25, r24
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	99 23       	and	r25, r25
    2116:	09 f0       	breq	.+2      	; 0x211a <main+0xee>
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	88 23       	and	r24, r24
    211c:	c9 f0       	breq	.+50     	; 0x2150 <main+0x124>
				if (currentTime.getHours()%12 == 0){
    211e:	88 e8       	ldi	r24, 0x88	; 136
    2120:	91 e0       	ldi	r25, 0x01	; 1
    2122:	0e 94 bb 04 	call	0x976	; 0x976 <_ZN6myTime8getHoursEv>
    2126:	9c e0       	ldi	r25, 0x0C	; 12
    2128:	69 2f       	mov	r22, r25
    212a:	0e 94 5f 15 	call	0x2abe	; 0x2abe <__udivmodqi4>
    212e:	89 2f       	mov	r24, r25
    2130:	98 2f       	mov	r25, r24
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	99 23       	and	r25, r25
    2136:	09 f0       	breq	.+2      	; 0x213a <main+0x10e>
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	88 23       	and	r24, r24
    213c:	29 f0       	breq	.+10     	; 0x2148 <main+0x11c>
					saveDateTime_eeprom(fTrue,fTrue);
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	61 e0       	ldi	r22, 0x01	; 1
    2142:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
    2146:	04 c0       	rjmp	.+8      	; 0x2150 <main+0x124>
				} else {
					saveDateTime_eeprom(fTrue,fFalse);
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	60 e0       	ldi	r22, 0x00	; 0
    214c:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
				}	
			}						
		}
		
		//Take ADC reading to check battery level, temp to check board temperature.
		if (flagNormalMode){
    2150:	80 91 b2 01 	lds	r24, 0x01B2
    2154:	88 23       	and	r24, r24
    2156:	21 f1       	breq	.+72     	; 0x21a0 <main+0x174>
			TakeADC();
    2158:	0e 94 66 13 	call	0x26cc	; 0x26cc <_Z7TakeADCv>
			GetTemp();
    215c:	0e 94 03 14 	call	0x2806	; 0x2806 <_Z7GetTempv>
			//If both are good & shutodwn is low, keep it low. If shutdown is high, pull low and enable restart
			if (flagGoodVolts && flagGoodTemp){
    2160:	80 91 bd 01 	lds	r24, 0x01BD
    2164:	88 23       	and	r24, r24
    2166:	91 f0       	breq	.+36     	; 0x218c <main+0x160>
    2168:	80 91 bc 01 	lds	r24, 0x01BC
    216c:	88 23       	and	r24, r24
    216e:	71 f0       	breq	.+28     	; 0x218c <main+0x160>
				PowerUp(POWER_UP_INTERVAL);
    2170:	88 ee       	ldi	r24, 0xE8	; 232
    2172:	93 e0       	ldi	r25, 0x03	; 3
    2174:	0e 94 8b 14 	call	0x2916	; 0x2916 <_Z7PowerUpj>
				if( flagShutdown == fTrue){restart = fTrue;}
    2178:	80 91 bb 01 	lds	r24, 0x01BB
    217c:	81 30       	cpi	r24, 0x01	; 1
    217e:	19 f4       	brne	.+6      	; 0x2186 <main+0x15a>
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	80 93 be 01 	sts	0x01BE, r24
				flagShutdown = fFalse;
    2186:	10 92 bb 01 	sts	0x01BB, r1
    218a:	0a c0       	rjmp	.+20     	; 0x21a0 <main+0x174>
			//If one is bad and shutdown is low, pull high as well as pull new shutdown high to indicate imminent power kill
			} else {
				if (flagShutdown == fFalse){
    218c:	80 91 bb 01 	lds	r24, 0x01BB
    2190:	88 23       	and	r24, r24
    2192:	19 f4       	brne	.+6      	; 0x219a <main+0x16e>
					flagNewShutdown = fTrue;
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	80 93 ba 01 	sts	0x01BA, r24
				}
				flagShutdown = fTrue;
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	80 93 bb 01 	sts	0x01BB, r24
			}
		}			
		
		//About to shutdown, save EEPROM
		if (flagNewShutdown){
    21a0:	80 91 ba 01 	lds	r24, 0x01BA
    21a4:	88 23       	and	r24, r24
    21a6:	a9 f0       	breq	.+42     	; 0x21d2 <main+0x1a6>
			//Make sure nothing messes with the routine that we care about
			__killCommINT();
    21a8:	8d e3       	ldi	r24, 0x3D	; 61
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	fc 01       	movw	r30, r24
    21ae:	10 82       	st	Z, r1
    21b0:	8b e6       	ldi	r24, 0x6B	; 107
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	fc 01       	movw	r30, r24
    21b6:	10 82       	st	Z, r1
			flagGoToSleep = fTrue;
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	80 93 b0 01 	sts	0x01B0, r24
			flagReceivingBone = fFalse;
    21be:	10 92 b1 01 	sts	0x01B1, r1
			saveDateTime_eeprom(fTrue,fTrue);
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	61 e0       	ldi	r22, 0x01	; 1
    21c6:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
			
			//Kill power--Alert comes in that function
			PowerDown();
    21ca:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <_Z9PowerDownv>
			flagNewShutdown = fFalse;
    21ce:	10 92 ba 01 	sts	0x01BA, r1
		}
		
		//If Restart, broadcast date and time to BeagleBone and other AVR
		if (restart){
    21d2:	80 91 be 01 	lds	r24, 0x01BE
    21d6:	88 23       	and	r24, r24
    21d8:	69 f1       	breq	.+90     	; 0x2234 <main+0x208>
			__enableCommINT();	//enable BONE interrupt. Will come out with newest time. Give it 10 seconds to kill
    21da:	8d e3       	ldi	r24, 0x3D	; 61
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	2d e3       	ldi	r18, 0x3D	; 61
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	f9 01       	movw	r30, r18
    21e4:	20 81       	ld	r18, Z
    21e6:	24 60       	ori	r18, 0x04	; 4
    21e8:	fc 01       	movw	r30, r24
    21ea:	20 83       	st	Z, r18
			PowerUp(POWER_UP_INTERVAL);
    21ec:	88 ee       	ldi	r24, 0xE8	; 232
    21ee:	93 e0       	ldi	r25, 0x03	; 3
    21f0:	0e 94 8b 14 	call	0x2916	; 0x2916 <_Z7PowerUpj>
			//Check to see if pins are ready. Use timeout of 10 seconds for pins to come high.
			int waitTime = 0;
    21f4:	1a 82       	std	Y+2, r1	; 0x02
    21f6:	19 82       	std	Y+1, r1	; 0x01
			while (waitTime < 3 && restart){waitTime++; Wait_sec(1);}
    21f8:	09 c0       	rjmp	.+18     	; 0x220c <main+0x1e0>
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	9a 81       	ldd	r25, Y+2	; 0x02
    21fe:	01 96       	adiw	r24, 0x01	; 1
    2200:	9a 83       	std	Y+2, r25	; 0x02
    2202:	89 83       	std	Y+1, r24	; 0x01
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	0e 94 b1 12 	call	0x2562	; 0x2562 <_Z8Wait_seci>
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	9a 81       	ldd	r25, Y+2	; 0x02
    2210:	83 30       	cpi	r24, 0x03	; 3
    2212:	91 05       	cpc	r25, r1
    2214:	34 f4       	brge	.+12     	; 0x2222 <main+0x1f6>
    2216:	80 91 be 01 	lds	r24, 0x01BE
    221a:	88 23       	and	r24, r24
    221c:	11 f0       	breq	.+4      	; 0x2222 <main+0x1f6>
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	01 c0       	rjmp	.+2      	; 0x2224 <main+0x1f8>
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	88 23       	and	r24, r24
    2226:	49 f7       	brne	.-46     	; 0x21fa <main+0x1ce>
			flagUpdateGAVRDate=fTrue;
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	80 93 b4 01 	sts	0x01B4, r24
			flagUpdateGAVRTime=fTrue;
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	80 93 b3 01 	sts	0x01B3, r24
			//If we get to here, the flag is not reset or there was a timeout. If timout, goes to sleep and on the next cycle it's awake it will try and 
			//get an updated date and time from the BeagleBone. Always update GAVR.			
		}		
		
		//If it's time to go to sleep, go to sleep. INT0 or TIM2_overflow will wake it up.
		if (flagGoToSleep){GoToSleep(flagShutdown);}
    2234:	80 91 b0 01 	lds	r24, 0x01B0
    2238:	88 23       	and	r24, r24
    223a:	21 f0       	breq	.+8      	; 0x2244 <main+0x218>
    223c:	80 91 bb 01 	lds	r24, 0x01BB
    2240:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <_Z9GoToSleeph>
		
		//Add logic for an invalid date and time somehow getting in here
		if (flagInvalidDateTime){
    2244:	80 91 b8 01 	lds	r24, 0x01B8
    2248:	88 23       	and	r24, r24
    224a:	09 f4       	brne	.+2      	; 0x224e <main+0x222>
    224c:	1b cf       	rjmp	.-458    	; 0x2084 <main+0x58>
			flagInvalidDateTime=fFalse;
    224e:	10 92 b8 01 	sts	0x01B8, r1
			flagUserTime=fTrue;
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	80 93 b7 01 	sts	0x01B7, r24
			flagUserDate=fTrue;	//ask user to update/confirm both date and time
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	80 93 b6 01 	sts	0x01B6, r24
	TakeADC();
	if (flagGoodVolts && flagGoodTemp){PowerUp(POWER_UP_INTERVAL);flagFreshStart=fTrue;}
	else {flagNormalMode=fTrue;flagFreshStart=fFalse;}
		
	//main programming loop
	while(fTrue)
    225e:	12 cf       	rjmp	.-476    	; 0x2084 <main+0x58>

00002260 <_Z10DeviceInitv>:

/*--------------------------END-Main Program-------------------------------------------------------------------------------------*/
/*--------------------------START-Public Funtions--------------------------------------------------------------------------------*/

/*************************************************************************************************************/
void DeviceInit(){
    2260:	cf 93       	push	r28
    2262:	df 93       	push	r29
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
	//Set all ports to input with no pull
	DDRA = 0;
    2268:	81 e2       	ldi	r24, 0x21	; 33
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	fc 01       	movw	r30, r24
    226e:	10 82       	st	Z, r1
	DDRB = 0;
    2270:	84 e2       	ldi	r24, 0x24	; 36
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	fc 01       	movw	r30, r24
    2276:	10 82       	st	Z, r1
	DDRC = 0;
    2278:	87 e2       	ldi	r24, 0x27	; 39
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	fc 01       	movw	r30, r24
    227e:	10 82       	st	Z, r1
	DDRD = 0;
    2280:	8a e2       	ldi	r24, 0x2A	; 42
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	fc 01       	movw	r30, r24
    2286:	10 82       	st	Z, r1
	
	PORTA = 0;
    2288:	82 e2       	ldi	r24, 0x22	; 34
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	fc 01       	movw	r30, r24
    228e:	10 82       	st	Z, r1
	PORTB = 0;
    2290:	85 e2       	ldi	r24, 0x25	; 37
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	fc 01       	movw	r30, r24
    2296:	10 82       	st	Z, r1
	PORTC = 0;
    2298:	88 e2       	ldi	r24, 0x28	; 40
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	fc 01       	movw	r30, r24
    229e:	10 82       	st	Z, r1
	PORTD = 0;
    22a0:	8b e2       	ldi	r24, 0x2B	; 43
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	fc 01       	movw	r30, r24
    22a6:	10 82       	st	Z, r1
}
    22a8:	df 91       	pop	r29
    22aa:	cf 91       	pop	r28
    22ac:	08 95       	ret

000022ae <_Z7AppInitj>:
/*************************************************************************************************************/
void AppInit(unsigned int ubrr){
    22ae:	cf 93       	push	r28
    22b0:	df 93       	push	r29
    22b2:	00 d0       	rcall	.+0      	; 0x22b4 <_Z7AppInitj+0x6>
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	9a 83       	std	Y+2, r25	; 0x02
    22ba:	89 83       	std	Y+1, r24	; 0x01
	
	//Set BAUD rate of UART
	UBRR0L = ubrr;   												//set low byte of baud rate
    22bc:	84 ec       	ldi	r24, 0xC4	; 196
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	29 81       	ldd	r18, Y+1	; 0x01
    22c2:	fc 01       	movw	r30, r24
    22c4:	20 83       	st	Z, r18
	UBRR0H = (ubrr >> 8);											//set high byte of baud rate
    22c6:	85 ec       	ldi	r24, 0xC5	; 197
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	29 81       	ldd	r18, Y+1	; 0x01
    22cc:	3a 81       	ldd	r19, Y+2	; 0x02
    22ce:	23 2f       	mov	r18, r19
    22d0:	33 27       	eor	r19, r19
    22d2:	fc 01       	movw	r30, r24
    22d4:	20 83       	st	Z, r18
	//UCSR0A |= (1 << U2X0);										//set high speed baud clock, in ASYNC mode
	
	//Enable UART_TX0 and UART_RX0
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);
    22d6:	81 ec       	ldi	r24, 0xC1	; 193
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	28 e1       	ldi	r18, 0x18	; 24
    22dc:	fc 01       	movw	r30, r24
    22de:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);							//Asynchronous; 8 data bits, no parity
    22e0:	82 ec       	ldi	r24, 0xC2	; 194
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	26 e0       	ldi	r18, 0x06	; 6
    22e6:	fc 01       	movw	r30, r24
    22e8:	20 83       	st	Z, r18
	//UCSR0B |= (1 << RXCIE0);
	
	//Disable power to all peripherals
	PRR0 |= (1 << PRTWI)|(1 << PRTIM2)|(1 << PRTIM0)|(1 << PRUSART1)|(1 << PRTIM1)|(1 << PRADC)|(1 << PRSPI);  //Turn EVERYTHING off initially except USART0(UART0)
    22ea:	84 e6       	ldi	r24, 0x64	; 100
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	24 e6       	ldi	r18, 0x64	; 100
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	f9 01       	movw	r30, r18
    22f4:	20 81       	ld	r18, Z
    22f6:	2d 6f       	ori	r18, 0xFD	; 253
    22f8:	fc 01       	movw	r30, r24
    22fa:	20 83       	st	Z, r18

	//Enable status LEDs
	ddrSLEEPled |= (1 << bnSLEEPled);
    22fc:	8a e2       	ldi	r24, 0x2A	; 42
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	2a e2       	ldi	r18, 0x2A	; 42
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	f9 01       	movw	r30, r18
    2306:	20 81       	ld	r18, Z
    2308:	20 68       	ori	r18, 0x80	; 128
    230a:	fc 01       	movw	r30, r24
    230c:	20 83       	st	Z, r18
	ddrSTATUSled |= (1 << bnSTATUSled);
    230e:	87 e2       	ldi	r24, 0x27	; 39
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	27 e2       	ldi	r18, 0x27	; 39
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	f9 01       	movw	r30, r18
    2318:	20 81       	ld	r18, Z
    231a:	24 60       	ori	r18, 0x04	; 4
    231c:	fc 01       	movw	r30, r24
    231e:	20 83       	st	Z, r18
	prtSLEEPled &= ~(1 << bnSLEEPled);	//turn off initially
    2320:	8b e2       	ldi	r24, 0x2B	; 43
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	2b e2       	ldi	r18, 0x2B	; 43
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	f9 01       	movw	r30, r18
    232a:	20 81       	ld	r18, Z
    232c:	2f 77       	andi	r18, 0x7F	; 127
    232e:	fc 01       	movw	r30, r24
    2330:	20 83       	st	Z, r18
	prtSTATUSled |= (1 << bnSTATUSled);	//turn on initially
    2332:	88 e2       	ldi	r24, 0x28	; 40
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	28 e2       	ldi	r18, 0x28	; 40
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	f9 01       	movw	r30, r18
    233c:	20 81       	ld	r18, Z
    233e:	24 60       	ori	r18, 0x04	; 4
    2340:	fc 01       	movw	r30, r24
    2342:	20 83       	st	Z, r18
	
	//Enable BB and GAVR alert pins...outputs, no pull by default.
	ddrBONEINT |= (1 << bnBBint);
    2344:	81 e2       	ldi	r24, 0x21	; 33
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	21 e2       	ldi	r18, 0x21	; 33
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	f9 01       	movw	r30, r18
    234e:	20 81       	ld	r18, Z
    2350:	24 60       	ori	r18, 0x04	; 4
    2352:	fc 01       	movw	r30, r24
    2354:	20 83       	st	Z, r18
	ddrGAVRINT |= (1 << bnGAVRint);
    2356:	84 e2       	ldi	r24, 0x24	; 36
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	24 e2       	ldi	r18, 0x24	; 36
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	f9 01       	movw	r30, r18
    2360:	20 81       	ld	r18, Z
    2362:	28 60       	ori	r18, 0x08	; 8
    2364:	fc 01       	movw	r30, r24
    2366:	20 83       	st	Z, r18
	
	//Enable GAVR interrupt pin, our PB3, it's INT2
	ddrGAVRINT |= (1 << bnGAVRINT);
    2368:	84 e2       	ldi	r24, 0x24	; 36
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	24 e2       	ldi	r18, 0x24	; 36
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	f9 01       	movw	r30, r18
    2372:	20 81       	ld	r18, Z
    2374:	28 60       	ori	r18, 0x08	; 8
    2376:	fc 01       	movw	r30, r24
    2378:	20 83       	st	Z, r18
	prtGAVRINT &=  ~(1 << bnGAVRINT);	//set low at first
    237a:	85 e2       	ldi	r24, 0x25	; 37
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	25 e2       	ldi	r18, 0x25	; 37
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	f9 01       	movw	r30, r18
    2384:	20 81       	ld	r18, Z
    2386:	27 7f       	andi	r18, 0xF7	; 247
    2388:	fc 01       	movw	r30, r24
    238a:	20 83       	st	Z, r18
	
	//Enable enable signals
	ddrENABLE |= (1 << bnGPSen)|(1 << bnGAVRen)|(1 << bnLCDen)|(1 << bnBBen);
    238c:	81 e2       	ldi	r24, 0x21	; 33
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	21 e2       	ldi	r18, 0x21	; 33
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	f9 01       	movw	r30, r18
    2396:	20 81       	ld	r18, Z
    2398:	20 6f       	ori	r18, 0xF0	; 240
    239a:	fc 01       	movw	r30, r24
    239c:	20 83       	st	Z, r18
	ddrTEMPen |= (1 << bnTEMPen);
    239e:	84 e2       	ldi	r24, 0x24	; 36
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	24 e2       	ldi	r18, 0x24	; 36
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	f9 01       	movw	r30, r18
    23a8:	20 81       	ld	r18, Z
    23aa:	21 60       	ori	r18, 0x01	; 1
    23ac:	fc 01       	movw	r30, r24
    23ae:	20 83       	st	Z, r18
	ddrMAINen |= (1 << bnMAINen);
    23b0:	87 e2       	ldi	r24, 0x27	; 39
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	27 e2       	ldi	r18, 0x27	; 39
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	f9 01       	movw	r30, r18
    23ba:	20 81       	ld	r18, Z
    23bc:	21 60       	ori	r18, 0x01	; 1
    23be:	fc 01       	movw	r30, r24
    23c0:	20 83       	st	Z, r18
	PowerDown();
    23c2:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <_Z9PowerDownv>
	__killTemp();
    23c6:	85 e2       	ldi	r24, 0x25	; 37
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	25 e2       	ldi	r18, 0x25	; 37
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	f9 01       	movw	r30, r18
    23d0:	20 81       	ld	r18, Z
    23d2:	2e 7f       	andi	r18, 0xFE	; 254
    23d4:	fc 01       	movw	r30, r24
    23d6:	20 83       	st	Z, r18

	
	//Enable INT2. Note* Pin change interrupts will NOT wake AVR from Power-Save mode. Only INT0-2 will.
	EICRA = (1 << ISC21)|(1 << ISC20);			//falling edge of INT2 enables interrupt
    23d8:	89 e6       	ldi	r24, 0x69	; 105
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	20 e3       	ldi	r18, 0x30	; 48
    23de:	fc 01       	movw	r30, r24
    23e0:	20 83       	st	Z, r18
	EIMSK = (1 << INT2);						//enable INT2 global interrupt
    23e2:	8d e3       	ldi	r24, 0x3D	; 61
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	24 e0       	ldi	r18, 0x04	; 4
    23e8:	fc 01       	movw	r30, r24
    23ea:	20 83       	st	Z, r18
	
	//Enable SPI for TI temperature
	ddrSpi0 |= (1 << bnMosi0)|(1 << bnSck0)|(1 << bnSS0);	//outputs
    23ec:	84 e2       	ldi	r24, 0x24	; 36
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	24 e2       	ldi	r18, 0x24	; 36
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	f9 01       	movw	r30, r18
    23f6:	20 81       	ld	r18, Z
    23f8:	20 6b       	ori	r18, 0xB0	; 176
    23fa:	fc 01       	movw	r30, r24
    23fc:	20 83       	st	Z, r18
	ddrSpi0 &= ~(1 << bnMiso0);
    23fe:	84 e2       	ldi	r24, 0x24	; 36
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	24 e2       	ldi	r18, 0x24	; 36
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	f9 01       	movw	r30, r18
    2408:	20 81       	ld	r18, Z
    240a:	2f 7b       	andi	r18, 0xBF	; 191
    240c:	fc 01       	movw	r30, r24
    240e:	20 83       	st	Z, r18
	prtSpi0 |= (1 << bnSS0)|(1 << bnSck0);		//keep SS and SCK high
    2410:	85 e2       	ldi	r24, 0x25	; 37
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	25 e2       	ldi	r18, 0x25	; 37
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	f9 01       	movw	r30, r18
    241a:	20 81       	ld	r18, Z
    241c:	20 69       	ori	r18, 0x90	; 144
    241e:	fc 01       	movw	r30, r24
    2420:	20 83       	st	Z, r18
	prtSpi0 &= ~(1 << bnMosi0);		//keep Miso low
    2422:	85 e2       	ldi	r24, 0x25	; 37
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	25 e2       	ldi	r18, 0x25	; 37
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	f9 01       	movw	r30, r18
    242c:	20 81       	ld	r18, Z
    242e:	2f 7d       	andi	r18, 0xDF	; 223
    2430:	fc 01       	movw	r30, r24
    2432:	20 83       	st	Z, r18
	
	//Init variables
	flagGoToSleep = fTrue;			//changes to fTrue in final implementation
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	80 93 b0 01 	sts	0x01B0, r24
	flagReceivingBone = fFalse;
    243a:	10 92 b1 01 	sts	0x01B1, r1
	flagNormalMode=fTrue;
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	80 93 b2 01 	sts	0x01B2, r24

	flagUpdateGAVRTime=fFalse;
    2444:	10 92 b3 01 	sts	0x01B3, r1
	flagUpdateGAVRDate=fFalse;
    2448:	10 92 b4 01 	sts	0x01B4, r1
	flagSendingGAVR=fFalse;
    244c:	10 92 b5 01 	sts	0x01B5, r1
	flagUserTime=fFalse;
    2450:	10 92 b7 01 	sts	0x01B7, r1
	flagUserDate=fFalse;
    2454:	10 92 b6 01 	sts	0x01B6, r1
	flagInvalidDateTime=fFalse;
    2458:	10 92 b8 01 	sts	0x01B8, r1
	flagWaitingToSendGAVR=fFalse;
    245c:	10 92 b9 01 	sts	0x01B9, r1
	
	restart=fFalse;
    2460:	10 92 be 01 	sts	0x01BE, r1
	flagNewShutdown=fFalse;
    2464:	10 92 ba 01 	sts	0x01BA, r1
	flagShutdown  = fFalse;
    2468:	10 92 bb 01 	sts	0x01BB, r1
	flagGoodVolts=fFalse;
    246c:	10 92 bd 01 	sts	0x01BD, r1
	flagGoodTemp=fFalse;
    2470:	10 92 bc 01 	sts	0x01BC, r1
	flagFreshStart=fTrue;
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	80 93 bf 01 	sts	0x01BF, r24
}
    247a:	0f 90       	pop	r0
    247c:	0f 90       	pop	r0
    247e:	df 91       	pop	r29
    2480:	cf 91       	pop	r28
    2482:	08 95       	ret

00002484 <_Z14EnableRTCTimerv>:
/*************************************************************************************************************/
void EnableRTCTimer(){
    2484:	cf 93       	push	r28
    2486:	df 93       	push	r29
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
	//Asynchronous should be done based on TOSC1 and TOSC2
	//Give power back to Timer2
	PRR0 &= ~(1 << PRTIM2);
    248c:	84 e6       	ldi	r24, 0x64	; 100
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	24 e6       	ldi	r18, 0x64	; 100
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	f9 01       	movw	r30, r18
    2496:	20 81       	ld	r18, Z
    2498:	2f 7b       	andi	r18, 0xBF	; 191
    249a:	fc 01       	movw	r30, r24
    249c:	20 83       	st	Z, r18
	Wait_ms(1);	//give it time to power on
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	0e 94 80 12 	call	0x2500	; 0x2500 <_Z7Wait_msi>
	
	//Set to Asynchronous mode, uses TOSC1/TOSC2 pins
	ASSR |= (1 << AS2);
    24a6:	86 eb       	ldi	r24, 0xB6	; 182
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	26 eb       	ldi	r18, 0xB6	; 182
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	f9 01       	movw	r30, r18
    24b0:	20 81       	ld	r18, Z
    24b2:	20 62       	ori	r18, 0x20	; 32
    24b4:	fc 01       	movw	r30, r24
    24b6:	20 83       	st	Z, r18
	
	//Set prescaler, initialize registers
	TCCR2B |= (1 << CS22)|(1 << CS20);	//128 prescaler, should click into overflow every second
    24b8:	81 eb       	ldi	r24, 0xB1	; 177
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	21 eb       	ldi	r18, 0xB1	; 177
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	f9 01       	movw	r30, r18
    24c2:	20 81       	ld	r18, Z
    24c4:	25 60       	ori	r18, 0x05	; 5
    24c6:	fc 01       	movw	r30, r24
    24c8:	20 83       	st	Z, r18
	while ((ASSR & ((1 << TCR2BUB)|(1 << TCN2UB))));	//wait for it not to be busy
    24ca:	86 eb       	ldi	r24, 0xB6	; 182
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	fc 01       	movw	r30, r24
    24d0:	80 81       	ld	r24, Z
    24d2:	88 2f       	mov	r24, r24
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	81 71       	andi	r24, 0x11	; 17
    24d8:	90 70       	andi	r25, 0x00	; 0
    24da:	21 e0       	ldi	r18, 0x01	; 1
    24dc:	00 97       	sbiw	r24, 0x00	; 0
    24de:	09 f4       	brne	.+2      	; 0x24e2 <_Z14EnableRTCTimerv+0x5e>
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	22 23       	and	r18, r18
    24e4:	91 f7       	brne	.-28     	; 0x24ca <_Z14EnableRTCTimerv+0x46>
	TIFR2 = (1 << TOV2);								//Clear any interrupts pending for the timer
    24e6:	87 e3       	ldi	r24, 0x37	; 55
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	21 e0       	ldi	r18, 0x01	; 1
    24ec:	fc 01       	movw	r30, r24
    24ee:	20 83       	st	Z, r18
	TIMSK2 = (1 << TOIE2);								//Enable overflow on it
    24f0:	80 e7       	ldi	r24, 0x70	; 112
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	21 e0       	ldi	r18, 0x01	; 1
    24f6:	fc 01       	movw	r30, r24
    24f8:	20 83       	st	Z, r18
	
	//Away we go
}
    24fa:	df 91       	pop	r29
    24fc:	cf 91       	pop	r28
    24fe:	08 95       	ret

00002500 <_Z7Wait_msi>:
/*************************************************************************************************************/
void Wait_ms(volatile int delay)
{
    2500:	cf 93       	push	r28
    2502:	df 93       	push	r29
    2504:	00 d0       	rcall	.+0      	; 0x2506 <_Z7Wait_msi+0x6>
    2506:	00 d0       	rcall	.+0      	; 0x2508 <_Z7Wait_msi+0x8>
    2508:	cd b7       	in	r28, 0x3d	; 61
    250a:	de b7       	in	r29, 0x3e	; 62
    250c:	9c 83       	std	Y+4, r25	; 0x04
    250e:	8b 83       	std	Y+3, r24	; 0x03
	volatile int i;

	while(delay > 0){
    2510:	18 c0       	rjmp	.+48     	; 0x2542 <_Z7Wait_msi+0x42>
		for(i = 0; i < 800; i++){
    2512:	1a 82       	std	Y+2, r1	; 0x02
    2514:	19 82       	std	Y+1, r1	; 0x01
    2516:	06 c0       	rjmp	.+12     	; 0x2524 <_Z7Wait_msi+0x24>
			asm volatile("nop");
    2518:	00 00       	nop
void Wait_ms(volatile int delay)
{
	volatile int i;

	while(delay > 0){
		for(i = 0; i < 800; i++){
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	9a 81       	ldd	r25, Y+2	; 0x02
    251e:	01 96       	adiw	r24, 0x01	; 1
    2520:	9a 83       	std	Y+2, r25	; 0x02
    2522:	89 83       	std	Y+1, r24	; 0x01
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	9a 81       	ldd	r25, Y+2	; 0x02
    2528:	21 e0       	ldi	r18, 0x01	; 1
    252a:	33 e0       	ldi	r19, 0x03	; 3
    252c:	80 32       	cpi	r24, 0x20	; 32
    252e:	93 07       	cpc	r25, r19
    2530:	0c f0       	brlt	.+2      	; 0x2534 <_Z7Wait_msi+0x34>
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	22 23       	and	r18, r18
    2536:	81 f7       	brne	.-32     	; 0x2518 <_Z7Wait_msi+0x18>
			asm volatile("nop");
		}
		delay -= 1;
    2538:	8b 81       	ldd	r24, Y+3	; 0x03
    253a:	9c 81       	ldd	r25, Y+4	; 0x04
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	9c 83       	std	Y+4, r25	; 0x04
    2540:	8b 83       	std	Y+3, r24	; 0x03
/*************************************************************************************************************/
void Wait_ms(volatile int delay)
{
	volatile int i;

	while(delay > 0){
    2542:	8b 81       	ldd	r24, Y+3	; 0x03
    2544:	9c 81       	ldd	r25, Y+4	; 0x04
    2546:	21 e0       	ldi	r18, 0x01	; 1
    2548:	18 16       	cp	r1, r24
    254a:	19 06       	cpc	r1, r25
    254c:	0c f0       	brlt	.+2      	; 0x2550 <_Z7Wait_msi+0x50>
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	22 23       	and	r18, r18
    2552:	f9 f6       	brne	.-66     	; 0x2512 <_Z7Wait_msi+0x12>
		for(i = 0; i < 800; i++){
			asm volatile("nop");
		}
		delay -= 1;
	}
}
    2554:	0f 90       	pop	r0
    2556:	0f 90       	pop	r0
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	df 91       	pop	r29
    255e:	cf 91       	pop	r28
    2560:	08 95       	ret

00002562 <_Z8Wait_seci>:
/*************************************************************************************************************/
void Wait_sec(volatile int sec){
    2562:	cf 93       	push	r28
    2564:	df 93       	push	r29
    2566:	00 d0       	rcall	.+0      	; 0x2568 <_Z8Wait_seci+0x6>
    2568:	00 d0       	rcall	.+0      	; 0x256a <_Z8Wait_seci+0x8>
    256a:	00 d0       	rcall	.+0      	; 0x256c <_Z8Wait_seci+0xa>
    256c:	cd b7       	in	r28, 0x3d	; 61
    256e:	de b7       	in	r29, 0x3e	; 62
    2570:	9e 83       	std	Y+6, r25	; 0x06
    2572:	8d 83       	std	Y+5, r24	; 0x05
	volatile int startingTime = currentTime.getSeconds();
    2574:	88 e8       	ldi	r24, 0x88	; 136
    2576:	91 e0       	ldi	r25, 0x01	; 1
    2578:	0e 94 99 04 	call	0x932	; 0x932 <_ZN6myTime10getSecondsEv>
    257c:	88 2f       	mov	r24, r24
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	9a 83       	std	Y+2, r25	; 0x02
    2582:	89 83       	std	Y+1, r24	; 0x01
	volatile int endingTime= (startingTime+sec)%60;
    2584:	29 81       	ldd	r18, Y+1	; 0x01
    2586:	3a 81       	ldd	r19, Y+2	; 0x02
    2588:	8d 81       	ldd	r24, Y+5	; 0x05
    258a:	9e 81       	ldd	r25, Y+6	; 0x06
    258c:	82 0f       	add	r24, r18
    258e:	93 1f       	adc	r25, r19
    2590:	2c e3       	ldi	r18, 0x3C	; 60
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	b9 01       	movw	r22, r18
    2596:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__divmodhi4>
    259a:	9c 83       	std	Y+4, r25	; 0x04
    259c:	8b 83       	std	Y+3, r24	; 0x03
	while (currentTime.getSeconds() != endingTime){asm volatile ("nop");}
    259e:	01 c0       	rjmp	.+2      	; 0x25a2 <_Z8Wait_seci+0x40>
    25a0:	00 00       	nop
    25a2:	88 e8       	ldi	r24, 0x88	; 136
    25a4:	91 e0       	ldi	r25, 0x01	; 1
    25a6:	0e 94 99 04 	call	0x932	; 0x932 <_ZN6myTime10getSecondsEv>
    25aa:	28 2f       	mov	r18, r24
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	8b 81       	ldd	r24, Y+3	; 0x03
    25b0:	9c 81       	ldd	r25, Y+4	; 0x04
    25b2:	41 e0       	ldi	r20, 0x01	; 1
    25b4:	28 17       	cp	r18, r24
    25b6:	39 07       	cpc	r19, r25
    25b8:	09 f4       	brne	.+2      	; 0x25bc <_Z8Wait_seci+0x5a>
    25ba:	40 e0       	ldi	r20, 0x00	; 0
    25bc:	44 23       	and	r20, r20
    25be:	81 f7       	brne	.-32     	; 0x25a0 <_Z8Wait_seci+0x3e>
}
    25c0:	26 96       	adiw	r28, 0x06	; 6
    25c2:	0f b6       	in	r0, 0x3f	; 63
    25c4:	f8 94       	cli
    25c6:	de bf       	out	0x3e, r29	; 62
    25c8:	0f be       	out	0x3f, r0	; 63
    25ca:	cd bf       	out	0x3d, r28	; 61
    25cc:	df 91       	pop	r29
    25ce:	cf 91       	pop	r28
    25d0:	08 95       	ret

000025d2 <_Z9GoToSleeph>:

/*************************************************************************************************************/

void GoToSleep(BOOL shortOrLong){
    25d2:	cf 93       	push	r28
    25d4:	df 93       	push	r29
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <_Z9GoToSleeph+0x6>
    25d8:	00 d0       	rcall	.+0      	; 0x25da <_Z9GoToSleeph+0x8>
    25da:	0f 92       	push	r0
    25dc:	cd b7       	in	r28, 0x3d	; 61
    25de:	de b7       	in	r29, 0x3e	; 62
    25e0:	8d 83       	std	Y+5, r24	; 0x05
		sei();
    25e2:	78 94       	sei
		volatile int sleepTime, sleepTicks = 0;
    25e4:	1c 82       	std	Y+4, r1	; 0x04
    25e6:	1b 82       	std	Y+3, r1	; 0x03
		//If bool is true, we are in low power mode/backup, sleep for 60 seconds then check ADC again
		if (shortOrLong == fTrue){
    25e8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ea:	81 30       	cpi	r24, 0x01	; 1
    25ec:	49 f4       	brne	.+18     	; 0x2600 <_Z9GoToSleeph+0x2e>
			sleepTime = SLEEP_TICKS_LOWV;
    25ee:	8c e0       	ldi	r24, 0x0C	; 12
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	9a 83       	std	Y+2, r25	; 0x02
    25f4:	89 83       	std	Y+1, r24	; 0x01
			EIMSK = 0;						//no int2
    25f6:	8d e3       	ldi	r24, 0x3D	; 61
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	fc 01       	movw	r30, r24
    25fc:	10 82       	st	Z, r1
    25fe:	0d c0       	rjmp	.+26     	; 0x261a <_Z9GoToSleeph+0x48>
		} else {
			sleepTime = SLEEP_TICKS_HIGHV;
    2600:	8a e0       	ldi	r24, 0x0A	; 10
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	9a 83       	std	Y+2, r25	; 0x02
    2606:	89 83       	std	Y+1, r24	; 0x01
			EIMSK |= (1 << INT2);			//int2 is allowed.
    2608:	8d e3       	ldi	r24, 0x3D	; 61
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	2d e3       	ldi	r18, 0x3D	; 61
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	f9 01       	movw	r30, r18
    2612:	20 81       	ld	r18, Z
    2614:	24 60       	ori	r18, 0x04	; 4
    2616:	fc 01       	movw	r30, r24
    2618:	20 83       	st	Z, r18
		}
		//Turn off status LED, put on TIM2 led
		prtSTATUSled &= ~(1 << bnSTATUSled);
    261a:	88 e2       	ldi	r24, 0x28	; 40
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	28 e2       	ldi	r18, 0x28	; 40
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	f9 01       	movw	r30, r18
    2624:	20 81       	ld	r18, Z
    2626:	2b 7f       	andi	r18, 0xFB	; 251
    2628:	fc 01       	movw	r30, r24
    262a:	20 83       	st	Z, r18
		prtSLEEPled |= (1 << bnSLEEPled);
    262c:	8b e2       	ldi	r24, 0x2B	; 43
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	2b e2       	ldi	r18, 0x2B	; 43
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	f9 01       	movw	r30, r18
    2636:	20 81       	ld	r18, Z
    2638:	20 68       	ori	r18, 0x80	; 128
    263a:	fc 01       	movw	r30, r24
    263c:	20 83       	st	Z, r18
		
		//Set to power save, then enable
		SMCR = (1 << SM1)|(1 << SM0);
    263e:	83 e5       	ldi	r24, 0x53	; 83
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	26 e0       	ldi	r18, 0x06	; 6
    2644:	fc 01       	movw	r30, r24
    2646:	20 83       	st	Z, r18
		SMCR |= (1 << SE);
    2648:	83 e5       	ldi	r24, 0x53	; 83
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	23 e5       	ldi	r18, 0x53	; 83
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	f9 01       	movw	r30, r18
    2652:	20 81       	ld	r18, Z
    2654:	21 60       	ori	r18, 0x01	; 1
    2656:	fc 01       	movw	r30, r24
    2658:	20 83       	st	Z, r18
		
		//Give time to registers
		Wait_ms(1);
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	0e 94 80 12 	call	0x2500	; 0x2500 <_Z7Wait_msi>
		//Go to sleep
		while (sleepTicks < sleepTime && flagGoToSleep){
    2662:	06 c0       	rjmp	.+12     	; 0x2670 <_Z9GoToSleeph+0x9e>
			asm volatile("SLEEP");
    2664:	88 95       	sleep
			sleepTicks++;
    2666:	8b 81       	ldd	r24, Y+3	; 0x03
    2668:	9c 81       	ldd	r25, Y+4	; 0x04
    266a:	01 96       	adiw	r24, 0x01	; 1
    266c:	9c 83       	std	Y+4, r25	; 0x04
    266e:	8b 83       	std	Y+3, r24	; 0x03
		SMCR |= (1 << SE);
		
		//Give time to registers
		Wait_ms(1);
		//Go to sleep
		while (sleepTicks < sleepTime && flagGoToSleep){
    2670:	2b 81       	ldd	r18, Y+3	; 0x03
    2672:	3c 81       	ldd	r19, Y+4	; 0x04
    2674:	89 81       	ldd	r24, Y+1	; 0x01
    2676:	9a 81       	ldd	r25, Y+2	; 0x02
    2678:	28 17       	cp	r18, r24
    267a:	39 07       	cpc	r19, r25
    267c:	34 f4       	brge	.+12     	; 0x268a <_Z9GoToSleeph+0xb8>
    267e:	80 91 b0 01 	lds	r24, 0x01B0
    2682:	88 23       	and	r24, r24
    2684:	11 f0       	breq	.+4      	; 0x268a <_Z9GoToSleeph+0xb8>
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	01 c0       	rjmp	.+2      	; 0x268c <_Z9GoToSleeph+0xba>
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	88 23       	and	r24, r24
    268e:	51 f7       	brne	.-44     	; 0x2664 <_Z9GoToSleeph+0x92>
			asm volatile("SLEEP");
			sleepTicks++;
		} //endwhile
		
		//Give it time to power back on
		Wait_ms(10);
    2690:	8a e0       	ldi	r24, 0x0A	; 10
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	0e 94 80 12 	call	0x2500	; 0x2500 <_Z7Wait_msi>
		
		//Done sleeping, turn off sleeping led
		prtSLEEPled &= ~(1 << bnSLEEPled);
    2698:	8b e2       	ldi	r24, 0x2B	; 43
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	2b e2       	ldi	r18, 0x2B	; 43
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	f9 01       	movw	r30, r18
    26a2:	20 81       	ld	r18, Z
    26a4:	2f 77       	andi	r18, 0x7F	; 127
    26a6:	fc 01       	movw	r30, r24
    26a8:	20 83       	st	Z, r18
		prtSTATUSled |= (1 << bnSTATUSled);
    26aa:	88 e2       	ldi	r24, 0x28	; 40
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	28 e2       	ldi	r18, 0x28	; 40
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	f9 01       	movw	r30, r18
    26b4:	20 81       	ld	r18, Z
    26b6:	24 60       	ori	r18, 0x04	; 4
    26b8:	fc 01       	movw	r30, r24
    26ba:	20 83       	st	Z, r18
}
    26bc:	0f 90       	pop	r0
    26be:	0f 90       	pop	r0
    26c0:	0f 90       	pop	r0
    26c2:	0f 90       	pop	r0
    26c4:	0f 90       	pop	r0
    26c6:	df 91       	pop	r29
    26c8:	cf 91       	pop	r28
    26ca:	08 95       	ret

000026cc <_Z7TakeADCv>:
/*************************************************************************************************************/

void TakeADC(){
    26cc:	cf 93       	push	r28
    26ce:	df 93       	push	r29
    26d0:	00 d0       	rcall	.+0      	; 0x26d2 <_Z7TakeADCv+0x6>
    26d2:	00 d0       	rcall	.+0      	; 0x26d4 <_Z7TakeADCv+0x8>
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
	WORD adcReading = 0;
    26d8:	1c 82       	std	Y+4, r1	; 0x04
    26da:	1b 82       	std	Y+3, r1	; 0x03
	
	cli();
    26dc:	f8 94       	cli
	//Turn Power on to ADC
	PRR0 &= ~(1 << PRADC);	
    26de:	84 e6       	ldi	r24, 0x64	; 100
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	24 e6       	ldi	r18, 0x64	; 100
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	f9 01       	movw	r30, r18
    26e8:	20 81       	ld	r18, Z
    26ea:	2e 7f       	andi	r18, 0xFE	; 254
    26ec:	fc 01       	movw	r30, r24
    26ee:	20 83       	st	Z, r18
	ADMUX |= (1 << REFS1);	//internal 1.1V reference
    26f0:	8c e7       	ldi	r24, 0x7C	; 124
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	2c e7       	ldi	r18, 0x7C	; 124
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	f9 01       	movw	r30, r18
    26fa:	20 81       	ld	r18, Z
    26fc:	20 68       	ori	r18, 0x80	; 128
    26fe:	fc 01       	movw	r30, r24
    2700:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADEN)|(1 << ADPS2);			//clkIO/16
    2702:	8a e7       	ldi	r24, 0x7A	; 122
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	2a e7       	ldi	r18, 0x7A	; 122
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	f9 01       	movw	r30, r18
    270c:	20 81       	ld	r18, Z
    270e:	24 68       	ori	r18, 0x84	; 132
    2710:	fc 01       	movw	r30, r24
    2712:	20 83       	st	Z, r18
	DIDR0 = 0xFE;								//disable all ADC's except ADC0
    2714:	8e e7       	ldi	r24, 0x7E	; 126
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	2e ef       	ldi	r18, 0xFE	; 254
    271a:	fc 01       	movw	r30, r24
    271c:	20 83       	st	Z, r18
	Wait_ms(5);									//Tim for registers to setup
    271e:	85 e0       	ldi	r24, 0x05	; 5
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	0e 94 80 12 	call	0x2500	; 0x2500 <_Z7Wait_msi>
	
	//Run conversion twice, throw first one out
	for (int i = 0; i < 2; i++){ADCSRA |= (1 << ADSC); while (ADCSRA & (1 << ADSC));}	
    2726:	1a 82       	std	Y+2, r1	; 0x02
    2728:	19 82       	std	Y+1, r1	; 0x01
    272a:	1c c0       	rjmp	.+56     	; 0x2764 <_Z7TakeADCv+0x98>
    272c:	8a e7       	ldi	r24, 0x7A	; 122
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	2a e7       	ldi	r18, 0x7A	; 122
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	f9 01       	movw	r30, r18
    2736:	20 81       	ld	r18, Z
    2738:	20 64       	ori	r18, 0x40	; 64
    273a:	fc 01       	movw	r30, r24
    273c:	20 83       	st	Z, r18
    273e:	8a e7       	ldi	r24, 0x7A	; 122
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	fc 01       	movw	r30, r24
    2744:	80 81       	ld	r24, Z
    2746:	88 2f       	mov	r24, r24
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	80 74       	andi	r24, 0x40	; 64
    274c:	90 70       	andi	r25, 0x00	; 0
    274e:	21 e0       	ldi	r18, 0x01	; 1
    2750:	00 97       	sbiw	r24, 0x00	; 0
    2752:	09 f4       	brne	.+2      	; 0x2756 <_Z7TakeADCv+0x8a>
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	22 23       	and	r18, r18
    2758:	91 f7       	brne	.-28     	; 0x273e <_Z7TakeADCv+0x72>
    275a:	89 81       	ldd	r24, Y+1	; 0x01
    275c:	9a 81       	ldd	r25, Y+2	; 0x02
    275e:	01 96       	adiw	r24, 0x01	; 1
    2760:	9a 83       	std	Y+2, r25	; 0x02
    2762:	89 83       	std	Y+1, r24	; 0x01
    2764:	21 e0       	ldi	r18, 0x01	; 1
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	9a 81       	ldd	r25, Y+2	; 0x02
    276a:	82 30       	cpi	r24, 0x02	; 2
    276c:	91 05       	cpc	r25, r1
    276e:	0c f0       	brlt	.+2      	; 0x2772 <_Z7TakeADCv+0xa6>
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	22 23       	and	r18, r18
    2774:	d9 f6       	brne	.-74     	; 0x272c <_Z7TakeADCv+0x60>
	
	//Put conversion into buffer
	adcReading = ADCL;
    2776:	88 e7       	ldi	r24, 0x78	; 120
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	fc 01       	movw	r30, r24
    277c:	80 81       	ld	r24, Z
    277e:	88 2f       	mov	r24, r24
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	9c 83       	std	Y+4, r25	; 0x04
    2784:	8b 83       	std	Y+3, r24	; 0x03
	adcReading |= (ADCH << 8);
    2786:	89 e7       	ldi	r24, 0x79	; 121
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	fc 01       	movw	r30, r24
    278c:	80 81       	ld	r24, Z
    278e:	88 2f       	mov	r24, r24
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	98 2f       	mov	r25, r24
    2794:	88 27       	eor	r24, r24
    2796:	2b 81       	ldd	r18, Y+3	; 0x03
    2798:	3c 81       	ldd	r19, Y+4	; 0x04
    279a:	82 2b       	or	r24, r18
    279c:	93 2b       	or	r25, r19
    279e:	9c 83       	std	Y+4, r25	; 0x04
    27a0:	8b 83       	std	Y+3, r24	; 0x03
		
	//Assign global reading and set flag
	globalADC=adcReading;
    27a2:	8b 81       	ldd	r24, Y+3	; 0x03
    27a4:	9c 81       	ldd	r25, Y+4	; 0x04
    27a6:	90 93 85 01 	sts	0x0185, r25
    27aa:	80 93 84 01 	sts	0x0184, r24
	flagGoodVolts = (adcReading < LOW_BATT_ADC) ? fFalse : fTrue;
    27ae:	21 e0       	ldi	r18, 0x01	; 1
    27b0:	8b 81       	ldd	r24, Y+3	; 0x03
    27b2:	9c 81       	ldd	r25, Y+4	; 0x04
    27b4:	f3 e0       	ldi	r31, 0x03	; 3
    27b6:	82 37       	cpi	r24, 0x72	; 114
    27b8:	9f 07       	cpc	r25, r31
    27ba:	08 f4       	brcc	.+2      	; 0x27be <_Z7TakeADCv+0xf2>
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	20 93 bd 01 	sts	0x01BD, r18
		
	//Re-enable interrupts
	sei();
    27c2:	78 94       	sei
	
	//Disable ADC hardware/registers
	ADCSRA = 0;
    27c4:	8a e7       	ldi	r24, 0x7A	; 122
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	fc 01       	movw	r30, r24
    27ca:	10 82       	st	Z, r1
	ADMUX = 0;
    27cc:	8c e7       	ldi	r24, 0x7C	; 124
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	fc 01       	movw	r30, r24
    27d2:	10 82       	st	Z, r1
	DIDR0 |= (1 << ADC0D);
    27d4:	8e e7       	ldi	r24, 0x7E	; 126
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	2e e7       	ldi	r18, 0x7E	; 126
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	f9 01       	movw	r30, r18
    27de:	20 81       	ld	r18, Z
    27e0:	21 60       	ori	r18, 0x01	; 1
    27e2:	fc 01       	movw	r30, r24
    27e4:	20 83       	st	Z, r18
	
	//Turn off power
	PRR0 |= (1 << PRADC);
    27e6:	84 e6       	ldi	r24, 0x64	; 100
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	24 e6       	ldi	r18, 0x64	; 100
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	f9 01       	movw	r30, r18
    27f0:	20 81       	ld	r18, Z
    27f2:	21 60       	ori	r18, 0x01	; 1
    27f4:	fc 01       	movw	r30, r24
    27f6:	20 83       	st	Z, r18
}
    27f8:	0f 90       	pop	r0
    27fa:	0f 90       	pop	r0
    27fc:	0f 90       	pop	r0
    27fe:	0f 90       	pop	r0
    2800:	df 91       	pop	r29
    2802:	cf 91       	pop	r28
    2804:	08 95       	ret

00002806 <_Z7GetTempv>:

/*************************************************************************************************************/

void GetTemp(){
    2806:	cf 93       	push	r28
    2808:	df 93       	push	r29
    280a:	00 d0       	rcall	.+0      	; 0x280c <_Z7GetTempv+0x6>
    280c:	cd b7       	in	r28, 0x3d	; 61
    280e:	de b7       	in	r29, 0x3e	; 62
	WORD rawTemp = 0;
    2810:	1a 82       	std	Y+2, r1	; 0x02
    2812:	19 82       	std	Y+1, r1	; 0x01
	
	//Power on temp monitor, let it settle
	//prtTEMPen |= (1 << bnTEMPen);
	PRR0 &= ~(1 << PRSPI);	
    2814:	84 e6       	ldi	r24, 0x64	; 100
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	24 e6       	ldi	r18, 0x64	; 100
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	f9 01       	movw	r30, r18
    281e:	20 81       	ld	r18, Z
    2820:	2b 7f       	andi	r18, 0xFB	; 251
    2822:	fc 01       	movw	r30, r24
    2824:	20 83       	st	Z, r18
	SPCR0 |= (1 << MSTR0)|(1 << SPE0)|(1 << SPR00);			//enables SPI, master, fck/64
    2826:	8c e4       	ldi	r24, 0x4C	; 76
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	2c e4       	ldi	r18, 0x4C	; 76
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	f9 01       	movw	r30, r18
    2830:	20 81       	ld	r18, Z
    2832:	21 65       	ori	r18, 0x51	; 81
    2834:	fc 01       	movw	r30, r24
    2836:	20 83       	st	Z, r18
	Wait_ms(200);
    2838:	88 ec       	ldi	r24, 0xC8	; 200
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	0e 94 80 12 	call	0x2500	; 0x2500 <_Z7Wait_msi>
	//Slave select goes low, sck goes low,  to signal start of transmission
	prtSpi0 &= ~((1 << bnSck0)|(1 << bnSS0));
    2840:	85 e2       	ldi	r24, 0x25	; 37
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	25 e2       	ldi	r18, 0x25	; 37
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	f9 01       	movw	r30, r18
    284a:	20 81       	ld	r18, Z
    284c:	2f 76       	andi	r18, 0x6F	; 111
    284e:	fc 01       	movw	r30, r24
    2850:	20 83       	st	Z, r18
	
	cli();
    2852:	f8 94       	cli
	//Write to buffer to start transmission
	SPDR0 = 0x00;
    2854:	8e e4       	ldi	r24, 0x4E	; 78
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	fc 01       	movw	r30, r24
    285a:	10 82       	st	Z, r1
	//Wait for data to be receieved.
	while (!(SPSR0 & (1 << SPIF0)));
    285c:	00 00       	nop
    285e:	8d e4       	ldi	r24, 0x4D	; 77
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	fc 01       	movw	r30, r24
    2864:	80 81       	ld	r24, Z
    2866:	80 95       	com	r24
    2868:	88 1f       	adc	r24, r24
    286a:	88 27       	eor	r24, r24
    286c:	88 1f       	adc	r24, r24
    286e:	88 23       	and	r24, r24
    2870:	b1 f7       	brne	.-20     	; 0x285e <_Z7GetTempv+0x58>
	rawTemp = (SPDR0 << 8);
    2872:	8e e4       	ldi	r24, 0x4E	; 78
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	fc 01       	movw	r30, r24
    2878:	80 81       	ld	r24, Z
    287a:	88 2f       	mov	r24, r24
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	98 2f       	mov	r25, r24
    2880:	88 27       	eor	r24, r24
    2882:	9a 83       	std	Y+2, r25	; 0x02
    2884:	89 83       	std	Y+1, r24	; 0x01
	SPDR0 = 0x00;
    2886:	8e e4       	ldi	r24, 0x4E	; 78
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	fc 01       	movw	r30, r24
    288c:	10 82       	st	Z, r1
	while (!(SPSR0 & (1 << SPIF0)));
    288e:	00 00       	nop
    2890:	8d e4       	ldi	r24, 0x4D	; 77
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	fc 01       	movw	r30, r24
    2896:	80 81       	ld	r24, Z
    2898:	80 95       	com	r24
    289a:	88 1f       	adc	r24, r24
    289c:	88 27       	eor	r24, r24
    289e:	88 1f       	adc	r24, r24
    28a0:	88 23       	and	r24, r24
    28a2:	b1 f7       	brne	.-20     	; 0x2890 <_Z7GetTempv+0x8a>
	rawTemp |= SPDR0;
    28a4:	8e e4       	ldi	r24, 0x4E	; 78
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	fc 01       	movw	r30, r24
    28aa:	80 81       	ld	r24, Z
    28ac:	88 2f       	mov	r24, r24
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	29 81       	ldd	r18, Y+1	; 0x01
    28b2:	3a 81       	ldd	r19, Y+2	; 0x02
    28b4:	82 2b       	or	r24, r18
    28b6:	93 2b       	or	r25, r19
    28b8:	9a 83       	std	Y+2, r25	; 0x02
    28ba:	89 83       	std	Y+1, r24	; 0x01
	
	//Set flag to correct value, update global value
	flagGoodTemp = (rawTemp < HIGH_TEMP) ? fTrue : fFalse;
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	9a 81       	ldd	r25, Y+2	; 0x02
    28c0:	f2 e3       	ldi	r31, 0x32	; 50
    28c2:	84 36       	cpi	r24, 0x64	; 100
    28c4:	9f 07       	cpc	r25, r31
    28c6:	10 f4       	brcc	.+4      	; 0x28cc <_Z7GetTempv+0xc6>
    28c8:	81 e0       	ldi	r24, 0x01	; 1
    28ca:	01 c0       	rjmp	.+2      	; 0x28ce <_Z7GetTempv+0xc8>
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	80 93 bc 01 	sts	0x01BC, r24
	globalTemp=rawTemp;
    28d2:	89 81       	ldd	r24, Y+1	; 0x01
    28d4:	9a 81       	ldd	r25, Y+2	; 0x02
    28d6:	90 93 87 01 	sts	0x0187, r25
    28da:	80 93 86 01 	sts	0x0186, r24
	
	//re enable interrupts
	sei();
    28de:	78 94       	sei
	
	//Bring SS high, clear SPCR0 register and turn power off to SPI and device
	prtSpi0 |= (1 << bnSS0)|(1 << bnSck0);
    28e0:	85 e2       	ldi	r24, 0x25	; 37
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	25 e2       	ldi	r18, 0x25	; 37
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	f9 01       	movw	r30, r18
    28ea:	20 81       	ld	r18, Z
    28ec:	20 69       	ori	r18, 0x90	; 144
    28ee:	fc 01       	movw	r30, r24
    28f0:	20 83       	st	Z, r18
	SPCR0=0x00;	
    28f2:	8c e4       	ldi	r24, 0x4C	; 76
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	fc 01       	movw	r30, r24
    28f8:	10 82       	st	Z, r1
	//prtTEMPen &= ~(1 << bnTEMPen);
	PRR0 |= (1 << PRSPI);
    28fa:	84 e6       	ldi	r24, 0x64	; 100
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	24 e6       	ldi	r18, 0x64	; 100
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	f9 01       	movw	r30, r18
    2904:	20 81       	ld	r18, Z
    2906:	24 60       	ori	r18, 0x04	; 4
    2908:	fc 01       	movw	r30, r24
    290a:	20 83       	st	Z, r18
}
    290c:	0f 90       	pop	r0
    290e:	0f 90       	pop	r0
    2910:	df 91       	pop	r29
    2912:	cf 91       	pop	r28
    2914:	08 95       	ret

00002916 <_Z7PowerUpj>:
/*************************************************************************************************************/
void PowerUp(WORD interval){
    2916:	cf 93       	push	r28
    2918:	df 93       	push	r29
    291a:	00 d0       	rcall	.+0      	; 0x291c <_Z7PowerUpj+0x6>
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	9a 83       	std	Y+2, r25	; 0x02
    2922:	89 83       	std	Y+1, r24	; 0x01
	cli();
    2924:	f8 94       	cli
	
	//First power on main regulator
	__enableMain();
    2926:	88 e2       	ldi	r24, 0x28	; 40
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	28 e2       	ldi	r18, 0x28	; 40
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	f9 01       	movw	r30, r18
    2930:	20 81       	ld	r18, Z
    2932:	21 60       	ori	r18, 0x01	; 1
    2934:	fc 01       	movw	r30, r24
    2936:	20 83       	st	Z, r18
	Wait_ms(interval);
    2938:	89 81       	ldd	r24, Y+1	; 0x01
    293a:	9a 81       	ldd	r25, Y+2	; 0x02
    293c:	0e 94 80 12 	call	0x2500	; 0x2500 <_Z7Wait_msi>
	
	//Power on BeagleBone next, takes longer time.
	__enableBeagleBone();
    2940:	82 e2       	ldi	r24, 0x22	; 34
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	22 e2       	ldi	r18, 0x22	; 34
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	f9 01       	movw	r30, r18
    294a:	20 81       	ld	r18, Z
    294c:	20 61       	ori	r18, 0x10	; 16
    294e:	fc 01       	movw	r30, r24
    2950:	20 83       	st	Z, r18
	Wait_ms(interval);
    2952:	89 81       	ldd	r24, Y+1	; 0x01
    2954:	9a 81       	ldd	r25, Y+2	; 0x02
    2956:	0e 94 80 12 	call	0x2500	; 0x2500 <_Z7Wait_msi>
	while (!(pinBBio & (1 << bnW0B9)));	//Wait for GPIO line to go high
    295a:	00 00       	nop
    295c:	86 e2       	ldi	r24, 0x26	; 38
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	fc 01       	movw	r30, r24
    2962:	80 81       	ld	r24, Z
    2964:	88 2f       	mov	r24, r24
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	88 70       	andi	r24, 0x08	; 8
    296a:	90 70       	andi	r25, 0x00	; 0
    296c:	21 e0       	ldi	r18, 0x01	; 1
    296e:	00 97       	sbiw	r24, 0x00	; 0
    2970:	09 f0       	breq	.+2      	; 0x2974 <_Z7PowerUpj+0x5e>
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	22 23       	and	r18, r18
    2976:	91 f7       	brne	.-28     	; 0x295c <_Z7PowerUpj+0x46>
	
	//Power on GAVR and Enable GPS
	__enableGPSandGAVR();
    2978:	82 e2       	ldi	r24, 0x22	; 34
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	22 e2       	ldi	r18, 0x22	; 34
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	f9 01       	movw	r30, r18
    2982:	20 81       	ld	r18, Z
    2984:	20 6c       	ori	r18, 0xC0	; 192
    2986:	fc 01       	movw	r30, r24
    2988:	20 83       	st	Z, r18
	Wait_ms(interval);
    298a:	89 81       	ldd	r24, Y+1	; 0x01
    298c:	9a 81       	ldd	r25, Y+2	; 0x02
    298e:	0e 94 80 12 	call	0x2500	; 0x2500 <_Z7Wait_msi>
	while (!(pinGAVRio & (1 << bnW3G0)));	//Wait for GPIO line to go high signifying correct boot
    2992:	00 00       	nop
    2994:	89 e2       	ldi	r24, 0x29	; 41
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	fc 01       	movw	r30, r24
    299a:	80 81       	ld	r24, Z
    299c:	88 2f       	mov	r24, r24
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	80 71       	andi	r24, 0x10	; 16
    29a2:	90 70       	andi	r25, 0x00	; 0
    29a4:	21 e0       	ldi	r18, 0x01	; 1
    29a6:	00 97       	sbiw	r24, 0x00	; 0
    29a8:	09 f0       	breq	.+2      	; 0x29ac <_Z7PowerUpj+0x96>
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	22 23       	and	r18, r18
    29ae:	91 f7       	brne	.-28     	; 0x2994 <_Z7PowerUpj+0x7e>
	
	//Power on LCD
	__enableLCD();
    29b0:	82 e2       	ldi	r24, 0x22	; 34
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	22 e2       	ldi	r18, 0x22	; 34
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	f9 01       	movw	r30, r18
    29ba:	20 81       	ld	r18, Z
    29bc:	20 62       	ori	r18, 0x20	; 32
    29be:	fc 01       	movw	r30, r24
    29c0:	20 83       	st	Z, r18
	Wait_ms(interval);
    29c2:	89 81       	ldd	r24, Y+1	; 0x01
    29c4:	9a 81       	ldd	r25, Y+2	; 0x02
    29c6:	0e 94 80 12 	call	0x2500	; 0x2500 <_Z7Wait_msi>
	sei();
    29ca:	78 94       	sei
	
}
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	df 91       	pop	r29
    29d2:	cf 91       	pop	r28
    29d4:	08 95       	ret

000029d6 <_Z9PowerDownv>:
/*************************************************************************************************************/
void PowerDown(){
    29d6:	cf 93       	push	r28
    29d8:	df 93       	push	r29
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
	cli();
    29de:	f8 94       	cli
	//Signify interrupts, wait 6 seconds for all processing to stop.
	prtInterrupts |= (1 << bnBBint)|(1 << bnGAVRint);
    29e0:	82 e2       	ldi	r24, 0x22	; 34
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	22 e2       	ldi	r18, 0x22	; 34
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	f9 01       	movw	r30, r18
    29ea:	20 81       	ld	r18, Z
    29ec:	2c 60       	ori	r18, 0x0C	; 12
    29ee:	fc 01       	movw	r30, r24
    29f0:	20 83       	st	Z, r18
	Wait_sec(6);
    29f2:	86 e0       	ldi	r24, 0x06	; 6
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	0e 94 b1 12 	call	0x2562	; 0x2562 <_Z8Wait_seci>
	prtInterrupts &= ~((1 << bnBBint)|(1 << bnGAVRint));
    29fa:	82 e2       	ldi	r24, 0x22	; 34
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	22 e2       	ldi	r18, 0x22	; 34
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	f9 01       	movw	r30, r18
    2a04:	20 81       	ld	r18, Z
    2a06:	23 7f       	andi	r18, 0xF3	; 243
    2a08:	fc 01       	movw	r30, r24
    2a0a:	20 83       	st	Z, r18
	__killLCD();
    2a0c:	82 e2       	ldi	r24, 0x22	; 34
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	22 e2       	ldi	r18, 0x22	; 34
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	f9 01       	movw	r30, r18
    2a16:	20 81       	ld	r18, Z
    2a18:	2f 7d       	andi	r18, 0xDF	; 223
    2a1a:	fc 01       	movw	r30, r24
    2a1c:	20 83       	st	Z, r18
	__killGPSandGAVR();
    2a1e:	82 e2       	ldi	r24, 0x22	; 34
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	22 e2       	ldi	r18, 0x22	; 34
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	f9 01       	movw	r30, r18
    2a28:	20 81       	ld	r18, Z
    2a2a:	2f 73       	andi	r18, 0x3F	; 63
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	20 83       	st	Z, r18
	
	//Give the BeagleBone another 6 seconds to finish it's stuff, then kill it
	Wait_sec(6);
    2a30:	86 e0       	ldi	r24, 0x06	; 6
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	0e 94 b1 12 	call	0x2562	; 0x2562 <_Z8Wait_seci>
	__killBeagleBone();
    2a38:	82 e2       	ldi	r24, 0x22	; 34
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	22 e2       	ldi	r18, 0x22	; 34
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	f9 01       	movw	r30, r18
    2a42:	20 81       	ld	r18, Z
    2a44:	2f 7e       	andi	r18, 0xEF	; 239
    2a46:	fc 01       	movw	r30, r24
    2a48:	20 83       	st	Z, r18
	__killMain();
    2a4a:	88 e2       	ldi	r24, 0x28	; 40
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	28 e2       	ldi	r18, 0x28	; 40
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	f9 01       	movw	r30, r18
    2a54:	20 81       	ld	r18, Z
    2a56:	2e 7f       	andi	r18, 0xFE	; 254
    2a58:	fc 01       	movw	r30, r24
    2a5a:	20 83       	st	Z, r18
	sei();
    2a5c:	78 94       	sei
}
    2a5e:	df 91       	pop	r29
    2a60:	cf 91       	pop	r28
    2a62:	08 95       	ret

00002a64 <_Z41__static_initialization_and_destruction_0ii>:
    2a64:	cf 93       	push	r28
    2a66:	df 93       	push	r29
    2a68:	00 d0       	rcall	.+0      	; 0x2a6a <_Z41__static_initialization_and_destruction_0ii+0x6>
    2a6a:	00 d0       	rcall	.+0      	; 0x2a6c <_Z41__static_initialization_and_destruction_0ii+0x8>
    2a6c:	cd b7       	in	r28, 0x3d	; 61
    2a6e:	de b7       	in	r29, 0x3e	; 62
    2a70:	9a 83       	std	Y+2, r25	; 0x02
    2a72:	89 83       	std	Y+1, r24	; 0x01
    2a74:	7c 83       	std	Y+4, r23	; 0x04
    2a76:	6b 83       	std	Y+3, r22	; 0x03
    2a78:	89 81       	ldd	r24, Y+1	; 0x01
    2a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7c:	81 30       	cpi	r24, 0x01	; 1
    2a7e:	91 05       	cpc	r25, r1
    2a80:	51 f4       	brne	.+20     	; 0x2a96 <_Z41__static_initialization_and_destruction_0ii+0x32>
    2a82:	8b 81       	ldd	r24, Y+3	; 0x03
    2a84:	9c 81       	ldd	r25, Y+4	; 0x04
    2a86:	2f ef       	ldi	r18, 0xFF	; 255
    2a88:	8f 3f       	cpi	r24, 0xFF	; 255
    2a8a:	92 07       	cpc	r25, r18
    2a8c:	21 f4       	brne	.+8      	; 0x2a96 <_Z41__static_initialization_and_destruction_0ii+0x32>

/*********************************************GLOBAL VARIABLES***************************************************/
/****************************************************************************************************************/
WORD globalADC=0, globalTemp=0;
//volatile int timeOut=0;
myTime currentTime;  //The clock, MUST BE GLOBAL. In final program, will initiate with NOTHING, then GPS will update on the actual time into beaglebone, beaglebone pings us, then dunzo OR have UART into this as well, then get time and be done.
    2a8e:	88 e8       	ldi	r24, 0x88	; 136
    2a90:	91 e0       	ldi	r25, 0x01	; 1
    2a92:	0e 94 15 04 	call	0x82a	; 0x82a <_ZN6myTimeC1Ev>
	//Give the BeagleBone another 6 seconds to finish it's stuff, then kill it
	Wait_sec(6);
	__killBeagleBone();
	__killMain();
	sei();
}
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	0f 90       	pop	r0
    2a9e:	df 91       	pop	r29
    2aa0:	cf 91       	pop	r28
    2aa2:	08 95       	ret

00002aa4 <_GLOBAL__sub_I__ZN6myDateC2Ev>:
    2aa4:	cf 93       	push	r28
    2aa6:	df 93       	push	r29
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	6f ef       	ldi	r22, 0xFF	; 255
    2ab2:	7f ef       	ldi	r23, 0xFF	; 255
    2ab4:	0e 94 32 15 	call	0x2a64	; 0x2a64 <_Z41__static_initialization_and_destruction_0ii>
    2ab8:	df 91       	pop	r29
    2aba:	cf 91       	pop	r28
    2abc:	08 95       	ret

00002abe <__udivmodqi4>:
    2abe:	99 1b       	sub	r25, r25
    2ac0:	79 e0       	ldi	r23, 0x09	; 9
    2ac2:	04 c0       	rjmp	.+8      	; 0x2acc <__udivmodqi4_ep>

00002ac4 <__udivmodqi4_loop>:
    2ac4:	99 1f       	adc	r25, r25
    2ac6:	96 17       	cp	r25, r22
    2ac8:	08 f0       	brcs	.+2      	; 0x2acc <__udivmodqi4_ep>
    2aca:	96 1b       	sub	r25, r22

00002acc <__udivmodqi4_ep>:
    2acc:	88 1f       	adc	r24, r24
    2ace:	7a 95       	dec	r23
    2ad0:	c9 f7       	brne	.-14     	; 0x2ac4 <__udivmodqi4_loop>
    2ad2:	80 95       	com	r24
    2ad4:	08 95       	ret

00002ad6 <__divmodhi4>:
    2ad6:	97 fb       	bst	r25, 7
    2ad8:	09 2e       	mov	r0, r25
    2ada:	07 26       	eor	r0, r23
    2adc:	0a d0       	rcall	.+20     	; 0x2af2 <__divmodhi4_neg1>
    2ade:	77 fd       	sbrc	r23, 7
    2ae0:	04 d0       	rcall	.+8      	; 0x2aea <__divmodhi4_neg2>
    2ae2:	0c d0       	rcall	.+24     	; 0x2afc <__udivmodhi4>
    2ae4:	06 d0       	rcall	.+12     	; 0x2af2 <__divmodhi4_neg1>
    2ae6:	00 20       	and	r0, r0
    2ae8:	1a f4       	brpl	.+6      	; 0x2af0 <__divmodhi4_exit>

00002aea <__divmodhi4_neg2>:
    2aea:	70 95       	com	r23
    2aec:	61 95       	neg	r22
    2aee:	7f 4f       	sbci	r23, 0xFF	; 255

00002af0 <__divmodhi4_exit>:
    2af0:	08 95       	ret

00002af2 <__divmodhi4_neg1>:
    2af2:	f6 f7       	brtc	.-4      	; 0x2af0 <__divmodhi4_exit>
    2af4:	90 95       	com	r25
    2af6:	81 95       	neg	r24
    2af8:	9f 4f       	sbci	r25, 0xFF	; 255
    2afa:	08 95       	ret

00002afc <__udivmodhi4>:
    2afc:	aa 1b       	sub	r26, r26
    2afe:	bb 1b       	sub	r27, r27
    2b00:	51 e1       	ldi	r21, 0x11	; 17
    2b02:	07 c0       	rjmp	.+14     	; 0x2b12 <__udivmodhi4_ep>

00002b04 <__udivmodhi4_loop>:
    2b04:	aa 1f       	adc	r26, r26
    2b06:	bb 1f       	adc	r27, r27
    2b08:	a6 17       	cp	r26, r22
    2b0a:	b7 07       	cpc	r27, r23
    2b0c:	10 f0       	brcs	.+4      	; 0x2b12 <__udivmodhi4_ep>
    2b0e:	a6 1b       	sub	r26, r22
    2b10:	b7 0b       	sbc	r27, r23

00002b12 <__udivmodhi4_ep>:
    2b12:	88 1f       	adc	r24, r24
    2b14:	99 1f       	adc	r25, r25
    2b16:	5a 95       	dec	r21
    2b18:	a9 f7       	brne	.-22     	; 0x2b04 <__udivmodhi4_loop>
    2b1a:	80 95       	com	r24
    2b1c:	90 95       	com	r25
    2b1e:	bc 01       	movw	r22, r24
    2b20:	cd 01       	movw	r24, r26
    2b22:	08 95       	ret

00002b24 <__tablejump2__>:
    2b24:	ee 0f       	add	r30, r30
    2b26:	ff 1f       	adc	r31, r31

00002b28 <__tablejump__>:
    2b28:	05 90       	lpm	r0, Z+
    2b2a:	f4 91       	lpm	r31, Z
    2b2c:	e0 2d       	mov	r30, r0
    2b2e:	09 94       	ijmp

00002b30 <atoi>:
    2b30:	fc 01       	movw	r30, r24
    2b32:	88 27       	eor	r24, r24
    2b34:	99 27       	eor	r25, r25
    2b36:	e8 94       	clt
    2b38:	21 91       	ld	r18, Z+
    2b3a:	20 32       	cpi	r18, 0x20	; 32
    2b3c:	e9 f3       	breq	.-6      	; 0x2b38 <atoi+0x8>
    2b3e:	29 30       	cpi	r18, 0x09	; 9
    2b40:	10 f0       	brcs	.+4      	; 0x2b46 <atoi+0x16>
    2b42:	2e 30       	cpi	r18, 0x0E	; 14
    2b44:	c8 f3       	brcs	.-14     	; 0x2b38 <atoi+0x8>
    2b46:	2b 32       	cpi	r18, 0x2B	; 43
    2b48:	41 f0       	breq	.+16     	; 0x2b5a <atoi+0x2a>
    2b4a:	2d 32       	cpi	r18, 0x2D	; 45
    2b4c:	39 f4       	brne	.+14     	; 0x2b5c <atoi+0x2c>
    2b4e:	68 94       	set
    2b50:	04 c0       	rjmp	.+8      	; 0x2b5a <atoi+0x2a>
    2b52:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__mulhi_const_10>
    2b56:	82 0f       	add	r24, r18
    2b58:	91 1d       	adc	r25, r1
    2b5a:	21 91       	ld	r18, Z+
    2b5c:	20 53       	subi	r18, 0x30	; 48
    2b5e:	2a 30       	cpi	r18, 0x0A	; 10
    2b60:	c0 f3       	brcs	.-16     	; 0x2b52 <atoi+0x22>
    2b62:	1e f4       	brtc	.+6      	; 0x2b6a <atoi+0x3a>
    2b64:	90 95       	com	r25
    2b66:	81 95       	neg	r24
    2b68:	9f 4f       	sbci	r25, 0xFF	; 255
    2b6a:	08 95       	ret

00002b6c <strcat>:
    2b6c:	fb 01       	movw	r30, r22
    2b6e:	dc 01       	movw	r26, r24
    2b70:	0d 90       	ld	r0, X+
    2b72:	00 20       	and	r0, r0
    2b74:	e9 f7       	brne	.-6      	; 0x2b70 <strcat+0x4>
    2b76:	11 97       	sbiw	r26, 0x01	; 1
    2b78:	01 90       	ld	r0, Z+
    2b7a:	0d 92       	st	X+, r0
    2b7c:	00 20       	and	r0, r0
    2b7e:	e1 f7       	brne	.-8      	; 0x2b78 <strcat+0xc>
    2b80:	08 95       	ret

00002b82 <strcmp>:
    2b82:	fb 01       	movw	r30, r22
    2b84:	dc 01       	movw	r26, r24
    2b86:	8d 91       	ld	r24, X+
    2b88:	01 90       	ld	r0, Z+
    2b8a:	80 19       	sub	r24, r0
    2b8c:	01 10       	cpse	r0, r1
    2b8e:	d9 f3       	breq	.-10     	; 0x2b86 <strcmp+0x4>
    2b90:	99 0b       	sbc	r25, r25
    2b92:	08 95       	ret

00002b94 <strcpy>:
    2b94:	fb 01       	movw	r30, r22
    2b96:	dc 01       	movw	r26, r24
    2b98:	01 90       	ld	r0, Z+
    2b9a:	0d 92       	st	X+, r0
    2b9c:	00 20       	and	r0, r0
    2b9e:	e1 f7       	brne	.-8      	; 0x2b98 <strcpy+0x4>
    2ba0:	08 95       	ret

00002ba2 <itoa>:
    2ba2:	fb 01       	movw	r30, r22
    2ba4:	9f 01       	movw	r18, r30
    2ba6:	e8 94       	clt
    2ba8:	42 30       	cpi	r20, 0x02	; 2
    2baa:	c4 f0       	brlt	.+48     	; 0x2bdc <itoa+0x3a>
    2bac:	45 32       	cpi	r20, 0x25	; 37
    2bae:	b4 f4       	brge	.+44     	; 0x2bdc <itoa+0x3a>
    2bb0:	4a 30       	cpi	r20, 0x0A	; 10
    2bb2:	29 f4       	brne	.+10     	; 0x2bbe <itoa+0x1c>
    2bb4:	97 fb       	bst	r25, 7
    2bb6:	1e f4       	brtc	.+6      	; 0x2bbe <itoa+0x1c>
    2bb8:	90 95       	com	r25
    2bba:	81 95       	neg	r24
    2bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    2bbe:	64 2f       	mov	r22, r20
    2bc0:	77 27       	eor	r23, r23
    2bc2:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__udivmodhi4>
    2bc6:	80 5d       	subi	r24, 0xD0	; 208
    2bc8:	8a 33       	cpi	r24, 0x3A	; 58
    2bca:	0c f0       	brlt	.+2      	; 0x2bce <itoa+0x2c>
    2bcc:	89 5d       	subi	r24, 0xD9	; 217
    2bce:	81 93       	st	Z+, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	00 97       	sbiw	r24, 0x00	; 0
    2bd4:	a1 f7       	brne	.-24     	; 0x2bbe <itoa+0x1c>
    2bd6:	16 f4       	brtc	.+4      	; 0x2bdc <itoa+0x3a>
    2bd8:	5d e2       	ldi	r21, 0x2D	; 45
    2bda:	51 93       	st	Z+, r21
    2bdc:	10 82       	st	Z, r1
    2bde:	c9 01       	movw	r24, r18
    2be0:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <strrev>

00002be4 <__mulhi_const_10>:
    2be4:	7a e0       	ldi	r23, 0x0A	; 10
    2be6:	97 9f       	mul	r25, r23
    2be8:	90 2d       	mov	r25, r0
    2bea:	87 9f       	mul	r24, r23
    2bec:	80 2d       	mov	r24, r0
    2bee:	91 0d       	add	r25, r1
    2bf0:	11 24       	eor	r1, r1
    2bf2:	08 95       	ret

00002bf4 <utoa>:
    2bf4:	fb 01       	movw	r30, r22
    2bf6:	9f 01       	movw	r18, r30
    2bf8:	42 30       	cpi	r20, 0x02	; 2
    2bfa:	74 f0       	brlt	.+28     	; 0x2c18 <utoa+0x24>
    2bfc:	45 32       	cpi	r20, 0x25	; 37
    2bfe:	64 f4       	brge	.+24     	; 0x2c18 <utoa+0x24>
    2c00:	64 2f       	mov	r22, r20
    2c02:	77 27       	eor	r23, r23
    2c04:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__udivmodhi4>
    2c08:	80 5d       	subi	r24, 0xD0	; 208
    2c0a:	8a 33       	cpi	r24, 0x3A	; 58
    2c0c:	0c f0       	brlt	.+2      	; 0x2c10 <utoa+0x1c>
    2c0e:	89 5d       	subi	r24, 0xD9	; 217
    2c10:	81 93       	st	Z+, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	00 97       	sbiw	r24, 0x00	; 0
    2c16:	a1 f7       	brne	.-24     	; 0x2c00 <utoa+0xc>
    2c18:	10 82       	st	Z, r1
    2c1a:	c9 01       	movw	r24, r18
    2c1c:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <strrev>

00002c20 <__eerd_byte_m324pa>:
    2c20:	f9 99       	sbic	0x1f, 1	; 31
    2c22:	fe cf       	rjmp	.-4      	; 0x2c20 <__eerd_byte_m324pa>
    2c24:	92 bd       	out	0x22, r25	; 34
    2c26:	81 bd       	out	0x21, r24	; 33
    2c28:	f8 9a       	sbi	0x1f, 0	; 31
    2c2a:	99 27       	eor	r25, r25
    2c2c:	80 b5       	in	r24, 0x20	; 32
    2c2e:	08 95       	ret

00002c30 <__eerd_word_m324pa>:
    2c30:	a8 e1       	ldi	r26, 0x18	; 24
    2c32:	b0 e0       	ldi	r27, 0x00	; 0
    2c34:	42 e0       	ldi	r20, 0x02	; 2
    2c36:	50 e0       	ldi	r21, 0x00	; 0
    2c38:	0c 94 43 16 	jmp	0x2c86	; 0x2c86 <__eerd_blraw_m324pa>

00002c3c <__eewr_byte_m324pa>:
    2c3c:	26 2f       	mov	r18, r22

00002c3e <__eewr_r18_m324pa>:
    2c3e:	f9 99       	sbic	0x1f, 1	; 31
    2c40:	fe cf       	rjmp	.-4      	; 0x2c3e <__eewr_r18_m324pa>
    2c42:	1f ba       	out	0x1f, r1	; 31
    2c44:	92 bd       	out	0x22, r25	; 34
    2c46:	81 bd       	out	0x21, r24	; 33
    2c48:	20 bd       	out	0x20, r18	; 32
    2c4a:	0f b6       	in	r0, 0x3f	; 63
    2c4c:	f8 94       	cli
    2c4e:	fa 9a       	sbi	0x1f, 2	; 31
    2c50:	f9 9a       	sbi	0x1f, 1	; 31
    2c52:	0f be       	out	0x3f, r0	; 63
    2c54:	01 96       	adiw	r24, 0x01	; 1
    2c56:	08 95       	ret

00002c58 <__eewr_word_m324pa>:
    2c58:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <__eewr_byte_m324pa>
    2c5c:	27 2f       	mov	r18, r23
    2c5e:	0c 94 1f 16 	jmp	0x2c3e	; 0x2c3e <__eewr_r18_m324pa>

00002c62 <strrev>:
    2c62:	dc 01       	movw	r26, r24
    2c64:	fc 01       	movw	r30, r24
    2c66:	67 2f       	mov	r22, r23
    2c68:	71 91       	ld	r23, Z+
    2c6a:	77 23       	and	r23, r23
    2c6c:	e1 f7       	brne	.-8      	; 0x2c66 <strrev+0x4>
    2c6e:	32 97       	sbiw	r30, 0x02	; 2
    2c70:	04 c0       	rjmp	.+8      	; 0x2c7a <strrev+0x18>
    2c72:	7c 91       	ld	r23, X
    2c74:	6d 93       	st	X+, r22
    2c76:	70 83       	st	Z, r23
    2c78:	62 91       	ld	r22, -Z
    2c7a:	ae 17       	cp	r26, r30
    2c7c:	bf 07       	cpc	r27, r31
    2c7e:	c8 f3       	brcs	.-14     	; 0x2c72 <strrev+0x10>
    2c80:	08 95       	ret

00002c82 <__eerd_block_m324pa>:
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22

00002c86 <__eerd_blraw_m324pa>:
    2c86:	fc 01       	movw	r30, r24
    2c88:	f9 99       	sbic	0x1f, 1	; 31
    2c8a:	fe cf       	rjmp	.-4      	; 0x2c88 <__eerd_blraw_m324pa+0x2>
    2c8c:	06 c0       	rjmp	.+12     	; 0x2c9a <__eerd_blraw_m324pa+0x14>
    2c8e:	f2 bd       	out	0x22, r31	; 34
    2c90:	e1 bd       	out	0x21, r30	; 33
    2c92:	f8 9a       	sbi	0x1f, 0	; 31
    2c94:	31 96       	adiw	r30, 0x01	; 1
    2c96:	00 b4       	in	r0, 0x20	; 32
    2c98:	0d 92       	st	X+, r0
    2c9a:	41 50       	subi	r20, 0x01	; 1
    2c9c:	50 40       	sbci	r21, 0x00	; 0
    2c9e:	b8 f7       	brcc	.-18     	; 0x2c8e <__eerd_blraw_m324pa+0x8>
    2ca0:	08 95       	ret

00002ca2 <_exit>:
    2ca2:	f8 94       	cli

00002ca4 <__stop_program>:
    2ca4:	ff cf       	rjmp	.-2      	; 0x2ca4 <__stop_program>
