
WAVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d2  00800100  00003b2c  00003be0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003b2c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  008001d2  008001d2  00003cb2  2**0
                  ALLOC
  3 .eeprom       00000007  00810000  00810000  00003cb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000011f4  00000000  00000000  00003cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000005eb  00000000  00000000  00004eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000120  00000000  00000000  000054a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000022c1  00000000  00000000  000055c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000393  00000000  00000000  00007881  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000fd3  00000000  00000000  00007c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008cc  00000000  00000000  00008be8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000b4b  00000000  00000000  000094b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001290  00000000  00000000  00009fff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  0000b28f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__vector_3>
      10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      18:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__vector_6>
      1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      2c:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <__vector_11>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__vector_20>
      54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      68:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      6c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      70:	0c 94 c2 14 	jmp	0x2984	; 0x2984 <__vector_28>
      74:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      78:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

0000007c <__ctors_start>:
      7c:	87 1c       	adc	r8, r7

0000007e <__ctors_end>:
      7e:	11 24       	eor	r1, r1
      80:	1f be       	out	0x3f, r1	; 63
      82:	cf ef       	ldi	r28, 0xFF	; 255
      84:	d0 e1       	ldi	r29, 0x10	; 16
      86:	de bf       	out	0x3e, r29	; 62
      88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_copy_data>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 e0       	ldi	r26, 0x00	; 0
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	ec e2       	ldi	r30, 0x2C	; 44
      92:	fb e3       	ldi	r31, 0x3B	; 59
      94:	02 c0       	rjmp	.+4      	; 0x9a <__do_copy_data+0x10>
      96:	05 90       	lpm	r0, Z+
      98:	0d 92       	st	X+, r0
      9a:	a2 3d       	cpi	r26, 0xD2	; 210
      9c:	b1 07       	cpc	r27, r17
      9e:	d9 f7       	brne	.-10     	; 0x96 <__do_copy_data+0xc>

000000a0 <__do_clear_bss>:
      a0:	12 e0       	ldi	r17, 0x02	; 2
      a2:	a2 ed       	ldi	r26, 0xD2	; 210
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
      a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
      aa:	ab 31       	cpi	r26, 0x1B	; 27
      ac:	b1 07       	cpc	r27, r17
      ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>

000000b0 <__do_global_ctors>:
      b0:	10 e0       	ldi	r17, 0x00	; 0
      b2:	ce e7       	ldi	r28, 0x7E	; 126
      b4:	d0 e0       	ldi	r29, 0x00	; 0
      b6:	04 c0       	rjmp	.+8      	; 0xc0 <__do_global_ctors+0x10>
      b8:	22 97       	sbiw	r28, 0x02	; 2
      ba:	fe 01       	movw	r30, r28
      bc:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__tablejump__>
      c0:	cc 37       	cpi	r28, 0x7C	; 124
      c2:	d1 07       	cpc	r29, r17
      c4:	c9 f7       	brne	.-14     	; 0xb8 <__do_global_ctors+0x8>
      c6:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <main>
      ca:	0c 94 94 1d 	jmp	0x3b28	; 0x3b28 <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <_ZN6myDateC1Ev>:
		void setYear(int year);
		void addMonths(int months);
		void addYears(int years);
};

myDate::myDate(){
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	00 d0       	rcall	.+0      	; 0xd8 <_ZN6myDateC1Ev+0x6>
      d8:	cd b7       	in	r28, 0x3d	; 61
      da:	de b7       	in	r29, 0x3e	; 62
      dc:	9a 83       	std	Y+2, r25	; 0x02
      de:	89 83       	std	Y+1, r24	; 0x01
	month = 0;
      e0:	89 81       	ldd	r24, Y+1	; 0x01
      e2:	9a 81       	ldd	r25, Y+2	; 0x02
      e4:	fc 01       	movw	r30, r24
      e6:	11 82       	std	Z+1, r1	; 0x01
      e8:	10 82       	st	Z, r1
	day = 0;
      ea:	89 81       	ldd	r24, Y+1	; 0x01
      ec:	9a 81       	ldd	r25, Y+2	; 0x02
      ee:	fc 01       	movw	r30, r24
      f0:	13 82       	std	Z+3, r1	; 0x03
      f2:	12 82       	std	Z+2, r1	; 0x02
	year = 0;
      f4:	89 81       	ldd	r24, Y+1	; 0x01
      f6:	9a 81       	ldd	r25, Y+2	; 0x02
      f8:	fc 01       	movw	r30, r24
      fa:	15 82       	std	Z+5, r1	; 0x05
      fc:	14 82       	std	Z+4, r1	; 0x04
}
      fe:	0f 90       	pop	r0
     100:	0f 90       	pop	r0
     102:	df 91       	pop	r29
     104:	cf 91       	pop	r28
     106:	08 95       	ret

00000108 <_ZN6myDateC1Eiii>:

myDate::myDate(int month,int day,int year){
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
     110:	28 97       	sbiw	r28, 0x08	; 8
     112:	0f b6       	in	r0, 0x3f	; 63
     114:	f8 94       	cli
     116:	de bf       	out	0x3e, r29	; 62
     118:	0f be       	out	0x3f, r0	; 63
     11a:	cd bf       	out	0x3d, r28	; 61
     11c:	9a 83       	std	Y+2, r25	; 0x02
     11e:	89 83       	std	Y+1, r24	; 0x01
     120:	7c 83       	std	Y+4, r23	; 0x04
     122:	6b 83       	std	Y+3, r22	; 0x03
     124:	5e 83       	std	Y+6, r21	; 0x06
     126:	4d 83       	std	Y+5, r20	; 0x05
     128:	38 87       	std	Y+8, r19	; 0x08
     12a:	2f 83       	std	Y+7, r18	; 0x07
	setDate(month,day,year);
     12c:	89 81       	ldd	r24, Y+1	; 0x01
     12e:	9a 81       	ldd	r25, Y+2	; 0x02
     130:	6b 81       	ldd	r22, Y+3	; 0x03
     132:	7c 81       	ldd	r23, Y+4	; 0x04
     134:	4d 81       	ldd	r20, Y+5	; 0x05
     136:	5e 81       	ldd	r21, Y+6	; 0x06
     138:	2f 81       	ldd	r18, Y+7	; 0x07
     13a:	38 85       	ldd	r19, Y+8	; 0x08
     13c:	0e 94 84 01 	call	0x308	; 0x308 <_ZN6myDate7setDateEiii>
}
     140:	28 96       	adiw	r28, 0x08	; 8
     142:	0f b6       	in	r0, 0x3f	; 63
     144:	f8 94       	cli
     146:	de bf       	out	0x3e, r29	; 62
     148:	0f be       	out	0x3f, r0	; 63
     14a:	cd bf       	out	0x3d, r28	; 61
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	08 95       	ret

00000152 <_ZN6myDate9getMonthsEv>:

BYTE myDate::getMonths(){
     152:	cf 93       	push	r28
     154:	df 93       	push	r29
     156:	00 d0       	rcall	.+0      	; 0x158 <_ZN6myDate9getMonthsEv+0x6>
     158:	cd b7       	in	r28, 0x3d	; 61
     15a:	de b7       	in	r29, 0x3e	; 62
     15c:	9a 83       	std	Y+2, r25	; 0x02
     15e:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)month;
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	9a 81       	ldd	r25, Y+2	; 0x02
     164:	fc 01       	movw	r30, r24
     166:	80 81       	ld	r24, Z
     168:	91 81       	ldd	r25, Z+1	; 0x01
}
     16a:	0f 90       	pop	r0
     16c:	0f 90       	pop	r0
     16e:	df 91       	pop	r29
     170:	cf 91       	pop	r28
     172:	08 95       	ret

00000174 <_ZN6myDate8getYearsEv>:

WORD myDate::getYears(){
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
     178:	00 d0       	rcall	.+0      	; 0x17a <_ZN6myDate8getYearsEv+0x6>
     17a:	cd b7       	in	r28, 0x3d	; 61
     17c:	de b7       	in	r29, 0x3e	; 62
     17e:	9a 83       	std	Y+2, r25	; 0x02
     180:	89 83       	std	Y+1, r24	; 0x01
	return (WORD)year;
     182:	89 81       	ldd	r24, Y+1	; 0x01
     184:	9a 81       	ldd	r25, Y+2	; 0x02
     186:	fc 01       	movw	r30, r24
     188:	84 81       	ldd	r24, Z+4	; 0x04
     18a:	95 81       	ldd	r25, Z+5	; 0x05
}
     18c:	0f 90       	pop	r0
     18e:	0f 90       	pop	r0
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <_ZN6myDate7getDaysEv>:

BYTE myDate::getDays(){
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	00 d0       	rcall	.+0      	; 0x19c <_ZN6myDate7getDaysEv+0x6>
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
     1a0:	9a 83       	std	Y+2, r25	; 0x02
     1a2:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)day;
     1a4:	89 81       	ldd	r24, Y+1	; 0x01
     1a6:	9a 81       	ldd	r25, Y+2	; 0x02
     1a8:	fc 01       	movw	r30, r24
     1aa:	82 81       	ldd	r24, Z+2	; 0x02
     1ac:	93 81       	ldd	r25, Z+3	; 0x03
}
     1ae:	0f 90       	pop	r0
     1b0:	0f 90       	pop	r0
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	08 95       	ret

000001b8 <_ZN6myDate8setMonthEi>:

void myDate::setMonth(int month){
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	00 d0       	rcall	.+0      	; 0x1be <_ZN6myDate8setMonthEi+0x6>
     1be:	00 d0       	rcall	.+0      	; 0x1c0 <_ZN6myDate8setMonthEi+0x8>
     1c0:	cd b7       	in	r28, 0x3d	; 61
     1c2:	de b7       	in	r29, 0x3e	; 62
     1c4:	9a 83       	std	Y+2, r25	; 0x02
     1c6:	89 83       	std	Y+1, r24	; 0x01
     1c8:	7c 83       	std	Y+4, r23	; 0x04
     1ca:	6b 83       	std	Y+3, r22	; 0x03
	if (month/13 == 0){
     1cc:	8b 81       	ldd	r24, Y+3	; 0x03
     1ce:	9c 81       	ldd	r25, Y+4	; 0x04
     1d0:	0c 96       	adiw	r24, 0x0c	; 12
     1d2:	89 31       	cpi	r24, 0x19	; 25
     1d4:	91 05       	cpc	r25, r1
     1d6:	38 f4       	brcc	.+14     	; 0x1e6 <_ZN6myDate8setMonthEi+0x2e>
		this->month = month;
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
     1da:	9a 81       	ldd	r25, Y+2	; 0x02
     1dc:	2b 81       	ldd	r18, Y+3	; 0x03
     1de:	3c 81       	ldd	r19, Y+4	; 0x04
     1e0:	fc 01       	movw	r30, r24
     1e2:	31 83       	std	Z+1, r19	; 0x01
     1e4:	20 83       	st	Z, r18
	}
}
     1e6:	0f 90       	pop	r0
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <_ZN6myDate6setDayEi>:

void myDate::setDay(int day){
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	00 d0       	rcall	.+0      	; 0x1fa <_ZN6myDate6setDayEi+0x6>
     1fa:	00 d0       	rcall	.+0      	; 0x1fc <_ZN6myDate6setDayEi+0x8>
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
     200:	9a 83       	std	Y+2, r25	; 0x02
     202:	89 83       	std	Y+1, r24	; 0x01
     204:	7c 83       	std	Y+4, r23	; 0x04
     206:	6b 83       	std	Y+3, r22	; 0x03
	if ((month == 9 || month == 4 || month == 6) && day/31 == 0){
     208:	89 81       	ldd	r24, Y+1	; 0x01
     20a:	9a 81       	ldd	r25, Y+2	; 0x02
     20c:	fc 01       	movw	r30, r24
     20e:	80 81       	ld	r24, Z
     210:	91 81       	ldd	r25, Z+1	; 0x01
     212:	89 30       	cpi	r24, 0x09	; 9
     214:	91 05       	cpc	r25, r1
     216:	81 f0       	breq	.+32     	; 0x238 <_ZN6myDate6setDayEi+0x44>
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	9a 81       	ldd	r25, Y+2	; 0x02
     21c:	fc 01       	movw	r30, r24
     21e:	80 81       	ld	r24, Z
     220:	91 81       	ldd	r25, Z+1	; 0x01
     222:	84 30       	cpi	r24, 0x04	; 4
     224:	91 05       	cpc	r25, r1
     226:	41 f0       	breq	.+16     	; 0x238 <_ZN6myDate6setDayEi+0x44>
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	9a 81       	ldd	r25, Y+2	; 0x02
     22c:	fc 01       	movw	r30, r24
     22e:	80 81       	ld	r24, Z
     230:	91 81       	ldd	r25, Z+1	; 0x01
     232:	86 30       	cpi	r24, 0x06	; 6
     234:	91 05       	cpc	r25, r1
     236:	41 f4       	brne	.+16     	; 0x248 <_ZN6myDate6setDayEi+0x54>
     238:	8b 81       	ldd	r24, Y+3	; 0x03
     23a:	9c 81       	ldd	r25, Y+4	; 0x04
     23c:	4e 96       	adiw	r24, 0x1e	; 30
     23e:	8d 33       	cpi	r24, 0x3D	; 61
     240:	91 05       	cpc	r25, r1
     242:	10 f4       	brcc	.+4      	; 0x248 <_ZN6myDate6setDayEi+0x54>
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	01 c0       	rjmp	.+2      	; 0x24a <_ZN6myDate6setDayEi+0x56>
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	88 23       	and	r24, r24
     24c:	41 f0       	breq	.+16     	; 0x25e <_ZN6myDate6setDayEi+0x6a>
		this->day = day;
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	9a 81       	ldd	r25, Y+2	; 0x02
     252:	2b 81       	ldd	r18, Y+3	; 0x03
     254:	3c 81       	ldd	r19, Y+4	; 0x04
     256:	fc 01       	movw	r30, r24
     258:	33 83       	std	Z+3, r19	; 0x03
     25a:	22 83       	std	Z+2, r18	; 0x02
     25c:	28 c0       	rjmp	.+80     	; 0x2ae <_ZN6myDate6setDayEi+0xba>
	} else if (month == 2 && day/29 == 0){
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	9a 81       	ldd	r25, Y+2	; 0x02
     262:	fc 01       	movw	r30, r24
     264:	80 81       	ld	r24, Z
     266:	91 81       	ldd	r25, Z+1	; 0x01
     268:	82 30       	cpi	r24, 0x02	; 2
     26a:	91 05       	cpc	r25, r1
     26c:	41 f4       	brne	.+16     	; 0x27e <_ZN6myDate6setDayEi+0x8a>
     26e:	8b 81       	ldd	r24, Y+3	; 0x03
     270:	9c 81       	ldd	r25, Y+4	; 0x04
     272:	4c 96       	adiw	r24, 0x1c	; 28
     274:	89 33       	cpi	r24, 0x39	; 57
     276:	91 05       	cpc	r25, r1
     278:	10 f4       	brcc	.+4      	; 0x27e <_ZN6myDate6setDayEi+0x8a>
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	01 c0       	rjmp	.+2      	; 0x280 <_ZN6myDate6setDayEi+0x8c>
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	88 23       	and	r24, r24
     282:	41 f0       	breq	.+16     	; 0x294 <_ZN6myDate6setDayEi+0xa0>
		this->day = day;
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	9a 81       	ldd	r25, Y+2	; 0x02
     288:	2b 81       	ldd	r18, Y+3	; 0x03
     28a:	3c 81       	ldd	r19, Y+4	; 0x04
     28c:	fc 01       	movw	r30, r24
     28e:	33 83       	std	Z+3, r19	; 0x03
     290:	22 83       	std	Z+2, r18	; 0x02
     292:	0d c0       	rjmp	.+26     	; 0x2ae <_ZN6myDate6setDayEi+0xba>
	} else{
		if (day/32 == 0){
     294:	8b 81       	ldd	r24, Y+3	; 0x03
     296:	9c 81       	ldd	r25, Y+4	; 0x04
     298:	4f 96       	adiw	r24, 0x1f	; 31
     29a:	8f 33       	cpi	r24, 0x3F	; 63
     29c:	91 05       	cpc	r25, r1
     29e:	38 f4       	brcc	.+14     	; 0x2ae <_ZN6myDate6setDayEi+0xba>
			this->day = day;
     2a0:	89 81       	ldd	r24, Y+1	; 0x01
     2a2:	9a 81       	ldd	r25, Y+2	; 0x02
     2a4:	2b 81       	ldd	r18, Y+3	; 0x03
     2a6:	3c 81       	ldd	r19, Y+4	; 0x04
     2a8:	fc 01       	movw	r30, r24
     2aa:	33 83       	std	Z+3, r19	; 0x03
     2ac:	22 83       	std	Z+2, r18	; 0x02
		}		
	}
}
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	08 95       	ret

000002bc <_ZN6myDate7setYearEi>:

void myDate::setYear(int year){
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	00 d0       	rcall	.+0      	; 0x2c2 <_ZN6myDate7setYearEi+0x6>
     2c2:	00 d0       	rcall	.+0      	; 0x2c4 <_ZN6myDate7setYearEi+0x8>
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
     2c8:	9a 83       	std	Y+2, r25	; 0x02
     2ca:	89 83       	std	Y+1, r24	; 0x01
     2cc:	7c 83       	std	Y+4, r23	; 0x04
     2ce:	6b 83       	std	Y+3, r22	; 0x03
	if (year >= 2000){
     2d0:	8b 81       	ldd	r24, Y+3	; 0x03
     2d2:	9c 81       	ldd	r25, Y+4	; 0x04
     2d4:	27 e0       	ldi	r18, 0x07	; 7
     2d6:	80 3d       	cpi	r24, 0xD0	; 208
     2d8:	92 07       	cpc	r25, r18
     2da:	44 f0       	brlt	.+16     	; 0x2ec <_ZN6myDate7setYearEi+0x30>
		this->year = year;
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	9a 81       	ldd	r25, Y+2	; 0x02
     2e0:	2b 81       	ldd	r18, Y+3	; 0x03
     2e2:	3c 81       	ldd	r19, Y+4	; 0x04
     2e4:	fc 01       	movw	r30, r24
     2e6:	35 83       	std	Z+5, r19	; 0x05
     2e8:	24 83       	std	Z+4, r18	; 0x04
     2ea:	07 c0       	rjmp	.+14     	; 0x2fa <_ZN6myDate7setYearEi+0x3e>
	} else {
		this->year = 1010;
     2ec:	89 81       	ldd	r24, Y+1	; 0x01
     2ee:	9a 81       	ldd	r25, Y+2	; 0x02
     2f0:	22 ef       	ldi	r18, 0xF2	; 242
     2f2:	33 e0       	ldi	r19, 0x03	; 3
     2f4:	fc 01       	movw	r30, r24
     2f6:	35 83       	std	Z+5, r19	; 0x05
     2f8:	24 83       	std	Z+4, r18	; 0x04
	}	
}
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	08 95       	ret

00000308 <_ZN6myDate7setDateEiii>:

void myDate::setDate(int month, int day, int year){
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	cd b7       	in	r28, 0x3d	; 61
     30e:	de b7       	in	r29, 0x3e	; 62
     310:	28 97       	sbiw	r28, 0x08	; 8
     312:	0f b6       	in	r0, 0x3f	; 63
     314:	f8 94       	cli
     316:	de bf       	out	0x3e, r29	; 62
     318:	0f be       	out	0x3f, r0	; 63
     31a:	cd bf       	out	0x3d, r28	; 61
     31c:	9a 83       	std	Y+2, r25	; 0x02
     31e:	89 83       	std	Y+1, r24	; 0x01
     320:	7c 83       	std	Y+4, r23	; 0x04
     322:	6b 83       	std	Y+3, r22	; 0x03
     324:	5e 83       	std	Y+6, r21	; 0x06
     326:	4d 83       	std	Y+5, r20	; 0x05
     328:	38 87       	std	Y+8, r19	; 0x08
     32a:	2f 83       	std	Y+7, r18	; 0x07
	setMonth(month);
     32c:	89 81       	ldd	r24, Y+1	; 0x01
     32e:	9a 81       	ldd	r25, Y+2	; 0x02
     330:	2b 81       	ldd	r18, Y+3	; 0x03
     332:	3c 81       	ldd	r19, Y+4	; 0x04
     334:	b9 01       	movw	r22, r18
     336:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN6myDate8setMonthEi>
	setDay(day);
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	9a 81       	ldd	r25, Y+2	; 0x02
     33e:	2d 81       	ldd	r18, Y+5	; 0x05
     340:	3e 81       	ldd	r19, Y+6	; 0x06
     342:	b9 01       	movw	r22, r18
     344:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_ZN6myDate6setDayEi>
	setYear(year);
     348:	89 81       	ldd	r24, Y+1	; 0x01
     34a:	9a 81       	ldd	r25, Y+2	; 0x02
     34c:	2f 81       	ldd	r18, Y+7	; 0x07
     34e:	38 85       	ldd	r19, Y+8	; 0x08
     350:	b9 01       	movw	r22, r18
     352:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_ZN6myDate7setYearEi>
}
     356:	28 96       	adiw	r28, 0x08	; 8
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	0f be       	out	0x3f, r0	; 63
     360:	cd bf       	out	0x3d, r28	; 61
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	08 95       	ret

00000368 <_ZN6myDate8addYearsEi>:


void myDate::addYears(int years){	//allows negative years to come in, therefore subtracting years
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	00 d0       	rcall	.+0      	; 0x36e <_ZN6myDate8addYearsEi+0x6>
     36e:	00 d0       	rcall	.+0      	; 0x370 <_ZN6myDate8addYearsEi+0x8>
     370:	00 d0       	rcall	.+0      	; 0x372 <_ZN6myDate8addYearsEi+0xa>
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	9c 83       	std	Y+4, r25	; 0x04
     378:	8b 83       	std	Y+3, r24	; 0x03
     37a:	7e 83       	std	Y+6, r23	; 0x06
     37c:	6d 83       	std	Y+5, r22	; 0x05
	volatile int tempYears = year + years;
     37e:	8b 81       	ldd	r24, Y+3	; 0x03
     380:	9c 81       	ldd	r25, Y+4	; 0x04
     382:	fc 01       	movw	r30, r24
     384:	24 81       	ldd	r18, Z+4	; 0x04
     386:	35 81       	ldd	r19, Z+5	; 0x05
     388:	8d 81       	ldd	r24, Y+5	; 0x05
     38a:	9e 81       	ldd	r25, Y+6	; 0x06
     38c:	82 0f       	add	r24, r18
     38e:	93 1f       	adc	r25, r19
     390:	9a 83       	std	Y+2, r25	; 0x02
     392:	89 83       	std	Y+1, r24	; 0x01
	if (tempYears > 2012){
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	9a 81       	ldd	r25, Y+2	; 0x02
     398:	21 e0       	ldi	r18, 0x01	; 1
     39a:	f7 e0       	ldi	r31, 0x07	; 7
     39c:	8d 3d       	cpi	r24, 0xDD	; 221
     39e:	9f 07       	cpc	r25, r31
     3a0:	0c f4       	brge	.+2      	; 0x3a4 <_ZN6myDate8addYearsEi+0x3c>
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	22 23       	and	r18, r18
     3a6:	39 f0       	breq	.+14     	; 0x3b6 <_ZN6myDate8addYearsEi+0x4e>
		year = tempYears;
     3a8:	29 81       	ldd	r18, Y+1	; 0x01
     3aa:	3a 81       	ldd	r19, Y+2	; 0x02
     3ac:	8b 81       	ldd	r24, Y+3	; 0x03
     3ae:	9c 81       	ldd	r25, Y+4	; 0x04
     3b0:	fc 01       	movw	r30, r24
     3b2:	35 83       	std	Z+5, r19	; 0x05
     3b4:	24 83       	std	Z+4, r18	; 0x04
	}
}
     3b6:	26 96       	adiw	r28, 0x06	; 6
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	f8 94       	cli
     3bc:	de bf       	out	0x3e, r29	; 62
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	cd bf       	out	0x3d, r28	; 61
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <_ZN6myDate9addMonthsEi>:

void myDate::addMonths(int months){	//adds months depending on number of months currently on.
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
     3d0:	2a 97       	sbiw	r28, 0x0a	; 10
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	f8 94       	cli
     3d6:	de bf       	out	0x3e, r29	; 62
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	cd bf       	out	0x3d, r28	; 61
     3dc:	98 87       	std	Y+8, r25	; 0x08
     3de:	8f 83       	std	Y+7, r24	; 0x07
     3e0:	7a 87       	std	Y+10, r23	; 0x0a
     3e2:	69 87       	std	Y+9, r22	; 0x09
	volatile int tempMonths = month + months;
     3e4:	8f 81       	ldd	r24, Y+7	; 0x07
     3e6:	98 85       	ldd	r25, Y+8	; 0x08
     3e8:	fc 01       	movw	r30, r24
     3ea:	20 81       	ld	r18, Z
     3ec:	31 81       	ldd	r19, Z+1	; 0x01
     3ee:	89 85       	ldd	r24, Y+9	; 0x09
     3f0:	9a 85       	ldd	r25, Y+10	; 0x0a
     3f2:	82 0f       	add	r24, r18
     3f4:	93 1f       	adc	r25, r19
     3f6:	9e 83       	std	Y+6, r25	; 0x06
     3f8:	8d 83       	std	Y+5, r24	; 0x05
	if (tempMonths > 12 && tempMonths < 25){
     3fa:	8d 81       	ldd	r24, Y+5	; 0x05
     3fc:	9e 81       	ldd	r25, Y+6	; 0x06
     3fe:	8d 30       	cpi	r24, 0x0D	; 13
     400:	91 05       	cpc	r25, r1
     402:	3c f0       	brlt	.+14     	; 0x412 <_ZN6myDate9addMonthsEi+0x4a>
     404:	8d 81       	ldd	r24, Y+5	; 0x05
     406:	9e 81       	ldd	r25, Y+6	; 0x06
     408:	89 31       	cpi	r24, 0x19	; 25
     40a:	91 05       	cpc	r25, r1
     40c:	14 f4       	brge	.+4      	; 0x412 <_ZN6myDate9addMonthsEi+0x4a>
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	01 c0       	rjmp	.+2      	; 0x414 <_ZN6myDate9addMonthsEi+0x4c>
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	88 23       	and	r24, r24
     416:	61 f0       	breq	.+24     	; 0x430 <_ZN6myDate9addMonthsEi+0x68>
		int yearsToAdd = 1;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	9a 83       	std	Y+2, r25	; 0x02
     41e:	89 83       	std	Y+1, r24	; 0x01
		addYears(yearsToAdd);
     420:	8f 81       	ldd	r24, Y+7	; 0x07
     422:	98 85       	ldd	r25, Y+8	; 0x08
     424:	29 81       	ldd	r18, Y+1	; 0x01
     426:	3a 81       	ldd	r19, Y+2	; 0x02
     428:	b9 01       	movw	r22, r18
     42a:	0e 94 b4 01 	call	0x368	; 0x368 <_ZN6myDate8addYearsEi>
     42e:	22 c0       	rjmp	.+68     	; 0x474 <_ZN6myDate9addMonthsEi+0xac>
	} else if (tempMonths >= 25){
     430:	8d 81       	ldd	r24, Y+5	; 0x05
     432:	9e 81       	ldd	r25, Y+6	; 0x06
     434:	21 e0       	ldi	r18, 0x01	; 1
     436:	89 31       	cpi	r24, 0x19	; 25
     438:	91 05       	cpc	r25, r1
     43a:	0c f4       	brge	.+2      	; 0x43e <_ZN6myDate9addMonthsEi+0x76>
     43c:	20 e0       	ldi	r18, 0x00	; 0
     43e:	22 23       	and	r18, r18
     440:	91 f0       	breq	.+36     	; 0x466 <_ZN6myDate9addMonthsEi+0x9e>
		int yearsToAdd = tempMonths/12;
     442:	8d 81       	ldd	r24, Y+5	; 0x05
     444:	9e 81       	ldd	r25, Y+6	; 0x06
     446:	2c e0       	ldi	r18, 0x0C	; 12
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	b9 01       	movw	r22, r18
     44c:	0e 94 a0 1c 	call	0x3940	; 0x3940 <__divmodhi4>
     450:	9b 01       	movw	r18, r22
     452:	3c 83       	std	Y+4, r19	; 0x04
     454:	2b 83       	std	Y+3, r18	; 0x03
		addYears(yearsToAdd);
     456:	8f 81       	ldd	r24, Y+7	; 0x07
     458:	98 85       	ldd	r25, Y+8	; 0x08
     45a:	2b 81       	ldd	r18, Y+3	; 0x03
     45c:	3c 81       	ldd	r19, Y+4	; 0x04
     45e:	b9 01       	movw	r22, r18
     460:	0e 94 b4 01 	call	0x368	; 0x368 <_ZN6myDate8addYearsEi>
     464:	07 c0       	rjmp	.+14     	; 0x474 <_ZN6myDate9addMonthsEi+0xac>
	} else {
		month = tempMonths;
     466:	2d 81       	ldd	r18, Y+5	; 0x05
     468:	3e 81       	ldd	r19, Y+6	; 0x06
     46a:	8f 81       	ldd	r24, Y+7	; 0x07
     46c:	98 85       	ldd	r25, Y+8	; 0x08
     46e:	fc 01       	movw	r30, r24
     470:	31 83       	std	Z+1, r19	; 0x01
     472:	20 83       	st	Z, r18
	}	
}
     474:	2a 96       	adiw	r28, 0x0a	; 10
     476:	0f b6       	in	r0, 0x3f	; 63
     478:	f8 94       	cli
     47a:	de bf       	out	0x3e, r29	; 62
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	cd bf       	out	0x3d, r28	; 61
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <_ZN6myDate7addDaysEi>:

void myDate::addDays(int days){
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	00 d0       	rcall	.+0      	; 0x48c <_ZN6myDate7addDaysEi+0x6>
     48c:	00 d0       	rcall	.+0      	; 0x48e <_ZN6myDate7addDaysEi+0x8>
     48e:	00 d0       	rcall	.+0      	; 0x490 <_ZN6myDate7addDaysEi+0xa>
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
     494:	9c 83       	std	Y+4, r25	; 0x04
     496:	8b 83       	std	Y+3, r24	; 0x03
     498:	7e 83       	std	Y+6, r23	; 0x06
     49a:	6d 83       	std	Y+5, r22	; 0x05
	volatile int tempDays = days + day;
     49c:	8b 81       	ldd	r24, Y+3	; 0x03
     49e:	9c 81       	ldd	r25, Y+4	; 0x04
     4a0:	fc 01       	movw	r30, r24
     4a2:	22 81       	ldd	r18, Z+2	; 0x02
     4a4:	33 81       	ldd	r19, Z+3	; 0x03
     4a6:	8d 81       	ldd	r24, Y+5	; 0x05
     4a8:	9e 81       	ldd	r25, Y+6	; 0x06
     4aa:	82 0f       	add	r24, r18
     4ac:	93 1f       	adc	r25, r19
     4ae:	9a 83       	std	Y+2, r25	; 0x02
     4b0:	89 83       	std	Y+1, r24	; 0x01
	//Logic for incrementing days the right way. We are assuming no more than one month will be added
	if (month == 9 || month == 4 || month == 6){	//30 days in a month
     4b2:	8b 81       	ldd	r24, Y+3	; 0x03
     4b4:	9c 81       	ldd	r25, Y+4	; 0x04
     4b6:	fc 01       	movw	r30, r24
     4b8:	80 81       	ld	r24, Z
     4ba:	91 81       	ldd	r25, Z+1	; 0x01
     4bc:	89 30       	cpi	r24, 0x09	; 9
     4be:	91 05       	cpc	r25, r1
     4c0:	81 f0       	breq	.+32     	; 0x4e2 <_ZN6myDate7addDaysEi+0x5c>
     4c2:	8b 81       	ldd	r24, Y+3	; 0x03
     4c4:	9c 81       	ldd	r25, Y+4	; 0x04
     4c6:	fc 01       	movw	r30, r24
     4c8:	80 81       	ld	r24, Z
     4ca:	91 81       	ldd	r25, Z+1	; 0x01
     4cc:	84 30       	cpi	r24, 0x04	; 4
     4ce:	91 05       	cpc	r25, r1
     4d0:	41 f0       	breq	.+16     	; 0x4e2 <_ZN6myDate7addDaysEi+0x5c>
     4d2:	8b 81       	ldd	r24, Y+3	; 0x03
     4d4:	9c 81       	ldd	r25, Y+4	; 0x04
     4d6:	fc 01       	movw	r30, r24
     4d8:	80 81       	ld	r24, Z
     4da:	91 81       	ldd	r25, Z+1	; 0x01
     4dc:	86 30       	cpi	r24, 0x06	; 6
     4de:	91 05       	cpc	r25, r1
     4e0:	11 f4       	brne	.+4      	; 0x4e6 <_ZN6myDate7addDaysEi+0x60>
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <_ZN6myDate7addDaysEi+0x62>
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	88 23       	and	r24, r24
     4ea:	31 f1       	breq	.+76     	; 0x538 <_ZN6myDate7addDaysEi+0xb2>
		if (tempDays/31 == 0){	
     4ec:	89 81       	ldd	r24, Y+1	; 0x01
     4ee:	9a 81       	ldd	r25, Y+2	; 0x02
     4f0:	4e 96       	adiw	r24, 0x1e	; 30
     4f2:	21 e0       	ldi	r18, 0x01	; 1
     4f4:	8d 33       	cpi	r24, 0x3D	; 61
     4f6:	91 05       	cpc	r25, r1
     4f8:	08 f0       	brcs	.+2      	; 0x4fc <_ZN6myDate7addDaysEi+0x76>
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	22 23       	and	r18, r18
     4fe:	41 f0       	breq	.+16     	; 0x510 <_ZN6myDate7addDaysEi+0x8a>
			day = tempDays;
     500:	29 81       	ldd	r18, Y+1	; 0x01
     502:	3a 81       	ldd	r19, Y+2	; 0x02
     504:	8b 81       	ldd	r24, Y+3	; 0x03
     506:	9c 81       	ldd	r25, Y+4	; 0x04
     508:	fc 01       	movw	r30, r24
     50a:	33 83       	std	Z+3, r19	; 0x03
     50c:	22 83       	std	Z+2, r18	; 0x02
     50e:	71 c0       	rjmp	.+226    	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		} else {
			addMonths(1);	//just add 1 month
     510:	8b 81       	ldd	r24, Y+3	; 0x03
     512:	9c 81       	ldd	r25, Y+4	; 0x04
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN6myDate9addMonthsEi>
			day = tempDays%31;			
     51c:	89 81       	ldd	r24, Y+1	; 0x01
     51e:	9a 81       	ldd	r25, Y+2	; 0x02
     520:	2f e1       	ldi	r18, 0x1F	; 31
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	b9 01       	movw	r22, r18
     526:	0e 94 a0 1c 	call	0x3940	; 0x3940 <__divmodhi4>
     52a:	9c 01       	movw	r18, r24
     52c:	8b 81       	ldd	r24, Y+3	; 0x03
     52e:	9c 81       	ldd	r25, Y+4	; 0x04
     530:	fc 01       	movw	r30, r24
     532:	33 83       	std	Z+3, r19	; 0x03
     534:	22 83       	std	Z+2, r18	; 0x02
     536:	5d c0       	rjmp	.+186    	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		}
	} else if (month == 2){
     538:	8b 81       	ldd	r24, Y+3	; 0x03
     53a:	9c 81       	ldd	r25, Y+4	; 0x04
     53c:	fc 01       	movw	r30, r24
     53e:	80 81       	ld	r24, Z
     540:	91 81       	ldd	r25, Z+1	; 0x01
     542:	21 e0       	ldi	r18, 0x01	; 1
     544:	82 30       	cpi	r24, 0x02	; 2
     546:	91 05       	cpc	r25, r1
     548:	09 f0       	breq	.+2      	; 0x54c <_ZN6myDate7addDaysEi+0xc6>
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	22 23       	and	r18, r18
     54e:	49 f1       	breq	.+82     	; 0x5a2 <_ZN6myDate7addDaysEi+0x11c>
		if(day/29 == 0){		//Don't take into account LeapYear
     550:	8b 81       	ldd	r24, Y+3	; 0x03
     552:	9c 81       	ldd	r25, Y+4	; 0x04
     554:	fc 01       	movw	r30, r24
     556:	82 81       	ldd	r24, Z+2	; 0x02
     558:	93 81       	ldd	r25, Z+3	; 0x03
     55a:	4c 96       	adiw	r24, 0x1c	; 28
     55c:	21 e0       	ldi	r18, 0x01	; 1
     55e:	89 33       	cpi	r24, 0x39	; 57
     560:	91 05       	cpc	r25, r1
     562:	08 f0       	brcs	.+2      	; 0x566 <_ZN6myDate7addDaysEi+0xe0>
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	22 23       	and	r18, r18
     568:	41 f0       	breq	.+16     	; 0x57a <_ZN6myDate7addDaysEi+0xf4>
			day = tempDays;
     56a:	29 81       	ldd	r18, Y+1	; 0x01
     56c:	3a 81       	ldd	r19, Y+2	; 0x02
     56e:	8b 81       	ldd	r24, Y+3	; 0x03
     570:	9c 81       	ldd	r25, Y+4	; 0x04
     572:	fc 01       	movw	r30, r24
     574:	33 83       	std	Z+3, r19	; 0x03
     576:	22 83       	std	Z+2, r18	; 0x02
     578:	3c c0       	rjmp	.+120    	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		} else {
			addMonths(1);
     57a:	8b 81       	ldd	r24, Y+3	; 0x03
     57c:	9c 81       	ldd	r25, Y+4	; 0x04
     57e:	61 e0       	ldi	r22, 0x01	; 1
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN6myDate9addMonthsEi>
			day = tempDays%29;
     586:	89 81       	ldd	r24, Y+1	; 0x01
     588:	9a 81       	ldd	r25, Y+2	; 0x02
     58a:	2d e1       	ldi	r18, 0x1D	; 29
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	b9 01       	movw	r22, r18
     590:	0e 94 a0 1c 	call	0x3940	; 0x3940 <__divmodhi4>
     594:	9c 01       	movw	r18, r24
     596:	8b 81       	ldd	r24, Y+3	; 0x03
     598:	9c 81       	ldd	r25, Y+4	; 0x04
     59a:	fc 01       	movw	r30, r24
     59c:	33 83       	std	Z+3, r19	; 0x03
     59e:	22 83       	std	Z+2, r18	; 0x02
     5a0:	28 c0       	rjmp	.+80     	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		}		
	} else {
		if (day/32 == 0){
     5a2:	8b 81       	ldd	r24, Y+3	; 0x03
     5a4:	9c 81       	ldd	r25, Y+4	; 0x04
     5a6:	fc 01       	movw	r30, r24
     5a8:	82 81       	ldd	r24, Z+2	; 0x02
     5aa:	93 81       	ldd	r25, Z+3	; 0x03
     5ac:	4f 96       	adiw	r24, 0x1f	; 31
     5ae:	21 e0       	ldi	r18, 0x01	; 1
     5b0:	8f 33       	cpi	r24, 0x3F	; 63
     5b2:	91 05       	cpc	r25, r1
     5b4:	08 f0       	brcs	.+2      	; 0x5b8 <_ZN6myDate7addDaysEi+0x132>
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	22 23       	and	r18, r18
     5ba:	41 f0       	breq	.+16     	; 0x5cc <_ZN6myDate7addDaysEi+0x146>
			day = tempDays;
     5bc:	29 81       	ldd	r18, Y+1	; 0x01
     5be:	3a 81       	ldd	r19, Y+2	; 0x02
     5c0:	8b 81       	ldd	r24, Y+3	; 0x03
     5c2:	9c 81       	ldd	r25, Y+4	; 0x04
     5c4:	fc 01       	movw	r30, r24
     5c6:	33 83       	std	Z+3, r19	; 0x03
     5c8:	22 83       	std	Z+2, r18	; 0x02
     5ca:	13 c0       	rjmp	.+38     	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		} else {
			addMonths(1);
     5cc:	8b 81       	ldd	r24, Y+3	; 0x03
     5ce:	9c 81       	ldd	r25, Y+4	; 0x04
     5d0:	61 e0       	ldi	r22, 0x01	; 1
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN6myDate9addMonthsEi>
			day = tempDays%32;
     5d8:	89 81       	ldd	r24, Y+1	; 0x01
     5da:	9a 81       	ldd	r25, Y+2	; 0x02
     5dc:	20 e2       	ldi	r18, 0x20	; 32
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	b9 01       	movw	r22, r18
     5e2:	0e 94 a0 1c 	call	0x3940	; 0x3940 <__divmodhi4>
     5e6:	9c 01       	movw	r18, r24
     5e8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ea:	9c 81       	ldd	r25, Y+4	; 0x04
     5ec:	fc 01       	movw	r30, r24
     5ee:	33 83       	std	Z+3, r19	; 0x03
     5f0:	22 83       	std	Z+2, r18	; 0x02
		}
	}
}
     5f2:	26 96       	adiw	r28, 0x06	; 6
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	f8 94       	cli
     5f8:	de bf       	out	0x3e, r29	; 62
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	cd bf       	out	0x3d, r28	; 61
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <_ZN6myDate17checkValidityDateEv>:

BOOL myDate::checkValidityDate(){
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	00 d0       	rcall	.+0      	; 0x60a <_ZN6myDate17checkValidityDateEv+0x6>
     60a:	0f 92       	push	r0
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	9b 83       	std	Y+3, r25	; 0x03
     612:	8a 83       	std	Y+2, r24	; 0x02
	BOOL checkYear=fFalse;
     614:	19 82       	std	Y+1, r1	; 0x01
	if (month/13==0){
     616:	8a 81       	ldd	r24, Y+2	; 0x02
     618:	9b 81       	ldd	r25, Y+3	; 0x03
     61a:	fc 01       	movw	r30, r24
     61c:	80 81       	ld	r24, Z
     61e:	91 81       	ldd	r25, Z+1	; 0x01
     620:	0c 96       	adiw	r24, 0x0c	; 12
     622:	21 e0       	ldi	r18, 0x01	; 1
     624:	89 31       	cpi	r24, 0x19	; 25
     626:	91 05       	cpc	r25, r1
     628:	08 f0       	brcs	.+2      	; 0x62c <_ZN6myDate17checkValidityDateEv+0x28>
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	22 23       	and	r18, r18
     62e:	09 f4       	brne	.+2      	; 0x632 <_ZN6myDate17checkValidityDateEv+0x2e>
     630:	66 c0       	rjmp	.+204    	; 0x6fe <_ZN6myDate17checkValidityDateEv+0xfa>
			if ((month == 9 || month == 4 || month == 6) && day/31 == 0){
     632:	8a 81       	ldd	r24, Y+2	; 0x02
     634:	9b 81       	ldd	r25, Y+3	; 0x03
     636:	fc 01       	movw	r30, r24
     638:	80 81       	ld	r24, Z
     63a:	91 81       	ldd	r25, Z+1	; 0x01
     63c:	89 30       	cpi	r24, 0x09	; 9
     63e:	91 05       	cpc	r25, r1
     640:	81 f0       	breq	.+32     	; 0x662 <_ZN6myDate17checkValidityDateEv+0x5e>
     642:	8a 81       	ldd	r24, Y+2	; 0x02
     644:	9b 81       	ldd	r25, Y+3	; 0x03
     646:	fc 01       	movw	r30, r24
     648:	80 81       	ld	r24, Z
     64a:	91 81       	ldd	r25, Z+1	; 0x01
     64c:	84 30       	cpi	r24, 0x04	; 4
     64e:	91 05       	cpc	r25, r1
     650:	41 f0       	breq	.+16     	; 0x662 <_ZN6myDate17checkValidityDateEv+0x5e>
     652:	8a 81       	ldd	r24, Y+2	; 0x02
     654:	9b 81       	ldd	r25, Y+3	; 0x03
     656:	fc 01       	movw	r30, r24
     658:	80 81       	ld	r24, Z
     65a:	91 81       	ldd	r25, Z+1	; 0x01
     65c:	86 30       	cpi	r24, 0x06	; 6
     65e:	91 05       	cpc	r25, r1
     660:	59 f4       	brne	.+22     	; 0x678 <_ZN6myDate17checkValidityDateEv+0x74>
     662:	8a 81       	ldd	r24, Y+2	; 0x02
     664:	9b 81       	ldd	r25, Y+3	; 0x03
     666:	fc 01       	movw	r30, r24
     668:	82 81       	ldd	r24, Z+2	; 0x02
     66a:	93 81       	ldd	r25, Z+3	; 0x03
     66c:	4e 96       	adiw	r24, 0x1e	; 30
     66e:	8d 33       	cpi	r24, 0x3D	; 61
     670:	91 05       	cpc	r25, r1
     672:	10 f4       	brcc	.+4      	; 0x678 <_ZN6myDate17checkValidityDateEv+0x74>
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	01 c0       	rjmp	.+2      	; 0x67a <_ZN6myDate17checkValidityDateEv+0x76>
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	88 23       	and	r24, r24
     67c:	19 f0       	breq	.+6      	; 0x684 <_ZN6myDate17checkValidityDateEv+0x80>
				checkYear=fTrue;
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	89 83       	std	Y+1, r24	; 0x01
     682:	28 c0       	rjmp	.+80     	; 0x6d4 <_ZN6myDate17checkValidityDateEv+0xd0>
			} else if (month == 2 && day/29 == 0){
     684:	8a 81       	ldd	r24, Y+2	; 0x02
     686:	9b 81       	ldd	r25, Y+3	; 0x03
     688:	fc 01       	movw	r30, r24
     68a:	80 81       	ld	r24, Z
     68c:	91 81       	ldd	r25, Z+1	; 0x01
     68e:	82 30       	cpi	r24, 0x02	; 2
     690:	91 05       	cpc	r25, r1
     692:	59 f4       	brne	.+22     	; 0x6aa <_ZN6myDate17checkValidityDateEv+0xa6>
     694:	8a 81       	ldd	r24, Y+2	; 0x02
     696:	9b 81       	ldd	r25, Y+3	; 0x03
     698:	fc 01       	movw	r30, r24
     69a:	82 81       	ldd	r24, Z+2	; 0x02
     69c:	93 81       	ldd	r25, Z+3	; 0x03
     69e:	4c 96       	adiw	r24, 0x1c	; 28
     6a0:	89 33       	cpi	r24, 0x39	; 57
     6a2:	91 05       	cpc	r25, r1
     6a4:	10 f4       	brcc	.+4      	; 0x6aa <_ZN6myDate17checkValidityDateEv+0xa6>
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	01 c0       	rjmp	.+2      	; 0x6ac <_ZN6myDate17checkValidityDateEv+0xa8>
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	88 23       	and	r24, r24
     6ae:	19 f0       	breq	.+6      	; 0x6b6 <_ZN6myDate17checkValidityDateEv+0xb2>
				checkYear=fTrue;
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	89 83       	std	Y+1, r24	; 0x01
     6b4:	0f c0       	rjmp	.+30     	; 0x6d4 <_ZN6myDate17checkValidityDateEv+0xd0>
			} else{
				if (day/32 == 0){
     6b6:	8a 81       	ldd	r24, Y+2	; 0x02
     6b8:	9b 81       	ldd	r25, Y+3	; 0x03
     6ba:	fc 01       	movw	r30, r24
     6bc:	82 81       	ldd	r24, Z+2	; 0x02
     6be:	93 81       	ldd	r25, Z+3	; 0x03
     6c0:	4f 96       	adiw	r24, 0x1f	; 31
     6c2:	21 e0       	ldi	r18, 0x01	; 1
     6c4:	8f 33       	cpi	r24, 0x3F	; 63
     6c6:	91 05       	cpc	r25, r1
     6c8:	08 f0       	brcs	.+2      	; 0x6cc <_ZN6myDate17checkValidityDateEv+0xc8>
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	22 23       	and	r18, r18
     6ce:	11 f0       	breq	.+4      	; 0x6d4 <_ZN6myDate17checkValidityDateEv+0xd0>
					checkYear=fTrue;
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	89 83       	std	Y+1, r24	; 0x01
				}
			}
			
			//Check year
			if (checkYear && year>=2013){return fTrue;}
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
     6d6:	88 23       	and	r24, r24
     6d8:	59 f0       	breq	.+22     	; 0x6f0 <_ZN6myDate17checkValidityDateEv+0xec>
     6da:	8a 81       	ldd	r24, Y+2	; 0x02
     6dc:	9b 81       	ldd	r25, Y+3	; 0x03
     6de:	fc 01       	movw	r30, r24
     6e0:	84 81       	ldd	r24, Z+4	; 0x04
     6e2:	95 81       	ldd	r25, Z+5	; 0x05
     6e4:	f7 e0       	ldi	r31, 0x07	; 7
     6e6:	8d 3d       	cpi	r24, 0xDD	; 221
     6e8:	9f 07       	cpc	r25, r31
     6ea:	14 f0       	brlt	.+4      	; 0x6f0 <_ZN6myDate17checkValidityDateEv+0xec>
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	01 c0       	rjmp	.+2      	; 0x6f2 <_ZN6myDate17checkValidityDateEv+0xee>
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	88 23       	and	r24, r24
     6f4:	11 f0       	breq	.+4      	; 0x6fa <_ZN6myDate17checkValidityDateEv+0xf6>
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	03 c0       	rjmp	.+6      	; 0x700 <_ZN6myDate17checkValidityDateEv+0xfc>
			else {return fFalse;}
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	01 c0       	rjmp	.+2      	; 0x700 <_ZN6myDate17checkValidityDateEv+0xfc>
	} else {return fFalse;}
     6fe:	80 e0       	ldi	r24, 0x00	; 0
}
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <_ZN6myDate7getDateEv>:

const char * myDate::getDate(){
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
     714:	2d 97       	sbiw	r28, 0x0d	; 13
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	f8 94       	cli
     71a:	de bf       	out	0x3e, r29	; 62
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	cd bf       	out	0x3d, r28	; 61
     720:	9d 87       	std	Y+13, r25	; 0x0d
     722:	8c 87       	std	Y+12, r24	; 0x0c
	char monthString[3],dayString[3],yearString[5];
	itoa(month,monthString,10);
     724:	8c 85       	ldd	r24, Y+12	; 0x0c
     726:	9d 85       	ldd	r25, Y+13	; 0x0d
     728:	fc 01       	movw	r30, r24
     72a:	80 81       	ld	r24, Z
     72c:	91 81       	ldd	r25, Z+1	; 0x01
     72e:	9e 01       	movw	r18, r28
     730:	2f 5f       	subi	r18, 0xFF	; 255
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	b9 01       	movw	r22, r18
     736:	4a e0       	ldi	r20, 0x0A	; 10
     738:	50 e0       	ldi	r21, 0x00	; 0
     73a:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <itoa>
	itoa(day,dayString,10);
     73e:	8c 85       	ldd	r24, Y+12	; 0x0c
     740:	9d 85       	ldd	r25, Y+13	; 0x0d
     742:	fc 01       	movw	r30, r24
     744:	82 81       	ldd	r24, Z+2	; 0x02
     746:	93 81       	ldd	r25, Z+3	; 0x03
     748:	9e 01       	movw	r18, r28
     74a:	2c 5f       	subi	r18, 0xFC	; 252
     74c:	3f 4f       	sbci	r19, 0xFF	; 255
     74e:	b9 01       	movw	r22, r18
     750:	4a e0       	ldi	r20, 0x0A	; 10
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <itoa>
	itoa(year,yearString,10);
     758:	8c 85       	ldd	r24, Y+12	; 0x0c
     75a:	9d 85       	ldd	r25, Y+13	; 0x0d
     75c:	fc 01       	movw	r30, r24
     75e:	84 81       	ldd	r24, Z+4	; 0x04
     760:	95 81       	ldd	r25, Z+5	; 0x05
     762:	9e 01       	movw	r18, r28
     764:	29 5f       	subi	r18, 0xF9	; 249
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	b9 01       	movw	r22, r18
     76a:	4a e0       	ldi	r20, 0x0A	; 10
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <itoa>
	strcpy(dateString,monthString);
     772:	8c 85       	ldd	r24, Y+12	; 0x0c
     774:	9d 85       	ldd	r25, Y+13	; 0x0d
     776:	06 96       	adiw	r24, 0x06	; 6
     778:	9e 01       	movw	r18, r28
     77a:	2f 5f       	subi	r18, 0xFF	; 255
     77c:	3f 4f       	sbci	r19, 0xFF	; 255
     77e:	b9 01       	movw	r22, r18
     780:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <strcpy>
	strcat(dateString,",");
     784:	8c 85       	ldd	r24, Y+12	; 0x0c
     786:	9d 85       	ldd	r25, Y+13	; 0x0d
     788:	9c 01       	movw	r18, r24
     78a:	2a 5f       	subi	r18, 0xFA	; 250
     78c:	3f 4f       	sbci	r19, 0xFF	; 255
     78e:	c9 01       	movw	r24, r18
     790:	ac 01       	movw	r20, r24
     792:	fa 01       	movw	r30, r20
     794:	01 90       	ld	r0, Z+
     796:	00 20       	and	r0, r0
     798:	e9 f7       	brne	.-6      	; 0x794 <_ZN6myDate7getDateEv+0x88>
     79a:	cf 01       	movw	r24, r30
     79c:	01 97       	sbiw	r24, 0x01	; 1
     79e:	84 1b       	sub	r24, r20
     7a0:	95 0b       	sbc	r25, r21
     7a2:	82 0f       	add	r24, r18
     7a4:	93 1f       	adc	r25, r19
     7a6:	2c e2       	ldi	r18, 0x2C	; 44
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	fc 01       	movw	r30, r24
     7ac:	31 83       	std	Z+1, r19	; 0x01
     7ae:	20 83       	st	Z, r18
	strcat(dateString,dayString);
     7b0:	8c 85       	ldd	r24, Y+12	; 0x0c
     7b2:	9d 85       	ldd	r25, Y+13	; 0x0d
     7b4:	06 96       	adiw	r24, 0x06	; 6
     7b6:	9e 01       	movw	r18, r28
     7b8:	2c 5f       	subi	r18, 0xFC	; 252
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	b9 01       	movw	r22, r18
     7be:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <strcat>
	strcat(dateString,",");
     7c2:	8c 85       	ldd	r24, Y+12	; 0x0c
     7c4:	9d 85       	ldd	r25, Y+13	; 0x0d
     7c6:	9c 01       	movw	r18, r24
     7c8:	2a 5f       	subi	r18, 0xFA	; 250
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	c9 01       	movw	r24, r18
     7ce:	ac 01       	movw	r20, r24
     7d0:	fa 01       	movw	r30, r20
     7d2:	01 90       	ld	r0, Z+
     7d4:	00 20       	and	r0, r0
     7d6:	e9 f7       	brne	.-6      	; 0x7d2 <_ZN6myDate7getDateEv+0xc6>
     7d8:	cf 01       	movw	r24, r30
     7da:	01 97       	sbiw	r24, 0x01	; 1
     7dc:	84 1b       	sub	r24, r20
     7de:	95 0b       	sbc	r25, r21
     7e0:	82 0f       	add	r24, r18
     7e2:	93 1f       	adc	r25, r19
     7e4:	2c e2       	ldi	r18, 0x2C	; 44
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	fc 01       	movw	r30, r24
     7ea:	31 83       	std	Z+1, r19	; 0x01
     7ec:	20 83       	st	Z, r18
	strcat(dateString,yearString);
     7ee:	8c 85       	ldd	r24, Y+12	; 0x0c
     7f0:	9d 85       	ldd	r25, Y+13	; 0x0d
     7f2:	06 96       	adiw	r24, 0x06	; 6
     7f4:	9e 01       	movw	r18, r28
     7f6:	29 5f       	subi	r18, 0xF9	; 249
     7f8:	3f 4f       	sbci	r19, 0xFF	; 255
     7fa:	b9 01       	movw	r22, r18
     7fc:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <strcat>
	dateString[16] = '\0';
     800:	8c 85       	ldd	r24, Y+12	; 0x0c
     802:	9d 85       	ldd	r25, Y+13	; 0x0d
     804:	fc 01       	movw	r30, r24
     806:	16 8a       	std	Z+22, r1	; 0x16
	
	return dateString;
     808:	8c 85       	ldd	r24, Y+12	; 0x0c
     80a:	9d 85       	ldd	r25, Y+13	; 0x0d
     80c:	06 96       	adiw	r24, 0x06	; 6
     80e:	2d 96       	adiw	r28, 0x0d	; 13
     810:	0f b6       	in	r0, 0x3f	; 63
     812:	f8 94       	cli
     814:	de bf       	out	0x3e, r29	; 62
     816:	0f be       	out	0x3f, r0	; 63
     818:	cd bf       	out	0x3d, r28	; 61
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	08 95       	ret

00000820 <_ZN6myTimeC1Ev>:
		void addMinutes(int minutes);
		void setHour(int hour);
		void setMinute(int minute);
};

myTime::myTime():myDate(){
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	00 d0       	rcall	.+0      	; 0x826 <_ZN6myTimeC1Ev+0x6>
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
     82a:	9a 83       	std	Y+2, r25	; 0x02
     82c:	89 83       	std	Y+1, r24	; 0x01
     82e:	89 81       	ldd	r24, Y+1	; 0x01
     830:	9a 81       	ldd	r25, Y+2	; 0x02
     832:	0e 94 69 00 	call	0xd2	; 0xd2 <_ZN6myDateC1Ev>
	setTime(0,0,0);
     836:	89 81       	ldd	r24, Y+1	; 0x01
     838:	9a 81       	ldd	r25, Y+2	; 0x02
     83a:	60 e0       	ldi	r22, 0x00	; 0
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	40 e0       	ldi	r20, 0x00	; 0
     840:	50 e0       	ldi	r21, 0x00	; 0
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN6myTime7setTimeEiii>
}
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	08 95       	ret

00000854 <_ZN6myTimeC1Eiii>:

myTime::myTime(int hour, int minute, int second):myDate(){
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	28 97       	sbiw	r28, 0x08	; 8
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	de bf       	out	0x3e, r29	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd bf       	out	0x3d, r28	; 61
     868:	9a 83       	std	Y+2, r25	; 0x02
     86a:	89 83       	std	Y+1, r24	; 0x01
     86c:	7c 83       	std	Y+4, r23	; 0x04
     86e:	6b 83       	std	Y+3, r22	; 0x03
     870:	5e 83       	std	Y+6, r21	; 0x06
     872:	4d 83       	std	Y+5, r20	; 0x05
     874:	38 87       	std	Y+8, r19	; 0x08
     876:	2f 83       	std	Y+7, r18	; 0x07
     878:	89 81       	ldd	r24, Y+1	; 0x01
     87a:	9a 81       	ldd	r25, Y+2	; 0x02
     87c:	0e 94 69 00 	call	0xd2	; 0xd2 <_ZN6myDateC1Ev>
	setTime(hour,minute,second);
     880:	89 81       	ldd	r24, Y+1	; 0x01
     882:	9a 81       	ldd	r25, Y+2	; 0x02
     884:	6b 81       	ldd	r22, Y+3	; 0x03
     886:	7c 81       	ldd	r23, Y+4	; 0x04
     888:	4d 81       	ldd	r20, Y+5	; 0x05
     88a:	5e 81       	ldd	r21, Y+6	; 0x06
     88c:	2f 81       	ldd	r18, Y+7	; 0x07
     88e:	38 85       	ldd	r19, Y+8	; 0x08
     890:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN6myTime7setTimeEiii>
}
     894:	28 96       	adiw	r28, 0x08	; 8
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	f8 94       	cli
     89a:	de bf       	out	0x3e, r29	; 62
     89c:	0f be       	out	0x3f, r0	; 63
     89e:	cd bf       	out	0x3d, r28	; 61
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	08 95       	ret

000008a6 <_ZN6myTimeC1Eiiiiii>:

myTime::myTime(int hour,int minute,int second,int month, int day, int year):myDate(month,day,year){
     8a6:	cf 92       	push	r12
     8a8:	df 92       	push	r13
     8aa:	ef 92       	push	r14
     8ac:	ff 92       	push	r15
     8ae:	0f 93       	push	r16
     8b0:	1f 93       	push	r17
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	cd b7       	in	r28, 0x3d	; 61
     8b8:	de b7       	in	r29, 0x3e	; 62
     8ba:	2e 97       	sbiw	r28, 0x0e	; 14
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	f8 94       	cli
     8c0:	de bf       	out	0x3e, r29	; 62
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	cd bf       	out	0x3d, r28	; 61
     8c6:	9a 83       	std	Y+2, r25	; 0x02
     8c8:	89 83       	std	Y+1, r24	; 0x01
     8ca:	7c 83       	std	Y+4, r23	; 0x04
     8cc:	6b 83       	std	Y+3, r22	; 0x03
     8ce:	5e 83       	std	Y+6, r21	; 0x06
     8d0:	4d 83       	std	Y+5, r20	; 0x05
     8d2:	38 87       	std	Y+8, r19	; 0x08
     8d4:	2f 83       	std	Y+7, r18	; 0x07
     8d6:	1a 87       	std	Y+10, r17	; 0x0a
     8d8:	09 87       	std	Y+9, r16	; 0x09
     8da:	fc 86       	std	Y+12, r15	; 0x0c
     8dc:	eb 86       	std	Y+11, r14	; 0x0b
     8de:	de 86       	std	Y+14, r13	; 0x0e
     8e0:	cd 86       	std	Y+13, r12	; 0x0d
     8e2:	89 81       	ldd	r24, Y+1	; 0x01
     8e4:	9a 81       	ldd	r25, Y+2	; 0x02
     8e6:	69 85       	ldd	r22, Y+9	; 0x09
     8e8:	7a 85       	ldd	r23, Y+10	; 0x0a
     8ea:	4b 85       	ldd	r20, Y+11	; 0x0b
     8ec:	5c 85       	ldd	r21, Y+12	; 0x0c
     8ee:	2d 85       	ldd	r18, Y+13	; 0x0d
     8f0:	3e 85       	ldd	r19, Y+14	; 0x0e
     8f2:	0e 94 84 00 	call	0x108	; 0x108 <_ZN6myDateC1Eiii>
	setTime(hour,minute,second);
     8f6:	89 81       	ldd	r24, Y+1	; 0x01
     8f8:	9a 81       	ldd	r25, Y+2	; 0x02
     8fa:	6b 81       	ldd	r22, Y+3	; 0x03
     8fc:	7c 81       	ldd	r23, Y+4	; 0x04
     8fe:	4d 81       	ldd	r20, Y+5	; 0x05
     900:	5e 81       	ldd	r21, Y+6	; 0x06
     902:	2f 81       	ldd	r18, Y+7	; 0x07
     904:	38 85       	ldd	r19, Y+8	; 0x08
     906:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN6myTime7setTimeEiii>
}
     90a:	2e 96       	adiw	r28, 0x0e	; 14
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	f8 94       	cli
     910:	de bf       	out	0x3e, r29	; 62
     912:	0f be       	out	0x3f, r0	; 63
     914:	cd bf       	out	0x3d, r28	; 61
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	ff 90       	pop	r15
     920:	ef 90       	pop	r14
     922:	df 90       	pop	r13
     924:	cf 90       	pop	r12
     926:	08 95       	ret

00000928 <_ZN6myTime10getSecondsEv>:

BYTE myTime::getSeconds(){
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	00 d0       	rcall	.+0      	; 0x92e <_ZN6myTime10getSecondsEv+0x6>
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62
     932:	9a 83       	std	Y+2, r25	; 0x02
     934:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)second;
     936:	89 81       	ldd	r24, Y+1	; 0x01
     938:	9a 81       	ldd	r25, Y+2	; 0x02
     93a:	fc 01       	movw	r30, r24
     93c:	83 8d       	ldd	r24, Z+27	; 0x1b
     93e:	94 8d       	ldd	r25, Z+28	; 0x1c
}
     940:	0f 90       	pop	r0
     942:	0f 90       	pop	r0
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	08 95       	ret

0000094a <_ZN6myTime10getMinutesEv>:

BYTE myTime::getMinutes(){
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	00 d0       	rcall	.+0      	; 0x950 <_ZN6myTime10getMinutesEv+0x6>
     950:	cd b7       	in	r28, 0x3d	; 61
     952:	de b7       	in	r29, 0x3e	; 62
     954:	9a 83       	std	Y+2, r25	; 0x02
     956:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)minute;
     958:	89 81       	ldd	r24, Y+1	; 0x01
     95a:	9a 81       	ldd	r25, Y+2	; 0x02
     95c:	fc 01       	movw	r30, r24
     95e:	81 8d       	ldd	r24, Z+25	; 0x19
     960:	92 8d       	ldd	r25, Z+26	; 0x1a
}
     962:	0f 90       	pop	r0
     964:	0f 90       	pop	r0
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	08 95       	ret

0000096c <_ZN6myTime8getHoursEv>:

BYTE myTime::getHours(){
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
     970:	00 d0       	rcall	.+0      	; 0x972 <_ZN6myTime8getHoursEv+0x6>
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
     976:	9a 83       	std	Y+2, r25	; 0x02
     978:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)hour;
     97a:	89 81       	ldd	r24, Y+1	; 0x01
     97c:	9a 81       	ldd	r25, Y+2	; 0x02
     97e:	fc 01       	movw	r30, r24
     980:	87 89       	ldd	r24, Z+23	; 0x17
     982:	90 8d       	ldd	r25, Z+24	; 0x18
}
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	08 95       	ret

0000098e <_ZN6myTime7setTimeEPc>:

BOOL myTime::setTime(char *newTime){
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	cd b7       	in	r28, 0x3d	; 61
     994:	de b7       	in	r29, 0x3e	; 62
     996:	a2 97       	sbiw	r28, 0x22	; 34
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	f8 94       	cli
     99c:	de bf       	out	0x3e, r29	; 62
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	cd bf       	out	0x3d, r28	; 61
     9a2:	98 a3       	lds	r25, 0x58
     9a4:	8f 8f       	std	Y+31, r24	; 0x1f
     9a6:	7a a3       	lds	r23, 0x5a
     9a8:	69 a3       	lds	r22, 0x59
	int tempNum[3];
	char currentString[10];
	char tempString[10];
	strcpy(currentString,newTime);
     9aa:	ce 01       	movw	r24, r28
     9ac:	0b 96       	adiw	r24, 0x0b	; 11
     9ae:	29 a1       	lds	r18, 0x49
     9b0:	3a a1       	lds	r19, 0x4a
     9b2:	b9 01       	movw	r22, r18
     9b4:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <strcpy>
	for (int j=0; j<3; j++){
     9b8:	1a 82       	std	Y+2, r1	; 0x02
     9ba:	19 82       	std	Y+1, r1	; 0x01
     9bc:	43 c0       	rjmp	.+134    	; 0xa44 <_ZN6myTime7setTimeEPc+0xb6>
		for (int i=0; i<2; i++){
     9be:	1c 82       	std	Y+4, r1	; 0x04
     9c0:	1b 82       	std	Y+3, r1	; 0x03
     9c2:	20 c0       	rjmp	.+64     	; 0xa04 <_ZN6myTime7setTimeEPc+0x76>
				tempString[i]=currentString[i+j*3];
     9c4:	29 81       	ldd	r18, Y+1	; 0x01
     9c6:	3a 81       	ldd	r19, Y+2	; 0x02
     9c8:	c9 01       	movw	r24, r18
     9ca:	88 0f       	add	r24, r24
     9cc:	99 1f       	adc	r25, r25
     9ce:	28 0f       	add	r18, r24
     9d0:	39 1f       	adc	r19, r25
     9d2:	8b 81       	ldd	r24, Y+3	; 0x03
     9d4:	9c 81       	ldd	r25, Y+4	; 0x04
     9d6:	82 0f       	add	r24, r18
     9d8:	93 1f       	adc	r25, r19
     9da:	9e 01       	movw	r18, r28
     9dc:	25 5f       	subi	r18, 0xF5	; 245
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	82 0f       	add	r24, r18
     9e2:	93 1f       	adc	r25, r19
     9e4:	fc 01       	movw	r30, r24
     9e6:	40 81       	ld	r20, Z
     9e8:	9e 01       	movw	r18, r28
     9ea:	2b 5e       	subi	r18, 0xEB	; 235
     9ec:	3f 4f       	sbci	r19, 0xFF	; 255
     9ee:	8b 81       	ldd	r24, Y+3	; 0x03
     9f0:	9c 81       	ldd	r25, Y+4	; 0x04
     9f2:	82 0f       	add	r24, r18
     9f4:	93 1f       	adc	r25, r19
     9f6:	fc 01       	movw	r30, r24
     9f8:	40 83       	st	Z, r20
	int tempNum[3];
	char currentString[10];
	char tempString[10];
	strcpy(currentString,newTime);
	for (int j=0; j<3; j++){
		for (int i=0; i<2; i++){
     9fa:	8b 81       	ldd	r24, Y+3	; 0x03
     9fc:	9c 81       	ldd	r25, Y+4	; 0x04
     9fe:	01 96       	adiw	r24, 0x01	; 1
     a00:	9c 83       	std	Y+4, r25	; 0x04
     a02:	8b 83       	std	Y+3, r24	; 0x03
     a04:	21 e0       	ldi	r18, 0x01	; 1
     a06:	8b 81       	ldd	r24, Y+3	; 0x03
     a08:	9c 81       	ldd	r25, Y+4	; 0x04
     a0a:	82 30       	cpi	r24, 0x02	; 2
     a0c:	91 05       	cpc	r25, r1
     a0e:	0c f0       	brlt	.+2      	; 0xa12 <_ZN6myTime7setTimeEPc+0x84>
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	22 23       	and	r18, r18
     a14:	b9 f6       	brne	.-82     	; 0x9c4 <_ZN6myTime7setTimeEPc+0x36>
				tempString[i]=currentString[i+j*3];
		}
		tempNum[j]=atoi(tempString);
     a16:	ce 01       	movw	r24, r28
     a18:	45 96       	adiw	r24, 0x15	; 21
     a1a:	0e 94 cd 1c 	call	0x399a	; 0x399a <atoi>
     a1e:	9c 01       	movw	r18, r24
     a20:	89 81       	ldd	r24, Y+1	; 0x01
     a22:	9a 81       	ldd	r25, Y+2	; 0x02
     a24:	88 0f       	add	r24, r24
     a26:	99 1f       	adc	r25, r25
     a28:	ae 01       	movw	r20, r28
     a2a:	4f 5f       	subi	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	84 0f       	add	r24, r20
     a30:	95 1f       	adc	r25, r21
     a32:	04 96       	adiw	r24, 0x04	; 4
     a34:	fc 01       	movw	r30, r24
     a36:	31 83       	std	Z+1, r19	; 0x01
     a38:	20 83       	st	Z, r18
BOOL myTime::setTime(char *newTime){
	int tempNum[3];
	char currentString[10];
	char tempString[10];
	strcpy(currentString,newTime);
	for (int j=0; j<3; j++){
     a3a:	89 81       	ldd	r24, Y+1	; 0x01
     a3c:	9a 81       	ldd	r25, Y+2	; 0x02
     a3e:	01 96       	adiw	r24, 0x01	; 1
     a40:	9a 83       	std	Y+2, r25	; 0x02
     a42:	89 83       	std	Y+1, r24	; 0x01
     a44:	21 e0       	ldi	r18, 0x01	; 1
     a46:	89 81       	ldd	r24, Y+1	; 0x01
     a48:	9a 81       	ldd	r25, Y+2	; 0x02
     a4a:	83 30       	cpi	r24, 0x03	; 3
     a4c:	91 05       	cpc	r25, r1
     a4e:	0c f0       	brlt	.+2      	; 0xa52 <_ZN6myTime7setTimeEPc+0xc4>
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	22 23       	and	r18, r18
     a54:	09 f0       	breq	.+2      	; 0xa58 <_ZN6myTime7setTimeEPc+0xca>
     a56:	b3 cf       	rjmp	.-154    	; 0x9be <_ZN6myTime7setTimeEPc+0x30>
		for (int i=0; i<2; i++){
				tempString[i]=currentString[i+j*3];
		}
		tempNum[j]=atoi(tempString);
	}
	if (tempNum[0]/24==0 && tempNum[1]/60==0 && tempNum[2]/60==0){
     a58:	8d 81       	ldd	r24, Y+5	; 0x05
     a5a:	9e 81       	ldd	r25, Y+6	; 0x06
     a5c:	47 96       	adiw	r24, 0x17	; 23
     a5e:	8f 32       	cpi	r24, 0x2F	; 47
     a60:	91 05       	cpc	r25, r1
     a62:	c0 f4       	brcc	.+48     	; 0xa94 <_ZN6myTime7setTimeEPc+0x106>
     a64:	8f 81       	ldd	r24, Y+7	; 0x07
     a66:	98 85       	ldd	r25, Y+8	; 0x08
     a68:	cb 96       	adiw	r24, 0x3b	; 59
     a6a:	87 37       	cpi	r24, 0x77	; 119
     a6c:	91 05       	cpc	r25, r1
     a6e:	90 f4       	brcc	.+36     	; 0xa94 <_ZN6myTime7setTimeEPc+0x106>
     a70:	89 85       	ldd	r24, Y+9	; 0x09
     a72:	9a 85       	ldd	r25, Y+10	; 0x0a
     a74:	cb 96       	adiw	r24, 0x3b	; 59
     a76:	87 37       	cpi	r24, 0x77	; 119
     a78:	91 05       	cpc	r25, r1
     a7a:	60 f4       	brcc	.+24     	; 0xa94 <_ZN6myTime7setTimeEPc+0x106>
		setTime(tempNum[0],tempNum[1],tempNum[2]);
     a7c:	6d 81       	ldd	r22, Y+5	; 0x05
     a7e:	7e 81       	ldd	r23, Y+6	; 0x06
     a80:	4f 81       	ldd	r20, Y+7	; 0x07
     a82:	58 85       	ldd	r21, Y+8	; 0x08
     a84:	29 85       	ldd	r18, Y+9	; 0x09
     a86:	3a 85       	ldd	r19, Y+10	; 0x0a
     a88:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a8a:	98 a1       	lds	r25, 0x48
     a8c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN6myTime7setTimeEiii>
		return fTrue;
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	01 c0       	rjmp	.+2      	; 0xa96 <_ZN6myTime7setTimeEPc+0x108>
	} 
	return fFalse;
     a94:	80 e0       	ldi	r24, 0x00	; 0
}
     a96:	a2 96       	adiw	r28, 0x22	; 34
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	de bf       	out	0x3e, r29	; 62
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	cd bf       	out	0x3d, r28	; 61
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	08 95       	ret

00000aa8 <_ZN6myTime7setTimeEiii>:

void myTime::setTime(int hour,int minute,int second){
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	cd b7       	in	r28, 0x3d	; 61
     aae:	de b7       	in	r29, 0x3e	; 62
     ab0:	28 97       	sbiw	r28, 0x08	; 8
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	f8 94       	cli
     ab6:	de bf       	out	0x3e, r29	; 62
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	cd bf       	out	0x3d, r28	; 61
     abc:	9a 83       	std	Y+2, r25	; 0x02
     abe:	89 83       	std	Y+1, r24	; 0x01
     ac0:	7c 83       	std	Y+4, r23	; 0x04
     ac2:	6b 83       	std	Y+3, r22	; 0x03
     ac4:	5e 83       	std	Y+6, r21	; 0x06
     ac6:	4d 83       	std	Y+5, r20	; 0x05
     ac8:	38 87       	std	Y+8, r19	; 0x08
     aca:	2f 83       	std	Y+7, r18	; 0x07
	setHour(hour);
     acc:	89 81       	ldd	r24, Y+1	; 0x01
     ace:	9a 81       	ldd	r25, Y+2	; 0x02
     ad0:	2b 81       	ldd	r18, Y+3	; 0x03
     ad2:	3c 81       	ldd	r19, Y+4	; 0x04
     ad4:	b9 01       	movw	r22, r18
     ad6:	0e 94 84 05 	call	0xb08	; 0xb08 <_ZN6myTime7setHourEi>
	setMinute(minute);
     ada:	89 81       	ldd	r24, Y+1	; 0x01
     adc:	9a 81       	ldd	r25, Y+2	; 0x02
     ade:	2d 81       	ldd	r18, Y+5	; 0x05
     ae0:	3e 81       	ldd	r19, Y+6	; 0x06
     ae2:	b9 01       	movw	r22, r18
     ae4:	0e 94 a2 05 	call	0xb44	; 0xb44 <_ZN6myTime9setMinuteEi>
	setSecond(second);
     ae8:	89 81       	ldd	r24, Y+1	; 0x01
     aea:	9a 81       	ldd	r25, Y+2	; 0x02
     aec:	2f 81       	ldd	r18, Y+7	; 0x07
     aee:	38 85       	ldd	r19, Y+8	; 0x08
     af0:	b9 01       	movw	r22, r18
     af2:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN6myTime9setSecondEi>
}
     af6:	28 96       	adiw	r28, 0x08	; 8
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	f8 94       	cli
     afc:	de bf       	out	0x3e, r29	; 62
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	cd bf       	out	0x3d, r28	; 61
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	08 95       	ret

00000b08 <_ZN6myTime7setHourEi>:

void myTime::setHour(int hour){
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	00 d0       	rcall	.+0      	; 0xb0e <_ZN6myTime7setHourEi+0x6>
     b0e:	00 d0       	rcall	.+0      	; 0xb10 <_ZN6myTime7setHourEi+0x8>
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	9a 83       	std	Y+2, r25	; 0x02
     b16:	89 83       	std	Y+1, r24	; 0x01
     b18:	7c 83       	std	Y+4, r23	; 0x04
     b1a:	6b 83       	std	Y+3, r22	; 0x03
	if (hour/24 == 0){
     b1c:	8b 81       	ldd	r24, Y+3	; 0x03
     b1e:	9c 81       	ldd	r25, Y+4	; 0x04
     b20:	47 96       	adiw	r24, 0x17	; 23
     b22:	8f 32       	cpi	r24, 0x2F	; 47
     b24:	91 05       	cpc	r25, r1
     b26:	38 f4       	brcc	.+14     	; 0xb36 <_ZN6myTime7setHourEi+0x2e>
		this->hour = hour;
     b28:	89 81       	ldd	r24, Y+1	; 0x01
     b2a:	9a 81       	ldd	r25, Y+2	; 0x02
     b2c:	2b 81       	ldd	r18, Y+3	; 0x03
     b2e:	3c 81       	ldd	r19, Y+4	; 0x04
     b30:	fc 01       	movw	r30, r24
     b32:	30 8f       	std	Z+24, r19	; 0x18
     b34:	27 8b       	std	Z+23, r18	; 0x17
	}	
}
     b36:	0f 90       	pop	r0
     b38:	0f 90       	pop	r0
     b3a:	0f 90       	pop	r0
     b3c:	0f 90       	pop	r0
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	08 95       	ret

00000b44 <_ZN6myTime9setMinuteEi>:

void myTime::setMinute(int minute){
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	00 d0       	rcall	.+0      	; 0xb4a <_ZN6myTime9setMinuteEi+0x6>
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <_ZN6myTime9setMinuteEi+0x8>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
     b54:	7c 83       	std	Y+4, r23	; 0x04
     b56:	6b 83       	std	Y+3, r22	; 0x03
	if (minute/60 == 0){
     b58:	8b 81       	ldd	r24, Y+3	; 0x03
     b5a:	9c 81       	ldd	r25, Y+4	; 0x04
     b5c:	cb 96       	adiw	r24, 0x3b	; 59
     b5e:	87 37       	cpi	r24, 0x77	; 119
     b60:	91 05       	cpc	r25, r1
     b62:	38 f4       	brcc	.+14     	; 0xb72 <_ZN6myTime9setMinuteEi+0x2e>
		this->minute = minute;
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	9a 81       	ldd	r25, Y+2	; 0x02
     b68:	2b 81       	ldd	r18, Y+3	; 0x03
     b6a:	3c 81       	ldd	r19, Y+4	; 0x04
     b6c:	fc 01       	movw	r30, r24
     b6e:	32 8f       	std	Z+26, r19	; 0x1a
     b70:	21 8f       	std	Z+25, r18	; 0x19
	}	
}
     b72:	0f 90       	pop	r0
     b74:	0f 90       	pop	r0
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	08 95       	ret

00000b80 <_ZN6myTime9setSecondEi>:

void myTime::setSecond(int second){
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	00 d0       	rcall	.+0      	; 0xb86 <_ZN6myTime9setSecondEi+0x6>
     b86:	00 d0       	rcall	.+0      	; 0xb88 <_ZN6myTime9setSecondEi+0x8>
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
     b8c:	9a 83       	std	Y+2, r25	; 0x02
     b8e:	89 83       	std	Y+1, r24	; 0x01
     b90:	7c 83       	std	Y+4, r23	; 0x04
     b92:	6b 83       	std	Y+3, r22	; 0x03
	if (second/60 == 0){
     b94:	8b 81       	ldd	r24, Y+3	; 0x03
     b96:	9c 81       	ldd	r25, Y+4	; 0x04
     b98:	cb 96       	adiw	r24, 0x3b	; 59
     b9a:	87 37       	cpi	r24, 0x77	; 119
     b9c:	91 05       	cpc	r25, r1
     b9e:	38 f4       	brcc	.+14     	; 0xbae <_ZN6myTime9setSecondEi+0x2e>
		this->second = second;
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	9a 81       	ldd	r25, Y+2	; 0x02
     ba4:	2b 81       	ldd	r18, Y+3	; 0x03
     ba6:	3c 81       	ldd	r19, Y+4	; 0x04
     ba8:	fc 01       	movw	r30, r24
     baa:	34 8f       	std	Z+28, r19	; 0x1c
     bac:	23 8f       	std	Z+27, r18	; 0x1b
	}	
}
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	08 95       	ret

00000bbc <_ZN6myTime8addHoursEi>:

void myTime::addHours(int hours){
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	28 97       	sbiw	r28, 0x08	; 8
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	f8 94       	cli
     bca:	de bf       	out	0x3e, r29	; 62
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	cd bf       	out	0x3d, r28	; 61
     bd0:	9e 83       	std	Y+6, r25	; 0x06
     bd2:	8d 83       	std	Y+5, r24	; 0x05
     bd4:	78 87       	std	Y+8, r23	; 0x08
     bd6:	6f 83       	std	Y+7, r22	; 0x07
	volatile int tempHours = hour + hours;
     bd8:	8d 81       	ldd	r24, Y+5	; 0x05
     bda:	9e 81       	ldd	r25, Y+6	; 0x06
     bdc:	fc 01       	movw	r30, r24
     bde:	27 89       	ldd	r18, Z+23	; 0x17
     be0:	30 8d       	ldd	r19, Z+24	; 0x18
     be2:	8f 81       	ldd	r24, Y+7	; 0x07
     be4:	98 85       	ldd	r25, Y+8	; 0x08
     be6:	82 0f       	add	r24, r18
     be8:	93 1f       	adc	r25, r19
     bea:	9a 83       	std	Y+2, r25	; 0x02
     bec:	89 83       	std	Y+1, r24	; 0x01
	hour = tempHours%24;
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	9a 81       	ldd	r25, Y+2	; 0x02
     bf2:	28 e1       	ldi	r18, 0x18	; 24
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	b9 01       	movw	r22, r18
     bf8:	0e 94 a0 1c 	call	0x3940	; 0x3940 <__divmodhi4>
     bfc:	9c 01       	movw	r18, r24
     bfe:	8d 81       	ldd	r24, Y+5	; 0x05
     c00:	9e 81       	ldd	r25, Y+6	; 0x06
     c02:	fc 01       	movw	r30, r24
     c04:	30 8f       	std	Z+24, r19	; 0x18
     c06:	27 8b       	std	Z+23, r18	; 0x17
	if (tempHours/24 >= 1){
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	9a 81       	ldd	r25, Y+2	; 0x02
     c0c:	21 e0       	ldi	r18, 0x01	; 1
     c0e:	88 31       	cpi	r24, 0x18	; 24
     c10:	91 05       	cpc	r25, r1
     c12:	0c f4       	brge	.+2      	; 0xc16 <_ZN6myTime8addHoursEi+0x5a>
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	22 23       	and	r18, r18
     c18:	91 f0       	breq	.+36     	; 0xc3e <_ZN6myTime8addHoursEi+0x82>
		volatile int daysToAdd = tempHours/24;
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
     c1c:	9a 81       	ldd	r25, Y+2	; 0x02
     c1e:	28 e1       	ldi	r18, 0x18	; 24
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	b9 01       	movw	r22, r18
     c24:	0e 94 a0 1c 	call	0x3940	; 0x3940 <__divmodhi4>
     c28:	9b 01       	movw	r18, r22
     c2a:	c9 01       	movw	r24, r18
     c2c:	9c 83       	std	Y+4, r25	; 0x04
     c2e:	8b 83       	std	Y+3, r24	; 0x03
		addDays(daysToAdd);
     c30:	8d 81       	ldd	r24, Y+5	; 0x05
     c32:	9e 81       	ldd	r25, Y+6	; 0x06
     c34:	2b 81       	ldd	r18, Y+3	; 0x03
     c36:	3c 81       	ldd	r19, Y+4	; 0x04
     c38:	b9 01       	movw	r22, r18
     c3a:	0e 94 43 02 	call	0x486	; 0x486 <_ZN6myDate7addDaysEi>
	}	
}
     c3e:	28 96       	adiw	r28, 0x08	; 8
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	08 95       	ret

00000c50 <_ZN6myTime10addMinutesEi>:

void myTime::addMinutes(int minutes){
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	28 97       	sbiw	r28, 0x08	; 8
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	9e 83       	std	Y+6, r25	; 0x06
     c66:	8d 83       	std	Y+5, r24	; 0x05
     c68:	78 87       	std	Y+8, r23	; 0x08
     c6a:	6f 83       	std	Y+7, r22	; 0x07
	volatile int tempMinutes = minute + minutes;				//what the minutes were + added minutes
     c6c:	8d 81       	ldd	r24, Y+5	; 0x05
     c6e:	9e 81       	ldd	r25, Y+6	; 0x06
     c70:	fc 01       	movw	r30, r24
     c72:	21 8d       	ldd	r18, Z+25	; 0x19
     c74:	32 8d       	ldd	r19, Z+26	; 0x1a
     c76:	8f 81       	ldd	r24, Y+7	; 0x07
     c78:	98 85       	ldd	r25, Y+8	; 0x08
     c7a:	82 0f       	add	r24, r18
     c7c:	93 1f       	adc	r25, r19
     c7e:	9a 83       	std	Y+2, r25	; 0x02
     c80:	89 83       	std	Y+1, r24	; 0x01
	minute = tempMinutes%60;
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	9a 81       	ldd	r25, Y+2	; 0x02
     c86:	2c e3       	ldi	r18, 0x3C	; 60
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	b9 01       	movw	r22, r18
     c8c:	0e 94 a0 1c 	call	0x3940	; 0x3940 <__divmodhi4>
     c90:	9c 01       	movw	r18, r24
     c92:	8d 81       	ldd	r24, Y+5	; 0x05
     c94:	9e 81       	ldd	r25, Y+6	; 0x06
     c96:	fc 01       	movw	r30, r24
     c98:	32 8f       	std	Z+26, r19	; 0x1a
     c9a:	21 8f       	std	Z+25, r18	; 0x19
	if (tempMinutes/60 >= 1){
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ca0:	21 e0       	ldi	r18, 0x01	; 1
     ca2:	8c 33       	cpi	r24, 0x3C	; 60
     ca4:	91 05       	cpc	r25, r1
     ca6:	0c f4       	brge	.+2      	; 0xcaa <_ZN6myTime10addMinutesEi+0x5a>
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	22 23       	and	r18, r18
     cac:	91 f0       	breq	.+36     	; 0xcd2 <_ZN6myTime10addMinutesEi+0x82>
		volatile int hoursToAdd = tempMinutes/60;
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	9a 81       	ldd	r25, Y+2	; 0x02
     cb2:	2c e3       	ldi	r18, 0x3C	; 60
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	b9 01       	movw	r22, r18
     cb8:	0e 94 a0 1c 	call	0x3940	; 0x3940 <__divmodhi4>
     cbc:	9b 01       	movw	r18, r22
     cbe:	c9 01       	movw	r24, r18
     cc0:	9c 83       	std	Y+4, r25	; 0x04
     cc2:	8b 83       	std	Y+3, r24	; 0x03
		addHours(hoursToAdd);
     cc4:	2b 81       	ldd	r18, Y+3	; 0x03
     cc6:	3c 81       	ldd	r19, Y+4	; 0x04
     cc8:	8d 81       	ldd	r24, Y+5	; 0x05
     cca:	9e 81       	ldd	r25, Y+6	; 0x06
     ccc:	b9 01       	movw	r22, r18
     cce:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN6myTime8addHoursEi>
	}
}
     cd2:	28 96       	adiw	r28, 0x08	; 8
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	cd bf       	out	0x3d, r28	; 61
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	08 95       	ret

00000ce4 <_ZN6myTime10addSecondsEi>:

void myTime::addSeconds(int seconds){
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	28 97       	sbiw	r28, 0x08	; 8
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	cd bf       	out	0x3d, r28	; 61
     cf8:	9e 83       	std	Y+6, r25	; 0x06
     cfa:	8d 83       	std	Y+5, r24	; 0x05
     cfc:	78 87       	std	Y+8, r23	; 0x08
     cfe:	6f 83       	std	Y+7, r22	; 0x07
	volatile int tempSecond = second + seconds;
     d00:	8d 81       	ldd	r24, Y+5	; 0x05
     d02:	9e 81       	ldd	r25, Y+6	; 0x06
     d04:	fc 01       	movw	r30, r24
     d06:	23 8d       	ldd	r18, Z+27	; 0x1b
     d08:	34 8d       	ldd	r19, Z+28	; 0x1c
     d0a:	8f 81       	ldd	r24, Y+7	; 0x07
     d0c:	98 85       	ldd	r25, Y+8	; 0x08
     d0e:	82 0f       	add	r24, r18
     d10:	93 1f       	adc	r25, r19
     d12:	9a 83       	std	Y+2, r25	; 0x02
     d14:	89 83       	std	Y+1, r24	; 0x01
	second = (tempSecond)%60;			  //what's left over
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	9a 81       	ldd	r25, Y+2	; 0x02
     d1a:	2c e3       	ldi	r18, 0x3C	; 60
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	b9 01       	movw	r22, r18
     d20:	0e 94 a0 1c 	call	0x3940	; 0x3940 <__divmodhi4>
     d24:	9c 01       	movw	r18, r24
     d26:	8d 81       	ldd	r24, Y+5	; 0x05
     d28:	9e 81       	ldd	r25, Y+6	; 0x06
     d2a:	fc 01       	movw	r30, r24
     d2c:	34 8f       	std	Z+28, r19	; 0x1c
     d2e:	23 8f       	std	Z+27, r18	; 0x1b
	if ((tempSecond)/60 >= 1){
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	9a 81       	ldd	r25, Y+2	; 0x02
     d34:	21 e0       	ldi	r18, 0x01	; 1
     d36:	8c 33       	cpi	r24, 0x3C	; 60
     d38:	91 05       	cpc	r25, r1
     d3a:	0c f4       	brge	.+2      	; 0xd3e <_ZN6myTime10addSecondsEi+0x5a>
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	22 23       	and	r18, r18
     d40:	91 f0       	breq	.+36     	; 0xd66 <_ZN6myTime10addSecondsEi+0x82>
		//There are more than 60 seconds now, find out how many minutes need to be added
		volatile int minutesToAdd = (tempSecond)/60;		  //if seconds = 120, adds two minutes
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	9a 81       	ldd	r25, Y+2	; 0x02
     d46:	2c e3       	ldi	r18, 0x3C	; 60
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	b9 01       	movw	r22, r18
     d4c:	0e 94 a0 1c 	call	0x3940	; 0x3940 <__divmodhi4>
     d50:	9b 01       	movw	r18, r22
     d52:	c9 01       	movw	r24, r18
     d54:	9c 83       	std	Y+4, r25	; 0x04
     d56:	8b 83       	std	Y+3, r24	; 0x03
		addMinutes(minutesToAdd);					  //add to minutes
     d58:	2b 81       	ldd	r18, Y+3	; 0x03
     d5a:	3c 81       	ldd	r19, Y+4	; 0x04
     d5c:	8d 81       	ldd	r24, Y+5	; 0x05
     d5e:	9e 81       	ldd	r25, Y+6	; 0x06
     d60:	b9 01       	movw	r22, r18
     d62:	0e 94 28 06 	call	0xc50	; 0xc50 <_ZN6myTime10addMinutesEi>
	}
}
     d66:	28 96       	adiw	r28, 0x08	; 8
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	08 95       	ret

00000d78 <_ZN6myTime13checkValidityEv>:

BOOL myTime::checkValidity(){
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <_ZN6myTime13checkValidityEv+0x6>
     d7e:	0f 92       	push	r0
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
     d84:	9b 83       	std	Y+3, r25	; 0x03
     d86:	8a 83       	std	Y+2, r24	; 0x02
	BOOL stillValid=fTrue;
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	89 83       	std	Y+1, r24	; 0x01
	if (second/60==0 && minute/60==0 && hour/24==0){
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	9b 81       	ldd	r25, Y+3	; 0x03
     d90:	fc 01       	movw	r30, r24
     d92:	83 8d       	ldd	r24, Z+27	; 0x1b
     d94:	94 8d       	ldd	r25, Z+28	; 0x1c
     d96:	cb 96       	adiw	r24, 0x3b	; 59
     d98:	87 37       	cpi	r24, 0x77	; 119
     d9a:	91 05       	cpc	r25, r1
     d9c:	a0 f4       	brcc	.+40     	; 0xdc6 <_ZN6myTime13checkValidityEv+0x4e>
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	9b 81       	ldd	r25, Y+3	; 0x03
     da2:	fc 01       	movw	r30, r24
     da4:	81 8d       	ldd	r24, Z+25	; 0x19
     da6:	92 8d       	ldd	r25, Z+26	; 0x1a
     da8:	cb 96       	adiw	r24, 0x3b	; 59
     daa:	87 37       	cpi	r24, 0x77	; 119
     dac:	91 05       	cpc	r25, r1
     dae:	58 f4       	brcc	.+22     	; 0xdc6 <_ZN6myTime13checkValidityEv+0x4e>
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	9b 81       	ldd	r25, Y+3	; 0x03
     db4:	fc 01       	movw	r30, r24
     db6:	87 89       	ldd	r24, Z+23	; 0x17
     db8:	90 8d       	ldd	r25, Z+24	; 0x18
     dba:	47 96       	adiw	r24, 0x17	; 23
     dbc:	8f 32       	cpi	r24, 0x2F	; 47
     dbe:	91 05       	cpc	r25, r1
     dc0:	10 f4       	brcc	.+4      	; 0xdc6 <_ZN6myTime13checkValidityEv+0x4e>
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	01 c0       	rjmp	.+2      	; 0xdc8 <_ZN6myTime13checkValidityEv+0x50>
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	88 23       	and	r24, r24
     dca:	69 f0       	breq	.+26     	; 0xde6 <_ZN6myTime13checkValidityEv+0x6e>
		if (checkValidityDate()){return fTrue;}
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	9b 81       	ldd	r25, Y+3	; 0x03
     dd0:	0e 94 02 03 	call	0x604	; 0x604 <_ZN6myDate17checkValidityDateEv>
     dd4:	98 2f       	mov	r25, r24
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	99 23       	and	r25, r25
     dda:	09 f4       	brne	.+2      	; 0xdde <_ZN6myTime13checkValidityEv+0x66>
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	88 23       	and	r24, r24
     de0:	11 f0       	breq	.+4      	; 0xde6 <_ZN6myTime13checkValidityEv+0x6e>
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	01 c0       	rjmp	.+2      	; 0xde8 <_ZN6myTime13checkValidityEv+0x70>
	}
	return fFalse;
     de6:	80 e0       	ldi	r24, 0x00	; 0
}
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	08 95       	ret

00000df4 <_ZN6myTime7getTimeEv>:

const char * myTime::getTime(){
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	2b 97       	sbiw	r28, 0x0b	; 11
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	de bf       	out	0x3e, r29	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	cd bf       	out	0x3d, r28	; 61
     e08:	9b 87       	std	Y+11, r25	; 0x0b
     e0a:	8a 87       	std	Y+10, r24	; 0x0a
	char hourString[3], minuteString[3],secondString[3];
	itoa(hour,hourString,10);
     e0c:	8a 85       	ldd	r24, Y+10	; 0x0a
     e0e:	9b 85       	ldd	r25, Y+11	; 0x0b
     e10:	fc 01       	movw	r30, r24
     e12:	87 89       	ldd	r24, Z+23	; 0x17
     e14:	90 8d       	ldd	r25, Z+24	; 0x18
     e16:	9e 01       	movw	r18, r28
     e18:	2f 5f       	subi	r18, 0xFF	; 255
     e1a:	3f 4f       	sbci	r19, 0xFF	; 255
     e1c:	b9 01       	movw	r22, r18
     e1e:	4a e0       	ldi	r20, 0x0A	; 10
     e20:	50 e0       	ldi	r21, 0x00	; 0
     e22:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <itoa>
	itoa(minute,minuteString,10);
     e26:	8a 85       	ldd	r24, Y+10	; 0x0a
     e28:	9b 85       	ldd	r25, Y+11	; 0x0b
     e2a:	fc 01       	movw	r30, r24
     e2c:	81 8d       	ldd	r24, Z+25	; 0x19
     e2e:	92 8d       	ldd	r25, Z+26	; 0x1a
     e30:	9e 01       	movw	r18, r28
     e32:	2c 5f       	subi	r18, 0xFC	; 252
     e34:	3f 4f       	sbci	r19, 0xFF	; 255
     e36:	b9 01       	movw	r22, r18
     e38:	4a e0       	ldi	r20, 0x0A	; 10
     e3a:	50 e0       	ldi	r21, 0x00	; 0
     e3c:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <itoa>
	itoa(second,secondString,10);
     e40:	8a 85       	ldd	r24, Y+10	; 0x0a
     e42:	9b 85       	ldd	r25, Y+11	; 0x0b
     e44:	fc 01       	movw	r30, r24
     e46:	83 8d       	ldd	r24, Z+27	; 0x1b
     e48:	94 8d       	ldd	r25, Z+28	; 0x1c
     e4a:	9e 01       	movw	r18, r28
     e4c:	29 5f       	subi	r18, 0xF9	; 249
     e4e:	3f 4f       	sbci	r19, 0xFF	; 255
     e50:	b9 01       	movw	r22, r18
     e52:	4a e0       	ldi	r20, 0x0A	; 10
     e54:	50 e0       	ldi	r21, 0x00	; 0
     e56:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <itoa>
	strcpy(timeString,hourString);
     e5a:	8a 85       	ldd	r24, Y+10	; 0x0a
     e5c:	9b 85       	ldd	r25, Y+11	; 0x0b
     e5e:	4d 96       	adiw	r24, 0x1d	; 29
     e60:	9e 01       	movw	r18, r28
     e62:	2f 5f       	subi	r18, 0xFF	; 255
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	b9 01       	movw	r22, r18
     e68:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <strcpy>
	strcat(timeString,":");
     e6c:	8a 85       	ldd	r24, Y+10	; 0x0a
     e6e:	9b 85       	ldd	r25, Y+11	; 0x0b
     e70:	9c 01       	movw	r18, r24
     e72:	23 5e       	subi	r18, 0xE3	; 227
     e74:	3f 4f       	sbci	r19, 0xFF	; 255
     e76:	c9 01       	movw	r24, r18
     e78:	ac 01       	movw	r20, r24
     e7a:	fa 01       	movw	r30, r20
     e7c:	01 90       	ld	r0, Z+
     e7e:	00 20       	and	r0, r0
     e80:	e9 f7       	brne	.-6      	; 0xe7c <_ZN6myTime7getTimeEv+0x88>
     e82:	cf 01       	movw	r24, r30
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	84 1b       	sub	r24, r20
     e88:	95 0b       	sbc	r25, r21
     e8a:	82 0f       	add	r24, r18
     e8c:	93 1f       	adc	r25, r19
     e8e:	2a e3       	ldi	r18, 0x3A	; 58
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	fc 01       	movw	r30, r24
     e94:	31 83       	std	Z+1, r19	; 0x01
     e96:	20 83       	st	Z, r18
	strcat(timeString,minuteString);
     e98:	8a 85       	ldd	r24, Y+10	; 0x0a
     e9a:	9b 85       	ldd	r25, Y+11	; 0x0b
     e9c:	4d 96       	adiw	r24, 0x1d	; 29
     e9e:	9e 01       	movw	r18, r28
     ea0:	2c 5f       	subi	r18, 0xFC	; 252
     ea2:	3f 4f       	sbci	r19, 0xFF	; 255
     ea4:	b9 01       	movw	r22, r18
     ea6:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <strcat>
	strcat(timeString,":");
     eaa:	8a 85       	ldd	r24, Y+10	; 0x0a
     eac:	9b 85       	ldd	r25, Y+11	; 0x0b
     eae:	9c 01       	movw	r18, r24
     eb0:	23 5e       	subi	r18, 0xE3	; 227
     eb2:	3f 4f       	sbci	r19, 0xFF	; 255
     eb4:	c9 01       	movw	r24, r18
     eb6:	ac 01       	movw	r20, r24
     eb8:	fa 01       	movw	r30, r20
     eba:	01 90       	ld	r0, Z+
     ebc:	00 20       	and	r0, r0
     ebe:	e9 f7       	brne	.-6      	; 0xeba <_ZN6myTime7getTimeEv+0xc6>
     ec0:	cf 01       	movw	r24, r30
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	84 1b       	sub	r24, r20
     ec6:	95 0b       	sbc	r25, r21
     ec8:	82 0f       	add	r24, r18
     eca:	93 1f       	adc	r25, r19
     ecc:	2a e3       	ldi	r18, 0x3A	; 58
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	fc 01       	movw	r30, r24
     ed2:	31 83       	std	Z+1, r19	; 0x01
     ed4:	20 83       	st	Z, r18
	strcat(timeString,secondString);
     ed6:	8a 85       	ldd	r24, Y+10	; 0x0a
     ed8:	9b 85       	ldd	r25, Y+11	; 0x0b
     eda:	4d 96       	adiw	r24, 0x1d	; 29
     edc:	9e 01       	movw	r18, r28
     ede:	29 5f       	subi	r18, 0xF9	; 249
     ee0:	3f 4f       	sbci	r19, 0xFF	; 255
     ee2:	b9 01       	movw	r22, r18
     ee4:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <strcat>
	timeString[11] = '\0';
     ee8:	8a 85       	ldd	r24, Y+10	; 0x0a
     eea:	9b 85       	ldd	r25, Y+11	; 0x0b
     eec:	fc 01       	movw	r30, r24
     eee:	10 a6       	lds	r17, 0xb0
	return timeString;
     ef0:	8a 85       	ldd	r24, Y+10	; 0x0a
     ef2:	9b 85       	ldd	r25, Y+11	; 0x0b
     ef4:	4d 96       	adiw	r24, 0x1d	; 29
     ef6:	2b 96       	adiw	r28, 0x0b	; 11
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	de bf       	out	0x3e, r29	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	cd bf       	out	0x3d, r28	; 61
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	08 95       	ret

00000f08 <_Z18getDateTime_eepromhh>:
BYTE EEMEM eeDay = 31;
WORD EEMEM eeYear = 2013;


/*************************************************************************************************************/
void getDateTime_eeprom(BOOL gTime, BOOL gDate){			//get date and time from EEPROM
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	2f 97       	sbiw	r28, 0x0f	; 15
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	8e 87       	std	Y+14, r24	; 0x0e
     f1e:	6f 87       	std	Y+15, r22	; 0x0f
	cli();
     f20:	f8 94       	cli
	if (gTime){
     f22:	8e 85       	ldd	r24, Y+14	; 0x0e
     f24:	88 23       	and	r24, r24
     f26:	09 f4       	brne	.+2      	; 0xf2a <_Z18getDateTime_eepromhh+0x22>
     f28:	4b c0       	rjmp	.+150    	; 0xfc0 <_Z18getDateTime_eepromhh+0xb8>
		BYTE tempMin, tempSec, tempHour;
		int times=0;
     f2a:	1a 82       	std	Y+2, r1	; 0x02
     f2c:	19 82       	std	Y+1, r1	; 0x01
		BOOL notGood=fTrue;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	8b 83       	std	Y+3, r24	; 0x03
		while(notGood && times<3){
     f32:	2c c0       	rjmp	.+88     	; 0xf8c <_Z18getDateTime_eepromhh+0x84>
			tempSec = eeprom_read_byte(&eeSecond);
     f34:	82 e0       	ldi	r24, 0x02	; 2
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <__eerd_byte_m644pa>
     f3c:	8f 83       	std	Y+7, r24	; 0x07
			tempMin = eeprom_read_byte(&eeMinute);
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <__eerd_byte_m644pa>
     f46:	88 87       	std	Y+8, r24	; 0x08
			tempHour = eeprom_read_byte(&eeHour);
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <__eerd_byte_m644pa>
     f50:	89 87       	std	Y+9, r24	; 0x09
			if (tempSec/60==0 && tempMin/60==0 && tempHour/24==0){currentTime.setTime((int)tempHour,(int)tempMin,(int)tempSec); notGood=fFalse;}
     f52:	8f 81       	ldd	r24, Y+7	; 0x07
     f54:	8c 33       	cpi	r24, 0x3C	; 60
     f56:	a8 f4       	brcc	.+42     	; 0xf82 <_Z18getDateTime_eepromhh+0x7a>
     f58:	88 85       	ldd	r24, Y+8	; 0x08
     f5a:	8c 33       	cpi	r24, 0x3C	; 60
     f5c:	90 f4       	brcc	.+36     	; 0xf82 <_Z18getDateTime_eepromhh+0x7a>
     f5e:	89 85       	ldd	r24, Y+9	; 0x09
     f60:	88 31       	cpi	r24, 0x18	; 24
     f62:	78 f4       	brcc	.+30     	; 0xf82 <_Z18getDateTime_eepromhh+0x7a>
     f64:	89 85       	ldd	r24, Y+9	; 0x09
     f66:	68 2f       	mov	r22, r24
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	88 85       	ldd	r24, Y+8	; 0x08
     f6c:	48 2f       	mov	r20, r24
     f6e:	50 e0       	ldi	r21, 0x00	; 0
     f70:	8f 81       	ldd	r24, Y+7	; 0x07
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	86 ed       	ldi	r24, 0xD6	; 214
     f78:	91 e0       	ldi	r25, 0x01	; 1
     f7a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN6myTime7setTimeEiii>
     f7e:	1b 82       	std	Y+3, r1	; 0x03
     f80:	05 c0       	rjmp	.+10     	; 0xf8c <_Z18getDateTime_eepromhh+0x84>
			else {times++;}
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	9a 81       	ldd	r25, Y+2	; 0x02
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	9a 83       	std	Y+2, r25	; 0x02
     f8a:	89 83       	std	Y+1, r24	; 0x01
	cli();
	if (gTime){
		BYTE tempMin, tempSec, tempHour;
		int times=0;
		BOOL notGood=fTrue;
		while(notGood && times<3){
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	88 23       	and	r24, r24
     f90:	39 f0       	breq	.+14     	; 0xfa0 <_Z18getDateTime_eepromhh+0x98>
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	9a 81       	ldd	r25, Y+2	; 0x02
     f96:	83 30       	cpi	r24, 0x03	; 3
     f98:	91 05       	cpc	r25, r1
     f9a:	14 f4       	brge	.+4      	; 0xfa0 <_Z18getDateTime_eepromhh+0x98>
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	01 c0       	rjmp	.+2      	; 0xfa2 <_Z18getDateTime_eepromhh+0x9a>
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	88 23       	and	r24, r24
     fa4:	39 f6       	brne	.-114    	; 0xf34 <_Z18getDateTime_eepromhh+0x2c>
			tempMin = eeprom_read_byte(&eeMinute);
			tempHour = eeprom_read_byte(&eeHour);
			if (tempSec/60==0 && tempMin/60==0 && tempHour/24==0){currentTime.setTime((int)tempHour,(int)tempMin,(int)tempSec); notGood=fFalse;}
			else {times++;}
		}
		if (notGood){currentTime.setTime(1,1,1);}
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	88 23       	and	r24, r24
     faa:	51 f0       	breq	.+20     	; 0xfc0 <_Z18getDateTime_eepromhh+0xb8>
     fac:	86 ed       	ldi	r24, 0xD6	; 214
     fae:	91 e0       	ldi	r25, 0x01	; 1
     fb0:	61 e0       	ldi	r22, 0x01	; 1
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	41 e0       	ldi	r20, 0x01	; 1
     fb6:	50 e0       	ldi	r21, 0x00	; 0
     fb8:	21 e0       	ldi	r18, 0x01	; 1
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN6myTime7setTimeEiii>
	}		
	if (gDate){
     fc0:	8f 85       	ldd	r24, Y+15	; 0x0f
     fc2:	88 23       	and	r24, r24
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <_Z18getDateTime_eepromhh+0xc0>
     fc6:	4e c0       	rjmp	.+156    	; 0x1064 <_Z18getDateTime_eepromhh+0x15c>
		BYTE tempDay,tempMonth;
		WORD tempYear;
		int times=0;
     fc8:	1d 82       	std	Y+5, r1	; 0x05
     fca:	1c 82       	std	Y+4, r1	; 0x04
		BOOL notGood=fTrue;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	8e 83       	std	Y+6, r24	; 0x06
		while (notGood && times<3){
     fd0:	2f c0       	rjmp	.+94     	; 0x1030 <_Z18getDateTime_eepromhh+0x128>
			tempDay = eeprom_read_byte(&eeDay);
     fd2:	84 e0       	ldi	r24, 0x04	; 4
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <__eerd_byte_m644pa>
     fda:	8a 87       	std	Y+10, r24	; 0x0a
			tempMonth = eeprom_read_byte(&eeMonth);
     fdc:	83 e0       	ldi	r24, 0x03	; 3
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <__eerd_byte_m644pa>
     fe4:	8b 87       	std	Y+11, r24	; 0x0b
			tempYear = eeprom_read_word(&eeYear);
     fe6:	85 e0       	ldi	r24, 0x05	; 5
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__eerd_word_m644pa>
     fee:	9d 87       	std	Y+13, r25	; 0x0d
     ff0:	8c 87       	std	Y+12, r24	; 0x0c
			if (tempDay/31==0 && tempMonth/13==0 && tempYear/10000==0){currentTime.setDate((int)tempMonth,(int)tempDay,(int)tempYear); notGood=fFalse;}
     ff2:	8a 85       	ldd	r24, Y+10	; 0x0a
     ff4:	8f 31       	cpi	r24, 0x1F	; 31
     ff6:	b8 f4       	brcc	.+46     	; 0x1026 <_Z18getDateTime_eepromhh+0x11e>
     ff8:	8b 85       	ldd	r24, Y+11	; 0x0b
     ffa:	8d 30       	cpi	r24, 0x0D	; 13
     ffc:	a0 f4       	brcc	.+40     	; 0x1026 <_Z18getDateTime_eepromhh+0x11e>
     ffe:	8c 85       	ldd	r24, Y+12	; 0x0c
    1000:	9d 85       	ldd	r25, Y+13	; 0x0d
    1002:	27 e2       	ldi	r18, 0x27	; 39
    1004:	80 31       	cpi	r24, 0x10	; 16
    1006:	92 07       	cpc	r25, r18
    1008:	70 f4       	brcc	.+28     	; 0x1026 <_Z18getDateTime_eepromhh+0x11e>
    100a:	8b 85       	ldd	r24, Y+11	; 0x0b
    100c:	68 2f       	mov	r22, r24
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	8a 85       	ldd	r24, Y+10	; 0x0a
    1012:	48 2f       	mov	r20, r24
    1014:	50 e0       	ldi	r21, 0x00	; 0
    1016:	2c 85       	ldd	r18, Y+12	; 0x0c
    1018:	3d 85       	ldd	r19, Y+13	; 0x0d
    101a:	86 ed       	ldi	r24, 0xD6	; 214
    101c:	91 e0       	ldi	r25, 0x01	; 1
    101e:	0e 94 84 01 	call	0x308	; 0x308 <_ZN6myDate7setDateEiii>
    1022:	1e 82       	std	Y+6, r1	; 0x06
    1024:	05 c0       	rjmp	.+10     	; 0x1030 <_Z18getDateTime_eepromhh+0x128>
			else {times++;}
    1026:	8c 81       	ldd	r24, Y+4	; 0x04
    1028:	9d 81       	ldd	r25, Y+5	; 0x05
    102a:	01 96       	adiw	r24, 0x01	; 1
    102c:	9d 83       	std	Y+5, r25	; 0x05
    102e:	8c 83       	std	Y+4, r24	; 0x04
	if (gDate){
		BYTE tempDay,tempMonth;
		WORD tempYear;
		int times=0;
		BOOL notGood=fTrue;
		while (notGood && times<3){
    1030:	8e 81       	ldd	r24, Y+6	; 0x06
    1032:	88 23       	and	r24, r24
    1034:	39 f0       	breq	.+14     	; 0x1044 <_Z18getDateTime_eepromhh+0x13c>
    1036:	8c 81       	ldd	r24, Y+4	; 0x04
    1038:	9d 81       	ldd	r25, Y+5	; 0x05
    103a:	83 30       	cpi	r24, 0x03	; 3
    103c:	91 05       	cpc	r25, r1
    103e:	14 f4       	brge	.+4      	; 0x1044 <_Z18getDateTime_eepromhh+0x13c>
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	01 c0       	rjmp	.+2      	; 0x1046 <_Z18getDateTime_eepromhh+0x13e>
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	88 23       	and	r24, r24
    1048:	21 f6       	brne	.-120    	; 0xfd2 <_Z18getDateTime_eepromhh+0xca>
			tempMonth = eeprom_read_byte(&eeMonth);
			tempYear = eeprom_read_word(&eeYear);
			if (tempDay/31==0 && tempMonth/13==0 && tempYear/10000==0){currentTime.setDate((int)tempMonth,(int)tempDay,(int)tempYear); notGood=fFalse;}
			else {times++;}
		}
		if (notGood){currentTime.setDate(1,1,2001);}	
    104a:	8e 81       	ldd	r24, Y+6	; 0x06
    104c:	88 23       	and	r24, r24
    104e:	51 f0       	breq	.+20     	; 0x1064 <_Z18getDateTime_eepromhh+0x15c>
    1050:	86 ed       	ldi	r24, 0xD6	; 214
    1052:	91 e0       	ldi	r25, 0x01	; 1
    1054:	61 e0       	ldi	r22, 0x01	; 1
    1056:	70 e0       	ldi	r23, 0x00	; 0
    1058:	41 e0       	ldi	r20, 0x01	; 1
    105a:	50 e0       	ldi	r21, 0x00	; 0
    105c:	21 ed       	ldi	r18, 0xD1	; 209
    105e:	37 e0       	ldi	r19, 0x07	; 7
    1060:	0e 94 84 01 	call	0x308	; 0x308 <_ZN6myDate7setDateEiii>
	}
	sei();
    1064:	78 94       	sei
}
    1066:	2f 96       	adiw	r28, 0x0f	; 15
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	08 95       	ret

00001078 <_Z19saveDateTime_eepromhh>:
/*************************************************************************************************************/

void saveDateTime_eeprom(BOOL sTime, BOOL sDate){
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	29 97       	sbiw	r28, 0x09	; 9
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	88 87       	std	Y+8, r24	; 0x08
    108e:	69 87       	std	Y+9, r22	; 0x09
	cli();
    1090:	f8 94       	cli
	if (sTime){
    1092:	88 85       	ldd	r24, Y+8	; 0x08
    1094:	88 23       	and	r24, r24
    1096:	f1 f0       	breq	.+60     	; 0x10d4 <_Z19saveDateTime_eepromhh+0x5c>
		BYTE tempSec,tempMin,tempHour;
		tempHour = currentTime.getHours();
    1098:	86 ed       	ldi	r24, 0xD6	; 214
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	0e 94 b6 04 	call	0x96c	; 0x96c <_ZN6myTime8getHoursEv>
    10a0:	89 83       	std	Y+1, r24	; 0x01
		tempMin = currentTime.getMinutes();
    10a2:	86 ed       	ldi	r24, 0xD6	; 214
    10a4:	91 e0       	ldi	r25, 0x01	; 1
    10a6:	0e 94 a5 04 	call	0x94a	; 0x94a <_ZN6myTime10getMinutesEv>
    10aa:	8a 83       	std	Y+2, r24	; 0x02
		tempSec = currentTime.getSeconds();
    10ac:	86 ed       	ldi	r24, 0xD6	; 214
    10ae:	91 e0       	ldi	r25, 0x01	; 1
    10b0:	0e 94 94 04 	call	0x928	; 0x928 <_ZN6myTime10getSecondsEv>
    10b4:	8b 83       	std	Y+3, r24	; 0x03
		eeprom_write_byte(&eeSecond,tempSec);
    10b6:	82 e0       	ldi	r24, 0x02	; 2
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	6b 81       	ldd	r22, Y+3	; 0x03
    10bc:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <__eewr_byte_m644pa>
		eeprom_write_byte(&eeMinute,tempMin);
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	6a 81       	ldd	r22, Y+2	; 0x02
    10c6:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <__eewr_byte_m644pa>
		eeprom_write_byte(&eeHour,tempHour);
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	69 81       	ldd	r22, Y+1	; 0x01
    10d0:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <__eewr_byte_m644pa>
	}
	if (sDate){
    10d4:	89 85       	ldd	r24, Y+9	; 0x09
    10d6:	88 23       	and	r24, r24
    10d8:	09 f1       	breq	.+66     	; 0x111c <__stack+0x1d>
		BYTE tempDay,tempMonth;
		WORD tempYear;
		tempYear = currentTime.getYears();
    10da:	86 ed       	ldi	r24, 0xD6	; 214
    10dc:	91 e0       	ldi	r25, 0x01	; 1
    10de:	0e 94 ba 00 	call	0x174	; 0x174 <_ZN6myDate8getYearsEv>
    10e2:	9d 83       	std	Y+5, r25	; 0x05
    10e4:	8c 83       	std	Y+4, r24	; 0x04
		tempMonth = currentTime.getMonths();
    10e6:	86 ed       	ldi	r24, 0xD6	; 214
    10e8:	91 e0       	ldi	r25, 0x01	; 1
    10ea:	0e 94 a9 00 	call	0x152	; 0x152 <_ZN6myDate9getMonthsEv>
    10ee:	8e 83       	std	Y+6, r24	; 0x06
		tempDay = currentTime.getDays();
    10f0:	86 ed       	ldi	r24, 0xD6	; 214
    10f2:	91 e0       	ldi	r25, 0x01	; 1
    10f4:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN6myDate7getDaysEv>
    10f8:	8f 83       	std	Y+7, r24	; 0x07
		eeprom_write_word(&eeYear,tempYear);
    10fa:	85 e0       	ldi	r24, 0x05	; 5
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1100:	3d 81       	ldd	r19, Y+5	; 0x05
    1102:	b9 01       	movw	r22, r18
    1104:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <__eewr_word_m644pa>
		eeprom_write_byte(&eeMonth,tempMonth);
    1108:	83 e0       	ldi	r24, 0x03	; 3
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	6e 81       	ldd	r22, Y+6	; 0x06
    110e:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <__eewr_byte_m644pa>
		eeprom_write_byte(&eeDay,tempDay);
    1112:	84 e0       	ldi	r24, 0x04	; 4
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	6f 81       	ldd	r22, Y+7	; 0x07
    1118:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <__eewr_byte_m644pa>
	}
	sei();
    111c:	78 94       	sei
}
    111e:	29 96       	adiw	r28, 0x09	; 9
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	f8 94       	cli
    1124:	de bf       	out	0x3e, r29	; 62
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	cd bf       	out	0x3d, r28	; 61
    112a:	df 91       	pop	r29
    112c:	cf 91       	pop	r28
    112e:	08 95       	ret

00001130 <_Z8Wait_seci>:
extern WORD globalADC, globalTemp;
extern myTime currentTime;


/************************************************************************************************************/
void Wait_sec(int sec){
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	00 d0       	rcall	.+0      	; 0x1136 <_Z8Wait_seci+0x6>
    1136:	00 d0       	rcall	.+0      	; 0x1138 <_Z8Wait_seci+0x8>
    1138:	00 d0       	rcall	.+0      	; 0x113a <_Z8Wait_seci+0xa>
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
    113e:	9e 83       	std	Y+6, r25	; 0x06
    1140:	8d 83       	std	Y+5, r24	; 0x05
	volatile int startingTime = currentTime.getSeconds();
    1142:	86 ed       	ldi	r24, 0xD6	; 214
    1144:	91 e0       	ldi	r25, 0x01	; 1
    1146:	0e 94 94 04 	call	0x928	; 0x928 <_ZN6myTime10getSecondsEv>
    114a:	88 2f       	mov	r24, r24
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	9a 83       	std	Y+2, r25	; 0x02
    1150:	89 83       	std	Y+1, r24	; 0x01
	volatile int endingTime= (startingTime+sec)%60;
    1152:	29 81       	ldd	r18, Y+1	; 0x01
    1154:	3a 81       	ldd	r19, Y+2	; 0x02
    1156:	8d 81       	ldd	r24, Y+5	; 0x05
    1158:	9e 81       	ldd	r25, Y+6	; 0x06
    115a:	82 0f       	add	r24, r18
    115c:	93 1f       	adc	r25, r19
    115e:	2c e3       	ldi	r18, 0x3C	; 60
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	b9 01       	movw	r22, r18
    1164:	0e 94 a0 1c 	call	0x3940	; 0x3940 <__divmodhi4>
    1168:	9c 83       	std	Y+4, r25	; 0x04
    116a:	8b 83       	std	Y+3, r24	; 0x03
while (currentTime.getSeconds() != endingTime){asm volatile ("nop");}
    116c:	01 c0       	rjmp	.+2      	; 0x1170 <_Z8Wait_seci+0x40>
    116e:	00 00       	nop
    1170:	86 ed       	ldi	r24, 0xD6	; 214
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	0e 94 94 04 	call	0x928	; 0x928 <_ZN6myTime10getSecondsEv>
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	9c 81       	ldd	r25, Y+4	; 0x04
    1180:	41 e0       	ldi	r20, 0x01	; 1
    1182:	28 17       	cp	r18, r24
    1184:	39 07       	cpc	r19, r25
    1186:	09 f4       	brne	.+2      	; 0x118a <_Z8Wait_seci+0x5a>
    1188:	40 e0       	ldi	r20, 0x00	; 0
    118a:	44 23       	and	r20, r20
    118c:	81 f7       	brne	.-32     	; 0x116e <_Z8Wait_seci+0x3e>
}
    118e:	26 96       	adiw	r28, 0x06	; 6
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	f8 94       	cli
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	08 95       	ret

000011a0 <_Z7Wait_msi>:
/************************************************************************************************************/
void Wait_ms(int delay)
{
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <_Z7Wait_msi+0x6>
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <_Z7Wait_msi+0x8>
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	9c 83       	std	Y+4, r25	; 0x04
    11ae:	8b 83       	std	Y+3, r24	; 0x03
	volatile int i;

	while(delay > 0){
    11b0:	17 c0       	rjmp	.+46     	; 0x11e0 <_Z7Wait_msi+0x40>
		for(i = 0; i < 200; i++){
    11b2:	1a 82       	std	Y+2, r1	; 0x02
    11b4:	19 82       	std	Y+1, r1	; 0x01
    11b6:	06 c0       	rjmp	.+12     	; 0x11c4 <_Z7Wait_msi+0x24>
			asm volatile("nop");
    11b8:	00 00       	nop
void Wait_ms(int delay)
{
	volatile int i;

	while(delay > 0){
		for(i = 0; i < 200; i++){
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	9a 81       	ldd	r25, Y+2	; 0x02
    11be:	01 96       	adiw	r24, 0x01	; 1
    11c0:	9a 83       	std	Y+2, r25	; 0x02
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	9a 81       	ldd	r25, Y+2	; 0x02
    11c8:	21 e0       	ldi	r18, 0x01	; 1
    11ca:	88 3c       	cpi	r24, 0xC8	; 200
    11cc:	91 05       	cpc	r25, r1
    11ce:	0c f0       	brlt	.+2      	; 0x11d2 <_Z7Wait_msi+0x32>
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	22 23       	and	r18, r18
    11d4:	89 f7       	brne	.-30     	; 0x11b8 <_Z7Wait_msi+0x18>
			asm volatile("nop");
		}
		delay -= 1;
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	9c 81       	ldd	r25, Y+4	; 0x04
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	9c 83       	std	Y+4, r25	; 0x04
    11de:	8b 83       	std	Y+3, r24	; 0x03
/************************************************************************************************************/
void Wait_ms(int delay)
{
	volatile int i;

	while(delay > 0){
    11e0:	21 e0       	ldi	r18, 0x01	; 1
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	9c 81       	ldd	r25, Y+4	; 0x04
    11e6:	18 16       	cp	r1, r24
    11e8:	19 06       	cpc	r1, r25
    11ea:	0c f0       	brlt	.+2      	; 0x11ee <_Z7Wait_msi+0x4e>
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	22 23       	and	r18, r18
    11f0:	01 f7       	brne	.-64     	; 0x11b2 <_Z7Wait_msi+0x12>
		for(i = 0; i < 200; i++){
			asm volatile("nop");
		}
		delay -= 1;
	}
}
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	08 95       	ret

00001200 <_Z17SendInterruptGAVRv>:
/************************************************************************************************************/
void SendInterruptGAVR(){
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	00 d0       	rcall	.+0      	; 0x1206 <_Z17SendInterruptGAVRv+0x6>
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
	//Raise interrupts to GAVR for three ish clock cycles. Tried waiting....didn't work.
	prtGAVRINT |= (1 << bnGAVRINT);
    120a:	85 e2       	ldi	r24, 0x25	; 37
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	25 e2       	ldi	r18, 0x25	; 37
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	f9 01       	movw	r30, r18
    1214:	20 81       	ld	r18, Z
    1216:	28 60       	ori	r18, 0x08	; 8
    1218:	fc 01       	movw	r30, r24
    121a:	20 83       	st	Z, r18
	for (int i=0; i<2; i++){asm ("nop");}
    121c:	1a 82       	std	Y+2, r1	; 0x02
    121e:	19 82       	std	Y+1, r1	; 0x01
    1220:	06 c0       	rjmp	.+12     	; 0x122e <_Z17SendInterruptGAVRv+0x2e>
    1222:	00 00       	nop
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	9a 81       	ldd	r25, Y+2	; 0x02
    1228:	01 96       	adiw	r24, 0x01	; 1
    122a:	9a 83       	std	Y+2, r25	; 0x02
    122c:	89 83       	std	Y+1, r24	; 0x01
    122e:	21 e0       	ldi	r18, 0x01	; 1
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	9a 81       	ldd	r25, Y+2	; 0x02
    1234:	82 30       	cpi	r24, 0x02	; 2
    1236:	91 05       	cpc	r25, r1
    1238:	0c f0       	brlt	.+2      	; 0x123c <_Z17SendInterruptGAVRv+0x3c>
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	22 23       	and	r18, r18
    123e:	89 f7       	brne	.-30     	; 0x1222 <_Z17SendInterruptGAVRv+0x22>
	prtGAVRINT &= ~(1 << bnGAVRINT);
    1240:	85 e2       	ldi	r24, 0x25	; 37
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	25 e2       	ldi	r18, 0x25	; 37
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	f9 01       	movw	r30, r18
    124a:	20 81       	ld	r18, Z
    124c:	27 7f       	andi	r18, 0xF7	; 247
    124e:	fc 01       	movw	r30, r24
    1250:	20 83       	st	Z, r18
	Wait_sec(1);
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e 94 98 08 	call	0x1130	; 0x1130 <_Z8Wait_seci>
}
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	08 95       	ret

00001264 <_Z13PutUartChBonec>:

/**************************************************************************************************************/
void PutUartChBone(char ch){
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	0f 92       	push	r0
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSR0A & (1 << UDRE0)));
    1270:	00 00       	nop
    1272:	80 ec       	ldi	r24, 0xC0	; 192
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	fc 01       	movw	r30, r24
    1278:	80 81       	ld	r24, Z
    127a:	88 2f       	mov	r24, r24
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	80 72       	andi	r24, 0x20	; 32
    1280:	90 70       	andi	r25, 0x00	; 0
    1282:	21 e0       	ldi	r18, 0x01	; 1
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	09 f0       	breq	.+2      	; 0x128a <_Z13PutUartChBonec+0x26>
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	22 23       	and	r18, r18
    128c:	91 f7       	brne	.-28     	; 0x1272 <_Z13PutUartChBonec+0xe>
	UDR0=ch;
    128e:	86 ec       	ldi	r24, 0xC6	; 198
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	29 81       	ldd	r18, Y+1	; 0x01
    1294:	fc 01       	movw	r30, r24
    1296:	20 83       	st	Z, r18
}
    1298:	0f 90       	pop	r0
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	08 95       	ret

000012a0 <_Z9PrintBonePc>:
/*************************************************************************************************************/
void PrintBone(char string[]){
    12a0:	cf 93       	push	r28
    12a2:	df 93       	push	r29
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <_Z9PrintBonePc+0x6>
    12a6:	0f 92       	push	r0
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	9b 83       	std	Y+3, r25	; 0x03
    12ae:	8a 83       	std	Y+2, r24	; 0x02
	BYTE i=0;
    12b0:	19 82       	std	Y+1, r1	; 0x01
	
	while (string[i]){
    12b2:	0e c0       	rjmp	.+28     	; 0x12d0 <_Z9PrintBonePc+0x30>
		PutUartChBone(string[i++]);
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	88 2f       	mov	r24, r24
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	2a 81       	ldd	r18, Y+2	; 0x02
    12bc:	3b 81       	ldd	r19, Y+3	; 0x03
    12be:	82 0f       	add	r24, r18
    12c0:	93 1f       	adc	r25, r19
    12c2:	fc 01       	movw	r30, r24
    12c4:	80 81       	ld	r24, Z
    12c6:	99 81       	ldd	r25, Y+1	; 0x01
    12c8:	9f 5f       	subi	r25, 0xFF	; 255
    12ca:	99 83       	std	Y+1, r25	; 0x01
    12cc:	0e 94 32 09 	call	0x1264	; 0x1264 <_Z13PutUartChBonec>
}
/*************************************************************************************************************/
void PrintBone(char string[]){
	BYTE i=0;
	
	while (string[i]){
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	88 2f       	mov	r24, r24
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	2a 81       	ldd	r18, Y+2	; 0x02
    12d8:	3b 81       	ldd	r19, Y+3	; 0x03
    12da:	82 0f       	add	r24, r18
    12dc:	93 1f       	adc	r25, r19
    12de:	fc 01       	movw	r30, r24
    12e0:	90 81       	ld	r25, Z
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	99 23       	and	r25, r25
    12e6:	09 f4       	brne	.+2      	; 0x12ea <_Z9PrintBonePc+0x4a>
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	88 23       	and	r24, r24
    12ec:	19 f7       	brne	.-58     	; 0x12b4 <_Z9PrintBonePc+0x14>
		PutUartChBone(string[i++]);
	}
}
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	08 95       	ret

000012fa <_Z13PutUartChGAVRc>:
/*************************************************************************************************************/

void PutUartChGAVR(char ch){
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	0f 92       	push	r0
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    1304:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSR1A & (1 << UDRE1)));
    1306:	00 00       	nop
    1308:	88 ec       	ldi	r24, 0xC8	; 200
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	fc 01       	movw	r30, r24
    130e:	80 81       	ld	r24, Z
    1310:	88 2f       	mov	r24, r24
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	80 72       	andi	r24, 0x20	; 32
    1316:	90 70       	andi	r25, 0x00	; 0
    1318:	21 e0       	ldi	r18, 0x01	; 1
    131a:	00 97       	sbiw	r24, 0x00	; 0
    131c:	09 f0       	breq	.+2      	; 0x1320 <_Z13PutUartChGAVRc+0x26>
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	22 23       	and	r18, r18
    1322:	91 f7       	brne	.-28     	; 0x1308 <_Z13PutUartChGAVRc+0xe>
	UDR1=ch;
    1324:	8e ec       	ldi	r24, 0xCE	; 206
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	29 81       	ldd	r18, Y+1	; 0x01
    132a:	fc 01       	movw	r30, r24
    132c:	20 83       	st	Z, r18
}
    132e:	0f 90       	pop	r0
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	08 95       	ret

00001336 <_Z9PrintGAVRPc>:
/*************************************************************************************************************/

void PrintGAVR(char string[]){
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	00 d0       	rcall	.+0      	; 0x133c <_Z9PrintGAVRPc+0x6>
    133c:	0f 92       	push	r0
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	9b 83       	std	Y+3, r25	; 0x03
    1344:	8a 83       	std	Y+2, r24	; 0x02
	BYTE i=0;
    1346:	19 82       	std	Y+1, r1	; 0x01
	while (string[i]){
    1348:	12 c0       	rjmp	.+36     	; 0x136e <_Z9PrintGAVRPc+0x38>
		Wait_ms(350);
    134a:	8e e5       	ldi	r24, 0x5E	; 94
    134c:	91 e0       	ldi	r25, 0x01	; 1
    134e:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_Z7Wait_msi>
		PutUartChGAVR(string[i++]);
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	88 2f       	mov	r24, r24
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	2a 81       	ldd	r18, Y+2	; 0x02
    135a:	3b 81       	ldd	r19, Y+3	; 0x03
    135c:	82 0f       	add	r24, r18
    135e:	93 1f       	adc	r25, r19
    1360:	fc 01       	movw	r30, r24
    1362:	80 81       	ld	r24, Z
    1364:	99 81       	ldd	r25, Y+1	; 0x01
    1366:	9f 5f       	subi	r25, 0xFF	; 255
    1368:	99 83       	std	Y+1, r25	; 0x01
    136a:	0e 94 7d 09 	call	0x12fa	; 0x12fa <_Z13PutUartChGAVRc>
}
/*************************************************************************************************************/

void PrintGAVR(char string[]){
	BYTE i=0;
	while (string[i]){
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	88 2f       	mov	r24, r24
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	2a 81       	ldd	r18, Y+2	; 0x02
    1376:	3b 81       	ldd	r19, Y+3	; 0x03
    1378:	82 0f       	add	r24, r18
    137a:	93 1f       	adc	r25, r19
    137c:	fc 01       	movw	r30, r24
    137e:	90 81       	ld	r25, Z
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	99 23       	and	r25, r25
    1384:	09 f4       	brne	.+2      	; 0x1388 <_Z9PrintGAVRPc+0x52>
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	88 23       	and	r24, r24
    138a:	f9 f6       	brne	.-66     	; 0x134a <_Z9PrintGAVRPc+0x14>
		Wait_ms(350);
		PutUartChGAVR(string[i++]);
	}
}
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	08 95       	ret

00001398 <_Z8sendGAVRv>:
/*************************************************************************************************************/
void sendGAVR(){
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	cb 55       	subi	r28, 0x5B	; 91
    13a2:	d0 40       	sbci	r29, 0x00	; 0
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	de bf       	out	0x3e, r29	; 62
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	cd bf       	out	0x3d, r28	; 61
	//Declare variables to be used.
	volatile static unsigned int state=0;
	volatile BOOL noCarriage=fTrue;
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	8b 87       	std	Y+11, r24	; 0x0b
	char recChar, recString[40], sentString[40];
	unsigned int strLoc=0;
    13b2:	1a 82       	std	Y+2, r1	; 0x02
    13b4:	19 82       	std	Y+1, r1	; 0x01
	
	//Set sending flag
	flagSendingGAVR=fTrue;
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	80 93 06 02 	sts	0x0206, r24
	
	//Transmission protocol
	while (flagSendingGAVR){
    13bc:	14 c2       	rjmp	.+1064   	; 0x17e6 <_Z8sendGAVRv+0x44e>
		/* State 5: Successful transmission and reception. Kill sending flag, reset state, exit.					 */
		/* State 6: ACKBAD received, check to see if we have an invalid date/time in our clock or it was just noisy  */
		/*			and had error in transmission/reception. If valid, go to waiting state. Else exit and set flag.	 */
		/* State 7: Got the wrong ack for something, set a flag to let the WAVR do its thing then try again.		 */
		/*************************************************************************************************************/
		switch (state){
    13be:	80 91 19 02 	lds	r24, 0x0219
    13c2:	90 91 1a 02 	lds	r25, 0x021A
    13c6:	83 30       	cpi	r24, 0x03	; 3
    13c8:	91 05       	cpc	r25, r1
    13ca:	09 f4       	brne	.+2      	; 0x13ce <_Z8sendGAVRv+0x36>
    13cc:	f4 c0       	rjmp	.+488    	; 0x15b6 <_Z8sendGAVRv+0x21e>
    13ce:	84 30       	cpi	r24, 0x04	; 4
    13d0:	91 05       	cpc	r25, r1
    13d2:	40 f4       	brcc	.+16     	; 0x13e4 <_Z8sendGAVRv+0x4c>
    13d4:	81 30       	cpi	r24, 0x01	; 1
    13d6:	91 05       	cpc	r25, r1
    13d8:	d9 f0       	breq	.+54     	; 0x1410 <_Z8sendGAVRv+0x78>
    13da:	82 30       	cpi	r24, 0x02	; 2
    13dc:	91 05       	cpc	r25, r1
    13de:	08 f0       	brcs	.+2      	; 0x13e2 <_Z8sendGAVRv+0x4a>
    13e0:	89 c0       	rjmp	.+274    	; 0x14f4 <_Z8sendGAVRv+0x15c>
    13e2:	0d c0       	rjmp	.+26     	; 0x13fe <_Z8sendGAVRv+0x66>
    13e4:	86 30       	cpi	r24, 0x06	; 6
    13e6:	91 05       	cpc	r25, r1
    13e8:	09 f4       	brne	.+2      	; 0x13ec <_Z8sendGAVRv+0x54>
    13ea:	b5 c1       	rjmp	.+874    	; 0x1756 <_Z8sendGAVRv+0x3be>
    13ec:	87 30       	cpi	r24, 0x07	; 7
    13ee:	91 05       	cpc	r25, r1
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <_Z8sendGAVRv+0x5c>
    13f2:	ca c1       	rjmp	.+916    	; 0x1788 <_Z8sendGAVRv+0x3f0>
    13f4:	85 30       	cpi	r24, 0x05	; 5
    13f6:	91 05       	cpc	r25, r1
    13f8:	09 f4       	brne	.+2      	; 0x13fc <_Z8sendGAVRv+0x64>
    13fa:	84 c1       	rjmp	.+776    	; 0x1704 <_Z8sendGAVRv+0x36c>
    13fc:	ec c1       	rjmp	.+984    	; 0x17d6 <_Z8sendGAVRv+0x43e>
			case 0: {
				SendInterruptGAVR();
    13fe:	0e 94 00 09 	call	0x1200	; 0x1200 <_Z17SendInterruptGAVRv>
				state=1;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	90 93 1a 02 	sts	0x021A, r25
    140a:	80 93 19 02 	sts	0x0219, r24
				break;
    140e:	eb c1       	rjmp	.+982    	; 0x17e6 <_Z8sendGAVRv+0x44e>
			}//end case 0
			case 1: {
				Wait_ms(300);		//Wait for connection to set and something to come in.			
    1410:	8c e2       	ldi	r24, 0x2C	; 44
    1412:	91 e0       	ldi	r25, 0x01	; 1
    1414:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_Z7Wait_msi>
				//Put together string that is being received.
				while (noCarriage && flagSendingGAVR){
    1418:	5f c0       	rjmp	.+190    	; 0x14d8 <_Z8sendGAVRv+0x140>
					Wait_ms(100);				//wait for the register to start to load.
    141a:	84 e6       	ldi	r24, 0x64	; 100
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_Z7Wait_msi>
					PrintBone("WaitingW...");
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	91 e0       	ldi	r25, 0x01	; 1
    1426:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
					while (!(UCSR1A & (1 << RXC1)) && flagSendingGAVR);				//wait for next character
    142a:	00 00       	nop
    142c:	88 ec       	ldi	r24, 0xC8	; 200
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	fc 01       	movw	r30, r24
    1432:	80 81       	ld	r24, Z
    1434:	88 23       	and	r24, r24
    1436:	34 f0       	brlt	.+12     	; 0x1444 <_Z8sendGAVRv+0xac>
    1438:	80 91 06 02 	lds	r24, 0x0206
    143c:	88 23       	and	r24, r24
    143e:	11 f0       	breq	.+4      	; 0x1444 <_Z8sendGAVRv+0xac>
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	01 c0       	rjmp	.+2      	; 0x1446 <_Z8sendGAVRv+0xae>
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	88 23       	and	r24, r24
    1448:	89 f7       	brne	.-30     	; 0x142c <_Z8sendGAVRv+0x94>
					if (!flagSendingGAVR){state=7; break;}		//if timeout is why we broke, just exit
    144a:	80 91 06 02 	lds	r24, 0x0206
    144e:	88 23       	and	r24, r24
    1450:	41 f4       	brne	.+16     	; 0x1462 <_Z8sendGAVRv+0xca>
    1452:	87 e0       	ldi	r24, 0x07	; 7
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	90 93 1a 02 	sts	0x021A, r25
    145a:	80 93 19 02 	sts	0x0219, r24
    145e:	00 00       	nop
					recString[strLoc++]=recChar;
					if (recChar=='.'){recString[strLoc++]='\0'; state=2; noCarriage=fFalse;}
					else if (strLoc >= 39){strLoc = 0; noCarriage=fFalse; state=7;}
					else;
				}//end while
				break;
    1460:	c2 c1       	rjmp	.+900    	; 0x17e6 <_Z8sendGAVRv+0x44e>
				while (noCarriage && flagSendingGAVR){
					Wait_ms(100);				//wait for the register to start to load.
					PrintBone("WaitingW...");
					while (!(UCSR1A & (1 << RXC1)) && flagSendingGAVR);				//wait for next character
					if (!flagSendingGAVR){state=7; break;}		//if timeout is why we broke, just exit
					recChar=UDR1;
    1462:	8e ec       	ldi	r24, 0xCE	; 206
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	fc 01       	movw	r30, r24
    1468:	80 81       	ld	r24, Z
    146a:	89 87       	std	Y+9, r24	; 0x09
					recString[strLoc++]=recChar;
    146c:	9e 01       	movw	r18, r28
    146e:	2c 5c       	subi	r18, 0xCC	; 204
    1470:	3f 4f       	sbci	r19, 0xFF	; 255
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	9a 81       	ldd	r25, Y+2	; 0x02
    1476:	82 0f       	add	r24, r18
    1478:	93 1f       	adc	r25, r19
    147a:	29 85       	ldd	r18, Y+9	; 0x09
    147c:	fc 01       	movw	r30, r24
    147e:	20 83       	st	Z, r18
    1480:	89 81       	ldd	r24, Y+1	; 0x01
    1482:	9a 81       	ldd	r25, Y+2	; 0x02
    1484:	01 96       	adiw	r24, 0x01	; 1
    1486:	9a 83       	std	Y+2, r25	; 0x02
    1488:	89 83       	std	Y+1, r24	; 0x01
					if (recChar=='.'){recString[strLoc++]='\0'; state=2; noCarriage=fFalse;}
    148a:	89 85       	ldd	r24, Y+9	; 0x09
    148c:	8e 32       	cpi	r24, 0x2E	; 46
    148e:	b1 f4       	brne	.+44     	; 0x14bc <_Z8sendGAVRv+0x124>
    1490:	9e 01       	movw	r18, r28
    1492:	2c 5c       	subi	r18, 0xCC	; 204
    1494:	3f 4f       	sbci	r19, 0xFF	; 255
    1496:	89 81       	ldd	r24, Y+1	; 0x01
    1498:	9a 81       	ldd	r25, Y+2	; 0x02
    149a:	82 0f       	add	r24, r18
    149c:	93 1f       	adc	r25, r19
    149e:	fc 01       	movw	r30, r24
    14a0:	10 82       	st	Z, r1
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	9a 81       	ldd	r25, Y+2	; 0x02
    14a6:	01 96       	adiw	r24, 0x01	; 1
    14a8:	9a 83       	std	Y+2, r25	; 0x02
    14aa:	89 83       	std	Y+1, r24	; 0x01
    14ac:	82 e0       	ldi	r24, 0x02	; 2
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	90 93 1a 02 	sts	0x021A, r25
    14b4:	80 93 19 02 	sts	0x0219, r24
    14b8:	1b 86       	std	Y+11, r1	; 0x0b
    14ba:	0e c0       	rjmp	.+28     	; 0x14d8 <_Z8sendGAVRv+0x140>
					else if (strLoc >= 39){strLoc = 0; noCarriage=fFalse; state=7;}
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	9a 81       	ldd	r25, Y+2	; 0x02
    14c0:	87 32       	cpi	r24, 0x27	; 39
    14c2:	91 05       	cpc	r25, r1
    14c4:	48 f0       	brcs	.+18     	; 0x14d8 <_Z8sendGAVRv+0x140>
    14c6:	1a 82       	std	Y+2, r1	; 0x02
    14c8:	19 82       	std	Y+1, r1	; 0x01
    14ca:	1b 86       	std	Y+11, r1	; 0x0b
    14cc:	87 e0       	ldi	r24, 0x07	; 7
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	90 93 1a 02 	sts	0x021A, r25
    14d4:	80 93 19 02 	sts	0x0219, r24
				break;
			}//end case 0
			case 1: {
				Wait_ms(300);		//Wait for connection to set and something to come in.			
				//Put together string that is being received.
				while (noCarriage && flagSendingGAVR){
    14d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    14da:	88 23       	and	r24, r24
    14dc:	31 f0       	breq	.+12     	; 0x14ea <_Z8sendGAVRv+0x152>
    14de:	80 91 06 02 	lds	r24, 0x0206
    14e2:	88 23       	and	r24, r24
    14e4:	11 f0       	breq	.+4      	; 0x14ea <_Z8sendGAVRv+0x152>
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	01 c0       	rjmp	.+2      	; 0x14ec <_Z8sendGAVRv+0x154>
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	88 23       	and	r24, r24
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <_Z8sendGAVRv+0x15a>
    14f0:	94 cf       	rjmp	.-216    	; 0x141a <_Z8sendGAVRv+0x82>
					recString[strLoc++]=recChar;
					if (recChar=='.'){recString[strLoc++]='\0'; state=2; noCarriage=fFalse;}
					else if (strLoc >= 39){strLoc = 0; noCarriage=fFalse; state=7;}
					else;
				}//end while
				break;
    14f2:	79 c1       	rjmp	.+754    	; 0x17e6 <_Z8sendGAVRv+0x44e>
				}//end case 1
			case 2: {
				if (!strncmp(recString,"A.",2)){state=3;}		//ack
    14f4:	ce 01       	movw	r24, r28
    14f6:	c4 96       	adiw	r24, 0x34	; 52
    14f8:	2c e0       	ldi	r18, 0x0C	; 12
    14fa:	31 e0       	ldi	r19, 0x01	; 1
    14fc:	b9 01       	movw	r22, r18
    14fe:	42 e0       	ldi	r20, 0x02	; 2
    1500:	50 e0       	ldi	r21, 0x00	; 0
    1502:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <strncmp>
    1506:	00 97       	sbiw	r24, 0x00	; 0
    1508:	39 f4       	brne	.+14     	; 0x1518 <_Z8sendGAVRv+0x180>
    150a:	83 e0       	ldi	r24, 0x03	; 3
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	90 93 1a 02 	sts	0x021A, r25
    1512:	80 93 19 02 	sts	0x0219, r24
				else if (!strncmp(recString,"G.",2)){state=5; flagWaitingForReceiveGAVR=fTrue;}	//get
				else if (!strncmp(recString,"B.",2)){state=6;}	//BAD
				//send string case.
				else if (flagUpdateGAVRClock && !strcmp(recString,sentString)){PrintBone("Correct back.");state=5;}		//they match, successful send.
				else{PrintBone("Comparing.");PrintBone(recString);state=7;} //invalid ack. ACKERROR goes here.
				break;
    1516:	67 c1       	rjmp	.+718    	; 0x17e6 <_Z8sendGAVRv+0x44e>
				}//end while
				break;
				}//end case 1
			case 2: {
				if (!strncmp(recString,"A.",2)){state=3;}		//ack
				else if (!strncmp(recString,"G.",2)){state=5; flagWaitingForReceiveGAVR=fTrue;}	//get
    1518:	ce 01       	movw	r24, r28
    151a:	c4 96       	adiw	r24, 0x34	; 52
    151c:	2f e0       	ldi	r18, 0x0F	; 15
    151e:	31 e0       	ldi	r19, 0x01	; 1
    1520:	b9 01       	movw	r22, r18
    1522:	42 e0       	ldi	r20, 0x02	; 2
    1524:	50 e0       	ldi	r21, 0x00	; 0
    1526:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <strncmp>
    152a:	00 97       	sbiw	r24, 0x00	; 0
    152c:	51 f4       	brne	.+20     	; 0x1542 <_Z8sendGAVRv+0x1aa>
    152e:	85 e0       	ldi	r24, 0x05	; 5
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	90 93 1a 02 	sts	0x021A, r25
    1536:	80 93 19 02 	sts	0x0219, r24
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	80 93 02 02 	sts	0x0202, r24
				else if (!strncmp(recString,"B.",2)){state=6;}	//BAD
				//send string case.
				else if (flagUpdateGAVRClock && !strcmp(recString,sentString)){PrintBone("Correct back.");state=5;}		//they match, successful send.
				else{PrintBone("Comparing.");PrintBone(recString);state=7;} //invalid ack. ACKERROR goes here.
				break;
    1540:	52 c1       	rjmp	.+676    	; 0x17e6 <_Z8sendGAVRv+0x44e>
				break;
				}//end case 1
			case 2: {
				if (!strncmp(recString,"A.",2)){state=3;}		//ack
				else if (!strncmp(recString,"G.",2)){state=5; flagWaitingForReceiveGAVR=fTrue;}	//get
				else if (!strncmp(recString,"B.",2)){state=6;}	//BAD
    1542:	ce 01       	movw	r24, r28
    1544:	c4 96       	adiw	r24, 0x34	; 52
    1546:	22 e1       	ldi	r18, 0x12	; 18
    1548:	31 e0       	ldi	r19, 0x01	; 1
    154a:	b9 01       	movw	r22, r18
    154c:	42 e0       	ldi	r20, 0x02	; 2
    154e:	50 e0       	ldi	r21, 0x00	; 0
    1550:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <strncmp>
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	39 f4       	brne	.+14     	; 0x1566 <_Z8sendGAVRv+0x1ce>
    1558:	86 e0       	ldi	r24, 0x06	; 6
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	90 93 1a 02 	sts	0x021A, r25
    1560:	80 93 19 02 	sts	0x0219, r24
				//send string case.
				else if (flagUpdateGAVRClock && !strcmp(recString,sentString)){PrintBone("Correct back.");state=5;}		//they match, successful send.
				else{PrintBone("Comparing.");PrintBone(recString);state=7;} //invalid ack. ACKERROR goes here.
				break;
    1564:	40 c1       	rjmp	.+640    	; 0x17e6 <_Z8sendGAVRv+0x44e>
			case 2: {
				if (!strncmp(recString,"A.",2)){state=3;}		//ack
				else if (!strncmp(recString,"G.",2)){state=5; flagWaitingForReceiveGAVR=fTrue;}	//get
				else if (!strncmp(recString,"B.",2)){state=6;}	//BAD
				//send string case.
				else if (flagUpdateGAVRClock && !strcmp(recString,sentString)){PrintBone("Correct back.");state=5;}		//they match, successful send.
    1566:	80 91 05 02 	lds	r24, 0x0205
    156a:	88 23       	and	r24, r24
    156c:	a9 f0       	breq	.+42     	; 0x1598 <_Z8sendGAVRv+0x200>
    156e:	ce 01       	movw	r24, r28
    1570:	c4 96       	adiw	r24, 0x34	; 52
    1572:	9e 01       	movw	r18, r28
    1574:	24 5f       	subi	r18, 0xF4	; 244
    1576:	3f 4f       	sbci	r19, 0xFF	; 255
    1578:	b9 01       	movw	r22, r18
    157a:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <strcmp>
    157e:	00 97       	sbiw	r24, 0x00	; 0
    1580:	59 f4       	brne	.+22     	; 0x1598 <_Z8sendGAVRv+0x200>
    1582:	85 e1       	ldi	r24, 0x15	; 21
    1584:	91 e0       	ldi	r25, 0x01	; 1
    1586:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
    158a:	85 e0       	ldi	r24, 0x05	; 5
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	90 93 1a 02 	sts	0x021A, r25
    1592:	80 93 19 02 	sts	0x0219, r24
				else{PrintBone("Comparing.");PrintBone(recString);state=7;} //invalid ack. ACKERROR goes here.
				break;
    1596:	27 c1       	rjmp	.+590    	; 0x17e6 <_Z8sendGAVRv+0x44e>
				if (!strncmp(recString,"A.",2)){state=3;}		//ack
				else if (!strncmp(recString,"G.",2)){state=5; flagWaitingForReceiveGAVR=fTrue;}	//get
				else if (!strncmp(recString,"B.",2)){state=6;}	//BAD
				//send string case.
				else if (flagUpdateGAVRClock && !strcmp(recString,sentString)){PrintBone("Correct back.");state=5;}		//they match, successful send.
				else{PrintBone("Comparing.");PrintBone(recString);state=7;} //invalid ack. ACKERROR goes here.
    1598:	83 e2       	ldi	r24, 0x23	; 35
    159a:	91 e0       	ldi	r25, 0x01	; 1
    159c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
    15a0:	ce 01       	movw	r24, r28
    15a2:	c4 96       	adiw	r24, 0x34	; 52
    15a4:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
    15a8:	87 e0       	ldi	r24, 0x07	; 7
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	90 93 1a 02 	sts	0x021A, r25
    15b0:	80 93 19 02 	sts	0x0219, r24
				break;
    15b4:	18 c1       	rjmp	.+560    	; 0x17e6 <_Z8sendGAVRv+0x44e>
				}//end case 2
			case 3:{
				Wait_ms(100);
    15b6:	84 e6       	ldi	r24, 0x64	; 100
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_Z7Wait_msi>
				if (flagUserClock && !flagUpdateGAVRClock){
    15be:	80 91 07 02 	lds	r24, 0x0207
    15c2:	88 23       	and	r24, r24
    15c4:	69 f0       	breq	.+26     	; 0x15e0 <_Z8sendGAVRv+0x248>
    15c6:	80 91 05 02 	lds	r24, 0x0205
    15ca:	88 23       	and	r24, r24
    15cc:	49 f4       	brne	.+18     	; 0x15e0 <_Z8sendGAVRv+0x248>
					PrintBone("GetTime.");
    15ce:	8e e2       	ldi	r24, 0x2E	; 46
    15d0:	91 e0       	ldi	r25, 0x01	; 1
    15d2:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
					PrintGAVR("G.");				
    15d6:	8f e0       	ldi	r24, 0x0F	; 15
    15d8:	91 e0       	ldi	r25, 0x01	; 1
    15da:	0e 94 9b 09 	call	0x1336	; 0x1336 <_Z9PrintGAVRPc>
    15de:	6b c0       	rjmp	.+214    	; 0x16b6 <_Z8sendGAVRv+0x31e>
				//If we are updating the gavr, send the time and date together regardless. preface with SYN
				} else if (flagUpdateGAVRClock && !flagUserClock){
    15e0:	80 91 05 02 	lds	r24, 0x0205
    15e4:	88 23       	and	r24, r24
    15e6:	09 f4       	brne	.+2      	; 0x15ea <_Z8sendGAVRv+0x252>
    15e8:	5b c0       	rjmp	.+182    	; 0x16a0 <_Z8sendGAVRv+0x308>
    15ea:	80 91 07 02 	lds	r24, 0x0207
    15ee:	88 23       	and	r24, r24
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <_Z8sendGAVRv+0x25c>
    15f2:	56 c0       	rjmp	.+172    	; 0x16a0 <_Z8sendGAVRv+0x308>
					PrintBone("Sending time.");
    15f4:	87 e3       	ldi	r24, 0x37	; 55
    15f6:	91 e0       	ldi	r25, 0x01	; 1
    15f8:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
					strcpy(sentString,"A");			//this is a syn, not ack to save logic in GAVR code. Can change if we want.
    15fc:	ce 01       	movw	r24, r28
    15fe:	0c 96       	adiw	r24, 0x0c	; 12
    1600:	21 e4       	ldi	r18, 0x41	; 65
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	fc 01       	movw	r30, r24
    1606:	31 83       	std	Z+1, r19	; 0x01
    1608:	20 83       	st	Z, r18
					strcat(sentString,currentTime.getTime());
    160a:	86 ed       	ldi	r24, 0xD6	; 214
    160c:	91 e0       	ldi	r25, 0x01	; 1
    160e:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <_ZN6myTime7getTimeEv>
    1612:	9c 01       	movw	r18, r24
    1614:	ce 01       	movw	r24, r28
    1616:	0c 96       	adiw	r24, 0x0c	; 12
    1618:	b9 01       	movw	r22, r18
    161a:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <strcat>
					strcat(sentString,"/");	//add delimiter.
    161e:	ce 01       	movw	r24, r28
    1620:	0c 96       	adiw	r24, 0x0c	; 12
    1622:	9c 01       	movw	r18, r24
    1624:	f9 01       	movw	r30, r18
    1626:	01 90       	ld	r0, Z+
    1628:	00 20       	and	r0, r0
    162a:	e9 f7       	brne	.-6      	; 0x1626 <_Z8sendGAVRv+0x28e>
    162c:	cf 01       	movw	r24, r30
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	82 1b       	sub	r24, r18
    1632:	93 0b       	sbc	r25, r19
    1634:	9e 01       	movw	r18, r28
    1636:	24 5f       	subi	r18, 0xF4	; 244
    1638:	3f 4f       	sbci	r19, 0xFF	; 255
    163a:	82 0f       	add	r24, r18
    163c:	93 1f       	adc	r25, r19
    163e:	2f e2       	ldi	r18, 0x2F	; 47
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	fc 01       	movw	r30, r24
    1644:	31 83       	std	Z+1, r19	; 0x01
    1646:	20 83       	st	Z, r18
					strcat(sentString,currentTime.getDate());
    1648:	86 ed       	ldi	r24, 0xD6	; 214
    164a:	91 e0       	ldi	r25, 0x01	; 1
    164c:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN6myDate7getDateEv>
    1650:	9c 01       	movw	r18, r24
    1652:	ce 01       	movw	r24, r28
    1654:	0c 96       	adiw	r24, 0x0c	; 12
    1656:	b9 01       	movw	r22, r18
    1658:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <strcat>
					strcat(sentString,".\0");
    165c:	ce 01       	movw	r24, r28
    165e:	0c 96       	adiw	r24, 0x0c	; 12
    1660:	9c 01       	movw	r18, r24
    1662:	f9 01       	movw	r30, r18
    1664:	01 90       	ld	r0, Z+
    1666:	00 20       	and	r0, r0
    1668:	e9 f7       	brne	.-6      	; 0x1664 <_Z8sendGAVRv+0x2cc>
    166a:	cf 01       	movw	r24, r30
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	82 1b       	sub	r24, r18
    1670:	93 0b       	sbc	r25, r19
    1672:	9e 01       	movw	r18, r28
    1674:	24 5f       	subi	r18, 0xF4	; 244
    1676:	3f 4f       	sbci	r19, 0xFF	; 255
    1678:	82 0f       	add	r24, r18
    167a:	93 1f       	adc	r25, r19
    167c:	2e e2       	ldi	r18, 0x2E	; 46
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	fc 01       	movw	r30, r24
    1682:	31 83       	std	Z+1, r19	; 0x01
    1684:	20 83       	st	Z, r18
					PutUartChGAVR('S');
    1686:	83 e5       	ldi	r24, 0x53	; 83
    1688:	0e 94 7d 09 	call	0x12fa	; 0x12fa <_Z13PutUartChGAVRc>
					printTimeDate(fFalse,fTrue,fTrue);			//date is terminated by a . so don't need to send character
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	61 e0       	ldi	r22, 0x01	; 1
    1690:	41 e0       	ldi	r20, 0x01	; 1
    1692:	0e 94 84 13 	call	0x2708	; 0x2708 <_Z13printTimeDatehhh>
					Wait_ms(80);
    1696:	80 e5       	ldi	r24, 0x50	; 80
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_Z7Wait_msi>
    169e:	0b c0       	rjmp	.+22     	; 0x16b6 <_Z8sendGAVRv+0x31e>
				} else {PrintBone("noflags.");state=7; break;}	//end if-else (what we are doing).
    16a0:	85 e4       	ldi	r24, 0x45	; 69
    16a2:	91 e0       	ldi	r25, 0x01	; 1
    16a4:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
    16a8:	87 e0       	ldi	r24, 0x07	; 7
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	90 93 1a 02 	sts	0x021A, r25
    16b0:	80 93 19 02 	sts	0x0219, r24
    16b4:	98 c0       	rjmp	.+304    	; 0x17e6 <_Z8sendGAVRv+0x44e>
							
				//Reset the recString to receive the next ACK.
				for (int i=0; i<strLoc; i++){recString[i]=NULL;}
    16b6:	1c 82       	std	Y+4, r1	; 0x04
    16b8:	1b 82       	std	Y+3, r1	; 0x03
    16ba:	0e c0       	rjmp	.+28     	; 0x16d8 <_Z8sendGAVRv+0x340>
    16bc:	9e 01       	movw	r18, r28
    16be:	2c 5c       	subi	r18, 0xCC	; 204
    16c0:	3f 4f       	sbci	r19, 0xFF	; 255
    16c2:	8b 81       	ldd	r24, Y+3	; 0x03
    16c4:	9c 81       	ldd	r25, Y+4	; 0x04
    16c6:	82 0f       	add	r24, r18
    16c8:	93 1f       	adc	r25, r19
    16ca:	fc 01       	movw	r30, r24
    16cc:	10 82       	st	Z, r1
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	9c 81       	ldd	r25, Y+4	; 0x04
    16d2:	01 96       	adiw	r24, 0x01	; 1
    16d4:	9c 83       	std	Y+4, r25	; 0x04
    16d6:	8b 83       	std	Y+3, r24	; 0x03
    16d8:	2b 81       	ldd	r18, Y+3	; 0x03
    16da:	3c 81       	ldd	r19, Y+4	; 0x04
    16dc:	41 e0       	ldi	r20, 0x01	; 1
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	9a 81       	ldd	r25, Y+2	; 0x02
    16e2:	28 17       	cp	r18, r24
    16e4:	39 07       	cpc	r19, r25
    16e6:	08 f0       	brcs	.+2      	; 0x16ea <_Z8sendGAVRv+0x352>
    16e8:	40 e0       	ldi	r20, 0x00	; 0
    16ea:	44 23       	and	r20, r20
    16ec:	39 f7       	brne	.-50     	; 0x16bc <_Z8sendGAVRv+0x324>
					
				//Reset the carriage feature, string location and go back to the receiving state.
				noCarriage=fTrue;
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	8b 87       	std	Y+11, r24	; 0x0b
				strLoc=0;
    16f2:	1a 82       	std	Y+2, r1	; 0x02
    16f4:	19 82       	std	Y+1, r1	; 0x01
				state=1;
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	90 93 1a 02 	sts	0x021A, r25
    16fe:	80 93 19 02 	sts	0x0219, r24
				break;
    1702:	71 c0       	rjmp	.+226    	; 0x17e6 <_Z8sendGAVRv+0x44e>
				}//end case 3
			case 5:{
				//Successful communications overall
				for (int i=0; i<strLoc; i++){recString[i]=NULL;}
    1704:	1e 82       	std	Y+6, r1	; 0x06
    1706:	1d 82       	std	Y+5, r1	; 0x05
    1708:	0e c0       	rjmp	.+28     	; 0x1726 <_Z8sendGAVRv+0x38e>
    170a:	9e 01       	movw	r18, r28
    170c:	2c 5c       	subi	r18, 0xCC	; 204
    170e:	3f 4f       	sbci	r19, 0xFF	; 255
    1710:	8d 81       	ldd	r24, Y+5	; 0x05
    1712:	9e 81       	ldd	r25, Y+6	; 0x06
    1714:	82 0f       	add	r24, r18
    1716:	93 1f       	adc	r25, r19
    1718:	fc 01       	movw	r30, r24
    171a:	10 82       	st	Z, r1
    171c:	8d 81       	ldd	r24, Y+5	; 0x05
    171e:	9e 81       	ldd	r25, Y+6	; 0x06
    1720:	01 96       	adiw	r24, 0x01	; 1
    1722:	9e 83       	std	Y+6, r25	; 0x06
    1724:	8d 83       	std	Y+5, r24	; 0x05
    1726:	2d 81       	ldd	r18, Y+5	; 0x05
    1728:	3e 81       	ldd	r19, Y+6	; 0x06
    172a:	41 e0       	ldi	r20, 0x01	; 1
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	9a 81       	ldd	r25, Y+2	; 0x02
    1730:	28 17       	cp	r18, r24
    1732:	39 07       	cpc	r19, r25
    1734:	08 f0       	brcs	.+2      	; 0x1738 <_Z8sendGAVRv+0x3a0>
    1736:	40 e0       	ldi	r20, 0x00	; 0
    1738:	44 23       	and	r20, r20
    173a:	39 f7       	brne	.-50     	; 0x170a <_Z8sendGAVRv+0x372>
				PrintBone("Success.");
    173c:	8e e4       	ldi	r24, 0x4E	; 78
    173e:	91 e0       	ldi	r25, 0x01	; 1
    1740:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
				flagSendingGAVR=fFalse;
    1744:	10 92 06 02 	sts	0x0206, r1
				flagUpdateGAVRClock=fFalse;
    1748:	10 92 05 02 	sts	0x0205, r1
				state=0;
    174c:	10 92 1a 02 	sts	0x021A, r1
    1750:	10 92 19 02 	sts	0x0219, r1
				break;
    1754:	48 c0       	rjmp	.+144    	; 0x17e6 <_Z8sendGAVRv+0x44e>
				}//end case 5
			case 6:{
				//ACKBAD. Check the date and time to see if its okay. IF okay, go to state 7 to set waiting flag. otherwise set invalid time and close through state 5.
				BOOL dateOK = currentTime.checkValidity();
    1756:	86 ed       	ldi	r24, 0xD6	; 214
    1758:	91 e0       	ldi	r25, 0x01	; 1
    175a:	0e 94 bc 06 	call	0xd78	; 0xd78 <_ZN6myTime13checkValidityEv>
    175e:	8a 87       	std	Y+10, r24	; 0x0a
				if (dateOK){state=7;}
    1760:	8a 85       	ldd	r24, Y+10	; 0x0a
    1762:	88 23       	and	r24, r24
    1764:	39 f0       	breq	.+14     	; 0x1774 <_Z8sendGAVRv+0x3dc>
    1766:	87 e0       	ldi	r24, 0x07	; 7
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	90 93 1a 02 	sts	0x021A, r25
    176e:	80 93 19 02 	sts	0x0219, r24
				else {state=7; flagInvalidDateTime=fTrue;}
				break;
    1772:	39 c0       	rjmp	.+114    	; 0x17e6 <_Z8sendGAVRv+0x44e>
				}//end case 5
			case 6:{
				//ACKBAD. Check the date and time to see if its okay. IF okay, go to state 7 to set waiting flag. otherwise set invalid time and close through state 5.
				BOOL dateOK = currentTime.checkValidity();
				if (dateOK){state=7;}
				else {state=7; flagInvalidDateTime=fTrue;}
    1774:	87 e0       	ldi	r24, 0x07	; 7
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	90 93 1a 02 	sts	0x021A, r25
    177c:	80 93 19 02 	sts	0x0219, r24
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	80 93 08 02 	sts	0x0208, r24
				break;
    1786:	2f c0       	rjmp	.+94     	; 0x17e6 <_Z8sendGAVRv+0x44e>
				}//end case 6
			case 7:{
				//Got the wrong ACK back, or invalid ACK. Wait for next cycle then resend. Keep all the flags the same
				PrintBone("ErrorS.");
    1788:	87 e5       	ldi	r24, 0x57	; 87
    178a:	91 e0       	ldi	r25, 0x01	; 1
    178c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
				flagSendingGAVR=fFalse;
    1790:	10 92 06 02 	sts	0x0206, r1
				for (int i=0; i<strLoc; i++){recString[i]=NULL;}
    1794:	18 86       	std	Y+8, r1	; 0x08
    1796:	1f 82       	std	Y+7, r1	; 0x07
    1798:	0e c0       	rjmp	.+28     	; 0x17b6 <_Z8sendGAVRv+0x41e>
    179a:	9e 01       	movw	r18, r28
    179c:	2c 5c       	subi	r18, 0xCC	; 204
    179e:	3f 4f       	sbci	r19, 0xFF	; 255
    17a0:	8f 81       	ldd	r24, Y+7	; 0x07
    17a2:	98 85       	ldd	r25, Y+8	; 0x08
    17a4:	82 0f       	add	r24, r18
    17a6:	93 1f       	adc	r25, r19
    17a8:	fc 01       	movw	r30, r24
    17aa:	10 82       	st	Z, r1
    17ac:	8f 81       	ldd	r24, Y+7	; 0x07
    17ae:	98 85       	ldd	r25, Y+8	; 0x08
    17b0:	01 96       	adiw	r24, 0x01	; 1
    17b2:	98 87       	std	Y+8, r25	; 0x08
    17b4:	8f 83       	std	Y+7, r24	; 0x07
    17b6:	2f 81       	ldd	r18, Y+7	; 0x07
    17b8:	38 85       	ldd	r19, Y+8	; 0x08
    17ba:	41 e0       	ldi	r20, 0x01	; 1
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	9a 81       	ldd	r25, Y+2	; 0x02
    17c0:	28 17       	cp	r18, r24
    17c2:	39 07       	cpc	r19, r25
    17c4:	08 f0       	brcs	.+2      	; 0x17c8 <_Z8sendGAVRv+0x430>
    17c6:	40 e0       	ldi	r20, 0x00	; 0
    17c8:	44 23       	and	r20, r20
    17ca:	39 f7       	brne	.-50     	; 0x179a <_Z8sendGAVRv+0x402>
				state=0;
    17cc:	10 92 1a 02 	sts	0x021A, r1
    17d0:	10 92 19 02 	sts	0x0219, r1
				break;
    17d4:	08 c0       	rjmp	.+16     	; 0x17e6 <_Z8sendGAVRv+0x44e>
				}//end case 7
			default:{state=0; flagSendingGAVR=fFalse; noCarriage=fFalse; break;}
    17d6:	10 92 1a 02 	sts	0x021A, r1
    17da:	10 92 19 02 	sts	0x0219, r1
    17de:	10 92 06 02 	sts	0x0206, r1
    17e2:	1b 86       	std	Y+11, r1	; 0x0b
    17e4:	00 00       	nop
	
	//Set sending flag
	flagSendingGAVR=fTrue;
	
	//Transmission protocol
	while (flagSendingGAVR){
    17e6:	90 91 06 02 	lds	r25, 0x0206
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	99 23       	and	r25, r25
    17ee:	09 f4       	brne	.+2      	; 0x17f2 <_Z8sendGAVRv+0x45a>
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	88 23       	and	r24, r24
    17f4:	09 f0       	breq	.+2      	; 0x17f8 <_Z8sendGAVRv+0x460>
    17f6:	e3 cd       	rjmp	.-1082   	; 0x13be <_Z8sendGAVRv+0x26>
				break;
				}//end case 7
			default:{state=0; flagSendingGAVR=fFalse; noCarriage=fFalse; break;}
		}//end switch
	}//end while
}//end function 	
    17f8:	c5 5a       	subi	r28, 0xA5	; 165
    17fa:	df 4f       	sbci	r29, 0xFF	; 255
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	cd bf       	out	0x3d, r28	; 61
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	08 95       	ret

0000180c <_Z11ReceiveGAVRv>:

/*************************************************************************************************************/
void ReceiveGAVR(){
    180c:	cf 93       	push	r28
    180e:	df 93       	push	r29
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	c1 55       	subi	r28, 0x51	; 81
    1816:	d0 40       	sbci	r29, 0x00	; 0
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
	unsigned int state=0;
    1822:	1a 82       	std	Y+2, r1	; 0x02
    1824:	19 82       	std	Y+1, r1	; 0x01
	char recChar, recString[40];
	unsigned int strLoc=0;
    1826:	1c 82       	std	Y+4, r1	; 0x04
    1828:	1b 82       	std	Y+3, r1	; 0x03
	BOOL noCarriage=fTrue;
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	8d 83       	std	Y+5, r24	; 0x05
	
	//While Loop
	while (flagReceivingGAVR){
    182e:	51 c3       	rjmp	.+1698   	; 0x1ed2 <_Z11ReceiveGAVRv+0x6c6>
		/** State 5: Exit case. Lower "flagReceivingGAVR" which causes and exit.													   **/
		/** State 6: ACKERROR state. Send "ACKERROR", then exit through state 5.													   **/
		/** State 7: Successful acquire of time/date.																				   **/
		/** Default: Set state to 0, doesn't really matter though. Exit signalling timeout to sender.								   **/
		/********************************************************************************************************************************/
		switch(state){
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	9a 81       	ldd	r25, Y+2	; 0x02
    1834:	83 30       	cpi	r24, 0x03	; 3
    1836:	91 05       	cpc	r25, r1
    1838:	09 f4       	brne	.+2      	; 0x183c <_Z11ReceiveGAVRv+0x30>
    183a:	c5 c0       	rjmp	.+394    	; 0x19c6 <_Z11ReceiveGAVRv+0x1ba>
    183c:	84 30       	cpi	r24, 0x04	; 4
    183e:	91 05       	cpc	r25, r1
    1840:	48 f4       	brcc	.+18     	; 0x1854 <_Z11ReceiveGAVRv+0x48>
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	91 05       	cpc	r25, r1
    1846:	09 f4       	brne	.+2      	; 0x184a <_Z11ReceiveGAVRv+0x3e>
    1848:	85 c0       	rjmp	.+266    	; 0x1954 <_Z11ReceiveGAVRv+0x148>
    184a:	82 30       	cpi	r24, 0x02	; 2
    184c:	91 05       	cpc	r25, r1
    184e:	08 f0       	brcs	.+2      	; 0x1852 <_Z11ReceiveGAVRv+0x46>
    1850:	8f c0       	rjmp	.+286    	; 0x1970 <_Z11ReceiveGAVRv+0x164>
    1852:	11 c0       	rjmp	.+34     	; 0x1876 <_Z11ReceiveGAVRv+0x6a>
    1854:	85 30       	cpi	r24, 0x05	; 5
    1856:	91 05       	cpc	r25, r1
    1858:	09 f4       	brne	.+2      	; 0x185c <_Z11ReceiveGAVRv+0x50>
    185a:	ed c2       	rjmp	.+1498   	; 0x1e36 <_Z11ReceiveGAVRv+0x62a>
    185c:	85 30       	cpi	r24, 0x05	; 5
    185e:	91 05       	cpc	r25, r1
    1860:	08 f4       	brcc	.+2      	; 0x1864 <_Z11ReceiveGAVRv+0x58>
    1862:	c8 c2       	rjmp	.+1424   	; 0x1df4 <_Z11ReceiveGAVRv+0x5e8>
    1864:	86 30       	cpi	r24, 0x06	; 6
    1866:	91 05       	cpc	r25, r1
    1868:	09 f4       	brne	.+2      	; 0x186c <_Z11ReceiveGAVRv+0x60>
    186a:	08 c3       	rjmp	.+1552   	; 0x1e7c <_Z11ReceiveGAVRv+0x670>
    186c:	87 30       	cpi	r24, 0x07	; 7
    186e:	91 05       	cpc	r25, r1
    1870:	09 f4       	brne	.+2      	; 0x1874 <_Z11ReceiveGAVRv+0x68>
    1872:	15 c3       	rjmp	.+1578   	; 0x1e9e <_Z11ReceiveGAVRv+0x692>
    1874:	27 c3       	rjmp	.+1614   	; 0x1ec4 <_Z11ReceiveGAVRv+0x6b8>
				case 0:{
					//Beginning case
					strLoc=0;
    1876:	1c 82       	std	Y+4, r1	; 0x04
    1878:	1b 82       	std	Y+3, r1	; 0x03
					recChar = UDR1;
    187a:	8e ec       	ldi	r24, 0xCE	; 206
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	fc 01       	movw	r30, r24
    1880:	80 81       	ld	r24, Z
    1882:	8e 8b       	std	Y+22, r24	; 0x16
					if (recChar=='.'){
    1884:	8e 89       	ldd	r24, Y+22	; 0x16
    1886:	8e 32       	cpi	r24, 0x2E	; 46
    1888:	29 f4       	brne	.+10     	; 0x1894 <_Z11ReceiveGAVRv+0x88>
						state=6;															//Go to error state.
    188a:	86 e0       	ldi	r24, 0x06	; 6
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	9a 83       	std	Y+2, r25	; 0x02
    1890:	89 83       	std	Y+1, r24	; 0x01
					} else  {recString[strLoc++]=recChar; state=1;}							//Add to string, go to state 2
					break;
    1892:	1f c3       	rjmp	.+1598   	; 0x1ed2 <_Z11ReceiveGAVRv+0x6c6>
					//Beginning case
					strLoc=0;
					recChar = UDR1;
					if (recChar=='.'){
						state=6;															//Go to error state.
					} else  {recString[strLoc++]=recChar; state=1;}							//Add to string, go to state 2
    1894:	9e 01       	movw	r18, r28
    1896:	26 5d       	subi	r18, 0xD6	; 214
    1898:	3f 4f       	sbci	r19, 0xFF	; 255
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	9c 81       	ldd	r25, Y+4	; 0x04
    189e:	82 0f       	add	r24, r18
    18a0:	93 1f       	adc	r25, r19
    18a2:	2e 89       	ldd	r18, Y+22	; 0x16
    18a4:	fc 01       	movw	r30, r24
    18a6:	20 83       	st	Z, r18
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	9c 81       	ldd	r25, Y+4	; 0x04
    18ac:	01 96       	adiw	r24, 0x01	; 1
    18ae:	9c 83       	std	Y+4, r25	; 0x04
    18b0:	8b 83       	std	Y+3, r24	; 0x03
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	9a 83       	std	Y+2, r25	; 0x02
    18b8:	89 83       	std	Y+1, r24	; 0x01
					break;
    18ba:	0b c3       	rjmp	.+1558   	; 0x1ed2 <_Z11ReceiveGAVRv+0x6c6>
				}//end case 0
				case 1:{
					//Assemble string case
					while (noCarriage && flagReceivingGAVR){	//while there isn't a timeout and no carry
						Wait_ms(100);
    18bc:	84 e6       	ldi	r24, 0x64	; 100
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_Z7Wait_msi>
						while (!(UCSR1A & (1 << RXC1)) && flagReceivingGAVR);				//get the next character
    18c4:	00 00       	nop
    18c6:	88 ec       	ldi	r24, 0xC8	; 200
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	fc 01       	movw	r30, r24
    18cc:	80 81       	ld	r24, Z
    18ce:	88 23       	and	r24, r24
    18d0:	34 f0       	brlt	.+12     	; 0x18de <_Z11ReceiveGAVRv+0xd2>
    18d2:	80 91 01 02 	lds	r24, 0x0201
    18d6:	88 23       	and	r24, r24
    18d8:	11 f0       	breq	.+4      	; 0x18de <_Z11ReceiveGAVRv+0xd2>
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	01 c0       	rjmp	.+2      	; 0x18e0 <_Z11ReceiveGAVRv+0xd4>
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	88 23       	and	r24, r24
    18e2:	89 f7       	brne	.-30     	; 0x18c6 <_Z11ReceiveGAVRv+0xba>
						if (!flagReceivingGAVR){state=0; break;}							//if there was a timeout, break out and reset state
    18e4:	80 91 01 02 	lds	r24, 0x0201
    18e8:	88 23       	and	r24, r24
    18ea:	21 f4       	brne	.+8      	; 0x18f4 <_Z11ReceiveGAVRv+0xe8>
    18ec:	1a 82       	std	Y+2, r1	; 0x02
    18ee:	19 82       	std	Y+1, r1	; 0x01
    18f0:	00 00       	nop
						recString[strLoc++]=recChar;										//'.' always included into recString
						if (recChar == '.'){recString[strLoc]='\0'; noCarriage=fFalse; state=2;}
						else if(strLoc >= 39){state=6;noCarriage=fFalse;}
						else;//end if-elseif-else
					}//end while
					break;
    18f2:	ef c2       	rjmp	.+1502   	; 0x1ed2 <_Z11ReceiveGAVRv+0x6c6>
					//Assemble string case
					while (noCarriage && flagReceivingGAVR){	//while there isn't a timeout and no carry
						Wait_ms(100);
						while (!(UCSR1A & (1 << RXC1)) && flagReceivingGAVR);				//get the next character
						if (!flagReceivingGAVR){state=0; break;}							//if there was a timeout, break out and reset state
						recChar=UDR1;
    18f4:	8e ec       	ldi	r24, 0xCE	; 206
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	fc 01       	movw	r30, r24
    18fa:	80 81       	ld	r24, Z
    18fc:	8e 8b       	std	Y+22, r24	; 0x16
						recString[strLoc++]=recChar;										//'.' always included into recString
    18fe:	9e 01       	movw	r18, r28
    1900:	26 5d       	subi	r18, 0xD6	; 214
    1902:	3f 4f       	sbci	r19, 0xFF	; 255
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	9c 81       	ldd	r25, Y+4	; 0x04
    1908:	82 0f       	add	r24, r18
    190a:	93 1f       	adc	r25, r19
    190c:	2e 89       	ldd	r18, Y+22	; 0x16
    190e:	fc 01       	movw	r30, r24
    1910:	20 83       	st	Z, r18
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	9c 81       	ldd	r25, Y+4	; 0x04
    1916:	01 96       	adiw	r24, 0x01	; 1
    1918:	9c 83       	std	Y+4, r25	; 0x04
    191a:	8b 83       	std	Y+3, r24	; 0x03
						if (recChar == '.'){recString[strLoc]='\0'; noCarriage=fFalse; state=2;}
    191c:	8e 89       	ldd	r24, Y+22	; 0x16
    191e:	8e 32       	cpi	r24, 0x2E	; 46
    1920:	79 f4       	brne	.+30     	; 0x1940 <_Z11ReceiveGAVRv+0x134>
    1922:	9e 01       	movw	r18, r28
    1924:	26 5d       	subi	r18, 0xD6	; 214
    1926:	3f 4f       	sbci	r19, 0xFF	; 255
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	9c 81       	ldd	r25, Y+4	; 0x04
    192c:	82 0f       	add	r24, r18
    192e:	93 1f       	adc	r25, r19
    1930:	fc 01       	movw	r30, r24
    1932:	10 82       	st	Z, r1
    1934:	1d 82       	std	Y+5, r1	; 0x05
    1936:	82 e0       	ldi	r24, 0x02	; 2
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	9a 83       	std	Y+2, r25	; 0x02
    193c:	89 83       	std	Y+1, r24	; 0x01
    193e:	0a c0       	rjmp	.+20     	; 0x1954 <_Z11ReceiveGAVRv+0x148>
						else if(strLoc >= 39){state=6;noCarriage=fFalse;}
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	9c 81       	ldd	r25, Y+4	; 0x04
    1944:	87 32       	cpi	r24, 0x27	; 39
    1946:	91 05       	cpc	r25, r1
    1948:	28 f0       	brcs	.+10     	; 0x1954 <_Z11ReceiveGAVRv+0x148>
    194a:	86 e0       	ldi	r24, 0x06	; 6
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	9a 83       	std	Y+2, r25	; 0x02
    1950:	89 83       	std	Y+1, r24	; 0x01
    1952:	1d 82       	std	Y+5, r1	; 0x05
					} else  {recString[strLoc++]=recChar; state=1;}							//Add to string, go to state 2
					break;
				}//end case 0
				case 1:{
					//Assemble string case
					while (noCarriage && flagReceivingGAVR){	//while there isn't a timeout and no carry
    1954:	8d 81       	ldd	r24, Y+5	; 0x05
    1956:	88 23       	and	r24, r24
    1958:	31 f0       	breq	.+12     	; 0x1966 <_Z11ReceiveGAVRv+0x15a>
    195a:	80 91 01 02 	lds	r24, 0x0201
    195e:	88 23       	and	r24, r24
    1960:	11 f0       	breq	.+4      	; 0x1966 <_Z11ReceiveGAVRv+0x15a>
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	01 c0       	rjmp	.+2      	; 0x1968 <_Z11ReceiveGAVRv+0x15c>
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	88 23       	and	r24, r24
    196a:	09 f0       	breq	.+2      	; 0x196e <_Z11ReceiveGAVRv+0x162>
    196c:	a7 cf       	rjmp	.-178    	; 0x18bc <_Z11ReceiveGAVRv+0xb0>
						recString[strLoc++]=recChar;										//'.' always included into recString
						if (recChar == '.'){recString[strLoc]='\0'; noCarriage=fFalse; state=2;}
						else if(strLoc >= 39){state=6;noCarriage=fFalse;}
						else;//end if-elseif-else
					}//end while
					break;
    196e:	b1 c2       	rjmp	.+1378   	; 0x1ed2 <_Z11ReceiveGAVRv+0x6c6>
				}//end case 1
				case 2:{
					//Got string, see what it is case.
					if (!strncmp(recString,"N.",8)){state=4;} //set appropriate flags and respond in appropriate way.
    1970:	ce 01       	movw	r24, r28
    1972:	8a 96       	adiw	r24, 0x2a	; 42
    1974:	2f e5       	ldi	r18, 0x5F	; 95
    1976:	31 e0       	ldi	r19, 0x01	; 1
    1978:	b9 01       	movw	r22, r18
    197a:	48 e0       	ldi	r20, 0x08	; 8
    197c:	50 e0       	ldi	r21, 0x00	; 0
    197e:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <strncmp>
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	29 f4       	brne	.+10     	; 0x1990 <_Z11ReceiveGAVRv+0x184>
    1986:	84 e0       	ldi	r24, 0x04	; 4
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	9a 83       	std	Y+2, r25	; 0x02
    198c:	89 83       	std	Y+1, r24	; 0x01
					else if ((recString[2]==':') != (recString[3]==':')){state=3;PrintBone("Got a time.");}//go parse the string for a time and date. SYN03:33:12/DATE or SYN3:33:12/DATE, either char 4 or 5 is :
					else {state=6;}
					break;
    198e:	a1 c2       	rjmp	.+1346   	; 0x1ed2 <_Z11ReceiveGAVRv+0x6c6>
					break;
				}//end case 1
				case 2:{
					//Got string, see what it is case.
					if (!strncmp(recString,"N.",8)){state=4;} //set appropriate flags and respond in appropriate way.
					else if ((recString[2]==':') != (recString[3]==':')){state=3;PrintBone("Got a time.");}//go parse the string for a time and date. SYN03:33:12/DATE or SYN3:33:12/DATE, either char 4 or 5 is :
    1990:	8c a5       	lds	r24, 0x6c
    1992:	91 e0       	ldi	r25, 0x01	; 1
    1994:	8a 33       	cpi	r24, 0x3A	; 58
    1996:	09 f0       	breq	.+2      	; 0x199a <_Z11ReceiveGAVRv+0x18e>
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	2d a5       	lds	r18, 0x6d
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	2a 33       	cpi	r18, 0x3A	; 58
    19a0:	09 f0       	breq	.+2      	; 0x19a4 <_Z11ReceiveGAVRv+0x198>
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	89 27       	eor	r24, r25
    19a6:	88 23       	and	r24, r24
    19a8:	49 f0       	breq	.+18     	; 0x19bc <_Z11ReceiveGAVRv+0x1b0>
    19aa:	83 e0       	ldi	r24, 0x03	; 3
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	9a 83       	std	Y+2, r25	; 0x02
    19b0:	89 83       	std	Y+1, r24	; 0x01
    19b2:	82 e6       	ldi	r24, 0x62	; 98
    19b4:	91 e0       	ldi	r25, 0x01	; 1
    19b6:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
					else {state=6;}
					break;
    19ba:	8b c2       	rjmp	.+1302   	; 0x1ed2 <_Z11ReceiveGAVRv+0x6c6>
				}//end case 1
				case 2:{
					//Got string, see what it is case.
					if (!strncmp(recString,"N.",8)){state=4;} //set appropriate flags and respond in appropriate way.
					else if ((recString[2]==':') != (recString[3]==':')){state=3;PrintBone("Got a time.");}//go parse the string for a time and date. SYN03:33:12/DATE or SYN3:33:12/DATE, either char 4 or 5 is :
					else {state=6;}
    19bc:	86 e0       	ldi	r24, 0x06	; 6
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	9a 83       	std	Y+2, r25	; 0x02
    19c2:	89 83       	std	Y+1, r24	; 0x01
					break;
    19c4:	86 c2       	rjmp	.+1292   	; 0x1ed2 <_Z11ReceiveGAVRv+0x6c6>
				}//end case 2
				case 3:{
					//Parse for date/time case
					if (flagUserClock){
    19c6:	80 91 07 02 	lds	r24, 0x0207
    19ca:	88 23       	and	r24, r24
    19cc:	09 f4       	brne	.+2      	; 0x19d0 <_Z11ReceiveGAVRv+0x1c4>
    19ce:	09 c2       	rjmp	.+1042   	; 0x1de2 <_Z11ReceiveGAVRv+0x5d6>
						//Go through the string and parse for the time. Must go through the time to get the date.
						BOOL successTime=fFalse, successDate=fFalse;			//whether or not we have successfully parsed string
    19d0:	1f 8a       	std	Y+23, r1	; 0x17
    19d2:	18 8e       	std	Y+24, r1	; 0x18
						int counter=1;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	9f 83       	std	Y+7, r25	; 0x07
    19da:	8e 83       	std	Y+6, r24	; 0x06
						int tempNum[3]={0,0,0}, tempNum1[3]={0,0,0},dmy=0, hms=0, placement=0;
    19dc:	1a 8e       	std	Y+26, r1	; 0x1a
    19de:	19 8e       	std	Y+25, r1	; 0x19
    19e0:	1c 8e       	std	Y+28, r1	; 0x1c
    19e2:	1b 8e       	std	Y+27, r1	; 0x1b
    19e4:	1e 8e       	std	Y+30, r1	; 0x1e
    19e6:	1d 8e       	std	Y+29, r1	; 0x1d
    19e8:	18 a2       	lds	r17, 0x98
    19ea:	1f 8e       	std	Y+31, r1	; 0x1f
    19ec:	1a a2       	lds	r17, 0x9a
    19ee:	19 a2       	lds	r17, 0x99
    19f0:	1c a2       	lds	r17, 0x9c
    19f2:	1b a2       	lds	r17, 0x9b
    19f4:	19 86       	std	Y+9, r1	; 0x09
    19f6:	18 86       	std	Y+8, r1	; 0x08
    19f8:	1b 86       	std	Y+11, r1	; 0x0b
    19fa:	1a 86       	std	Y+10, r1	; 0x0a
    19fc:	1d 86       	std	Y+13, r1	; 0x0d
    19fe:	1c 86       	std	Y+12, r1	; 0x0c
						char tempStringNum[5];
						
						//Parse the string for the time. Always looks for the time. If not end of string or '/' indicating start of date, continue
						while (recString[counter] != '/' && recString[counter] != '\0'){
    1a00:	73 c0       	rjmp	.+230    	; 0x1ae8 <_Z11ReceiveGAVRv+0x2dc>
							//If the character isn't a colon, we haven't gotten 3 int values add to tempStringNum
							if (recString[counter]!=':' && hms<3){
    1a02:	9e 01       	movw	r18, r28
    1a04:	26 5d       	subi	r18, 0xD6	; 214
    1a06:	3f 4f       	sbci	r19, 0xFF	; 255
    1a08:	8e 81       	ldd	r24, Y+6	; 0x06
    1a0a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a0c:	82 0f       	add	r24, r18
    1a0e:	93 1f       	adc	r25, r19
    1a10:	fc 01       	movw	r30, r24
    1a12:	80 81       	ld	r24, Z
    1a14:	8a 33       	cpi	r24, 0x3A	; 58
    1a16:	e9 f0       	breq	.+58     	; 0x1a52 <_Z11ReceiveGAVRv+0x246>
    1a18:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a1c:	83 30       	cpi	r24, 0x03	; 3
    1a1e:	91 05       	cpc	r25, r1
    1a20:	c4 f4       	brge	.+48     	; 0x1a52 <_Z11ReceiveGAVRv+0x246>
								tempStringNum[placement++]=recString[counter];
    1a22:	9e 01       	movw	r18, r28
    1a24:	26 5d       	subi	r18, 0xD6	; 214
    1a26:	3f 4f       	sbci	r19, 0xFF	; 255
    1a28:	8e 81       	ldd	r24, Y+6	; 0x06
    1a2a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a2c:	82 0f       	add	r24, r18
    1a2e:	93 1f       	adc	r25, r19
    1a30:	fc 01       	movw	r30, r24
    1a32:	40 81       	ld	r20, Z
    1a34:	9e 01       	movw	r18, r28
    1a36:	2b 5d       	subi	r18, 0xDB	; 219
    1a38:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a3c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a3e:	82 0f       	add	r24, r18
    1a40:	93 1f       	adc	r25, r19
    1a42:	fc 01       	movw	r30, r24
    1a44:	40 83       	st	Z, r20
    1a46:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a48:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a4a:	01 96       	adiw	r24, 0x01	; 1
    1a4c:	9d 87       	std	Y+13, r25	; 0x0d
    1a4e:	8c 87       	std	Y+12, r24	; 0x0c
    1a50:	46 c0       	rjmp	.+140    	; 0x1ade <_Z11ReceiveGAVRv+0x2d2>
							//If haven't gotten 3 int's and character is colon, store int(stringNum) into tempNum[<current time param>]
							} else if (hms<2 && recString[counter] == ':') {
    1a52:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a54:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a56:	82 30       	cpi	r24, 0x02	; 2
    1a58:	91 05       	cpc	r25, r1
    1a5a:	0c f0       	brlt	.+2      	; 0x1a5e <_Z11ReceiveGAVRv+0x252>
    1a5c:	40 c0       	rjmp	.+128    	; 0x1ade <_Z11ReceiveGAVRv+0x2d2>
    1a5e:	9e 01       	movw	r18, r28
    1a60:	26 5d       	subi	r18, 0xD6	; 214
    1a62:	3f 4f       	sbci	r19, 0xFF	; 255
    1a64:	8e 81       	ldd	r24, Y+6	; 0x06
    1a66:	9f 81       	ldd	r25, Y+7	; 0x07
    1a68:	82 0f       	add	r24, r18
    1a6a:	93 1f       	adc	r25, r19
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	80 81       	ld	r24, Z
    1a70:	8a 33       	cpi	r24, 0x3A	; 58
    1a72:	a9 f5       	brne	.+106    	; 0x1ade <_Z11ReceiveGAVRv+0x2d2>
								tempNum[hms++] = atoi(tempStringNum);
    1a74:	ce 01       	movw	r24, r28
    1a76:	85 96       	adiw	r24, 0x25	; 37
    1a78:	0e 94 cd 1c 	call	0x399a	; 0x399a <atoi>
    1a7c:	9c 01       	movw	r18, r24
    1a7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a80:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	ae 01       	movw	r20, r28
    1a88:	4f 5f       	subi	r20, 0xFF	; 255
    1a8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a8c:	84 0f       	add	r24, r20
    1a8e:	95 1f       	adc	r25, r21
    1a90:	48 96       	adiw	r24, 0x18	; 24
    1a92:	fc 01       	movw	r30, r24
    1a94:	31 83       	std	Z+1, r19	; 0x01
    1a96:	20 83       	st	Z, r18
    1a98:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a9a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a9c:	01 96       	adiw	r24, 0x01	; 1
    1a9e:	9b 87       	std	Y+11, r25	; 0x0b
    1aa0:	8a 87       	std	Y+10, r24	; 0x0a
								for (int j=0; j <= placement; j++){tempStringNum[j]=NULL;}	//reset the string
    1aa2:	1f 86       	std	Y+15, r1	; 0x0f
    1aa4:	1e 86       	std	Y+14, r1	; 0x0e
    1aa6:	0e c0       	rjmp	.+28     	; 0x1ac4 <_Z11ReceiveGAVRv+0x2b8>
    1aa8:	9e 01       	movw	r18, r28
    1aaa:	2b 5d       	subi	r18, 0xDB	; 219
    1aac:	3f 4f       	sbci	r19, 0xFF	; 255
    1aae:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ab0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ab2:	82 0f       	add	r24, r18
    1ab4:	93 1f       	adc	r25, r19
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	10 82       	st	Z, r1
    1aba:	8e 85       	ldd	r24, Y+14	; 0x0e
    1abc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1abe:	01 96       	adiw	r24, 0x01	; 1
    1ac0:	9f 87       	std	Y+15, r25	; 0x0f
    1ac2:	8e 87       	std	Y+14, r24	; 0x0e
    1ac4:	41 e0       	ldi	r20, 0x01	; 1
    1ac6:	2e 85       	ldd	r18, Y+14	; 0x0e
    1ac8:	3f 85       	ldd	r19, Y+15	; 0x0f
    1aca:	8c 85       	ldd	r24, Y+12	; 0x0c
    1acc:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ace:	82 17       	cp	r24, r18
    1ad0:	93 07       	cpc	r25, r19
    1ad2:	0c f4       	brge	.+2      	; 0x1ad6 <_Z11ReceiveGAVRv+0x2ca>
    1ad4:	40 e0       	ldi	r20, 0x00	; 0
    1ad6:	44 23       	and	r20, r20
    1ad8:	39 f7       	brne	.-50     	; 0x1aa8 <_Z11ReceiveGAVRv+0x29c>
								placement=0;												//reset placement
    1ada:	1d 86       	std	Y+13, r1	; 0x0d
    1adc:	1c 86       	std	Y+12, r1	; 0x0c
							//If nothing else, somethign is wrong but it won't matter because we'll eventually hit \0 and exit with ACKBAD
							} else;
							counter++;
    1ade:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ae2:	01 96       	adiw	r24, 0x01	; 1
    1ae4:	9f 83       	std	Y+7, r25	; 0x07
    1ae6:	8e 83       	std	Y+6, r24	; 0x06
						int counter=1;
						int tempNum[3]={0,0,0}, tempNum1[3]={0,0,0},dmy=0, hms=0, placement=0;
						char tempStringNum[5];
						
						//Parse the string for the time. Always looks for the time. If not end of string or '/' indicating start of date, continue
						while (recString[counter] != '/' && recString[counter] != '\0'){
    1ae8:	9e 01       	movw	r18, r28
    1aea:	26 5d       	subi	r18, 0xD6	; 214
    1aec:	3f 4f       	sbci	r19, 0xFF	; 255
    1aee:	8e 81       	ldd	r24, Y+6	; 0x06
    1af0:	9f 81       	ldd	r25, Y+7	; 0x07
    1af2:	82 0f       	add	r24, r18
    1af4:	93 1f       	adc	r25, r19
    1af6:	fc 01       	movw	r30, r24
    1af8:	80 81       	ld	r24, Z
    1afa:	8f 32       	cpi	r24, 0x2F	; 47
    1afc:	69 f0       	breq	.+26     	; 0x1b18 <_Z11ReceiveGAVRv+0x30c>
    1afe:	9e 01       	movw	r18, r28
    1b00:	26 5d       	subi	r18, 0xD6	; 214
    1b02:	3f 4f       	sbci	r19, 0xFF	; 255
    1b04:	8e 81       	ldd	r24, Y+6	; 0x06
    1b06:	9f 81       	ldd	r25, Y+7	; 0x07
    1b08:	82 0f       	add	r24, r18
    1b0a:	93 1f       	adc	r25, r19
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	80 81       	ld	r24, Z
    1b10:	88 23       	and	r24, r24
    1b12:	11 f0       	breq	.+4      	; 0x1b18 <_Z11ReceiveGAVRv+0x30c>
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	01 c0       	rjmp	.+2      	; 0x1b1a <_Z11ReceiveGAVRv+0x30e>
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	88 23       	and	r24, r24
    1b1c:	09 f0       	breq	.+2      	; 0x1b20 <_Z11ReceiveGAVRv+0x314>
    1b1e:	71 cf       	rjmp	.-286    	; 0x1a02 <_Z11ReceiveGAVRv+0x1f6>
							//If nothing else, somethign is wrong but it won't matter because we'll eventually hit \0 and exit with ACKBAD
							} else;
							counter++;
						}//end while
						//Found a '/', assign tempNum otherwise exit with ACKBAD
						if (recString[counter] == '/'){
    1b20:	9e 01       	movw	r18, r28
    1b22:	26 5d       	subi	r18, 0xD6	; 214
    1b24:	3f 4f       	sbci	r19, 0xFF	; 255
    1b26:	8e 81       	ldd	r24, Y+6	; 0x06
    1b28:	9f 81       	ldd	r25, Y+7	; 0x07
    1b2a:	82 0f       	add	r24, r18
    1b2c:	93 1f       	adc	r25, r19
    1b2e:	fc 01       	movw	r30, r24
    1b30:	80 81       	ld	r24, Z
    1b32:	8f 32       	cpi	r24, 0x2F	; 47
    1b34:	b9 f4       	brne	.+46     	; 0x1b64 <_Z11ReceiveGAVRv+0x358>
							tempNum[hms] = atoi(tempStringNum);
    1b36:	ce 01       	movw	r24, r28
    1b38:	85 96       	adiw	r24, 0x25	; 37
    1b3a:	0e 94 cd 1c 	call	0x399a	; 0x399a <atoi>
    1b3e:	9c 01       	movw	r18, r24
    1b40:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b42:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	ae 01       	movw	r20, r28
    1b4a:	4f 5f       	subi	r20, 0xFF	; 255
    1b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b4e:	84 0f       	add	r24, r20
    1b50:	95 1f       	adc	r25, r21
    1b52:	48 96       	adiw	r24, 0x18	; 24
    1b54:	fc 01       	movw	r30, r24
    1b56:	31 83       	std	Z+1, r19	; 0x01
    1b58:	20 83       	st	Z, r18
							successTime=fTrue;
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	8f 8b       	std	Y+23, r24	; 0x17
							break;
						}
						
						//If flag for Date is set, then parse the string and do something with it.
						//Now get the date. have to null the tempStringNum
						for (int j=0; j <= placement; j++){tempStringNum[j]=NULL;}	//reset the string
    1b5e:	19 8a       	std	Y+17, r1	; 0x11
    1b60:	18 8a       	std	Y+16, r1	; 0x10
    1b62:	17 c0       	rjmp	.+46     	; 0x1b92 <_Z11ReceiveGAVRv+0x386>
						//Found a '/', assign tempNum otherwise exit with ACKBAD
						if (recString[counter] == '/'){
							tempNum[hms] = atoi(tempStringNum);
							successTime=fTrue;
						} else {
							state=5;
    1b64:	85 e0       	ldi	r24, 0x05	; 5
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	9a 83       	std	Y+2, r25	; 0x02
    1b6a:	89 83       	std	Y+1, r24	; 0x01
							PrintGAVR("B.");
    1b6c:	82 e1       	ldi	r24, 0x12	; 18
    1b6e:	91 e0       	ldi	r25, 0x01	; 1
    1b70:	0e 94 9b 09 	call	0x1336	; 0x1336 <_Z9PrintGAVRPc>
							break;
    1b74:	ae c1       	rjmp	.+860    	; 0x1ed2 <_Z11ReceiveGAVRv+0x6c6>
						}
						
						//If flag for Date is set, then parse the string and do something with it.
						//Now get the date. have to null the tempStringNum
						for (int j=0; j <= placement; j++){tempStringNum[j]=NULL;}	//reset the string
    1b76:	9e 01       	movw	r18, r28
    1b78:	2b 5d       	subi	r18, 0xDB	; 219
    1b7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7c:	88 89       	ldd	r24, Y+16	; 0x10
    1b7e:	99 89       	ldd	r25, Y+17	; 0x11
    1b80:	82 0f       	add	r24, r18
    1b82:	93 1f       	adc	r25, r19
    1b84:	fc 01       	movw	r30, r24
    1b86:	10 82       	st	Z, r1
    1b88:	88 89       	ldd	r24, Y+16	; 0x10
    1b8a:	99 89       	ldd	r25, Y+17	; 0x11
    1b8c:	01 96       	adiw	r24, 0x01	; 1
    1b8e:	99 8b       	std	Y+17, r25	; 0x11
    1b90:	88 8b       	std	Y+16, r24	; 0x10
    1b92:	41 e0       	ldi	r20, 0x01	; 1
    1b94:	28 89       	ldd	r18, Y+16	; 0x10
    1b96:	39 89       	ldd	r19, Y+17	; 0x11
    1b98:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b9a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b9c:	82 17       	cp	r24, r18
    1b9e:	93 07       	cpc	r25, r19
    1ba0:	0c f4       	brge	.+2      	; 0x1ba4 <_Z11ReceiveGAVRv+0x398>
    1ba2:	40 e0       	ldi	r20, 0x00	; 0
    1ba4:	44 23       	and	r20, r20
    1ba6:	39 f7       	brne	.-50     	; 0x1b76 <_Z11ReceiveGAVRv+0x36a>
						placement=0;
    1ba8:	1d 86       	std	Y+13, r1	; 0x0d
    1baa:	1c 86       	std	Y+12, r1	; 0x0c
						counter++;	//get past the '/'
    1bac:	8e 81       	ldd	r24, Y+6	; 0x06
    1bae:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb0:	01 96       	adiw	r24, 0x01	; 1
    1bb2:	9f 83       	std	Y+7, r25	; 0x07
    1bb4:	8e 83       	std	Y+6, r24	; 0x06
						
						//Loop through the string. If not end of file and counter isn't end of string, and not terminator '.', continue
						while (recString[counter] != '.' && recString[counter] != '\0' && counter != strLoc){
    1bb6:	73 c0       	rjmp	.+230    	; 0x1c9e <_Z11ReceiveGAVRv+0x492>
							//If char isn't sepaerator or end of string of dmy has been hit, add to buffer
							if  (recString[counter] != ',' && dmy < 3){
    1bb8:	9e 01       	movw	r18, r28
    1bba:	26 5d       	subi	r18, 0xD6	; 214
    1bbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bbe:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc0:	9f 81       	ldd	r25, Y+7	; 0x07
    1bc2:	82 0f       	add	r24, r18
    1bc4:	93 1f       	adc	r25, r19
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	80 81       	ld	r24, Z
    1bca:	8c 32       	cpi	r24, 0x2C	; 44
    1bcc:	e9 f0       	breq	.+58     	; 0x1c08 <_Z11ReceiveGAVRv+0x3fc>
    1bce:	88 85       	ldd	r24, Y+8	; 0x08
    1bd0:	99 85       	ldd	r25, Y+9	; 0x09
    1bd2:	83 30       	cpi	r24, 0x03	; 3
    1bd4:	91 05       	cpc	r25, r1
    1bd6:	c4 f4       	brge	.+48     	; 0x1c08 <_Z11ReceiveGAVRv+0x3fc>
								tempStringNum[placement++]=recString[counter];
    1bd8:	9e 01       	movw	r18, r28
    1bda:	26 5d       	subi	r18, 0xD6	; 214
    1bdc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bde:	8e 81       	ldd	r24, Y+6	; 0x06
    1be0:	9f 81       	ldd	r25, Y+7	; 0x07
    1be2:	82 0f       	add	r24, r18
    1be4:	93 1f       	adc	r25, r19
    1be6:	fc 01       	movw	r30, r24
    1be8:	40 81       	ld	r20, Z
    1bea:	9e 01       	movw	r18, r28
    1bec:	2b 5d       	subi	r18, 0xDB	; 219
    1bee:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bf2:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bf4:	82 0f       	add	r24, r18
    1bf6:	93 1f       	adc	r25, r19
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	40 83       	st	Z, r20
    1bfc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bfe:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c00:	01 96       	adiw	r24, 0x01	; 1
    1c02:	9d 87       	std	Y+13, r25	; 0x0d
    1c04:	8c 87       	std	Y+12, r24	; 0x0c
    1c06:	46 c0       	rjmp	.+140    	; 0x1c94 <_Z11ReceiveGAVRv+0x488>
							//If a comma was found, need to store that sucker in the tempNum1[x]. dmy needs to be 0 or 1 aka month or day.
							} else if (dmy<2 && recString[counter]==','){
    1c08:	88 85       	ldd	r24, Y+8	; 0x08
    1c0a:	99 85       	ldd	r25, Y+9	; 0x09
    1c0c:	82 30       	cpi	r24, 0x02	; 2
    1c0e:	91 05       	cpc	r25, r1
    1c10:	0c f0       	brlt	.+2      	; 0x1c14 <_Z11ReceiveGAVRv+0x408>
    1c12:	40 c0       	rjmp	.+128    	; 0x1c94 <_Z11ReceiveGAVRv+0x488>
    1c14:	9e 01       	movw	r18, r28
    1c16:	26 5d       	subi	r18, 0xD6	; 214
    1c18:	3f 4f       	sbci	r19, 0xFF	; 255
    1c1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c1e:	82 0f       	add	r24, r18
    1c20:	93 1f       	adc	r25, r19
    1c22:	fc 01       	movw	r30, r24
    1c24:	80 81       	ld	r24, Z
    1c26:	8c 32       	cpi	r24, 0x2C	; 44
    1c28:	a9 f5       	brne	.+106    	; 0x1c94 <_Z11ReceiveGAVRv+0x488>
								tempNum1[dmy++] = atoi(tempStringNum);
    1c2a:	ce 01       	movw	r24, r28
    1c2c:	85 96       	adiw	r24, 0x25	; 37
    1c2e:	0e 94 cd 1c 	call	0x399a	; 0x399a <atoi>
    1c32:	9c 01       	movw	r18, r24
    1c34:	88 85       	ldd	r24, Y+8	; 0x08
    1c36:	99 85       	ldd	r25, Y+9	; 0x09
    1c38:	88 0f       	add	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	ae 01       	movw	r20, r28
    1c3e:	4f 5f       	subi	r20, 0xFF	; 255
    1c40:	5f 4f       	sbci	r21, 0xFF	; 255
    1c42:	84 0f       	add	r24, r20
    1c44:	95 1f       	adc	r25, r21
    1c46:	4e 96       	adiw	r24, 0x1e	; 30
    1c48:	fc 01       	movw	r30, r24
    1c4a:	31 83       	std	Z+1, r19	; 0x01
    1c4c:	20 83       	st	Z, r18
    1c4e:	88 85       	ldd	r24, Y+8	; 0x08
    1c50:	99 85       	ldd	r25, Y+9	; 0x09
    1c52:	01 96       	adiw	r24, 0x01	; 1
    1c54:	99 87       	std	Y+9, r25	; 0x09
    1c56:	88 87       	std	Y+8, r24	; 0x08
								for (int j=0; j <= placement; j++){tempStringNum[j]=NULL;}
    1c58:	1b 8a       	std	Y+19, r1	; 0x13
    1c5a:	1a 8a       	std	Y+18, r1	; 0x12
    1c5c:	0e c0       	rjmp	.+28     	; 0x1c7a <_Z11ReceiveGAVRv+0x46e>
    1c5e:	9e 01       	movw	r18, r28
    1c60:	2b 5d       	subi	r18, 0xDB	; 219
    1c62:	3f 4f       	sbci	r19, 0xFF	; 255
    1c64:	8a 89       	ldd	r24, Y+18	; 0x12
    1c66:	9b 89       	ldd	r25, Y+19	; 0x13
    1c68:	82 0f       	add	r24, r18
    1c6a:	93 1f       	adc	r25, r19
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	10 82       	st	Z, r1
    1c70:	8a 89       	ldd	r24, Y+18	; 0x12
    1c72:	9b 89       	ldd	r25, Y+19	; 0x13
    1c74:	01 96       	adiw	r24, 0x01	; 1
    1c76:	9b 8b       	std	Y+19, r25	; 0x13
    1c78:	8a 8b       	std	Y+18, r24	; 0x12
    1c7a:	41 e0       	ldi	r20, 0x01	; 1
    1c7c:	2a 89       	ldd	r18, Y+18	; 0x12
    1c7e:	3b 89       	ldd	r19, Y+19	; 0x13
    1c80:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c82:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c84:	82 17       	cp	r24, r18
    1c86:	93 07       	cpc	r25, r19
    1c88:	0c f4       	brge	.+2      	; 0x1c8c <_Z11ReceiveGAVRv+0x480>
    1c8a:	40 e0       	ldi	r20, 0x00	; 0
    1c8c:	44 23       	and	r20, r20
    1c8e:	39 f7       	brne	.-50     	; 0x1c5e <_Z11ReceiveGAVRv+0x452>
								placement=0;
    1c90:	1d 86       	std	Y+13, r1	; 0x0d
    1c92:	1c 86       	std	Y+12, r1	; 0x0c
							} else;
							counter++;							
    1c94:	8e 81       	ldd	r24, Y+6	; 0x06
    1c96:	9f 81       	ldd	r25, Y+7	; 0x07
    1c98:	01 96       	adiw	r24, 0x01	; 1
    1c9a:	9f 83       	std	Y+7, r25	; 0x07
    1c9c:	8e 83       	std	Y+6, r24	; 0x06
						for (int j=0; j <= placement; j++){tempStringNum[j]=NULL;}	//reset the string
						placement=0;
						counter++;	//get past the '/'
						
						//Loop through the string. If not end of file and counter isn't end of string, and not terminator '.', continue
						while (recString[counter] != '.' && recString[counter] != '\0' && counter != strLoc){
    1c9e:	9e 01       	movw	r18, r28
    1ca0:	26 5d       	subi	r18, 0xD6	; 214
    1ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ca6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ca8:	82 0f       	add	r24, r18
    1caa:	93 1f       	adc	r25, r19
    1cac:	fc 01       	movw	r30, r24
    1cae:	80 81       	ld	r24, Z
    1cb0:	8e 32       	cpi	r24, 0x2E	; 46
    1cb2:	a1 f0       	breq	.+40     	; 0x1cdc <_Z11ReceiveGAVRv+0x4d0>
    1cb4:	9e 01       	movw	r18, r28
    1cb6:	26 5d       	subi	r18, 0xD6	; 214
    1cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cba:	8e 81       	ldd	r24, Y+6	; 0x06
    1cbc:	9f 81       	ldd	r25, Y+7	; 0x07
    1cbe:	82 0f       	add	r24, r18
    1cc0:	93 1f       	adc	r25, r19
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	80 81       	ld	r24, Z
    1cc6:	88 23       	and	r24, r24
    1cc8:	49 f0       	breq	.+18     	; 0x1cdc <_Z11ReceiveGAVRv+0x4d0>
    1cca:	2e 81       	ldd	r18, Y+6	; 0x06
    1ccc:	3f 81       	ldd	r19, Y+7	; 0x07
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd2:	28 17       	cp	r18, r24
    1cd4:	39 07       	cpc	r19, r25
    1cd6:	11 f0       	breq	.+4      	; 0x1cdc <_Z11ReceiveGAVRv+0x4d0>
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	01 c0       	rjmp	.+2      	; 0x1cde <_Z11ReceiveGAVRv+0x4d2>
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	88 23       	and	r24, r24
    1ce0:	09 f0       	breq	.+2      	; 0x1ce4 <_Z11ReceiveGAVRv+0x4d8>
    1ce2:	6a cf       	rjmp	.-300    	; 0x1bb8 <_Z11ReceiveGAVRv+0x3ac>
								placement=0;
							} else;
							counter++;							
						}//end while
						//Assign last date if the reason we broke the while loop was a '.'. If not, ACKBAD and exit.
						if (recString[counter] == '.'){
    1ce4:	9e 01       	movw	r18, r28
    1ce6:	26 5d       	subi	r18, 0xD6	; 214
    1ce8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cea:	8e 81       	ldd	r24, Y+6	; 0x06
    1cec:	9f 81       	ldd	r25, Y+7	; 0x07
    1cee:	82 0f       	add	r24, r18
    1cf0:	93 1f       	adc	r25, r19
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	80 81       	ld	r24, Z
    1cf6:	8e 32       	cpi	r24, 0x2E	; 46
    1cf8:	c1 f4       	brne	.+48     	; 0x1d2a <_Z11ReceiveGAVRv+0x51e>
							tempNum1[dmy] = atoi(tempStringNum);
    1cfa:	ce 01       	movw	r24, r28
    1cfc:	85 96       	adiw	r24, 0x25	; 37
    1cfe:	0e 94 cd 1c 	call	0x399a	; 0x399a <atoi>
    1d02:	9c 01       	movw	r18, r24
    1d04:	88 85       	ldd	r24, Y+8	; 0x08
    1d06:	99 85       	ldd	r25, Y+9	; 0x09
    1d08:	88 0f       	add	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	ae 01       	movw	r20, r28
    1d0e:	4f 5f       	subi	r20, 0xFF	; 255
    1d10:	5f 4f       	sbci	r21, 0xFF	; 255
    1d12:	84 0f       	add	r24, r20
    1d14:	95 1f       	adc	r25, r21
    1d16:	4e 96       	adiw	r24, 0x1e	; 30
    1d18:	fc 01       	movw	r30, r24
    1d1a:	31 83       	std	Z+1, r19	; 0x01
    1d1c:	20 83       	st	Z, r18
							successDate=fTrue;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	88 8f       	std	Y+24, r24	; 0x18
							state=5;
							break;
						}
										
						//Make sure the settings are okay before setting the time. If not, send ACKBAD and exit.
						if (successDate && successTime){
    1d22:	88 8d       	ldd	r24, Y+24	; 0x18
    1d24:	88 23       	and	r24, r24
    1d26:	51 f4       	brne	.+20     	; 0x1d3c <_Z11ReceiveGAVRv+0x530>
    1d28:	35 c0       	rjmp	.+106    	; 0x1d94 <_Z11ReceiveGAVRv+0x588>
						//Assign last date if the reason we broke the while loop was a '.'. If not, ACKBAD and exit.
						if (recString[counter] == '.'){
							tempNum1[dmy] = atoi(tempStringNum);
							successDate=fTrue;
						} else {//something in the string was wrong, ACKBAD and then exit
							PrintGAVR("B.");
    1d2a:	82 e1       	ldi	r24, 0x12	; 18
    1d2c:	91 e0       	ldi	r25, 0x01	; 1
    1d2e:	0e 94 9b 09 	call	0x1336	; 0x1336 <_Z9PrintGAVRPc>
							state=5;
    1d32:	85 e0       	ldi	r24, 0x05	; 5
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	9a 83       	std	Y+2, r25	; 0x02
    1d38:	89 83       	std	Y+1, r24	; 0x01
							break;
    1d3a:	cb c0       	rjmp	.+406    	; 0x1ed2 <_Z11ReceiveGAVRv+0x6c6>
						}
										
						//Make sure the settings are okay before setting the time. If not, send ACKBAD and exit.
						if (successDate && successTime){
    1d3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d3e:	88 23       	and	r24, r24
    1d40:	49 f1       	breq	.+82     	; 0x1d94 <_Z11ReceiveGAVRv+0x588>
							currentTime.setTime(tempNum[0],tempNum[1],tempNum[2]);
    1d42:	69 8d       	ldd	r22, Y+25	; 0x19
    1d44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d46:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1d48:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1d4a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1d4c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1d4e:	86 ed       	ldi	r24, 0xD6	; 214
    1d50:	91 e0       	ldi	r25, 0x01	; 1
    1d52:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN6myTime7setTimeEiii>
							currentTime.setDate(tempNum1[0],tempNum1[1],tempNum1[2]);
    1d56:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d58:	78 a1       	lds	r23, 0x48
    1d5a:	49 a1       	lds	r20, 0x49
    1d5c:	5a a1       	lds	r21, 0x4a
    1d5e:	2b a1       	lds	r18, 0x4b
    1d60:	3c a1       	lds	r19, 0x4c
    1d62:	86 ed       	ldi	r24, 0xD6	; 214
    1d64:	91 e0       	ldi	r25, 0x01	; 1
    1d66:	0e 94 84 01 	call	0x308	; 0x308 <_ZN6myDate7setDateEiii>
							saveDateTime_eeprom(fTrue,fTrue);
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	61 e0       	ldi	r22, 0x01	; 1
    1d6e:	0e 94 3c 08 	call	0x1078	; 0x1078 <_Z19saveDateTime_eepromhh>
							flagUserClock=fFalse;
    1d72:	10 92 07 02 	sts	0x0207, r1
							
							PrintBone("Set my time.");							
    1d76:	8e e6       	ldi	r24, 0x6E	; 110
    1d78:	91 e0       	ldi	r25, 0x01	; 1
    1d7a:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
							//send ACK
							recString[0]='A';
    1d7e:	81 e4       	ldi	r24, 0x41	; 65
    1d80:	8a a7       	lds	r24, 0x7a
							PrintGAVR(recString);
    1d82:	ce 01       	movw	r24, r28
    1d84:	8a 96       	adiw	r24, 0x2a	; 42
    1d86:	0e 94 9b 09 	call	0x1336	; 0x1336 <_Z9PrintGAVRPc>
							state=7;
    1d8a:	87 e0       	ldi	r24, 0x07	; 7
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	9a 83       	std	Y+2, r25	; 0x02
    1d90:	89 83       	std	Y+1, r24	; 0x01
    1d92:	0b c0       	rjmp	.+22     	; 0x1daa <_Z11ReceiveGAVRv+0x59e>
						} else {
							//Here is a choice: Do we watn  to user to indicate the time is wrong, or just make them set it? Doesn't really matter.
							flagUserClock=fTrue;
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	80 93 07 02 	sts	0x0207, r24
							PrintBone("Bad time.");
    1d9a:	8b e7       	ldi	r24, 0x7B	; 123
    1d9c:	91 e0       	ldi	r25, 0x01	; 1
    1d9e:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
							state=5;
    1da2:	85 e0       	ldi	r24, 0x05	; 5
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	9a 83       	std	Y+2, r25	; 0x02
    1da8:	89 83       	std	Y+1, r24	; 0x01
						}			
						
						//If we wanted date and got it correctly, or wanted time and got it correctly, go to state 7 to ack with the appropriate response
						if (flagUserClock && successDate && successTime){
    1daa:	80 91 07 02 	lds	r24, 0x0207
    1dae:	88 23       	and	r24, r24
    1db0:	79 f0       	breq	.+30     	; 0x1dd0 <_Z11ReceiveGAVRv+0x5c4>
    1db2:	88 8d       	ldd	r24, Y+24	; 0x18
    1db4:	88 23       	and	r24, r24
    1db6:	61 f0       	breq	.+24     	; 0x1dd0 <_Z11ReceiveGAVRv+0x5c4>
    1db8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dba:	88 23       	and	r24, r24
    1dbc:	49 f0       	breq	.+18     	; 0x1dd0 <_Z11ReceiveGAVRv+0x5c4>
							flagUserClock=fFalse;
    1dbe:	10 92 07 02 	sts	0x0207, r1
							flagWaitingForReceiveGAVR=fFalse;
    1dc2:	10 92 02 02 	sts	0x0202, r1
							state=7;					//Respond with correct string ACK
    1dc6:	87 e0       	ldi	r24, 0x07	; 7
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	9a 83       	std	Y+2, r25	; 0x02
    1dcc:	89 83       	std	Y+1, r24	; 0x01
						PrintGAVR("NO.");
						state=5;
					}					
					// end if-else (flagUserClock)					
					//Exit
					break;
    1dce:	81 c0       	rjmp	.+258    	; 0x1ed2 <_Z11ReceiveGAVRv+0x6c6>
						if (flagUserClock && successDate && successTime){
							flagUserClock=fFalse;
							flagWaitingForReceiveGAVR=fFalse;
							state=7;					//Respond with correct string ACK
						} else {
							PrintGAVR("B.");
    1dd0:	82 e1       	ldi	r24, 0x12	; 18
    1dd2:	91 e0       	ldi	r25, 0x01	; 1
    1dd4:	0e 94 9b 09 	call	0x1336	; 0x1336 <_Z9PrintGAVRPc>
							state=5;
    1dd8:	85 e0       	ldi	r24, 0x05	; 5
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	9a 83       	std	Y+2, r25	; 0x02
    1dde:	89 83       	std	Y+1, r24	; 0x01
						PrintGAVR("NO.");
						state=5;
					}					
					// end if-else (flagUserClock)					
					//Exit
					break;
    1de0:	78 c0       	rjmp	.+240    	; 0x1ed2 <_Z11ReceiveGAVRv+0x6c6>
						} else {
							PrintGAVR("B.");
							state=5;
						}																										
					} else {	//don't need the date or time, wasn't looking for it. Respond with ACKNO. Should reset all flags on GAVR side.
						PrintGAVR("NO.");
    1de2:	85 e8       	ldi	r24, 0x85	; 133
    1de4:	91 e0       	ldi	r25, 0x01	; 1
    1de6:	0e 94 9b 09 	call	0x1336	; 0x1336 <_Z9PrintGAVRPc>
						state=5;
    1dea:	85 e0       	ldi	r24, 0x05	; 5
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	9a 83       	std	Y+2, r25	; 0x02
    1df0:	89 83       	std	Y+1, r24	; 0x01
					}					
					// end if-else (flagUserClock)					
					//Exit
					break;
    1df2:	6f c0       	rjmp	.+222    	; 0x1ed2 <_Z11ReceiveGAVRv+0x6c6>
					}//end case 3				
				case 4:{
					Wait_ms(100);
    1df4:	84 e6       	ldi	r24, 0x64	; 100
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_Z7Wait_msi>
					//Successful SYNNEED case.
					if (!flagUserClock){	//If we don't need the date or time, update with what we have.
    1dfc:	80 91 07 02 	lds	r24, 0x0207
    1e00:	88 23       	and	r24, r24
    1e02:	61 f4       	brne	.+24     	; 0x1e1c <_Z11ReceiveGAVRv+0x610>
						flagUpdateGAVRClock=fTrue;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	80 93 05 02 	sts	0x0205, r24
						PrintGAVR("N.");				//respond with correct ack
    1e0a:	8f e5       	ldi	r24, 0x5F	; 95
    1e0c:	91 e0       	ldi	r25, 0x01	; 1
    1e0e:	0e 94 9b 09 	call	0x1336	; 0x1336 <_Z9PrintGAVRPc>
						PrintBone("GAVR Needs.");
    1e12:	89 e8       	ldi	r24, 0x89	; 137
    1e14:	91 e0       	ldi	r25, 0x01	; 1
    1e16:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
    1e1a:	08 c0       	rjmp	.+16     	; 0x1e2c <_Z11ReceiveGAVRv+0x620>
					} else {
						PrintBone("NO.");
    1e1c:	85 e8       	ldi	r24, 0x85	; 133
    1e1e:	91 e0       	ldi	r25, 0x01	; 1
    1e20:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
						PrintGAVR("NO.");	//say we can't give you anything, ask the user.
    1e24:	85 e8       	ldi	r24, 0x85	; 133
    1e26:	91 e0       	ldi	r25, 0x01	; 1
    1e28:	0e 94 9b 09 	call	0x1336	; 0x1336 <_Z9PrintGAVRPc>
						//Should be expecting something from the GAVR with user date and time, this reminds the GAVR.
					} //end if-else
					state=5;
    1e2c:	85 e0       	ldi	r24, 0x05	; 5
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	9a 83       	std	Y+2, r25	; 0x02
    1e32:	89 83       	std	Y+1, r24	; 0x01
					break;					
    1e34:	4e c0       	rjmp	.+156    	; 0x1ed2 <_Z11ReceiveGAVRv+0x6c6>
				}//end case 4
				case 5:{
					//Exit case
					for (int i=0; i<strLoc; i++){recString[i]=NULL;}
    1e36:	1d 8a       	std	Y+21, r1	; 0x15
    1e38:	1c 8a       	std	Y+20, r1	; 0x14
    1e3a:	0e c0       	rjmp	.+28     	; 0x1e58 <_Z11ReceiveGAVRv+0x64c>
    1e3c:	9e 01       	movw	r18, r28
    1e3e:	26 5d       	subi	r18, 0xD6	; 214
    1e40:	3f 4f       	sbci	r19, 0xFF	; 255
    1e42:	8c 89       	ldd	r24, Y+20	; 0x14
    1e44:	9d 89       	ldd	r25, Y+21	; 0x15
    1e46:	82 0f       	add	r24, r18
    1e48:	93 1f       	adc	r25, r19
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	10 82       	st	Z, r1
    1e4e:	8c 89       	ldd	r24, Y+20	; 0x14
    1e50:	9d 89       	ldd	r25, Y+21	; 0x15
    1e52:	01 96       	adiw	r24, 0x01	; 1
    1e54:	9d 8b       	std	Y+21, r25	; 0x15
    1e56:	8c 8b       	std	Y+20, r24	; 0x14
    1e58:	2c 89       	ldd	r18, Y+20	; 0x14
    1e5a:	3d 89       	ldd	r19, Y+21	; 0x15
    1e5c:	41 e0       	ldi	r20, 0x01	; 1
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	9c 81       	ldd	r25, Y+4	; 0x04
    1e62:	28 17       	cp	r18, r24
    1e64:	39 07       	cpc	r19, r25
    1e66:	08 f0       	brcs	.+2      	; 0x1e6a <_Z11ReceiveGAVRv+0x65e>
    1e68:	40 e0       	ldi	r20, 0x00	; 0
    1e6a:	44 23       	and	r20, r20
    1e6c:	39 f7       	brne	.-50     	; 0x1e3c <_Z11ReceiveGAVRv+0x630>
					flagReceivingGAVR=fFalse;
    1e6e:	10 92 01 02 	sts	0x0201, r1
					flagWaitingForReceiveGAVR=fFalse;
    1e72:	10 92 02 02 	sts	0x0202, r1
					state=0;		//just in case
    1e76:	1a 82       	std	Y+2, r1	; 0x02
    1e78:	19 82       	std	Y+1, r1	; 0x01
					break;
    1e7a:	2b c0       	rjmp	.+86     	; 0x1ed2 <_Z11ReceiveGAVRv+0x6c6>
				}//end case 5
				case 6:{
					//Error in ACK case
					Wait_ms(150);
    1e7c:	86 e9       	ldi	r24, 0x96	; 150
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_Z7Wait_msi>
					PrintGAVR("E.");
    1e84:	85 e9       	ldi	r24, 0x95	; 149
    1e86:	91 e0       	ldi	r25, 0x01	; 1
    1e88:	0e 94 9b 09 	call	0x1336	; 0x1336 <_Z9PrintGAVRPc>
					PrintBone("ErrorR.");
    1e8c:	88 e9       	ldi	r24, 0x98	; 152
    1e8e:	91 e0       	ldi	r25, 0x01	; 1
    1e90:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
					state=5;
    1e94:	85 e0       	ldi	r24, 0x05	; 5
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	9a 83       	std	Y+2, r25	; 0x02
    1e9a:	89 83       	std	Y+1, r24	; 0x01
					break;
    1e9c:	1a c0       	rjmp	.+52     	; 0x1ed2 <_Z11ReceiveGAVRv+0x6c6>
				}//end case 6
				case 7:{
					Wait_ms(150);
    1e9e:	86 e9       	ldi	r24, 0x96	; 150
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_Z7Wait_msi>
					//Successful grab of date/time case
					recString[0]='A';
    1ea6:	81 e4       	ldi	r24, 0x41	; 65
    1ea8:	8a a7       	lds	r24, 0x7a
					PrintGAVR(recString);
    1eaa:	ce 01       	movw	r24, r28
    1eac:	8a 96       	adiw	r24, 0x2a	; 42
    1eae:	0e 94 9b 09 	call	0x1336	; 0x1336 <_Z9PrintGAVRPc>
					state=5;
    1eb2:	85 e0       	ldi	r24, 0x05	; 5
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	9a 83       	std	Y+2, r25	; 0x02
    1eb8:	89 83       	std	Y+1, r24	; 0x01
					PrintBone("Success.");
    1eba:	8e e4       	ldi	r24, 0x4E	; 78
    1ebc:	91 e0       	ldi	r25, 0x01	; 1
    1ebe:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
					break;		
    1ec2:	07 c0       	rjmp	.+14     	; 0x1ed2 <_Z11ReceiveGAVRv+0x6c6>
				}//end case 7
				default: {state=0; strLoc=0; flagReceivingGAVR=fFalse; break;}				
    1ec4:	1a 82       	std	Y+2, r1	; 0x02
    1ec6:	19 82       	std	Y+1, r1	; 0x01
    1ec8:	1c 82       	std	Y+4, r1	; 0x04
    1eca:	1b 82       	std	Y+3, r1	; 0x03
    1ecc:	10 92 01 02 	sts	0x0201, r1
    1ed0:	00 00       	nop
	char recChar, recString[40];
	unsigned int strLoc=0;
	BOOL noCarriage=fTrue;
	
	//While Loop
	while (flagReceivingGAVR){
    1ed2:	90 91 01 02 	lds	r25, 0x0201
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	99 23       	and	r25, r25
    1eda:	09 f4       	brne	.+2      	; 0x1ede <_Z11ReceiveGAVRv+0x6d2>
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	88 23       	and	r24, r24
    1ee0:	09 f0       	breq	.+2      	; 0x1ee4 <_Z11ReceiveGAVRv+0x6d8>
    1ee2:	a6 cc       	rjmp	.-1716   	; 0x1830 <_Z11ReceiveGAVRv+0x24>
					break;		
				}//end case 7
				default: {state=0; strLoc=0; flagReceivingGAVR=fFalse; break;}				
			}//end switch	
		}//end while flagReceivingGAVR	
}	
    1ee4:	cf 5a       	subi	r28, 0xAF	; 175
    1ee6:	df 4f       	sbci	r29, 0xFF	; 255
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	f8 94       	cli
    1eec:	de bf       	out	0x3e, r29	; 62
    1eee:	0f be       	out	0x3f, r0	; 63
    1ef0:	cd bf       	out	0x3d, r28	; 61
    1ef2:	df 91       	pop	r29
    1ef4:	cf 91       	pop	r28
    1ef6:	08 95       	ret

00001ef8 <_Z11ReceiveBonev>:
/*************************************************************************************************************/
void ReceiveBone(){
    1ef8:	cf 93       	push	r28
    1efa:	df 93       	push	r29
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	c5 56       	subi	r28, 0x65	; 101
    1f02:	d0 40       	sbci	r29, 0x00	; 0
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
	BYTE state=0,strLoc=0;
    1f0e:	19 82       	std	Y+1, r1	; 0x01
    1f10:	1a 82       	std	Y+2, r1	; 0x02
	char recChar, recString[40];
	BOOL noCarriage=fTrue;
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	8b 83       	std	Y+3, r24	; 0x03
	while (flagReceivingBone){
    1f16:	e5 c3       	rjmp	.+1994   	; 0x26e2 <_Z11ReceiveBonev+0x7ea>
			/* State 6: Graceful exit. Exit from a command like adc or temp.																*/
			/* State 7: Parse the input string for the time and date. Should be time(:)'/'date(,) where : and , are the delimiters. Term by */
			/*			'.'																													*/
			/********************************************************************************************************************************/
			
			switch(state){
    1f18:	89 81       	ldd	r24, Y+1	; 0x01
    1f1a:	88 2f       	mov	r24, r24
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	83 30       	cpi	r24, 0x03	; 3
    1f20:	91 05       	cpc	r25, r1
    1f22:	09 f4       	brne	.+2      	; 0x1f26 <_Z11ReceiveBonev+0x2e>
    1f24:	48 c1       	rjmp	.+656    	; 0x21b6 <_Z11ReceiveBonev+0x2be>
    1f26:	84 30       	cpi	r24, 0x04	; 4
    1f28:	91 05       	cpc	r25, r1
    1f2a:	5c f4       	brge	.+22     	; 0x1f42 <_Z11ReceiveBonev+0x4a>
    1f2c:	81 30       	cpi	r24, 0x01	; 1
    1f2e:	91 05       	cpc	r25, r1
    1f30:	09 f4       	brne	.+2      	; 0x1f34 <_Z11ReceiveBonev+0x3c>
    1f32:	77 c0       	rjmp	.+238    	; 0x2022 <_Z11ReceiveBonev+0x12a>
    1f34:	82 30       	cpi	r24, 0x02	; 2
    1f36:	91 05       	cpc	r25, r1
    1f38:	0c f0       	brlt	.+2      	; 0x1f3c <_Z11ReceiveBonev+0x44>
    1f3a:	83 c0       	rjmp	.+262    	; 0x2042 <_Z11ReceiveBonev+0x14a>
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	91 f0       	breq	.+36     	; 0x1f64 <_Z11ReceiveBonev+0x6c>
    1f40:	cc c3       	rjmp	.+1944   	; 0x26da <_Z11ReceiveBonev+0x7e2>
    1f42:	85 30       	cpi	r24, 0x05	; 5
    1f44:	91 05       	cpc	r25, r1
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <_Z11ReceiveBonev+0x52>
    1f48:	82 c1       	rjmp	.+772    	; 0x224e <_Z11ReceiveBonev+0x356>
    1f4a:	85 30       	cpi	r24, 0x05	; 5
    1f4c:	91 05       	cpc	r25, r1
    1f4e:	0c f4       	brge	.+2      	; 0x1f52 <_Z11ReceiveBonev+0x5a>
    1f50:	59 c1       	rjmp	.+690    	; 0x2204 <_Z11ReceiveBonev+0x30c>
    1f52:	86 30       	cpi	r24, 0x06	; 6
    1f54:	91 05       	cpc	r25, r1
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <_Z11ReceiveBonev+0x62>
    1f58:	a3 c1       	rjmp	.+838    	; 0x22a0 <_Z11ReceiveBonev+0x3a8>
    1f5a:	87 30       	cpi	r24, 0x07	; 7
    1f5c:	91 05       	cpc	r25, r1
    1f5e:	09 f4       	brne	.+2      	; 0x1f62 <_Z11ReceiveBonev+0x6a>
    1f60:	c0 c1       	rjmp	.+896    	; 0x22e2 <_Z11ReceiveBonev+0x3ea>
    1f62:	bb c3       	rjmp	.+1910   	; 0x26da <_Z11ReceiveBonev+0x7e2>
				case 0:{
					//Get the first character. If a '.', exit to bad state.
					strLoc=0;
    1f64:	1a 82       	std	Y+2, r1	; 0x02
					recChar = UDR0;
    1f66:	86 ec       	ldi	r24, 0xC6	; 198
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	80 81       	ld	r24, Z
    1f6e:	8c 8f       	std	Y+28, r24	; 0x1c
					if (recChar=='.'){
    1f70:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f72:	8e 32       	cpi	r24, 0x2E	; 46
    1f74:	19 f4       	brne	.+6      	; 0x1f7c <_Z11ReceiveBonev+0x84>
						state=5;
    1f76:	85 e0       	ldi	r24, 0x05	; 5
    1f78:	89 83       	std	Y+1, r24	; 0x01
					} else  {recString[strLoc++]=recChar; state=1;}	
					break;				
    1f7a:	b3 c3       	rjmp	.+1894   	; 0x26e2 <_Z11ReceiveBonev+0x7ea>
					//Get the first character. If a '.', exit to bad state.
					strLoc=0;
					recChar = UDR0;
					if (recChar=='.'){
						state=5;
					} else  {recString[strLoc++]=recChar; state=1;}	
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	88 2f       	mov	r24, r24
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	9e 01       	movw	r18, r28
    1f84:	22 5c       	subi	r18, 0xC2	; 194
    1f86:	3f 4f       	sbci	r19, 0xFF	; 255
    1f88:	82 0f       	add	r24, r18
    1f8a:	93 1f       	adc	r25, r19
    1f8c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1f8e:	fc 01       	movw	r30, r24
    1f90:	20 83       	st	Z, r18
    1f92:	8a 81       	ldd	r24, Y+2	; 0x02
    1f94:	8f 5f       	subi	r24, 0xFF	; 255
    1f96:	8a 83       	std	Y+2, r24	; 0x02
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	89 83       	std	Y+1, r24	; 0x01
					break;				
    1f9c:	a2 c3       	rjmp	.+1860   	; 0x26e2 <_Z11ReceiveBonev+0x7ea>
					}//end case 0
				case 1:{
					while (noCarriage && flagReceivingBone){	//while there isn't a timeout and no carry
						Wait_ms(50);
    1f9e:	82 e3       	ldi	r24, 0x32	; 50
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_Z7Wait_msi>
						while ((!(UCSR0A & (1 << RXC0))) && flagReceivingBone);		//get the next character
    1fa6:	00 00       	nop
    1fa8:	80 ec       	ldi	r24, 0xC0	; 192
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	fc 01       	movw	r30, r24
    1fae:	80 81       	ld	r24, Z
    1fb0:	88 23       	and	r24, r24
    1fb2:	34 f0       	brlt	.+12     	; 0x1fc0 <_Z11ReceiveBonev+0xc8>
    1fb4:	80 91 ff 01 	lds	r24, 0x01FF
    1fb8:	88 23       	and	r24, r24
    1fba:	11 f0       	breq	.+4      	; 0x1fc0 <_Z11ReceiveBonev+0xc8>
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	01 c0       	rjmp	.+2      	; 0x1fc2 <_Z11ReceiveBonev+0xca>
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	88 23       	and	r24, r24
    1fc4:	89 f7       	brne	.-30     	; 0x1fa8 <_Z11ReceiveBonev+0xb0>
						if (!flagReceivingBone){break;}					//if there was a timeout, break out and reset state
    1fc6:	80 91 ff 01 	lds	r24, 0x01FF
    1fca:	88 23       	and	r24, r24
    1fcc:	c1 f1       	breq	.+112    	; 0x203e <_Z11ReceiveBonev+0x146>
						recChar=UDR0;
    1fce:	86 ec       	ldi	r24, 0xC6	; 198
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	80 81       	ld	r24, Z
    1fd6:	8c 8f       	std	Y+28, r24	; 0x1c
						recString[strLoc++]=recChar;
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	88 2f       	mov	r24, r24
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	9e 01       	movw	r18, r28
    1fe0:	22 5c       	subi	r18, 0xC2	; 194
    1fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe4:	82 0f       	add	r24, r18
    1fe6:	93 1f       	adc	r25, r19
    1fe8:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1fea:	fc 01       	movw	r30, r24
    1fec:	20 83       	st	Z, r18
    1fee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff0:	8f 5f       	subi	r24, 0xFF	; 255
    1ff2:	8a 83       	std	Y+2, r24	; 0x02
						if (recChar == '.'){recString[strLoc]='\0'; noCarriage=fFalse; state=2;}
    1ff4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ff6:	8e 32       	cpi	r24, 0x2E	; 46
    1ff8:	71 f4       	brne	.+28     	; 0x2016 <_Z11ReceiveBonev+0x11e>
    1ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffc:	88 2f       	mov	r24, r24
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	9e 01       	movw	r18, r28
    2002:	22 5c       	subi	r18, 0xC2	; 194
    2004:	3f 4f       	sbci	r19, 0xFF	; 255
    2006:	82 0f       	add	r24, r18
    2008:	93 1f       	adc	r25, r19
    200a:	fc 01       	movw	r30, r24
    200c:	10 82       	st	Z, r1
    200e:	1b 82       	std	Y+3, r1	; 0x03
    2010:	82 e0       	ldi	r24, 0x02	; 2
    2012:	89 83       	std	Y+1, r24	; 0x01
    2014:	06 c0       	rjmp	.+12     	; 0x2022 <_Z11ReceiveBonev+0x12a>
						else if (strLoc >= 39){state=5;noCarriage=fFalse;}
    2016:	8a 81       	ldd	r24, Y+2	; 0x02
    2018:	87 32       	cpi	r24, 0x27	; 39
    201a:	18 f0       	brcs	.+6      	; 0x2022 <_Z11ReceiveBonev+0x12a>
    201c:	85 e0       	ldi	r24, 0x05	; 5
    201e:	89 83       	std	Y+1, r24	; 0x01
    2020:	1b 82       	std	Y+3, r1	; 0x03
						state=5;
					} else  {recString[strLoc++]=recChar; state=1;}	
					break;				
					}//end case 0
				case 1:{
					while (noCarriage && flagReceivingBone){	//while there isn't a timeout and no carry
    2022:	8b 81       	ldd	r24, Y+3	; 0x03
    2024:	88 23       	and	r24, r24
    2026:	31 f0       	breq	.+12     	; 0x2034 <_Z11ReceiveBonev+0x13c>
    2028:	80 91 ff 01 	lds	r24, 0x01FF
    202c:	88 23       	and	r24, r24
    202e:	11 f0       	breq	.+4      	; 0x2034 <_Z11ReceiveBonev+0x13c>
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	01 c0       	rjmp	.+2      	; 0x2036 <_Z11ReceiveBonev+0x13e>
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	88 23       	and	r24, r24
    2038:	09 f0       	breq	.+2      	; 0x203c <_Z11ReceiveBonev+0x144>
    203a:	b1 cf       	rjmp	.-158    	; 0x1f9e <_Z11ReceiveBonev+0xa6>
						recString[strLoc++]=recChar;
						if (recChar == '.'){recString[strLoc]='\0'; noCarriage=fFalse; state=2;}
						else if (strLoc >= 39){state=5;noCarriage=fFalse;}
						else; //end if-elseif-else
					}//end while
					break;
    203c:	52 c3       	rjmp	.+1700   	; 0x26e2 <_Z11ReceiveBonev+0x7ea>
					}//end case 0
				case 1:{
					while (noCarriage && flagReceivingBone){	//while there isn't a timeout and no carry
						Wait_ms(50);
						while ((!(UCSR0A & (1 << RXC0))) && flagReceivingBone);		//get the next character
						if (!flagReceivingBone){break;}					//if there was a timeout, break out and reset state
    203e:	00 00       	nop
						recString[strLoc++]=recChar;
						if (recChar == '.'){recString[strLoc]='\0'; noCarriage=fFalse; state=2;}
						else if (strLoc >= 39){state=5;noCarriage=fFalse;}
						else; //end if-elseif-else
					}//end while
					break;
    2040:	50 c3       	rjmp	.+1696   	; 0x26e2 <_Z11ReceiveBonev+0x7ea>
					}//end case 1
				case 2:{
					if (!strncmp(recString,"d.",2)){printTimeDate(fTrue,fFalse,fTrue); state=6;}
    2042:	ce 01       	movw	r24, r28
    2044:	ce 96       	adiw	r24, 0x3e	; 62
    2046:	20 ea       	ldi	r18, 0xA0	; 160
    2048:	31 e0       	ldi	r19, 0x01	; 1
    204a:	b9 01       	movw	r22, r18
    204c:	42 e0       	ldi	r20, 0x02	; 2
    204e:	50 e0       	ldi	r21, 0x00	; 0
    2050:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <strncmp>
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	41 f4       	brne	.+16     	; 0x2068 <_Z11ReceiveBonev+0x170>
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	60 e0       	ldi	r22, 0x00	; 0
    205c:	41 e0       	ldi	r20, 0x01	; 1
    205e:	0e 94 84 13 	call	0x2708	; 0x2708 <_Z13printTimeDatehhh>
    2062:	86 e0       	ldi	r24, 0x06	; 6
    2064:	89 83       	std	Y+1, r24	; 0x01
					else if (!strncmp(recString,"te.",3)){char tempChar[7]; utoa(globalTemp,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
					else if ((recString[2] == ':') != (recString[3] == ':')){//time/date string, go parse in state 7
						state=7;	
					} else if (!strncmp(recString,"N.",2)){PrintBone("N."); state=6;}//NONE time.	
					else {state=5;}						
					break;
    2066:	3d c3       	rjmp	.+1658   	; 0x26e2 <_Z11ReceiveBonev+0x7ea>
					}//end while
					break;
					}//end case 1
				case 2:{
					if (!strncmp(recString,"d.",2)){printTimeDate(fTrue,fFalse,fTrue); state=6;}
					else if (!strncmp(recString,"t.",2)){printTimeDate(fTrue,fTrue,fFalse);state=6;}
    2068:	ce 01       	movw	r24, r28
    206a:	ce 96       	adiw	r24, 0x3e	; 62
    206c:	23 ea       	ldi	r18, 0xA3	; 163
    206e:	31 e0       	ldi	r19, 0x01	; 1
    2070:	b9 01       	movw	r22, r18
    2072:	42 e0       	ldi	r20, 0x02	; 2
    2074:	50 e0       	ldi	r21, 0x00	; 0
    2076:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <strncmp>
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	41 f4       	brne	.+16     	; 0x208e <_Z11ReceiveBonev+0x196>
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	61 e0       	ldi	r22, 0x01	; 1
    2082:	40 e0       	ldi	r20, 0x00	; 0
    2084:	0e 94 84 13 	call	0x2708	; 0x2708 <_Z13printTimeDatehhh>
    2088:	86 e0       	ldi	r24, 0x06	; 6
    208a:	89 83       	std	Y+1, r24	; 0x01
					else if (!strncmp(recString,"te.",3)){char tempChar[7]; utoa(globalTemp,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
					else if ((recString[2] == ':') != (recString[3] == ':')){//time/date string, go parse in state 7
						state=7;	
					} else if (!strncmp(recString,"N.",2)){PrintBone("N."); state=6;}//NONE time.	
					else {state=5;}						
					break;
    208c:	2a c3       	rjmp	.+1620   	; 0x26e2 <_Z11ReceiveBonev+0x7ea>
					break;
					}//end case 1
				case 2:{
					if (!strncmp(recString,"d.",2)){printTimeDate(fTrue,fFalse,fTrue); state=6;}
					else if (!strncmp(recString,"t.",2)){printTimeDate(fTrue,fTrue,fFalse);state=6;}
					else if (!strncmp(recString,"b.",2)){printTimeDate(fTrue,fTrue,fTrue);state=6;}
    208e:	ce 01       	movw	r24, r28
    2090:	ce 96       	adiw	r24, 0x3e	; 62
    2092:	26 ea       	ldi	r18, 0xA6	; 166
    2094:	31 e0       	ldi	r19, 0x01	; 1
    2096:	b9 01       	movw	r22, r18
    2098:	42 e0       	ldi	r20, 0x02	; 2
    209a:	50 e0       	ldi	r21, 0x00	; 0
    209c:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <strncmp>
    20a0:	00 97       	sbiw	r24, 0x00	; 0
    20a2:	41 f4       	brne	.+16     	; 0x20b4 <_Z11ReceiveBonev+0x1bc>
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	61 e0       	ldi	r22, 0x01	; 1
    20a8:	41 e0       	ldi	r20, 0x01	; 1
    20aa:	0e 94 84 13 	call	0x2708	; 0x2708 <_Z13printTimeDatehhh>
    20ae:	86 e0       	ldi	r24, 0x06	; 6
    20b0:	89 83       	std	Y+1, r24	; 0x01
					else if (!strncmp(recString,"te.",3)){char tempChar[7]; utoa(globalTemp,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
					else if ((recString[2] == ':') != (recString[3] == ':')){//time/date string, go parse in state 7
						state=7;	
					} else if (!strncmp(recString,"N.",2)){PrintBone("N."); state=6;}//NONE time.	
					else {state=5;}						
					break;
    20b2:	17 c3       	rjmp	.+1582   	; 0x26e2 <_Z11ReceiveBonev+0x7ea>
					}//end case 1
				case 2:{
					if (!strncmp(recString,"d.",2)){printTimeDate(fTrue,fFalse,fTrue); state=6;}
					else if (!strncmp(recString,"t.",2)){printTimeDate(fTrue,fTrue,fFalse);state=6;}
					else if (!strncmp(recString,"b.",2)){printTimeDate(fTrue,fTrue,fTrue);state=6;}
					else if (!strncmp(recString,"s.",2)){saveDateTime_eeprom(fTrue,fFalse);PrintBone(recString);state=6;}
    20b4:	ce 01       	movw	r24, r28
    20b6:	ce 96       	adiw	r24, 0x3e	; 62
    20b8:	29 ea       	ldi	r18, 0xA9	; 169
    20ba:	31 e0       	ldi	r19, 0x01	; 1
    20bc:	b9 01       	movw	r22, r18
    20be:	42 e0       	ldi	r20, 0x02	; 2
    20c0:	50 e0       	ldi	r21, 0x00	; 0
    20c2:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <strncmp>
    20c6:	00 97       	sbiw	r24, 0x00	; 0
    20c8:	59 f4       	brne	.+22     	; 0x20e0 <_Z11ReceiveBonev+0x1e8>
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	60 e0       	ldi	r22, 0x00	; 0
    20ce:	0e 94 3c 08 	call	0x1078	; 0x1078 <_Z19saveDateTime_eepromhh>
    20d2:	ce 01       	movw	r24, r28
    20d4:	ce 96       	adiw	r24, 0x3e	; 62
    20d6:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
    20da:	86 e0       	ldi	r24, 0x06	; 6
    20dc:	89 83       	std	Y+1, r24	; 0x01
					else if (!strncmp(recString,"te.",3)){char tempChar[7]; utoa(globalTemp,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
					else if ((recString[2] == ':') != (recString[3] == ':')){//time/date string, go parse in state 7
						state=7;	
					} else if (!strncmp(recString,"N.",2)){PrintBone("N."); state=6;}//NONE time.	
					else {state=5;}						
					break;
    20de:	01 c3       	rjmp	.+1538   	; 0x26e2 <_Z11ReceiveBonev+0x7ea>
				case 2:{
					if (!strncmp(recString,"d.",2)){printTimeDate(fTrue,fFalse,fTrue); state=6;}
					else if (!strncmp(recString,"t.",2)){printTimeDate(fTrue,fTrue,fFalse);state=6;}
					else if (!strncmp(recString,"b.",2)){printTimeDate(fTrue,fTrue,fTrue);state=6;}
					else if (!strncmp(recString,"s.",2)){saveDateTime_eeprom(fTrue,fFalse);PrintBone(recString);state=6;}
					else if (!strncmp(recString,"a.",2)){char tempChar[7]; utoa(globalADC,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
    20e0:	ce 01       	movw	r24, r28
    20e2:	ce 96       	adiw	r24, 0x3e	; 62
    20e4:	2c ea       	ldi	r18, 0xAC	; 172
    20e6:	31 e0       	ldi	r19, 0x01	; 1
    20e8:	b9 01       	movw	r22, r18
    20ea:	42 e0       	ldi	r20, 0x02	; 2
    20ec:	50 e0       	ldi	r21, 0x00	; 0
    20ee:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <strncmp>
    20f2:	00 97       	sbiw	r24, 0x00	; 0
    20f4:	a1 f4       	brne	.+40     	; 0x211e <_Z11ReceiveBonev+0x226>
    20f6:	80 91 d2 01 	lds	r24, 0x01D2
    20fa:	90 91 d3 01 	lds	r25, 0x01D3
    20fe:	9e 01       	movw	r18, r28
    2100:	23 5e       	subi	r18, 0xE3	; 227
    2102:	3f 4f       	sbci	r19, 0xFF	; 255
    2104:	b9 01       	movw	r22, r18
    2106:	4a e0       	ldi	r20, 0x0A	; 10
    2108:	50 e0       	ldi	r21, 0x00	; 0
    210a:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <utoa>
    210e:	1b a2       	lds	r17, 0x9b
    2110:	ce 01       	movw	r24, r28
    2112:	4d 96       	adiw	r24, 0x1d	; 29
    2114:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
    2118:	86 e0       	ldi	r24, 0x06	; 6
    211a:	89 83       	std	Y+1, r24	; 0x01
					else if (!strncmp(recString,"te.",3)){char tempChar[7]; utoa(globalTemp,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
					else if ((recString[2] == ':') != (recString[3] == ':')){//time/date string, go parse in state 7
						state=7;	
					} else if (!strncmp(recString,"N.",2)){PrintBone("N."); state=6;}//NONE time.	
					else {state=5;}						
					break;
    211c:	e2 c2       	rjmp	.+1476   	; 0x26e2 <_Z11ReceiveBonev+0x7ea>
					if (!strncmp(recString,"d.",2)){printTimeDate(fTrue,fFalse,fTrue); state=6;}
					else if (!strncmp(recString,"t.",2)){printTimeDate(fTrue,fTrue,fFalse);state=6;}
					else if (!strncmp(recString,"b.",2)){printTimeDate(fTrue,fTrue,fTrue);state=6;}
					else if (!strncmp(recString,"s.",2)){saveDateTime_eeprom(fTrue,fFalse);PrintBone(recString);state=6;}
					else if (!strncmp(recString,"a.",2)){char tempChar[7]; utoa(globalADC,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
					else if (!strncmp(recString,"te.",3)){char tempChar[7]; utoa(globalTemp,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
    211e:	ce 01       	movw	r24, r28
    2120:	ce 96       	adiw	r24, 0x3e	; 62
    2122:	2f ea       	ldi	r18, 0xAF	; 175
    2124:	31 e0       	ldi	r19, 0x01	; 1
    2126:	b9 01       	movw	r22, r18
    2128:	43 e0       	ldi	r20, 0x03	; 3
    212a:	50 e0       	ldi	r21, 0x00	; 0
    212c:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <strncmp>
    2130:	00 97       	sbiw	r24, 0x00	; 0
    2132:	a1 f4       	brne	.+40     	; 0x215c <_Z11ReceiveBonev+0x264>
    2134:	80 91 d4 01 	lds	r24, 0x01D4
    2138:	90 91 d5 01 	lds	r25, 0x01D5
    213c:	9e 01       	movw	r18, r28
    213e:	2c 5d       	subi	r18, 0xDC	; 220
    2140:	3f 4f       	sbci	r19, 0xFF	; 255
    2142:	b9 01       	movw	r22, r18
    2144:	4a e0       	ldi	r20, 0x0A	; 10
    2146:	50 e0       	ldi	r21, 0x00	; 0
    2148:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <utoa>
    214c:	1a a6       	lds	r17, 0xba
    214e:	ce 01       	movw	r24, r28
    2150:	84 96       	adiw	r24, 0x24	; 36
    2152:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
    2156:	86 e0       	ldi	r24, 0x06	; 6
    2158:	89 83       	std	Y+1, r24	; 0x01
					else if ((recString[2] == ':') != (recString[3] == ':')){//time/date string, go parse in state 7
						state=7;	
					} else if (!strncmp(recString,"N.",2)){PrintBone("N."); state=6;}//NONE time.	
					else {state=5;}						
					break;
    215a:	c3 c2       	rjmp	.+1414   	; 0x26e2 <_Z11ReceiveBonev+0x7ea>
					else if (!strncmp(recString,"t.",2)){printTimeDate(fTrue,fTrue,fFalse);state=6;}
					else if (!strncmp(recString,"b.",2)){printTimeDate(fTrue,fTrue,fTrue);state=6;}
					else if (!strncmp(recString,"s.",2)){saveDateTime_eeprom(fTrue,fFalse);PrintBone(recString);state=6;}
					else if (!strncmp(recString,"a.",2)){char tempChar[7]; utoa(globalADC,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
					else if (!strncmp(recString,"te.",3)){char tempChar[7]; utoa(globalTemp,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
					else if ((recString[2] == ':') != (recString[3] == ':')){//time/date string, go parse in state 7
    215c:	ce 01       	movw	r24, r28
    215e:	80 5c       	subi	r24, 0xC0	; 192
    2160:	9f 4f       	sbci	r25, 0xFF	; 255
    2162:	fc 01       	movw	r30, r24
    2164:	80 81       	ld	r24, Z
    2166:	21 e0       	ldi	r18, 0x01	; 1
    2168:	8a 33       	cpi	r24, 0x3A	; 58
    216a:	09 f0       	breq	.+2      	; 0x216e <_Z11ReceiveBonev+0x276>
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	ce 01       	movw	r24, r28
    2170:	8f 5b       	subi	r24, 0xBF	; 191
    2172:	9f 4f       	sbci	r25, 0xFF	; 255
    2174:	fc 01       	movw	r30, r24
    2176:	90 81       	ld	r25, Z
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	9a 33       	cpi	r25, 0x3A	; 58
    217c:	09 f0       	breq	.+2      	; 0x2180 <_Z11ReceiveBonev+0x288>
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	82 27       	eor	r24, r18
    2182:	88 23       	and	r24, r24
    2184:	19 f0       	breq	.+6      	; 0x218c <_Z11ReceiveBonev+0x294>
						state=7;	
    2186:	87 e0       	ldi	r24, 0x07	; 7
    2188:	89 83       	std	Y+1, r24	; 0x01
					} else if (!strncmp(recString,"N.",2)){PrintBone("N."); state=6;}//NONE time.	
					else {state=5;}						
					break;
    218a:	ab c2       	rjmp	.+1366   	; 0x26e2 <_Z11ReceiveBonev+0x7ea>
					else if (!strncmp(recString,"s.",2)){saveDateTime_eeprom(fTrue,fFalse);PrintBone(recString);state=6;}
					else if (!strncmp(recString,"a.",2)){char tempChar[7]; utoa(globalADC,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
					else if (!strncmp(recString,"te.",3)){char tempChar[7]; utoa(globalTemp,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
					else if ((recString[2] == ':') != (recString[3] == ':')){//time/date string, go parse in state 7
						state=7;	
					} else if (!strncmp(recString,"N.",2)){PrintBone("N."); state=6;}//NONE time.	
    218c:	ce 01       	movw	r24, r28
    218e:	ce 96       	adiw	r24, 0x3e	; 62
    2190:	2f e5       	ldi	r18, 0x5F	; 95
    2192:	31 e0       	ldi	r19, 0x01	; 1
    2194:	b9 01       	movw	r22, r18
    2196:	42 e0       	ldi	r20, 0x02	; 2
    2198:	50 e0       	ldi	r21, 0x00	; 0
    219a:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <strncmp>
    219e:	00 97       	sbiw	r24, 0x00	; 0
    21a0:	39 f4       	brne	.+14     	; 0x21b0 <_Z11ReceiveBonev+0x2b8>
    21a2:	8f e5       	ldi	r24, 0x5F	; 95
    21a4:	91 e0       	ldi	r25, 0x01	; 1
    21a6:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
    21aa:	86 e0       	ldi	r24, 0x06	; 6
    21ac:	89 83       	std	Y+1, r24	; 0x01
					else {state=5;}						
					break;
    21ae:	99 c2       	rjmp	.+1330   	; 0x26e2 <_Z11ReceiveBonev+0x7ea>
					else if (!strncmp(recString,"a.",2)){char tempChar[7]; utoa(globalADC,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
					else if (!strncmp(recString,"te.",3)){char tempChar[7]; utoa(globalTemp,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);state=6;}
					else if ((recString[2] == ':') != (recString[3] == ':')){//time/date string, go parse in state 7
						state=7;	
					} else if (!strncmp(recString,"N.",2)){PrintBone("N."); state=6;}//NONE time.	
					else {state=5;}						
    21b0:	85 e0       	ldi	r24, 0x05	; 5
    21b2:	89 83       	std	Y+1, r24	; 0x01
					break;
    21b4:	96 c2       	rjmp	.+1324   	; 0x26e2 <_Z11ReceiveBonev+0x7ea>
					}//end case 2
				case 3:{
					//Successful receive state of time, change SYN to ACK, then print what we got.
					recString[0]='A';
    21b6:	81 e4       	ldi	r24, 0x41	; 65
    21b8:	8e af       	sts	0x7e, r24
					PrintBone(recString);
    21ba:	ce 01       	movw	r24, r28
    21bc:	ce 96       	adiw	r24, 0x3e	; 62
    21be:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
					state=0;
    21c2:	19 82       	std	Y+1, r1	; 0x01
					flagReceivingBone=fFalse;
    21c4:	10 92 ff 01 	sts	0x01FF, r1
					for (int i=0; i<strLoc; i++){recString[i]=NULL;}
    21c8:	1d 82       	std	Y+5, r1	; 0x05
    21ca:	1c 82       	std	Y+4, r1	; 0x04
    21cc:	0e c0       	rjmp	.+28     	; 0x21ea <_Z11ReceiveBonev+0x2f2>
    21ce:	9e 01       	movw	r18, r28
    21d0:	22 5c       	subi	r18, 0xC2	; 194
    21d2:	3f 4f       	sbci	r19, 0xFF	; 255
    21d4:	8c 81       	ldd	r24, Y+4	; 0x04
    21d6:	9d 81       	ldd	r25, Y+5	; 0x05
    21d8:	82 0f       	add	r24, r18
    21da:	93 1f       	adc	r25, r19
    21dc:	fc 01       	movw	r30, r24
    21de:	10 82       	st	Z, r1
    21e0:	8c 81       	ldd	r24, Y+4	; 0x04
    21e2:	9d 81       	ldd	r25, Y+5	; 0x05
    21e4:	01 96       	adiw	r24, 0x01	; 1
    21e6:	9d 83       	std	Y+5, r25	; 0x05
    21e8:	8c 83       	std	Y+4, r24	; 0x04
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	28 2f       	mov	r18, r24
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	41 e0       	ldi	r20, 0x01	; 1
    21f2:	8c 81       	ldd	r24, Y+4	; 0x04
    21f4:	9d 81       	ldd	r25, Y+5	; 0x05
    21f6:	82 17       	cp	r24, r18
    21f8:	93 07       	cpc	r25, r19
    21fa:	0c f0       	brlt	.+2      	; 0x21fe <_Z11ReceiveBonev+0x306>
    21fc:	40 e0       	ldi	r20, 0x00	; 0
    21fe:	44 23       	and	r20, r20
    2200:	31 f7       	brne	.-52     	; 0x21ce <_Z11ReceiveBonev+0x2d6>
					break;
    2202:	6f c2       	rjmp	.+1246   	; 0x26e2 <_Z11ReceiveBonev+0x7ea>
					}//end case 3
				case 4:{
					//Bad time string.
					PrintBone("B.");
    2204:	82 e1       	ldi	r24, 0x12	; 18
    2206:	91 e0       	ldi	r25, 0x01	; 1
    2208:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
					flagReceivingBone=fFalse;
    220c:	10 92 ff 01 	sts	0x01FF, r1
					for (int i=0; i<strLoc; i++){recString[i]=NULL;}
    2210:	1f 82       	std	Y+7, r1	; 0x07
    2212:	1e 82       	std	Y+6, r1	; 0x06
    2214:	0e c0       	rjmp	.+28     	; 0x2232 <_Z11ReceiveBonev+0x33a>
    2216:	9e 01       	movw	r18, r28
    2218:	22 5c       	subi	r18, 0xC2	; 194
    221a:	3f 4f       	sbci	r19, 0xFF	; 255
    221c:	8e 81       	ldd	r24, Y+6	; 0x06
    221e:	9f 81       	ldd	r25, Y+7	; 0x07
    2220:	82 0f       	add	r24, r18
    2222:	93 1f       	adc	r25, r19
    2224:	fc 01       	movw	r30, r24
    2226:	10 82       	st	Z, r1
    2228:	8e 81       	ldd	r24, Y+6	; 0x06
    222a:	9f 81       	ldd	r25, Y+7	; 0x07
    222c:	01 96       	adiw	r24, 0x01	; 1
    222e:	9f 83       	std	Y+7, r25	; 0x07
    2230:	8e 83       	std	Y+6, r24	; 0x06
    2232:	8a 81       	ldd	r24, Y+2	; 0x02
    2234:	28 2f       	mov	r18, r24
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	41 e0       	ldi	r20, 0x01	; 1
    223a:	8e 81       	ldd	r24, Y+6	; 0x06
    223c:	9f 81       	ldd	r25, Y+7	; 0x07
    223e:	82 17       	cp	r24, r18
    2240:	93 07       	cpc	r25, r19
    2242:	0c f0       	brlt	.+2      	; 0x2246 <_Z11ReceiveBonev+0x34e>
    2244:	40 e0       	ldi	r20, 0x00	; 0
    2246:	44 23       	and	r20, r20
    2248:	31 f7       	brne	.-52     	; 0x2216 <_Z11ReceiveBonev+0x31e>
					state=0;
    224a:	19 82       	std	Y+1, r1	; 0x01
					break;
    224c:	4a c2       	rjmp	.+1172   	; 0x26e2 <_Z11ReceiveBonev+0x7ea>
					}//end case 4
				case 5:{
					//Didn't get a good ack or there was an error.
					PrintBone("E.");
    224e:	85 e9       	ldi	r24, 0x95	; 149
    2250:	91 e0       	ldi	r25, 0x01	; 1
    2252:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
					PrintBone(recString);
    2256:	ce 01       	movw	r24, r28
    2258:	ce 96       	adiw	r24, 0x3e	; 62
    225a:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
					flagReceivingBone=fFalse;
    225e:	10 92 ff 01 	sts	0x01FF, r1
					for (int i=0; i<strLoc; i++){recString[i]=NULL;}
    2262:	19 86       	std	Y+9, r1	; 0x09
    2264:	18 86       	std	Y+8, r1	; 0x08
    2266:	0e c0       	rjmp	.+28     	; 0x2284 <_Z11ReceiveBonev+0x38c>
    2268:	9e 01       	movw	r18, r28
    226a:	22 5c       	subi	r18, 0xC2	; 194
    226c:	3f 4f       	sbci	r19, 0xFF	; 255
    226e:	88 85       	ldd	r24, Y+8	; 0x08
    2270:	99 85       	ldd	r25, Y+9	; 0x09
    2272:	82 0f       	add	r24, r18
    2274:	93 1f       	adc	r25, r19
    2276:	fc 01       	movw	r30, r24
    2278:	10 82       	st	Z, r1
    227a:	88 85       	ldd	r24, Y+8	; 0x08
    227c:	99 85       	ldd	r25, Y+9	; 0x09
    227e:	01 96       	adiw	r24, 0x01	; 1
    2280:	99 87       	std	Y+9, r25	; 0x09
    2282:	88 87       	std	Y+8, r24	; 0x08
    2284:	8a 81       	ldd	r24, Y+2	; 0x02
    2286:	28 2f       	mov	r18, r24
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	41 e0       	ldi	r20, 0x01	; 1
    228c:	88 85       	ldd	r24, Y+8	; 0x08
    228e:	99 85       	ldd	r25, Y+9	; 0x09
    2290:	82 17       	cp	r24, r18
    2292:	93 07       	cpc	r25, r19
    2294:	0c f0       	brlt	.+2      	; 0x2298 <_Z11ReceiveBonev+0x3a0>
    2296:	40 e0       	ldi	r20, 0x00	; 0
    2298:	44 23       	and	r20, r20
    229a:	31 f7       	brne	.-52     	; 0x2268 <_Z11ReceiveBonev+0x370>
					state=0;
    229c:	19 82       	std	Y+1, r1	; 0x01
					break;
    229e:	21 c2       	rjmp	.+1090   	; 0x26e2 <_Z11ReceiveBonev+0x7ea>
					}//end case 5
				case 6:{
					//Graceful exit.
					flagReceivingBone=fFalse;
    22a0:	10 92 ff 01 	sts	0x01FF, r1
					for (int i=0; i<strLoc; i++){recString[i]=NULL;}
    22a4:	1b 86       	std	Y+11, r1	; 0x0b
    22a6:	1a 86       	std	Y+10, r1	; 0x0a
    22a8:	0e c0       	rjmp	.+28     	; 0x22c6 <_Z11ReceiveBonev+0x3ce>
    22aa:	9e 01       	movw	r18, r28
    22ac:	22 5c       	subi	r18, 0xC2	; 194
    22ae:	3f 4f       	sbci	r19, 0xFF	; 255
    22b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    22b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    22b4:	82 0f       	add	r24, r18
    22b6:	93 1f       	adc	r25, r19
    22b8:	fc 01       	movw	r30, r24
    22ba:	10 82       	st	Z, r1
    22bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    22be:	9b 85       	ldd	r25, Y+11	; 0x0b
    22c0:	01 96       	adiw	r24, 0x01	; 1
    22c2:	9b 87       	std	Y+11, r25	; 0x0b
    22c4:	8a 87       	std	Y+10, r24	; 0x0a
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	28 2f       	mov	r18, r24
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	41 e0       	ldi	r20, 0x01	; 1
    22ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    22d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    22d2:	82 17       	cp	r24, r18
    22d4:	93 07       	cpc	r25, r19
    22d6:	0c f0       	brlt	.+2      	; 0x22da <_Z11ReceiveBonev+0x3e2>
    22d8:	40 e0       	ldi	r20, 0x00	; 0
    22da:	44 23       	and	r20, r20
    22dc:	31 f7       	brne	.-52     	; 0x22aa <_Z11ReceiveBonev+0x3b2>
					state=0;
    22de:	19 82       	std	Y+1, r1	; 0x01
					break;
    22e0:	00 c2       	rjmp	.+1024   	; 0x26e2 <_Z11ReceiveBonev+0x7ea>
					}//end case 6
				case 7:{
					cli();
    22e2:	f8 94       	cli
					//Parse the string
					//Go through the string and parse for the time. Must go through the time to get the date.
					BOOL successTime=fFalse, successDate=fFalse;			//whether or not we have successfully parsed string
    22e4:	1c 86       	std	Y+12, r1	; 0x0c
    22e6:	1d 86       	std	Y+13, r1	; 0x0d
					int counter=1;
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	9f 87       	std	Y+15, r25	; 0x0f
    22ee:	8e 87       	std	Y+14, r24	; 0x0e
					int tempNum[3]={0,0,0}, tempNum1[3]={0,0,0},dmy=0, hms=0, placement=0;
    22f0:	1c a6       	lds	r17, 0xbc
    22f2:	1b a6       	lds	r17, 0xbb
    22f4:	1e a6       	lds	r17, 0xbe
    22f6:	1d a6       	lds	r17, 0xbd
    22f8:	18 aa       	sts	0x98, r17
    22fa:	1f a6       	lds	r17, 0xbf
    22fc:	1a aa       	sts	0x9a, r17
    22fe:	19 aa       	sts	0x99, r17
    2300:	1c aa       	sts	0x9c, r17
    2302:	1b aa       	sts	0x9b, r17
    2304:	1e aa       	sts	0x9e, r17
    2306:	1d aa       	sts	0x9d, r17
    2308:	19 8a       	std	Y+17, r1	; 0x11
    230a:	18 8a       	std	Y+16, r1	; 0x10
    230c:	1b 8a       	std	Y+19, r1	; 0x13
    230e:	1a 8a       	std	Y+18, r1	; 0x12
    2310:	1d 8a       	std	Y+21, r1	; 0x15
    2312:	1c 8a       	std	Y+20, r1	; 0x14
					char tempStringNum[7];
					
					//Parse the string for the time. Always looks for the time. If not end of string or '/' indicating start of date, continue
					while (recString[counter] != '/' && recString[counter] != '\0'){
    2314:	73 c0       	rjmp	.+230    	; 0x23fc <_Z11ReceiveBonev+0x504>
						//If the character isn't a colon, we haven't gotten 3 int values add to tempStringNum
						if (recString[counter]!=':' && hms<3){
    2316:	9e 01       	movw	r18, r28
    2318:	22 5c       	subi	r18, 0xC2	; 194
    231a:	3f 4f       	sbci	r19, 0xFF	; 255
    231c:	8e 85       	ldd	r24, Y+14	; 0x0e
    231e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2320:	82 0f       	add	r24, r18
    2322:	93 1f       	adc	r25, r19
    2324:	fc 01       	movw	r30, r24
    2326:	80 81       	ld	r24, Z
    2328:	8a 33       	cpi	r24, 0x3A	; 58
    232a:	e9 f0       	breq	.+58     	; 0x2366 <_Z11ReceiveBonev+0x46e>
    232c:	8a 89       	ldd	r24, Y+18	; 0x12
    232e:	9b 89       	ldd	r25, Y+19	; 0x13
    2330:	83 30       	cpi	r24, 0x03	; 3
    2332:	91 05       	cpc	r25, r1
    2334:	c4 f4       	brge	.+48     	; 0x2366 <_Z11ReceiveBonev+0x46e>
							tempStringNum[placement++]=recString[counter];
    2336:	9e 01       	movw	r18, r28
    2338:	22 5c       	subi	r18, 0xC2	; 194
    233a:	3f 4f       	sbci	r19, 0xFF	; 255
    233c:	8e 85       	ldd	r24, Y+14	; 0x0e
    233e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2340:	82 0f       	add	r24, r18
    2342:	93 1f       	adc	r25, r19
    2344:	fc 01       	movw	r30, r24
    2346:	40 81       	ld	r20, Z
    2348:	9e 01       	movw	r18, r28
    234a:	29 5c       	subi	r18, 0xC9	; 201
    234c:	3f 4f       	sbci	r19, 0xFF	; 255
    234e:	8c 89       	ldd	r24, Y+20	; 0x14
    2350:	9d 89       	ldd	r25, Y+21	; 0x15
    2352:	82 0f       	add	r24, r18
    2354:	93 1f       	adc	r25, r19
    2356:	fc 01       	movw	r30, r24
    2358:	40 83       	st	Z, r20
    235a:	8c 89       	ldd	r24, Y+20	; 0x14
    235c:	9d 89       	ldd	r25, Y+21	; 0x15
    235e:	01 96       	adiw	r24, 0x01	; 1
    2360:	9d 8b       	std	Y+21, r25	; 0x15
    2362:	8c 8b       	std	Y+20, r24	; 0x14
    2364:	46 c0       	rjmp	.+140    	; 0x23f2 <_Z11ReceiveBonev+0x4fa>
						//If haven't gotten 3 int's and character is colon, store int(stringNum) into tempNum[<current time param>]
						} else if (hms<2 && recString[counter] == ':') {
    2366:	8a 89       	ldd	r24, Y+18	; 0x12
    2368:	9b 89       	ldd	r25, Y+19	; 0x13
    236a:	82 30       	cpi	r24, 0x02	; 2
    236c:	91 05       	cpc	r25, r1
    236e:	0c f0       	brlt	.+2      	; 0x2372 <_Z11ReceiveBonev+0x47a>
    2370:	40 c0       	rjmp	.+128    	; 0x23f2 <_Z11ReceiveBonev+0x4fa>
    2372:	9e 01       	movw	r18, r28
    2374:	22 5c       	subi	r18, 0xC2	; 194
    2376:	3f 4f       	sbci	r19, 0xFF	; 255
    2378:	8e 85       	ldd	r24, Y+14	; 0x0e
    237a:	9f 85       	ldd	r25, Y+15	; 0x0f
    237c:	82 0f       	add	r24, r18
    237e:	93 1f       	adc	r25, r19
    2380:	fc 01       	movw	r30, r24
    2382:	80 81       	ld	r24, Z
    2384:	8a 33       	cpi	r24, 0x3A	; 58
    2386:	a9 f5       	brne	.+106    	; 0x23f2 <_Z11ReceiveBonev+0x4fa>
							tempNum[hms++] = atoi(tempStringNum);
    2388:	ce 01       	movw	r24, r28
    238a:	c7 96       	adiw	r24, 0x37	; 55
    238c:	0e 94 cd 1c 	call	0x399a	; 0x399a <atoi>
    2390:	9c 01       	movw	r18, r24
    2392:	8a 89       	ldd	r24, Y+18	; 0x12
    2394:	9b 89       	ldd	r25, Y+19	; 0x13
    2396:	88 0f       	add	r24, r24
    2398:	99 1f       	adc	r25, r25
    239a:	ae 01       	movw	r20, r28
    239c:	4f 5f       	subi	r20, 0xFF	; 255
    239e:	5f 4f       	sbci	r21, 0xFF	; 255
    23a0:	84 0f       	add	r24, r20
    23a2:	95 1f       	adc	r25, r21
    23a4:	8a 96       	adiw	r24, 0x2a	; 42
    23a6:	fc 01       	movw	r30, r24
    23a8:	31 83       	std	Z+1, r19	; 0x01
    23aa:	20 83       	st	Z, r18
    23ac:	8a 89       	ldd	r24, Y+18	; 0x12
    23ae:	9b 89       	ldd	r25, Y+19	; 0x13
    23b0:	01 96       	adiw	r24, 0x01	; 1
    23b2:	9b 8b       	std	Y+19, r25	; 0x13
    23b4:	8a 8b       	std	Y+18, r24	; 0x12
							for (int j=0; j <= placement; j++){tempStringNum[j]=(char)NULL;}	//reset the string
    23b6:	1f 8a       	std	Y+23, r1	; 0x17
    23b8:	1e 8a       	std	Y+22, r1	; 0x16
    23ba:	0e c0       	rjmp	.+28     	; 0x23d8 <_Z11ReceiveBonev+0x4e0>
    23bc:	9e 01       	movw	r18, r28
    23be:	29 5c       	subi	r18, 0xC9	; 201
    23c0:	3f 4f       	sbci	r19, 0xFF	; 255
    23c2:	8e 89       	ldd	r24, Y+22	; 0x16
    23c4:	9f 89       	ldd	r25, Y+23	; 0x17
    23c6:	82 0f       	add	r24, r18
    23c8:	93 1f       	adc	r25, r19
    23ca:	fc 01       	movw	r30, r24
    23cc:	10 82       	st	Z, r1
    23ce:	8e 89       	ldd	r24, Y+22	; 0x16
    23d0:	9f 89       	ldd	r25, Y+23	; 0x17
    23d2:	01 96       	adiw	r24, 0x01	; 1
    23d4:	9f 8b       	std	Y+23, r25	; 0x17
    23d6:	8e 8b       	std	Y+22, r24	; 0x16
    23d8:	41 e0       	ldi	r20, 0x01	; 1
    23da:	2e 89       	ldd	r18, Y+22	; 0x16
    23dc:	3f 89       	ldd	r19, Y+23	; 0x17
    23de:	8c 89       	ldd	r24, Y+20	; 0x14
    23e0:	9d 89       	ldd	r25, Y+21	; 0x15
    23e2:	82 17       	cp	r24, r18
    23e4:	93 07       	cpc	r25, r19
    23e6:	0c f4       	brge	.+2      	; 0x23ea <_Z11ReceiveBonev+0x4f2>
    23e8:	40 e0       	ldi	r20, 0x00	; 0
    23ea:	44 23       	and	r20, r20
    23ec:	39 f7       	brne	.-50     	; 0x23bc <_Z11ReceiveBonev+0x4c4>
							placement=0;												//reset placement
    23ee:	1d 8a       	std	Y+21, r1	; 0x15
    23f0:	1c 8a       	std	Y+20, r1	; 0x14
						//If nothing else, somethign is wrong but it won't matter because we'll eventually hit \0 and exit with ACKBAD
						} else;
						counter++;
    23f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    23f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    23f6:	01 96       	adiw	r24, 0x01	; 1
    23f8:	9f 87       	std	Y+15, r25	; 0x0f
    23fa:	8e 87       	std	Y+14, r24	; 0x0e
					int counter=1;
					int tempNum[3]={0,0,0}, tempNum1[3]={0,0,0},dmy=0, hms=0, placement=0;
					char tempStringNum[7];
					
					//Parse the string for the time. Always looks for the time. If not end of string or '/' indicating start of date, continue
					while (recString[counter] != '/' && recString[counter] != '\0'){
    23fc:	9e 01       	movw	r18, r28
    23fe:	22 5c       	subi	r18, 0xC2	; 194
    2400:	3f 4f       	sbci	r19, 0xFF	; 255
    2402:	8e 85       	ldd	r24, Y+14	; 0x0e
    2404:	9f 85       	ldd	r25, Y+15	; 0x0f
    2406:	82 0f       	add	r24, r18
    2408:	93 1f       	adc	r25, r19
    240a:	fc 01       	movw	r30, r24
    240c:	80 81       	ld	r24, Z
    240e:	8f 32       	cpi	r24, 0x2F	; 47
    2410:	69 f0       	breq	.+26     	; 0x242c <_Z11ReceiveBonev+0x534>
    2412:	9e 01       	movw	r18, r28
    2414:	22 5c       	subi	r18, 0xC2	; 194
    2416:	3f 4f       	sbci	r19, 0xFF	; 255
    2418:	8e 85       	ldd	r24, Y+14	; 0x0e
    241a:	9f 85       	ldd	r25, Y+15	; 0x0f
    241c:	82 0f       	add	r24, r18
    241e:	93 1f       	adc	r25, r19
    2420:	fc 01       	movw	r30, r24
    2422:	80 81       	ld	r24, Z
    2424:	88 23       	and	r24, r24
    2426:	11 f0       	breq	.+4      	; 0x242c <_Z11ReceiveBonev+0x534>
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	01 c0       	rjmp	.+2      	; 0x242e <_Z11ReceiveBonev+0x536>
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	88 23       	and	r24, r24
    2430:	09 f0       	breq	.+2      	; 0x2434 <_Z11ReceiveBonev+0x53c>
    2432:	71 cf       	rjmp	.-286    	; 0x2316 <_Z11ReceiveBonev+0x41e>
						//If nothing else, somethign is wrong but it won't matter because we'll eventually hit \0 and exit with ACKBAD
						} else;
						counter++;
					}//end while
					//Found a '/', assign tempNum otherwise exit with ACKBAD
					if (recString[counter] == '/'){
    2434:	9e 01       	movw	r18, r28
    2436:	22 5c       	subi	r18, 0xC2	; 194
    2438:	3f 4f       	sbci	r19, 0xFF	; 255
    243a:	8e 85       	ldd	r24, Y+14	; 0x0e
    243c:	9f 85       	ldd	r25, Y+15	; 0x0f
    243e:	82 0f       	add	r24, r18
    2440:	93 1f       	adc	r25, r19
    2442:	fc 01       	movw	r30, r24
    2444:	80 81       	ld	r24, Z
    2446:	8f 32       	cpi	r24, 0x2F	; 47
    2448:	a9 f4       	brne	.+42     	; 0x2474 <_Z11ReceiveBonev+0x57c>
						tempNum[hms] = atoi(tempStringNum);
    244a:	ce 01       	movw	r24, r28
    244c:	c7 96       	adiw	r24, 0x37	; 55
    244e:	0e 94 cd 1c 	call	0x399a	; 0x399a <atoi>
    2452:	9c 01       	movw	r18, r24
    2454:	8a 89       	ldd	r24, Y+18	; 0x12
    2456:	9b 89       	ldd	r25, Y+19	; 0x13
    2458:	88 0f       	add	r24, r24
    245a:	99 1f       	adc	r25, r25
    245c:	ae 01       	movw	r20, r28
    245e:	4f 5f       	subi	r20, 0xFF	; 255
    2460:	5f 4f       	sbci	r21, 0xFF	; 255
    2462:	84 0f       	add	r24, r20
    2464:	95 1f       	adc	r25, r21
    2466:	8a 96       	adiw	r24, 0x2a	; 42
    2468:	fc 01       	movw	r30, r24
    246a:	31 83       	std	Z+1, r19	; 0x01
    246c:	20 83       	st	Z, r18
						successTime=fTrue;
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	8c 87       	std	Y+12, r24	; 0x0c
    2472:	02 c0       	rjmp	.+4      	; 0x2478 <_Z11ReceiveBonev+0x580>
					} else {
						state=4;
    2474:	84 e0       	ldi	r24, 0x04	; 4
    2476:	89 83       	std	Y+1, r24	; 0x01
					}
					
					//If flag for Date is set, then parse the string and do something with it.
					//Now get the date. have to null the tempStringNum
					for (int j=0; j <= placement; j++){tempStringNum[j]=NULL;}	//reset the string
    2478:	19 8e       	std	Y+25, r1	; 0x19
    247a:	18 8e       	std	Y+24, r1	; 0x18
    247c:	0e c0       	rjmp	.+28     	; 0x249a <_Z11ReceiveBonev+0x5a2>
    247e:	9e 01       	movw	r18, r28
    2480:	29 5c       	subi	r18, 0xC9	; 201
    2482:	3f 4f       	sbci	r19, 0xFF	; 255
    2484:	88 8d       	ldd	r24, Y+24	; 0x18
    2486:	99 8d       	ldd	r25, Y+25	; 0x19
    2488:	82 0f       	add	r24, r18
    248a:	93 1f       	adc	r25, r19
    248c:	fc 01       	movw	r30, r24
    248e:	10 82       	st	Z, r1
    2490:	88 8d       	ldd	r24, Y+24	; 0x18
    2492:	99 8d       	ldd	r25, Y+25	; 0x19
    2494:	01 96       	adiw	r24, 0x01	; 1
    2496:	99 8f       	std	Y+25, r25	; 0x19
    2498:	88 8f       	std	Y+24, r24	; 0x18
    249a:	41 e0       	ldi	r20, 0x01	; 1
    249c:	28 8d       	ldd	r18, Y+24	; 0x18
    249e:	39 8d       	ldd	r19, Y+25	; 0x19
    24a0:	8c 89       	ldd	r24, Y+20	; 0x14
    24a2:	9d 89       	ldd	r25, Y+21	; 0x15
    24a4:	82 17       	cp	r24, r18
    24a6:	93 07       	cpc	r25, r19
    24a8:	0c f4       	brge	.+2      	; 0x24ac <_Z11ReceiveBonev+0x5b4>
    24aa:	40 e0       	ldi	r20, 0x00	; 0
    24ac:	44 23       	and	r20, r20
    24ae:	39 f7       	brne	.-50     	; 0x247e <_Z11ReceiveBonev+0x586>
					placement=0;
    24b0:	1d 8a       	std	Y+21, r1	; 0x15
    24b2:	1c 8a       	std	Y+20, r1	; 0x14
					counter++;	//get past the '/'
    24b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    24b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    24b8:	01 96       	adiw	r24, 0x01	; 1
    24ba:	9f 87       	std	Y+15, r25	; 0x0f
    24bc:	8e 87       	std	Y+14, r24	; 0x0e
					
					//Loop through the string. If not end of file and counter isn't end of string, and not terminator '.', continue
					while (recString[counter] != '.' && recString[counter] != '\0' && counter != strLoc){
    24be:	73 c0       	rjmp	.+230    	; 0x25a6 <_Z11ReceiveBonev+0x6ae>
						//If char isn't sepaerator or end of string of dmy has been hit, add to buffer
						if  (recString[counter] != ',' && dmy < 3){
    24c0:	9e 01       	movw	r18, r28
    24c2:	22 5c       	subi	r18, 0xC2	; 194
    24c4:	3f 4f       	sbci	r19, 0xFF	; 255
    24c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    24c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    24ca:	82 0f       	add	r24, r18
    24cc:	93 1f       	adc	r25, r19
    24ce:	fc 01       	movw	r30, r24
    24d0:	80 81       	ld	r24, Z
    24d2:	8c 32       	cpi	r24, 0x2C	; 44
    24d4:	e9 f0       	breq	.+58     	; 0x2510 <_Z11ReceiveBonev+0x618>
    24d6:	88 89       	ldd	r24, Y+16	; 0x10
    24d8:	99 89       	ldd	r25, Y+17	; 0x11
    24da:	83 30       	cpi	r24, 0x03	; 3
    24dc:	91 05       	cpc	r25, r1
    24de:	c4 f4       	brge	.+48     	; 0x2510 <_Z11ReceiveBonev+0x618>
							tempStringNum[placement++]=recString[counter];
    24e0:	9e 01       	movw	r18, r28
    24e2:	22 5c       	subi	r18, 0xC2	; 194
    24e4:	3f 4f       	sbci	r19, 0xFF	; 255
    24e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    24e8:	9f 85       	ldd	r25, Y+15	; 0x0f
    24ea:	82 0f       	add	r24, r18
    24ec:	93 1f       	adc	r25, r19
    24ee:	fc 01       	movw	r30, r24
    24f0:	40 81       	ld	r20, Z
    24f2:	9e 01       	movw	r18, r28
    24f4:	29 5c       	subi	r18, 0xC9	; 201
    24f6:	3f 4f       	sbci	r19, 0xFF	; 255
    24f8:	8c 89       	ldd	r24, Y+20	; 0x14
    24fa:	9d 89       	ldd	r25, Y+21	; 0x15
    24fc:	82 0f       	add	r24, r18
    24fe:	93 1f       	adc	r25, r19
    2500:	fc 01       	movw	r30, r24
    2502:	40 83       	st	Z, r20
    2504:	8c 89       	ldd	r24, Y+20	; 0x14
    2506:	9d 89       	ldd	r25, Y+21	; 0x15
    2508:	01 96       	adiw	r24, 0x01	; 1
    250a:	9d 8b       	std	Y+21, r25	; 0x15
    250c:	8c 8b       	std	Y+20, r24	; 0x14
    250e:	46 c0       	rjmp	.+140    	; 0x259c <_Z11ReceiveBonev+0x6a4>
						//If a comma was found, need to store that sucker in the tempNum1[x]. dmy needs to be 0 or 1 aka month or day.
						} else if (dmy<2 && recString[counter]==','){
    2510:	88 89       	ldd	r24, Y+16	; 0x10
    2512:	99 89       	ldd	r25, Y+17	; 0x11
    2514:	82 30       	cpi	r24, 0x02	; 2
    2516:	91 05       	cpc	r25, r1
    2518:	0c f0       	brlt	.+2      	; 0x251c <_Z11ReceiveBonev+0x624>
    251a:	40 c0       	rjmp	.+128    	; 0x259c <_Z11ReceiveBonev+0x6a4>
    251c:	9e 01       	movw	r18, r28
    251e:	22 5c       	subi	r18, 0xC2	; 194
    2520:	3f 4f       	sbci	r19, 0xFF	; 255
    2522:	8e 85       	ldd	r24, Y+14	; 0x0e
    2524:	9f 85       	ldd	r25, Y+15	; 0x0f
    2526:	82 0f       	add	r24, r18
    2528:	93 1f       	adc	r25, r19
    252a:	fc 01       	movw	r30, r24
    252c:	80 81       	ld	r24, Z
    252e:	8c 32       	cpi	r24, 0x2C	; 44
    2530:	a9 f5       	brne	.+106    	; 0x259c <_Z11ReceiveBonev+0x6a4>
							tempNum1[dmy++] = atoi(tempStringNum);
    2532:	ce 01       	movw	r24, r28
    2534:	c7 96       	adiw	r24, 0x37	; 55
    2536:	0e 94 cd 1c 	call	0x399a	; 0x399a <atoi>
    253a:	9c 01       	movw	r18, r24
    253c:	88 89       	ldd	r24, Y+16	; 0x10
    253e:	99 89       	ldd	r25, Y+17	; 0x11
    2540:	88 0f       	add	r24, r24
    2542:	99 1f       	adc	r25, r25
    2544:	ae 01       	movw	r20, r28
    2546:	4f 5f       	subi	r20, 0xFF	; 255
    2548:	5f 4f       	sbci	r21, 0xFF	; 255
    254a:	84 0f       	add	r24, r20
    254c:	95 1f       	adc	r25, r21
    254e:	c0 96       	adiw	r24, 0x30	; 48
    2550:	fc 01       	movw	r30, r24
    2552:	31 83       	std	Z+1, r19	; 0x01
    2554:	20 83       	st	Z, r18
    2556:	88 89       	ldd	r24, Y+16	; 0x10
    2558:	99 89       	ldd	r25, Y+17	; 0x11
    255a:	01 96       	adiw	r24, 0x01	; 1
    255c:	99 8b       	std	Y+17, r25	; 0x11
    255e:	88 8b       	std	Y+16, r24	; 0x10
							for (int j=0; j <= placement; j++){tempStringNum[j]=NULL;}
    2560:	1b 8e       	std	Y+27, r1	; 0x1b
    2562:	1a 8e       	std	Y+26, r1	; 0x1a
    2564:	0e c0       	rjmp	.+28     	; 0x2582 <_Z11ReceiveBonev+0x68a>
    2566:	9e 01       	movw	r18, r28
    2568:	29 5c       	subi	r18, 0xC9	; 201
    256a:	3f 4f       	sbci	r19, 0xFF	; 255
    256c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    256e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2570:	82 0f       	add	r24, r18
    2572:	93 1f       	adc	r25, r19
    2574:	fc 01       	movw	r30, r24
    2576:	10 82       	st	Z, r1
    2578:	8a 8d       	ldd	r24, Y+26	; 0x1a
    257a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    257c:	01 96       	adiw	r24, 0x01	; 1
    257e:	9b 8f       	std	Y+27, r25	; 0x1b
    2580:	8a 8f       	std	Y+26, r24	; 0x1a
    2582:	41 e0       	ldi	r20, 0x01	; 1
    2584:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2586:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2588:	8c 89       	ldd	r24, Y+20	; 0x14
    258a:	9d 89       	ldd	r25, Y+21	; 0x15
    258c:	82 17       	cp	r24, r18
    258e:	93 07       	cpc	r25, r19
    2590:	0c f4       	brge	.+2      	; 0x2594 <_Z11ReceiveBonev+0x69c>
    2592:	40 e0       	ldi	r20, 0x00	; 0
    2594:	44 23       	and	r20, r20
    2596:	39 f7       	brne	.-50     	; 0x2566 <_Z11ReceiveBonev+0x66e>
							placement=0;
    2598:	1d 8a       	std	Y+21, r1	; 0x15
    259a:	1c 8a       	std	Y+20, r1	; 0x14
						} else;
						counter++;							
    259c:	8e 85       	ldd	r24, Y+14	; 0x0e
    259e:	9f 85       	ldd	r25, Y+15	; 0x0f
    25a0:	01 96       	adiw	r24, 0x01	; 1
    25a2:	9f 87       	std	Y+15, r25	; 0x0f
    25a4:	8e 87       	std	Y+14, r24	; 0x0e
					for (int j=0; j <= placement; j++){tempStringNum[j]=NULL;}	//reset the string
					placement=0;
					counter++;	//get past the '/'
					
					//Loop through the string. If not end of file and counter isn't end of string, and not terminator '.', continue
					while (recString[counter] != '.' && recString[counter] != '\0' && counter != strLoc){
    25a6:	9e 01       	movw	r18, r28
    25a8:	22 5c       	subi	r18, 0xC2	; 194
    25aa:	3f 4f       	sbci	r19, 0xFF	; 255
    25ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    25ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    25b0:	82 0f       	add	r24, r18
    25b2:	93 1f       	adc	r25, r19
    25b4:	fc 01       	movw	r30, r24
    25b6:	80 81       	ld	r24, Z
    25b8:	8e 32       	cpi	r24, 0x2E	; 46
    25ba:	a9 f0       	breq	.+42     	; 0x25e6 <_Z11ReceiveBonev+0x6ee>
    25bc:	9e 01       	movw	r18, r28
    25be:	22 5c       	subi	r18, 0xC2	; 194
    25c0:	3f 4f       	sbci	r19, 0xFF	; 255
    25c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    25c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    25c6:	82 0f       	add	r24, r18
    25c8:	93 1f       	adc	r25, r19
    25ca:	fc 01       	movw	r30, r24
    25cc:	80 81       	ld	r24, Z
    25ce:	88 23       	and	r24, r24
    25d0:	51 f0       	breq	.+20     	; 0x25e6 <_Z11ReceiveBonev+0x6ee>
    25d2:	8a 81       	ldd	r24, Y+2	; 0x02
    25d4:	28 2f       	mov	r18, r24
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    25da:	9f 85       	ldd	r25, Y+15	; 0x0f
    25dc:	28 17       	cp	r18, r24
    25de:	39 07       	cpc	r19, r25
    25e0:	11 f0       	breq	.+4      	; 0x25e6 <_Z11ReceiveBonev+0x6ee>
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	01 c0       	rjmp	.+2      	; 0x25e8 <_Z11ReceiveBonev+0x6f0>
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	88 23       	and	r24, r24
    25ea:	09 f0       	breq	.+2      	; 0x25ee <_Z11ReceiveBonev+0x6f6>
    25ec:	69 cf       	rjmp	.-302    	; 0x24c0 <_Z11ReceiveBonev+0x5c8>
						} else;
						counter++;							
					}//end while
					
					//Assign last date if the reason we broke the while loop was a '.'. If not, ACKBAD and exit.
					if (recString[counter] == '.'){
    25ee:	9e 01       	movw	r18, r28
    25f0:	22 5c       	subi	r18, 0xC2	; 194
    25f2:	3f 4f       	sbci	r19, 0xFF	; 255
    25f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    25f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    25f8:	82 0f       	add	r24, r18
    25fa:	93 1f       	adc	r25, r19
    25fc:	fc 01       	movw	r30, r24
    25fe:	80 81       	ld	r24, Z
    2600:	8e 32       	cpi	r24, 0x2E	; 46
    2602:	a9 f4       	brne	.+42     	; 0x262e <_Z11ReceiveBonev+0x736>
						tempNum1[dmy] = atoi(tempStringNum);
    2604:	ce 01       	movw	r24, r28
    2606:	c7 96       	adiw	r24, 0x37	; 55
    2608:	0e 94 cd 1c 	call	0x399a	; 0x399a <atoi>
    260c:	9c 01       	movw	r18, r24
    260e:	88 89       	ldd	r24, Y+16	; 0x10
    2610:	99 89       	ldd	r25, Y+17	; 0x11
    2612:	88 0f       	add	r24, r24
    2614:	99 1f       	adc	r25, r25
    2616:	ae 01       	movw	r20, r28
    2618:	4f 5f       	subi	r20, 0xFF	; 255
    261a:	5f 4f       	sbci	r21, 0xFF	; 255
    261c:	84 0f       	add	r24, r20
    261e:	95 1f       	adc	r25, r21
    2620:	c0 96       	adiw	r24, 0x30	; 48
    2622:	fc 01       	movw	r30, r24
    2624:	31 83       	std	Z+1, r19	; 0x01
    2626:	20 83       	st	Z, r18
						successDate=fTrue;
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	8d 87       	std	Y+13, r24	; 0x0d
    262c:	02 c0       	rjmp	.+4      	; 0x2632 <_Z11ReceiveBonev+0x73a>
					} else {//something in the string was wrong, ACKBAD and then exit
						state=4;
    262e:	84 e0       	ldi	r24, 0x04	; 4
    2630:	89 83       	std	Y+1, r24	; 0x01
					}	
					
					//NOw set the time and date, then save it to EEPROM
					if (successDate && successTime){
    2632:	8d 85       	ldd	r24, Y+13	; 0x0d
    2634:	88 23       	and	r24, r24
    2636:	21 f1       	breq	.+72     	; 0x2680 <_Z11ReceiveBonev+0x788>
    2638:	8c 85       	ldd	r24, Y+12	; 0x0c
    263a:	88 23       	and	r24, r24
    263c:	09 f1       	breq	.+66     	; 0x2680 <_Z11ReceiveBonev+0x788>
						currentTime.setDate(tempNum1[0],tempNum1[1],tempNum1[2]);
    263e:	69 a9       	sts	0x49, r22
    2640:	7a a9       	sts	0x4a, r23
    2642:	4b a9       	sts	0x4b, r20
    2644:	5c a9       	sts	0x4c, r21
    2646:	2d a9       	sts	0x4d, r18
    2648:	3e a9       	sts	0x4e, r19
    264a:	86 ed       	ldi	r24, 0xD6	; 214
    264c:	91 e0       	ldi	r25, 0x01	; 1
    264e:	0e 94 84 01 	call	0x308	; 0x308 <_ZN6myDate7setDateEiii>
						currentTime.setTime(tempNum[0],tempNum[1],tempNum[2]);
    2652:	6b a5       	lds	r22, 0x6b
    2654:	7c a5       	lds	r23, 0x6c
    2656:	4d a5       	lds	r20, 0x6d
    2658:	5e a5       	lds	r21, 0x6e
    265a:	2f a5       	lds	r18, 0x6f
    265c:	38 a9       	sts	0x48, r19
    265e:	86 ed       	ldi	r24, 0xD6	; 214
    2660:	91 e0       	ldi	r25, 0x01	; 1
    2662:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN6myTime7setTimeEiii>
						Wait_ms(300);
    2666:	8c e2       	ldi	r24, 0x2C	; 44
    2668:	91 e0       	ldi	r25, 0x01	; 1
    266a:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_Z7Wait_msi>
						saveDateTime_eeprom(fTrue,fTrue);
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	61 e0       	ldi	r22, 0x01	; 1
    2672:	0e 94 3c 08 	call	0x1078	; 0x1078 <_Z19saveDateTime_eepromhh>
						//Even if we have updated the date and time with EEPROM data, do it again.
						//flagUpdateGAVRClock=fTrue;
						//Make sure UserCLock flags are down
						flagUserClock=fFalse;
    2676:	10 92 07 02 	sts	0x0207, r1
						state=3;	//Graceful exit
    267a:	83 e0       	ldi	r24, 0x03	; 3
    267c:	89 83       	std	Y+1, r24	; 0x01
    267e:	27 c0       	rjmp	.+78     	; 0x26ce <_Z11ReceiveBonev+0x7d6>
						
					} else if (!(successDate && successTime) && restart){
    2680:	8d 85       	ldd	r24, Y+13	; 0x0d
    2682:	88 23       	and	r24, r24
    2684:	19 f0       	breq	.+6      	; 0x268c <_Z11ReceiveBonev+0x794>
    2686:	8c 85       	ldd	r24, Y+12	; 0x0c
    2688:	88 23       	and	r24, r24
    268a:	61 f4       	brne	.+24     	; 0x26a4 <_Z11ReceiveBonev+0x7ac>
    268c:	80 91 0f 02 	lds	r24, 0x020F
    2690:	88 23       	and	r24, r24
    2692:	41 f0       	breq	.+16     	; 0x26a4 <_Z11ReceiveBonev+0x7ac>
						//Even if we have updated the date and time with EEPROM data, do it again.
						flagUpdateGAVRClock=fTrue;
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	80 93 05 02 	sts	0x0205, r24
						flagUserClock=fFalse;
    269a:	10 92 07 02 	sts	0x0207, r1
						state=4;	//ACKBAD
    269e:	84 e0       	ldi	r24, 0x04	; 4
    26a0:	89 83       	std	Y+1, r24	; 0x01
    26a2:	15 c0       	rjmp	.+42     	; 0x26ce <_Z11ReceiveBonev+0x7d6>
					} else if (!(successDate && successTime) && flagFreshStart && !restart){
    26a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a6:	88 23       	and	r24, r24
    26a8:	19 f0       	breq	.+6      	; 0x26b0 <_Z11ReceiveBonev+0x7b8>
    26aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    26ac:	88 23       	and	r24, r24
    26ae:	79 f4       	brne	.+30     	; 0x26ce <_Z11ReceiveBonev+0x7d6>
    26b0:	80 91 10 02 	lds	r24, 0x0210
    26b4:	88 23       	and	r24, r24
    26b6:	59 f0       	breq	.+22     	; 0x26ce <_Z11ReceiveBonev+0x7d6>
    26b8:	80 91 0f 02 	lds	r24, 0x020F
    26bc:	88 23       	and	r24, r24
    26be:	39 f4       	brne	.+14     	; 0x26ce <_Z11ReceiveBonev+0x7d6>
						flagUserClock=fTrue;
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	80 93 07 02 	sts	0x0207, r24
						flagUpdateGAVRClock=fFalse;
    26c6:	10 92 05 02 	sts	0x0205, r1
						state=4;	//ACKBAD
    26ca:	84 e0       	ldi	r24, 0x04	; 4
    26cc:	89 83       	std	Y+1, r24	; 0x01
					} else;		
					
					//Lower restart flags. Should have parallel case in timer just in case this state doesn't happen.
					flagFreshStart=fFalse;
    26ce:	10 92 10 02 	sts	0x0210, r1
					restart=fFalse;	
    26d2:	10 92 0f 02 	sts	0x020F, r1
					sei();	
    26d6:	78 94       	sei
					break;
    26d8:	04 c0       	rjmp	.+8      	; 0x26e2 <_Z11ReceiveBonev+0x7ea>
					}//end case 7									
				default:{flagReceivingBone=fFalse; state=0;break;}
    26da:	10 92 ff 01 	sts	0x01FF, r1
    26de:	19 82       	std	Y+1, r1	; 0x01
    26e0:	00 00       	nop
/*************************************************************************************************************/
void ReceiveBone(){
	BYTE state=0,strLoc=0;
	char recChar, recString[40];
	BOOL noCarriage=fTrue;
	while (flagReceivingBone){
    26e2:	90 91 ff 01 	lds	r25, 0x01FF
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	99 23       	and	r25, r25
    26ea:	09 f4       	brne	.+2      	; 0x26ee <_Z11ReceiveBonev+0x7f6>
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	88 23       	and	r24, r24
    26f0:	09 f0       	breq	.+2      	; 0x26f4 <_Z11ReceiveBonev+0x7fc>
    26f2:	12 cc       	rjmp	.-2012   	; 0x1f18 <_Z11ReceiveBonev+0x20>
					break;
					}//end case 7									
				default:{flagReceivingBone=fFalse; state=0;break;}
			}//end switch
	}//end while(flagUARTbone)	
}//end ReceiveBone()
    26f4:	cb 59       	subi	r28, 0x9B	; 155
    26f6:	df 4f       	sbci	r29, 0xFF	; 255
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	f8 94       	cli
    26fc:	de bf       	out	0x3e, r29	; 62
    26fe:	0f be       	out	0x3f, r0	; 63
    2700:	cd bf       	out	0x3d, r28	; 61
    2702:	df 91       	pop	r29
    2704:	cf 91       	pop	r28
    2706:	08 95       	ret

00002708 <_Z13printTimeDatehhh>:

/*************************************************************************************************************/
//To print to WAVR, cariable needs to be false. Print to Bone requires WAVRorBone to be true
void printTimeDate(BOOL WAVRorBone, BOOL pTime,BOOL pDate){
    2708:	cf 93       	push	r28
    270a:	df 93       	push	r29
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62
    2710:	eb 97       	sbiw	r28, 0x3b	; 59
    2712:	0f b6       	in	r0, 0x3f	; 63
    2714:	f8 94       	cli
    2716:	de bf       	out	0x3e, r29	; 62
    2718:	0f be       	out	0x3f, r0	; 63
    271a:	cd bf       	out	0x3d, r28	; 61
    271c:	89 af       	sts	0x79, r24
    271e:	6a af       	sts	0x7a, r22
    2720:	4b af       	sts	0x7b, r20
	if (WAVRorBone){ //Printing to BeagleBone
    2722:	89 ad       	sts	0x69, r24
    2724:	88 23       	and	r24, r24
    2726:	49 f1       	breq	.+82     	; 0x277a <_Z13printTimeDatehhh+0x72>
		if (pTime){
    2728:	8a ad       	sts	0x6a, r24
    272a:	88 23       	and	r24, r24
    272c:	89 f0       	breq	.+34     	; 0x2750 <_Z13printTimeDatehhh+0x48>
			char tempTime[11];
			strcpy(tempTime,currentTime.getTime());
    272e:	86 ed       	ldi	r24, 0xD6	; 214
    2730:	91 e0       	ldi	r25, 0x01	; 1
    2732:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <_ZN6myTime7getTimeEv>
    2736:	9c 01       	movw	r18, r24
    2738:	ce 01       	movw	r24, r28
    273a:	01 96       	adiw	r24, 0x01	; 1
    273c:	b9 01       	movw	r22, r18
    273e:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <strcpy>
			PrintBone(tempTime);
    2742:	ce 01       	movw	r24, r28
    2744:	01 96       	adiw	r24, 0x01	; 1
    2746:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
			PutUartChBone('/');
    274a:	8f e2       	ldi	r24, 0x2F	; 47
    274c:	0e 94 32 09 	call	0x1264	; 0x1264 <_Z13PutUartChBonec>
		}
		if (pDate){
    2750:	8b ad       	sts	0x6b, r24
    2752:	88 23       	and	r24, r24
    2754:	d1 f1       	breq	.+116    	; 0x27ca <_Z13printTimeDatehhh+0xc2>
			char tempDate[17];
			strcpy(tempDate,currentTime.getDate());
    2756:	86 ed       	ldi	r24, 0xD6	; 214
    2758:	91 e0       	ldi	r25, 0x01	; 1
    275a:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN6myDate7getDateEv>
    275e:	9c 01       	movw	r18, r24
    2760:	ce 01       	movw	r24, r28
    2762:	0c 96       	adiw	r24, 0x0c	; 12
    2764:	b9 01       	movw	r22, r18
    2766:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <strcpy>
			PrintBone(tempDate);
    276a:	ce 01       	movw	r24, r28
    276c:	0c 96       	adiw	r24, 0x0c	; 12
    276e:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
			PutUartChGAVR('.');
    2772:	8e e2       	ldi	r24, 0x2E	; 46
    2774:	0e 94 7d 09 	call	0x12fa	; 0x12fa <_Z13PutUartChGAVRc>
    2778:	28 c0       	rjmp	.+80     	; 0x27ca <_Z13printTimeDatehhh+0xc2>
		}
	} else { //Printing to GAVR
		if (pTime){
    277a:	8a ad       	sts	0x6a, r24
    277c:	88 23       	and	r24, r24
    277e:	89 f0       	breq	.+34     	; 0x27a2 <_Z13printTimeDatehhh+0x9a>
			char tempTime[11];
			strcpy(tempTime,currentTime.getTime());
    2780:	86 ed       	ldi	r24, 0xD6	; 214
    2782:	91 e0       	ldi	r25, 0x01	; 1
    2784:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <_ZN6myTime7getTimeEv>
    2788:	9c 01       	movw	r18, r24
    278a:	ce 01       	movw	r24, r28
    278c:	4d 96       	adiw	r24, 0x1d	; 29
    278e:	b9 01       	movw	r22, r18
    2790:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <strcpy>
			PrintGAVR(tempTime);
    2794:	ce 01       	movw	r24, r28
    2796:	4d 96       	adiw	r24, 0x1d	; 29
    2798:	0e 94 9b 09 	call	0x1336	; 0x1336 <_Z9PrintGAVRPc>
			PutUartChGAVR('/');
    279c:	8f e2       	ldi	r24, 0x2F	; 47
    279e:	0e 94 7d 09 	call	0x12fa	; 0x12fa <_Z13PutUartChGAVRc>
		}
		if (pDate){
    27a2:	8b ad       	sts	0x6b, r24
    27a4:	88 23       	and	r24, r24
    27a6:	89 f0       	breq	.+34     	; 0x27ca <_Z13printTimeDatehhh+0xc2>
			char tempDate[17];
			strcpy(tempDate,currentTime.getDate());
    27a8:	86 ed       	ldi	r24, 0xD6	; 214
    27aa:	91 e0       	ldi	r25, 0x01	; 1
    27ac:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN6myDate7getDateEv>
    27b0:	9c 01       	movw	r18, r24
    27b2:	ce 01       	movw	r24, r28
    27b4:	88 96       	adiw	r24, 0x28	; 40
    27b6:	b9 01       	movw	r22, r18
    27b8:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <strcpy>
			PrintGAVR(tempDate);
    27bc:	ce 01       	movw	r24, r28
    27be:	88 96       	adiw	r24, 0x28	; 40
    27c0:	0e 94 9b 09 	call	0x1336	; 0x1336 <_Z9PrintGAVRPc>
			PutUartChGAVR('.');
    27c4:	8e e2       	ldi	r24, 0x2E	; 46
    27c6:	0e 94 7d 09 	call	0x12fa	; 0x12fa <_Z13PutUartChGAVRc>
		}
	}
}
    27ca:	eb 96       	adiw	r28, 0x3b	; 59
    27cc:	0f b6       	in	r0, 0x3f	; 63
    27ce:	f8 94       	cli
    27d0:	de bf       	out	0x3e, r29	; 62
    27d2:	0f be       	out	0x3f, r0	; 63
    27d4:	cd bf       	out	0x3d, r28	; 61
    27d6:	df 91       	pop	r29
    27d8:	cf 91       	pop	r28
    27da:	08 95       	ret

000027dc <__vector_6>:
/****************************************************************************************************************/


/*--------------------------Interrupt Service Routines------------------------------------------------------------------------------------*/
//PCINT_17: Getting information from the GAVR
ISR(PCINT2_vect){
    27dc:	1f 92       	push	r1
    27de:	0f 92       	push	r0
    27e0:	0f b6       	in	r0, 0x3f	; 63
    27e2:	0f 92       	push	r0
    27e4:	11 24       	eor	r1, r1
    27e6:	2f 93       	push	r18
    27e8:	3f 93       	push	r19
    27ea:	4f 93       	push	r20
    27ec:	5f 93       	push	r21
    27ee:	6f 93       	push	r22
    27f0:	7f 93       	push	r23
    27f2:	8f 93       	push	r24
    27f4:	9f 93       	push	r25
    27f6:	af 93       	push	r26
    27f8:	bf 93       	push	r27
    27fa:	ef 93       	push	r30
    27fc:	ff 93       	push	r31
    27fe:	cf 93       	push	r28
    2800:	df 93       	push	r29
    2802:	cd b7       	in	r28, 0x3d	; 61
    2804:	de b7       	in	r29, 0x3e	; 62
	cli();
    2806:	f8 94       	cli
	if (PINC & (1 << PCINT17)){
    2808:	86 e2       	ldi	r24, 0x26	; 38
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	fc 01       	movw	r30, r24
    280e:	80 81       	ld	r24, Z
    2810:	88 2f       	mov	r24, r24
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	82 70       	andi	r24, 0x02	; 2
    2816:	90 70       	andi	r25, 0x00	; 0
    2818:	21 e0       	ldi	r18, 0x01	; 1
    281a:	00 97       	sbiw	r24, 0x00	; 0
    281c:	09 f4       	brne	.+2      	; 0x2820 <__vector_6+0x44>
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	22 23       	and	r18, r18
    2822:	e9 f0       	breq	.+58     	; 0x285e <__vector_6+0x82>
		__killCommINT();
    2824:	8d e3       	ldi	r24, 0x3D	; 61
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	fc 01       	movw	r30, r24
    282a:	10 82       	st	Z, r1
    282c:	8d e6       	ldi	r24, 0x6D	; 109
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	fc 01       	movw	r30, r24
    2832:	10 82       	st	Z, r1
		//Do work, correct interrupt
		UCSR1B |= (1 << RXCIE1);
    2834:	89 ec       	ldi	r24, 0xC9	; 201
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	29 ec       	ldi	r18, 0xC9	; 201
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	f9 01       	movw	r30, r18
    283e:	20 81       	ld	r18, Z
    2840:	20 68       	ori	r18, 0x80	; 128
    2842:	fc 01       	movw	r30, r24
    2844:	20 83       	st	Z, r18
		sei();
    2846:	78 94       	sei
		flagGoToSleep=fFalse;
    2848:	10 92 fe 01 	sts	0x01FE, r1
		flagNormalMode=fFalse;
    284c:	10 92 00 02 	sts	0x0200, r1
		flagWaitingForSYNGAVR=fTrue;
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	80 93 03 02 	sts	0x0203, r24
		//Acknowledge
		PrintGAVR("A.");
    2856:	8c e0       	ldi	r24, 0x0C	; 12
    2858:	91 e0       	ldi	r25, 0x01	; 1
    285a:	0e 94 9b 09 	call	0x1336	; 0x1336 <_Z9PrintGAVRPc>
	}
	sei();
    285e:	78 94       	sei
}	
    2860:	df 91       	pop	r29
    2862:	cf 91       	pop	r28
    2864:	ff 91       	pop	r31
    2866:	ef 91       	pop	r30
    2868:	bf 91       	pop	r27
    286a:	af 91       	pop	r26
    286c:	9f 91       	pop	r25
    286e:	8f 91       	pop	r24
    2870:	7f 91       	pop	r23
    2872:	6f 91       	pop	r22
    2874:	5f 91       	pop	r21
    2876:	4f 91       	pop	r20
    2878:	3f 91       	pop	r19
    287a:	2f 91       	pop	r18
    287c:	0f 90       	pop	r0
    287e:	0f be       	out	0x3f, r0	; 63
    2880:	0f 90       	pop	r0
    2882:	1f 90       	pop	r1
    2884:	18 95       	reti

00002886 <__vector_3>:
/********************************************************/
//INT2: Getting information from BeagleBone
ISR(INT2_vect){	//about to get time, get things ready
    2886:	1f 92       	push	r1
    2888:	0f 92       	push	r0
    288a:	0f b6       	in	r0, 0x3f	; 63
    288c:	0f 92       	push	r0
    288e:	11 24       	eor	r1, r1
    2890:	2f 93       	push	r18
    2892:	3f 93       	push	r19
    2894:	4f 93       	push	r20
    2896:	5f 93       	push	r21
    2898:	6f 93       	push	r22
    289a:	7f 93       	push	r23
    289c:	8f 93       	push	r24
    289e:	9f 93       	push	r25
    28a0:	af 93       	push	r26
    28a2:	bf 93       	push	r27
    28a4:	ef 93       	push	r30
    28a6:	ff 93       	push	r31
    28a8:	cf 93       	push	r28
    28aa:	df 93       	push	r29
    28ac:	cd b7       	in	r28, 0x3d	; 61
    28ae:	de b7       	in	r29, 0x3e	; 62
	cli();
    28b0:	f8 94       	cli
	if (!flagShutdown){		//If things are off, don't let noise do an interrupt. Shouldn't happen anyways.
    28b2:	80 91 0c 02 	lds	r24, 0x020C
    28b6:	88 23       	and	r24, r24
    28b8:	f1 f4       	brne	.+60     	; 0x28f6 <__vector_3+0x70>
		flagGoToSleep=fFalse;	//no sleeping, wait for UART_RX
    28ba:	10 92 fe 01 	sts	0x01FE, r1
		flagNormalMode=fFalse;
    28be:	10 92 00 02 	sts	0x0200, r1
		flagWaitingForSYNBone=fTrue;
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	80 93 04 02 	sts	0x0204, r24
		flagReceivingBone=fFalse;
    28c8:	10 92 ff 01 	sts	0x01FF, r1
		__killCommINT();
    28cc:	8d e3       	ldi	r24, 0x3D	; 61
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	fc 01       	movw	r30, r24
    28d2:	10 82       	st	Z, r1
    28d4:	8d e6       	ldi	r24, 0x6D	; 109
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	fc 01       	movw	r30, r24
    28da:	10 82       	st	Z, r1
		//Acknowledge connection, disable INT2_vect
		PrintBone("A.");
    28dc:	8c e0       	ldi	r24, 0x0C	; 12
    28de:	91 e0       	ldi	r25, 0x01	; 1
    28e0:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
		UCSR0B |= (1 << RXCIE0);
    28e4:	81 ec       	ldi	r24, 0xC1	; 193
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	21 ec       	ldi	r18, 0xC1	; 193
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	f9 01       	movw	r30, r18
    28ee:	20 81       	ld	r18, Z
    28f0:	20 68       	ori	r18, 0x80	; 128
    28f2:	fc 01       	movw	r30, r24
    28f4:	20 83       	st	Z, r18
	}
	sei();
    28f6:	78 94       	sei
}
    28f8:	df 91       	pop	r29
    28fa:	cf 91       	pop	r28
    28fc:	ff 91       	pop	r31
    28fe:	ef 91       	pop	r30
    2900:	bf 91       	pop	r27
    2902:	af 91       	pop	r26
    2904:	9f 91       	pop	r25
    2906:	8f 91       	pop	r24
    2908:	7f 91       	pop	r23
    290a:	6f 91       	pop	r22
    290c:	5f 91       	pop	r21
    290e:	4f 91       	pop	r20
    2910:	3f 91       	pop	r19
    2912:	2f 91       	pop	r18
    2914:	0f 90       	pop	r0
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	0f 90       	pop	r0
    291a:	1f 90       	pop	r1
    291c:	18 95       	reti

0000291e <__vector_20>:
/********************************************************/
//UART Receive from BeagleBone
ISR(USART0_RX_vect){
    291e:	1f 92       	push	r1
    2920:	0f 92       	push	r0
    2922:	0f b6       	in	r0, 0x3f	; 63
    2924:	0f 92       	push	r0
    2926:	11 24       	eor	r1, r1
    2928:	2f 93       	push	r18
    292a:	3f 93       	push	r19
    292c:	8f 93       	push	r24
    292e:	9f 93       	push	r25
    2930:	ef 93       	push	r30
    2932:	ff 93       	push	r31
    2934:	cf 93       	push	r28
    2936:	df 93       	push	r29
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
	cli();
    293c:	f8 94       	cli
	if (flagWaitingForSYNBone){
    293e:	80 91 04 02 	lds	r24, 0x0204
    2942:	88 23       	and	r24, r24
    2944:	31 f0       	breq	.+12     	; 0x2952 <__vector_20+0x34>
		flagReceivingBone=fTrue;
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	80 93 ff 01 	sts	0x01FF, r24
		flagWaitingForSYNBone=fFalse;
    294c:	10 92 04 02 	sts	0x0204, r1
    2950:	02 c0       	rjmp	.+4      	; 0x2956 <__vector_20+0x38>
	} else {
		flagReceivingBone=fFalse;		//there was a timeout between the initial interrupt and when we are getting this.
    2952:	10 92 ff 01 	sts	0x01FF, r1
	}	
	UCSR0B &= ~(1 << RXCIE0);
    2956:	81 ec       	ldi	r24, 0xC1	; 193
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	21 ec       	ldi	r18, 0xC1	; 193
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	f9 01       	movw	r30, r18
    2960:	20 81       	ld	r18, Z
    2962:	2f 77       	andi	r18, 0x7F	; 127
    2964:	fc 01       	movw	r30, r24
    2966:	20 83       	st	Z, r18
	sei();
    2968:	78 94       	sei
}
    296a:	df 91       	pop	r29
    296c:	cf 91       	pop	r28
    296e:	ff 91       	pop	r31
    2970:	ef 91       	pop	r30
    2972:	9f 91       	pop	r25
    2974:	8f 91       	pop	r24
    2976:	3f 91       	pop	r19
    2978:	2f 91       	pop	r18
    297a:	0f 90       	pop	r0
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	0f 90       	pop	r0
    2980:	1f 90       	pop	r1
    2982:	18 95       	reti

00002984 <__vector_28>:
/********************************************************/
ISR(USART1_RX_vect){
    2984:	1f 92       	push	r1
    2986:	0f 92       	push	r0
    2988:	0f b6       	in	r0, 0x3f	; 63
    298a:	0f 92       	push	r0
    298c:	11 24       	eor	r1, r1
    298e:	2f 93       	push	r18
    2990:	3f 93       	push	r19
    2992:	8f 93       	push	r24
    2994:	9f 93       	push	r25
    2996:	ef 93       	push	r30
    2998:	ff 93       	push	r31
    299a:	cf 93       	push	r28
    299c:	df 93       	push	r29
    299e:	cd b7       	in	r28, 0x3d	; 61
    29a0:	de b7       	in	r29, 0x3e	; 62
	cli();
    29a2:	f8 94       	cli
	if (flagWaitingForSYNGAVR){
    29a4:	80 91 03 02 	lds	r24, 0x0203
    29a8:	88 23       	and	r24, r24
    29aa:	31 f0       	breq	.+12     	; 0x29b8 <__vector_28+0x34>
		flagReceivingGAVR=fTrue;
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	80 93 01 02 	sts	0x0201, r24
		flagWaitingForSYNGAVR=fFalse;
    29b2:	10 92 03 02 	sts	0x0203, r1
    29b6:	02 c0       	rjmp	.+4      	; 0x29bc <__vector_28+0x38>
	}else {
		flagReceivingGAVR=fFalse;
    29b8:	10 92 01 02 	sts	0x0201, r1
	}
	UCSR1B &= ~(1 <<RXCIE1);	//disable interrupt
    29bc:	89 ec       	ldi	r24, 0xC9	; 201
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	29 ec       	ldi	r18, 0xC9	; 201
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	f9 01       	movw	r30, r18
    29c6:	20 81       	ld	r18, Z
    29c8:	2f 77       	andi	r18, 0x7F	; 127
    29ca:	fc 01       	movw	r30, r24
    29cc:	20 83       	st	Z, r18
	sei();
    29ce:	78 94       	sei
}
    29d0:	df 91       	pop	r29
    29d2:	cf 91       	pop	r28
    29d4:	ff 91       	pop	r31
    29d6:	ef 91       	pop	r30
    29d8:	9f 91       	pop	r25
    29da:	8f 91       	pop	r24
    29dc:	3f 91       	pop	r19
    29de:	2f 91       	pop	r18
    29e0:	0f 90       	pop	r0
    29e2:	0f be       	out	0x3f, r0	; 63
    29e4:	0f 90       	pop	r0
    29e6:	1f 90       	pop	r1
    29e8:	18 95       	reti

000029ea <__vector_11>:

/********************************************************/
//RTC Timer.
ISR(TIMER2_OVF_vect){
    29ea:	1f 92       	push	r1
    29ec:	0f 92       	push	r0
    29ee:	0f b6       	in	r0, 0x3f	; 63
    29f0:	0f 92       	push	r0
    29f2:	11 24       	eor	r1, r1
    29f4:	2f 93       	push	r18
    29f6:	3f 93       	push	r19
    29f8:	4f 93       	push	r20
    29fa:	5f 93       	push	r21
    29fc:	6f 93       	push	r22
    29fe:	7f 93       	push	r23
    2a00:	8f 93       	push	r24
    2a02:	9f 93       	push	r25
    2a04:	af 93       	push	r26
    2a06:	bf 93       	push	r27
    2a08:	ef 93       	push	r30
    2a0a:	ff 93       	push	r31
    2a0c:	cf 93       	push	r28
    2a0e:	df 93       	push	r29
    2a10:	cd b7       	in	r28, 0x3d	; 61
    2a12:	de b7       	in	r29, 0x3e	; 62
	cli();
    2a14:	f8 94       	cli
	prtSLEEPled ^= (1 << bnSLEEPled);
    2a16:	8b e2       	ldi	r24, 0x2B	; 43
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	2b e2       	ldi	r18, 0x2B	; 43
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	f9 01       	movw	r30, r18
    2a20:	30 81       	ld	r19, Z
    2a22:	20 e8       	ldi	r18, 0x80	; 128
    2a24:	23 27       	eor	r18, r19
    2a26:	fc 01       	movw	r30, r24
    2a28:	20 83       	st	Z, r18
	static unsigned int gavrSendTimeout=0, boneReceiveTimeout=0, gavrReceiveTimeout=0, startupTimeout=0;
	
	currentTime.addSeconds(1);
    2a2a:	86 ed       	ldi	r24, 0xD6	; 214
    2a2c:	91 e0       	ldi	r25, 0x01	; 1
    2a2e:	61 e0       	ldi	r22, 0x01	; 1
    2a30:	70 e0       	ldi	r23, 0x00	; 0
    2a32:	0e 94 72 06 	call	0xce4	; 0xce4 <_ZN6myTime10addSecondsEi>
	
	//GAVR Transmission Timeout
	if (flagSendingGAVR && gavrSendTimeout <=COMM_TIMEOUT_SEC){gavrSendTimeout++;}
    2a36:	80 91 06 02 	lds	r24, 0x0206
    2a3a:	88 23       	and	r24, r24
    2a3c:	89 f0       	breq	.+34     	; 0x2a60 <__vector_11+0x76>
    2a3e:	80 91 11 02 	lds	r24, 0x0211
    2a42:	90 91 12 02 	lds	r25, 0x0212
    2a46:	89 30       	cpi	r24, 0x09	; 9
    2a48:	91 05       	cpc	r25, r1
    2a4a:	50 f4       	brcc	.+20     	; 0x2a60 <__vector_11+0x76>
    2a4c:	80 91 11 02 	lds	r24, 0x0211
    2a50:	90 91 12 02 	lds	r25, 0x0212
    2a54:	01 96       	adiw	r24, 0x01	; 1
    2a56:	90 93 12 02 	sts	0x0212, r25
    2a5a:	80 93 11 02 	sts	0x0211, r24
    2a5e:	43 c0       	rjmp	.+134    	; 0x2ae6 <__vector_11+0xfc>
	else if (flagSendingGAVR && gavrSendTimeout > COMM_TIMEOUT_SEC){__killUARTrec();flagSendingGAVR=fFalse;flagGoToSleep=fTrue; gavrSendTimeout=0; __enableCommINT();}
    2a60:	80 91 06 02 	lds	r24, 0x0206
    2a64:	88 23       	and	r24, r24
    2a66:	89 f1       	breq	.+98     	; 0x2aca <__vector_11+0xe0>
    2a68:	80 91 11 02 	lds	r24, 0x0211
    2a6c:	90 91 12 02 	lds	r25, 0x0212
    2a70:	89 30       	cpi	r24, 0x09	; 9
    2a72:	91 05       	cpc	r25, r1
    2a74:	50 f1       	brcs	.+84     	; 0x2aca <__vector_11+0xe0>
    2a76:	81 ec       	ldi	r24, 0xC1	; 193
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	21 ec       	ldi	r18, 0xC1	; 193
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	f9 01       	movw	r30, r18
    2a80:	20 81       	ld	r18, Z
    2a82:	20 68       	ori	r18, 0x80	; 128
    2a84:	fc 01       	movw	r30, r24
    2a86:	20 83       	st	Z, r18
    2a88:	89 ec       	ldi	r24, 0xC9	; 201
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	29 ec       	ldi	r18, 0xC9	; 201
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	f9 01       	movw	r30, r18
    2a92:	20 81       	ld	r18, Z
    2a94:	20 68       	ori	r18, 0x80	; 128
    2a96:	fc 01       	movw	r30, r24
    2a98:	20 83       	st	Z, r18
    2a9a:	10 92 06 02 	sts	0x0206, r1
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	80 93 fe 01 	sts	0x01FE, r24
    2aa4:	10 92 12 02 	sts	0x0212, r1
    2aa8:	10 92 11 02 	sts	0x0211, r1
    2aac:	8d e3       	ldi	r24, 0x3D	; 61
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	2d e3       	ldi	r18, 0x3D	; 61
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	f9 01       	movw	r30, r18
    2ab6:	20 81       	ld	r18, Z
    2ab8:	24 60       	ori	r18, 0x04	; 4
    2aba:	fc 01       	movw	r30, r24
    2abc:	20 83       	st	Z, r18
    2abe:	8d e6       	ldi	r24, 0x6D	; 109
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	22 e0       	ldi	r18, 0x02	; 2
    2ac4:	fc 01       	movw	r30, r24
    2ac6:	20 83       	st	Z, r18
    2ac8:	0e c0       	rjmp	.+28     	; 0x2ae6 <__vector_11+0xfc>
	else if (!flagSendingGAVR && gavrSendTimeout > 0){gavrSendTimeout=0;}
    2aca:	80 91 06 02 	lds	r24, 0x0206
    2ace:	88 23       	and	r24, r24
    2ad0:	51 f4       	brne	.+20     	; 0x2ae6 <__vector_11+0xfc>
    2ad2:	80 91 11 02 	lds	r24, 0x0211
    2ad6:	90 91 12 02 	lds	r25, 0x0212
    2ada:	00 97       	sbiw	r24, 0x00	; 0
    2adc:	21 f0       	breq	.+8      	; 0x2ae6 <__vector_11+0xfc>
    2ade:	10 92 12 02 	sts	0x0212, r1
    2ae2:	10 92 11 02 	sts	0x0211, r1
	else;
	
	//BeagleBone Reception Timeout
	if ((flagReceivingBone|| flagWaitingForSYNBone) && (boneReceiveTimeout <=COMM_TIMEOUT_SEC)){boneReceiveTimeout++;}
    2ae6:	80 91 ff 01 	lds	r24, 0x01FF
    2aea:	88 23       	and	r24, r24
    2aec:	21 f4       	brne	.+8      	; 0x2af6 <__vector_11+0x10c>
    2aee:	80 91 04 02 	lds	r24, 0x0204
    2af2:	88 23       	and	r24, r24
    2af4:	89 f0       	breq	.+34     	; 0x2b18 <__vector_11+0x12e>
    2af6:	80 91 13 02 	lds	r24, 0x0213
    2afa:	90 91 14 02 	lds	r25, 0x0214
    2afe:	89 30       	cpi	r24, 0x09	; 9
    2b00:	91 05       	cpc	r25, r1
    2b02:	50 f4       	brcc	.+20     	; 0x2b18 <__vector_11+0x12e>
    2b04:	80 91 13 02 	lds	r24, 0x0213
    2b08:	90 91 14 02 	lds	r25, 0x0214
    2b0c:	01 96       	adiw	r24, 0x01	; 1
    2b0e:	90 93 14 02 	sts	0x0214, r25
    2b12:	80 93 13 02 	sts	0x0213, r24
    2b16:	50 c0       	rjmp	.+160    	; 0x2bb8 <__vector_11+0x1ce>
	else if ((flagReceivingBone|| flagWaitingForSYNBone) && (boneReceiveTimeout > COMM_TIMEOUT_SEC)){__killUARTrec();flagReceivingBone=fFalse; flagWaitingForSYNBone=fFalse;flagGoToSleep=fTrue; flagNormalMode=fTrue; boneReceiveTimeout=0; __enableCommINT();}
    2b18:	80 91 ff 01 	lds	r24, 0x01FF
    2b1c:	88 23       	and	r24, r24
    2b1e:	21 f4       	brne	.+8      	; 0x2b28 <__vector_11+0x13e>
    2b20:	80 91 04 02 	lds	r24, 0x0204
    2b24:	88 23       	and	r24, r24
    2b26:	b1 f1       	breq	.+108    	; 0x2b94 <__vector_11+0x1aa>
    2b28:	80 91 13 02 	lds	r24, 0x0213
    2b2c:	90 91 14 02 	lds	r25, 0x0214
    2b30:	89 30       	cpi	r24, 0x09	; 9
    2b32:	91 05       	cpc	r25, r1
    2b34:	78 f1       	brcs	.+94     	; 0x2b94 <__vector_11+0x1aa>
    2b36:	81 ec       	ldi	r24, 0xC1	; 193
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	21 ec       	ldi	r18, 0xC1	; 193
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	f9 01       	movw	r30, r18
    2b40:	20 81       	ld	r18, Z
    2b42:	20 68       	ori	r18, 0x80	; 128
    2b44:	fc 01       	movw	r30, r24
    2b46:	20 83       	st	Z, r18
    2b48:	89 ec       	ldi	r24, 0xC9	; 201
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	29 ec       	ldi	r18, 0xC9	; 201
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	f9 01       	movw	r30, r18
    2b52:	20 81       	ld	r18, Z
    2b54:	20 68       	ori	r18, 0x80	; 128
    2b56:	fc 01       	movw	r30, r24
    2b58:	20 83       	st	Z, r18
    2b5a:	10 92 ff 01 	sts	0x01FF, r1
    2b5e:	10 92 04 02 	sts	0x0204, r1
    2b62:	81 e0       	ldi	r24, 0x01	; 1
    2b64:	80 93 fe 01 	sts	0x01FE, r24
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	80 93 00 02 	sts	0x0200, r24
    2b6e:	10 92 14 02 	sts	0x0214, r1
    2b72:	10 92 13 02 	sts	0x0213, r1
    2b76:	8d e3       	ldi	r24, 0x3D	; 61
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	2d e3       	ldi	r18, 0x3D	; 61
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	f9 01       	movw	r30, r18
    2b80:	20 81       	ld	r18, Z
    2b82:	24 60       	ori	r18, 0x04	; 4
    2b84:	fc 01       	movw	r30, r24
    2b86:	20 83       	st	Z, r18
    2b88:	8d e6       	ldi	r24, 0x6D	; 109
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	22 e0       	ldi	r18, 0x02	; 2
    2b8e:	fc 01       	movw	r30, r24
    2b90:	20 83       	st	Z, r18
    2b92:	12 c0       	rjmp	.+36     	; 0x2bb8 <__vector_11+0x1ce>
	else if ((!flagReceivingBone && !flagWaitingForSYNBone) && boneReceiveTimeout > 0){boneReceiveTimeout=0;}
    2b94:	80 91 ff 01 	lds	r24, 0x01FF
    2b98:	88 23       	and	r24, r24
    2b9a:	71 f4       	brne	.+28     	; 0x2bb8 <__vector_11+0x1ce>
    2b9c:	80 91 04 02 	lds	r24, 0x0204
    2ba0:	88 23       	and	r24, r24
    2ba2:	51 f4       	brne	.+20     	; 0x2bb8 <__vector_11+0x1ce>
    2ba4:	80 91 13 02 	lds	r24, 0x0213
    2ba8:	90 91 14 02 	lds	r25, 0x0214
    2bac:	00 97       	sbiw	r24, 0x00	; 0
    2bae:	21 f0       	breq	.+8      	; 0x2bb8 <__vector_11+0x1ce>
    2bb0:	10 92 14 02 	sts	0x0214, r1
    2bb4:	10 92 13 02 	sts	0x0213, r1
	else;

	//GAVR Reception Timeout
	if ((flagReceivingGAVR || flagWaitingForSYNGAVR) && gavrReceiveTimeout <= COMM_TIMEOUT_SEC){gavrReceiveTimeout++;}
    2bb8:	80 91 01 02 	lds	r24, 0x0201
    2bbc:	88 23       	and	r24, r24
    2bbe:	21 f4       	brne	.+8      	; 0x2bc8 <__vector_11+0x1de>
    2bc0:	80 91 03 02 	lds	r24, 0x0203
    2bc4:	88 23       	and	r24, r24
    2bc6:	89 f0       	breq	.+34     	; 0x2bea <__vector_11+0x200>
    2bc8:	80 91 15 02 	lds	r24, 0x0215
    2bcc:	90 91 16 02 	lds	r25, 0x0216
    2bd0:	89 30       	cpi	r24, 0x09	; 9
    2bd2:	91 05       	cpc	r25, r1
    2bd4:	50 f4       	brcc	.+20     	; 0x2bea <__vector_11+0x200>
    2bd6:	80 91 15 02 	lds	r24, 0x0215
    2bda:	90 91 16 02 	lds	r25, 0x0216
    2bde:	01 96       	adiw	r24, 0x01	; 1
    2be0:	90 93 16 02 	sts	0x0216, r25
    2be4:	80 93 15 02 	sts	0x0215, r24
    2be8:	50 c0       	rjmp	.+160    	; 0x2c8a <__vector_11+0x2a0>
	else if ((flagReceivingGAVR || flagWaitingForSYNGAVR) && gavrReceiveTimeout > COMM_TIMEOUT_SEC){__killUARTrec(); flagReceivingGAVR=fFalse;flagGoToSleep=fTrue; flagWaitingForSYNGAVR=fFalse;flagNormalMode=fTrue;gavrReceiveTimeout=0; __enableCommINT();}
    2bea:	80 91 01 02 	lds	r24, 0x0201
    2bee:	88 23       	and	r24, r24
    2bf0:	21 f4       	brne	.+8      	; 0x2bfa <__vector_11+0x210>
    2bf2:	80 91 03 02 	lds	r24, 0x0203
    2bf6:	88 23       	and	r24, r24
    2bf8:	b1 f1       	breq	.+108    	; 0x2c66 <__vector_11+0x27c>
    2bfa:	80 91 15 02 	lds	r24, 0x0215
    2bfe:	90 91 16 02 	lds	r25, 0x0216
    2c02:	89 30       	cpi	r24, 0x09	; 9
    2c04:	91 05       	cpc	r25, r1
    2c06:	78 f1       	brcs	.+94     	; 0x2c66 <__vector_11+0x27c>
    2c08:	81 ec       	ldi	r24, 0xC1	; 193
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	21 ec       	ldi	r18, 0xC1	; 193
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	f9 01       	movw	r30, r18
    2c12:	20 81       	ld	r18, Z
    2c14:	20 68       	ori	r18, 0x80	; 128
    2c16:	fc 01       	movw	r30, r24
    2c18:	20 83       	st	Z, r18
    2c1a:	89 ec       	ldi	r24, 0xC9	; 201
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	29 ec       	ldi	r18, 0xC9	; 201
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	f9 01       	movw	r30, r18
    2c24:	20 81       	ld	r18, Z
    2c26:	20 68       	ori	r18, 0x80	; 128
    2c28:	fc 01       	movw	r30, r24
    2c2a:	20 83       	st	Z, r18
    2c2c:	10 92 01 02 	sts	0x0201, r1
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	80 93 fe 01 	sts	0x01FE, r24
    2c36:	10 92 03 02 	sts	0x0203, r1
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	80 93 00 02 	sts	0x0200, r24
    2c40:	10 92 16 02 	sts	0x0216, r1
    2c44:	10 92 15 02 	sts	0x0215, r1
    2c48:	8d e3       	ldi	r24, 0x3D	; 61
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	2d e3       	ldi	r18, 0x3D	; 61
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	f9 01       	movw	r30, r18
    2c52:	20 81       	ld	r18, Z
    2c54:	24 60       	ori	r18, 0x04	; 4
    2c56:	fc 01       	movw	r30, r24
    2c58:	20 83       	st	Z, r18
    2c5a:	8d e6       	ldi	r24, 0x6D	; 109
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	22 e0       	ldi	r18, 0x02	; 2
    2c60:	fc 01       	movw	r30, r24
    2c62:	20 83       	st	Z, r18
    2c64:	12 c0       	rjmp	.+36     	; 0x2c8a <__vector_11+0x2a0>
	else if ((!flagReceivingGAVR && !flagWaitingForSYNGAVR) && gavrReceiveTimeout > 0){gavrReceiveTimeout=0;}
    2c66:	80 91 01 02 	lds	r24, 0x0201
    2c6a:	88 23       	and	r24, r24
    2c6c:	71 f4       	brne	.+28     	; 0x2c8a <__vector_11+0x2a0>
    2c6e:	80 91 03 02 	lds	r24, 0x0203
    2c72:	88 23       	and	r24, r24
    2c74:	51 f4       	brne	.+20     	; 0x2c8a <__vector_11+0x2a0>
    2c76:	80 91 15 02 	lds	r24, 0x0215
    2c7a:	90 91 16 02 	lds	r25, 0x0216
    2c7e:	00 97       	sbiw	r24, 0x00	; 0
    2c80:	21 f0       	breq	.+8      	; 0x2c8a <__vector_11+0x2a0>
    2c82:	10 92 16 02 	sts	0x0216, r1
    2c86:	10 92 15 02 	sts	0x0215, r1
	else;
	
	//Startup Tiemout for sending clock to GAVR
	if ((flagFreshStart || restart) && startupTimeout <= STARTUP_TIMEOUT_SEC){startupTimeout++;}
    2c8a:	80 91 10 02 	lds	r24, 0x0210
    2c8e:	88 23       	and	r24, r24
    2c90:	21 f4       	brne	.+8      	; 0x2c9a <__vector_11+0x2b0>
    2c92:	80 91 0f 02 	lds	r24, 0x020F
    2c96:	88 23       	and	r24, r24
    2c98:	89 f0       	breq	.+34     	; 0x2cbc <__vector_11+0x2d2>
    2c9a:	80 91 17 02 	lds	r24, 0x0217
    2c9e:	90 91 18 02 	lds	r25, 0x0218
    2ca2:	8d 30       	cpi	r24, 0x0D	; 13
    2ca4:	91 05       	cpc	r25, r1
    2ca6:	50 f4       	brcc	.+20     	; 0x2cbc <__vector_11+0x2d2>
    2ca8:	80 91 17 02 	lds	r24, 0x0217
    2cac:	90 91 18 02 	lds	r25, 0x0218
    2cb0:	01 96       	adiw	r24, 0x01	; 1
    2cb2:	90 93 18 02 	sts	0x0218, r25
    2cb6:	80 93 17 02 	sts	0x0217, r24
    2cba:	51 c0       	rjmp	.+162    	; 0x2d5e <__vector_11+0x374>
	else if ((flagFreshStart || restart) && startupTimeout > STARTUP_TIMEOUT_SEC){
    2cbc:	80 91 10 02 	lds	r24, 0x0210
    2cc0:	88 23       	and	r24, r24
    2cc2:	21 f4       	brne	.+8      	; 0x2ccc <__vector_11+0x2e2>
    2cc4:	80 91 0f 02 	lds	r24, 0x020F
    2cc8:	88 23       	and	r24, r24
    2cca:	b9 f1       	breq	.+110    	; 0x2d3a <__vector_11+0x350>
    2ccc:	80 91 17 02 	lds	r24, 0x0217
    2cd0:	90 91 18 02 	lds	r25, 0x0218
    2cd4:	8d 30       	cpi	r24, 0x0D	; 13
    2cd6:	91 05       	cpc	r25, r1
    2cd8:	80 f1       	brcs	.+96     	; 0x2d3a <__vector_11+0x350>
		if (flagFreshStart){flagFreshStart=fFalse; flagUserClock=fTrue; flagUpdateGAVRClock=fFalse;}	//The GPS didn't send valid data, get user clock.
    2cda:	80 91 10 02 	lds	r24, 0x0210
    2cde:	88 23       	and	r24, r24
    2ce0:	41 f0       	breq	.+16     	; 0x2cf2 <__vector_11+0x308>
    2ce2:	10 92 10 02 	sts	0x0210, r1
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	80 93 07 02 	sts	0x0207, r24
    2cec:	10 92 05 02 	sts	0x0205, r1
    2cf0:	0b c0       	rjmp	.+22     	; 0x2d08 <__vector_11+0x31e>
		else if (restart){restart=fFalse; flagUserClock=fFalse; flagUpdateGAVRClock=fTrue;}				//Gps didn't send valid data, we have valid data. This is redundant to the main
    2cf2:	80 91 0f 02 	lds	r24, 0x020F
    2cf6:	88 23       	and	r24, r24
    2cf8:	39 f0       	breq	.+14     	; 0x2d08 <__vector_11+0x31e>
    2cfa:	10 92 0f 02 	sts	0x020F, r1
    2cfe:	10 92 07 02 	sts	0x0207, r1
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	80 93 05 02 	sts	0x0205, r24
		__enableCommINT();																				//--procedure that depends on "if (restart)"
    2d08:	8d e3       	ldi	r24, 0x3D	; 61
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	2d e3       	ldi	r18, 0x3D	; 61
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	f9 01       	movw	r30, r18
    2d12:	20 81       	ld	r18, Z
    2d14:	24 60       	ori	r18, 0x04	; 4
    2d16:	fc 01       	movw	r30, r24
    2d18:	20 83       	st	Z, r18
    2d1a:	8d e6       	ldi	r24, 0x6D	; 109
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	22 e0       	ldi	r18, 0x02	; 2
    2d20:	fc 01       	movw	r30, r24
    2d22:	20 83       	st	Z, r18
		startupTimeout=0;
    2d24:	10 92 18 02 	sts	0x0218, r1
    2d28:	10 92 17 02 	sts	0x0217, r1
		flagGoToSleep=fTrue;
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	80 93 fe 01 	sts	0x01FE, r24
		flagNormalMode=fTrue;
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	80 93 00 02 	sts	0x0200, r24
    2d38:	12 c0       	rjmp	.+36     	; 0x2d5e <__vector_11+0x374>
	} else if (!(flagFreshStart || restart) && startupTimeout > 0){startupTimeout=0;}
    2d3a:	80 91 10 02 	lds	r24, 0x0210
    2d3e:	88 23       	and	r24, r24
    2d40:	71 f4       	brne	.+28     	; 0x2d5e <__vector_11+0x374>
    2d42:	80 91 0f 02 	lds	r24, 0x020F
    2d46:	88 23       	and	r24, r24
    2d48:	51 f4       	brne	.+20     	; 0x2d5e <__vector_11+0x374>
    2d4a:	80 91 17 02 	lds	r24, 0x0217
    2d4e:	90 91 18 02 	lds	r25, 0x0218
    2d52:	00 97       	sbiw	r24, 0x00	; 0
    2d54:	21 f0       	breq	.+8      	; 0x2d5e <__vector_11+0x374>
    2d56:	10 92 18 02 	sts	0x0218, r1
    2d5a:	10 92 17 02 	sts	0x0217, r1
	else;
	sei();
    2d5e:	78 94       	sei
}//End timer 2 overflow.
    2d60:	df 91       	pop	r29
    2d62:	cf 91       	pop	r28
    2d64:	ff 91       	pop	r31
    2d66:	ef 91       	pop	r30
    2d68:	bf 91       	pop	r27
    2d6a:	af 91       	pop	r26
    2d6c:	9f 91       	pop	r25
    2d6e:	8f 91       	pop	r24
    2d70:	7f 91       	pop	r23
    2d72:	6f 91       	pop	r22
    2d74:	5f 91       	pop	r21
    2d76:	4f 91       	pop	r20
    2d78:	3f 91       	pop	r19
    2d7a:	2f 91       	pop	r18
    2d7c:	0f 90       	pop	r0
    2d7e:	0f be       	out	0x3f, r0	; 63
    2d80:	0f 90       	pop	r0
    2d82:	1f 90       	pop	r1
    2d84:	18 95       	reti

00002d86 <main>:

/*--------------------------END-Interrupt Service Routines--------------------------------------------------------------------------------*/
/*--------------------------START-Main Program--------------------------------------------------------------------------------------------*/

int main(void)
{
    2d86:	cf 93       	push	r28
    2d88:	df 93       	push	r29
    2d8a:	cd b7       	in	r28, 0x3d	; 61
    2d8c:	de b7       	in	r29, 0x3e	; 62
	//Setup
	DeviceInit();
    2d8e:	0e 94 3a 18 	call	0x3074	; 0x3074 <_Z10DeviceInitv>
	AppInit(MYUBRR);
    2d92:	83 e3       	ldi	r24, 0x33	; 51
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	0e 94 61 18 	call	0x30c2	; 0x30c2 <_Z7AppInitj>
	EnableRTCTimer();
    2d9a:	0e 94 bd 19 	call	0x337a	; 0x337a <_Z14EnableRTCTimerv>
	InitBools();
    2d9e:	0e 94 92 19 	call	0x3324	; 0x3324 <_Z9InitBoolsv>
	getDateTime_eeprom(fTrue,fTrue);
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	61 e0       	ldi	r22, 0x01	; 1
    2da6:	0e 94 84 07 	call	0xf08	; 0xf08 <_Z18getDateTime_eepromhh>
	//Prep/make sure power/temp is good
	Wait_ms(2000);
    2daa:	80 ed       	ldi	r24, 0xD0	; 208
    2dac:	97 e0       	ldi	r25, 0x07	; 7
    2dae:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_Z7Wait_msi>
	//GetTemp();
	TakeADC();
    2db2:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <_Z7TakeADCv>
	flagGoodTemp=fTrue;
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	80 93 0d 02 	sts	0x020D, r24
	if (flagGoodVolts && flagGoodTemp){				//Good to power on system
    2dbc:	80 91 0e 02 	lds	r24, 0x020E
    2dc0:	88 23       	and	r24, r24
    2dc2:	e1 f0       	breq	.+56     	; 0x2dfc <main+0x76>
    2dc4:	80 91 0d 02 	lds	r24, 0x020D
    2dc8:	88 23       	and	r24, r24
    2dca:	c1 f0       	breq	.+48     	; 0x2dfc <main+0x76>
		PowerUp(POWER_UP_INTERVAL);
    2dcc:	83 e0       	ldi	r24, 0x03	; 3
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	0e 94 c4 1b 	call	0x3788	; 0x3788 <_Z7PowerUpj>
		__enableCommINT();
    2dd4:	8d e3       	ldi	r24, 0x3D	; 61
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	2d e3       	ldi	r18, 0x3D	; 61
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	f9 01       	movw	r30, r18
    2dde:	20 81       	ld	r18, Z
    2de0:	24 60       	ori	r18, 0x04	; 4
    2de2:	fc 01       	movw	r30, r24
    2de4:	20 83       	st	Z, r18
    2de6:	8d e6       	ldi	r24, 0x6D	; 109
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	22 e0       	ldi	r18, 0x02	; 2
    2dec:	fc 01       	movw	r30, r24
    2dee:	20 83       	st	Z, r18
		flagFreshStart=fTrue;
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	80 93 10 02 	sts	0x0210, r24
		flagShutdown=fFalse;
    2df6:	10 92 0c 02 	sts	0x020C, r1
    2dfa:	0d c0       	rjmp	.+26     	; 0x2e16 <main+0x90>
	} else {										//Something isn't right, don't power on the system.
		__killCommINT();
    2dfc:	8d e3       	ldi	r24, 0x3D	; 61
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	fc 01       	movw	r30, r24
    2e02:	10 82       	st	Z, r1
    2e04:	8d e6       	ldi	r24, 0x6D	; 109
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	fc 01       	movw	r30, r24
    2e0a:	10 82       	st	Z, r1
		flagShutdown=fTrue;
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	80 93 0c 02 	sts	0x020C, r24
		flagFreshStart=fFalse;
    2e12:	10 92 10 02 	sts	0x0210, r1
	}
	
	prtSTATUSled |= (1 << bnSTATUSled);
    2e16:	88 e2       	ldi	r24, 0x28	; 40
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	28 e2       	ldi	r18, 0x28	; 40
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	f9 01       	movw	r30, r18
    2e20:	20 81       	ld	r18, Z
    2e22:	24 60       	ori	r18, 0x04	; 4
    2e24:	fc 01       	movw	r30, r24
    2e26:	20 83       	st	Z, r18
    2e28:	01 c0       	rjmp	.+2      	; 0x2e2c <main+0xa6>
	//main programming loop
	while(fTrue)
    2e2a:	00 00       	nop
	{		
		//If receiving UART string, go get rest of it.
		if (flagReceivingBone){
    2e2c:	80 91 ff 01 	lds	r24, 0x01FF
    2e30:	88 23       	and	r24, r24
    2e32:	d1 f0       	breq	.+52     	; 0x2e68 <main+0xe2>
			ReceiveBone();
    2e34:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <_Z11ReceiveBonev>
			Wait_sec(4);
    2e38:	84 e0       	ldi	r24, 0x04	; 4
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	0e 94 98 08 	call	0x1130	; 0x1130 <_Z8Wait_seci>
			__enableCommINT();
    2e40:	8d e3       	ldi	r24, 0x3D	; 61
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	2d e3       	ldi	r18, 0x3D	; 61
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	f9 01       	movw	r30, r18
    2e4a:	20 81       	ld	r18, Z
    2e4c:	24 60       	ori	r18, 0x04	; 4
    2e4e:	fc 01       	movw	r30, r24
    2e50:	20 83       	st	Z, r18
    2e52:	8d e6       	ldi	r24, 0x6D	; 109
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	22 e0       	ldi	r18, 0x02	; 2
    2e58:	fc 01       	movw	r30, r24
    2e5a:	20 83       	st	Z, r18
			flagGoToSleep=fTrue;
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	80 93 fe 01 	sts	0x01FE, r24
			flagNormalMode=fTrue;
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	80 93 00 02 	sts	0x0200, r24
		}//end flag Receiving from Bone 
		
		//Receiving Data/Signals from GAVR
		if (flagReceivingGAVR && !flagReceivingBone){
    2e68:	80 91 01 02 	lds	r24, 0x0201
    2e6c:	88 23       	and	r24, r24
    2e6e:	31 f1       	breq	.+76     	; 0x2ebc <main+0x136>
    2e70:	80 91 ff 01 	lds	r24, 0x01FF
    2e74:	88 23       	and	r24, r24
    2e76:	11 f5       	brne	.+68     	; 0x2ebc <main+0x136>
			PrintBone("Receiving from WAVR.");
    2e78:	83 eb       	ldi	r24, 0xB3	; 179
    2e7a:	91 e0       	ldi	r25, 0x01	; 1
    2e7c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
			ReceiveGAVR();
    2e80:	0e 94 06 0c 	call	0x180c	; 0x180c <_Z11ReceiveGAVRv>
			Wait_sec(4);			
    2e84:	84 e0       	ldi	r24, 0x04	; 4
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	0e 94 98 08 	call	0x1130	; 0x1130 <_Z8Wait_seci>
			__enableCommINT();	
    2e8c:	8d e3       	ldi	r24, 0x3D	; 61
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	2d e3       	ldi	r18, 0x3D	; 61
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	f9 01       	movw	r30, r18
    2e96:	20 81       	ld	r18, Z
    2e98:	24 60       	ori	r18, 0x04	; 4
    2e9a:	fc 01       	movw	r30, r24
    2e9c:	20 83       	st	Z, r18
    2e9e:	8d e6       	ldi	r24, 0x6D	; 109
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	22 e0       	ldi	r18, 0x02	; 2
    2ea4:	fc 01       	movw	r30, r24
    2ea6:	20 83       	st	Z, r18
			if (!flagReceivingBone){
    2ea8:	80 91 ff 01 	lds	r24, 0x01FF
    2eac:	88 23       	and	r24, r24
    2eae:	31 f4       	brne	.+12     	; 0x2ebc <main+0x136>
				flagGoToSleep=fTrue;
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	80 93 fe 01 	sts	0x01FE, r24
				flagNormalMode=fTrue;
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	80 93 00 02 	sts	0x0200, r24
			}
		}//end flag Receiving from GAVR case
		
		//Communication with GAVR. Either updating the date/time on it or asking for date and time. The internal send machine deals with the flags.
		if ((flagUpdateGAVRClock  || flagUserClock) && !flagWaitingForReceiveGAVR && !flagReceivingBone && !flagReceivingGAVR){
    2ebc:	80 91 05 02 	lds	r24, 0x0205
    2ec0:	88 23       	and	r24, r24
    2ec2:	21 f4       	brne	.+8      	; 0x2ecc <main+0x146>
    2ec4:	80 91 07 02 	lds	r24, 0x0207
    2ec8:	88 23       	and	r24, r24
    2eca:	61 f1       	breq	.+88     	; 0x2f24 <main+0x19e>
    2ecc:	80 91 02 02 	lds	r24, 0x0202
    2ed0:	88 23       	and	r24, r24
    2ed2:	41 f5       	brne	.+80     	; 0x2f24 <main+0x19e>
    2ed4:	80 91 ff 01 	lds	r24, 0x01FF
    2ed8:	88 23       	and	r24, r24
    2eda:	21 f5       	brne	.+72     	; 0x2f24 <main+0x19e>
    2edc:	80 91 01 02 	lds	r24, 0x0201
    2ee0:	88 23       	and	r24, r24
    2ee2:	01 f5       	brne	.+64     	; 0x2f24 <main+0x19e>
			PrintBone("SendingG.");
    2ee4:	88 ec       	ldi	r24, 0xC8	; 200
    2ee6:	91 e0       	ldi	r25, 0x01	; 1
    2ee8:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z9PrintBonePc>
			__killCommINT();
    2eec:	8d e3       	ldi	r24, 0x3D	; 61
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	fc 01       	movw	r30, r24
    2ef2:	10 82       	st	Z, r1
    2ef4:	8d e6       	ldi	r24, 0x6D	; 109
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	fc 01       	movw	r30, r24
    2efa:	10 82       	st	Z, r1
			sendGAVR();
    2efc:	0e 94 cc 09 	call	0x1398	; 0x1398 <_Z8sendGAVRv>
			Wait_sec(4);
    2f00:	84 e0       	ldi	r24, 0x04	; 4
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	0e 94 98 08 	call	0x1130	; 0x1130 <_Z8Wait_seci>
			__enableCommINT();
    2f08:	8d e3       	ldi	r24, 0x3D	; 61
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	2d e3       	ldi	r18, 0x3D	; 61
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	f9 01       	movw	r30, r18
    2f12:	20 81       	ld	r18, Z
    2f14:	24 60       	ori	r18, 0x04	; 4
    2f16:	fc 01       	movw	r30, r24
    2f18:	20 83       	st	Z, r18
    2f1a:	8d e6       	ldi	r24, 0x6D	; 109
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	22 e0       	ldi	r18, 0x02	; 2
    2f20:	fc 01       	movw	r30, r24
    2f22:	20 83       	st	Z, r18
		}//end send to GAVR case

		//When to save to EEPROM. Saves time on lower half of the hour, saves data and time on lower half-hour of midday.
		if (flagNormalMode){
    2f24:	80 91 00 02 	lds	r24, 0x0200
    2f28:	88 23       	and	r24, r24
    2f2a:	49 f1       	breq	.+82     	; 0x2f7e <main+0x1f8>
			if (currentTime.getMinutes()%30 == 0){
    2f2c:	86 ed       	ldi	r24, 0xD6	; 214
    2f2e:	91 e0       	ldi	r25, 0x01	; 1
    2f30:	0e 94 a5 04 	call	0x94a	; 0x94a <_ZN6myTime10getMinutesEv>
    2f34:	9e e1       	ldi	r25, 0x1E	; 30
    2f36:	69 2f       	mov	r22, r25
    2f38:	0e 94 94 1c 	call	0x3928	; 0x3928 <__udivmodqi4>
    2f3c:	89 2f       	mov	r24, r25
    2f3e:	98 2f       	mov	r25, r24
    2f40:	81 e0       	ldi	r24, 0x01	; 1
    2f42:	99 23       	and	r25, r25
    2f44:	09 f0       	breq	.+2      	; 0x2f48 <main+0x1c2>
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	88 23       	and	r24, r24
    2f4a:	c9 f0       	breq	.+50     	; 0x2f7e <main+0x1f8>
				if (currentTime.getHours()%12 == 0){
    2f4c:	86 ed       	ldi	r24, 0xD6	; 214
    2f4e:	91 e0       	ldi	r25, 0x01	; 1
    2f50:	0e 94 b6 04 	call	0x96c	; 0x96c <_ZN6myTime8getHoursEv>
    2f54:	9c e0       	ldi	r25, 0x0C	; 12
    2f56:	69 2f       	mov	r22, r25
    2f58:	0e 94 94 1c 	call	0x3928	; 0x3928 <__udivmodqi4>
    2f5c:	89 2f       	mov	r24, r25
    2f5e:	98 2f       	mov	r25, r24
    2f60:	81 e0       	ldi	r24, 0x01	; 1
    2f62:	99 23       	and	r25, r25
    2f64:	09 f0       	breq	.+2      	; 0x2f68 <main+0x1e2>
    2f66:	80 e0       	ldi	r24, 0x00	; 0
    2f68:	88 23       	and	r24, r24
    2f6a:	29 f0       	breq	.+10     	; 0x2f76 <main+0x1f0>
					saveDateTime_eeprom(fTrue,fTrue);
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	61 e0       	ldi	r22, 0x01	; 1
    2f70:	0e 94 3c 08 	call	0x1078	; 0x1078 <_Z19saveDateTime_eepromhh>
    2f74:	04 c0       	rjmp	.+8      	; 0x2f7e <main+0x1f8>
				} else {
					saveDateTime_eeprom(fTrue,fFalse);
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	60 e0       	ldi	r22, 0x00	; 0
    2f7a:	0e 94 3c 08 	call	0x1078	; 0x1078 <_Z19saveDateTime_eepromhh>
				}	
			}						
		}//end time capture/save

		//Take ADC reading to check battery level, temp to check board temperature.
		if (flagNormalMode){
    2f7e:	80 91 00 02 	lds	r24, 0x0200
    2f82:	88 23       	and	r24, r24
    2f84:	09 f1       	breq	.+66     	; 0x2fc8 <main+0x242>
			TakeADC();
    2f86:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <_Z7TakeADCv>
			//GetTemp();
			flagGoodTemp=fTrue;
    2f8a:	81 e0       	ldi	r24, 0x01	; 1
    2f8c:	80 93 0d 02 	sts	0x020D, r24
			//If both are good & shutdown is low, keep it low. If shutdown is high, pull low and enable restart
			if (flagGoodVolts && flagGoodTemp){
    2f90:	80 91 0e 02 	lds	r24, 0x020E
    2f94:	88 23       	and	r24, r24
    2f96:	71 f0       	breq	.+28     	; 0x2fb4 <main+0x22e>
    2f98:	80 91 0d 02 	lds	r24, 0x020D
    2f9c:	88 23       	and	r24, r24
    2f9e:	51 f0       	breq	.+20     	; 0x2fb4 <main+0x22e>
				if(flagShutdown){restart = fTrue; flagShutdown=fFalse;}
    2fa0:	80 91 0c 02 	lds	r24, 0x020C
    2fa4:	88 23       	and	r24, r24
    2fa6:	81 f0       	breq	.+32     	; 0x2fc8 <main+0x242>
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	80 93 0f 02 	sts	0x020F, r24
    2fae:	10 92 0c 02 	sts	0x020C, r1
    2fb2:	0a c0       	rjmp	.+20     	; 0x2fc8 <main+0x242>
			//If one is bad and shutdown is low, pull high as well as pull new shutdown high to indicate imminent power kill
			} else {
				if (!flagShutdown){
    2fb4:	80 91 0c 02 	lds	r24, 0x020C
    2fb8:	88 23       	and	r24, r24
    2fba:	31 f4       	brne	.+12     	; 0x2fc8 <main+0x242>
					flagNewShutdown = fTrue;
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	80 93 0b 02 	sts	0x020B, r24
					flagShutdown=fTrue;
    2fc2:	81 e0       	ldi	r24, 0x01	; 1
    2fc4:	80 93 0c 02 	sts	0x020C, r24
				}
			}
		}//end normal mode Check Analog Signals		
		
		//About to shutdown, save EEPROM
		if (flagNewShutdown){
    2fc8:	80 91 0b 02 	lds	r24, 0x020B
    2fcc:	88 23       	and	r24, r24
    2fce:	b9 f0       	breq	.+46     	; 0x2ffe <main+0x278>
			//Make sure nothing messes with the routine that we care about
			__killCommINT();
    2fd0:	8d e3       	ldi	r24, 0x3D	; 61
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	fc 01       	movw	r30, r24
    2fd6:	10 82       	st	Z, r1
    2fd8:	8d e6       	ldi	r24, 0x6D	; 109
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	fc 01       	movw	r30, r24
    2fde:	10 82       	st	Z, r1
			flagGoToSleep = fTrue;
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	80 93 fe 01 	sts	0x01FE, r24
			flagReceivingBone = fFalse;
    2fe6:	10 92 ff 01 	sts	0x01FF, r1
			flagUserClock=fFalse;						//reset this so next boot is correct. Done in restart case as well for redundancy
    2fea:	10 92 07 02 	sts	0x0207, r1
			saveDateTime_eeprom(fTrue,fTrue);
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	61 e0       	ldi	r22, 0x01	; 1
    2ff2:	0e 94 3c 08 	call	0x1078	; 0x1078 <_Z19saveDateTime_eepromhh>
			
			//Kill power--Alert comes in that function
			PowerDown();
    2ff6:	0e 94 1a 1c 	call	0x3834	; 0x3834 <_Z9PowerDownv>
			flagNewShutdown = fFalse;
    2ffa:	10 92 0b 02 	sts	0x020B, r1
		}//end new shutdown
		
		//If Restart, broadcast date and time to BeagleBone and other AVR
		if (restart){
    2ffe:	80 91 0f 02 	lds	r24, 0x020F
    3002:	88 23       	and	r24, r24
    3004:	c9 f0       	breq	.+50     	; 0x3038 <main+0x2b2>
			//Enable COmmunication protocols and then power up. Power up specifies the timing for it to happen	
			PowerUp(POWER_UP_INTERVAL);
    3006:	83 e0       	ldi	r24, 0x03	; 3
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	0e 94 c4 1b 	call	0x3788	; 0x3788 <_Z7PowerUpj>
			__enableCommINT();
    300e:	8d e3       	ldi	r24, 0x3D	; 61
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	2d e3       	ldi	r18, 0x3D	; 61
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	f9 01       	movw	r30, r18
    3018:	20 81       	ld	r18, Z
    301a:	24 60       	ori	r18, 0x04	; 4
    301c:	fc 01       	movw	r30, r24
    301e:	20 83       	st	Z, r18
    3020:	8d e6       	ldi	r24, 0x6D	; 109
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	22 e0       	ldi	r18, 0x02	; 2
    3026:	fc 01       	movw	r30, r24
    3028:	20 83       	st	Z, r18
			//Update the GAVRClock since it's a restart, we have the correct date and time. If BeagleBone sends GPS data, use that to back it up.
			flagUpdateGAVRClock=fTrue;
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	80 93 05 02 	sts	0x0205, r24
			flagUserClock=fFalse;	
    3030:	10 92 07 02 	sts	0x0207, r1
			restart=fFalse;	
    3034:	10 92 0f 02 	sts	0x020F, r1
		}//end restart		
		
		//If it's time to go to sleep, go to sleep. INT0 or TIM2_overflow will wake it up.
		if (flagGoToSleep && !flagUserClock){GoToSleep(flagShutdown);}
    3038:	80 91 fe 01 	lds	r24, 0x01FE
    303c:	88 23       	and	r24, r24
    303e:	41 f0       	breq	.+16     	; 0x3050 <main+0x2ca>
    3040:	80 91 07 02 	lds	r24, 0x0207
    3044:	88 23       	and	r24, r24
    3046:	21 f4       	brne	.+8      	; 0x3050 <main+0x2ca>
    3048:	80 91 0c 02 	lds	r24, 0x020C
    304c:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <_Z9GoToSleeph>
		
		//Add logic for an invalid date and time somehow getting in here
		if (flagInvalidDateTime && !flagShutdown){
    3050:	80 91 08 02 	lds	r24, 0x0208
    3054:	88 23       	and	r24, r24
    3056:	09 f4       	brne	.+2      	; 0x305a <main+0x2d4>
    3058:	e8 ce       	rjmp	.-560    	; 0x2e2a <main+0xa4>
    305a:	80 91 0c 02 	lds	r24, 0x020C
    305e:	88 23       	and	r24, r24
    3060:	09 f0       	breq	.+2      	; 0x3064 <main+0x2de>
    3062:	e3 ce       	rjmp	.-570    	; 0x2e2a <main+0xa4>
			flagInvalidDateTime=fFalse;
    3064:	10 92 08 02 	sts	0x0208, r1
			flagUserClock=fTrue;
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	80 93 07 02 	sts	0x0207, r24
			flagUpdateGAVRClock=fFalse;
    306e:	10 92 05 02 	sts	0x0205, r1
		flagFreshStart=fFalse;
	}
	
	prtSTATUSled |= (1 << bnSTATUSled);
	//main programming loop
	while(fTrue)
    3072:	db ce       	rjmp	.-586    	; 0x2e2a <main+0xa4>

00003074 <_Z10DeviceInitv>:

/*--------------------------END-Main Program-------------------------------------------------------------------------------------*/
/*--------------------------START-Public Funtions--------------------------------------------------------------------------------*/

/*************************************************************************************************************/
void DeviceInit(){
    3074:	cf 93       	push	r28
    3076:	df 93       	push	r29
    3078:	cd b7       	in	r28, 0x3d	; 61
    307a:	de b7       	in	r29, 0x3e	; 62
	//Set all ports to input with no pull
	DDRA = 0;
    307c:	81 e2       	ldi	r24, 0x21	; 33
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	fc 01       	movw	r30, r24
    3082:	10 82       	st	Z, r1
	DDRB = 0;
    3084:	84 e2       	ldi	r24, 0x24	; 36
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	fc 01       	movw	r30, r24
    308a:	10 82       	st	Z, r1
	DDRC = 0;
    308c:	87 e2       	ldi	r24, 0x27	; 39
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	fc 01       	movw	r30, r24
    3092:	10 82       	st	Z, r1
	DDRD = 0;
    3094:	8a e2       	ldi	r24, 0x2A	; 42
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	fc 01       	movw	r30, r24
    309a:	10 82       	st	Z, r1
	
	PORTA = 0;
    309c:	82 e2       	ldi	r24, 0x22	; 34
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	fc 01       	movw	r30, r24
    30a2:	10 82       	st	Z, r1
	PORTB = 0;
    30a4:	85 e2       	ldi	r24, 0x25	; 37
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	fc 01       	movw	r30, r24
    30aa:	10 82       	st	Z, r1
	PORTC = 0;
    30ac:	88 e2       	ldi	r24, 0x28	; 40
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	fc 01       	movw	r30, r24
    30b2:	10 82       	st	Z, r1
	PORTD = 0;
    30b4:	8b e2       	ldi	r24, 0x2B	; 43
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	fc 01       	movw	r30, r24
    30ba:	10 82       	st	Z, r1
}
    30bc:	df 91       	pop	r29
    30be:	cf 91       	pop	r28
    30c0:	08 95       	ret

000030c2 <_Z7AppInitj>:
/*************************************************************************************************************/
void AppInit(unsigned int ubrr){
    30c2:	cf 93       	push	r28
    30c4:	df 93       	push	r29
    30c6:	00 d0       	rcall	.+0      	; 0x30c8 <_Z7AppInitj+0x6>
    30c8:	cd b7       	in	r28, 0x3d	; 61
    30ca:	de b7       	in	r29, 0x3e	; 62
    30cc:	9a 83       	std	Y+2, r25	; 0x02
    30ce:	89 83       	std	Y+1, r24	; 0x01
	
	//Set BAUD rate of UART
	UBRR0L = ubrr;   												//set low byte of baud rate
    30d0:	84 ec       	ldi	r24, 0xC4	; 196
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	29 81       	ldd	r18, Y+1	; 0x01
    30d6:	fc 01       	movw	r30, r24
    30d8:	20 83       	st	Z, r18
	UBRR0H = (ubrr >> 8);											//set high byte of baud rate
    30da:	85 ec       	ldi	r24, 0xC5	; 197
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	29 81       	ldd	r18, Y+1	; 0x01
    30e0:	3a 81       	ldd	r19, Y+2	; 0x02
    30e2:	23 2f       	mov	r18, r19
    30e4:	33 27       	eor	r19, r19
    30e6:	fc 01       	movw	r30, r24
    30e8:	20 83       	st	Z, r18
	//UCSR0A |= (1 << U2X0);										//set high speed baud clock, in ASYNC mode
	
	//Enable UART_TX0 and UART_RX0
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);
    30ea:	81 ec       	ldi	r24, 0xC1	; 193
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	28 e1       	ldi	r18, 0x18	; 24
    30f0:	fc 01       	movw	r30, r24
    30f2:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);							//Asynchronous; 8 data bits, no parity
    30f4:	82 ec       	ldi	r24, 0xC2	; 194
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	26 e0       	ldi	r18, 0x06	; 6
    30fa:	fc 01       	movw	r30, r24
    30fc:	20 83       	st	Z, r18
	//UCSR0B |= (1 << RXCIE0);
	
	//Set BAUD for UART1
	UBRR1L = ubrr;
    30fe:	8c ec       	ldi	r24, 0xCC	; 204
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	29 81       	ldd	r18, Y+1	; 0x01
    3104:	fc 01       	movw	r30, r24
    3106:	20 83       	st	Z, r18
	UBRR1H = (ubrr >> 8);
    3108:	8d ec       	ldi	r24, 0xCD	; 205
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	29 81       	ldd	r18, Y+1	; 0x01
    310e:	3a 81       	ldd	r19, Y+2	; 0x02
    3110:	23 2f       	mov	r18, r19
    3112:	33 27       	eor	r19, r19
    3114:	fc 01       	movw	r30, r24
    3116:	20 83       	st	Z, r18
	//UCSR1A |= (1 << U2X1);
	
	//Enable UART_TX1 and UART_RX1
	UCSR1B = (1 << TXEN1)|(1 << RXEN1);
    3118:	89 ec       	ldi	r24, 0xC9	; 201
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	28 e1       	ldi	r18, 0x18	; 24
    311e:	fc 01       	movw	r30, r24
    3120:	20 83       	st	Z, r18
	UCSR1C = (1 << UCSZ11)|(1 << UCSZ10);
    3122:	8a ec       	ldi	r24, 0xCA	; 202
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	26 e0       	ldi	r18, 0x06	; 6
    3128:	fc 01       	movw	r30, r24
    312a:	20 83       	st	Z, r18
	//UCSR1B |= (1 << RXCIE1);
	__killUARTrec();
    312c:	81 ec       	ldi	r24, 0xC1	; 193
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	21 ec       	ldi	r18, 0xC1	; 193
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	f9 01       	movw	r30, r18
    3136:	20 81       	ld	r18, Z
    3138:	20 68       	ori	r18, 0x80	; 128
    313a:	fc 01       	movw	r30, r24
    313c:	20 83       	st	Z, r18
    313e:	89 ec       	ldi	r24, 0xC9	; 201
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	29 ec       	ldi	r18, 0xC9	; 201
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	f9 01       	movw	r30, r18
    3148:	20 81       	ld	r18, Z
    314a:	20 68       	ori	r18, 0x80	; 128
    314c:	fc 01       	movw	r30, r24
    314e:	20 83       	st	Z, r18
	
	//Disable power to all peripherals
	PRR0 |= (1 << PRTWI)|(1 << PRTIM0)|(1 << PRTIM1)|(1 << PRADC)|(1 << PRSPI);  //Turn EVERYTHING off initially except USART0(UART0)
    3150:	84 e6       	ldi	r24, 0x64	; 100
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	24 e6       	ldi	r18, 0x64	; 100
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	f9 01       	movw	r30, r18
    315a:	20 81       	ld	r18, Z
    315c:	2d 6a       	ori	r18, 0xAD	; 173
    315e:	fc 01       	movw	r30, r24
    3160:	20 83       	st	Z, r18

	//Enable status LEDs
	ddrSLEEPled |= (1 << bnSLEEPled);
    3162:	8a e2       	ldi	r24, 0x2A	; 42
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	2a e2       	ldi	r18, 0x2A	; 42
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	f9 01       	movw	r30, r18
    316c:	20 81       	ld	r18, Z
    316e:	20 68       	ori	r18, 0x80	; 128
    3170:	fc 01       	movw	r30, r24
    3172:	20 83       	st	Z, r18
	ddrSTATUSled |= (1 << bnSTATUSled);
    3174:	87 e2       	ldi	r24, 0x27	; 39
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	27 e2       	ldi	r18, 0x27	; 39
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	f9 01       	movw	r30, r18
    317e:	20 81       	ld	r18, Z
    3180:	24 60       	ori	r18, 0x04	; 4
    3182:	fc 01       	movw	r30, r24
    3184:	20 83       	st	Z, r18
	prtSLEEPled |= (1 << bnSLEEPled);	//turn off initially
    3186:	8b e2       	ldi	r24, 0x2B	; 43
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	2b e2       	ldi	r18, 0x2B	; 43
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	f9 01       	movw	r30, r18
    3190:	20 81       	ld	r18, Z
    3192:	20 68       	ori	r18, 0x80	; 128
    3194:	fc 01       	movw	r30, r24
    3196:	20 83       	st	Z, r18
	prtSTATUSled &= ~(1 << bnSTATUSled);	//turn on initially
    3198:	88 e2       	ldi	r24, 0x28	; 40
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	28 e2       	ldi	r18, 0x28	; 40
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	f9 01       	movw	r30, r18
    31a2:	20 81       	ld	r18, Z
    31a4:	2b 7f       	andi	r18, 0xFB	; 251
    31a6:	fc 01       	movw	r30, r24
    31a8:	20 83       	st	Z, r18
	
	//Enable BB and GAVR interrupts for COMMUNICATION
	ddrBONEINT |= (1 << bnBONEINT);
    31aa:	81 e2       	ldi	r24, 0x21	; 33
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	21 e2       	ldi	r18, 0x21	; 33
    31b0:	30 e0       	ldi	r19, 0x00	; 0
    31b2:	f9 01       	movw	r30, r18
    31b4:	20 81       	ld	r18, Z
    31b6:	22 60       	ori	r18, 0x02	; 2
    31b8:	fc 01       	movw	r30, r24
    31ba:	20 83       	st	Z, r18
	ddrGAVRINT |= (1 << bnGAVRINT);
    31bc:	84 e2       	ldi	r24, 0x24	; 36
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	24 e2       	ldi	r18, 0x24	; 36
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	f9 01       	movw	r30, r18
    31c6:	20 81       	ld	r18, Z
    31c8:	28 60       	ori	r18, 0x08	; 8
    31ca:	fc 01       	movw	r30, r24
    31cc:	20 83       	st	Z, r18
	prtBONEINT &= ~(1 << bnBONEINT);
    31ce:	82 e2       	ldi	r24, 0x22	; 34
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	22 e2       	ldi	r18, 0x22	; 34
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	f9 01       	movw	r30, r18
    31d8:	20 81       	ld	r18, Z
    31da:	2d 7f       	andi	r18, 0xFD	; 253
    31dc:	fc 01       	movw	r30, r24
    31de:	20 83       	st	Z, r18
	prtGAVRINT &= ~(1 << bnGAVRINT);
    31e0:	85 e2       	ldi	r24, 0x25	; 37
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	25 e2       	ldi	r18, 0x25	; 37
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	f9 01       	movw	r30, r18
    31ea:	20 81       	ld	r18, Z
    31ec:	27 7f       	andi	r18, 0xF7	; 247
    31ee:	fc 01       	movw	r30, r24
    31f0:	20 83       	st	Z, r18
	
	//Enable GAVR interrupt pin, our PB3, it's INT2
	ddrInterrupts |= (1 << bnGAVRint)|(1 << bnBBint);
    31f2:	81 e2       	ldi	r24, 0x21	; 33
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	21 e2       	ldi	r18, 0x21	; 33
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	f9 01       	movw	r30, r18
    31fc:	20 81       	ld	r18, Z
    31fe:	2c 60       	ori	r18, 0x0C	; 12
    3200:	fc 01       	movw	r30, r24
    3202:	20 83       	st	Z, r18
	prtInterrupts &= ~((1 << bnGAVRint)|(1 << bnBBint));
    3204:	82 e2       	ldi	r24, 0x22	; 34
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	22 e2       	ldi	r18, 0x22	; 34
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	f9 01       	movw	r30, r18
    320e:	20 81       	ld	r18, Z
    3210:	23 7f       	andi	r18, 0xF3	; 243
    3212:	fc 01       	movw	r30, r24
    3214:	20 83       	st	Z, r18
	
	//Enable enable signals
	ddrENABLE |= (1 << bnGPSen)|(1 << bnGAVRen)|(1 << bnLCDen)|(1 << bnBBen);
    3216:	81 e2       	ldi	r24, 0x21	; 33
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	21 e2       	ldi	r18, 0x21	; 33
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	f9 01       	movw	r30, r18
    3220:	20 81       	ld	r18, Z
    3222:	20 6f       	ori	r18, 0xF0	; 240
    3224:	fc 01       	movw	r30, r24
    3226:	20 83       	st	Z, r18
	ddrTEMPen |= (1 << bnTEMPen);
    3228:	84 e2       	ldi	r24, 0x24	; 36
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	24 e2       	ldi	r18, 0x24	; 36
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	f9 01       	movw	r30, r18
    3232:	20 81       	ld	r18, Z
    3234:	21 60       	ori	r18, 0x01	; 1
    3236:	fc 01       	movw	r30, r24
    3238:	20 83       	st	Z, r18
	ddrMAINen |= (1 << bnMAINen);
    323a:	87 e2       	ldi	r24, 0x27	; 39
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	27 e2       	ldi	r18, 0x27	; 39
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	f9 01       	movw	r30, r18
    3244:	20 81       	ld	r18, Z
    3246:	21 60       	ori	r18, 0x01	; 1
    3248:	fc 01       	movw	r30, r24
    324a:	20 83       	st	Z, r18
	__killMain();
    324c:	88 e2       	ldi	r24, 0x28	; 40
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	28 e2       	ldi	r18, 0x28	; 40
    3252:	30 e0       	ldi	r19, 0x00	; 0
    3254:	f9 01       	movw	r30, r18
    3256:	20 81       	ld	r18, Z
    3258:	2e 7f       	andi	r18, 0xFE	; 254
    325a:	fc 01       	movw	r30, r24
    325c:	20 83       	st	Z, r18
	__killBeagleBone();
    325e:	82 e2       	ldi	r24, 0x22	; 34
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	22 e2       	ldi	r18, 0x22	; 34
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	f9 01       	movw	r30, r18
    3268:	20 81       	ld	r18, Z
    326a:	2f 7e       	andi	r18, 0xEF	; 239
    326c:	fc 01       	movw	r30, r24
    326e:	20 83       	st	Z, r18
	__enableTemp();
    3270:	85 e2       	ldi	r24, 0x25	; 37
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	25 e2       	ldi	r18, 0x25	; 37
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	f9 01       	movw	r30, r18
    327a:	20 81       	ld	r18, Z
    327c:	21 60       	ori	r18, 0x01	; 1
    327e:	fc 01       	movw	r30, r24
    3280:	20 83       	st	Z, r18
	__killLCD();
    3282:	82 e2       	ldi	r24, 0x22	; 34
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	22 e2       	ldi	r18, 0x22	; 34
    3288:	30 e0       	ldi	r19, 0x00	; 0
    328a:	f9 01       	movw	r30, r18
    328c:	20 81       	ld	r18, Z
    328e:	2f 7d       	andi	r18, 0xDF	; 223
    3290:	fc 01       	movw	r30, r24
    3292:	20 83       	st	Z, r18
	__killGPSandGAVR();
    3294:	82 e2       	ldi	r24, 0x22	; 34
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	22 e2       	ldi	r18, 0x22	; 34
    329a:	30 e0       	ldi	r19, 0x00	; 0
    329c:	f9 01       	movw	r30, r18
    329e:	20 81       	ld	r18, Z
    32a0:	2f 73       	andi	r18, 0x3F	; 63
    32a2:	fc 01       	movw	r30, r24
    32a4:	20 83       	st	Z, r18

	
	//Enable INT2. Note* Pin change interrupts will NOT wake AVR from Power-Save mode. Only INT0-2 will.
	__killCommINT();
    32a6:	8d e3       	ldi	r24, 0x3D	; 61
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	fc 01       	movw	r30, r24
    32ac:	10 82       	st	Z, r1
    32ae:	8d e6       	ldi	r24, 0x6D	; 109
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	fc 01       	movw	r30, r24
    32b4:	10 82       	st	Z, r1
	EICRA = (1 << ISC21)|(1 << ISC20);			//falling edge of INT2 enables interrupt
    32b6:	89 e6       	ldi	r24, 0x69	; 105
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	20 e3       	ldi	r18, 0x30	; 48
    32bc:	fc 01       	movw	r30, r24
    32be:	20 83       	st	Z, r18
	//Enable PCINT17
	PCICR |= (1 << PCIE2);
    32c0:	88 e6       	ldi	r24, 0x68	; 104
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	28 e6       	ldi	r18, 0x68	; 104
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	f9 01       	movw	r30, r18
    32ca:	20 81       	ld	r18, Z
    32cc:	24 60       	ori	r18, 0x04	; 4
    32ce:	fc 01       	movw	r30, r24
    32d0:	20 83       	st	Z, r18
	
	//Enable SPI for TI temperature
	ddrSpi0 |= (1 << bnMosi0)|(1 << bnSck0)|(1 << bnSS0);	//outputs
    32d2:	84 e2       	ldi	r24, 0x24	; 36
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	24 e2       	ldi	r18, 0x24	; 36
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	f9 01       	movw	r30, r18
    32dc:	20 81       	ld	r18, Z
    32de:	20 6b       	ori	r18, 0xB0	; 176
    32e0:	fc 01       	movw	r30, r24
    32e2:	20 83       	st	Z, r18
	ddrSpi0 &= ~(1 << bnMiso0);
    32e4:	84 e2       	ldi	r24, 0x24	; 36
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	24 e2       	ldi	r18, 0x24	; 36
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	f9 01       	movw	r30, r18
    32ee:	20 81       	ld	r18, Z
    32f0:	2f 7b       	andi	r18, 0xBF	; 191
    32f2:	fc 01       	movw	r30, r24
    32f4:	20 83       	st	Z, r18
	prtSpi0 |= (1 << bnSS0)|(1 << bnSck0);		//keep SS and SCK high
    32f6:	85 e2       	ldi	r24, 0x25	; 37
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	25 e2       	ldi	r18, 0x25	; 37
    32fc:	30 e0       	ldi	r19, 0x00	; 0
    32fe:	f9 01       	movw	r30, r18
    3300:	20 81       	ld	r18, Z
    3302:	20 69       	ori	r18, 0x90	; 144
    3304:	fc 01       	movw	r30, r24
    3306:	20 83       	st	Z, r18
	prtSpi0 &= ~(1 << bnMosi0);		//keep Miso low
    3308:	85 e2       	ldi	r24, 0x25	; 37
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	25 e2       	ldi	r18, 0x25	; 37
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	f9 01       	movw	r30, r18
    3312:	20 81       	ld	r18, Z
    3314:	2f 7d       	andi	r18, 0xDF	; 223
    3316:	fc 01       	movw	r30, r24
    3318:	20 83       	st	Z, r18
	
}
    331a:	0f 90       	pop	r0
    331c:	0f 90       	pop	r0
    331e:	df 91       	pop	r29
    3320:	cf 91       	pop	r28
    3322:	08 95       	ret

00003324 <_Z9InitBoolsv>:
/*************************************************************************************************************/
void InitBools(){
    3324:	cf 93       	push	r28
    3326:	df 93       	push	r29
    3328:	cd b7       	in	r28, 0x3d	; 61
    332a:	de b7       	in	r29, 0x3e	; 62
	//Init variables
	flagGoToSleep = fTrue;			//changes to fTrue in final implementation
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	80 93 fe 01 	sts	0x01FE, r24
	flagReceivingBone = fFalse;
    3332:	10 92 ff 01 	sts	0x01FF, r1
	flagNormalMode=fTrue;
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	80 93 00 02 	sts	0x0200, r24
	flagReceivingGAVR=fFalse;
    333c:	10 92 01 02 	sts	0x0201, r1
	flagWaitingForReceiveGAVR=fFalse;
    3340:	10 92 02 02 	sts	0x0202, r1
	flagWaitingForSYNGAVR=fFalse;
    3344:	10 92 03 02 	sts	0x0203, r1
	flagWaitingForSYNBone=fFalse;
    3348:	10 92 04 02 	sts	0x0204, r1

	flagUpdateGAVRClock=fFalse;
    334c:	10 92 05 02 	sts	0x0205, r1
	flagSendingGAVR=fFalse;
    3350:	10 92 06 02 	sts	0x0206, r1
	flagUserClock=fFalse;
    3354:	10 92 07 02 	sts	0x0207, r1
	flagInvalidDateTime=fFalse;
    3358:	10 92 08 02 	sts	0x0208, r1
	flagWaitingToSendGAVR=fFalse;
    335c:	10 92 09 02 	sts	0x0209, r1
	flagGPSTime=fFalse;
    3360:	10 92 0a 02 	sts	0x020A, r1
	
	restart=fFalse;
    3364:	10 92 0f 02 	sts	0x020F, r1
	//flagNewShutdown=fFalse;
	flagShutdown=fFalse;		//Initialized in startup procedure in beginning of "main"
    3368:	10 92 0c 02 	sts	0x020C, r1
	flagGoodVolts=fFalse;
    336c:	10 92 0e 02 	sts	0x020E, r1
	flagGoodTemp=fFalse;
    3370:	10 92 0d 02 	sts	0x020D, r1
	//flagFreshStart=fTrue;		//Initialized in startup procedure in beginning of "main"
}
    3374:	df 91       	pop	r29
    3376:	cf 91       	pop	r28
    3378:	08 95       	ret

0000337a <_Z14EnableRTCTimerv>:
/*************************************************************************************************************/
void EnableRTCTimer(){
    337a:	cf 93       	push	r28
    337c:	df 93       	push	r29
    337e:	cd b7       	in	r28, 0x3d	; 61
    3380:	de b7       	in	r29, 0x3e	; 62
	//Asynchronous should be done based on TOSC1 and TOSC2
	//Give power back to Timer2
	PRR0 &= ~(1 << PRTIM2);
    3382:	84 e6       	ldi	r24, 0x64	; 100
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	24 e6       	ldi	r18, 0x64	; 100
    3388:	30 e0       	ldi	r19, 0x00	; 0
    338a:	f9 01       	movw	r30, r18
    338c:	20 81       	ld	r18, Z
    338e:	2f 7b       	andi	r18, 0xBF	; 191
    3390:	fc 01       	movw	r30, r24
    3392:	20 83       	st	Z, r18
	Wait_ms(5);	//give it time to power on
    3394:	85 e0       	ldi	r24, 0x05	; 5
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_Z7Wait_msi>
	
	//Set to Asynchronous mode, uses TOSC1/TOSC2 pins
	ASSR |= (1 << AS2);
    339c:	86 eb       	ldi	r24, 0xB6	; 182
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	26 eb       	ldi	r18, 0xB6	; 182
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	f9 01       	movw	r30, r18
    33a6:	20 81       	ld	r18, Z
    33a8:	20 62       	ori	r18, 0x20	; 32
    33aa:	fc 01       	movw	r30, r24
    33ac:	20 83       	st	Z, r18
	
	//Set prescaler, initialize registers
	TCCR2B |= (1 << CS22)|(1 << CS20);	//128 prescaler, should click into overflow every second
    33ae:	81 eb       	ldi	r24, 0xB1	; 177
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	21 eb       	ldi	r18, 0xB1	; 177
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	f9 01       	movw	r30, r18
    33b8:	20 81       	ld	r18, Z
    33ba:	25 60       	ori	r18, 0x05	; 5
    33bc:	fc 01       	movw	r30, r24
    33be:	20 83       	st	Z, r18
	while ((ASSR & ((1 << TCR2BUB)|(1 << TCN2UB))));	//wait for it not to be busy
    33c0:	86 eb       	ldi	r24, 0xB6	; 182
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	fc 01       	movw	r30, r24
    33c6:	80 81       	ld	r24, Z
    33c8:	88 2f       	mov	r24, r24
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	81 71       	andi	r24, 0x11	; 17
    33ce:	90 70       	andi	r25, 0x00	; 0
    33d0:	21 e0       	ldi	r18, 0x01	; 1
    33d2:	00 97       	sbiw	r24, 0x00	; 0
    33d4:	09 f4       	brne	.+2      	; 0x33d8 <_Z14EnableRTCTimerv+0x5e>
    33d6:	20 e0       	ldi	r18, 0x00	; 0
    33d8:	22 23       	and	r18, r18
    33da:	91 f7       	brne	.-28     	; 0x33c0 <_Z14EnableRTCTimerv+0x46>
	TIFR2 = (1 << TOV2);								//Clear any interrupts pending for the timer
    33dc:	87 e3       	ldi	r24, 0x37	; 55
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	21 e0       	ldi	r18, 0x01	; 1
    33e2:	fc 01       	movw	r30, r24
    33e4:	20 83       	st	Z, r18
	TIMSK2 = (1 << TOIE2);								//Enable overflow on it
    33e6:	80 e7       	ldi	r24, 0x70	; 112
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	21 e0       	ldi	r18, 0x01	; 1
    33ec:	fc 01       	movw	r30, r24
    33ee:	20 83       	st	Z, r18
	
	//Away we go
}
    33f0:	df 91       	pop	r29
    33f2:	cf 91       	pop	r28
    33f4:	08 95       	ret

000033f6 <_Z9GoToSleeph>:

/*************************************************************************************************************/

void GoToSleep(BOOL shortOrLong){
    33f6:	cf 93       	push	r28
    33f8:	df 93       	push	r29
    33fa:	00 d0       	rcall	.+0      	; 0x33fc <_Z9GoToSleeph+0x6>
    33fc:	00 d0       	rcall	.+0      	; 0x33fe <_Z9GoToSleeph+0x8>
    33fe:	0f 92       	push	r0
    3400:	cd b7       	in	r28, 0x3d	; 61
    3402:	de b7       	in	r29, 0x3e	; 62
    3404:	8d 83       	std	Y+5, r24	; 0x05
		sei();
    3406:	78 94       	sei
		int sleepTime, sleepTicks = 0;
    3408:	1c 82       	std	Y+4, r1	; 0x04
    340a:	1b 82       	std	Y+3, r1	; 0x03
		//If bool is true, we are in low power mode/backup, sleep for 60 seconds then check ADC again
		if (shortOrLong){
    340c:	8d 81       	ldd	r24, Y+5	; 0x05
    340e:	88 23       	and	r24, r24
    3410:	29 f0       	breq	.+10     	; 0x341c <_Z9GoToSleeph+0x26>
			sleepTime = SLEEP_TICKS_LOWV;
    3412:	8c e0       	ldi	r24, 0x0C	; 12
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	9a 83       	std	Y+2, r25	; 0x02
    3418:	89 83       	std	Y+1, r24	; 0x01
    341a:	04 c0       	rjmp	.+8      	; 0x3424 <_Z9GoToSleeph+0x2e>
		} else {
			sleepTime = SLEEP_TICKS_HIGHV;
    341c:	8a e0       	ldi	r24, 0x0A	; 10
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	9a 83       	std	Y+2, r25	; 0x02
    3422:	89 83       	std	Y+1, r24	; 0x01
		}
		//Turn off status LED, put on TIM2 led
		prtSTATUSled &= ~(1 << bnSTATUSled);
    3424:	88 e2       	ldi	r24, 0x28	; 40
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	28 e2       	ldi	r18, 0x28	; 40
    342a:	30 e0       	ldi	r19, 0x00	; 0
    342c:	f9 01       	movw	r30, r18
    342e:	20 81       	ld	r18, Z
    3430:	2b 7f       	andi	r18, 0xFB	; 251
    3432:	fc 01       	movw	r30, r24
    3434:	20 83       	st	Z, r18
		
		//Set to power save, then enable
		SMCR = (1 << SM1)|(1 << SM0);
    3436:	83 e5       	ldi	r24, 0x53	; 83
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	26 e0       	ldi	r18, 0x06	; 6
    343c:	fc 01       	movw	r30, r24
    343e:	20 83       	st	Z, r18
		SMCR |= (1 << SE);
    3440:	83 e5       	ldi	r24, 0x53	; 83
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	23 e5       	ldi	r18, 0x53	; 83
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	f9 01       	movw	r30, r18
    344a:	20 81       	ld	r18, Z
    344c:	21 60       	ori	r18, 0x01	; 1
    344e:	fc 01       	movw	r30, r24
    3450:	20 83       	st	Z, r18
		
		//Give time to registers
		Wait_ms(1);
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_Z7Wait_msi>
		//Go to sleep
		while (sleepTicks < sleepTime && flagGoToSleep){
    345a:	06 c0       	rjmp	.+12     	; 0x3468 <_Z9GoToSleeph+0x72>
			asm volatile("SLEEP");
    345c:	88 95       	sleep
			sleepTicks++;
    345e:	8b 81       	ldd	r24, Y+3	; 0x03
    3460:	9c 81       	ldd	r25, Y+4	; 0x04
    3462:	01 96       	adiw	r24, 0x01	; 1
    3464:	9c 83       	std	Y+4, r25	; 0x04
    3466:	8b 83       	std	Y+3, r24	; 0x03
		SMCR |= (1 << SE);
		
		//Give time to registers
		Wait_ms(1);
		//Go to sleep
		while (sleepTicks < sleepTime && flagGoToSleep){
    3468:	2b 81       	ldd	r18, Y+3	; 0x03
    346a:	3c 81       	ldd	r19, Y+4	; 0x04
    346c:	89 81       	ldd	r24, Y+1	; 0x01
    346e:	9a 81       	ldd	r25, Y+2	; 0x02
    3470:	28 17       	cp	r18, r24
    3472:	39 07       	cpc	r19, r25
    3474:	34 f4       	brge	.+12     	; 0x3482 <_Z9GoToSleeph+0x8c>
    3476:	80 91 fe 01 	lds	r24, 0x01FE
    347a:	88 23       	and	r24, r24
    347c:	11 f0       	breq	.+4      	; 0x3482 <_Z9GoToSleeph+0x8c>
    347e:	81 e0       	ldi	r24, 0x01	; 1
    3480:	01 c0       	rjmp	.+2      	; 0x3484 <_Z9GoToSleeph+0x8e>
    3482:	80 e0       	ldi	r24, 0x00	; 0
    3484:	88 23       	and	r24, r24
    3486:	51 f7       	brne	.-44     	; 0x345c <_Z9GoToSleeph+0x66>
			asm volatile("SLEEP");
			sleepTicks++;
		} //endwhile
		
		//Give it time to power back on
		Wait_ms(1);
    3488:	81 e0       	ldi	r24, 0x01	; 1
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_Z7Wait_msi>
		
		//Done sleeping, turn off sleeping led
		prtSTATUSled |= (1 << bnSTATUSled);
    3490:	88 e2       	ldi	r24, 0x28	; 40
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	28 e2       	ldi	r18, 0x28	; 40
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	f9 01       	movw	r30, r18
    349a:	20 81       	ld	r18, Z
    349c:	24 60       	ori	r18, 0x04	; 4
    349e:	fc 01       	movw	r30, r24
    34a0:	20 83       	st	Z, r18
}
    34a2:	0f 90       	pop	r0
    34a4:	0f 90       	pop	r0
    34a6:	0f 90       	pop	r0
    34a8:	0f 90       	pop	r0
    34aa:	0f 90       	pop	r0
    34ac:	df 91       	pop	r29
    34ae:	cf 91       	pop	r28
    34b0:	08 95       	ret

000034b2 <_Z7TakeADCv>:
/*************************************************************************************************************/

void TakeADC(){
    34b2:	cf 93       	push	r28
    34b4:	df 93       	push	r29
    34b6:	cd b7       	in	r28, 0x3d	; 61
    34b8:	de b7       	in	r29, 0x3e	; 62
    34ba:	2e 97       	sbiw	r28, 0x0e	; 14
    34bc:	0f b6       	in	r0, 0x3f	; 63
    34be:	f8 94       	cli
    34c0:	de bf       	out	0x3e, r29	; 62
    34c2:	0f be       	out	0x3f, r0	; 63
    34c4:	cd bf       	out	0x3d, r28	; 61
	WORD adcReading = 0;
    34c6:	1c 82       	std	Y+4, r1	; 0x04
    34c8:	1b 82       	std	Y+3, r1	; 0x03
	
	prtInterrupts |= (1 << bnBBint);
    34ca:	82 e2       	ldi	r24, 0x22	; 34
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	22 e2       	ldi	r18, 0x22	; 34
    34d0:	30 e0       	ldi	r19, 0x00	; 0
    34d2:	f9 01       	movw	r30, r18
    34d4:	20 81       	ld	r18, Z
    34d6:	24 60       	ori	r18, 0x04	; 4
    34d8:	fc 01       	movw	r30, r24
    34da:	20 83       	st	Z, r18
	
	__killCommINT();
    34dc:	8d e3       	ldi	r24, 0x3D	; 61
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	fc 01       	movw	r30, r24
    34e2:	10 82       	st	Z, r1
    34e4:	8d e6       	ldi	r24, 0x6D	; 109
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	fc 01       	movw	r30, r24
    34ea:	10 82       	st	Z, r1
	//Turn Power on to ADC
	PRR0 &= ~(1 << PRADC);	
    34ec:	84 e6       	ldi	r24, 0x64	; 100
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	24 e6       	ldi	r18, 0x64	; 100
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	f9 01       	movw	r30, r18
    34f6:	20 81       	ld	r18, Z
    34f8:	2e 7f       	andi	r18, 0xFE	; 254
    34fa:	fc 01       	movw	r30, r24
    34fc:	20 83       	st	Z, r18
	ADMUX |= (1 << REFS1);	//internal 1.1V reference
    34fe:	8c e7       	ldi	r24, 0x7C	; 124
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	2c e7       	ldi	r18, 0x7C	; 124
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	f9 01       	movw	r30, r18
    3508:	20 81       	ld	r18, Z
    350a:	20 68       	ori	r18, 0x80	; 128
    350c:	fc 01       	movw	r30, r24
    350e:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADEN)|(1 << ADPS2);			//clkIO/16
    3510:	8a e7       	ldi	r24, 0x7A	; 122
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	2a e7       	ldi	r18, 0x7A	; 122
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	f9 01       	movw	r30, r18
    351a:	20 81       	ld	r18, Z
    351c:	24 68       	ori	r18, 0x84	; 132
    351e:	fc 01       	movw	r30, r24
    3520:	20 83       	st	Z, r18
	DIDR0 = 0xFE;								//disable all ADC's except ADC0
    3522:	8e e7       	ldi	r24, 0x7E	; 126
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	2e ef       	ldi	r18, 0xFE	; 254
    3528:	fc 01       	movw	r30, r24
    352a:	20 83       	st	Z, r18
	Wait_ms(2);									//Tim for registers to setup
    352c:	82 e0       	ldi	r24, 0x02	; 2
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_Z7Wait_msi>
	
	//cli();
	//Run conversion twice, throw first one out
	for (int i = 0; i < 2; i++){ADCSRA |= (1 << ADSC); while (ADCSRA & (1 << ADSC));}	
    3534:	1a 82       	std	Y+2, r1	; 0x02
    3536:	19 82       	std	Y+1, r1	; 0x01
    3538:	1c c0       	rjmp	.+56     	; 0x3572 <_Z7TakeADCv+0xc0>
    353a:	8a e7       	ldi	r24, 0x7A	; 122
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	2a e7       	ldi	r18, 0x7A	; 122
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	f9 01       	movw	r30, r18
    3544:	20 81       	ld	r18, Z
    3546:	20 64       	ori	r18, 0x40	; 64
    3548:	fc 01       	movw	r30, r24
    354a:	20 83       	st	Z, r18
    354c:	8a e7       	ldi	r24, 0x7A	; 122
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	fc 01       	movw	r30, r24
    3552:	80 81       	ld	r24, Z
    3554:	88 2f       	mov	r24, r24
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	80 74       	andi	r24, 0x40	; 64
    355a:	90 70       	andi	r25, 0x00	; 0
    355c:	21 e0       	ldi	r18, 0x01	; 1
    355e:	00 97       	sbiw	r24, 0x00	; 0
    3560:	09 f4       	brne	.+2      	; 0x3564 <_Z7TakeADCv+0xb2>
    3562:	20 e0       	ldi	r18, 0x00	; 0
    3564:	22 23       	and	r18, r18
    3566:	91 f7       	brne	.-28     	; 0x354c <_Z7TakeADCv+0x9a>
    3568:	89 81       	ldd	r24, Y+1	; 0x01
    356a:	9a 81       	ldd	r25, Y+2	; 0x02
    356c:	01 96       	adiw	r24, 0x01	; 1
    356e:	9a 83       	std	Y+2, r25	; 0x02
    3570:	89 83       	std	Y+1, r24	; 0x01
    3572:	21 e0       	ldi	r18, 0x01	; 1
    3574:	89 81       	ldd	r24, Y+1	; 0x01
    3576:	9a 81       	ldd	r25, Y+2	; 0x02
    3578:	82 30       	cpi	r24, 0x02	; 2
    357a:	91 05       	cpc	r25, r1
    357c:	0c f0       	brlt	.+2      	; 0x3580 <_Z7TakeADCv+0xce>
    357e:	20 e0       	ldi	r18, 0x00	; 0
    3580:	22 23       	and	r18, r18
    3582:	d9 f6       	brne	.-74     	; 0x353a <_Z7TakeADCv+0x88>
	
	//Re-enable interrupts	
	//sei();
	
	//Put conversion into buffer
	adcReading = ADCL;
    3584:	88 e7       	ldi	r24, 0x78	; 120
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	fc 01       	movw	r30, r24
    358a:	80 81       	ld	r24, Z
    358c:	88 2f       	mov	r24, r24
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	9c 83       	std	Y+4, r25	; 0x04
    3592:	8b 83       	std	Y+3, r24	; 0x03
	adcReading |= (ADCH << 8);
    3594:	89 e7       	ldi	r24, 0x79	; 121
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	fc 01       	movw	r30, r24
    359a:	80 81       	ld	r24, Z
    359c:	88 2f       	mov	r24, r24
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	98 2f       	mov	r25, r24
    35a2:	88 27       	eor	r24, r24
    35a4:	2b 81       	ldd	r18, Y+3	; 0x03
    35a6:	3c 81       	ldd	r19, Y+4	; 0x04
    35a8:	82 2b       	or	r24, r18
    35aa:	93 2b       	or	r25, r19
    35ac:	9c 83       	std	Y+4, r25	; 0x04
    35ae:	8b 83       	std	Y+3, r24	; 0x03
		
	//Assign global reading and set flag
	globalADC=adcReading;
    35b0:	8b 81       	ldd	r24, Y+3	; 0x03
    35b2:	9c 81       	ldd	r25, Y+4	; 0x04
    35b4:	90 93 d3 01 	sts	0x01D3, r25
    35b8:	80 93 d2 01 	sts	0x01D2, r24
	flagGoodVolts = (adcReading < LOW_BATT_ADC) ? fFalse : fTrue;
    35bc:	21 e0       	ldi	r18, 0x01	; 1
    35be:	8b 81       	ldd	r24, Y+3	; 0x03
    35c0:	9c 81       	ldd	r25, Y+4	; 0x04
    35c2:	f3 e0       	ldi	r31, 0x03	; 3
    35c4:	82 37       	cpi	r24, 0x72	; 114
    35c6:	9f 07       	cpc	r25, r31
    35c8:	08 f4       	brcc	.+2      	; 0x35cc <_Z7TakeADCv+0x11a>
    35ca:	20 e0       	ldi	r18, 0x00	; 0
    35cc:	20 93 0e 02 	sts	0x020E, r18
		
	//Disable ADC hardware/registers
	ADCSRA = 0;
    35d0:	8a e7       	ldi	r24, 0x7A	; 122
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	fc 01       	movw	r30, r24
    35d6:	10 82       	st	Z, r1
	ADMUX = 0;
    35d8:	8c e7       	ldi	r24, 0x7C	; 124
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	fc 01       	movw	r30, r24
    35de:	10 82       	st	Z, r1
	DIDR0 |= (1 << ADC0D);
    35e0:	8e e7       	ldi	r24, 0x7E	; 126
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	2e e7       	ldi	r18, 0x7E	; 126
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	f9 01       	movw	r30, r18
    35ea:	20 81       	ld	r18, Z
    35ec:	21 60       	ori	r18, 0x01	; 1
    35ee:	fc 01       	movw	r30, r24
    35f0:	20 83       	st	Z, r18
	
	//Turn off power
	PRR0 |= (1 << PRADC);
    35f2:	84 e6       	ldi	r24, 0x64	; 100
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	24 e6       	ldi	r18, 0x64	; 100
    35f8:	30 e0       	ldi	r19, 0x00	; 0
    35fa:	f9 01       	movw	r30, r18
    35fc:	20 81       	ld	r18, Z
    35fe:	21 60       	ori	r18, 0x01	; 1
    3600:	fc 01       	movw	r30, r24
    3602:	20 83       	st	Z, r18

	char tempString[10];
	itoa(globalADC,tempString,10);
    3604:	80 91 d2 01 	lds	r24, 0x01D2
    3608:	90 91 d3 01 	lds	r25, 0x01D3
    360c:	9e 01       	movw	r18, r28
    360e:	2b 5f       	subi	r18, 0xFB	; 251
    3610:	3f 4f       	sbci	r19, 0xFF	; 255
    3612:	b9 01       	movw	r22, r18
    3614:	4a e0       	ldi	r20, 0x0A	; 10
    3616:	50 e0       	ldi	r21, 0x00	; 0
    3618:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <itoa>
	tempString[9]='\0';
    361c:	1e 86       	std	Y+14, r1	; 0x0e
	//PrintBone("ADC: ");
	//PrintBone(tempString);
	prtInterrupts &= ~(1 << bnBBint);
    361e:	82 e2       	ldi	r24, 0x22	; 34
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	22 e2       	ldi	r18, 0x22	; 34
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	f9 01       	movw	r30, r18
    3628:	20 81       	ld	r18, Z
    362a:	2b 7f       	andi	r18, 0xFB	; 251
    362c:	fc 01       	movw	r30, r24
    362e:	20 83       	st	Z, r18
	__enableCommINT();
    3630:	8d e3       	ldi	r24, 0x3D	; 61
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	2d e3       	ldi	r18, 0x3D	; 61
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	f9 01       	movw	r30, r18
    363a:	20 81       	ld	r18, Z
    363c:	24 60       	ori	r18, 0x04	; 4
    363e:	fc 01       	movw	r30, r24
    3640:	20 83       	st	Z, r18
    3642:	8d e6       	ldi	r24, 0x6D	; 109
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	22 e0       	ldi	r18, 0x02	; 2
    3648:	fc 01       	movw	r30, r24
    364a:	20 83       	st	Z, r18
}
    364c:	2e 96       	adiw	r28, 0x0e	; 14
    364e:	0f b6       	in	r0, 0x3f	; 63
    3650:	f8 94       	cli
    3652:	de bf       	out	0x3e, r29	; 62
    3654:	0f be       	out	0x3f, r0	; 63
    3656:	cd bf       	out	0x3d, r28	; 61
    3658:	df 91       	pop	r29
    365a:	cf 91       	pop	r28
    365c:	08 95       	ret

0000365e <_Z7GetTempv>:

/*************************************************************************************************************/

void GetTemp(){
    365e:	cf 93       	push	r28
    3660:	df 93       	push	r29
    3662:	cd b7       	in	r28, 0x3d	; 61
    3664:	de b7       	in	r29, 0x3e	; 62
    3666:	2b 97       	sbiw	r28, 0x0b	; 11
    3668:	0f b6       	in	r0, 0x3f	; 63
    366a:	f8 94       	cli
    366c:	de bf       	out	0x3e, r29	; 62
    366e:	0f be       	out	0x3f, r0	; 63
    3670:	cd bf       	out	0x3d, r28	; 61
	WORD rawTemp = 0;
    3672:	1a 82       	std	Y+2, r1	; 0x02
    3674:	19 82       	std	Y+1, r1	; 0x01

	__killCommINT();
    3676:	8d e3       	ldi	r24, 0x3D	; 61
    3678:	90 e0       	ldi	r25, 0x00	; 0
    367a:	fc 01       	movw	r30, r24
    367c:	10 82       	st	Z, r1
    367e:	8d e6       	ldi	r24, 0x6D	; 109
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	fc 01       	movw	r30, r24
    3684:	10 82       	st	Z, r1

	PRR0 &= ~(1 << PRSPI);	
    3686:	84 e6       	ldi	r24, 0x64	; 100
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	24 e6       	ldi	r18, 0x64	; 100
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	f9 01       	movw	r30, r18
    3690:	20 81       	ld	r18, Z
    3692:	2b 7f       	andi	r18, 0xFB	; 251
    3694:	fc 01       	movw	r30, r24
    3696:	20 83       	st	Z, r18
	SPCR |= (1 << MSTR)|(1 << SPE)|(1 << SPR0);			//enables SPI, master, fck/64
    3698:	8c e4       	ldi	r24, 0x4C	; 76
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	2c e4       	ldi	r18, 0x4C	; 76
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	f9 01       	movw	r30, r18
    36a2:	20 81       	ld	r18, Z
    36a4:	21 65       	ori	r18, 0x51	; 81
    36a6:	fc 01       	movw	r30, r24
    36a8:	20 83       	st	Z, r18
	Wait_sec(2);
    36aa:	82 e0       	ldi	r24, 0x02	; 2
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	0e 94 98 08 	call	0x1130	; 0x1130 <_Z8Wait_seci>
	//Slave select goes low, sck goes low,  to signal start of transmission
	prtSpi0 &= ~((1 << bnSck0)|(1 << bnSS0));
    36b2:	85 e2       	ldi	r24, 0x25	; 37
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	25 e2       	ldi	r18, 0x25	; 37
    36b8:	30 e0       	ldi	r19, 0x00	; 0
    36ba:	f9 01       	movw	r30, r18
    36bc:	20 81       	ld	r18, Z
    36be:	2f 76       	andi	r18, 0x6F	; 111
    36c0:	fc 01       	movw	r30, r24
    36c2:	20 83       	st	Z, r18
	
	cli();
    36c4:	f8 94       	cli
	//Write to buffer to start transmission
	SPDR = 0x00;
    36c6:	8e e4       	ldi	r24, 0x4E	; 78
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	fc 01       	movw	r30, r24
    36cc:	10 82       	st	Z, r1
	//Wait for data to be receieved.
	while (!(SPSR & (1 << SPIF)));
    36ce:	00 00       	nop
    36d0:	8d e4       	ldi	r24, 0x4D	; 77
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	fc 01       	movw	r30, r24
    36d6:	80 81       	ld	r24, Z
    36d8:	80 95       	com	r24
    36da:	88 1f       	adc	r24, r24
    36dc:	88 27       	eor	r24, r24
    36de:	88 1f       	adc	r24, r24
    36e0:	88 23       	and	r24, r24
    36e2:	b1 f7       	brne	.-20     	; 0x36d0 <_Z7GetTempv+0x72>
	rawTemp = (SPDR0 << 8);
    36e4:	1a 82       	std	Y+2, r1	; 0x02
    36e6:	19 82       	std	Y+1, r1	; 0x01
	SPDR = 0x00;
    36e8:	8e e4       	ldi	r24, 0x4E	; 78
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	fc 01       	movw	r30, r24
    36ee:	10 82       	st	Z, r1
	while (!(SPSR & (1 << SPIF)));
    36f0:	00 00       	nop
    36f2:	8d e4       	ldi	r24, 0x4D	; 77
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	fc 01       	movw	r30, r24
    36f8:	80 81       	ld	r24, Z
    36fa:	80 95       	com	r24
    36fc:	88 1f       	adc	r24, r24
    36fe:	88 27       	eor	r24, r24
    3700:	88 1f       	adc	r24, r24
    3702:	88 23       	and	r24, r24
    3704:	b1 f7       	brne	.-20     	; 0x36f2 <_Z7GetTempv+0x94>
	rawTemp |= SPDR0;
	
	//Set flag to correct value, update global value
	//flagGoodTemp = (rawTemp < HIGH_TEMP) ? fTrue : fFalse;
	globalTemp=rawTemp;
    3706:	89 81       	ldd	r24, Y+1	; 0x01
    3708:	9a 81       	ldd	r25, Y+2	; 0x02
    370a:	90 93 d5 01 	sts	0x01D5, r25
    370e:	80 93 d4 01 	sts	0x01D4, r24
	
	//re enable interrupts
	sei();
    3712:	78 94       	sei
	
	//Bring SS high, clear SPCR0 register and turn power off to SPI and device
	prtSpi0 |= (1 << bnSS0)|(1 << bnSck0);
    3714:	85 e2       	ldi	r24, 0x25	; 37
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	25 e2       	ldi	r18, 0x25	; 37
    371a:	30 e0       	ldi	r19, 0x00	; 0
    371c:	f9 01       	movw	r30, r18
    371e:	20 81       	ld	r18, Z
    3720:	20 69       	ori	r18, 0x90	; 144
    3722:	fc 01       	movw	r30, r24
    3724:	20 83       	st	Z, r18
	SPCR=0x00;	
    3726:	8c e4       	ldi	r24, 0x4C	; 76
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	fc 01       	movw	r30, r24
    372c:	10 82       	st	Z, r1
	//__killTemp();
	PRR0 |= (1 << PRSPI);
    372e:	84 e6       	ldi	r24, 0x64	; 100
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	24 e6       	ldi	r18, 0x64	; 100
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	f9 01       	movw	r30, r18
    3738:	20 81       	ld	r18, Z
    373a:	24 60       	ori	r18, 0x04	; 4
    373c:	fc 01       	movw	r30, r24
    373e:	20 83       	st	Z, r18
	
	char tempString[9];
	itoa(globalTemp,tempString,10);
    3740:	80 91 d4 01 	lds	r24, 0x01D4
    3744:	90 91 d5 01 	lds	r25, 0x01D5
    3748:	9e 01       	movw	r18, r28
    374a:	2d 5f       	subi	r18, 0xFD	; 253
    374c:	3f 4f       	sbci	r19, 0xFF	; 255
    374e:	b9 01       	movw	r22, r18
    3750:	4a e0       	ldi	r20, 0x0A	; 10
    3752:	50 e0       	ldi	r21, 0x00	; 0
    3754:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <itoa>
	tempString[8]='\0';
    3758:	1b 86       	std	Y+11, r1	; 0x0b

	__enableCommINT();
    375a:	8d e3       	ldi	r24, 0x3D	; 61
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	2d e3       	ldi	r18, 0x3D	; 61
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	f9 01       	movw	r30, r18
    3764:	20 81       	ld	r18, Z
    3766:	24 60       	ori	r18, 0x04	; 4
    3768:	fc 01       	movw	r30, r24
    376a:	20 83       	st	Z, r18
    376c:	8d e6       	ldi	r24, 0x6D	; 109
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	22 e0       	ldi	r18, 0x02	; 2
    3772:	fc 01       	movw	r30, r24
    3774:	20 83       	st	Z, r18
}
    3776:	2b 96       	adiw	r28, 0x0b	; 11
    3778:	0f b6       	in	r0, 0x3f	; 63
    377a:	f8 94       	cli
    377c:	de bf       	out	0x3e, r29	; 62
    377e:	0f be       	out	0x3f, r0	; 63
    3780:	cd bf       	out	0x3d, r28	; 61
    3782:	df 91       	pop	r29
    3784:	cf 91       	pop	r28
    3786:	08 95       	ret

00003788 <_Z7PowerUpj>:
/*************************************************************************************************************/
void PowerUp(WORD interval){
    3788:	cf 93       	push	r28
    378a:	df 93       	push	r29
    378c:	00 d0       	rcall	.+0      	; 0x378e <_Z7PowerUpj+0x6>
    378e:	cd b7       	in	r28, 0x3d	; 61
    3790:	de b7       	in	r29, 0x3e	; 62
    3792:	9a 83       	std	Y+2, r25	; 0x02
    3794:	89 83       	std	Y+1, r24	; 0x01
	__killCommINT();
    3796:	8d e3       	ldi	r24, 0x3D	; 61
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	fc 01       	movw	r30, r24
    379c:	10 82       	st	Z, r1
    379e:	8d e6       	ldi	r24, 0x6D	; 109
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	fc 01       	movw	r30, r24
    37a4:	10 82       	st	Z, r1
	
	//First power on main regulator
	__enableMain();
    37a6:	88 e2       	ldi	r24, 0x28	; 40
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	28 e2       	ldi	r18, 0x28	; 40
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	f9 01       	movw	r30, r18
    37b0:	20 81       	ld	r18, Z
    37b2:	21 60       	ori	r18, 0x01	; 1
    37b4:	fc 01       	movw	r30, r24
    37b6:	20 83       	st	Z, r18
	Wait_sec(interval);
    37b8:	89 81       	ldd	r24, Y+1	; 0x01
    37ba:	9a 81       	ldd	r25, Y+2	; 0x02
    37bc:	0e 94 98 08 	call	0x1130	; 0x1130 <_Z8Wait_seci>
	//__enableBeagleBone();
	//Wait_sec(interval);
	//while (!(pinBBio & (1 << bnW0B9)));	//Wait for GPIO line to go high
	
	//Power on GAVR and Enable GPS
	__enableGPSandGAVR();
    37c0:	82 e2       	ldi	r24, 0x22	; 34
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	22 e2       	ldi	r18, 0x22	; 34
    37c6:	30 e0       	ldi	r19, 0x00	; 0
    37c8:	f9 01       	movw	r30, r18
    37ca:	20 81       	ld	r18, Z
    37cc:	20 6c       	ori	r18, 0xC0	; 192
    37ce:	fc 01       	movw	r30, r24
    37d0:	20 83       	st	Z, r18
	//Wait_sec(interval);
	//while (!(pinGAVRio & (1 << bnW3G0)));	//Wait for GPIO line to go high signifying correct boot
	if (restart){
    37d2:	80 91 0f 02 	lds	r24, 0x020F
    37d6:	88 23       	and	r24, r24
    37d8:	b1 f0       	breq	.+44     	; 0x3806 <_Z7PowerUpj+0x7e>
		prtInterrupts |= (1 << bnGAVRint);
    37da:	82 e2       	ldi	r24, 0x22	; 34
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	22 e2       	ldi	r18, 0x22	; 34
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	f9 01       	movw	r30, r18
    37e4:	20 81       	ld	r18, Z
    37e6:	28 60       	ori	r18, 0x08	; 8
    37e8:	fc 01       	movw	r30, r24
    37ea:	20 83       	st	Z, r18
		Wait_ms(200); 
    37ec:	88 ec       	ldi	r24, 0xC8	; 200
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    37f0:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_Z7Wait_msi>
		prtInterrupts  &= ~(1 << bnGAVRint);	//sends interrupt to come out of power-down, waits, goes forward.
    37f4:	82 e2       	ldi	r24, 0x22	; 34
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	22 e2       	ldi	r18, 0x22	; 34
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	f9 01       	movw	r30, r18
    37fe:	20 81       	ld	r18, Z
    3800:	27 7f       	andi	r18, 0xF7	; 247
    3802:	fc 01       	movw	r30, r24
    3804:	20 83       	st	Z, r18
	}
	//Power on LCD
	//__enableLCD();
	Wait_sec(interval);
    3806:	89 81       	ldd	r24, Y+1	; 0x01
    3808:	9a 81       	ldd	r25, Y+2	; 0x02
    380a:	0e 94 98 08 	call	0x1130	; 0x1130 <_Z8Wait_seci>
	
	__enableCommINT();
    380e:	8d e3       	ldi	r24, 0x3D	; 61
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	2d e3       	ldi	r18, 0x3D	; 61
    3814:	30 e0       	ldi	r19, 0x00	; 0
    3816:	f9 01       	movw	r30, r18
    3818:	20 81       	ld	r18, Z
    381a:	24 60       	ori	r18, 0x04	; 4
    381c:	fc 01       	movw	r30, r24
    381e:	20 83       	st	Z, r18
    3820:	8d e6       	ldi	r24, 0x6D	; 109
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	22 e0       	ldi	r18, 0x02	; 2
    3826:	fc 01       	movw	r30, r24
    3828:	20 83       	st	Z, r18
	
}
    382a:	0f 90       	pop	r0
    382c:	0f 90       	pop	r0
    382e:	df 91       	pop	r29
    3830:	cf 91       	pop	r28
    3832:	08 95       	ret

00003834 <_Z9PowerDownv>:
/*************************************************************************************************************/
void PowerDown(){
    3834:	cf 93       	push	r28
    3836:	df 93       	push	r29
    3838:	cd b7       	in	r28, 0x3d	; 61
    383a:	de b7       	in	r29, 0x3e	; 62
	__killCommINT();
    383c:	8d e3       	ldi	r24, 0x3D	; 61
    383e:	90 e0       	ldi	r25, 0x00	; 0
    3840:	fc 01       	movw	r30, r24
    3842:	10 82       	st	Z, r1
    3844:	8d e6       	ldi	r24, 0x6D	; 109
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	fc 01       	movw	r30, r24
    384a:	10 82       	st	Z, r1

	//Signify interrupts, wait 6 seconds for all processing to stop.
	prtInterrupts |= (1 << bnBBint)|(1 << bnGAVRint);
    384c:	82 e2       	ldi	r24, 0x22	; 34
    384e:	90 e0       	ldi	r25, 0x00	; 0
    3850:	22 e2       	ldi	r18, 0x22	; 34
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	f9 01       	movw	r30, r18
    3856:	20 81       	ld	r18, Z
    3858:	2c 60       	ori	r18, 0x0C	; 12
    385a:	fc 01       	movw	r30, r24
    385c:	20 83       	st	Z, r18
	Wait_sec(6);
    385e:	86 e0       	ldi	r24, 0x06	; 6
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	0e 94 98 08 	call	0x1130	; 0x1130 <_Z8Wait_seci>
	prtInterrupts &= ~((1 << bnBBint)|(1 << bnGAVRint));
    3866:	82 e2       	ldi	r24, 0x22	; 34
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	22 e2       	ldi	r18, 0x22	; 34
    386c:	30 e0       	ldi	r19, 0x00	; 0
    386e:	f9 01       	movw	r30, r18
    3870:	20 81       	ld	r18, Z
    3872:	23 7f       	andi	r18, 0xF3	; 243
    3874:	fc 01       	movw	r30, r24
    3876:	20 83       	st	Z, r18
	__killLCD();
    3878:	82 e2       	ldi	r24, 0x22	; 34
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	22 e2       	ldi	r18, 0x22	; 34
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	f9 01       	movw	r30, r18
    3882:	20 81       	ld	r18, Z
    3884:	2f 7d       	andi	r18, 0xDF	; 223
    3886:	fc 01       	movw	r30, r24
    3888:	20 83       	st	Z, r18
	__killGPSandGAVR();
    388a:	82 e2       	ldi	r24, 0x22	; 34
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	22 e2       	ldi	r18, 0x22	; 34
    3890:	30 e0       	ldi	r19, 0x00	; 0
    3892:	f9 01       	movw	r30, r18
    3894:	20 81       	ld	r18, Z
    3896:	2f 73       	andi	r18, 0x3F	; 63
    3898:	fc 01       	movw	r30, r24
    389a:	20 83       	st	Z, r18
	
	//Give the BeagleBone another 6 seconds to finish it's stuff, then kill it
	Wait_sec(6);
    389c:	86 e0       	ldi	r24, 0x06	; 6
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	0e 94 98 08 	call	0x1130	; 0x1130 <_Z8Wait_seci>
	__killBeagleBone();
    38a4:	82 e2       	ldi	r24, 0x22	; 34
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	22 e2       	ldi	r18, 0x22	; 34
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	f9 01       	movw	r30, r18
    38ae:	20 81       	ld	r18, Z
    38b0:	2f 7e       	andi	r18, 0xEF	; 239
    38b2:	fc 01       	movw	r30, r24
    38b4:	20 83       	st	Z, r18
	__killMain();
    38b6:	88 e2       	ldi	r24, 0x28	; 40
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	28 e2       	ldi	r18, 0x28	; 40
    38bc:	30 e0       	ldi	r19, 0x00	; 0
    38be:	f9 01       	movw	r30, r18
    38c0:	20 81       	ld	r18, Z
    38c2:	2e 7f       	andi	r18, 0xFE	; 254
    38c4:	fc 01       	movw	r30, r24
    38c6:	20 83       	st	Z, r18
}
    38c8:	df 91       	pop	r29
    38ca:	cf 91       	pop	r28
    38cc:	08 95       	ret

000038ce <_Z41__static_initialization_and_destruction_0ii>:
    38ce:	cf 93       	push	r28
    38d0:	df 93       	push	r29
    38d2:	00 d0       	rcall	.+0      	; 0x38d4 <_Z41__static_initialization_and_destruction_0ii+0x6>
    38d4:	00 d0       	rcall	.+0      	; 0x38d6 <_Z41__static_initialization_and_destruction_0ii+0x8>
    38d6:	cd b7       	in	r28, 0x3d	; 61
    38d8:	de b7       	in	r29, 0x3e	; 62
    38da:	9a 83       	std	Y+2, r25	; 0x02
    38dc:	89 83       	std	Y+1, r24	; 0x01
    38de:	7c 83       	std	Y+4, r23	; 0x04
    38e0:	6b 83       	std	Y+3, r22	; 0x03
    38e2:	89 81       	ldd	r24, Y+1	; 0x01
    38e4:	9a 81       	ldd	r25, Y+2	; 0x02
    38e6:	81 30       	cpi	r24, 0x01	; 1
    38e8:	91 05       	cpc	r25, r1
    38ea:	51 f4       	brne	.+20     	; 0x3900 <_Z41__static_initialization_and_destruction_0ii+0x32>
    38ec:	8b 81       	ldd	r24, Y+3	; 0x03
    38ee:	9c 81       	ldd	r25, Y+4	; 0x04
    38f0:	2f ef       	ldi	r18, 0xFF	; 255
    38f2:	8f 3f       	cpi	r24, 0xFF	; 255
    38f4:	92 07       	cpc	r25, r18
    38f6:	21 f4       	brne	.+8      	; 0x3900 <_Z41__static_initialization_and_destruction_0ii+0x32>

/*********************************************GLOBAL VARIABLES***************************************************/
/****************************************************************************************************************/
WORD globalADC=0, globalTemp=0;
//volatile int timeOut=0;
myTime currentTime;  //The clock, MUST BE GLOBAL. In final program, will initiate with NOTHING, then GPS will update on the actual time into beaglebone, beaglebone pings us, then dunzo OR have UART into this as well, then get time and be done.
    38f8:	86 ed       	ldi	r24, 0xD6	; 214
    38fa:	91 e0       	ldi	r25, 0x01	; 1
    38fc:	0e 94 10 04 	call	0x820	; 0x820 <_ZN6myTimeC1Ev>
	
	//Give the BeagleBone another 6 seconds to finish it's stuff, then kill it
	Wait_sec(6);
	__killBeagleBone();
	__killMain();
}
    3900:	0f 90       	pop	r0
    3902:	0f 90       	pop	r0
    3904:	0f 90       	pop	r0
    3906:	0f 90       	pop	r0
    3908:	df 91       	pop	r29
    390a:	cf 91       	pop	r28
    390c:	08 95       	ret

0000390e <_GLOBAL__sub_I__ZN6myDateC2Ev>:
    390e:	cf 93       	push	r28
    3910:	df 93       	push	r29
    3912:	cd b7       	in	r28, 0x3d	; 61
    3914:	de b7       	in	r29, 0x3e	; 62
    3916:	81 e0       	ldi	r24, 0x01	; 1
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	6f ef       	ldi	r22, 0xFF	; 255
    391c:	7f ef       	ldi	r23, 0xFF	; 255
    391e:	0e 94 67 1c 	call	0x38ce	; 0x38ce <_Z41__static_initialization_and_destruction_0ii>
    3922:	df 91       	pop	r29
    3924:	cf 91       	pop	r28
    3926:	08 95       	ret

00003928 <__udivmodqi4>:
    3928:	99 1b       	sub	r25, r25
    392a:	79 e0       	ldi	r23, 0x09	; 9
    392c:	04 c0       	rjmp	.+8      	; 0x3936 <__udivmodqi4_ep>

0000392e <__udivmodqi4_loop>:
    392e:	99 1f       	adc	r25, r25
    3930:	96 17       	cp	r25, r22
    3932:	08 f0       	brcs	.+2      	; 0x3936 <__udivmodqi4_ep>
    3934:	96 1b       	sub	r25, r22

00003936 <__udivmodqi4_ep>:
    3936:	88 1f       	adc	r24, r24
    3938:	7a 95       	dec	r23
    393a:	c9 f7       	brne	.-14     	; 0x392e <__udivmodqi4_loop>
    393c:	80 95       	com	r24
    393e:	08 95       	ret

00003940 <__divmodhi4>:
    3940:	97 fb       	bst	r25, 7
    3942:	09 2e       	mov	r0, r25
    3944:	07 26       	eor	r0, r23
    3946:	0a d0       	rcall	.+20     	; 0x395c <__divmodhi4_neg1>
    3948:	77 fd       	sbrc	r23, 7
    394a:	04 d0       	rcall	.+8      	; 0x3954 <__divmodhi4_neg2>
    394c:	0c d0       	rcall	.+24     	; 0x3966 <__udivmodhi4>
    394e:	06 d0       	rcall	.+12     	; 0x395c <__divmodhi4_neg1>
    3950:	00 20       	and	r0, r0
    3952:	1a f4       	brpl	.+6      	; 0x395a <__divmodhi4_exit>

00003954 <__divmodhi4_neg2>:
    3954:	70 95       	com	r23
    3956:	61 95       	neg	r22
    3958:	7f 4f       	sbci	r23, 0xFF	; 255

0000395a <__divmodhi4_exit>:
    395a:	08 95       	ret

0000395c <__divmodhi4_neg1>:
    395c:	f6 f7       	brtc	.-4      	; 0x395a <__divmodhi4_exit>
    395e:	90 95       	com	r25
    3960:	81 95       	neg	r24
    3962:	9f 4f       	sbci	r25, 0xFF	; 255
    3964:	08 95       	ret

00003966 <__udivmodhi4>:
    3966:	aa 1b       	sub	r26, r26
    3968:	bb 1b       	sub	r27, r27
    396a:	51 e1       	ldi	r21, 0x11	; 17
    396c:	07 c0       	rjmp	.+14     	; 0x397c <__udivmodhi4_ep>

0000396e <__udivmodhi4_loop>:
    396e:	aa 1f       	adc	r26, r26
    3970:	bb 1f       	adc	r27, r27
    3972:	a6 17       	cp	r26, r22
    3974:	b7 07       	cpc	r27, r23
    3976:	10 f0       	brcs	.+4      	; 0x397c <__udivmodhi4_ep>
    3978:	a6 1b       	sub	r26, r22
    397a:	b7 0b       	sbc	r27, r23

0000397c <__udivmodhi4_ep>:
    397c:	88 1f       	adc	r24, r24
    397e:	99 1f       	adc	r25, r25
    3980:	5a 95       	dec	r21
    3982:	a9 f7       	brne	.-22     	; 0x396e <__udivmodhi4_loop>
    3984:	80 95       	com	r24
    3986:	90 95       	com	r25
    3988:	bc 01       	movw	r22, r24
    398a:	cd 01       	movw	r24, r26
    398c:	08 95       	ret

0000398e <__tablejump2__>:
    398e:	ee 0f       	add	r30, r30
    3990:	ff 1f       	adc	r31, r31

00003992 <__tablejump__>:
    3992:	05 90       	lpm	r0, Z+
    3994:	f4 91       	lpm	r31, Z
    3996:	e0 2d       	mov	r30, r0
    3998:	09 94       	ijmp

0000399a <atoi>:
    399a:	fc 01       	movw	r30, r24
    399c:	88 27       	eor	r24, r24
    399e:	99 27       	eor	r25, r25
    39a0:	e8 94       	clt
    39a2:	21 91       	ld	r18, Z+
    39a4:	20 32       	cpi	r18, 0x20	; 32
    39a6:	e9 f3       	breq	.-6      	; 0x39a2 <atoi+0x8>
    39a8:	29 30       	cpi	r18, 0x09	; 9
    39aa:	10 f0       	brcs	.+4      	; 0x39b0 <atoi+0x16>
    39ac:	2e 30       	cpi	r18, 0x0E	; 14
    39ae:	c8 f3       	brcs	.-14     	; 0x39a2 <atoi+0x8>
    39b0:	2b 32       	cpi	r18, 0x2B	; 43
    39b2:	41 f0       	breq	.+16     	; 0x39c4 <atoi+0x2a>
    39b4:	2d 32       	cpi	r18, 0x2D	; 45
    39b6:	39 f4       	brne	.+14     	; 0x39c6 <atoi+0x2c>
    39b8:	68 94       	set
    39ba:	04 c0       	rjmp	.+8      	; 0x39c4 <atoi+0x2a>
    39bc:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <__mulhi_const_10>
    39c0:	82 0f       	add	r24, r18
    39c2:	91 1d       	adc	r25, r1
    39c4:	21 91       	ld	r18, Z+
    39c6:	20 53       	subi	r18, 0x30	; 48
    39c8:	2a 30       	cpi	r18, 0x0A	; 10
    39ca:	c0 f3       	brcs	.-16     	; 0x39bc <atoi+0x22>
    39cc:	1e f4       	brtc	.+6      	; 0x39d4 <atoi+0x3a>
    39ce:	90 95       	com	r25
    39d0:	81 95       	neg	r24
    39d2:	9f 4f       	sbci	r25, 0xFF	; 255
    39d4:	08 95       	ret

000039d6 <strcat>:
    39d6:	fb 01       	movw	r30, r22
    39d8:	dc 01       	movw	r26, r24
    39da:	0d 90       	ld	r0, X+
    39dc:	00 20       	and	r0, r0
    39de:	e9 f7       	brne	.-6      	; 0x39da <strcat+0x4>
    39e0:	11 97       	sbiw	r26, 0x01	; 1
    39e2:	01 90       	ld	r0, Z+
    39e4:	0d 92       	st	X+, r0
    39e6:	00 20       	and	r0, r0
    39e8:	e1 f7       	brne	.-8      	; 0x39e2 <strcat+0xc>
    39ea:	08 95       	ret

000039ec <strcmp>:
    39ec:	fb 01       	movw	r30, r22
    39ee:	dc 01       	movw	r26, r24
    39f0:	8d 91       	ld	r24, X+
    39f2:	01 90       	ld	r0, Z+
    39f4:	80 19       	sub	r24, r0
    39f6:	01 10       	cpse	r0, r1
    39f8:	d9 f3       	breq	.-10     	; 0x39f0 <strcmp+0x4>
    39fa:	99 0b       	sbc	r25, r25
    39fc:	08 95       	ret

000039fe <strcpy>:
    39fe:	fb 01       	movw	r30, r22
    3a00:	dc 01       	movw	r26, r24
    3a02:	01 90       	ld	r0, Z+
    3a04:	0d 92       	st	X+, r0
    3a06:	00 20       	and	r0, r0
    3a08:	e1 f7       	brne	.-8      	; 0x3a02 <strcpy+0x4>
    3a0a:	08 95       	ret

00003a0c <strncmp>:
    3a0c:	fb 01       	movw	r30, r22
    3a0e:	dc 01       	movw	r26, r24
    3a10:	41 50       	subi	r20, 0x01	; 1
    3a12:	50 40       	sbci	r21, 0x00	; 0
    3a14:	30 f0       	brcs	.+12     	; 0x3a22 <strncmp+0x16>
    3a16:	8d 91       	ld	r24, X+
    3a18:	01 90       	ld	r0, Z+
    3a1a:	80 19       	sub	r24, r0
    3a1c:	19 f4       	brne	.+6      	; 0x3a24 <strncmp+0x18>
    3a1e:	00 20       	and	r0, r0
    3a20:	b9 f7       	brne	.-18     	; 0x3a10 <strncmp+0x4>
    3a22:	88 1b       	sub	r24, r24
    3a24:	99 0b       	sbc	r25, r25
    3a26:	08 95       	ret

00003a28 <itoa>:
    3a28:	fb 01       	movw	r30, r22
    3a2a:	9f 01       	movw	r18, r30
    3a2c:	e8 94       	clt
    3a2e:	42 30       	cpi	r20, 0x02	; 2
    3a30:	c4 f0       	brlt	.+48     	; 0x3a62 <itoa+0x3a>
    3a32:	45 32       	cpi	r20, 0x25	; 37
    3a34:	b4 f4       	brge	.+44     	; 0x3a62 <itoa+0x3a>
    3a36:	4a 30       	cpi	r20, 0x0A	; 10
    3a38:	29 f4       	brne	.+10     	; 0x3a44 <itoa+0x1c>
    3a3a:	97 fb       	bst	r25, 7
    3a3c:	1e f4       	brtc	.+6      	; 0x3a44 <itoa+0x1c>
    3a3e:	90 95       	com	r25
    3a40:	81 95       	neg	r24
    3a42:	9f 4f       	sbci	r25, 0xFF	; 255
    3a44:	64 2f       	mov	r22, r20
    3a46:	77 27       	eor	r23, r23
    3a48:	0e 94 b3 1c 	call	0x3966	; 0x3966 <__udivmodhi4>
    3a4c:	80 5d       	subi	r24, 0xD0	; 208
    3a4e:	8a 33       	cpi	r24, 0x3A	; 58
    3a50:	0c f0       	brlt	.+2      	; 0x3a54 <itoa+0x2c>
    3a52:	89 5d       	subi	r24, 0xD9	; 217
    3a54:	81 93       	st	Z+, r24
    3a56:	cb 01       	movw	r24, r22
    3a58:	00 97       	sbiw	r24, 0x00	; 0
    3a5a:	a1 f7       	brne	.-24     	; 0x3a44 <itoa+0x1c>
    3a5c:	16 f4       	brtc	.+4      	; 0x3a62 <itoa+0x3a>
    3a5e:	5d e2       	ldi	r21, 0x2D	; 45
    3a60:	51 93       	st	Z+, r21
    3a62:	10 82       	st	Z, r1
    3a64:	c9 01       	movw	r24, r18
    3a66:	0c 94 74 1d 	jmp	0x3ae8	; 0x3ae8 <strrev>

00003a6a <__mulhi_const_10>:
    3a6a:	7a e0       	ldi	r23, 0x0A	; 10
    3a6c:	97 9f       	mul	r25, r23
    3a6e:	90 2d       	mov	r25, r0
    3a70:	87 9f       	mul	r24, r23
    3a72:	80 2d       	mov	r24, r0
    3a74:	91 0d       	add	r25, r1
    3a76:	11 24       	eor	r1, r1
    3a78:	08 95       	ret

00003a7a <utoa>:
    3a7a:	fb 01       	movw	r30, r22
    3a7c:	9f 01       	movw	r18, r30
    3a7e:	42 30       	cpi	r20, 0x02	; 2
    3a80:	74 f0       	brlt	.+28     	; 0x3a9e <utoa+0x24>
    3a82:	45 32       	cpi	r20, 0x25	; 37
    3a84:	64 f4       	brge	.+24     	; 0x3a9e <utoa+0x24>
    3a86:	64 2f       	mov	r22, r20
    3a88:	77 27       	eor	r23, r23
    3a8a:	0e 94 b3 1c 	call	0x3966	; 0x3966 <__udivmodhi4>
    3a8e:	80 5d       	subi	r24, 0xD0	; 208
    3a90:	8a 33       	cpi	r24, 0x3A	; 58
    3a92:	0c f0       	brlt	.+2      	; 0x3a96 <utoa+0x1c>
    3a94:	89 5d       	subi	r24, 0xD9	; 217
    3a96:	81 93       	st	Z+, r24
    3a98:	cb 01       	movw	r24, r22
    3a9a:	00 97       	sbiw	r24, 0x00	; 0
    3a9c:	a1 f7       	brne	.-24     	; 0x3a86 <utoa+0xc>
    3a9e:	10 82       	st	Z, r1
    3aa0:	c9 01       	movw	r24, r18
    3aa2:	0c 94 74 1d 	jmp	0x3ae8	; 0x3ae8 <strrev>

00003aa6 <__eerd_byte_m644pa>:
    3aa6:	f9 99       	sbic	0x1f, 1	; 31
    3aa8:	fe cf       	rjmp	.-4      	; 0x3aa6 <__eerd_byte_m644pa>
    3aaa:	92 bd       	out	0x22, r25	; 34
    3aac:	81 bd       	out	0x21, r24	; 33
    3aae:	f8 9a       	sbi	0x1f, 0	; 31
    3ab0:	99 27       	eor	r25, r25
    3ab2:	80 b5       	in	r24, 0x20	; 32
    3ab4:	08 95       	ret

00003ab6 <__eerd_word_m644pa>:
    3ab6:	a8 e1       	ldi	r26, 0x18	; 24
    3ab8:	b0 e0       	ldi	r27, 0x00	; 0
    3aba:	42 e0       	ldi	r20, 0x02	; 2
    3abc:	50 e0       	ldi	r21, 0x00	; 0
    3abe:	0c 94 86 1d 	jmp	0x3b0c	; 0x3b0c <__eerd_blraw_m644pa>

00003ac2 <__eewr_byte_m644pa>:
    3ac2:	26 2f       	mov	r18, r22

00003ac4 <__eewr_r18_m644pa>:
    3ac4:	f9 99       	sbic	0x1f, 1	; 31
    3ac6:	fe cf       	rjmp	.-4      	; 0x3ac4 <__eewr_r18_m644pa>
    3ac8:	1f ba       	out	0x1f, r1	; 31
    3aca:	92 bd       	out	0x22, r25	; 34
    3acc:	81 bd       	out	0x21, r24	; 33
    3ace:	20 bd       	out	0x20, r18	; 32
    3ad0:	0f b6       	in	r0, 0x3f	; 63
    3ad2:	f8 94       	cli
    3ad4:	fa 9a       	sbi	0x1f, 2	; 31
    3ad6:	f9 9a       	sbi	0x1f, 1	; 31
    3ad8:	0f be       	out	0x3f, r0	; 63
    3ada:	01 96       	adiw	r24, 0x01	; 1
    3adc:	08 95       	ret

00003ade <__eewr_word_m644pa>:
    3ade:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <__eewr_byte_m644pa>
    3ae2:	27 2f       	mov	r18, r23
    3ae4:	0c 94 62 1d 	jmp	0x3ac4	; 0x3ac4 <__eewr_r18_m644pa>

00003ae8 <strrev>:
    3ae8:	dc 01       	movw	r26, r24
    3aea:	fc 01       	movw	r30, r24
    3aec:	67 2f       	mov	r22, r23
    3aee:	71 91       	ld	r23, Z+
    3af0:	77 23       	and	r23, r23
    3af2:	e1 f7       	brne	.-8      	; 0x3aec <strrev+0x4>
    3af4:	32 97       	sbiw	r30, 0x02	; 2
    3af6:	04 c0       	rjmp	.+8      	; 0x3b00 <strrev+0x18>
    3af8:	7c 91       	ld	r23, X
    3afa:	6d 93       	st	X+, r22
    3afc:	70 83       	st	Z, r23
    3afe:	62 91       	ld	r22, -Z
    3b00:	ae 17       	cp	r26, r30
    3b02:	bf 07       	cpc	r27, r31
    3b04:	c8 f3       	brcs	.-14     	; 0x3af8 <strrev+0x10>
    3b06:	08 95       	ret

00003b08 <__eerd_block_m644pa>:
    3b08:	dc 01       	movw	r26, r24
    3b0a:	cb 01       	movw	r24, r22

00003b0c <__eerd_blraw_m644pa>:
    3b0c:	fc 01       	movw	r30, r24
    3b0e:	f9 99       	sbic	0x1f, 1	; 31
    3b10:	fe cf       	rjmp	.-4      	; 0x3b0e <__eerd_blraw_m644pa+0x2>
    3b12:	06 c0       	rjmp	.+12     	; 0x3b20 <__eerd_blraw_m644pa+0x14>
    3b14:	f2 bd       	out	0x22, r31	; 34
    3b16:	e1 bd       	out	0x21, r30	; 33
    3b18:	f8 9a       	sbi	0x1f, 0	; 31
    3b1a:	31 96       	adiw	r30, 0x01	; 1
    3b1c:	00 b4       	in	r0, 0x20	; 32
    3b1e:	0d 92       	st	X+, r0
    3b20:	41 50       	subi	r20, 0x01	; 1
    3b22:	50 40       	sbci	r21, 0x00	; 0
    3b24:	b8 f7       	brcc	.-18     	; 0x3b14 <__eerd_blraw_m644pa+0x8>
    3b26:	08 95       	ret

00003b28 <_exit>:
    3b28:	f8 94       	cli

00003b2a <__stop_program>:
    3b2a:	ff cf       	rjmp	.-2      	; 0x3b2a <__stop_program>
