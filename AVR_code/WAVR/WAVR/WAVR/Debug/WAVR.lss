
WAVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  00002aea  00002b9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002aea  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000042  00800182  00800182  00002c20  2**0
                  ALLOC
  3 .eeprom       00000007  00810000  00810000  00002c20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00001008  00000000  00000000  00002c28  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000522  00000000  00000000  00003c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000120  00000000  00000000  00004158  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f1c  00000000  00000000  00004278  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000039b  00000000  00000000  00006194  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000daa  00000000  00000000  0000652f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007a8  00000000  00000000  000072dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000a19  00000000  00000000  00007a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001035  00000000  00000000  0000849d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__vector_3>
      10:	0c 94 0b 0c 	jmp	0x1816	; 0x1816 <__vector_4>
      14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      2c:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <__vector_11>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 2e 0d 	jmp	0x1a5c	; 0x1a5c <__vector_20>
      54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      68:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      6c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      70:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      74:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      78:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

0000007c <__ctors_start>:
      7c:	8a 14       	cp	r8, r10

0000007e <__ctors_end>:
      7e:	11 24       	eor	r1, r1
      80:	1f be       	out	0x3f, r1	; 63
      82:	cf ef       	ldi	r28, 0xFF	; 255
      84:	d8 e0       	ldi	r29, 0x08	; 8
      86:	de bf       	out	0x3e, r29	; 62
      88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_copy_data>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 e0       	ldi	r26, 0x00	; 0
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	ea ee       	ldi	r30, 0xEA	; 234
      92:	fa e2       	ldi	r31, 0x2A	; 42
      94:	02 c0       	rjmp	.+4      	; 0x9a <__do_copy_data+0x10>
      96:	05 90       	lpm	r0, Z+
      98:	0d 92       	st	X+, r0
      9a:	a2 38       	cpi	r26, 0x82	; 130
      9c:	b1 07       	cpc	r27, r17
      9e:	d9 f7       	brne	.-10     	; 0x96 <__do_copy_data+0xc>

000000a0 <__do_clear_bss>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a2 e8       	ldi	r26, 0x82	; 130
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
      a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
      aa:	a4 3c       	cpi	r26, 0xC4	; 196
      ac:	b1 07       	cpc	r27, r17
      ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>

000000b0 <__do_global_ctors>:
      b0:	10 e0       	ldi	r17, 0x00	; 0
      b2:	ce e7       	ldi	r28, 0x7E	; 126
      b4:	d0 e0       	ldi	r29, 0x00	; 0
      b6:	04 c0       	rjmp	.+8      	; 0xc0 <__do_global_ctors+0x10>
      b8:	22 97       	sbiw	r28, 0x02	; 2
      ba:	fe 01       	movw	r30, r28
      bc:	0e 94 cc 14 	call	0x2998	; 0x2998 <__tablejump__>
      c0:	cc 37       	cpi	r28, 0x7C	; 124
      c2:	d1 07       	cpc	r29, r17
      c4:	c9 f7       	brne	.-14     	; 0xb8 <__do_global_ctors+0x8>
      c6:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <main>
      ca:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <_ZN6myDateC1Ev>:
		void setYear(int year);
		void addMonths(int months);
		void addYears(int years);
};

myDate::myDate(){
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	00 d0       	rcall	.+0      	; 0xd8 <_ZN6myDateC1Ev+0x6>
      d8:	cd b7       	in	r28, 0x3d	; 61
      da:	de b7       	in	r29, 0x3e	; 62
      dc:	9a 83       	std	Y+2, r25	; 0x02
      de:	89 83       	std	Y+1, r24	; 0x01
	month = 0;
      e0:	89 81       	ldd	r24, Y+1	; 0x01
      e2:	9a 81       	ldd	r25, Y+2	; 0x02
      e4:	fc 01       	movw	r30, r24
      e6:	11 82       	std	Z+1, r1	; 0x01
      e8:	10 82       	st	Z, r1
	day = 0;
      ea:	89 81       	ldd	r24, Y+1	; 0x01
      ec:	9a 81       	ldd	r25, Y+2	; 0x02
      ee:	fc 01       	movw	r30, r24
      f0:	13 82       	std	Z+3, r1	; 0x03
      f2:	12 82       	std	Z+2, r1	; 0x02
	year = 0;
      f4:	89 81       	ldd	r24, Y+1	; 0x01
      f6:	9a 81       	ldd	r25, Y+2	; 0x02
      f8:	fc 01       	movw	r30, r24
      fa:	15 82       	std	Z+5, r1	; 0x05
      fc:	14 82       	std	Z+4, r1	; 0x04
}
      fe:	0f 90       	pop	r0
     100:	0f 90       	pop	r0
     102:	df 91       	pop	r29
     104:	cf 91       	pop	r28
     106:	08 95       	ret

00000108 <_ZN6myDateC1Eiii>:

myDate::myDate(int month,int day,int year){
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
     110:	28 97       	sbiw	r28, 0x08	; 8
     112:	0f b6       	in	r0, 0x3f	; 63
     114:	f8 94       	cli
     116:	de bf       	out	0x3e, r29	; 62
     118:	0f be       	out	0x3f, r0	; 63
     11a:	cd bf       	out	0x3d, r28	; 61
     11c:	9a 83       	std	Y+2, r25	; 0x02
     11e:	89 83       	std	Y+1, r24	; 0x01
     120:	7c 83       	std	Y+4, r23	; 0x04
     122:	6b 83       	std	Y+3, r22	; 0x03
     124:	5e 83       	std	Y+6, r21	; 0x06
     126:	4d 83       	std	Y+5, r20	; 0x05
     128:	38 87       	std	Y+8, r19	; 0x08
     12a:	2f 83       	std	Y+7, r18	; 0x07
	setDate(month,day,year);
     12c:	89 81       	ldd	r24, Y+1	; 0x01
     12e:	9a 81       	ldd	r25, Y+2	; 0x02
     130:	6b 81       	ldd	r22, Y+3	; 0x03
     132:	7c 81       	ldd	r23, Y+4	; 0x04
     134:	4d 81       	ldd	r20, Y+5	; 0x05
     136:	5e 81       	ldd	r21, Y+6	; 0x06
     138:	2f 81       	ldd	r18, Y+7	; 0x07
     13a:	38 85       	ldd	r19, Y+8	; 0x08
     13c:	0e 94 84 01 	call	0x308	; 0x308 <_ZN6myDate7setDateEiii>
}
     140:	28 96       	adiw	r28, 0x08	; 8
     142:	0f b6       	in	r0, 0x3f	; 63
     144:	f8 94       	cli
     146:	de bf       	out	0x3e, r29	; 62
     148:	0f be       	out	0x3f, r0	; 63
     14a:	cd bf       	out	0x3d, r28	; 61
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	08 95       	ret

00000152 <_ZN6myDate9getMonthsEv>:

BYTE myDate::getMonths(){
     152:	cf 93       	push	r28
     154:	df 93       	push	r29
     156:	00 d0       	rcall	.+0      	; 0x158 <_ZN6myDate9getMonthsEv+0x6>
     158:	cd b7       	in	r28, 0x3d	; 61
     15a:	de b7       	in	r29, 0x3e	; 62
     15c:	9a 83       	std	Y+2, r25	; 0x02
     15e:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)month;
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	9a 81       	ldd	r25, Y+2	; 0x02
     164:	fc 01       	movw	r30, r24
     166:	80 81       	ld	r24, Z
     168:	91 81       	ldd	r25, Z+1	; 0x01
}
     16a:	0f 90       	pop	r0
     16c:	0f 90       	pop	r0
     16e:	df 91       	pop	r29
     170:	cf 91       	pop	r28
     172:	08 95       	ret

00000174 <_ZN6myDate8getYearsEv>:

WORD myDate::getYears(){
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
     178:	00 d0       	rcall	.+0      	; 0x17a <_ZN6myDate8getYearsEv+0x6>
     17a:	cd b7       	in	r28, 0x3d	; 61
     17c:	de b7       	in	r29, 0x3e	; 62
     17e:	9a 83       	std	Y+2, r25	; 0x02
     180:	89 83       	std	Y+1, r24	; 0x01
	return (WORD)year;
     182:	89 81       	ldd	r24, Y+1	; 0x01
     184:	9a 81       	ldd	r25, Y+2	; 0x02
     186:	fc 01       	movw	r30, r24
     188:	84 81       	ldd	r24, Z+4	; 0x04
     18a:	95 81       	ldd	r25, Z+5	; 0x05
}
     18c:	0f 90       	pop	r0
     18e:	0f 90       	pop	r0
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <_ZN6myDate7getDaysEv>:

BYTE myDate::getDays(){
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	00 d0       	rcall	.+0      	; 0x19c <_ZN6myDate7getDaysEv+0x6>
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
     1a0:	9a 83       	std	Y+2, r25	; 0x02
     1a2:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)day;
     1a4:	89 81       	ldd	r24, Y+1	; 0x01
     1a6:	9a 81       	ldd	r25, Y+2	; 0x02
     1a8:	fc 01       	movw	r30, r24
     1aa:	82 81       	ldd	r24, Z+2	; 0x02
     1ac:	93 81       	ldd	r25, Z+3	; 0x03
}
     1ae:	0f 90       	pop	r0
     1b0:	0f 90       	pop	r0
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	08 95       	ret

000001b8 <_ZN6myDate8setMonthEi>:

void myDate::setMonth(int month){
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	00 d0       	rcall	.+0      	; 0x1be <_ZN6myDate8setMonthEi+0x6>
     1be:	00 d0       	rcall	.+0      	; 0x1c0 <_ZN6myDate8setMonthEi+0x8>
     1c0:	cd b7       	in	r28, 0x3d	; 61
     1c2:	de b7       	in	r29, 0x3e	; 62
     1c4:	9a 83       	std	Y+2, r25	; 0x02
     1c6:	89 83       	std	Y+1, r24	; 0x01
     1c8:	7c 83       	std	Y+4, r23	; 0x04
     1ca:	6b 83       	std	Y+3, r22	; 0x03
	if (month/13 == 0){
     1cc:	8b 81       	ldd	r24, Y+3	; 0x03
     1ce:	9c 81       	ldd	r25, Y+4	; 0x04
     1d0:	0c 96       	adiw	r24, 0x0c	; 12
     1d2:	89 31       	cpi	r24, 0x19	; 25
     1d4:	91 05       	cpc	r25, r1
     1d6:	38 f4       	brcc	.+14     	; 0x1e6 <_ZN6myDate8setMonthEi+0x2e>
		this->month = month;
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
     1da:	9a 81       	ldd	r25, Y+2	; 0x02
     1dc:	2b 81       	ldd	r18, Y+3	; 0x03
     1de:	3c 81       	ldd	r19, Y+4	; 0x04
     1e0:	fc 01       	movw	r30, r24
     1e2:	31 83       	std	Z+1, r19	; 0x01
     1e4:	20 83       	st	Z, r18
	}
}
     1e6:	0f 90       	pop	r0
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <_ZN6myDate6setDayEi>:

void myDate::setDay(int day){
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	00 d0       	rcall	.+0      	; 0x1fa <_ZN6myDate6setDayEi+0x6>
     1fa:	00 d0       	rcall	.+0      	; 0x1fc <_ZN6myDate6setDayEi+0x8>
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
     200:	9a 83       	std	Y+2, r25	; 0x02
     202:	89 83       	std	Y+1, r24	; 0x01
     204:	7c 83       	std	Y+4, r23	; 0x04
     206:	6b 83       	std	Y+3, r22	; 0x03
	if ((month == 9 || month == 4 || month == 6) && day/31 == 0){
     208:	89 81       	ldd	r24, Y+1	; 0x01
     20a:	9a 81       	ldd	r25, Y+2	; 0x02
     20c:	fc 01       	movw	r30, r24
     20e:	80 81       	ld	r24, Z
     210:	91 81       	ldd	r25, Z+1	; 0x01
     212:	89 30       	cpi	r24, 0x09	; 9
     214:	91 05       	cpc	r25, r1
     216:	81 f0       	breq	.+32     	; 0x238 <_ZN6myDate6setDayEi+0x44>
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	9a 81       	ldd	r25, Y+2	; 0x02
     21c:	fc 01       	movw	r30, r24
     21e:	80 81       	ld	r24, Z
     220:	91 81       	ldd	r25, Z+1	; 0x01
     222:	84 30       	cpi	r24, 0x04	; 4
     224:	91 05       	cpc	r25, r1
     226:	41 f0       	breq	.+16     	; 0x238 <_ZN6myDate6setDayEi+0x44>
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	9a 81       	ldd	r25, Y+2	; 0x02
     22c:	fc 01       	movw	r30, r24
     22e:	80 81       	ld	r24, Z
     230:	91 81       	ldd	r25, Z+1	; 0x01
     232:	86 30       	cpi	r24, 0x06	; 6
     234:	91 05       	cpc	r25, r1
     236:	41 f4       	brne	.+16     	; 0x248 <_ZN6myDate6setDayEi+0x54>
     238:	8b 81       	ldd	r24, Y+3	; 0x03
     23a:	9c 81       	ldd	r25, Y+4	; 0x04
     23c:	4e 96       	adiw	r24, 0x1e	; 30
     23e:	8d 33       	cpi	r24, 0x3D	; 61
     240:	91 05       	cpc	r25, r1
     242:	10 f4       	brcc	.+4      	; 0x248 <_ZN6myDate6setDayEi+0x54>
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	01 c0       	rjmp	.+2      	; 0x24a <_ZN6myDate6setDayEi+0x56>
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	88 23       	and	r24, r24
     24c:	41 f0       	breq	.+16     	; 0x25e <_ZN6myDate6setDayEi+0x6a>
		this->day = day;
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	9a 81       	ldd	r25, Y+2	; 0x02
     252:	2b 81       	ldd	r18, Y+3	; 0x03
     254:	3c 81       	ldd	r19, Y+4	; 0x04
     256:	fc 01       	movw	r30, r24
     258:	33 83       	std	Z+3, r19	; 0x03
     25a:	22 83       	std	Z+2, r18	; 0x02
     25c:	28 c0       	rjmp	.+80     	; 0x2ae <_ZN6myDate6setDayEi+0xba>
	} else if (month == 2 && day/29 == 0){
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	9a 81       	ldd	r25, Y+2	; 0x02
     262:	fc 01       	movw	r30, r24
     264:	80 81       	ld	r24, Z
     266:	91 81       	ldd	r25, Z+1	; 0x01
     268:	82 30       	cpi	r24, 0x02	; 2
     26a:	91 05       	cpc	r25, r1
     26c:	41 f4       	brne	.+16     	; 0x27e <_ZN6myDate6setDayEi+0x8a>
     26e:	8b 81       	ldd	r24, Y+3	; 0x03
     270:	9c 81       	ldd	r25, Y+4	; 0x04
     272:	4c 96       	adiw	r24, 0x1c	; 28
     274:	89 33       	cpi	r24, 0x39	; 57
     276:	91 05       	cpc	r25, r1
     278:	10 f4       	brcc	.+4      	; 0x27e <_ZN6myDate6setDayEi+0x8a>
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	01 c0       	rjmp	.+2      	; 0x280 <_ZN6myDate6setDayEi+0x8c>
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	88 23       	and	r24, r24
     282:	41 f0       	breq	.+16     	; 0x294 <_ZN6myDate6setDayEi+0xa0>
		this->day = day;
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	9a 81       	ldd	r25, Y+2	; 0x02
     288:	2b 81       	ldd	r18, Y+3	; 0x03
     28a:	3c 81       	ldd	r19, Y+4	; 0x04
     28c:	fc 01       	movw	r30, r24
     28e:	33 83       	std	Z+3, r19	; 0x03
     290:	22 83       	std	Z+2, r18	; 0x02
     292:	0d c0       	rjmp	.+26     	; 0x2ae <_ZN6myDate6setDayEi+0xba>
	} else{
		if (day/32 == 0){
     294:	8b 81       	ldd	r24, Y+3	; 0x03
     296:	9c 81       	ldd	r25, Y+4	; 0x04
     298:	4f 96       	adiw	r24, 0x1f	; 31
     29a:	8f 33       	cpi	r24, 0x3F	; 63
     29c:	91 05       	cpc	r25, r1
     29e:	38 f4       	brcc	.+14     	; 0x2ae <_ZN6myDate6setDayEi+0xba>
			this->day = day;
     2a0:	89 81       	ldd	r24, Y+1	; 0x01
     2a2:	9a 81       	ldd	r25, Y+2	; 0x02
     2a4:	2b 81       	ldd	r18, Y+3	; 0x03
     2a6:	3c 81       	ldd	r19, Y+4	; 0x04
     2a8:	fc 01       	movw	r30, r24
     2aa:	33 83       	std	Z+3, r19	; 0x03
     2ac:	22 83       	std	Z+2, r18	; 0x02
		}		
	}
}
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	08 95       	ret

000002bc <_ZN6myDate7setYearEi>:

void myDate::setYear(int year){
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	00 d0       	rcall	.+0      	; 0x2c2 <_ZN6myDate7setYearEi+0x6>
     2c2:	00 d0       	rcall	.+0      	; 0x2c4 <_ZN6myDate7setYearEi+0x8>
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
     2c8:	9a 83       	std	Y+2, r25	; 0x02
     2ca:	89 83       	std	Y+1, r24	; 0x01
     2cc:	7c 83       	std	Y+4, r23	; 0x04
     2ce:	6b 83       	std	Y+3, r22	; 0x03
	if (year >= 2000){
     2d0:	8b 81       	ldd	r24, Y+3	; 0x03
     2d2:	9c 81       	ldd	r25, Y+4	; 0x04
     2d4:	27 e0       	ldi	r18, 0x07	; 7
     2d6:	80 3d       	cpi	r24, 0xD0	; 208
     2d8:	92 07       	cpc	r25, r18
     2da:	44 f0       	brlt	.+16     	; 0x2ec <_ZN6myDate7setYearEi+0x30>
		this->year = year;
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	9a 81       	ldd	r25, Y+2	; 0x02
     2e0:	2b 81       	ldd	r18, Y+3	; 0x03
     2e2:	3c 81       	ldd	r19, Y+4	; 0x04
     2e4:	fc 01       	movw	r30, r24
     2e6:	35 83       	std	Z+5, r19	; 0x05
     2e8:	24 83       	std	Z+4, r18	; 0x04
     2ea:	07 c0       	rjmp	.+14     	; 0x2fa <_ZN6myDate7setYearEi+0x3e>
	} else {
		this->year = 1010;
     2ec:	89 81       	ldd	r24, Y+1	; 0x01
     2ee:	9a 81       	ldd	r25, Y+2	; 0x02
     2f0:	22 ef       	ldi	r18, 0xF2	; 242
     2f2:	33 e0       	ldi	r19, 0x03	; 3
     2f4:	fc 01       	movw	r30, r24
     2f6:	35 83       	std	Z+5, r19	; 0x05
     2f8:	24 83       	std	Z+4, r18	; 0x04
	}	
}
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	08 95       	ret

00000308 <_ZN6myDate7setDateEiii>:

void myDate::setDate(int month, int day, int year){
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	cd b7       	in	r28, 0x3d	; 61
     30e:	de b7       	in	r29, 0x3e	; 62
     310:	28 97       	sbiw	r28, 0x08	; 8
     312:	0f b6       	in	r0, 0x3f	; 63
     314:	f8 94       	cli
     316:	de bf       	out	0x3e, r29	; 62
     318:	0f be       	out	0x3f, r0	; 63
     31a:	cd bf       	out	0x3d, r28	; 61
     31c:	9a 83       	std	Y+2, r25	; 0x02
     31e:	89 83       	std	Y+1, r24	; 0x01
     320:	7c 83       	std	Y+4, r23	; 0x04
     322:	6b 83       	std	Y+3, r22	; 0x03
     324:	5e 83       	std	Y+6, r21	; 0x06
     326:	4d 83       	std	Y+5, r20	; 0x05
     328:	38 87       	std	Y+8, r19	; 0x08
     32a:	2f 83       	std	Y+7, r18	; 0x07
	setMonth(month);
     32c:	89 81       	ldd	r24, Y+1	; 0x01
     32e:	9a 81       	ldd	r25, Y+2	; 0x02
     330:	2b 81       	ldd	r18, Y+3	; 0x03
     332:	3c 81       	ldd	r19, Y+4	; 0x04
     334:	b9 01       	movw	r22, r18
     336:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN6myDate8setMonthEi>
	setDay(day);
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	9a 81       	ldd	r25, Y+2	; 0x02
     33e:	2d 81       	ldd	r18, Y+5	; 0x05
     340:	3e 81       	ldd	r19, Y+6	; 0x06
     342:	b9 01       	movw	r22, r18
     344:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_ZN6myDate6setDayEi>
	setYear(year);
     348:	89 81       	ldd	r24, Y+1	; 0x01
     34a:	9a 81       	ldd	r25, Y+2	; 0x02
     34c:	2f 81       	ldd	r18, Y+7	; 0x07
     34e:	38 85       	ldd	r19, Y+8	; 0x08
     350:	b9 01       	movw	r22, r18
     352:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_ZN6myDate7setYearEi>
}
     356:	28 96       	adiw	r28, 0x08	; 8
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	0f be       	out	0x3f, r0	; 63
     360:	cd bf       	out	0x3d, r28	; 61
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	08 95       	ret

00000368 <_ZN6myDate8addYearsEi>:


void myDate::addYears(int years){	//allows negative years to come in, therefore subtracting years
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	00 d0       	rcall	.+0      	; 0x36e <_ZN6myDate8addYearsEi+0x6>
     36e:	00 d0       	rcall	.+0      	; 0x370 <_ZN6myDate8addYearsEi+0x8>
     370:	00 d0       	rcall	.+0      	; 0x372 <_ZN6myDate8addYearsEi+0xa>
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	9c 83       	std	Y+4, r25	; 0x04
     378:	8b 83       	std	Y+3, r24	; 0x03
     37a:	7e 83       	std	Y+6, r23	; 0x06
     37c:	6d 83       	std	Y+5, r22	; 0x05
	volatile int tempYears = year + years;
     37e:	8b 81       	ldd	r24, Y+3	; 0x03
     380:	9c 81       	ldd	r25, Y+4	; 0x04
     382:	fc 01       	movw	r30, r24
     384:	24 81       	ldd	r18, Z+4	; 0x04
     386:	35 81       	ldd	r19, Z+5	; 0x05
     388:	8d 81       	ldd	r24, Y+5	; 0x05
     38a:	9e 81       	ldd	r25, Y+6	; 0x06
     38c:	82 0f       	add	r24, r18
     38e:	93 1f       	adc	r25, r19
     390:	9a 83       	std	Y+2, r25	; 0x02
     392:	89 83       	std	Y+1, r24	; 0x01
	if (tempYears > 2012){
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	9a 81       	ldd	r25, Y+2	; 0x02
     398:	21 e0       	ldi	r18, 0x01	; 1
     39a:	f7 e0       	ldi	r31, 0x07	; 7
     39c:	8d 3d       	cpi	r24, 0xDD	; 221
     39e:	9f 07       	cpc	r25, r31
     3a0:	0c f4       	brge	.+2      	; 0x3a4 <_ZN6myDate8addYearsEi+0x3c>
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	22 23       	and	r18, r18
     3a6:	39 f0       	breq	.+14     	; 0x3b6 <_ZN6myDate8addYearsEi+0x4e>
		year = tempYears;
     3a8:	29 81       	ldd	r18, Y+1	; 0x01
     3aa:	3a 81       	ldd	r19, Y+2	; 0x02
     3ac:	8b 81       	ldd	r24, Y+3	; 0x03
     3ae:	9c 81       	ldd	r25, Y+4	; 0x04
     3b0:	fc 01       	movw	r30, r24
     3b2:	35 83       	std	Z+5, r19	; 0x05
     3b4:	24 83       	std	Z+4, r18	; 0x04
	}
}
     3b6:	26 96       	adiw	r28, 0x06	; 6
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	f8 94       	cli
     3bc:	de bf       	out	0x3e, r29	; 62
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	cd bf       	out	0x3d, r28	; 61
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <_ZN6myDate9addMonthsEi>:

void myDate::addMonths(int months){	//adds months depending on number of months currently on.
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
     3d0:	2a 97       	sbiw	r28, 0x0a	; 10
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	f8 94       	cli
     3d6:	de bf       	out	0x3e, r29	; 62
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	cd bf       	out	0x3d, r28	; 61
     3dc:	98 87       	std	Y+8, r25	; 0x08
     3de:	8f 83       	std	Y+7, r24	; 0x07
     3e0:	7a 87       	std	Y+10, r23	; 0x0a
     3e2:	69 87       	std	Y+9, r22	; 0x09
	volatile int tempMonths = month + months;
     3e4:	8f 81       	ldd	r24, Y+7	; 0x07
     3e6:	98 85       	ldd	r25, Y+8	; 0x08
     3e8:	fc 01       	movw	r30, r24
     3ea:	20 81       	ld	r18, Z
     3ec:	31 81       	ldd	r19, Z+1	; 0x01
     3ee:	89 85       	ldd	r24, Y+9	; 0x09
     3f0:	9a 85       	ldd	r25, Y+10	; 0x0a
     3f2:	82 0f       	add	r24, r18
     3f4:	93 1f       	adc	r25, r19
     3f6:	9e 83       	std	Y+6, r25	; 0x06
     3f8:	8d 83       	std	Y+5, r24	; 0x05
	if (tempMonths > 12 && tempMonths < 25){
     3fa:	8d 81       	ldd	r24, Y+5	; 0x05
     3fc:	9e 81       	ldd	r25, Y+6	; 0x06
     3fe:	8d 30       	cpi	r24, 0x0D	; 13
     400:	91 05       	cpc	r25, r1
     402:	3c f0       	brlt	.+14     	; 0x412 <_ZN6myDate9addMonthsEi+0x4a>
     404:	8d 81       	ldd	r24, Y+5	; 0x05
     406:	9e 81       	ldd	r25, Y+6	; 0x06
     408:	89 31       	cpi	r24, 0x19	; 25
     40a:	91 05       	cpc	r25, r1
     40c:	14 f4       	brge	.+4      	; 0x412 <_ZN6myDate9addMonthsEi+0x4a>
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	01 c0       	rjmp	.+2      	; 0x414 <_ZN6myDate9addMonthsEi+0x4c>
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	88 23       	and	r24, r24
     416:	61 f0       	breq	.+24     	; 0x430 <_ZN6myDate9addMonthsEi+0x68>
		int yearsToAdd = 1;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	9a 83       	std	Y+2, r25	; 0x02
     41e:	89 83       	std	Y+1, r24	; 0x01
		addYears(yearsToAdd);
     420:	8f 81       	ldd	r24, Y+7	; 0x07
     422:	98 85       	ldd	r25, Y+8	; 0x08
     424:	29 81       	ldd	r18, Y+1	; 0x01
     426:	3a 81       	ldd	r19, Y+2	; 0x02
     428:	b9 01       	movw	r22, r18
     42a:	0e 94 b4 01 	call	0x368	; 0x368 <_ZN6myDate8addYearsEi>
     42e:	22 c0       	rjmp	.+68     	; 0x474 <_ZN6myDate9addMonthsEi+0xac>
	} else if (tempMonths >= 25){
     430:	8d 81       	ldd	r24, Y+5	; 0x05
     432:	9e 81       	ldd	r25, Y+6	; 0x06
     434:	21 e0       	ldi	r18, 0x01	; 1
     436:	89 31       	cpi	r24, 0x19	; 25
     438:	91 05       	cpc	r25, r1
     43a:	0c f4       	brge	.+2      	; 0x43e <_ZN6myDate9addMonthsEi+0x76>
     43c:	20 e0       	ldi	r18, 0x00	; 0
     43e:	22 23       	and	r18, r18
     440:	91 f0       	breq	.+36     	; 0x466 <_ZN6myDate9addMonthsEi+0x9e>
		int yearsToAdd = tempMonths/12;
     442:	8d 81       	ldd	r24, Y+5	; 0x05
     444:	9e 81       	ldd	r25, Y+6	; 0x06
     446:	2c e0       	ldi	r18, 0x0C	; 12
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	b9 01       	movw	r22, r18
     44c:	0e 94 a3 14 	call	0x2946	; 0x2946 <__divmodhi4>
     450:	9b 01       	movw	r18, r22
     452:	3c 83       	std	Y+4, r19	; 0x04
     454:	2b 83       	std	Y+3, r18	; 0x03
		addYears(yearsToAdd);
     456:	8f 81       	ldd	r24, Y+7	; 0x07
     458:	98 85       	ldd	r25, Y+8	; 0x08
     45a:	2b 81       	ldd	r18, Y+3	; 0x03
     45c:	3c 81       	ldd	r19, Y+4	; 0x04
     45e:	b9 01       	movw	r22, r18
     460:	0e 94 b4 01 	call	0x368	; 0x368 <_ZN6myDate8addYearsEi>
     464:	07 c0       	rjmp	.+14     	; 0x474 <_ZN6myDate9addMonthsEi+0xac>
	} else {
		month = tempMonths;
     466:	2d 81       	ldd	r18, Y+5	; 0x05
     468:	3e 81       	ldd	r19, Y+6	; 0x06
     46a:	8f 81       	ldd	r24, Y+7	; 0x07
     46c:	98 85       	ldd	r25, Y+8	; 0x08
     46e:	fc 01       	movw	r30, r24
     470:	31 83       	std	Z+1, r19	; 0x01
     472:	20 83       	st	Z, r18
	}	
}
     474:	2a 96       	adiw	r28, 0x0a	; 10
     476:	0f b6       	in	r0, 0x3f	; 63
     478:	f8 94       	cli
     47a:	de bf       	out	0x3e, r29	; 62
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	cd bf       	out	0x3d, r28	; 61
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <_ZN6myDate7addDaysEi>:

void myDate::addDays(int days){
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	00 d0       	rcall	.+0      	; 0x48c <_ZN6myDate7addDaysEi+0x6>
     48c:	00 d0       	rcall	.+0      	; 0x48e <_ZN6myDate7addDaysEi+0x8>
     48e:	00 d0       	rcall	.+0      	; 0x490 <_ZN6myDate7addDaysEi+0xa>
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
     494:	9c 83       	std	Y+4, r25	; 0x04
     496:	8b 83       	std	Y+3, r24	; 0x03
     498:	7e 83       	std	Y+6, r23	; 0x06
     49a:	6d 83       	std	Y+5, r22	; 0x05
	volatile int tempDays = days + day;
     49c:	8b 81       	ldd	r24, Y+3	; 0x03
     49e:	9c 81       	ldd	r25, Y+4	; 0x04
     4a0:	fc 01       	movw	r30, r24
     4a2:	22 81       	ldd	r18, Z+2	; 0x02
     4a4:	33 81       	ldd	r19, Z+3	; 0x03
     4a6:	8d 81       	ldd	r24, Y+5	; 0x05
     4a8:	9e 81       	ldd	r25, Y+6	; 0x06
     4aa:	82 0f       	add	r24, r18
     4ac:	93 1f       	adc	r25, r19
     4ae:	9a 83       	std	Y+2, r25	; 0x02
     4b0:	89 83       	std	Y+1, r24	; 0x01
	//Logic for incrementing days the right way. We are assuming no more than one month will be added
	if (month == 9 || month == 4 || month == 6){	//30 days in a month
     4b2:	8b 81       	ldd	r24, Y+3	; 0x03
     4b4:	9c 81       	ldd	r25, Y+4	; 0x04
     4b6:	fc 01       	movw	r30, r24
     4b8:	80 81       	ld	r24, Z
     4ba:	91 81       	ldd	r25, Z+1	; 0x01
     4bc:	89 30       	cpi	r24, 0x09	; 9
     4be:	91 05       	cpc	r25, r1
     4c0:	81 f0       	breq	.+32     	; 0x4e2 <_ZN6myDate7addDaysEi+0x5c>
     4c2:	8b 81       	ldd	r24, Y+3	; 0x03
     4c4:	9c 81       	ldd	r25, Y+4	; 0x04
     4c6:	fc 01       	movw	r30, r24
     4c8:	80 81       	ld	r24, Z
     4ca:	91 81       	ldd	r25, Z+1	; 0x01
     4cc:	84 30       	cpi	r24, 0x04	; 4
     4ce:	91 05       	cpc	r25, r1
     4d0:	41 f0       	breq	.+16     	; 0x4e2 <_ZN6myDate7addDaysEi+0x5c>
     4d2:	8b 81       	ldd	r24, Y+3	; 0x03
     4d4:	9c 81       	ldd	r25, Y+4	; 0x04
     4d6:	fc 01       	movw	r30, r24
     4d8:	80 81       	ld	r24, Z
     4da:	91 81       	ldd	r25, Z+1	; 0x01
     4dc:	86 30       	cpi	r24, 0x06	; 6
     4de:	91 05       	cpc	r25, r1
     4e0:	11 f4       	brne	.+4      	; 0x4e6 <_ZN6myDate7addDaysEi+0x60>
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <_ZN6myDate7addDaysEi+0x62>
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	88 23       	and	r24, r24
     4ea:	31 f1       	breq	.+76     	; 0x538 <_ZN6myDate7addDaysEi+0xb2>
		if (tempDays/31 == 0){	
     4ec:	89 81       	ldd	r24, Y+1	; 0x01
     4ee:	9a 81       	ldd	r25, Y+2	; 0x02
     4f0:	4e 96       	adiw	r24, 0x1e	; 30
     4f2:	21 e0       	ldi	r18, 0x01	; 1
     4f4:	8d 33       	cpi	r24, 0x3D	; 61
     4f6:	91 05       	cpc	r25, r1
     4f8:	08 f0       	brcs	.+2      	; 0x4fc <_ZN6myDate7addDaysEi+0x76>
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	22 23       	and	r18, r18
     4fe:	41 f0       	breq	.+16     	; 0x510 <_ZN6myDate7addDaysEi+0x8a>
			day = tempDays;
     500:	29 81       	ldd	r18, Y+1	; 0x01
     502:	3a 81       	ldd	r19, Y+2	; 0x02
     504:	8b 81       	ldd	r24, Y+3	; 0x03
     506:	9c 81       	ldd	r25, Y+4	; 0x04
     508:	fc 01       	movw	r30, r24
     50a:	33 83       	std	Z+3, r19	; 0x03
     50c:	22 83       	std	Z+2, r18	; 0x02
     50e:	71 c0       	rjmp	.+226    	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		} else {
			addMonths(1);	//just add 1 month
     510:	8b 81       	ldd	r24, Y+3	; 0x03
     512:	9c 81       	ldd	r25, Y+4	; 0x04
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN6myDate9addMonthsEi>
			day = tempDays%31;			
     51c:	89 81       	ldd	r24, Y+1	; 0x01
     51e:	9a 81       	ldd	r25, Y+2	; 0x02
     520:	2f e1       	ldi	r18, 0x1F	; 31
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	b9 01       	movw	r22, r18
     526:	0e 94 a3 14 	call	0x2946	; 0x2946 <__divmodhi4>
     52a:	9c 01       	movw	r18, r24
     52c:	8b 81       	ldd	r24, Y+3	; 0x03
     52e:	9c 81       	ldd	r25, Y+4	; 0x04
     530:	fc 01       	movw	r30, r24
     532:	33 83       	std	Z+3, r19	; 0x03
     534:	22 83       	std	Z+2, r18	; 0x02
     536:	5d c0       	rjmp	.+186    	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		}
	} else if (month == 2){
     538:	8b 81       	ldd	r24, Y+3	; 0x03
     53a:	9c 81       	ldd	r25, Y+4	; 0x04
     53c:	fc 01       	movw	r30, r24
     53e:	80 81       	ld	r24, Z
     540:	91 81       	ldd	r25, Z+1	; 0x01
     542:	21 e0       	ldi	r18, 0x01	; 1
     544:	82 30       	cpi	r24, 0x02	; 2
     546:	91 05       	cpc	r25, r1
     548:	09 f0       	breq	.+2      	; 0x54c <_ZN6myDate7addDaysEi+0xc6>
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	22 23       	and	r18, r18
     54e:	49 f1       	breq	.+82     	; 0x5a2 <_ZN6myDate7addDaysEi+0x11c>
		if(day/29 == 0){		//Don't take into account LeapYear
     550:	8b 81       	ldd	r24, Y+3	; 0x03
     552:	9c 81       	ldd	r25, Y+4	; 0x04
     554:	fc 01       	movw	r30, r24
     556:	82 81       	ldd	r24, Z+2	; 0x02
     558:	93 81       	ldd	r25, Z+3	; 0x03
     55a:	4c 96       	adiw	r24, 0x1c	; 28
     55c:	21 e0       	ldi	r18, 0x01	; 1
     55e:	89 33       	cpi	r24, 0x39	; 57
     560:	91 05       	cpc	r25, r1
     562:	08 f0       	brcs	.+2      	; 0x566 <_ZN6myDate7addDaysEi+0xe0>
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	22 23       	and	r18, r18
     568:	41 f0       	breq	.+16     	; 0x57a <_ZN6myDate7addDaysEi+0xf4>
			day = tempDays;
     56a:	29 81       	ldd	r18, Y+1	; 0x01
     56c:	3a 81       	ldd	r19, Y+2	; 0x02
     56e:	8b 81       	ldd	r24, Y+3	; 0x03
     570:	9c 81       	ldd	r25, Y+4	; 0x04
     572:	fc 01       	movw	r30, r24
     574:	33 83       	std	Z+3, r19	; 0x03
     576:	22 83       	std	Z+2, r18	; 0x02
     578:	3c c0       	rjmp	.+120    	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		} else {
			addMonths(1);
     57a:	8b 81       	ldd	r24, Y+3	; 0x03
     57c:	9c 81       	ldd	r25, Y+4	; 0x04
     57e:	61 e0       	ldi	r22, 0x01	; 1
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN6myDate9addMonthsEi>
			day = tempDays%29;
     586:	89 81       	ldd	r24, Y+1	; 0x01
     588:	9a 81       	ldd	r25, Y+2	; 0x02
     58a:	2d e1       	ldi	r18, 0x1D	; 29
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	b9 01       	movw	r22, r18
     590:	0e 94 a3 14 	call	0x2946	; 0x2946 <__divmodhi4>
     594:	9c 01       	movw	r18, r24
     596:	8b 81       	ldd	r24, Y+3	; 0x03
     598:	9c 81       	ldd	r25, Y+4	; 0x04
     59a:	fc 01       	movw	r30, r24
     59c:	33 83       	std	Z+3, r19	; 0x03
     59e:	22 83       	std	Z+2, r18	; 0x02
     5a0:	28 c0       	rjmp	.+80     	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		}		
	} else {
		if (day/32 == 0){
     5a2:	8b 81       	ldd	r24, Y+3	; 0x03
     5a4:	9c 81       	ldd	r25, Y+4	; 0x04
     5a6:	fc 01       	movw	r30, r24
     5a8:	82 81       	ldd	r24, Z+2	; 0x02
     5aa:	93 81       	ldd	r25, Z+3	; 0x03
     5ac:	4f 96       	adiw	r24, 0x1f	; 31
     5ae:	21 e0       	ldi	r18, 0x01	; 1
     5b0:	8f 33       	cpi	r24, 0x3F	; 63
     5b2:	91 05       	cpc	r25, r1
     5b4:	08 f0       	brcs	.+2      	; 0x5b8 <_ZN6myDate7addDaysEi+0x132>
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	22 23       	and	r18, r18
     5ba:	41 f0       	breq	.+16     	; 0x5cc <_ZN6myDate7addDaysEi+0x146>
			day = tempDays;
     5bc:	29 81       	ldd	r18, Y+1	; 0x01
     5be:	3a 81       	ldd	r19, Y+2	; 0x02
     5c0:	8b 81       	ldd	r24, Y+3	; 0x03
     5c2:	9c 81       	ldd	r25, Y+4	; 0x04
     5c4:	fc 01       	movw	r30, r24
     5c6:	33 83       	std	Z+3, r19	; 0x03
     5c8:	22 83       	std	Z+2, r18	; 0x02
     5ca:	13 c0       	rjmp	.+38     	; 0x5f2 <_ZN6myDate7addDaysEi+0x16c>
		} else {
			addMonths(1);
     5cc:	8b 81       	ldd	r24, Y+3	; 0x03
     5ce:	9c 81       	ldd	r25, Y+4	; 0x04
     5d0:	61 e0       	ldi	r22, 0x01	; 1
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN6myDate9addMonthsEi>
			day = tempDays%32;
     5d8:	89 81       	ldd	r24, Y+1	; 0x01
     5da:	9a 81       	ldd	r25, Y+2	; 0x02
     5dc:	20 e2       	ldi	r18, 0x20	; 32
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	b9 01       	movw	r22, r18
     5e2:	0e 94 a3 14 	call	0x2946	; 0x2946 <__divmodhi4>
     5e6:	9c 01       	movw	r18, r24
     5e8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ea:	9c 81       	ldd	r25, Y+4	; 0x04
     5ec:	fc 01       	movw	r30, r24
     5ee:	33 83       	std	Z+3, r19	; 0x03
     5f0:	22 83       	std	Z+2, r18	; 0x02
		}
	}
}
     5f2:	26 96       	adiw	r28, 0x06	; 6
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	f8 94       	cli
     5f8:	de bf       	out	0x3e, r29	; 62
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	cd bf       	out	0x3d, r28	; 61
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <_ZN6myDate17checkValidityDateEv>:

BOOL myDate::checkValidityDate(){
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	00 d0       	rcall	.+0      	; 0x60a <_ZN6myDate17checkValidityDateEv+0x6>
     60a:	0f 92       	push	r0
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	9b 83       	std	Y+3, r25	; 0x03
     612:	8a 83       	std	Y+2, r24	; 0x02
	BOOL checkYear=fFalse;
     614:	19 82       	std	Y+1, r1	; 0x01
	if (month/13==0){
     616:	8a 81       	ldd	r24, Y+2	; 0x02
     618:	9b 81       	ldd	r25, Y+3	; 0x03
     61a:	fc 01       	movw	r30, r24
     61c:	80 81       	ld	r24, Z
     61e:	91 81       	ldd	r25, Z+1	; 0x01
     620:	0c 96       	adiw	r24, 0x0c	; 12
     622:	21 e0       	ldi	r18, 0x01	; 1
     624:	89 31       	cpi	r24, 0x19	; 25
     626:	91 05       	cpc	r25, r1
     628:	08 f0       	brcs	.+2      	; 0x62c <_ZN6myDate17checkValidityDateEv+0x28>
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	22 23       	and	r18, r18
     62e:	09 f4       	brne	.+2      	; 0x632 <_ZN6myDate17checkValidityDateEv+0x2e>
     630:	66 c0       	rjmp	.+204    	; 0x6fe <_ZN6myDate17checkValidityDateEv+0xfa>
			if ((month == 9 || month == 4 || month == 6) && day/31 == 0){
     632:	8a 81       	ldd	r24, Y+2	; 0x02
     634:	9b 81       	ldd	r25, Y+3	; 0x03
     636:	fc 01       	movw	r30, r24
     638:	80 81       	ld	r24, Z
     63a:	91 81       	ldd	r25, Z+1	; 0x01
     63c:	89 30       	cpi	r24, 0x09	; 9
     63e:	91 05       	cpc	r25, r1
     640:	81 f0       	breq	.+32     	; 0x662 <_ZN6myDate17checkValidityDateEv+0x5e>
     642:	8a 81       	ldd	r24, Y+2	; 0x02
     644:	9b 81       	ldd	r25, Y+3	; 0x03
     646:	fc 01       	movw	r30, r24
     648:	80 81       	ld	r24, Z
     64a:	91 81       	ldd	r25, Z+1	; 0x01
     64c:	84 30       	cpi	r24, 0x04	; 4
     64e:	91 05       	cpc	r25, r1
     650:	41 f0       	breq	.+16     	; 0x662 <_ZN6myDate17checkValidityDateEv+0x5e>
     652:	8a 81       	ldd	r24, Y+2	; 0x02
     654:	9b 81       	ldd	r25, Y+3	; 0x03
     656:	fc 01       	movw	r30, r24
     658:	80 81       	ld	r24, Z
     65a:	91 81       	ldd	r25, Z+1	; 0x01
     65c:	86 30       	cpi	r24, 0x06	; 6
     65e:	91 05       	cpc	r25, r1
     660:	59 f4       	brne	.+22     	; 0x678 <_ZN6myDate17checkValidityDateEv+0x74>
     662:	8a 81       	ldd	r24, Y+2	; 0x02
     664:	9b 81       	ldd	r25, Y+3	; 0x03
     666:	fc 01       	movw	r30, r24
     668:	82 81       	ldd	r24, Z+2	; 0x02
     66a:	93 81       	ldd	r25, Z+3	; 0x03
     66c:	4e 96       	adiw	r24, 0x1e	; 30
     66e:	8d 33       	cpi	r24, 0x3D	; 61
     670:	91 05       	cpc	r25, r1
     672:	10 f4       	brcc	.+4      	; 0x678 <_ZN6myDate17checkValidityDateEv+0x74>
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	01 c0       	rjmp	.+2      	; 0x67a <_ZN6myDate17checkValidityDateEv+0x76>
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	88 23       	and	r24, r24
     67c:	19 f0       	breq	.+6      	; 0x684 <_ZN6myDate17checkValidityDateEv+0x80>
				checkYear=fTrue;
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	89 83       	std	Y+1, r24	; 0x01
     682:	28 c0       	rjmp	.+80     	; 0x6d4 <_ZN6myDate17checkValidityDateEv+0xd0>
			} else if (month == 2 && day/29 == 0){
     684:	8a 81       	ldd	r24, Y+2	; 0x02
     686:	9b 81       	ldd	r25, Y+3	; 0x03
     688:	fc 01       	movw	r30, r24
     68a:	80 81       	ld	r24, Z
     68c:	91 81       	ldd	r25, Z+1	; 0x01
     68e:	82 30       	cpi	r24, 0x02	; 2
     690:	91 05       	cpc	r25, r1
     692:	59 f4       	brne	.+22     	; 0x6aa <_ZN6myDate17checkValidityDateEv+0xa6>
     694:	8a 81       	ldd	r24, Y+2	; 0x02
     696:	9b 81       	ldd	r25, Y+3	; 0x03
     698:	fc 01       	movw	r30, r24
     69a:	82 81       	ldd	r24, Z+2	; 0x02
     69c:	93 81       	ldd	r25, Z+3	; 0x03
     69e:	4c 96       	adiw	r24, 0x1c	; 28
     6a0:	89 33       	cpi	r24, 0x39	; 57
     6a2:	91 05       	cpc	r25, r1
     6a4:	10 f4       	brcc	.+4      	; 0x6aa <_ZN6myDate17checkValidityDateEv+0xa6>
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	01 c0       	rjmp	.+2      	; 0x6ac <_ZN6myDate17checkValidityDateEv+0xa8>
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	88 23       	and	r24, r24
     6ae:	19 f0       	breq	.+6      	; 0x6b6 <_ZN6myDate17checkValidityDateEv+0xb2>
				checkYear=fTrue;
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	89 83       	std	Y+1, r24	; 0x01
     6b4:	0f c0       	rjmp	.+30     	; 0x6d4 <_ZN6myDate17checkValidityDateEv+0xd0>
			} else{
				if (day/32 == 0){
     6b6:	8a 81       	ldd	r24, Y+2	; 0x02
     6b8:	9b 81       	ldd	r25, Y+3	; 0x03
     6ba:	fc 01       	movw	r30, r24
     6bc:	82 81       	ldd	r24, Z+2	; 0x02
     6be:	93 81       	ldd	r25, Z+3	; 0x03
     6c0:	4f 96       	adiw	r24, 0x1f	; 31
     6c2:	21 e0       	ldi	r18, 0x01	; 1
     6c4:	8f 33       	cpi	r24, 0x3F	; 63
     6c6:	91 05       	cpc	r25, r1
     6c8:	08 f0       	brcs	.+2      	; 0x6cc <_ZN6myDate17checkValidityDateEv+0xc8>
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	22 23       	and	r18, r18
     6ce:	11 f0       	breq	.+4      	; 0x6d4 <_ZN6myDate17checkValidityDateEv+0xd0>
					checkYear=fTrue;
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	89 83       	std	Y+1, r24	; 0x01
				}
			}
			
			//Check year
			if (checkYear && year>=2013){return fTrue;}
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
     6d6:	88 23       	and	r24, r24
     6d8:	59 f0       	breq	.+22     	; 0x6f0 <_ZN6myDate17checkValidityDateEv+0xec>
     6da:	8a 81       	ldd	r24, Y+2	; 0x02
     6dc:	9b 81       	ldd	r25, Y+3	; 0x03
     6de:	fc 01       	movw	r30, r24
     6e0:	84 81       	ldd	r24, Z+4	; 0x04
     6e2:	95 81       	ldd	r25, Z+5	; 0x05
     6e4:	f7 e0       	ldi	r31, 0x07	; 7
     6e6:	8d 3d       	cpi	r24, 0xDD	; 221
     6e8:	9f 07       	cpc	r25, r31
     6ea:	14 f0       	brlt	.+4      	; 0x6f0 <_ZN6myDate17checkValidityDateEv+0xec>
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	01 c0       	rjmp	.+2      	; 0x6f2 <_ZN6myDate17checkValidityDateEv+0xee>
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	88 23       	and	r24, r24
     6f4:	11 f0       	breq	.+4      	; 0x6fa <_ZN6myDate17checkValidityDateEv+0xf6>
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	03 c0       	rjmp	.+6      	; 0x700 <_ZN6myDate17checkValidityDateEv+0xfc>
			else {return fFalse;}
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	01 c0       	rjmp	.+2      	; 0x700 <_ZN6myDate17checkValidityDateEv+0xfc>
	} else {return fFalse;}
     6fe:	80 e0       	ldi	r24, 0x00	; 0
}
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <_ZN6myDate7getDateEv>:

const char * myDate::getDate(){
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
     714:	2d 97       	sbiw	r28, 0x0d	; 13
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	f8 94       	cli
     71a:	de bf       	out	0x3e, r29	; 62
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	cd bf       	out	0x3d, r28	; 61
     720:	9d 87       	std	Y+13, r25	; 0x0d
     722:	8c 87       	std	Y+12, r24	; 0x0c
	char monthString[3],dayString[3],yearString[5];
	itoa(month,monthString,10);
     724:	8c 85       	ldd	r24, Y+12	; 0x0c
     726:	9d 85       	ldd	r25, Y+13	; 0x0d
     728:	fc 01       	movw	r30, r24
     72a:	80 81       	ld	r24, Z
     72c:	91 81       	ldd	r25, Z+1	; 0x01
     72e:	9e 01       	movw	r18, r28
     730:	2f 5f       	subi	r18, 0xFF	; 255
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	b9 01       	movw	r22, r18
     736:	4a e0       	ldi	r20, 0x0A	; 10
     738:	50 e0       	ldi	r21, 0x00	; 0
     73a:	0e 94 09 15 	call	0x2a12	; 0x2a12 <itoa>
	itoa(day,dayString,10);
     73e:	8c 85       	ldd	r24, Y+12	; 0x0c
     740:	9d 85       	ldd	r25, Y+13	; 0x0d
     742:	fc 01       	movw	r30, r24
     744:	82 81       	ldd	r24, Z+2	; 0x02
     746:	93 81       	ldd	r25, Z+3	; 0x03
     748:	9e 01       	movw	r18, r28
     74a:	2c 5f       	subi	r18, 0xFC	; 252
     74c:	3f 4f       	sbci	r19, 0xFF	; 255
     74e:	b9 01       	movw	r22, r18
     750:	4a e0       	ldi	r20, 0x0A	; 10
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	0e 94 09 15 	call	0x2a12	; 0x2a12 <itoa>
	itoa(year,yearString,10);
     758:	8c 85       	ldd	r24, Y+12	; 0x0c
     75a:	9d 85       	ldd	r25, Y+13	; 0x0d
     75c:	fc 01       	movw	r30, r24
     75e:	84 81       	ldd	r24, Z+4	; 0x04
     760:	95 81       	ldd	r25, Z+5	; 0x05
     762:	9e 01       	movw	r18, r28
     764:	29 5f       	subi	r18, 0xF9	; 249
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	b9 01       	movw	r22, r18
     76a:	4a e0       	ldi	r20, 0x0A	; 10
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	0e 94 09 15 	call	0x2a12	; 0x2a12 <itoa>
	strcpy(dateString,monthString);
     772:	8c 85       	ldd	r24, Y+12	; 0x0c
     774:	9d 85       	ldd	r25, Y+13	; 0x0d
     776:	06 96       	adiw	r24, 0x06	; 6
     778:	9e 01       	movw	r18, r28
     77a:	2f 5f       	subi	r18, 0xFF	; 255
     77c:	3f 4f       	sbci	r19, 0xFF	; 255
     77e:	b9 01       	movw	r22, r18
     780:	0e 94 02 15 	call	0x2a04	; 0x2a04 <strcpy>
	strcat(dateString,",");
     784:	8c 85       	ldd	r24, Y+12	; 0x0c
     786:	9d 85       	ldd	r25, Y+13	; 0x0d
     788:	9c 01       	movw	r18, r24
     78a:	2a 5f       	subi	r18, 0xFA	; 250
     78c:	3f 4f       	sbci	r19, 0xFF	; 255
     78e:	c9 01       	movw	r24, r18
     790:	ac 01       	movw	r20, r24
     792:	fa 01       	movw	r30, r20
     794:	01 90       	ld	r0, Z+
     796:	00 20       	and	r0, r0
     798:	e9 f7       	brne	.-6      	; 0x794 <_ZN6myDate7getDateEv+0x88>
     79a:	cf 01       	movw	r24, r30
     79c:	01 97       	sbiw	r24, 0x01	; 1
     79e:	84 1b       	sub	r24, r20
     7a0:	95 0b       	sbc	r25, r21
     7a2:	82 0f       	add	r24, r18
     7a4:	93 1f       	adc	r25, r19
     7a6:	2c e2       	ldi	r18, 0x2C	; 44
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	fc 01       	movw	r30, r24
     7ac:	31 83       	std	Z+1, r19	; 0x01
     7ae:	20 83       	st	Z, r18
	strcat(dateString,dayString);
     7b0:	8c 85       	ldd	r24, Y+12	; 0x0c
     7b2:	9d 85       	ldd	r25, Y+13	; 0x0d
     7b4:	06 96       	adiw	r24, 0x06	; 6
     7b6:	9e 01       	movw	r18, r28
     7b8:	2c 5f       	subi	r18, 0xFC	; 252
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	b9 01       	movw	r22, r18
     7be:	0e 94 ee 14 	call	0x29dc	; 0x29dc <strcat>
	strcat(dateString,",");
     7c2:	8c 85       	ldd	r24, Y+12	; 0x0c
     7c4:	9d 85       	ldd	r25, Y+13	; 0x0d
     7c6:	9c 01       	movw	r18, r24
     7c8:	2a 5f       	subi	r18, 0xFA	; 250
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	c9 01       	movw	r24, r18
     7ce:	ac 01       	movw	r20, r24
     7d0:	fa 01       	movw	r30, r20
     7d2:	01 90       	ld	r0, Z+
     7d4:	00 20       	and	r0, r0
     7d6:	e9 f7       	brne	.-6      	; 0x7d2 <_ZN6myDate7getDateEv+0xc6>
     7d8:	cf 01       	movw	r24, r30
     7da:	01 97       	sbiw	r24, 0x01	; 1
     7dc:	84 1b       	sub	r24, r20
     7de:	95 0b       	sbc	r25, r21
     7e0:	82 0f       	add	r24, r18
     7e2:	93 1f       	adc	r25, r19
     7e4:	2c e2       	ldi	r18, 0x2C	; 44
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	fc 01       	movw	r30, r24
     7ea:	31 83       	std	Z+1, r19	; 0x01
     7ec:	20 83       	st	Z, r18
	strcat(dateString,yearString);
     7ee:	8c 85       	ldd	r24, Y+12	; 0x0c
     7f0:	9d 85       	ldd	r25, Y+13	; 0x0d
     7f2:	06 96       	adiw	r24, 0x06	; 6
     7f4:	9e 01       	movw	r18, r28
     7f6:	29 5f       	subi	r18, 0xF9	; 249
     7f8:	3f 4f       	sbci	r19, 0xFF	; 255
     7fa:	b9 01       	movw	r22, r18
     7fc:	0e 94 ee 14 	call	0x29dc	; 0x29dc <strcat>
	dateString[15] = ' ';
     800:	8c 85       	ldd	r24, Y+12	; 0x0c
     802:	9d 85       	ldd	r25, Y+13	; 0x0d
     804:	20 e2       	ldi	r18, 0x20	; 32
     806:	fc 01       	movw	r30, r24
     808:	25 8b       	std	Z+21, r18	; 0x15
	dateString[16] = '\0';
     80a:	8c 85       	ldd	r24, Y+12	; 0x0c
     80c:	9d 85       	ldd	r25, Y+13	; 0x0d
     80e:	fc 01       	movw	r30, r24
     810:	16 8a       	std	Z+22, r1	; 0x16
	
	return dateString;
     812:	8c 85       	ldd	r24, Y+12	; 0x0c
     814:	9d 85       	ldd	r25, Y+13	; 0x0d
     816:	06 96       	adiw	r24, 0x06	; 6
     818:	2d 96       	adiw	r28, 0x0d	; 13
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	de bf       	out	0x3e, r29	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	cd bf       	out	0x3d, r28	; 61
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	08 95       	ret

0000082a <_ZN6myTimeC1Ev>:
		void addMinutes(int minutes);
		void setHour(int hour);
		void setMinute(int minute);
};

myTime::myTime():myDate(){
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	00 d0       	rcall	.+0      	; 0x830 <_ZN6myTimeC1Ev+0x6>
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	9a 83       	std	Y+2, r25	; 0x02
     836:	89 83       	std	Y+1, r24	; 0x01
     838:	89 81       	ldd	r24, Y+1	; 0x01
     83a:	9a 81       	ldd	r25, Y+2	; 0x02
     83c:	0e 94 69 00 	call	0xd2	; 0xd2 <_ZN6myDateC1Ev>
	setTime(0,0,0);
     840:	89 81       	ldd	r24, Y+1	; 0x01
     842:	9a 81       	ldd	r25, Y+2	; 0x02
     844:	60 e0       	ldi	r22, 0x00	; 0
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	40 e0       	ldi	r20, 0x00	; 0
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
}
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <_ZN6myTimeC1Eiii>:

myTime::myTime(int hour, int minute, int second):myDate(){
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	cd b7       	in	r28, 0x3d	; 61
     864:	de b7       	in	r29, 0x3e	; 62
     866:	28 97       	sbiw	r28, 0x08	; 8
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	f8 94       	cli
     86c:	de bf       	out	0x3e, r29	; 62
     86e:	0f be       	out	0x3f, r0	; 63
     870:	cd bf       	out	0x3d, r28	; 61
     872:	9a 83       	std	Y+2, r25	; 0x02
     874:	89 83       	std	Y+1, r24	; 0x01
     876:	7c 83       	std	Y+4, r23	; 0x04
     878:	6b 83       	std	Y+3, r22	; 0x03
     87a:	5e 83       	std	Y+6, r21	; 0x06
     87c:	4d 83       	std	Y+5, r20	; 0x05
     87e:	38 87       	std	Y+8, r19	; 0x08
     880:	2f 83       	std	Y+7, r18	; 0x07
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	9a 81       	ldd	r25, Y+2	; 0x02
     886:	0e 94 69 00 	call	0xd2	; 0xd2 <_ZN6myDateC1Ev>
	setTime(hour,minute,second);
     88a:	89 81       	ldd	r24, Y+1	; 0x01
     88c:	9a 81       	ldd	r25, Y+2	; 0x02
     88e:	6b 81       	ldd	r22, Y+3	; 0x03
     890:	7c 81       	ldd	r23, Y+4	; 0x04
     892:	4d 81       	ldd	r20, Y+5	; 0x05
     894:	5e 81       	ldd	r21, Y+6	; 0x06
     896:	2f 81       	ldd	r18, Y+7	; 0x07
     898:	38 85       	ldd	r19, Y+8	; 0x08
     89a:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
}
     89e:	28 96       	adiw	r28, 0x08	; 8
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	de bf       	out	0x3e, r29	; 62
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	cd bf       	out	0x3d, r28	; 61
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <_ZN6myTimeC1Eiiiiii>:

myTime::myTime(int hour,int minute,int second,int month, int day, int year):myDate(month,day,year){
     8b0:	cf 92       	push	r12
     8b2:	df 92       	push	r13
     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	2e 97       	sbiw	r28, 0x0e	; 14
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
     8d0:	9a 83       	std	Y+2, r25	; 0x02
     8d2:	89 83       	std	Y+1, r24	; 0x01
     8d4:	7c 83       	std	Y+4, r23	; 0x04
     8d6:	6b 83       	std	Y+3, r22	; 0x03
     8d8:	5e 83       	std	Y+6, r21	; 0x06
     8da:	4d 83       	std	Y+5, r20	; 0x05
     8dc:	38 87       	std	Y+8, r19	; 0x08
     8de:	2f 83       	std	Y+7, r18	; 0x07
     8e0:	1a 87       	std	Y+10, r17	; 0x0a
     8e2:	09 87       	std	Y+9, r16	; 0x09
     8e4:	fc 86       	std	Y+12, r15	; 0x0c
     8e6:	eb 86       	std	Y+11, r14	; 0x0b
     8e8:	de 86       	std	Y+14, r13	; 0x0e
     8ea:	cd 86       	std	Y+13, r12	; 0x0d
     8ec:	89 81       	ldd	r24, Y+1	; 0x01
     8ee:	9a 81       	ldd	r25, Y+2	; 0x02
     8f0:	69 85       	ldd	r22, Y+9	; 0x09
     8f2:	7a 85       	ldd	r23, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	2d 85       	ldd	r18, Y+13	; 0x0d
     8fa:	3e 85       	ldd	r19, Y+14	; 0x0e
     8fc:	0e 94 84 00 	call	0x108	; 0x108 <_ZN6myDateC1Eiii>
	setTime(hour,minute,second);
     900:	89 81       	ldd	r24, Y+1	; 0x01
     902:	9a 81       	ldd	r25, Y+2	; 0x02
     904:	6b 81       	ldd	r22, Y+3	; 0x03
     906:	7c 81       	ldd	r23, Y+4	; 0x04
     908:	4d 81       	ldd	r20, Y+5	; 0x05
     90a:	5e 81       	ldd	r21, Y+6	; 0x06
     90c:	2f 81       	ldd	r18, Y+7	; 0x07
     90e:	38 85       	ldd	r19, Y+8	; 0x08
     910:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
}
     914:	2e 96       	adiw	r28, 0x0e	; 14
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	f8 94       	cli
     91a:	de bf       	out	0x3e, r29	; 62
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	cd bf       	out	0x3d, r28	; 61
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	ff 90       	pop	r15
     92a:	ef 90       	pop	r14
     92c:	df 90       	pop	r13
     92e:	cf 90       	pop	r12
     930:	08 95       	ret

00000932 <_ZN6myTime10getSecondsEv>:

BYTE myTime::getSeconds(){
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	00 d0       	rcall	.+0      	; 0x938 <_ZN6myTime10getSecondsEv+0x6>
     938:	cd b7       	in	r28, 0x3d	; 61
     93a:	de b7       	in	r29, 0x3e	; 62
     93c:	9a 83       	std	Y+2, r25	; 0x02
     93e:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)second;
     940:	89 81       	ldd	r24, Y+1	; 0x01
     942:	9a 81       	ldd	r25, Y+2	; 0x02
     944:	fc 01       	movw	r30, r24
     946:	83 8d       	ldd	r24, Z+27	; 0x1b
     948:	94 8d       	ldd	r25, Z+28	; 0x1c
}
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <_ZN6myTime10getMinutesEv>:

BYTE myTime::getMinutes(){
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	00 d0       	rcall	.+0      	; 0x95a <_ZN6myTime10getMinutesEv+0x6>
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
     95e:	9a 83       	std	Y+2, r25	; 0x02
     960:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)minute;
     962:	89 81       	ldd	r24, Y+1	; 0x01
     964:	9a 81       	ldd	r25, Y+2	; 0x02
     966:	fc 01       	movw	r30, r24
     968:	81 8d       	ldd	r24, Z+25	; 0x19
     96a:	92 8d       	ldd	r25, Z+26	; 0x1a
}
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <_ZN6myTime8getHoursEv>:

BYTE myTime::getHours(){
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	00 d0       	rcall	.+0      	; 0x97c <_ZN6myTime8getHoursEv+0x6>
     97c:	cd b7       	in	r28, 0x3d	; 61
     97e:	de b7       	in	r29, 0x3e	; 62
     980:	9a 83       	std	Y+2, r25	; 0x02
     982:	89 83       	std	Y+1, r24	; 0x01
	return (BYTE)hour;
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	9a 81       	ldd	r25, Y+2	; 0x02
     988:	fc 01       	movw	r30, r24
     98a:	87 89       	ldd	r24, Z+23	; 0x17
     98c:	90 8d       	ldd	r25, Z+24	; 0x18
}
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	08 95       	ret

00000998 <_ZN6myTime7setTimeEPc>:

BOOL myTime::setTime(char *newTime){
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	cd b7       	in	r28, 0x3d	; 61
     99e:	de b7       	in	r29, 0x3e	; 62
     9a0:	a2 97       	sbiw	r28, 0x22	; 34
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	f8 94       	cli
     9a6:	de bf       	out	0x3e, r29	; 62
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	cd bf       	out	0x3d, r28	; 61
     9ac:	98 a3       	lds	r25, 0x58
     9ae:	8f 8f       	std	Y+31, r24	; 0x1f
     9b0:	7a a3       	lds	r23, 0x5a
     9b2:	69 a3       	lds	r22, 0x59
	int tempNum[3];
	char currentString[10];
	char tempString[10];
	strcpy(currentString,newTime);
     9b4:	ce 01       	movw	r24, r28
     9b6:	0b 96       	adiw	r24, 0x0b	; 11
     9b8:	29 a1       	lds	r18, 0x49
     9ba:	3a a1       	lds	r19, 0x4a
     9bc:	b9 01       	movw	r22, r18
     9be:	0e 94 02 15 	call	0x2a04	; 0x2a04 <strcpy>
	for (int j=0; j<3; j++){
     9c2:	1a 82       	std	Y+2, r1	; 0x02
     9c4:	19 82       	std	Y+1, r1	; 0x01
     9c6:	43 c0       	rjmp	.+134    	; 0xa4e <_ZN6myTime7setTimeEPc+0xb6>
		for (int i=0; i<2; i++){
     9c8:	1c 82       	std	Y+4, r1	; 0x04
     9ca:	1b 82       	std	Y+3, r1	; 0x03
     9cc:	20 c0       	rjmp	.+64     	; 0xa0e <_ZN6myTime7setTimeEPc+0x76>
				tempString[i]=currentString[i+j*3];
     9ce:	29 81       	ldd	r18, Y+1	; 0x01
     9d0:	3a 81       	ldd	r19, Y+2	; 0x02
     9d2:	c9 01       	movw	r24, r18
     9d4:	88 0f       	add	r24, r24
     9d6:	99 1f       	adc	r25, r25
     9d8:	28 0f       	add	r18, r24
     9da:	39 1f       	adc	r19, r25
     9dc:	8b 81       	ldd	r24, Y+3	; 0x03
     9de:	9c 81       	ldd	r25, Y+4	; 0x04
     9e0:	82 0f       	add	r24, r18
     9e2:	93 1f       	adc	r25, r19
     9e4:	9e 01       	movw	r18, r28
     9e6:	25 5f       	subi	r18, 0xF5	; 245
     9e8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ea:	82 0f       	add	r24, r18
     9ec:	93 1f       	adc	r25, r19
     9ee:	fc 01       	movw	r30, r24
     9f0:	40 81       	ld	r20, Z
     9f2:	9e 01       	movw	r18, r28
     9f4:	2b 5e       	subi	r18, 0xEB	; 235
     9f6:	3f 4f       	sbci	r19, 0xFF	; 255
     9f8:	8b 81       	ldd	r24, Y+3	; 0x03
     9fa:	9c 81       	ldd	r25, Y+4	; 0x04
     9fc:	82 0f       	add	r24, r18
     9fe:	93 1f       	adc	r25, r19
     a00:	fc 01       	movw	r30, r24
     a02:	40 83       	st	Z, r20
	int tempNum[3];
	char currentString[10];
	char tempString[10];
	strcpy(currentString,newTime);
	for (int j=0; j<3; j++){
		for (int i=0; i<2; i++){
     a04:	8b 81       	ldd	r24, Y+3	; 0x03
     a06:	9c 81       	ldd	r25, Y+4	; 0x04
     a08:	01 96       	adiw	r24, 0x01	; 1
     a0a:	9c 83       	std	Y+4, r25	; 0x04
     a0c:	8b 83       	std	Y+3, r24	; 0x03
     a0e:	21 e0       	ldi	r18, 0x01	; 1
     a10:	8b 81       	ldd	r24, Y+3	; 0x03
     a12:	9c 81       	ldd	r25, Y+4	; 0x04
     a14:	82 30       	cpi	r24, 0x02	; 2
     a16:	91 05       	cpc	r25, r1
     a18:	0c f0       	brlt	.+2      	; 0xa1c <_ZN6myTime7setTimeEPc+0x84>
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	22 23       	and	r18, r18
     a1e:	b9 f6       	brne	.-82     	; 0x9ce <_ZN6myTime7setTimeEPc+0x36>
				tempString[i]=currentString[i+j*3];
		}
		tempNum[j]=atoi(tempString);
     a20:	ce 01       	movw	r24, r28
     a22:	45 96       	adiw	r24, 0x15	; 21
     a24:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <atoi>
     a28:	9c 01       	movw	r18, r24
     a2a:	89 81       	ldd	r24, Y+1	; 0x01
     a2c:	9a 81       	ldd	r25, Y+2	; 0x02
     a2e:	88 0f       	add	r24, r24
     a30:	99 1f       	adc	r25, r25
     a32:	ae 01       	movw	r20, r28
     a34:	4f 5f       	subi	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	84 0f       	add	r24, r20
     a3a:	95 1f       	adc	r25, r21
     a3c:	04 96       	adiw	r24, 0x04	; 4
     a3e:	fc 01       	movw	r30, r24
     a40:	31 83       	std	Z+1, r19	; 0x01
     a42:	20 83       	st	Z, r18
BOOL myTime::setTime(char *newTime){
	int tempNum[3];
	char currentString[10];
	char tempString[10];
	strcpy(currentString,newTime);
	for (int j=0; j<3; j++){
     a44:	89 81       	ldd	r24, Y+1	; 0x01
     a46:	9a 81       	ldd	r25, Y+2	; 0x02
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	9a 83       	std	Y+2, r25	; 0x02
     a4c:	89 83       	std	Y+1, r24	; 0x01
     a4e:	21 e0       	ldi	r18, 0x01	; 1
     a50:	89 81       	ldd	r24, Y+1	; 0x01
     a52:	9a 81       	ldd	r25, Y+2	; 0x02
     a54:	83 30       	cpi	r24, 0x03	; 3
     a56:	91 05       	cpc	r25, r1
     a58:	0c f0       	brlt	.+2      	; 0xa5c <_ZN6myTime7setTimeEPc+0xc4>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	22 23       	and	r18, r18
     a5e:	09 f0       	breq	.+2      	; 0xa62 <_ZN6myTime7setTimeEPc+0xca>
     a60:	b3 cf       	rjmp	.-154    	; 0x9c8 <_ZN6myTime7setTimeEPc+0x30>
		for (int i=0; i<2; i++){
				tempString[i]=currentString[i+j*3];
		}
		tempNum[j]=atoi(tempString);
	}
	if (tempNum[0]/24==0 && tempNum[1]/60==0 && tempNum[2]/60==0){
     a62:	8d 81       	ldd	r24, Y+5	; 0x05
     a64:	9e 81       	ldd	r25, Y+6	; 0x06
     a66:	47 96       	adiw	r24, 0x17	; 23
     a68:	8f 32       	cpi	r24, 0x2F	; 47
     a6a:	91 05       	cpc	r25, r1
     a6c:	c0 f4       	brcc	.+48     	; 0xa9e <_ZN6myTime7setTimeEPc+0x106>
     a6e:	8f 81       	ldd	r24, Y+7	; 0x07
     a70:	98 85       	ldd	r25, Y+8	; 0x08
     a72:	cb 96       	adiw	r24, 0x3b	; 59
     a74:	87 37       	cpi	r24, 0x77	; 119
     a76:	91 05       	cpc	r25, r1
     a78:	90 f4       	brcc	.+36     	; 0xa9e <_ZN6myTime7setTimeEPc+0x106>
     a7a:	89 85       	ldd	r24, Y+9	; 0x09
     a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a7e:	cb 96       	adiw	r24, 0x3b	; 59
     a80:	87 37       	cpi	r24, 0x77	; 119
     a82:	91 05       	cpc	r25, r1
     a84:	60 f4       	brcc	.+24     	; 0xa9e <_ZN6myTime7setTimeEPc+0x106>
		setTime(tempNum[0],tempNum[1],tempNum[2]);
     a86:	6d 81       	ldd	r22, Y+5	; 0x05
     a88:	7e 81       	ldd	r23, Y+6	; 0x06
     a8a:	4f 81       	ldd	r20, Y+7	; 0x07
     a8c:	58 85       	ldd	r21, Y+8	; 0x08
     a8e:	29 85       	ldd	r18, Y+9	; 0x09
     a90:	3a 85       	ldd	r19, Y+10	; 0x0a
     a92:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a94:	98 a1       	lds	r25, 0x48
     a96:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
		return fTrue;
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	01 c0       	rjmp	.+2      	; 0xaa0 <_ZN6myTime7setTimeEPc+0x108>
	} 
	return fFalse;
     a9e:	80 e0       	ldi	r24, 0x00	; 0
}
     aa0:	a2 96       	adiw	r28, 0x22	; 34
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	f8 94       	cli
     aa6:	de bf       	out	0x3e, r29	; 62
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	cd bf       	out	0x3d, r28	; 61
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	08 95       	ret

00000ab2 <_ZN6myTime7setTimeEiii>:

void myTime::setTime(int hour,int minute,int second){
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
     aba:	28 97       	sbiw	r28, 0x08	; 8
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	f8 94       	cli
     ac0:	de bf       	out	0x3e, r29	; 62
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	cd bf       	out	0x3d, r28	; 61
     ac6:	9a 83       	std	Y+2, r25	; 0x02
     ac8:	89 83       	std	Y+1, r24	; 0x01
     aca:	7c 83       	std	Y+4, r23	; 0x04
     acc:	6b 83       	std	Y+3, r22	; 0x03
     ace:	5e 83       	std	Y+6, r21	; 0x06
     ad0:	4d 83       	std	Y+5, r20	; 0x05
     ad2:	38 87       	std	Y+8, r19	; 0x08
     ad4:	2f 83       	std	Y+7, r18	; 0x07
	setHour(hour);
     ad6:	89 81       	ldd	r24, Y+1	; 0x01
     ad8:	9a 81       	ldd	r25, Y+2	; 0x02
     ada:	2b 81       	ldd	r18, Y+3	; 0x03
     adc:	3c 81       	ldd	r19, Y+4	; 0x04
     ade:	b9 01       	movw	r22, r18
     ae0:	0e 94 89 05 	call	0xb12	; 0xb12 <_ZN6myTime7setHourEi>
	setMinute(minute);
     ae4:	89 81       	ldd	r24, Y+1	; 0x01
     ae6:	9a 81       	ldd	r25, Y+2	; 0x02
     ae8:	2d 81       	ldd	r18, Y+5	; 0x05
     aea:	3e 81       	ldd	r19, Y+6	; 0x06
     aec:	b9 01       	movw	r22, r18
     aee:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6myTime9setMinuteEi>
	setSecond(second);
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	9a 81       	ldd	r25, Y+2	; 0x02
     af6:	2f 81       	ldd	r18, Y+7	; 0x07
     af8:	38 85       	ldd	r19, Y+8	; 0x08
     afa:	b9 01       	movw	r22, r18
     afc:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN6myTime9setSecondEi>
}
     b00:	28 96       	adiw	r28, 0x08	; 8
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	de bf       	out	0x3e, r29	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	cd bf       	out	0x3d, r28	; 61
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	08 95       	ret

00000b12 <_ZN6myTime7setHourEi>:

void myTime::setHour(int hour){
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	00 d0       	rcall	.+0      	; 0xb18 <_ZN6myTime7setHourEi+0x6>
     b18:	00 d0       	rcall	.+0      	; 0xb1a <_ZN6myTime7setHourEi+0x8>
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
     b1e:	9a 83       	std	Y+2, r25	; 0x02
     b20:	89 83       	std	Y+1, r24	; 0x01
     b22:	7c 83       	std	Y+4, r23	; 0x04
     b24:	6b 83       	std	Y+3, r22	; 0x03
	if (hour/24 == 0){
     b26:	8b 81       	ldd	r24, Y+3	; 0x03
     b28:	9c 81       	ldd	r25, Y+4	; 0x04
     b2a:	47 96       	adiw	r24, 0x17	; 23
     b2c:	8f 32       	cpi	r24, 0x2F	; 47
     b2e:	91 05       	cpc	r25, r1
     b30:	38 f4       	brcc	.+14     	; 0xb40 <_ZN6myTime7setHourEi+0x2e>
		this->hour = hour;
     b32:	89 81       	ldd	r24, Y+1	; 0x01
     b34:	9a 81       	ldd	r25, Y+2	; 0x02
     b36:	2b 81       	ldd	r18, Y+3	; 0x03
     b38:	3c 81       	ldd	r19, Y+4	; 0x04
     b3a:	fc 01       	movw	r30, r24
     b3c:	30 8f       	std	Z+24, r19	; 0x18
     b3e:	27 8b       	std	Z+23, r18	; 0x17
	}	
}
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	08 95       	ret

00000b4e <_ZN6myTime9setMinuteEi>:

void myTime::setMinute(int minute){
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	00 d0       	rcall	.+0      	; 0xb54 <_ZN6myTime9setMinuteEi+0x6>
     b54:	00 d0       	rcall	.+0      	; 0xb56 <_ZN6myTime9setMinuteEi+0x8>
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
     b5a:	9a 83       	std	Y+2, r25	; 0x02
     b5c:	89 83       	std	Y+1, r24	; 0x01
     b5e:	7c 83       	std	Y+4, r23	; 0x04
     b60:	6b 83       	std	Y+3, r22	; 0x03
	if (minute/60 == 0){
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	9c 81       	ldd	r25, Y+4	; 0x04
     b66:	cb 96       	adiw	r24, 0x3b	; 59
     b68:	87 37       	cpi	r24, 0x77	; 119
     b6a:	91 05       	cpc	r25, r1
     b6c:	38 f4       	brcc	.+14     	; 0xb7c <_ZN6myTime9setMinuteEi+0x2e>
		this->minute = minute;
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	9a 81       	ldd	r25, Y+2	; 0x02
     b72:	2b 81       	ldd	r18, Y+3	; 0x03
     b74:	3c 81       	ldd	r19, Y+4	; 0x04
     b76:	fc 01       	movw	r30, r24
     b78:	32 8f       	std	Z+26, r19	; 0x1a
     b7a:	21 8f       	std	Z+25, r18	; 0x19
	}	
}
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	08 95       	ret

00000b8a <_ZN6myTime9setSecondEi>:

void myTime::setSecond(int second){
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	00 d0       	rcall	.+0      	; 0xb90 <_ZN6myTime9setSecondEi+0x6>
     b90:	00 d0       	rcall	.+0      	; 0xb92 <_ZN6myTime9setSecondEi+0x8>
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	9a 83       	std	Y+2, r25	; 0x02
     b98:	89 83       	std	Y+1, r24	; 0x01
     b9a:	7c 83       	std	Y+4, r23	; 0x04
     b9c:	6b 83       	std	Y+3, r22	; 0x03
	if (second/60 == 0){
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	9c 81       	ldd	r25, Y+4	; 0x04
     ba2:	cb 96       	adiw	r24, 0x3b	; 59
     ba4:	87 37       	cpi	r24, 0x77	; 119
     ba6:	91 05       	cpc	r25, r1
     ba8:	38 f4       	brcc	.+14     	; 0xbb8 <_ZN6myTime9setSecondEi+0x2e>
		this->second = second;
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	9a 81       	ldd	r25, Y+2	; 0x02
     bae:	2b 81       	ldd	r18, Y+3	; 0x03
     bb0:	3c 81       	ldd	r19, Y+4	; 0x04
     bb2:	fc 01       	movw	r30, r24
     bb4:	34 8f       	std	Z+28, r19	; 0x1c
     bb6:	23 8f       	std	Z+27, r18	; 0x1b
	}	
}
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	08 95       	ret

00000bc6 <_ZN6myTime8addHoursEi>:

void myTime::addHours(int hours){
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	28 97       	sbiw	r28, 0x08	; 8
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	de bf       	out	0x3e, r29	; 62
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	cd bf       	out	0x3d, r28	; 61
     bda:	9e 83       	std	Y+6, r25	; 0x06
     bdc:	8d 83       	std	Y+5, r24	; 0x05
     bde:	78 87       	std	Y+8, r23	; 0x08
     be0:	6f 83       	std	Y+7, r22	; 0x07
	volatile int tempHours = hour + hours;
     be2:	8d 81       	ldd	r24, Y+5	; 0x05
     be4:	9e 81       	ldd	r25, Y+6	; 0x06
     be6:	fc 01       	movw	r30, r24
     be8:	27 89       	ldd	r18, Z+23	; 0x17
     bea:	30 8d       	ldd	r19, Z+24	; 0x18
     bec:	8f 81       	ldd	r24, Y+7	; 0x07
     bee:	98 85       	ldd	r25, Y+8	; 0x08
     bf0:	82 0f       	add	r24, r18
     bf2:	93 1f       	adc	r25, r19
     bf4:	9a 83       	std	Y+2, r25	; 0x02
     bf6:	89 83       	std	Y+1, r24	; 0x01
	hour = tempHours%24;
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	9a 81       	ldd	r25, Y+2	; 0x02
     bfc:	28 e1       	ldi	r18, 0x18	; 24
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	b9 01       	movw	r22, r18
     c02:	0e 94 a3 14 	call	0x2946	; 0x2946 <__divmodhi4>
     c06:	9c 01       	movw	r18, r24
     c08:	8d 81       	ldd	r24, Y+5	; 0x05
     c0a:	9e 81       	ldd	r25, Y+6	; 0x06
     c0c:	fc 01       	movw	r30, r24
     c0e:	30 8f       	std	Z+24, r19	; 0x18
     c10:	27 8b       	std	Z+23, r18	; 0x17
	if (tempHours/24 >= 1){
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	9a 81       	ldd	r25, Y+2	; 0x02
     c16:	21 e0       	ldi	r18, 0x01	; 1
     c18:	88 31       	cpi	r24, 0x18	; 24
     c1a:	91 05       	cpc	r25, r1
     c1c:	0c f4       	brge	.+2      	; 0xc20 <_ZN6myTime8addHoursEi+0x5a>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	22 23       	and	r18, r18
     c22:	91 f0       	breq	.+36     	; 0xc48 <_ZN6myTime8addHoursEi+0x82>
		volatile int daysToAdd = tempHours/24;
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	9a 81       	ldd	r25, Y+2	; 0x02
     c28:	28 e1       	ldi	r18, 0x18	; 24
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	b9 01       	movw	r22, r18
     c2e:	0e 94 a3 14 	call	0x2946	; 0x2946 <__divmodhi4>
     c32:	9b 01       	movw	r18, r22
     c34:	c9 01       	movw	r24, r18
     c36:	9c 83       	std	Y+4, r25	; 0x04
     c38:	8b 83       	std	Y+3, r24	; 0x03
		addDays(daysToAdd);
     c3a:	8d 81       	ldd	r24, Y+5	; 0x05
     c3c:	9e 81       	ldd	r25, Y+6	; 0x06
     c3e:	2b 81       	ldd	r18, Y+3	; 0x03
     c40:	3c 81       	ldd	r19, Y+4	; 0x04
     c42:	b9 01       	movw	r22, r18
     c44:	0e 94 43 02 	call	0x486	; 0x486 <_ZN6myDate7addDaysEi>
	}	
}
     c48:	28 96       	adiw	r28, 0x08	; 8
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	08 95       	ret

00000c5a <_ZN6myTime10addMinutesEi>:

void myTime::addMinutes(int minutes){
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	28 97       	sbiw	r28, 0x08	; 8
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	de bf       	out	0x3e, r29	; 62
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	cd bf       	out	0x3d, r28	; 61
     c6e:	9e 83       	std	Y+6, r25	; 0x06
     c70:	8d 83       	std	Y+5, r24	; 0x05
     c72:	78 87       	std	Y+8, r23	; 0x08
     c74:	6f 83       	std	Y+7, r22	; 0x07
	volatile int tempMinutes = minute + minutes;				//what the minutes were + added minutes
     c76:	8d 81       	ldd	r24, Y+5	; 0x05
     c78:	9e 81       	ldd	r25, Y+6	; 0x06
     c7a:	fc 01       	movw	r30, r24
     c7c:	21 8d       	ldd	r18, Z+25	; 0x19
     c7e:	32 8d       	ldd	r19, Z+26	; 0x1a
     c80:	8f 81       	ldd	r24, Y+7	; 0x07
     c82:	98 85       	ldd	r25, Y+8	; 0x08
     c84:	82 0f       	add	r24, r18
     c86:	93 1f       	adc	r25, r19
     c88:	9a 83       	std	Y+2, r25	; 0x02
     c8a:	89 83       	std	Y+1, r24	; 0x01
	minute = tempMinutes%60;
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	9a 81       	ldd	r25, Y+2	; 0x02
     c90:	2c e3       	ldi	r18, 0x3C	; 60
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	b9 01       	movw	r22, r18
     c96:	0e 94 a3 14 	call	0x2946	; 0x2946 <__divmodhi4>
     c9a:	9c 01       	movw	r18, r24
     c9c:	8d 81       	ldd	r24, Y+5	; 0x05
     c9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ca0:	fc 01       	movw	r30, r24
     ca2:	32 8f       	std	Z+26, r19	; 0x1a
     ca4:	21 8f       	std	Z+25, r18	; 0x19
	if (tempMinutes/60 >= 1){
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	9a 81       	ldd	r25, Y+2	; 0x02
     caa:	21 e0       	ldi	r18, 0x01	; 1
     cac:	8c 33       	cpi	r24, 0x3C	; 60
     cae:	91 05       	cpc	r25, r1
     cb0:	0c f4       	brge	.+2      	; 0xcb4 <_ZN6myTime10addMinutesEi+0x5a>
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	22 23       	and	r18, r18
     cb6:	91 f0       	breq	.+36     	; 0xcdc <_ZN6myTime10addMinutesEi+0x82>
		volatile int hoursToAdd = tempMinutes/60;
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	9a 81       	ldd	r25, Y+2	; 0x02
     cbc:	2c e3       	ldi	r18, 0x3C	; 60
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	b9 01       	movw	r22, r18
     cc2:	0e 94 a3 14 	call	0x2946	; 0x2946 <__divmodhi4>
     cc6:	9b 01       	movw	r18, r22
     cc8:	c9 01       	movw	r24, r18
     cca:	9c 83       	std	Y+4, r25	; 0x04
     ccc:	8b 83       	std	Y+3, r24	; 0x03
		addHours(hoursToAdd);
     cce:	2b 81       	ldd	r18, Y+3	; 0x03
     cd0:	3c 81       	ldd	r19, Y+4	; 0x04
     cd2:	8d 81       	ldd	r24, Y+5	; 0x05
     cd4:	9e 81       	ldd	r25, Y+6	; 0x06
     cd6:	b9 01       	movw	r22, r18
     cd8:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <_ZN6myTime8addHoursEi>
	}
}
     cdc:	28 96       	adiw	r28, 0x08	; 8
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	08 95       	ret

00000cee <_ZN6myTime10addSecondsEi>:

void myTime::addSeconds(int seconds){
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	28 97       	sbiw	r28, 0x08	; 8
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	9e 83       	std	Y+6, r25	; 0x06
     d04:	8d 83       	std	Y+5, r24	; 0x05
     d06:	78 87       	std	Y+8, r23	; 0x08
     d08:	6f 83       	std	Y+7, r22	; 0x07
	volatile int tempSecond = second + seconds;
     d0a:	8d 81       	ldd	r24, Y+5	; 0x05
     d0c:	9e 81       	ldd	r25, Y+6	; 0x06
     d0e:	fc 01       	movw	r30, r24
     d10:	23 8d       	ldd	r18, Z+27	; 0x1b
     d12:	34 8d       	ldd	r19, Z+28	; 0x1c
     d14:	8f 81       	ldd	r24, Y+7	; 0x07
     d16:	98 85       	ldd	r25, Y+8	; 0x08
     d18:	82 0f       	add	r24, r18
     d1a:	93 1f       	adc	r25, r19
     d1c:	9a 83       	std	Y+2, r25	; 0x02
     d1e:	89 83       	std	Y+1, r24	; 0x01
	second = (tempSecond)%60;			  //what's left over
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	9a 81       	ldd	r25, Y+2	; 0x02
     d24:	2c e3       	ldi	r18, 0x3C	; 60
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	b9 01       	movw	r22, r18
     d2a:	0e 94 a3 14 	call	0x2946	; 0x2946 <__divmodhi4>
     d2e:	9c 01       	movw	r18, r24
     d30:	8d 81       	ldd	r24, Y+5	; 0x05
     d32:	9e 81       	ldd	r25, Y+6	; 0x06
     d34:	fc 01       	movw	r30, r24
     d36:	34 8f       	std	Z+28, r19	; 0x1c
     d38:	23 8f       	std	Z+27, r18	; 0x1b
	if ((tempSecond)/60 >= 1){
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	9a 81       	ldd	r25, Y+2	; 0x02
     d3e:	21 e0       	ldi	r18, 0x01	; 1
     d40:	8c 33       	cpi	r24, 0x3C	; 60
     d42:	91 05       	cpc	r25, r1
     d44:	0c f4       	brge	.+2      	; 0xd48 <_ZN6myTime10addSecondsEi+0x5a>
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	22 23       	and	r18, r18
     d4a:	91 f0       	breq	.+36     	; 0xd70 <_ZN6myTime10addSecondsEi+0x82>
		//There are more than 60 seconds now, find out how many minutes need to be added
		volatile int minutesToAdd = (tempSecond)/60;		  //if seconds = 120, adds two minutes
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	9a 81       	ldd	r25, Y+2	; 0x02
     d50:	2c e3       	ldi	r18, 0x3C	; 60
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	b9 01       	movw	r22, r18
     d56:	0e 94 a3 14 	call	0x2946	; 0x2946 <__divmodhi4>
     d5a:	9b 01       	movw	r18, r22
     d5c:	c9 01       	movw	r24, r18
     d5e:	9c 83       	std	Y+4, r25	; 0x04
     d60:	8b 83       	std	Y+3, r24	; 0x03
		addMinutes(minutesToAdd);					  //add to minutes
     d62:	2b 81       	ldd	r18, Y+3	; 0x03
     d64:	3c 81       	ldd	r19, Y+4	; 0x04
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	b9 01       	movw	r22, r18
     d6c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <_ZN6myTime10addMinutesEi>
	}
}
     d70:	28 96       	adiw	r28, 0x08	; 8
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	08 95       	ret

00000d82 <_ZN6myTime13checkValidityEv>:

BOOL myTime::checkValidity(){
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	00 d0       	rcall	.+0      	; 0xd88 <_ZN6myTime13checkValidityEv+0x6>
     d88:	0f 92       	push	r0
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	9b 83       	std	Y+3, r25	; 0x03
     d90:	8a 83       	std	Y+2, r24	; 0x02
	BOOL stillValid=fTrue;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	89 83       	std	Y+1, r24	; 0x01
	if (second/60==0 && minute/60==0 && hour/24==0){
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	9b 81       	ldd	r25, Y+3	; 0x03
     d9a:	fc 01       	movw	r30, r24
     d9c:	83 8d       	ldd	r24, Z+27	; 0x1b
     d9e:	94 8d       	ldd	r25, Z+28	; 0x1c
     da0:	cb 96       	adiw	r24, 0x3b	; 59
     da2:	87 37       	cpi	r24, 0x77	; 119
     da4:	91 05       	cpc	r25, r1
     da6:	a0 f4       	brcc	.+40     	; 0xdd0 <_ZN6myTime13checkValidityEv+0x4e>
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	9b 81       	ldd	r25, Y+3	; 0x03
     dac:	fc 01       	movw	r30, r24
     dae:	81 8d       	ldd	r24, Z+25	; 0x19
     db0:	92 8d       	ldd	r25, Z+26	; 0x1a
     db2:	cb 96       	adiw	r24, 0x3b	; 59
     db4:	87 37       	cpi	r24, 0x77	; 119
     db6:	91 05       	cpc	r25, r1
     db8:	58 f4       	brcc	.+22     	; 0xdd0 <_ZN6myTime13checkValidityEv+0x4e>
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	9b 81       	ldd	r25, Y+3	; 0x03
     dbe:	fc 01       	movw	r30, r24
     dc0:	87 89       	ldd	r24, Z+23	; 0x17
     dc2:	90 8d       	ldd	r25, Z+24	; 0x18
     dc4:	47 96       	adiw	r24, 0x17	; 23
     dc6:	8f 32       	cpi	r24, 0x2F	; 47
     dc8:	91 05       	cpc	r25, r1
     dca:	10 f4       	brcc	.+4      	; 0xdd0 <_ZN6myTime13checkValidityEv+0x4e>
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	01 c0       	rjmp	.+2      	; 0xdd2 <_ZN6myTime13checkValidityEv+0x50>
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	88 23       	and	r24, r24
     dd4:	69 f0       	breq	.+26     	; 0xdf0 <_ZN6myTime13checkValidityEv+0x6e>
		if (checkValidityDate()){return fTrue;}
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
     dd8:	9b 81       	ldd	r25, Y+3	; 0x03
     dda:	0e 94 02 03 	call	0x604	; 0x604 <_ZN6myDate17checkValidityDateEv>
     dde:	98 2f       	mov	r25, r24
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	99 23       	and	r25, r25
     de4:	09 f4       	brne	.+2      	; 0xde8 <_ZN6myTime13checkValidityEv+0x66>
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	88 23       	and	r24, r24
     dea:	11 f0       	breq	.+4      	; 0xdf0 <_ZN6myTime13checkValidityEv+0x6e>
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	01 c0       	rjmp	.+2      	; 0xdf2 <_ZN6myTime13checkValidityEv+0x70>
	}
	return fFalse;
     df0:	80 e0       	ldi	r24, 0x00	; 0
}
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	08 95       	ret

00000dfe <_ZN6myTime7getTimeEv>:

const char * myTime::getTime(){
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	2b 97       	sbiw	r28, 0x0b	; 11
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	9b 87       	std	Y+11, r25	; 0x0b
     e14:	8a 87       	std	Y+10, r24	; 0x0a
	char hourString[3], minuteString[3],secondString[3];
	itoa(hour,hourString,10);
     e16:	8a 85       	ldd	r24, Y+10	; 0x0a
     e18:	9b 85       	ldd	r25, Y+11	; 0x0b
     e1a:	fc 01       	movw	r30, r24
     e1c:	87 89       	ldd	r24, Z+23	; 0x17
     e1e:	90 8d       	ldd	r25, Z+24	; 0x18
     e20:	9e 01       	movw	r18, r28
     e22:	2f 5f       	subi	r18, 0xFF	; 255
     e24:	3f 4f       	sbci	r19, 0xFF	; 255
     e26:	b9 01       	movw	r22, r18
     e28:	4a e0       	ldi	r20, 0x0A	; 10
     e2a:	50 e0       	ldi	r21, 0x00	; 0
     e2c:	0e 94 09 15 	call	0x2a12	; 0x2a12 <itoa>
	itoa(minute,minuteString,10);
     e30:	8a 85       	ldd	r24, Y+10	; 0x0a
     e32:	9b 85       	ldd	r25, Y+11	; 0x0b
     e34:	fc 01       	movw	r30, r24
     e36:	81 8d       	ldd	r24, Z+25	; 0x19
     e38:	92 8d       	ldd	r25, Z+26	; 0x1a
     e3a:	9e 01       	movw	r18, r28
     e3c:	2c 5f       	subi	r18, 0xFC	; 252
     e3e:	3f 4f       	sbci	r19, 0xFF	; 255
     e40:	b9 01       	movw	r22, r18
     e42:	4a e0       	ldi	r20, 0x0A	; 10
     e44:	50 e0       	ldi	r21, 0x00	; 0
     e46:	0e 94 09 15 	call	0x2a12	; 0x2a12 <itoa>
	itoa(second,secondString,10);
     e4a:	8a 85       	ldd	r24, Y+10	; 0x0a
     e4c:	9b 85       	ldd	r25, Y+11	; 0x0b
     e4e:	fc 01       	movw	r30, r24
     e50:	83 8d       	ldd	r24, Z+27	; 0x1b
     e52:	94 8d       	ldd	r25, Z+28	; 0x1c
     e54:	9e 01       	movw	r18, r28
     e56:	29 5f       	subi	r18, 0xF9	; 249
     e58:	3f 4f       	sbci	r19, 0xFF	; 255
     e5a:	b9 01       	movw	r22, r18
     e5c:	4a e0       	ldi	r20, 0x0A	; 10
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	0e 94 09 15 	call	0x2a12	; 0x2a12 <itoa>
	strcpy(timeString,hourString);
     e64:	8a 85       	ldd	r24, Y+10	; 0x0a
     e66:	9b 85       	ldd	r25, Y+11	; 0x0b
     e68:	4d 96       	adiw	r24, 0x1d	; 29
     e6a:	9e 01       	movw	r18, r28
     e6c:	2f 5f       	subi	r18, 0xFF	; 255
     e6e:	3f 4f       	sbci	r19, 0xFF	; 255
     e70:	b9 01       	movw	r22, r18
     e72:	0e 94 02 15 	call	0x2a04	; 0x2a04 <strcpy>
	strcat(timeString,":");
     e76:	8a 85       	ldd	r24, Y+10	; 0x0a
     e78:	9b 85       	ldd	r25, Y+11	; 0x0b
     e7a:	9c 01       	movw	r18, r24
     e7c:	23 5e       	subi	r18, 0xE3	; 227
     e7e:	3f 4f       	sbci	r19, 0xFF	; 255
     e80:	c9 01       	movw	r24, r18
     e82:	ac 01       	movw	r20, r24
     e84:	fa 01       	movw	r30, r20
     e86:	01 90       	ld	r0, Z+
     e88:	00 20       	and	r0, r0
     e8a:	e9 f7       	brne	.-6      	; 0xe86 <_ZN6myTime7getTimeEv+0x88>
     e8c:	cf 01       	movw	r24, r30
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	84 1b       	sub	r24, r20
     e92:	95 0b       	sbc	r25, r21
     e94:	82 0f       	add	r24, r18
     e96:	93 1f       	adc	r25, r19
     e98:	2a e3       	ldi	r18, 0x3A	; 58
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	fc 01       	movw	r30, r24
     e9e:	31 83       	std	Z+1, r19	; 0x01
     ea0:	20 83       	st	Z, r18
	strcat(timeString,minuteString);
     ea2:	8a 85       	ldd	r24, Y+10	; 0x0a
     ea4:	9b 85       	ldd	r25, Y+11	; 0x0b
     ea6:	4d 96       	adiw	r24, 0x1d	; 29
     ea8:	9e 01       	movw	r18, r28
     eaa:	2c 5f       	subi	r18, 0xFC	; 252
     eac:	3f 4f       	sbci	r19, 0xFF	; 255
     eae:	b9 01       	movw	r22, r18
     eb0:	0e 94 ee 14 	call	0x29dc	; 0x29dc <strcat>
	strcat(timeString,":");
     eb4:	8a 85       	ldd	r24, Y+10	; 0x0a
     eb6:	9b 85       	ldd	r25, Y+11	; 0x0b
     eb8:	9c 01       	movw	r18, r24
     eba:	23 5e       	subi	r18, 0xE3	; 227
     ebc:	3f 4f       	sbci	r19, 0xFF	; 255
     ebe:	c9 01       	movw	r24, r18
     ec0:	ac 01       	movw	r20, r24
     ec2:	fa 01       	movw	r30, r20
     ec4:	01 90       	ld	r0, Z+
     ec6:	00 20       	and	r0, r0
     ec8:	e9 f7       	brne	.-6      	; 0xec4 <_ZN6myTime7getTimeEv+0xc6>
     eca:	cf 01       	movw	r24, r30
     ecc:	01 97       	sbiw	r24, 0x01	; 1
     ece:	84 1b       	sub	r24, r20
     ed0:	95 0b       	sbc	r25, r21
     ed2:	82 0f       	add	r24, r18
     ed4:	93 1f       	adc	r25, r19
     ed6:	2a e3       	ldi	r18, 0x3A	; 58
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	fc 01       	movw	r30, r24
     edc:	31 83       	std	Z+1, r19	; 0x01
     ede:	20 83       	st	Z, r18
	strcat(timeString,secondString);
     ee0:	8a 85       	ldd	r24, Y+10	; 0x0a
     ee2:	9b 85       	ldd	r25, Y+11	; 0x0b
     ee4:	4d 96       	adiw	r24, 0x1d	; 29
     ee6:	9e 01       	movw	r18, r28
     ee8:	29 5f       	subi	r18, 0xF9	; 249
     eea:	3f 4f       	sbci	r19, 0xFF	; 255
     eec:	b9 01       	movw	r22, r18
     eee:	0e 94 ee 14 	call	0x29dc	; 0x29dc <strcat>
	timeString[10] = ' ';
     ef2:	8a 85       	ldd	r24, Y+10	; 0x0a
     ef4:	9b 85       	ldd	r25, Y+11	; 0x0b
     ef6:	20 e2       	ldi	r18, 0x20	; 32
     ef8:	fc 01       	movw	r30, r24
     efa:	27 a3       	lds	r18, 0x57
	timeString[11] = '\0';
     efc:	8a 85       	ldd	r24, Y+10	; 0x0a
     efe:	9b 85       	ldd	r25, Y+11	; 0x0b
     f00:	fc 01       	movw	r30, r24
     f02:	10 a6       	lds	r17, 0xb0
	return timeString;
     f04:	8a 85       	ldd	r24, Y+10	; 0x0a
     f06:	9b 85       	ldd	r25, Y+11	; 0x0b
     f08:	4d 96       	adiw	r24, 0x1d	; 29
     f0a:	2b 96       	adiw	r28, 0x0b	; 11
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	08 95       	ret

00000f1c <_Z18getDateTime_eepromhh>:
BYTE EEMEM eeDay = 10;
WORD EEMEM eeYear = 2013;


/*************************************************************************************************************/
void getDateTime_eeprom(BOOL gTime, BOOL gDate){			//get date and time from EEPROM
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	2f 97       	sbiw	r28, 0x0f	; 15
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	8e 87       	std	Y+14, r24	; 0x0e
     f32:	6f 87       	std	Y+15, r22	; 0x0f
	cli();
     f34:	f8 94       	cli
	if (gTime){
     f36:	8e 85       	ldd	r24, Y+14	; 0x0e
     f38:	88 23       	and	r24, r24
     f3a:	09 f4       	brne	.+2      	; 0xf3e <_Z18getDateTime_eepromhh+0x22>
     f3c:	4b c0       	rjmp	.+150    	; 0xfd4 <_Z18getDateTime_eepromhh+0xb8>
		BYTE tempMin, tempSec, tempHour;
		int times=0;
     f3e:	1a 82       	std	Y+2, r1	; 0x02
     f40:	19 82       	std	Y+1, r1	; 0x01
		BOOL notGood=fTrue;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	8b 83       	std	Y+3, r24	; 0x03
		while(notGood && times<3){
     f46:	2c c0       	rjmp	.+88     	; 0xfa0 <_Z18getDateTime_eepromhh+0x84>
			tempSec = eeprom_read_byte(&eeSecond);
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__eerd_byte_m324pa>
     f50:	8f 83       	std	Y+7, r24	; 0x07
			tempMin = eeprom_read_byte(&eeMinute);
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__eerd_byte_m324pa>
     f5a:	88 87       	std	Y+8, r24	; 0x08
			tempHour = eeprom_read_byte(&eeHour);
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__eerd_byte_m324pa>
     f64:	89 87       	std	Y+9, r24	; 0x09
			if (tempSec/60==0 && tempMin/60==0 && tempHour/24==0){currentTime.setTime((int)tempHour,(int)tempMin,(int)tempSec); notGood=fFalse;}
     f66:	8f 81       	ldd	r24, Y+7	; 0x07
     f68:	8c 33       	cpi	r24, 0x3C	; 60
     f6a:	a8 f4       	brcc	.+42     	; 0xf96 <_Z18getDateTime_eepromhh+0x7a>
     f6c:	88 85       	ldd	r24, Y+8	; 0x08
     f6e:	8c 33       	cpi	r24, 0x3C	; 60
     f70:	90 f4       	brcc	.+36     	; 0xf96 <_Z18getDateTime_eepromhh+0x7a>
     f72:	89 85       	ldd	r24, Y+9	; 0x09
     f74:	88 31       	cpi	r24, 0x18	; 24
     f76:	78 f4       	brcc	.+30     	; 0xf96 <_Z18getDateTime_eepromhh+0x7a>
     f78:	89 85       	ldd	r24, Y+9	; 0x09
     f7a:	68 2f       	mov	r22, r24
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	88 85       	ldd	r24, Y+8	; 0x08
     f80:	48 2f       	mov	r20, r24
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	8f 81       	ldd	r24, Y+7	; 0x07
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	86 e8       	ldi	r24, 0x86	; 134
     f8c:	91 e0       	ldi	r25, 0x01	; 1
     f8e:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
     f92:	1b 82       	std	Y+3, r1	; 0x03
     f94:	05 c0       	rjmp	.+10     	; 0xfa0 <_Z18getDateTime_eepromhh+0x84>
			else {times++;}
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	9a 81       	ldd	r25, Y+2	; 0x02
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	9a 83       	std	Y+2, r25	; 0x02
     f9e:	89 83       	std	Y+1, r24	; 0x01
	cli();
	if (gTime){
		BYTE tempMin, tempSec, tempHour;
		int times=0;
		BOOL notGood=fTrue;
		while(notGood && times<3){
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	88 23       	and	r24, r24
     fa4:	39 f0       	breq	.+14     	; 0xfb4 <_Z18getDateTime_eepromhh+0x98>
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
     faa:	83 30       	cpi	r24, 0x03	; 3
     fac:	91 05       	cpc	r25, r1
     fae:	14 f4       	brge	.+4      	; 0xfb4 <_Z18getDateTime_eepromhh+0x98>
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	01 c0       	rjmp	.+2      	; 0xfb6 <_Z18getDateTime_eepromhh+0x9a>
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	88 23       	and	r24, r24
     fb8:	39 f6       	brne	.-114    	; 0xf48 <_Z18getDateTime_eepromhh+0x2c>
			tempMin = eeprom_read_byte(&eeMinute);
			tempHour = eeprom_read_byte(&eeHour);
			if (tempSec/60==0 && tempMin/60==0 && tempHour/24==0){currentTime.setTime((int)tempHour,(int)tempMin,(int)tempSec); notGood=fFalse;}
			else {times++;}
		}
		if (notGood){currentTime.setTime(1,1,1);}
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	88 23       	and	r24, r24
     fbe:	51 f0       	breq	.+20     	; 0xfd4 <_Z18getDateTime_eepromhh+0xb8>
     fc0:	86 e8       	ldi	r24, 0x86	; 134
     fc2:	91 e0       	ldi	r25, 0x01	; 1
     fc4:	61 e0       	ldi	r22, 0x01	; 1
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	41 e0       	ldi	r20, 0x01	; 1
     fca:	50 e0       	ldi	r21, 0x00	; 0
     fcc:	21 e0       	ldi	r18, 0x01	; 1
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN6myTime7setTimeEiii>
	}		
	if (gDate){
     fd4:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd6:	88 23       	and	r24, r24
     fd8:	09 f4       	brne	.+2      	; 0xfdc <_Z18getDateTime_eepromhh+0xc0>
     fda:	4e c0       	rjmp	.+156    	; 0x1078 <_Z18getDateTime_eepromhh+0x15c>
		BYTE tempDay,tempMonth;
		WORD tempYear;
		int times=0;
     fdc:	1d 82       	std	Y+5, r1	; 0x05
     fde:	1c 82       	std	Y+4, r1	; 0x04
		BOOL notGood=fTrue;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	8e 83       	std	Y+6, r24	; 0x06
		while (notGood && times<3){
     fe4:	2f c0       	rjmp	.+94     	; 0x1044 <_Z18getDateTime_eepromhh+0x128>
			tempDay = eeprom_read_byte(&eeDay);
     fe6:	84 e0       	ldi	r24, 0x04	; 4
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__eerd_byte_m324pa>
     fee:	8a 87       	std	Y+10, r24	; 0x0a
			tempMonth = eeprom_read_byte(&eeMonth);
     ff0:	83 e0       	ldi	r24, 0x03	; 3
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__eerd_byte_m324pa>
     ff8:	8b 87       	std	Y+11, r24	; 0x0b
			tempYear = eeprom_read_word(&eeYear);
     ffa:	85 e0       	ldi	r24, 0x05	; 5
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <__eerd_word_m324pa>
    1002:	9d 87       	std	Y+13, r25	; 0x0d
    1004:	8c 87       	std	Y+12, r24	; 0x0c
			if (tempDay/31==0 && tempMonth/13==0 && tempYear/10000==0){currentTime.setDate((int)tempMonth,(int)tempDay,(int)tempYear); notGood=fFalse;}
    1006:	8a 85       	ldd	r24, Y+10	; 0x0a
    1008:	8f 31       	cpi	r24, 0x1F	; 31
    100a:	b8 f4       	brcc	.+46     	; 0x103a <_Z18getDateTime_eepromhh+0x11e>
    100c:	8b 85       	ldd	r24, Y+11	; 0x0b
    100e:	8d 30       	cpi	r24, 0x0D	; 13
    1010:	a0 f4       	brcc	.+40     	; 0x103a <_Z18getDateTime_eepromhh+0x11e>
    1012:	8c 85       	ldd	r24, Y+12	; 0x0c
    1014:	9d 85       	ldd	r25, Y+13	; 0x0d
    1016:	27 e2       	ldi	r18, 0x27	; 39
    1018:	80 31       	cpi	r24, 0x10	; 16
    101a:	92 07       	cpc	r25, r18
    101c:	70 f4       	brcc	.+28     	; 0x103a <_Z18getDateTime_eepromhh+0x11e>
    101e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1020:	68 2f       	mov	r22, r24
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	8a 85       	ldd	r24, Y+10	; 0x0a
    1026:	48 2f       	mov	r20, r24
    1028:	50 e0       	ldi	r21, 0x00	; 0
    102a:	2c 85       	ldd	r18, Y+12	; 0x0c
    102c:	3d 85       	ldd	r19, Y+13	; 0x0d
    102e:	86 e8       	ldi	r24, 0x86	; 134
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	0e 94 84 01 	call	0x308	; 0x308 <_ZN6myDate7setDateEiii>
    1036:	1e 82       	std	Y+6, r1	; 0x06
    1038:	05 c0       	rjmp	.+10     	; 0x1044 <_Z18getDateTime_eepromhh+0x128>
			else {times++;}
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
    103c:	9d 81       	ldd	r25, Y+5	; 0x05
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	9d 83       	std	Y+5, r25	; 0x05
    1042:	8c 83       	std	Y+4, r24	; 0x04
	if (gDate){
		BYTE tempDay,tempMonth;
		WORD tempYear;
		int times=0;
		BOOL notGood=fTrue;
		while (notGood && times<3){
    1044:	8e 81       	ldd	r24, Y+6	; 0x06
    1046:	88 23       	and	r24, r24
    1048:	39 f0       	breq	.+14     	; 0x1058 <_Z18getDateTime_eepromhh+0x13c>
    104a:	8c 81       	ldd	r24, Y+4	; 0x04
    104c:	9d 81       	ldd	r25, Y+5	; 0x05
    104e:	83 30       	cpi	r24, 0x03	; 3
    1050:	91 05       	cpc	r25, r1
    1052:	14 f4       	brge	.+4      	; 0x1058 <_Z18getDateTime_eepromhh+0x13c>
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	01 c0       	rjmp	.+2      	; 0x105a <_Z18getDateTime_eepromhh+0x13e>
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	88 23       	and	r24, r24
    105c:	21 f6       	brne	.-120    	; 0xfe6 <_Z18getDateTime_eepromhh+0xca>
			tempMonth = eeprom_read_byte(&eeMonth);
			tempYear = eeprom_read_word(&eeYear);
			if (tempDay/31==0 && tempMonth/13==0 && tempYear/10000==0){currentTime.setDate((int)tempMonth,(int)tempDay,(int)tempYear); notGood=fFalse;}
			else {times++;}
		}
		if (notGood){currentTime.setDate(1,1,2001);}	
    105e:	8e 81       	ldd	r24, Y+6	; 0x06
    1060:	88 23       	and	r24, r24
    1062:	51 f0       	breq	.+20     	; 0x1078 <_Z18getDateTime_eepromhh+0x15c>
    1064:	86 e8       	ldi	r24, 0x86	; 134
    1066:	91 e0       	ldi	r25, 0x01	; 1
    1068:	61 e0       	ldi	r22, 0x01	; 1
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	41 e0       	ldi	r20, 0x01	; 1
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	21 ed       	ldi	r18, 0xD1	; 209
    1072:	37 e0       	ldi	r19, 0x07	; 7
    1074:	0e 94 84 01 	call	0x308	; 0x308 <_ZN6myDate7setDateEiii>
	}
	sei();
    1078:	78 94       	sei
}
    107a:	2f 96       	adiw	r28, 0x0f	; 15
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	de bf       	out	0x3e, r29	; 62
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	cd bf       	out	0x3d, r28	; 61
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	08 95       	ret

0000108c <_Z19saveDateTime_eepromhh>:
/*************************************************************************************************************/

void saveDateTime_eeprom(BOOL sTime, BOOL sDate){
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	29 97       	sbiw	r28, 0x09	; 9
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	88 87       	std	Y+8, r24	; 0x08
    10a2:	69 87       	std	Y+9, r22	; 0x09
	cli();
    10a4:	f8 94       	cli
	if (sTime){
    10a6:	88 85       	ldd	r24, Y+8	; 0x08
    10a8:	88 23       	and	r24, r24
    10aa:	f1 f0       	breq	.+60     	; 0x10e8 <_Z19saveDateTime_eepromhh+0x5c>
		BYTE tempSec,tempMin,tempHour;
		tempHour = currentTime.getHours();
    10ac:	86 e8       	ldi	r24, 0x86	; 134
    10ae:	91 e0       	ldi	r25, 0x01	; 1
    10b0:	0e 94 bb 04 	call	0x976	; 0x976 <_ZN6myTime8getHoursEv>
    10b4:	89 83       	std	Y+1, r24	; 0x01
		tempMin = currentTime.getMinutes();
    10b6:	86 e8       	ldi	r24, 0x86	; 134
    10b8:	91 e0       	ldi	r25, 0x01	; 1
    10ba:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6myTime10getMinutesEv>
    10be:	8a 83       	std	Y+2, r24	; 0x02
		tempSec = currentTime.getSeconds();
    10c0:	86 e8       	ldi	r24, 0x86	; 134
    10c2:	91 e0       	ldi	r25, 0x01	; 1
    10c4:	0e 94 99 04 	call	0x932	; 0x932 <_ZN6myTime10getSecondsEv>
    10c8:	8b 83       	std	Y+3, r24	; 0x03
		eeprom_write_byte(&eeSecond,tempSec);
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	6b 81       	ldd	r22, Y+3	; 0x03
    10d0:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__eewr_byte_m324pa>
		eeprom_write_byte(&eeMinute,tempMin);
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	6a 81       	ldd	r22, Y+2	; 0x02
    10da:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__eewr_byte_m324pa>
		eeprom_write_byte(&eeHour,tempHour);
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	69 81       	ldd	r22, Y+1	; 0x01
    10e4:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__eewr_byte_m324pa>
	}
	if (sDate){
    10e8:	89 85       	ldd	r24, Y+9	; 0x09
    10ea:	88 23       	and	r24, r24
    10ec:	09 f1       	breq	.+66     	; 0x1130 <_Z19saveDateTime_eepromhh+0xa4>
		BYTE tempDay,tempMonth;
		WORD tempYear;
		tempYear = currentTime.getYears();
    10ee:	86 e8       	ldi	r24, 0x86	; 134
    10f0:	91 e0       	ldi	r25, 0x01	; 1
    10f2:	0e 94 ba 00 	call	0x174	; 0x174 <_ZN6myDate8getYearsEv>
    10f6:	9d 83       	std	Y+5, r25	; 0x05
    10f8:	8c 83       	std	Y+4, r24	; 0x04
		tempMonth = currentTime.getMonths();
    10fa:	86 e8       	ldi	r24, 0x86	; 134
    10fc:	91 e0       	ldi	r25, 0x01	; 1
    10fe:	0e 94 a9 00 	call	0x152	; 0x152 <_ZN6myDate9getMonthsEv>
    1102:	8e 83       	std	Y+6, r24	; 0x06
		tempDay = currentTime.getDays();
    1104:	86 e8       	ldi	r24, 0x86	; 134
    1106:	91 e0       	ldi	r25, 0x01	; 1
    1108:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN6myDate7getDaysEv>
    110c:	8f 83       	std	Y+7, r24	; 0x07
		eeprom_write_word(&eeYear,tempYear);
    110e:	85 e0       	ldi	r24, 0x05	; 5
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	2c 81       	ldd	r18, Y+4	; 0x04
    1114:	3d 81       	ldd	r19, Y+5	; 0x05
    1116:	b9 01       	movw	r22, r18
    1118:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <__eewr_word_m324pa>
		eeprom_write_byte(&eeMonth,tempMonth);
    111c:	83 e0       	ldi	r24, 0x03	; 3
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	6e 81       	ldd	r22, Y+6	; 0x06
    1122:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__eewr_byte_m324pa>
		eeprom_write_byte(&eeDay,tempDay);
    1126:	84 e0       	ldi	r24, 0x04	; 4
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	6f 81       	ldd	r22, Y+7	; 0x07
    112c:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__eewr_byte_m324pa>
	}
	sei();
    1130:	78 94       	sei
}
    1132:	29 96       	adiw	r28, 0x09	; 9
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	08 95       	ret

00001144 <_Z13PutUartChBonec>:
extern myTime currentTime;

#define updatingGAVR (flagUpdateGAVRDate || flagUpdateGAVRTime)

/**************************************************************************************************************/
void PutUartChBone(char ch){
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	0f 92       	push	r0
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSR0A & (1 << UDRE0)));
    1150:	00 00       	nop
    1152:	80 ec       	ldi	r24, 0xC0	; 192
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	fc 01       	movw	r30, r24
    1158:	80 81       	ld	r24, Z
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	80 72       	andi	r24, 0x20	; 32
    1160:	90 70       	andi	r25, 0x00	; 0
    1162:	21 e0       	ldi	r18, 0x01	; 1
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	09 f0       	breq	.+2      	; 0x116a <_Z13PutUartChBonec+0x26>
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	22 23       	and	r18, r18
    116c:	91 f7       	brne	.-28     	; 0x1152 <_Z13PutUartChBonec+0xe>
	UDR0=ch;
    116e:	86 ec       	ldi	r24, 0xC6	; 198
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	29 81       	ldd	r18, Y+1	; 0x01
    1174:	fc 01       	movw	r30, r24
    1176:	20 83       	st	Z, r18
}
    1178:	0f 90       	pop	r0
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	08 95       	ret

00001180 <_Z9PrintBonePc>:
/*************************************************************************************************************/
void PrintBone(char string[]){
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	00 d0       	rcall	.+0      	; 0x1186 <_Z9PrintBonePc+0x6>
    1186:	0f 92       	push	r0
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	9b 83       	std	Y+3, r25	; 0x03
    118e:	8a 83       	std	Y+2, r24	; 0x02
	BYTE i=0;
    1190:	19 82       	std	Y+1, r1	; 0x01
	
	while (string[i]){
    1192:	0e c0       	rjmp	.+28     	; 0x11b0 <_Z9PrintBonePc+0x30>
		PutUartChBone(string[i++]);
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	88 2f       	mov	r24, r24
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	2a 81       	ldd	r18, Y+2	; 0x02
    119c:	3b 81       	ldd	r19, Y+3	; 0x03
    119e:	82 0f       	add	r24, r18
    11a0:	93 1f       	adc	r25, r19
    11a2:	fc 01       	movw	r30, r24
    11a4:	80 81       	ld	r24, Z
    11a6:	99 81       	ldd	r25, Y+1	; 0x01
    11a8:	9f 5f       	subi	r25, 0xFF	; 255
    11aa:	99 83       	std	Y+1, r25	; 0x01
    11ac:	0e 94 a2 08 	call	0x1144	; 0x1144 <_Z13PutUartChBonec>
}
/*************************************************************************************************************/
void PrintBone(char string[]){
	BYTE i=0;
	
	while (string[i]){
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	88 2f       	mov	r24, r24
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	2a 81       	ldd	r18, Y+2	; 0x02
    11b8:	3b 81       	ldd	r19, Y+3	; 0x03
    11ba:	82 0f       	add	r24, r18
    11bc:	93 1f       	adc	r25, r19
    11be:	fc 01       	movw	r30, r24
    11c0:	90 81       	ld	r25, Z
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	99 23       	and	r25, r25
    11c6:	09 f4       	brne	.+2      	; 0x11ca <_Z9PrintBonePc+0x4a>
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	88 23       	and	r24, r24
    11cc:	19 f7       	brne	.-58     	; 0x1194 <_Z9PrintBonePc+0x14>
		PutUartChBone(string[i++]);
	}
}
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	08 95       	ret

000011da <_Z13PutUartChGAVRc>:
/*************************************************************************************************************/

void PutUartChGAVR(char ch){
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	0f 92       	push	r0
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSR1A & (1 << UDRE1)));
    11e6:	00 00       	nop
    11e8:	88 ec       	ldi	r24, 0xC8	; 200
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	fc 01       	movw	r30, r24
    11ee:	80 81       	ld	r24, Z
    11f0:	88 2f       	mov	r24, r24
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	80 72       	andi	r24, 0x20	; 32
    11f6:	90 70       	andi	r25, 0x00	; 0
    11f8:	21 e0       	ldi	r18, 0x01	; 1
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	09 f0       	breq	.+2      	; 0x1200 <_Z13PutUartChGAVRc+0x26>
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	22 23       	and	r18, r18
    1202:	91 f7       	brne	.-28     	; 0x11e8 <_Z13PutUartChGAVRc+0xe>
	UDR1=ch;
    1204:	8e ec       	ldi	r24, 0xCE	; 206
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	29 81       	ldd	r18, Y+1	; 0x01
    120a:	fc 01       	movw	r30, r24
    120c:	20 83       	st	Z, r18
}
    120e:	0f 90       	pop	r0
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	08 95       	ret

00001216 <_Z9PrintGAVRPc>:
/*************************************************************************************************************/

void PrintGAVR(char string[]){
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	00 d0       	rcall	.+0      	; 0x121c <_Z9PrintGAVRPc+0x6>
    121c:	0f 92       	push	r0
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	9b 83       	std	Y+3, r25	; 0x03
    1224:	8a 83       	std	Y+2, r24	; 0x02
	BYTE i=0;
    1226:	19 82       	std	Y+1, r1	; 0x01
	while (string[i]){
    1228:	0e c0       	rjmp	.+28     	; 0x1246 <_Z9PrintGAVRPc+0x30>
		PutUartChGAVR(string[i++]);
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	88 2f       	mov	r24, r24
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	2a 81       	ldd	r18, Y+2	; 0x02
    1232:	3b 81       	ldd	r19, Y+3	; 0x03
    1234:	82 0f       	add	r24, r18
    1236:	93 1f       	adc	r25, r19
    1238:	fc 01       	movw	r30, r24
    123a:	80 81       	ld	r24, Z
    123c:	99 81       	ldd	r25, Y+1	; 0x01
    123e:	9f 5f       	subi	r25, 0xFF	; 255
    1240:	99 83       	std	Y+1, r25	; 0x01
    1242:	0e 94 ed 08 	call	0x11da	; 0x11da <_Z13PutUartChGAVRc>
}
/*************************************************************************************************************/

void PrintGAVR(char string[]){
	BYTE i=0;
	while (string[i]){
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	88 2f       	mov	r24, r24
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	2a 81       	ldd	r18, Y+2	; 0x02
    124e:	3b 81       	ldd	r19, Y+3	; 0x03
    1250:	82 0f       	add	r24, r18
    1252:	93 1f       	adc	r25, r19
    1254:	fc 01       	movw	r30, r24
    1256:	90 81       	ld	r25, Z
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	99 23       	and	r25, r25
    125c:	09 f4       	brne	.+2      	; 0x1260 <_Z9PrintGAVRPc+0x4a>
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	88 23       	and	r24, r24
    1262:	19 f7       	brne	.-58     	; 0x122a <_Z9PrintGAVRPc+0x14>
		PutUartChGAVR(string[i++]);
	}
}
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	08 95       	ret

00001270 <_Z8sendGAVRv>:
/*************************************************************************************************************/

void sendGAVR(){
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	ca 55       	subi	r28, 0x5A	; 90
    127a:	d0 40       	sbci	r29, 0x00	; 0
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
	//Declare variables to be used.
	volatile static unsigned int state=0;
	volatile BOOL noCarriage=fTrue;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	8a 87       	std	Y+10, r24	; 0x0a
	char recChar, recString[40], sentString[40];
	unsigned int strLoc=0;
    128a:	1a 82       	std	Y+2, r1	; 0x02
    128c:	19 82       	std	Y+1, r1	; 0x01
	
	//Going to be a global
	BOOL flagTimeout=fFalse;
    128e:	1b 82       	std	Y+3, r1	; 0x03
	
	//Transmission protocol
	while (flagSendingGAVR){
    1290:	2b c2       	rjmp	.+1110   	; 0x16e8 <_Z8sendGAVRv+0x478>
		/* State 5: Successful transmission and reception. Kill sending flag, reset state, exit.					 */
		/* State 6: ACKBAD received, check to see if we have an invalid date/time in our clock or it was just noisy  */
		/*			and had error in transmission/reception. If valid, go to waiting state. Else exit and set flag.	 */
		/* State 7: Got the wrong ack for something, set a flag to let the WAVR do its thing then try again.		 */
		/*************************************************************************************************************/
		switch (state){
    1292:	80 91 c2 01 	lds	r24, 0x01C2
    1296:	90 91 c3 01 	lds	r25, 0x01C3
    129a:	83 30       	cpi	r24, 0x03	; 3
    129c:	91 05       	cpc	r25, r1
    129e:	09 f4       	brne	.+2      	; 0x12a2 <_Z8sendGAVRv+0x32>
    12a0:	45 c1       	rjmp	.+650    	; 0x152c <_Z8sendGAVRv+0x2bc>
    12a2:	84 30       	cpi	r24, 0x04	; 4
    12a4:	91 05       	cpc	r25, r1
    12a6:	48 f4       	brcc	.+18     	; 0x12ba <_Z8sendGAVRv+0x4a>
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	91 05       	cpc	r25, r1
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <_Z8sendGAVRv+0x40>
    12ae:	a6 c0       	rjmp	.+332    	; 0x13fc <_Z8sendGAVRv+0x18c>
    12b0:	82 30       	cpi	r24, 0x02	; 2
    12b2:	91 05       	cpc	r25, r1
    12b4:	08 f0       	brcs	.+2      	; 0x12b8 <_Z8sendGAVRv+0x48>
    12b6:	b0 c0       	rjmp	.+352    	; 0x1418 <_Z8sendGAVRv+0x1a8>
    12b8:	11 c0       	rjmp	.+34     	; 0x12dc <_Z8sendGAVRv+0x6c>
    12ba:	85 30       	cpi	r24, 0x05	; 5
    12bc:	91 05       	cpc	r25, r1
    12be:	09 f4       	brne	.+2      	; 0x12c2 <_Z8sendGAVRv+0x52>
    12c0:	dd c1       	rjmp	.+954    	; 0x167c <_Z8sendGAVRv+0x40c>
    12c2:	85 30       	cpi	r24, 0x05	; 5
    12c4:	91 05       	cpc	r25, r1
    12c6:	08 f4       	brcc	.+2      	; 0x12ca <_Z8sendGAVRv+0x5a>
    12c8:	ce c1       	rjmp	.+924    	; 0x1666 <_Z8sendGAVRv+0x3f6>
    12ca:	86 30       	cpi	r24, 0x06	; 6
    12cc:	91 05       	cpc	r25, r1
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <_Z8sendGAVRv+0x62>
    12d0:	df c1       	rjmp	.+958    	; 0x1690 <_Z8sendGAVRv+0x420>
    12d2:	87 30       	cpi	r24, 0x07	; 7
    12d4:	91 05       	cpc	r25, r1
    12d6:	09 f4       	brne	.+2      	; 0x12da <_Z8sendGAVRv+0x6a>
    12d8:	f4 c1       	rjmp	.+1000   	; 0x16c2 <_Z8sendGAVRv+0x452>
    12da:	fd c1       	rjmp	.+1018   	; 0x16d6 <_Z8sendGAVRv+0x466>
			case 0: {
				prtGAVRINT |= (1 << bnGAVRINT);
    12dc:	85 e2       	ldi	r24, 0x25	; 37
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	25 e2       	ldi	r18, 0x25	; 37
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	f9 01       	movw	r30, r18
    12e6:	20 81       	ld	r18, Z
    12e8:	28 60       	ori	r18, 0x08	; 8
    12ea:	fc 01       	movw	r30, r24
    12ec:	20 83       	st	Z, r18
				for (int i=0; i<2; i++){asm volatile("nop");}
    12ee:	1d 82       	std	Y+5, r1	; 0x05
    12f0:	1c 82       	std	Y+4, r1	; 0x04
    12f2:	06 c0       	rjmp	.+12     	; 0x1300 <_Z8sendGAVRv+0x90>
    12f4:	00 00       	nop
    12f6:	8c 81       	ldd	r24, Y+4	; 0x04
    12f8:	9d 81       	ldd	r25, Y+5	; 0x05
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	9d 83       	std	Y+5, r25	; 0x05
    12fe:	8c 83       	std	Y+4, r24	; 0x04
    1300:	21 e0       	ldi	r18, 0x01	; 1
    1302:	8c 81       	ldd	r24, Y+4	; 0x04
    1304:	9d 81       	ldd	r25, Y+5	; 0x05
    1306:	82 30       	cpi	r24, 0x02	; 2
    1308:	91 05       	cpc	r25, r1
    130a:	0c f0       	brlt	.+2      	; 0x130e <_Z8sendGAVRv+0x9e>
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	22 23       	and	r18, r18
    1310:	89 f7       	brne	.-30     	; 0x12f4 <_Z8sendGAVRv+0x84>
				prtGAVRINT &= ~(1 << bnGAVRINT);
    1312:	85 e2       	ldi	r24, 0x25	; 37
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	25 e2       	ldi	r18, 0x25	; 37
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	f9 01       	movw	r30, r18
    131c:	20 81       	ld	r18, Z
    131e:	27 7f       	andi	r18, 0xF7	; 247
    1320:	fc 01       	movw	r30, r24
    1322:	20 83       	st	Z, r18
				state=1;
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	90 93 c3 01 	sts	0x01C3, r25
    132c:	80 93 c2 01 	sts	0x01C2, r24
				break;
    1330:	db c1       	rjmp	.+950    	; 0x16e8 <_Z8sendGAVRv+0x478>
			}//end case 0
			case 1: {
				while (noCarriage && flagSendingGAVR){
					while (!(UCSR1A & (1 << RXC1)) && flagSendingGAVR);
    1332:	00 00       	nop
    1334:	88 ec       	ldi	r24, 0xC8	; 200
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	fc 01       	movw	r30, r24
    133a:	80 81       	ld	r24, Z
    133c:	88 23       	and	r24, r24
    133e:	34 f0       	brlt	.+12     	; 0x134c <_Z8sendGAVRv+0xdc>
    1340:	80 91 b3 01 	lds	r24, 0x01B3
    1344:	88 23       	and	r24, r24
    1346:	11 f0       	breq	.+4      	; 0x134c <_Z8sendGAVRv+0xdc>
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	01 c0       	rjmp	.+2      	; 0x134e <_Z8sendGAVRv+0xde>
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	88 23       	and	r24, r24
    1350:	89 f7       	brne	.-30     	; 0x1334 <_Z8sendGAVRv+0xc4>
					if (!flagSendingGAVR){state=0; flagTimeout=fTrue; break;}
    1352:	80 91 b3 01 	lds	r24, 0x01B3
    1356:	88 23       	and	r24, r24
    1358:	41 f4       	brne	.+16     	; 0x136a <_Z8sendGAVRv+0xfa>
    135a:	10 92 c3 01 	sts	0x01C3, r1
    135e:	10 92 c2 01 	sts	0x01C2, r1
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	8b 83       	std	Y+3, r24	; 0x03
    1366:	00 00       	nop
							recString[strLoc++] = recChar;
							if (strLoc >= 39){strLoc = 0; noCarriage=fFalse; state=7;}
						}//end if-else
					}//end if-else	
				}//end while
				break;
    1368:	bf c1       	rjmp	.+894    	; 0x16e8 <_Z8sendGAVRv+0x478>
			case 1: {
				while (noCarriage && flagSendingGAVR){
					while (!(UCSR1A & (1 << RXC1)) && flagSendingGAVR);
					if (!flagSendingGAVR){state=0; flagTimeout=fTrue; break;}
					else {
						recChar=UDR1;
    136a:	8e ec       	ldi	r24, 0xCE	; 206
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	fc 01       	movw	r30, r24
    1370:	80 81       	ld	r24, Z
    1372:	88 87       	std	Y+8, r24	; 0x08
						recString[strLoc++]=recChar;
    1374:	9e 01       	movw	r18, r28
    1376:	2d 5c       	subi	r18, 0xCD	; 205
    1378:	3f 4f       	sbci	r19, 0xFF	; 255
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	9a 81       	ldd	r25, Y+2	; 0x02
    137e:	82 0f       	add	r24, r18
    1380:	93 1f       	adc	r25, r19
    1382:	28 85       	ldd	r18, Y+8	; 0x08
    1384:	fc 01       	movw	r30, r24
    1386:	20 83       	st	Z, r18
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	9a 81       	ldd	r25, Y+2	; 0x02
    138c:	01 96       	adiw	r24, 0x01	; 1
    138e:	9a 83       	std	Y+2, r25	; 0x02
    1390:	89 83       	std	Y+1, r24	; 0x01
						if (recChar=='.'){recString[strLoc++]='\0'; state=2;}
    1392:	88 85       	ldd	r24, Y+8	; 0x08
    1394:	8e 32       	cpi	r24, 0x2E	; 46
    1396:	a9 f4       	brne	.+42     	; 0x13c2 <_Z8sendGAVRv+0x152>
    1398:	9e 01       	movw	r18, r28
    139a:	2d 5c       	subi	r18, 0xCD	; 205
    139c:	3f 4f       	sbci	r19, 0xFF	; 255
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	9a 81       	ldd	r25, Y+2	; 0x02
    13a2:	82 0f       	add	r24, r18
    13a4:	93 1f       	adc	r25, r19
    13a6:	fc 01       	movw	r30, r24
    13a8:	10 82       	st	Z, r1
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	9a 81       	ldd	r25, Y+2	; 0x02
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	9a 83       	std	Y+2, r25	; 0x02
    13b2:	89 83       	std	Y+1, r24	; 0x01
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	90 93 c3 01 	sts	0x01C3, r25
    13bc:	80 93 c2 01 	sts	0x01C2, r24
    13c0:	1d c0       	rjmp	.+58     	; 0x13fc <_Z8sendGAVRv+0x18c>
						else {
							recString[strLoc++] = recChar;
    13c2:	9e 01       	movw	r18, r28
    13c4:	2d 5c       	subi	r18, 0xCD	; 205
    13c6:	3f 4f       	sbci	r19, 0xFF	; 255
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	9a 81       	ldd	r25, Y+2	; 0x02
    13cc:	82 0f       	add	r24, r18
    13ce:	93 1f       	adc	r25, r19
    13d0:	28 85       	ldd	r18, Y+8	; 0x08
    13d2:	fc 01       	movw	r30, r24
    13d4:	20 83       	st	Z, r18
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	9a 81       	ldd	r25, Y+2	; 0x02
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	9a 83       	std	Y+2, r25	; 0x02
    13de:	89 83       	std	Y+1, r24	; 0x01
							if (strLoc >= 39){strLoc = 0; noCarriage=fFalse; state=7;}
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	9a 81       	ldd	r25, Y+2	; 0x02
    13e4:	87 32       	cpi	r24, 0x27	; 39
    13e6:	91 05       	cpc	r25, r1
    13e8:	48 f0       	brcs	.+18     	; 0x13fc <_Z8sendGAVRv+0x18c>
    13ea:	1a 82       	std	Y+2, r1	; 0x02
    13ec:	19 82       	std	Y+1, r1	; 0x01
    13ee:	1a 86       	std	Y+10, r1	; 0x0a
    13f0:	87 e0       	ldi	r24, 0x07	; 7
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	90 93 c3 01 	sts	0x01C3, r25
    13f8:	80 93 c2 01 	sts	0x01C2, r24
				prtGAVRINT &= ~(1 << bnGAVRINT);
				state=1;
				break;
			}//end case 0
			case 1: {
				while (noCarriage && flagSendingGAVR){
    13fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    13fe:	88 23       	and	r24, r24
    1400:	31 f0       	breq	.+12     	; 0x140e <_Z8sendGAVRv+0x19e>
    1402:	80 91 b3 01 	lds	r24, 0x01B3
    1406:	88 23       	and	r24, r24
    1408:	11 f0       	breq	.+4      	; 0x140e <_Z8sendGAVRv+0x19e>
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	01 c0       	rjmp	.+2      	; 0x1410 <_Z8sendGAVRv+0x1a0>
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	88 23       	and	r24, r24
    1412:	09 f0       	breq	.+2      	; 0x1416 <_Z8sendGAVRv+0x1a6>
    1414:	8e cf       	rjmp	.-228    	; 0x1332 <_Z8sendGAVRv+0xc2>
							recString[strLoc++] = recChar;
							if (strLoc >= 39){strLoc = 0; noCarriage=fFalse; state=7;}
						}//end if-else
					}//end if-else	
				}//end while
				break;
    1416:	68 c1       	rjmp	.+720    	; 0x16e8 <_Z8sendGAVRv+0x478>
				}//end case 1
			case 2: {
				if (!strcmp(recString,"ACKW.")){state=3;}
    1418:	ce 01       	movw	r24, r28
    141a:	c3 96       	adiw	r24, 0x33	; 51
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	31 e0       	ldi	r19, 0x01	; 1
    1420:	b9 01       	movw	r22, r18
    1422:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <strcmp>
    1426:	00 97       	sbiw	r24, 0x00	; 0
    1428:	39 f4       	brne	.+14     	; 0x1438 <_Z8sendGAVRv+0x1c8>
    142a:	83 e0       	ldi	r24, 0x03	; 3
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	90 93 c3 01 	sts	0x01C3, r25
    1432:	80 93 c2 01 	sts	0x01C2, r24
				else if (!strcmp(recString,"ACKBAD")){state=6;}
				//send string case.
				else if (updatingGAVR && !strcmp(recString,sentString)){state=5;}
				else if (updatingGAVR && strcmp(recString,sentString)){state=7;}
				else{state=7;} //invalid ack
				break;
    1436:	58 c1       	rjmp	.+688    	; 0x16e8 <_Z8sendGAVRv+0x478>
				}//end while
				break;
				}//end case 1
			case 2: {
				if (!strcmp(recString,"ACKW.")){state=3;}
				else if (!strcmp(recString,"ACKGD")){state=4;}
    1438:	ce 01       	movw	r24, r28
    143a:	c3 96       	adiw	r24, 0x33	; 51
    143c:	26 e0       	ldi	r18, 0x06	; 6
    143e:	31 e0       	ldi	r19, 0x01	; 1
    1440:	b9 01       	movw	r22, r18
    1442:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <strcmp>
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	39 f4       	brne	.+14     	; 0x1458 <_Z8sendGAVRv+0x1e8>
    144a:	84 e0       	ldi	r24, 0x04	; 4
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	90 93 c3 01 	sts	0x01C3, r25
    1452:	80 93 c2 01 	sts	0x01C2, r24
				else if (!strcmp(recString,"ACKBAD")){state=6;}
				//send string case.
				else if (updatingGAVR && !strcmp(recString,sentString)){state=5;}
				else if (updatingGAVR && strcmp(recString,sentString)){state=7;}
				else{state=7;} //invalid ack
				break;
    1456:	48 c1       	rjmp	.+656    	; 0x16e8 <_Z8sendGAVRv+0x478>
				break;
				}//end case 1
			case 2: {
				if (!strcmp(recString,"ACKW.")){state=3;}
				else if (!strcmp(recString,"ACKGD")){state=4;}
				else if (!strcmp(recString,"ACKGT")){state=4;}
    1458:	ce 01       	movw	r24, r28
    145a:	c3 96       	adiw	r24, 0x33	; 51
    145c:	2c e0       	ldi	r18, 0x0C	; 12
    145e:	31 e0       	ldi	r19, 0x01	; 1
    1460:	b9 01       	movw	r22, r18
    1462:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <strcmp>
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	39 f4       	brne	.+14     	; 0x1478 <_Z8sendGAVRv+0x208>
    146a:	84 e0       	ldi	r24, 0x04	; 4
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	90 93 c3 01 	sts	0x01C3, r25
    1472:	80 93 c2 01 	sts	0x01C2, r24
				else if (!strcmp(recString,"ACKBAD")){state=6;}
				//send string case.
				else if (updatingGAVR && !strcmp(recString,sentString)){state=5;}
				else if (updatingGAVR && strcmp(recString,sentString)){state=7;}
				else{state=7;} //invalid ack
				break;
    1476:	38 c1       	rjmp	.+624    	; 0x16e8 <_Z8sendGAVRv+0x478>
				}//end case 1
			case 2: {
				if (!strcmp(recString,"ACKW.")){state=3;}
				else if (!strcmp(recString,"ACKGD")){state=4;}
				else if (!strcmp(recString,"ACKGT")){state=4;}
				else if (!strcmp(recString,"ACKGB")){state=4;}
    1478:	ce 01       	movw	r24, r28
    147a:	c3 96       	adiw	r24, 0x33	; 51
    147c:	22 e1       	ldi	r18, 0x12	; 18
    147e:	31 e0       	ldi	r19, 0x01	; 1
    1480:	b9 01       	movw	r22, r18
    1482:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <strcmp>
    1486:	00 97       	sbiw	r24, 0x00	; 0
    1488:	39 f4       	brne	.+14     	; 0x1498 <_Z8sendGAVRv+0x228>
    148a:	84 e0       	ldi	r24, 0x04	; 4
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	90 93 c3 01 	sts	0x01C3, r25
    1492:	80 93 c2 01 	sts	0x01C2, r24
				else if (!strcmp(recString,"ACKBAD")){state=6;}
				//send string case.
				else if (updatingGAVR && !strcmp(recString,sentString)){state=5;}
				else if (updatingGAVR && strcmp(recString,sentString)){state=7;}
				else{state=7;} //invalid ack
				break;
    1496:	28 c1       	rjmp	.+592    	; 0x16e8 <_Z8sendGAVRv+0x478>
			case 2: {
				if (!strcmp(recString,"ACKW.")){state=3;}
				else if (!strcmp(recString,"ACKGD")){state=4;}
				else if (!strcmp(recString,"ACKGT")){state=4;}
				else if (!strcmp(recString,"ACKGB")){state=4;}
				else if (!strcmp(recString,"ACKBAD")){state=6;}
    1498:	ce 01       	movw	r24, r28
    149a:	c3 96       	adiw	r24, 0x33	; 51
    149c:	28 e1       	ldi	r18, 0x18	; 24
    149e:	31 e0       	ldi	r19, 0x01	; 1
    14a0:	b9 01       	movw	r22, r18
    14a2:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <strcmp>
    14a6:	00 97       	sbiw	r24, 0x00	; 0
    14a8:	39 f4       	brne	.+14     	; 0x14b8 <_Z8sendGAVRv+0x248>
    14aa:	86 e0       	ldi	r24, 0x06	; 6
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	90 93 c3 01 	sts	0x01C3, r25
    14b2:	80 93 c2 01 	sts	0x01C2, r24
				//send string case.
				else if (updatingGAVR && !strcmp(recString,sentString)){state=5;}
				else if (updatingGAVR && strcmp(recString,sentString)){state=7;}
				else{state=7;} //invalid ack
				break;
    14b6:	18 c1       	rjmp	.+560    	; 0x16e8 <_Z8sendGAVRv+0x478>
				else if (!strcmp(recString,"ACKGD")){state=4;}
				else if (!strcmp(recString,"ACKGT")){state=4;}
				else if (!strcmp(recString,"ACKGB")){state=4;}
				else if (!strcmp(recString,"ACKBAD")){state=6;}
				//send string case.
				else if (updatingGAVR && !strcmp(recString,sentString)){state=5;}
    14b8:	80 91 b2 01 	lds	r24, 0x01B2
    14bc:	88 23       	and	r24, r24
    14be:	21 f4       	brne	.+8      	; 0x14c8 <_Z8sendGAVRv+0x258>
    14c0:	80 91 b1 01 	lds	r24, 0x01B1
    14c4:	88 23       	and	r24, r24
    14c6:	89 f0       	breq	.+34     	; 0x14ea <_Z8sendGAVRv+0x27a>
    14c8:	ce 01       	movw	r24, r28
    14ca:	c3 96       	adiw	r24, 0x33	; 51
    14cc:	9e 01       	movw	r18, r28
    14ce:	25 5f       	subi	r18, 0xF5	; 245
    14d0:	3f 4f       	sbci	r19, 0xFF	; 255
    14d2:	b9 01       	movw	r22, r18
    14d4:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <strcmp>
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	39 f4       	brne	.+14     	; 0x14ea <_Z8sendGAVRv+0x27a>
    14dc:	85 e0       	ldi	r24, 0x05	; 5
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	90 93 c3 01 	sts	0x01C3, r25
    14e4:	80 93 c2 01 	sts	0x01C2, r24
    14e8:	20 c0       	rjmp	.+64     	; 0x152a <_Z8sendGAVRv+0x2ba>
				else if (updatingGAVR && strcmp(recString,sentString)){state=7;}
    14ea:	80 91 b2 01 	lds	r24, 0x01B2
    14ee:	88 23       	and	r24, r24
    14f0:	21 f4       	brne	.+8      	; 0x14fa <_Z8sendGAVRv+0x28a>
    14f2:	80 91 b1 01 	lds	r24, 0x01B1
    14f6:	88 23       	and	r24, r24
    14f8:	89 f0       	breq	.+34     	; 0x151c <_Z8sendGAVRv+0x2ac>
    14fa:	ce 01       	movw	r24, r28
    14fc:	c3 96       	adiw	r24, 0x33	; 51
    14fe:	9e 01       	movw	r18, r28
    1500:	25 5f       	subi	r18, 0xF5	; 245
    1502:	3f 4f       	sbci	r19, 0xFF	; 255
    1504:	b9 01       	movw	r22, r18
    1506:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <strcmp>
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	39 f0       	breq	.+14     	; 0x151c <_Z8sendGAVRv+0x2ac>
    150e:	87 e0       	ldi	r24, 0x07	; 7
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	90 93 c3 01 	sts	0x01C3, r25
    1516:	80 93 c2 01 	sts	0x01C2, r24
    151a:	07 c0       	rjmp	.+14     	; 0x152a <_Z8sendGAVRv+0x2ba>
				else{state=7;} //invalid ack
    151c:	87 e0       	ldi	r24, 0x07	; 7
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	90 93 c3 01 	sts	0x01C3, r25
    1524:	80 93 c2 01 	sts	0x01C2, r24
				break;
    1528:	df c0       	rjmp	.+446    	; 0x16e8 <_Z8sendGAVRv+0x478>
    152a:	de c0       	rjmp	.+444    	; 0x16e8 <_Z8sendGAVRv+0x478>
				}//end case 2
			case 3:{
				if (flagUserDate&&!flagUserTime){
    152c:	80 91 b4 01 	lds	r24, 0x01B4
    1530:	88 23       	and	r24, r24
    1532:	49 f0       	breq	.+18     	; 0x1546 <_Z8sendGAVRv+0x2d6>
    1534:	80 91 b5 01 	lds	r24, 0x01B5
    1538:	88 23       	and	r24, r24
    153a:	29 f4       	brne	.+10     	; 0x1546 <_Z8sendGAVRv+0x2d6>
					PrintGAVR("SYNGD.");
    153c:	8f e1       	ldi	r24, 0x1F	; 31
    153e:	91 e0       	ldi	r25, 0x01	; 1
    1540:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
    1544:	19 c0       	rjmp	.+50     	; 0x1578 <_Z8sendGAVRv+0x308>
				} else if (!flagUserDate&&flagUserTime){
    1546:	80 91 b4 01 	lds	r24, 0x01B4
    154a:	88 23       	and	r24, r24
    154c:	49 f4       	brne	.+18     	; 0x1560 <_Z8sendGAVRv+0x2f0>
    154e:	80 91 b5 01 	lds	r24, 0x01B5
    1552:	88 23       	and	r24, r24
    1554:	29 f0       	breq	.+10     	; 0x1560 <_Z8sendGAVRv+0x2f0>
					PrintGAVR("SYNGT.");
    1556:	86 e2       	ldi	r24, 0x26	; 38
    1558:	91 e0       	ldi	r25, 0x01	; 1
    155a:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
    155e:	0c c0       	rjmp	.+24     	; 0x1578 <_Z8sendGAVRv+0x308>
				} else if (flagUserTime&&flagUserDate){
    1560:	80 91 b5 01 	lds	r24, 0x01B5
    1564:	88 23       	and	r24, r24
    1566:	41 f0       	breq	.+16     	; 0x1578 <_Z8sendGAVRv+0x308>
    1568:	80 91 b4 01 	lds	r24, 0x01B4
    156c:	88 23       	and	r24, r24
    156e:	21 f0       	breq	.+8      	; 0x1578 <_Z8sendGAVRv+0x308>
					PrintGAVR("SYNGB.");
    1570:	8d e2       	ldi	r24, 0x2D	; 45
    1572:	91 e0       	ldi	r25, 0x01	; 1
    1574:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
				} else;
				
				//If we are updating the gavr, send the time and date together regardless. preface with SYN
				if (updatingGAVR && !(flagUserDate || flagUserTime)){
    1578:	80 91 b2 01 	lds	r24, 0x01B2
    157c:	88 23       	and	r24, r24
    157e:	29 f4       	brne	.+10     	; 0x158a <_Z8sendGAVRv+0x31a>
    1580:	80 91 b1 01 	lds	r24, 0x01B1
    1584:	88 23       	and	r24, r24
    1586:	09 f4       	brne	.+2      	; 0x158a <_Z8sendGAVRv+0x31a>
    1588:	47 c0       	rjmp	.+142    	; 0x1618 <_Z8sendGAVRv+0x3a8>
    158a:	80 91 b4 01 	lds	r24, 0x01B4
    158e:	88 23       	and	r24, r24
    1590:	09 f0       	breq	.+2      	; 0x1594 <_Z8sendGAVRv+0x324>
    1592:	42 c0       	rjmp	.+132    	; 0x1618 <_Z8sendGAVRv+0x3a8>
    1594:	80 91 b5 01 	lds	r24, 0x01B5
    1598:	88 23       	and	r24, r24
    159a:	f1 f5       	brne	.+124    	; 0x1618 <_Z8sendGAVRv+0x3a8>
					strcpy(sentString,"SYN");
    159c:	9e 01       	movw	r18, r28
    159e:	25 5f       	subi	r18, 0xF5	; 245
    15a0:	3f 4f       	sbci	r19, 0xFF	; 255
    15a2:	83 e5       	ldi	r24, 0x53	; 83
    15a4:	99 e5       	ldi	r25, 0x59	; 89
    15a6:	ae e4       	ldi	r26, 0x4E	; 78
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	f9 01       	movw	r30, r18
    15ac:	80 83       	st	Z, r24
    15ae:	91 83       	std	Z+1, r25	; 0x01
    15b0:	a2 83       	std	Z+2, r26	; 0x02
    15b2:	b3 83       	std	Z+3, r27	; 0x03
					strcat(sentString,currentTime.getTime());
    15b4:	86 e8       	ldi	r24, 0x86	; 134
    15b6:	91 e0       	ldi	r25, 0x01	; 1
    15b8:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN6myTime7getTimeEv>
    15bc:	9c 01       	movw	r18, r24
    15be:	ce 01       	movw	r24, r28
    15c0:	0b 96       	adiw	r24, 0x0b	; 11
    15c2:	b9 01       	movw	r22, r18
    15c4:	0e 94 ee 14 	call	0x29dc	; 0x29dc <strcat>
					strcat(sentString,currentTime.getDate());
    15c8:	86 e8       	ldi	r24, 0x86	; 134
    15ca:	91 e0       	ldi	r25, 0x01	; 1
    15cc:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN6myDate7getDateEv>
    15d0:	9c 01       	movw	r18, r24
    15d2:	ce 01       	movw	r24, r28
    15d4:	0b 96       	adiw	r24, 0x0b	; 11
    15d6:	b9 01       	movw	r22, r18
    15d8:	0e 94 ee 14 	call	0x29dc	; 0x29dc <strcat>
					strcat(sentString,".\0");
    15dc:	ce 01       	movw	r24, r28
    15de:	0b 96       	adiw	r24, 0x0b	; 11
    15e0:	9c 01       	movw	r18, r24
    15e2:	f9 01       	movw	r30, r18
    15e4:	01 90       	ld	r0, Z+
    15e6:	00 20       	and	r0, r0
    15e8:	e9 f7       	brne	.-6      	; 0x15e4 <_Z8sendGAVRv+0x374>
    15ea:	cf 01       	movw	r24, r30
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	82 1b       	sub	r24, r18
    15f0:	93 0b       	sbc	r25, r19
    15f2:	9e 01       	movw	r18, r28
    15f4:	25 5f       	subi	r18, 0xF5	; 245
    15f6:	3f 4f       	sbci	r19, 0xFF	; 255
    15f8:	82 0f       	add	r24, r18
    15fa:	93 1f       	adc	r25, r19
    15fc:	2e e2       	ldi	r18, 0x2E	; 46
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	fc 01       	movw	r30, r24
    1602:	31 83       	std	Z+1, r19	; 0x01
    1604:	20 83       	st	Z, r18
					PrintGAVR("SYN");
    1606:	84 e3       	ldi	r24, 0x34	; 52
    1608:	91 e0       	ldi	r25, 0x01	; 1
    160a:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
					printTimeDate(fFalse,fTrue,fTrue);			//date is terminated by a . so don't need to send character
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	61 e0       	ldi	r22, 0x01	; 1
    1612:	41 e0       	ldi	r20, 0x01	; 1
    1614:	0e 94 a1 0b 	call	0x1742	; 0x1742 <_Z13printTimeDatehhh>
				}				
				for (int i=0; i<strLoc; i++){
    1618:	1f 82       	std	Y+7, r1	; 0x07
    161a:	1e 82       	std	Y+6, r1	; 0x06
    161c:	0e c0       	rjmp	.+28     	; 0x163a <_Z8sendGAVRv+0x3ca>
					recString[i]=NULL;
    161e:	9e 01       	movw	r18, r28
    1620:	2d 5c       	subi	r18, 0xCD	; 205
    1622:	3f 4f       	sbci	r19, 0xFF	; 255
    1624:	8e 81       	ldd	r24, Y+6	; 0x06
    1626:	9f 81       	ldd	r25, Y+7	; 0x07
    1628:	82 0f       	add	r24, r18
    162a:	93 1f       	adc	r25, r19
    162c:	fc 01       	movw	r30, r24
    162e:	10 82       	st	Z, r1
					strcat(sentString,currentTime.getDate());
					strcat(sentString,".\0");
					PrintGAVR("SYN");
					printTimeDate(fFalse,fTrue,fTrue);			//date is terminated by a . so don't need to send character
				}				
				for (int i=0; i<strLoc; i++){
    1630:	8e 81       	ldd	r24, Y+6	; 0x06
    1632:	9f 81       	ldd	r25, Y+7	; 0x07
    1634:	01 96       	adiw	r24, 0x01	; 1
    1636:	9f 83       	std	Y+7, r25	; 0x07
    1638:	8e 83       	std	Y+6, r24	; 0x06
    163a:	2e 81       	ldd	r18, Y+6	; 0x06
    163c:	3f 81       	ldd	r19, Y+7	; 0x07
    163e:	41 e0       	ldi	r20, 0x01	; 1
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	9a 81       	ldd	r25, Y+2	; 0x02
    1644:	28 17       	cp	r18, r24
    1646:	39 07       	cpc	r19, r25
    1648:	08 f0       	brcs	.+2      	; 0x164c <_Z8sendGAVRv+0x3dc>
    164a:	40 e0       	ldi	r20, 0x00	; 0
    164c:	44 23       	and	r20, r20
    164e:	39 f7       	brne	.-50     	; 0x161e <_Z8sendGAVRv+0x3ae>
					recString[i]=NULL;
				}
				noCarriage=fTrue;
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	8a 87       	std	Y+10, r24	; 0x0a
				strLoc=0;
    1654:	1a 82       	std	Y+2, r1	; 0x02
    1656:	19 82       	std	Y+1, r1	; 0x01
				state=1;
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	90 93 c3 01 	sts	0x01C3, r25
    1660:	80 93 c2 01 	sts	0x01C2, r24
				break;
    1664:	41 c0       	rjmp	.+130    	; 0x16e8 <_Z8sendGAVRv+0x478>
				}//end case 3
			case 4:{
				//jSuccessful communication with just flags
				PrintGAVR("SYNDONE.");	//end the communication
    1666:	88 e3       	ldi	r24, 0x38	; 56
    1668:	91 e0       	ldi	r25, 0x01	; 1
    166a:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
				state=5;
    166e:	85 e0       	ldi	r24, 0x05	; 5
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	90 93 c3 01 	sts	0x01C3, r25
    1676:	80 93 c2 01 	sts	0x01C2, r24
				break;				
    167a:	36 c0       	rjmp	.+108    	; 0x16e8 <_Z8sendGAVRv+0x478>
				}//end case 4	
			case 5:{
				//Successful communications overall
				flagSendingGAVR=fFalse;
    167c:	10 92 b3 01 	sts	0x01B3, r1
				flagWaitingToSendGAVR=fFalse;
    1680:	10 92 b7 01 	sts	0x01B7, r1
				flagTimeout=fFalse;
    1684:	1b 82       	std	Y+3, r1	; 0x03
				state=0;
    1686:	10 92 c3 01 	sts	0x01C3, r1
    168a:	10 92 c2 01 	sts	0x01C2, r1
				break;
    168e:	2c c0       	rjmp	.+88     	; 0x16e8 <_Z8sendGAVRv+0x478>
				}//end case 5
			case 6:{
				//ACKBAD. Check the date and time to see if its okay.
				BOOL dateOK = currentTime.checkValidity();
    1690:	86 e8       	ldi	r24, 0x86	; 134
    1692:	91 e0       	ldi	r25, 0x01	; 1
    1694:	0e 94 c1 06 	call	0xd82	; 0xd82 <_ZN6myTime13checkValidityEv>
    1698:	89 87       	std	Y+9, r24	; 0x09
				if (dateOK){state=7;}
    169a:	89 85       	ldd	r24, Y+9	; 0x09
    169c:	88 23       	and	r24, r24
    169e:	39 f0       	breq	.+14     	; 0x16ae <_Z8sendGAVRv+0x43e>
    16a0:	87 e0       	ldi	r24, 0x07	; 7
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	90 93 c3 01 	sts	0x01C3, r25
    16a8:	80 93 c2 01 	sts	0x01C2, r24
				else {state=0;flagSendingGAVR=fFalse; flagInvalidDateTime=fTrue;}
				break;
    16ac:	1d c0       	rjmp	.+58     	; 0x16e8 <_Z8sendGAVRv+0x478>
				}//end case 5
			case 6:{
				//ACKBAD. Check the date and time to see if its okay.
				BOOL dateOK = currentTime.checkValidity();
				if (dateOK){state=7;}
				else {state=0;flagSendingGAVR=fFalse; flagInvalidDateTime=fTrue;}
    16ae:	10 92 c3 01 	sts	0x01C3, r1
    16b2:	10 92 c2 01 	sts	0x01C2, r1
    16b6:	10 92 b3 01 	sts	0x01B3, r1
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	80 93 b6 01 	sts	0x01B6, r24
				break;
    16c0:	13 c0       	rjmp	.+38     	; 0x16e8 <_Z8sendGAVRv+0x478>
				}//end case 6
			case 7:{
				//Got the wrong ACK back, or invalid ACK. Wait for next cycle then resend. Keep all the flags the same
				flagWaitingToSendGAVR=fTrue;
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	80 93 b7 01 	sts	0x01B7, r24
				flagSendingGAVR=fFalse;
    16c8:	10 92 b3 01 	sts	0x01B3, r1
				state=0;
    16cc:	10 92 c3 01 	sts	0x01C3, r1
    16d0:	10 92 c2 01 	sts	0x01C2, r1
				break;
    16d4:	09 c0       	rjmp	.+18     	; 0x16e8 <_Z8sendGAVRv+0x478>
				}//end case 7
			default:{state=0; flagSendingGAVR=fFalse; noCarriage=fFalse; flagTimeout=fFalse;break;}
    16d6:	10 92 c3 01 	sts	0x01C3, r1
    16da:	10 92 c2 01 	sts	0x01C2, r1
    16de:	10 92 b3 01 	sts	0x01B3, r1
    16e2:	1a 86       	std	Y+10, r1	; 0x0a
    16e4:	1b 82       	std	Y+3, r1	; 0x03
    16e6:	00 00       	nop
	
	//Going to be a global
	BOOL flagTimeout=fFalse;
	
	//Transmission protocol
	while (flagSendingGAVR){
    16e8:	90 91 b3 01 	lds	r25, 0x01B3
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	99 23       	and	r25, r25
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <_Z8sendGAVRv+0x484>
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	88 23       	and	r24, r24
    16f6:	09 f0       	breq	.+2      	; 0x16fa <_Z8sendGAVRv+0x48a>
    16f8:	cc cd       	rjmp	.-1128   	; 0x1292 <_Z8sendGAVRv+0x22>
				break;
				}//end case 7
			default:{state=0; flagSendingGAVR=fFalse; noCarriage=fFalse; flagTimeout=fFalse;break;}
		}//end switch
	}//end while
	if (noCarriage || flagTimeout){
    16fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    16fc:	88 23       	and	r24, r24
    16fe:	19 f4       	brne	.+6      	; 0x1706 <_Z8sendGAVRv+0x496>
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	88 23       	and	r24, r24
    1704:	11 f0       	breq	.+4      	; 0x170a <_Z8sendGAVRv+0x49a>
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	01 c0       	rjmp	.+2      	; 0x170c <_Z8sendGAVRv+0x49c>
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	88 23       	and	r24, r24
    170e:	19 f0       	breq	.+6      	; 0x1716 <_Z8sendGAVRv+0x4a6>
		flagWaitingToSendGAVR=fTrue;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	80 93 b7 01 	sts	0x01B7, r24
	}
	//If we aren't waiting for the next round, don't reset the flags.
	if (!flagWaitingToSendGAVR){
    1716:	80 91 b7 01 	lds	r24, 0x01B7
    171a:	88 23       	and	r24, r24
    171c:	41 f4       	brne	.+16     	; 0x172e <_Z8sendGAVRv+0x4be>
		flagUserDate=fFalse;
    171e:	10 92 b4 01 	sts	0x01B4, r1
		flagUserTime=fFalse;
    1722:	10 92 b5 01 	sts	0x01B5, r1
		flagUpdateGAVRDate=fFalse;
    1726:	10 92 b2 01 	sts	0x01B2, r1
		flagUpdateGAVRTime=fFalse;		
    172a:	10 92 b1 01 	sts	0x01B1, r1
	}
	
}//end function 	
    172e:	c6 5a       	subi	r28, 0xA6	; 166
    1730:	df 4f       	sbci	r29, 0xFF	; 255
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	08 95       	ret

00001742 <_Z13printTimeDatehhh>:
	

/*************************************************************************************************************/

//To print to WAVR, cariable needs to be false. Print to Bone requires WAVRorBone to be true
void printTimeDate(BOOL WAVRorBone, BOOL pTime,BOOL pDate){
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	eb 97       	sbiw	r28, 0x3b	; 59
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	de bf       	out	0x3e, r29	; 62
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	cd bf       	out	0x3d, r28	; 61
    1756:	89 af       	sts	0x79, r24
    1758:	6a af       	sts	0x7a, r22
    175a:	4b af       	sts	0x7b, r20
	if (WAVRorBone){ //Printing to BeagleBone
    175c:	89 ad       	sts	0x69, r24
    175e:	88 23       	and	r24, r24
    1760:	49 f1       	breq	.+82     	; 0x17b4 <_Z13printTimeDatehhh+0x72>
		if (pTime){
    1762:	8a ad       	sts	0x6a, r24
    1764:	88 23       	and	r24, r24
    1766:	89 f0       	breq	.+34     	; 0x178a <_Z13printTimeDatehhh+0x48>
			char tempTime[11];
			strcpy(tempTime,currentTime.getTime());
    1768:	86 e8       	ldi	r24, 0x86	; 134
    176a:	91 e0       	ldi	r25, 0x01	; 1
    176c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN6myTime7getTimeEv>
    1770:	9c 01       	movw	r18, r24
    1772:	ce 01       	movw	r24, r28
    1774:	01 96       	adiw	r24, 0x01	; 1
    1776:	b9 01       	movw	r22, r18
    1778:	0e 94 02 15 	call	0x2a04	; 0x2a04 <strcpy>
			PrintBone(tempTime);
    177c:	ce 01       	movw	r24, r28
    177e:	01 96       	adiw	r24, 0x01	; 1
    1780:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
			PutUartChBone('/');
    1784:	8f e2       	ldi	r24, 0x2F	; 47
    1786:	0e 94 a2 08 	call	0x1144	; 0x1144 <_Z13PutUartChBonec>
		}
		if (pDate){
    178a:	8b ad       	sts	0x6b, r24
    178c:	88 23       	and	r24, r24
    178e:	d1 f1       	breq	.+116    	; 0x1804 <_Z13printTimeDatehhh+0xc2>
			char tempDate[17];
			strcpy(tempDate,currentTime.getDate());
    1790:	86 e8       	ldi	r24, 0x86	; 134
    1792:	91 e0       	ldi	r25, 0x01	; 1
    1794:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN6myDate7getDateEv>
    1798:	9c 01       	movw	r18, r24
    179a:	ce 01       	movw	r24, r28
    179c:	0c 96       	adiw	r24, 0x0c	; 12
    179e:	b9 01       	movw	r22, r18
    17a0:	0e 94 02 15 	call	0x2a04	; 0x2a04 <strcpy>
			PrintBone(tempDate);
    17a4:	ce 01       	movw	r24, r28
    17a6:	0c 96       	adiw	r24, 0x0c	; 12
    17a8:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
			PutUartChGAVR('.');
    17ac:	8e e2       	ldi	r24, 0x2E	; 46
    17ae:	0e 94 ed 08 	call	0x11da	; 0x11da <_Z13PutUartChGAVRc>
    17b2:	28 c0       	rjmp	.+80     	; 0x1804 <_Z13printTimeDatehhh+0xc2>
		}
	} else { //Printing to GAVR
		if (pTime){
    17b4:	8a ad       	sts	0x6a, r24
    17b6:	88 23       	and	r24, r24
    17b8:	89 f0       	breq	.+34     	; 0x17dc <_Z13printTimeDatehhh+0x9a>
			char tempTime[11];
			strcpy(tempTime,currentTime.getTime());
    17ba:	86 e8       	ldi	r24, 0x86	; 134
    17bc:	91 e0       	ldi	r25, 0x01	; 1
    17be:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN6myTime7getTimeEv>
    17c2:	9c 01       	movw	r18, r24
    17c4:	ce 01       	movw	r24, r28
    17c6:	4d 96       	adiw	r24, 0x1d	; 29
    17c8:	b9 01       	movw	r22, r18
    17ca:	0e 94 02 15 	call	0x2a04	; 0x2a04 <strcpy>
			PrintGAVR(tempTime);
    17ce:	ce 01       	movw	r24, r28
    17d0:	4d 96       	adiw	r24, 0x1d	; 29
    17d2:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
			PutUartChGAVR('/');
    17d6:	8f e2       	ldi	r24, 0x2F	; 47
    17d8:	0e 94 ed 08 	call	0x11da	; 0x11da <_Z13PutUartChGAVRc>
		}
		if (pDate){
    17dc:	8b ad       	sts	0x6b, r24
    17de:	88 23       	and	r24, r24
    17e0:	89 f0       	breq	.+34     	; 0x1804 <_Z13printTimeDatehhh+0xc2>
			char tempDate[17];
			strcpy(tempDate,currentTime.getDate());
    17e2:	86 e8       	ldi	r24, 0x86	; 134
    17e4:	91 e0       	ldi	r25, 0x01	; 1
    17e6:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN6myDate7getDateEv>
    17ea:	9c 01       	movw	r18, r24
    17ec:	ce 01       	movw	r24, r28
    17ee:	88 96       	adiw	r24, 0x28	; 40
    17f0:	b9 01       	movw	r22, r18
    17f2:	0e 94 02 15 	call	0x2a04	; 0x2a04 <strcpy>
			PrintGAVR(tempDate);
    17f6:	ce 01       	movw	r24, r28
    17f8:	88 96       	adiw	r24, 0x28	; 40
    17fa:	0e 94 0b 09 	call	0x1216	; 0x1216 <_Z9PrintGAVRPc>
			PutUartChGAVR('.');
    17fe:	8e e2       	ldi	r24, 0x2E	; 46
    1800:	0e 94 ed 08 	call	0x11da	; 0x11da <_Z13PutUartChGAVRc>
		}
	}
}
    1804:	eb 96       	adiw	r28, 0x3b	; 59
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	cd bf       	out	0x3d, r28	; 61
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	08 95       	ret

00001816 <__vector_4>:
/*==============================================================================================================*/
/****************************************************************************************************************/


/*--------------------------Interrupt Service Routines------------------------------------------------------------------------------------*/
ISR(PCINT0_vect){
    1816:	1f 92       	push	r1
    1818:	0f 92       	push	r0
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	0f 92       	push	r0
    181e:	11 24       	eor	r1, r1
    1820:	cf 93       	push	r28
    1822:	df 93       	push	r29
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
	
	
}	
    1828:	df 91       	pop	r29
    182a:	cf 91       	pop	r28
    182c:	0f 90       	pop	r0
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	0f 90       	pop	r0
    1832:	1f 90       	pop	r1
    1834:	18 95       	reti

00001836 <__vector_3>:


ISR(INT2_vect){	//about to get time, get things ready
    1836:	1f 92       	push	r1
    1838:	0f 92       	push	r0
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	0f 92       	push	r0
    183e:	11 24       	eor	r1, r1
    1840:	2f 93       	push	r18
    1842:	3f 93       	push	r19
    1844:	4f 93       	push	r20
    1846:	5f 93       	push	r21
    1848:	6f 93       	push	r22
    184a:	7f 93       	push	r23
    184c:	8f 93       	push	r24
    184e:	9f 93       	push	r25
    1850:	af 93       	push	r26
    1852:	bf 93       	push	r27
    1854:	ef 93       	push	r30
    1856:	ff 93       	push	r31
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
	if (!flagShutdown){		//If things are off, don't let noise do an interrupt. Shouldn't happen anyways.
    1860:	90 91 b9 01 	lds	r25, 0x01B9
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	99 23       	and	r25, r25
    1868:	09 f0       	breq	.+2      	; 0x186c <__vector_3+0x36>
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	88 23       	and	r24, r24
    186e:	c9 f0       	breq	.+50     	; 0x18a2 <__vector_3+0x6c>
		UCSR0B |= (1 << RXCIE0);
    1870:	81 ec       	ldi	r24, 0xC1	; 193
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	21 ec       	ldi	r18, 0xC1	; 193
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	f9 01       	movw	r30, r18
    187a:	20 81       	ld	r18, Z
    187c:	20 68       	ori	r18, 0x80	; 128
    187e:	fc 01       	movw	r30, r24
    1880:	20 83       	st	Z, r18
		flagGoToSleep=fFalse;	//no sleeping, wait for UART_RX
    1882:	10 92 ae 01 	sts	0x01AE, r1
		flagNormalMode=fFalse;
    1886:	10 92 b0 01 	sts	0x01B0, r1
		__killLevel1INT();
    188a:	8d e3       	ldi	r24, 0x3D	; 61
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	fc 01       	movw	r30, r24
    1890:	10 82       	st	Z, r1
    1892:	8b e6       	ldi	r24, 0x6B	; 107
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	fc 01       	movw	r30, r24
    1898:	10 82       	st	Z, r1
		//Acknowledge connection, disable INT2_vect
		PrintBone("ACKT");
    189a:	81 e4       	ldi	r24, 0x41	; 65
    189c:	91 e0       	ldi	r25, 0x01	; 1
    189e:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
	}	
}
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	ff 91       	pop	r31
    18a8:	ef 91       	pop	r30
    18aa:	bf 91       	pop	r27
    18ac:	af 91       	pop	r26
    18ae:	9f 91       	pop	r25
    18b0:	8f 91       	pop	r24
    18b2:	7f 91       	pop	r23
    18b4:	6f 91       	pop	r22
    18b6:	5f 91       	pop	r21
    18b8:	4f 91       	pop	r20
    18ba:	3f 91       	pop	r19
    18bc:	2f 91       	pop	r18
    18be:	0f 90       	pop	r0
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	0f 90       	pop	r0
    18c4:	1f 90       	pop	r1
    18c6:	18 95       	reti

000018c8 <__vector_11>:

ISR(TIMER2_OVF_vect){
    18c8:	1f 92       	push	r1
    18ca:	0f 92       	push	r0
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	0f 92       	push	r0
    18d0:	11 24       	eor	r1, r1
    18d2:	2f 93       	push	r18
    18d4:	3f 93       	push	r19
    18d6:	4f 93       	push	r20
    18d8:	5f 93       	push	r21
    18da:	6f 93       	push	r22
    18dc:	7f 93       	push	r23
    18de:	8f 93       	push	r24
    18e0:	9f 93       	push	r25
    18e2:	af 93       	push	r26
    18e4:	bf 93       	push	r27
    18e6:	ef 93       	push	r30
    18e8:	ff 93       	push	r31
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
	volatile static int timeOut = 0;
	volatile static int gavrSendTimeout=0;
	
	currentTime.addSeconds(1);
    18f2:	86 e8       	ldi	r24, 0x86	; 134
    18f4:	91 e0       	ldi	r25, 0x01	; 1
    18f6:	61 e0       	ldi	r22, 0x01	; 1
    18f8:	70 e0       	ldi	r23, 0x00	; 0
    18fa:	0e 94 77 06 	call	0xcee	; 0xcee <_ZN6myTime10addSecondsEi>
	
	//GAVR Transmission Timeout
	if (flagSendingGAVR && gavrSendTimeout <=3){gavrSendTimeout++;}
    18fe:	80 91 b3 01 	lds	r24, 0x01B3
    1902:	88 23       	and	r24, r24
    1904:	49 f0       	breq	.+18     	; 0x1918 <__vector_11+0x50>
    1906:	80 91 be 01 	lds	r24, 0x01BE
    190a:	90 91 bf 01 	lds	r25, 0x01BF
    190e:	84 30       	cpi	r24, 0x04	; 4
    1910:	91 05       	cpc	r25, r1
    1912:	14 f4       	brge	.+4      	; 0x1918 <__vector_11+0x50>
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	01 c0       	rjmp	.+2      	; 0x191a <__vector_11+0x52>
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	88 23       	and	r24, r24
    191c:	51 f0       	breq	.+20     	; 0x1932 <__vector_11+0x6a>
    191e:	80 91 be 01 	lds	r24, 0x01BE
    1922:	90 91 bf 01 	lds	r25, 0x01BF
    1926:	01 96       	adiw	r24, 0x01	; 1
    1928:	90 93 bf 01 	sts	0x01BF, r25
    192c:	80 93 be 01 	sts	0x01BE, r24
    1930:	34 c0       	rjmp	.+104    	; 0x199a <__vector_11+0xd2>
	else if (flagSendingGAVR && gavrSendTimeout > 3){flagSendingGAVR=fFalse; gavrSendTimeout=0;__enableLevel1INT();}
    1932:	80 91 b3 01 	lds	r24, 0x01B3
    1936:	88 23       	and	r24, r24
    1938:	49 f0       	breq	.+18     	; 0x194c <__vector_11+0x84>
    193a:	80 91 be 01 	lds	r24, 0x01BE
    193e:	90 91 bf 01 	lds	r25, 0x01BF
    1942:	84 30       	cpi	r24, 0x04	; 4
    1944:	91 05       	cpc	r25, r1
    1946:	14 f0       	brlt	.+4      	; 0x194c <__vector_11+0x84>
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	01 c0       	rjmp	.+2      	; 0x194e <__vector_11+0x86>
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	88 23       	and	r24, r24
    1950:	81 f0       	breq	.+32     	; 0x1972 <__vector_11+0xaa>
    1952:	10 92 b3 01 	sts	0x01B3, r1
    1956:	10 92 bf 01 	sts	0x01BF, r1
    195a:	10 92 be 01 	sts	0x01BE, r1
    195e:	8d e3       	ldi	r24, 0x3D	; 61
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	2d e3       	ldi	r18, 0x3D	; 61
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	f9 01       	movw	r30, r18
    1968:	20 81       	ld	r18, Z
    196a:	24 60       	ori	r18, 0x04	; 4
    196c:	fc 01       	movw	r30, r24
    196e:	20 83       	st	Z, r18
    1970:	14 c0       	rjmp	.+40     	; 0x199a <__vector_11+0xd2>
	else if (!flagSendingGAVR && gavrSendTimeout > 0){gavrSendTimeout=0;}
    1972:	80 91 b3 01 	lds	r24, 0x01B3
    1976:	88 23       	and	r24, r24
    1978:	49 f4       	brne	.+18     	; 0x198c <__vector_11+0xc4>
    197a:	80 91 be 01 	lds	r24, 0x01BE
    197e:	90 91 bf 01 	lds	r25, 0x01BF
    1982:	18 16       	cp	r1, r24
    1984:	19 06       	cpc	r1, r25
    1986:	14 f4       	brge	.+4      	; 0x198c <__vector_11+0xc4>
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	01 c0       	rjmp	.+2      	; 0x198e <__vector_11+0xc6>
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	88 23       	and	r24, r24
    1990:	21 f0       	breq	.+8      	; 0x199a <__vector_11+0xd2>
    1992:	10 92 bf 01 	sts	0x01BF, r1
    1996:	10 92 be 01 	sts	0x01BE, r1
	else if (flagReceivingBone && boneReceiveTimeout > 3){flagReceivingBone=fFalse; boneReceiveTimeout=0;__enableLevel1INT();}
	else if (!flagReceivingBone && boneRecieveTimeout > 0){boneReceiveTimeout=0;}
	else;
	*/
	
	if ((flagUARTbone == fTrue || flagGoToSleep == fFalse) && !flagNewShutdown && !restart){ //if waiting for a character in Receive0() or in main program without sleep
    199a:	80 91 af 01 	lds	r24, 0x01AF
    199e:	81 30       	cpi	r24, 0x01	; 1
    19a0:	21 f0       	breq	.+8      	; 0x19aa <__vector_11+0xe2>
    19a2:	80 91 ae 01 	lds	r24, 0x01AE
    19a6:	88 23       	and	r24, r24
    19a8:	51 f4       	brne	.+20     	; 0x19be <__vector_11+0xf6>
    19aa:	80 91 b8 01 	lds	r24, 0x01B8
    19ae:	88 23       	and	r24, r24
    19b0:	31 f4       	brne	.+12     	; 0x19be <__vector_11+0xf6>
    19b2:	80 91 bc 01 	lds	r24, 0x01BC
    19b6:	88 23       	and	r24, r24
    19b8:	11 f4       	brne	.+4      	; 0x19be <__vector_11+0xf6>
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	01 c0       	rjmp	.+2      	; 0x19c0 <__vector_11+0xf8>
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	88 23       	and	r24, r24
    19c2:	51 f1       	breq	.+84     	; 0x1a18 <__vector_11+0x150>
		timeOut++;
    19c4:	80 91 c0 01 	lds	r24, 0x01C0
    19c8:	90 91 c1 01 	lds	r25, 0x01C1
    19cc:	01 96       	adiw	r24, 0x01	; 1
    19ce:	90 93 c1 01 	sts	0x01C1, r25
    19d2:	80 93 c0 01 	sts	0x01C0, r24
		if (timeOut >= 6){
    19d6:	80 91 c0 01 	lds	r24, 0x01C0
    19da:	90 91 c1 01 	lds	r25, 0x01C1
    19de:	21 e0       	ldi	r18, 0x01	; 1
    19e0:	86 30       	cpi	r24, 0x06	; 6
    19e2:	91 05       	cpc	r25, r1
    19e4:	0c f4       	brge	.+2      	; 0x19e8 <__vector_11+0x120>
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	22 23       	and	r18, r18
    19ea:	29 f1       	breq	.+74     	; 0x1a36 <__vector_11+0x16e>
			__enableLevel1INT();
    19ec:	8d e3       	ldi	r24, 0x3D	; 61
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	2d e3       	ldi	r18, 0x3D	; 61
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	f9 01       	movw	r30, r18
    19f6:	20 81       	ld	r18, Z
    19f8:	24 60       	ori	r18, 0x04	; 4
    19fa:	fc 01       	movw	r30, r24
    19fc:	20 83       	st	Z, r18
			flagUARTbone = fFalse;
    19fe:	10 92 af 01 	sts	0x01AF, r1
			flagGoToSleep = fTrue;
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	80 93 ae 01 	sts	0x01AE, r24
			flagNormalMode=fTrue;
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	80 93 b0 01 	sts	0x01B0, r24
			timeOut = 0;
    1a0e:	10 92 c1 01 	sts	0x01C1, r1
    1a12:	10 92 c0 01 	sts	0x01C0, r1
    1a16:	0f c0       	rjmp	.+30     	; 0x1a36 <__vector_11+0x16e>
		}
	} else if (timeOut > 0){
    1a18:	80 91 c0 01 	lds	r24, 0x01C0
    1a1c:	90 91 c1 01 	lds	r25, 0x01C1
    1a20:	21 e0       	ldi	r18, 0x01	; 1
    1a22:	18 16       	cp	r1, r24
    1a24:	19 06       	cpc	r1, r25
    1a26:	0c f0       	brlt	.+2      	; 0x1a2a <__vector_11+0x162>
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	22 23       	and	r18, r18
    1a2c:	21 f0       	breq	.+8      	; 0x1a36 <__vector_11+0x16e>
		timeOut = 0;
    1a2e:	10 92 c1 01 	sts	0x01C1, r1
    1a32:	10 92 c0 01 	sts	0x01C0, r1
	} else;

}
    1a36:	df 91       	pop	r29
    1a38:	cf 91       	pop	r28
    1a3a:	ff 91       	pop	r31
    1a3c:	ef 91       	pop	r30
    1a3e:	bf 91       	pop	r27
    1a40:	af 91       	pop	r26
    1a42:	9f 91       	pop	r25
    1a44:	8f 91       	pop	r24
    1a46:	7f 91       	pop	r23
    1a48:	6f 91       	pop	r22
    1a4a:	5f 91       	pop	r21
    1a4c:	4f 91       	pop	r20
    1a4e:	3f 91       	pop	r19
    1a50:	2f 91       	pop	r18
    1a52:	0f 90       	pop	r0
    1a54:	0f be       	out	0x3f, r0	; 63
    1a56:	0f 90       	pop	r0
    1a58:	1f 90       	pop	r1
    1a5a:	18 95       	reti

00001a5c <__vector_20>:

ISR(USART0_RX_vect){
    1a5c:	1f 92       	push	r1
    1a5e:	0f 92       	push	r0
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	0f 92       	push	r0
    1a64:	11 24       	eor	r1, r1
    1a66:	2f 93       	push	r18
    1a68:	3f 93       	push	r19
    1a6a:	8f 93       	push	r24
    1a6c:	9f 93       	push	r25
    1a6e:	ef 93       	push	r30
    1a70:	ff 93       	push	r31
    1a72:	cf 93       	push	r28
    1a74:	df 93       	push	r29
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
	UCSR0B &= ~(1 << RXCIE0);
    1a7a:	81 ec       	ldi	r24, 0xC1	; 193
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	21 ec       	ldi	r18, 0xC1	; 193
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	f9 01       	movw	r30, r18
    1a84:	20 81       	ld	r18, Z
    1a86:	2f 77       	andi	r18, 0x7F	; 127
    1a88:	fc 01       	movw	r30, r24
    1a8a:	20 83       	st	Z, r18
	__killLevel1INT();
    1a8c:	8d e3       	ldi	r24, 0x3D	; 61
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	fc 01       	movw	r30, r24
    1a92:	10 82       	st	Z, r1
    1a94:	8b e6       	ldi	r24, 0x6B	; 107
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	fc 01       	movw	r30, r24
    1a9a:	10 82       	st	Z, r1
	flagUARTbone=fTrue;
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	80 93 af 01 	sts	0x01AF, r24
	flagNormalMode=fFalse;
    1aa2:	10 92 b0 01 	sts	0x01B0, r1
}
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	ff 91       	pop	r31
    1aac:	ef 91       	pop	r30
    1aae:	9f 91       	pop	r25
    1ab0:	8f 91       	pop	r24
    1ab2:	3f 91       	pop	r19
    1ab4:	2f 91       	pop	r18
    1ab6:	0f 90       	pop	r0
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	0f 90       	pop	r0
    1abc:	1f 90       	pop	r1
    1abe:	18 95       	reti

00001ac0 <main>:

/*--------------------------END-Interrupt Service Routines--------------------------------------------------------------------------------*/
/*--------------------------START-Main Program--------------------------------------------------------------------------------------------*/

int main(void)
{
    1ac0:	cf 93       	push	r28
    1ac2:	df 93       	push	r29
    1ac4:	00 d0       	rcall	.+0      	; 0x1ac6 <main+0x6>
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
	//Setup
	DeviceInit();
    1aca:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <_Z10DeviceInitv>
	AppInit(MYUBRR);
    1ace:	81 e8       	ldi	r24, 0x81	; 129
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <_Z7AppInitj>
	EnableRTCTimer();
    1ad6:	0e 94 1c 10 	call	0x2038	; 0x2038 <_Z14EnableRTCTimerv>
	getDateTime_eeprom(fTrue,fTrue);
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	61 e0       	ldi	r22, 0x01	; 1
    1ade:	0e 94 8e 07 	call	0xf1c	; 0xf1c <_Z18getDateTime_eepromhh>
	sei();
    1ae2:	78 94       	sei
	//Prep/make sure power/temp is good
	GetTemp();
    1ae4:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <_Z7GetTempv>
	//flagGoodTemp=fTrue;
	TakeADC();
    1ae8:	0e 94 41 13 	call	0x2682	; 0x2682 <_Z7TakeADCv>
	if (flagGoodVolts && flagGoodTemp){__powPeriph();flagFreshStart=fTrue;}
    1aec:	80 91 bb 01 	lds	r24, 0x01BB
    1af0:	88 23       	and	r24, r24
    1af2:	31 f0       	breq	.+12     	; 0x1b00 <main+0x40>
    1af4:	80 91 ba 01 	lds	r24, 0x01BA
    1af8:	88 23       	and	r24, r24
    1afa:	11 f0       	breq	.+4      	; 0x1b00 <main+0x40>
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	01 c0       	rjmp	.+2      	; 0x1b02 <main+0x42>
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	88 23       	and	r24, r24
    1b04:	b1 f0       	breq	.+44     	; 0x1b32 <main+0x72>
    1b06:	82 e2       	ldi	r24, 0x22	; 34
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	22 e2       	ldi	r18, 0x22	; 34
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	f9 01       	movw	r30, r18
    1b10:	20 81       	ld	r18, Z
    1b12:	20 6e       	ori	r18, 0xE0	; 224
    1b14:	fc 01       	movw	r30, r24
    1b16:	20 83       	st	Z, r18
    1b18:	85 e2       	ldi	r24, 0x25	; 37
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	25 e2       	ldi	r18, 0x25	; 37
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	f9 01       	movw	r30, r18
    1b22:	20 81       	ld	r18, Z
    1b24:	21 60       	ori	r18, 0x01	; 1
    1b26:	fc 01       	movw	r30, r24
    1b28:	20 83       	st	Z, r18
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	80 93 bd 01 	sts	0x01BD, r24
    1b30:	07 c0       	rjmp	.+14     	; 0x1b40 <main+0x80>
	else {flagNormalMode=fTrue;flagFreshStart=fFalse;}
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	80 93 b0 01 	sts	0x01B0, r24
    1b38:	10 92 bd 01 	sts	0x01BD, r1
    1b3c:	01 c0       	rjmp	.+2      	; 0x1b40 <main+0x80>
		
	//main programming loop
	while(fTrue)
    1b3e:	00 00       	nop
	{				
		//If receiving UART string, go get rest of it.
		if (flagUARTbone){
    1b40:	90 91 af 01 	lds	r25, 0x01AF
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	99 23       	and	r25, r25
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <main+0x8c>
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	88 23       	and	r24, r24
    1b4e:	99 f0       	breq	.+38     	; 0x1b76 <main+0xb6>
				ReceiveBone();
    1b50:	0e 94 c3 10 	call	0x2186	; 0x2186 <_Z11ReceiveBonev>
			flagUARTbone = fFalse; 
    1b54:	10 92 af 01 	sts	0x01AF, r1
			//PCIMSK |= (1 << PCINT0);
			__enableLevel1INT();
    1b58:	8d e3       	ldi	r24, 0x3D	; 61
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	2d e3       	ldi	r18, 0x3D	; 61
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	f9 01       	movw	r30, r18
    1b62:	20 81       	ld	r18, Z
    1b64:	24 60       	ori	r18, 0x04	; 4
    1b66:	fc 01       	movw	r30, r24
    1b68:	20 83       	st	Z, r18
			flagGoToSleep = fTrue;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	80 93 ae 01 	sts	0x01AE, r24
			flagNormalMode=fTrue;
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	80 93 b0 01 	sts	0x01B0, r24
		}
	
		if (flagUpdateGAVRTime || flagUpdateGAVRDate || flagUserDate || flagUserTime){
    1b76:	80 91 b1 01 	lds	r24, 0x01B1
    1b7a:	88 23       	and	r24, r24
    1b7c:	61 f4       	brne	.+24     	; 0x1b96 <main+0xd6>
    1b7e:	80 91 b2 01 	lds	r24, 0x01B2
    1b82:	88 23       	and	r24, r24
    1b84:	41 f4       	brne	.+16     	; 0x1b96 <main+0xd6>
    1b86:	80 91 b4 01 	lds	r24, 0x01B4
    1b8a:	88 23       	and	r24, r24
    1b8c:	21 f4       	brne	.+8      	; 0x1b96 <main+0xd6>
    1b8e:	80 91 b5 01 	lds	r24, 0x01B5
    1b92:	88 23       	and	r24, r24
    1b94:	59 f0       	breq	.+22     	; 0x1bac <main+0xec>
			sendGAVR();
    1b96:	0e 94 38 09 	call	0x1270	; 0x1270 <_Z8sendGAVRv>
			__enableLevel1INT();
    1b9a:	8d e3       	ldi	r24, 0x3D	; 61
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	2d e3       	ldi	r18, 0x3D	; 61
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	f9 01       	movw	r30, r18
    1ba4:	20 81       	ld	r18, Z
    1ba6:	24 60       	ori	r18, 0x04	; 4
    1ba8:	fc 01       	movw	r30, r24
    1baa:	20 83       	st	Z, r18
		}

		//When to save to EEPROM. Saves time on lower half of the hour, saves data and time on lower half-hour of midday.
		if (flagNormalMode){
    1bac:	90 91 b0 01 	lds	r25, 0x01B0
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	99 23       	and	r25, r25
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <main+0xf8>
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	88 23       	and	r24, r24
    1bba:	49 f1       	breq	.+82     	; 0x1c0e <main+0x14e>
			if (currentTime.getMinutes()%30 == 0){
    1bbc:	86 e8       	ldi	r24, 0x86	; 134
    1bbe:	91 e0       	ldi	r25, 0x01	; 1
    1bc0:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6myTime10getMinutesEv>
    1bc4:	9e e1       	ldi	r25, 0x1E	; 30
    1bc6:	69 2f       	mov	r22, r25
    1bc8:	0e 94 97 14 	call	0x292e	; 0x292e <__udivmodqi4>
    1bcc:	89 2f       	mov	r24, r25
    1bce:	98 2f       	mov	r25, r24
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	99 23       	and	r25, r25
    1bd4:	09 f0       	breq	.+2      	; 0x1bd8 <main+0x118>
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	88 23       	and	r24, r24
    1bda:	c9 f0       	breq	.+50     	; 0x1c0e <main+0x14e>
				if (currentTime.getHours()%12 == 0){
    1bdc:	86 e8       	ldi	r24, 0x86	; 134
    1bde:	91 e0       	ldi	r25, 0x01	; 1
    1be0:	0e 94 bb 04 	call	0x976	; 0x976 <_ZN6myTime8getHoursEv>
    1be4:	9c e0       	ldi	r25, 0x0C	; 12
    1be6:	69 2f       	mov	r22, r25
    1be8:	0e 94 97 14 	call	0x292e	; 0x292e <__udivmodqi4>
    1bec:	89 2f       	mov	r24, r25
    1bee:	98 2f       	mov	r25, r24
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	99 23       	and	r25, r25
    1bf4:	09 f0       	breq	.+2      	; 0x1bf8 <main+0x138>
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	88 23       	and	r24, r24
    1bfa:	29 f0       	breq	.+10     	; 0x1c06 <main+0x146>
					saveDateTime_eeprom(fTrue,fTrue);
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	61 e0       	ldi	r22, 0x01	; 1
    1c00:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
    1c04:	04 c0       	rjmp	.+8      	; 0x1c0e <main+0x14e>
				} else {
					saveDateTime_eeprom(fTrue,fFalse);
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	60 e0       	ldi	r22, 0x00	; 0
    1c0a:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
				}	
			}						
		}
		
		//Take ADC reading to check battery level, temp to check board temperature.
		if (flagNormalMode){
    1c0e:	90 91 b0 01 	lds	r25, 0x01B0
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	99 23       	and	r25, r25
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <main+0x15a>
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	88 23       	and	r24, r24
    1c1c:	09 f4       	brne	.+2      	; 0x1c20 <main+0x160>
    1c1e:	3f c0       	rjmp	.+126    	; 0x1c9e <main+0x1de>
			TakeADC();
    1c20:	0e 94 41 13 	call	0x2682	; 0x2682 <_Z7TakeADCv>
			GetTemp();
    1c24:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <_Z7GetTempv>
			//If both are good & shutodwn is low, keep it low. If shutdown is high, pull low and enable restart
			if (flagGoodVolts && flagGoodTemp){
    1c28:	80 91 bb 01 	lds	r24, 0x01BB
    1c2c:	88 23       	and	r24, r24
    1c2e:	31 f0       	breq	.+12     	; 0x1c3c <main+0x17c>
    1c30:	80 91 ba 01 	lds	r24, 0x01BA
    1c34:	88 23       	and	r24, r24
    1c36:	11 f0       	breq	.+4      	; 0x1c3c <main+0x17c>
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	01 c0       	rjmp	.+2      	; 0x1c3e <main+0x17e>
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	88 23       	and	r24, r24
    1c40:	01 f1       	breq	.+64     	; 0x1c82 <main+0x1c2>
				__powPeriph();
    1c42:	82 e2       	ldi	r24, 0x22	; 34
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	22 e2       	ldi	r18, 0x22	; 34
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	f9 01       	movw	r30, r18
    1c4c:	20 81       	ld	r18, Z
    1c4e:	20 6e       	ori	r18, 0xE0	; 224
    1c50:	fc 01       	movw	r30, r24
    1c52:	20 83       	st	Z, r18
    1c54:	85 e2       	ldi	r24, 0x25	; 37
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	25 e2       	ldi	r18, 0x25	; 37
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	f9 01       	movw	r30, r18
    1c5e:	20 81       	ld	r18, Z
    1c60:	21 60       	ori	r18, 0x01	; 1
    1c62:	fc 01       	movw	r30, r24
    1c64:	20 83       	st	Z, r18
				if( flagShutdown == fTrue){restart = fTrue;}
    1c66:	90 91 b9 01 	lds	r25, 0x01B9
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	91 30       	cpi	r25, 0x01	; 1
    1c6e:	09 f0       	breq	.+2      	; 0x1c72 <main+0x1b2>
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	88 23       	and	r24, r24
    1c74:	19 f0       	breq	.+6      	; 0x1c7c <main+0x1bc>
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	80 93 bc 01 	sts	0x01BC, r24
				flagShutdown = fFalse;
    1c7c:	10 92 b9 01 	sts	0x01B9, r1
    1c80:	0e c0       	rjmp	.+28     	; 0x1c9e <main+0x1de>
			//If one is bad and shutdown is low, pull high as well as pull new shutdown high to indicate imminent power kill
			} else {
				if (flagShutdown == fFalse){
    1c82:	90 91 b9 01 	lds	r25, 0x01B9
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	99 23       	and	r25, r25
    1c8a:	09 f0       	breq	.+2      	; 0x1c8e <main+0x1ce>
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	88 23       	and	r24, r24
    1c90:	19 f0       	breq	.+6      	; 0x1c98 <main+0x1d8>
					flagNewShutdown = fTrue;
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	80 93 b8 01 	sts	0x01B8, r24
				}
				flagShutdown = fTrue;
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	80 93 b9 01 	sts	0x01B9, r24
			}
		}			
		
		//About to shutdown, save EEPROM
		if (flagNewShutdown){
    1c9e:	90 91 b8 01 	lds	r25, 0x01B8
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	99 23       	and	r25, r25
    1ca6:	09 f4       	brne	.+2      	; 0x1caa <main+0x1ea>
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	88 23       	and	r24, r24
    1cac:	09 f4       	brne	.+2      	; 0x1cb0 <main+0x1f0>
    1cae:	63 c0       	rjmp	.+198    	; 0x1d76 <main+0x2b6>
			//Make sure nothing messes with the routine that we care about
			EIMSK = 0;
    1cb0:	8d e3       	ldi	r24, 0x3D	; 61
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	10 82       	st	Z, r1
			flagGoToSleep = fTrue;
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	80 93 ae 01 	sts	0x01AE, r24
			flagUARTbone = fFalse;
    1cbe:	10 92 af 01 	sts	0x01AF, r1
			saveDateTime_eeprom(fTrue,fTrue);
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	61 e0       	ldi	r22, 0x01	; 1
    1cc6:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
			
			//Alert BeagleBone and Graphics AVR that powerdown is imminent=> raise SHUTDOWN PINS for 3 clk cycles
			prtBBleds |= (1 << bnBBint);
    1cca:	82 e2       	ldi	r24, 0x22	; 34
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	22 e2       	ldi	r18, 0x22	; 34
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	f9 01       	movw	r30, r18
    1cd4:	20 81       	ld	r18, Z
    1cd6:	22 60       	ori	r18, 0x02	; 2
    1cd8:	fc 01       	movw	r30, r24
    1cda:	20 83       	st	Z, r18
			prtGAVRleds |= (1 << bnGAVRint);
    1cdc:	82 e2       	ldi	r24, 0x22	; 34
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	22 e2       	ldi	r18, 0x22	; 34
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	f9 01       	movw	r30, r18
    1ce6:	20 81       	ld	r18, Z
    1ce8:	28 60       	ori	r18, 0x08	; 8
    1cea:	fc 01       	movw	r30, r24
    1cec:	20 83       	st	Z, r18
			if (!flagGoodTemp){
    1cee:	90 91 ba 01 	lds	r25, 0x01BA
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	99 23       	and	r25, r25
    1cf6:	09 f0       	breq	.+2      	; 0x1cfa <main+0x23a>
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	88 23       	and	r24, r24
    1cfc:	91 f0       	breq	.+36     	; 0x1d22 <main+0x262>
				prtBBleds |= (1 << bnBBtemp);
    1cfe:	82 e2       	ldi	r24, 0x22	; 34
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	22 e2       	ldi	r18, 0x22	; 34
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	f9 01       	movw	r30, r18
    1d08:	20 81       	ld	r18, Z
    1d0a:	24 60       	ori	r18, 0x04	; 4
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	20 83       	st	Z, r18
				prtGAVRleds |= (1 << bnGAVRtemp);
    1d10:	82 e2       	ldi	r24, 0x22	; 34
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	22 e2       	ldi	r18, 0x22	; 34
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	f9 01       	movw	r30, r18
    1d1a:	20 81       	ld	r18, Z
    1d1c:	20 61       	ori	r18, 0x10	; 16
    1d1e:	fc 01       	movw	r30, r24
    1d20:	20 83       	st	Z, r18
			}
			
			//Five seconds for processing to finish on other chips
			Wait_sec(6);	
    1d22:	86 e0       	ldi	r24, 0x06	; 6
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	0e 94 8b 10 	call	0x2116	; 0x2116 <_Z8Wait_seci>
			
			prtBBleds &= ~((1 << bnBBint)|(1 << bnBBtemp));
    1d2a:	82 e2       	ldi	r24, 0x22	; 34
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	22 e2       	ldi	r18, 0x22	; 34
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	f9 01       	movw	r30, r18
    1d34:	20 81       	ld	r18, Z
    1d36:	29 7f       	andi	r18, 0xF9	; 249
    1d38:	fc 01       	movw	r30, r24
    1d3a:	20 83       	st	Z, r18
			prtGAVRleds &= ~((1 << bnGAVRint)|(1 << bnGAVRtemp));
    1d3c:	82 e2       	ldi	r24, 0x22	; 34
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	22 e2       	ldi	r18, 0x22	; 34
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	f9 01       	movw	r30, r18
    1d46:	20 81       	ld	r18, Z
    1d48:	27 7e       	andi	r18, 0xE7	; 231
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	20 83       	st	Z, r18
			
			//Kill power
			__killPeriphPow();
    1d4e:	82 e2       	ldi	r24, 0x22	; 34
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	22 e2       	ldi	r18, 0x22	; 34
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	f9 01       	movw	r30, r18
    1d58:	20 81       	ld	r18, Z
    1d5a:	2f 71       	andi	r18, 0x1F	; 31
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	20 83       	st	Z, r18
    1d60:	85 e2       	ldi	r24, 0x25	; 37
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	25 e2       	ldi	r18, 0x25	; 37
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	f9 01       	movw	r30, r18
    1d6a:	20 81       	ld	r18, Z
    1d6c:	2e 7f       	andi	r18, 0xFE	; 254
    1d6e:	fc 01       	movw	r30, r24
    1d70:	20 83       	st	Z, r18
			flagNewShutdown = fFalse;
    1d72:	10 92 b8 01 	sts	0x01B8, r1
		}
		
		//If Restart, broadcast date and time to BeagleBone and other AVR
		if (restart){
    1d76:	90 91 bc 01 	lds	r25, 0x01BC
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	99 23       	and	r25, r25
    1d7e:	09 f4       	brne	.+2      	; 0x1d82 <main+0x2c2>
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	88 23       	and	r24, r24
    1d84:	d9 f1       	breq	.+118    	; 0x1dfc <main+0x33c>
			__enableLevel1INT();	//enable BONE interrupt. Will come out with newest time. Give it 10 seconds to kill
    1d86:	8d e3       	ldi	r24, 0x3D	; 61
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	2d e3       	ldi	r18, 0x3D	; 61
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	f9 01       	movw	r30, r18
    1d90:	20 81       	ld	r18, Z
    1d92:	24 60       	ori	r18, 0x04	; 4
    1d94:	fc 01       	movw	r30, r24
    1d96:	20 83       	st	Z, r18
			__powPeriph();
    1d98:	82 e2       	ldi	r24, 0x22	; 34
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	22 e2       	ldi	r18, 0x22	; 34
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	f9 01       	movw	r30, r18
    1da2:	20 81       	ld	r18, Z
    1da4:	20 6e       	ori	r18, 0xE0	; 224
    1da6:	fc 01       	movw	r30, r24
    1da8:	20 83       	st	Z, r18
    1daa:	85 e2       	ldi	r24, 0x25	; 37
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	25 e2       	ldi	r18, 0x25	; 37
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	f9 01       	movw	r30, r18
    1db4:	20 81       	ld	r18, Z
    1db6:	21 60       	ori	r18, 0x01	; 1
    1db8:	fc 01       	movw	r30, r24
    1dba:	20 83       	st	Z, r18
			//Check to see if pins are ready. Use timeout of 10 seconds for pins to come high.
			int waitTime = 0;
    1dbc:	1a 82       	std	Y+2, r1	; 0x02
    1dbe:	19 82       	std	Y+1, r1	; 0x01
			while (waitTime < 3 && restart){waitTime++; Wait_sec(1);}
    1dc0:	09 c0       	rjmp	.+18     	; 0x1dd4 <main+0x314>
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc6:	01 96       	adiw	r24, 0x01	; 1
    1dc8:	9a 83       	std	Y+2, r25	; 0x02
    1dca:	89 83       	std	Y+1, r24	; 0x01
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	0e 94 8b 10 	call	0x2116	; 0x2116 <_Z8Wait_seci>
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd8:	83 30       	cpi	r24, 0x03	; 3
    1dda:	91 05       	cpc	r25, r1
    1ddc:	34 f4       	brge	.+12     	; 0x1dea <main+0x32a>
    1dde:	80 91 bc 01 	lds	r24, 0x01BC
    1de2:	88 23       	and	r24, r24
    1de4:	11 f0       	breq	.+4      	; 0x1dea <main+0x32a>
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	01 c0       	rjmp	.+2      	; 0x1dec <main+0x32c>
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	88 23       	and	r24, r24
    1dee:	49 f7       	brne	.-46     	; 0x1dc2 <main+0x302>
			flagUpdateGAVRDate=fTrue;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	80 93 b2 01 	sts	0x01B2, r24
			flagUpdateGAVRTime=fTrue;
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	80 93 b1 01 	sts	0x01B1, r24
			//get an updated date and time from the BeagleBone. Always update GAVR.			
		}		
		
			
		//If it's time to go to sleep, go to sleep. INT0 or TIM2_overflow will wake it up.
		if (flagGoToSleep){GoToSleep(flagShutdown);}
    1dfc:	90 91 ae 01 	lds	r25, 0x01AE
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	99 23       	and	r25, r25
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <main+0x348>
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	88 23       	and	r24, r24
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <main+0x34e>
    1e0c:	98 ce       	rjmp	.-720    	; 0x1b3e <main+0x7e>
    1e0e:	80 91 b9 01 	lds	r24, 0x01B9
    1e12:	0e 94 c4 12 	call	0x2588	; 0x2588 <_Z9GoToSleeph>
	TakeADC();
	if (flagGoodVolts && flagGoodTemp){__powPeriph();flagFreshStart=fTrue;}
	else {flagNormalMode=fTrue;flagFreshStart=fFalse;}
		
	//main programming loop
	while(fTrue)
    1e16:	93 ce       	rjmp	.-730    	; 0x1b3e <main+0x7e>

00001e18 <_Z10DeviceInitv>:

/*--------------------------END-Main Program-------------------------------------------------------------------------------------*/
/*--------------------------START-Public Funtions--------------------------------------------------------------------------------*/

/*************************************************************************************************************/
void DeviceInit(){
    1e18:	cf 93       	push	r28
    1e1a:	df 93       	push	r29
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
	//Set all ports to input with no pull
	DDRA = 0;
    1e20:	81 e2       	ldi	r24, 0x21	; 33
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	fc 01       	movw	r30, r24
    1e26:	10 82       	st	Z, r1
	DDRB = 0;
    1e28:	84 e2       	ldi	r24, 0x24	; 36
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	10 82       	st	Z, r1
	DDRC = 0;
    1e30:	87 e2       	ldi	r24, 0x27	; 39
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	fc 01       	movw	r30, r24
    1e36:	10 82       	st	Z, r1
	DDRD = 0;
    1e38:	8a e2       	ldi	r24, 0x2A	; 42
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	10 82       	st	Z, r1
	
	PORTA = 0;
    1e40:	82 e2       	ldi	r24, 0x22	; 34
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	fc 01       	movw	r30, r24
    1e46:	10 82       	st	Z, r1
	PORTB = 0;
    1e48:	85 e2       	ldi	r24, 0x25	; 37
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	10 82       	st	Z, r1
	PORTC = 0;
    1e50:	88 e2       	ldi	r24, 0x28	; 40
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	fc 01       	movw	r30, r24
    1e56:	10 82       	st	Z, r1
	PORTD = 0;
    1e58:	8b e2       	ldi	r24, 0x2B	; 43
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	10 82       	st	Z, r1
}
    1e60:	df 91       	pop	r29
    1e62:	cf 91       	pop	r28
    1e64:	08 95       	ret

00001e66 <_Z7AppInitj>:
/*************************************************************************************************************/
void AppInit(unsigned int ubrr){
    1e66:	cf 93       	push	r28
    1e68:	df 93       	push	r29
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <_Z7AppInitj+0x6>
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	9a 83       	std	Y+2, r25	; 0x02
    1e72:	89 83       	std	Y+1, r24	; 0x01
	
	//Set BAUD rate of UART
	UBRR0L = ubrr;   												//set low byte of baud rate
    1e74:	84 ec       	ldi	r24, 0xC4	; 196
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	29 81       	ldd	r18, Y+1	; 0x01
    1e7a:	fc 01       	movw	r30, r24
    1e7c:	20 83       	st	Z, r18
	UBRR0H = (ubrr >> 8);											//set high byte of baud rate
    1e7e:	85 ec       	ldi	r24, 0xC5	; 197
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	29 81       	ldd	r18, Y+1	; 0x01
    1e84:	3a 81       	ldd	r19, Y+2	; 0x02
    1e86:	23 2f       	mov	r18, r19
    1e88:	33 27       	eor	r19, r19
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	20 83       	st	Z, r18
	//UCSR0A |= (1 << U2X0);										//set high speed baud clock, in ASYNC mode
	
	//Enable UART_TX0 and UART_RX0
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);
    1e8e:	81 ec       	ldi	r24, 0xC1	; 193
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	28 e1       	ldi	r18, 0x18	; 24
    1e94:	fc 01       	movw	r30, r24
    1e96:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);							//Asynchronous; 8 data bits, no parity
    1e98:	82 ec       	ldi	r24, 0xC2	; 194
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	26 e0       	ldi	r18, 0x06	; 6
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	20 83       	st	Z, r18
	//UCSR0B |= (1 << RXCIE0);
	
	//Disable power to all peripherals
	PRR0 |= (1 << PRTWI)|(1 << PRTIM2)|(1 << PRTIM0)|(1 << PRUSART1)|(1 << PRTIM1)|(1 << PRADC)|(1 << PRSPI);  //Turn EVERYTHING off initially except USART0(UART0)
    1ea2:	84 e6       	ldi	r24, 0x64	; 100
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	24 e6       	ldi	r18, 0x64	; 100
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	f9 01       	movw	r30, r18
    1eac:	20 81       	ld	r18, Z
    1eae:	2d 6f       	ori	r18, 0xFD	; 253
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	20 83       	st	Z, r18

	//Enable status LEDs
	ddrSLEEPled |= (1 << bnSLEEPled);
    1eb4:	8a e2       	ldi	r24, 0x2A	; 42
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	2a e2       	ldi	r18, 0x2A	; 42
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	f9 01       	movw	r30, r18
    1ebe:	20 81       	ld	r18, Z
    1ec0:	20 68       	ori	r18, 0x80	; 128
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	20 83       	st	Z, r18
	ddrSTATUSled |= (1 << bnSTATUSled);
    1ec6:	87 e2       	ldi	r24, 0x27	; 39
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	27 e2       	ldi	r18, 0x27	; 39
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	f9 01       	movw	r30, r18
    1ed0:	20 81       	ld	r18, Z
    1ed2:	24 60       	ori	r18, 0x04	; 4
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	20 83       	st	Z, r18
	prtSLEEPled &= ~(1 << bnSLEEPled);	//turn off initially
    1ed8:	8b e2       	ldi	r24, 0x2B	; 43
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	2b e2       	ldi	r18, 0x2B	; 43
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	f9 01       	movw	r30, r18
    1ee2:	20 81       	ld	r18, Z
    1ee4:	2f 77       	andi	r18, 0x7F	; 127
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	20 83       	st	Z, r18
	prtSTATUSled |= (1 << bnSTATUSled);	//turn on initially
    1eea:	88 e2       	ldi	r24, 0x28	; 40
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	28 e2       	ldi	r18, 0x28	; 40
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	f9 01       	movw	r30, r18
    1ef4:	20 81       	ld	r18, Z
    1ef6:	24 60       	ori	r18, 0x04	; 4
    1ef8:	fc 01       	movw	r30, r24
    1efa:	20 83       	st	Z, r18
	
	//Enable BB and GAVR alert pins...outputs, no pull by default.
	ddrBBleds |= (1 << bnBBint)|(1 << bnBBtemp);
    1efc:	81 e2       	ldi	r24, 0x21	; 33
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	21 e2       	ldi	r18, 0x21	; 33
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	f9 01       	movw	r30, r18
    1f06:	20 81       	ld	r18, Z
    1f08:	26 60       	ori	r18, 0x06	; 6
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	20 83       	st	Z, r18
	ddrGAVRleds |= (1 << bnGAVRint)|(1 << bnGAVRtemp);
    1f0e:	81 e2       	ldi	r24, 0x21	; 33
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	21 e2       	ldi	r18, 0x21	; 33
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	f9 01       	movw	r30, r18
    1f18:	20 81       	ld	r18, Z
    1f1a:	28 61       	ori	r18, 0x18	; 24
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	20 83       	st	Z, r18
	
	//Enable GAVR interrupt pin, our PB3, it's INT2
	ddrGAVRINT |= (1 << bnGAVRINT);
    1f20:	84 e2       	ldi	r24, 0x24	; 36
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	24 e2       	ldi	r18, 0x24	; 36
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	f9 01       	movw	r30, r18
    1f2a:	20 81       	ld	r18, Z
    1f2c:	28 60       	ori	r18, 0x08	; 8
    1f2e:	fc 01       	movw	r30, r24
    1f30:	20 83       	st	Z, r18
	prtGAVRINT &=  ~(1 << bnGAVRINT);	//set low at first
    1f32:	85 e2       	ldi	r24, 0x25	; 37
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	25 e2       	ldi	r18, 0x25	; 37
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	f9 01       	movw	r30, r18
    1f3c:	20 81       	ld	r18, Z
    1f3e:	27 7f       	andi	r18, 0xF7	; 247
    1f40:	fc 01       	movw	r30, r24
    1f42:	20 83       	st	Z, r18
	
	//Enable enable signals
	ddrENABLE |= (1 << bnGPSen)|(1 << bnGAVRen)|(1 << bnLCDen);
    1f44:	81 e2       	ldi	r24, 0x21	; 33
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	21 e2       	ldi	r18, 0x21	; 33
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	f9 01       	movw	r30, r18
    1f4e:	20 81       	ld	r18, Z
    1f50:	20 6e       	ori	r18, 0xE0	; 224
    1f52:	fc 01       	movw	r30, r24
    1f54:	20 83       	st	Z, r18
	ddrBBen |= (1 << bnBBen);
    1f56:	84 e2       	ldi	r24, 0x24	; 36
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	24 e2       	ldi	r18, 0x24	; 36
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	f9 01       	movw	r30, r18
    1f60:	20 81       	ld	r18, Z
    1f62:	21 60       	ori	r18, 0x01	; 1
    1f64:	fc 01       	movw	r30, r24
    1f66:	20 83       	st	Z, r18
	ddrTEMPen |= (1 << bnTEMPen);
    1f68:	84 e2       	ldi	r24, 0x24	; 36
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	24 e2       	ldi	r18, 0x24	; 36
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	f9 01       	movw	r30, r18
    1f72:	20 81       	ld	r18, Z
    1f74:	22 60       	ori	r18, 0x02	; 2
    1f76:	fc 01       	movw	r30, r24
    1f78:	20 83       	st	Z, r18
	prtTEMPen |= (1 << bnTEMPen);
    1f7a:	85 e2       	ldi	r24, 0x25	; 37
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	25 e2       	ldi	r18, 0x25	; 37
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	f9 01       	movw	r30, r18
    1f84:	20 81       	ld	r18, Z
    1f86:	22 60       	ori	r18, 0x02	; 2
    1f88:	fc 01       	movw	r30, r24
    1f8a:	20 83       	st	Z, r18
	

	
	//Enable INT2. Note* Pin change interrupts will NOT wake AVR from Power-Save mode. Only INT0-2 will.
	EICRA = (1 << ISC21)|(1 << ISC20);			//falling edge of INT2 enables interrupt
    1f8c:	89 e6       	ldi	r24, 0x69	; 105
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	20 e3       	ldi	r18, 0x30	; 48
    1f92:	fc 01       	movw	r30, r24
    1f94:	20 83       	st	Z, r18
	EIMSK = (1 << INT2);			//enable INT2 global interrupt
    1f96:	8d e3       	ldi	r24, 0x3D	; 61
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	24 e0       	ldi	r18, 0x04	; 4
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	20 83       	st	Z, r18
	
	//Enable SPI for TI temperature
	ddrSpi0 |= (1 << bnMosi0)|(1 << bnSck0)|(1 << bnSS0);	//outputs
    1fa0:	84 e2       	ldi	r24, 0x24	; 36
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	24 e2       	ldi	r18, 0x24	; 36
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	f9 01       	movw	r30, r18
    1faa:	20 81       	ld	r18, Z
    1fac:	20 6b       	ori	r18, 0xB0	; 176
    1fae:	fc 01       	movw	r30, r24
    1fb0:	20 83       	st	Z, r18
	ddrSpi0 &= ~(1 << bnMiso0);
    1fb2:	84 e2       	ldi	r24, 0x24	; 36
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	24 e2       	ldi	r18, 0x24	; 36
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	f9 01       	movw	r30, r18
    1fbc:	20 81       	ld	r18, Z
    1fbe:	2f 7b       	andi	r18, 0xBF	; 191
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	20 83       	st	Z, r18
	prtSpi0 |= (1 << bnSS0)|(1 << bnSck0);		//keep SS and SCK high
    1fc4:	85 e2       	ldi	r24, 0x25	; 37
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	25 e2       	ldi	r18, 0x25	; 37
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	f9 01       	movw	r30, r18
    1fce:	20 81       	ld	r18, Z
    1fd0:	20 69       	ori	r18, 0x90	; 144
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	20 83       	st	Z, r18
	prtSpi0 &= ~(1 << bnMosi0);		//keep Miso low
    1fd6:	85 e2       	ldi	r24, 0x25	; 37
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	25 e2       	ldi	r18, 0x25	; 37
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	f9 01       	movw	r30, r18
    1fe0:	20 81       	ld	r18, Z
    1fe2:	2f 7d       	andi	r18, 0xDF	; 223
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	20 83       	st	Z, r18
	
	//Init variables
	flagGoToSleep = fTrue;			//changes to fTrue in final implementation
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	80 93 ae 01 	sts	0x01AE, r24
	flagUARTbone = fFalse;
    1fee:	10 92 af 01 	sts	0x01AF, r1
	flagNormalMode=fTrue;
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	80 93 b0 01 	sts	0x01B0, r24

	flagUpdateGAVRTime=fFalse;
    1ff8:	10 92 b1 01 	sts	0x01B1, r1
	flagUpdateGAVRDate=fFalse;
    1ffc:	10 92 b2 01 	sts	0x01B2, r1
	flagSendingGAVR=fFalse;
    2000:	10 92 b3 01 	sts	0x01B3, r1
	flagUserTime=fFalse;
    2004:	10 92 b5 01 	sts	0x01B5, r1
	flagUserDate=fFalse;
    2008:	10 92 b4 01 	sts	0x01B4, r1
	flagInvalidDateTime=fFalse;
    200c:	10 92 b6 01 	sts	0x01B6, r1
	flagWaitingToSendGAVR=fFalse;
    2010:	10 92 b7 01 	sts	0x01B7, r1
	
	restart=fFalse;
    2014:	10 92 bc 01 	sts	0x01BC, r1
	flagNewShutdown=fFalse;
    2018:	10 92 b8 01 	sts	0x01B8, r1
	flagShutdown  = fFalse;
    201c:	10 92 b9 01 	sts	0x01B9, r1
	flagGoodVolts=fFalse;
    2020:	10 92 bb 01 	sts	0x01BB, r1
	flagGoodTemp=fFalse;
    2024:	10 92 ba 01 	sts	0x01BA, r1
	flagFreshStart=fTrue;
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	80 93 bd 01 	sts	0x01BD, r24
}
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	df 91       	pop	r29
    2034:	cf 91       	pop	r28
    2036:	08 95       	ret

00002038 <_Z14EnableRTCTimerv>:
/*************************************************************************************************************/
void EnableRTCTimer(){
    2038:	cf 93       	push	r28
    203a:	df 93       	push	r29
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
	//Asynchronous should be done based on TOSC1 and TOSC2
	//Give power back to Timer2
	PRR0 &= ~(1 << PRTIM2);
    2040:	84 e6       	ldi	r24, 0x64	; 100
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	24 e6       	ldi	r18, 0x64	; 100
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	f9 01       	movw	r30, r18
    204a:	20 81       	ld	r18, Z
    204c:	2f 7b       	andi	r18, 0xBF	; 191
    204e:	fc 01       	movw	r30, r24
    2050:	20 83       	st	Z, r18
	Wait_ms(1);	//give it time to power on
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <_Z7Wait_msi>
	
	//Set to Asynchronous mode, uses TOSC1/TOSC2 pins
	ASSR |= (1 << AS2);
    205a:	86 eb       	ldi	r24, 0xB6	; 182
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	26 eb       	ldi	r18, 0xB6	; 182
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	f9 01       	movw	r30, r18
    2064:	20 81       	ld	r18, Z
    2066:	20 62       	ori	r18, 0x20	; 32
    2068:	fc 01       	movw	r30, r24
    206a:	20 83       	st	Z, r18
	
	//Set prescaler, initialize registers
	TCCR2B |= (1 << CS22)|(1 << CS20);	//128 prescaler, should click into overflow every second
    206c:	81 eb       	ldi	r24, 0xB1	; 177
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	21 eb       	ldi	r18, 0xB1	; 177
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	f9 01       	movw	r30, r18
    2076:	20 81       	ld	r18, Z
    2078:	25 60       	ori	r18, 0x05	; 5
    207a:	fc 01       	movw	r30, r24
    207c:	20 83       	st	Z, r18
	while ((ASSR & ((1 << TCR2BUB)|(1 << TCN2UB))));	//wait for it not to be busy
    207e:	86 eb       	ldi	r24, 0xB6	; 182
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	fc 01       	movw	r30, r24
    2084:	80 81       	ld	r24, Z
    2086:	88 2f       	mov	r24, r24
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	81 71       	andi	r24, 0x11	; 17
    208c:	90 70       	andi	r25, 0x00	; 0
    208e:	21 e0       	ldi	r18, 0x01	; 1
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	09 f4       	brne	.+2      	; 0x2096 <_Z14EnableRTCTimerv+0x5e>
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	22 23       	and	r18, r18
    2098:	91 f7       	brne	.-28     	; 0x207e <_Z14EnableRTCTimerv+0x46>
	TIFR2 = (1 << TOV2);								//Clear any interrupts pending for the timer
    209a:	87 e3       	ldi	r24, 0x37	; 55
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	21 e0       	ldi	r18, 0x01	; 1
    20a0:	fc 01       	movw	r30, r24
    20a2:	20 83       	st	Z, r18
	TIMSK2 = (1 << TOIE2);								//Enable overflow on it
    20a4:	80 e7       	ldi	r24, 0x70	; 112
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	21 e0       	ldi	r18, 0x01	; 1
    20aa:	fc 01       	movw	r30, r24
    20ac:	20 83       	st	Z, r18
	
	//Away we go
}
    20ae:	df 91       	pop	r29
    20b0:	cf 91       	pop	r28
    20b2:	08 95       	ret

000020b4 <_Z7Wait_msi>:
/*************************************************************************************************************/
void Wait_ms(volatile int delay)
{
    20b4:	cf 93       	push	r28
    20b6:	df 93       	push	r29
    20b8:	00 d0       	rcall	.+0      	; 0x20ba <_Z7Wait_msi+0x6>
    20ba:	00 d0       	rcall	.+0      	; 0x20bc <_Z7Wait_msi+0x8>
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
    20c0:	9c 83       	std	Y+4, r25	; 0x04
    20c2:	8b 83       	std	Y+3, r24	; 0x03
	volatile int i;

	while(delay > 0){
    20c4:	18 c0       	rjmp	.+48     	; 0x20f6 <_Z7Wait_msi+0x42>
		for(i = 0; i < 800; i++){
    20c6:	1a 82       	std	Y+2, r1	; 0x02
    20c8:	19 82       	std	Y+1, r1	; 0x01
    20ca:	06 c0       	rjmp	.+12     	; 0x20d8 <_Z7Wait_msi+0x24>
			asm volatile("nop");
    20cc:	00 00       	nop
void Wait_ms(volatile int delay)
{
	volatile int i;

	while(delay > 0){
		for(i = 0; i < 800; i++){
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	9a 81       	ldd	r25, Y+2	; 0x02
    20d2:	01 96       	adiw	r24, 0x01	; 1
    20d4:	9a 83       	std	Y+2, r25	; 0x02
    20d6:	89 83       	std	Y+1, r24	; 0x01
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	9a 81       	ldd	r25, Y+2	; 0x02
    20dc:	21 e0       	ldi	r18, 0x01	; 1
    20de:	33 e0       	ldi	r19, 0x03	; 3
    20e0:	80 32       	cpi	r24, 0x20	; 32
    20e2:	93 07       	cpc	r25, r19
    20e4:	0c f0       	brlt	.+2      	; 0x20e8 <_Z7Wait_msi+0x34>
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	22 23       	and	r18, r18
    20ea:	81 f7       	brne	.-32     	; 0x20cc <_Z7Wait_msi+0x18>
			asm volatile("nop");
		}
		delay -= 1;
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	9c 81       	ldd	r25, Y+4	; 0x04
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	9c 83       	std	Y+4, r25	; 0x04
    20f4:	8b 83       	std	Y+3, r24	; 0x03
/*************************************************************************************************************/
void Wait_ms(volatile int delay)
{
	volatile int i;

	while(delay > 0){
    20f6:	8b 81       	ldd	r24, Y+3	; 0x03
    20f8:	9c 81       	ldd	r25, Y+4	; 0x04
    20fa:	21 e0       	ldi	r18, 0x01	; 1
    20fc:	18 16       	cp	r1, r24
    20fe:	19 06       	cpc	r1, r25
    2100:	0c f0       	brlt	.+2      	; 0x2104 <_Z7Wait_msi+0x50>
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	22 23       	and	r18, r18
    2106:	f9 f6       	brne	.-66     	; 0x20c6 <_Z7Wait_msi+0x12>
		for(i = 0; i < 800; i++){
			asm volatile("nop");
		}
		delay -= 1;
	}
}
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	df 91       	pop	r29
    2112:	cf 91       	pop	r28
    2114:	08 95       	ret

00002116 <_Z8Wait_seci>:
/*************************************************************************************************************/
void Wait_sec(volatile int sec){
    2116:	cf 93       	push	r28
    2118:	df 93       	push	r29
    211a:	00 d0       	rcall	.+0      	; 0x211c <_Z8Wait_seci+0x6>
    211c:	00 d0       	rcall	.+0      	; 0x211e <_Z8Wait_seci+0x8>
    211e:	00 d0       	rcall	.+0      	; 0x2120 <_Z8Wait_seci+0xa>
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    2124:	9e 83       	std	Y+6, r25	; 0x06
    2126:	8d 83       	std	Y+5, r24	; 0x05
	volatile int startingTime = currentTime.getSeconds();
    2128:	86 e8       	ldi	r24, 0x86	; 134
    212a:	91 e0       	ldi	r25, 0x01	; 1
    212c:	0e 94 99 04 	call	0x932	; 0x932 <_ZN6myTime10getSecondsEv>
    2130:	88 2f       	mov	r24, r24
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	9a 83       	std	Y+2, r25	; 0x02
    2136:	89 83       	std	Y+1, r24	; 0x01
	volatile int endingTime= (startingTime+sec)%60;
    2138:	29 81       	ldd	r18, Y+1	; 0x01
    213a:	3a 81       	ldd	r19, Y+2	; 0x02
    213c:	8d 81       	ldd	r24, Y+5	; 0x05
    213e:	9e 81       	ldd	r25, Y+6	; 0x06
    2140:	82 0f       	add	r24, r18
    2142:	93 1f       	adc	r25, r19
    2144:	2c e3       	ldi	r18, 0x3C	; 60
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	b9 01       	movw	r22, r18
    214a:	0e 94 a3 14 	call	0x2946	; 0x2946 <__divmodhi4>
    214e:	9c 83       	std	Y+4, r25	; 0x04
    2150:	8b 83       	std	Y+3, r24	; 0x03
	while (currentTime.getSeconds() != endingTime){asm volatile ("nop");}
    2152:	01 c0       	rjmp	.+2      	; 0x2156 <_Z8Wait_seci+0x40>
    2154:	00 00       	nop
    2156:	86 e8       	ldi	r24, 0x86	; 134
    2158:	91 e0       	ldi	r25, 0x01	; 1
    215a:	0e 94 99 04 	call	0x932	; 0x932 <_ZN6myTime10getSecondsEv>
    215e:	28 2f       	mov	r18, r24
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	8b 81       	ldd	r24, Y+3	; 0x03
    2164:	9c 81       	ldd	r25, Y+4	; 0x04
    2166:	41 e0       	ldi	r20, 0x01	; 1
    2168:	28 17       	cp	r18, r24
    216a:	39 07       	cpc	r19, r25
    216c:	09 f4       	brne	.+2      	; 0x2170 <_Z8Wait_seci+0x5a>
    216e:	40 e0       	ldi	r20, 0x00	; 0
    2170:	44 23       	and	r20, r20
    2172:	81 f7       	brne	.-32     	; 0x2154 <_Z8Wait_seci+0x3e>
}
    2174:	26 96       	adiw	r28, 0x06	; 6
    2176:	0f b6       	in	r0, 0x3f	; 63
    2178:	f8 94       	cli
    217a:	de bf       	out	0x3e, r29	; 62
    217c:	0f be       	out	0x3f, r0	; 63
    217e:	cd bf       	out	0x3d, r28	; 61
    2180:	df 91       	pop	r29
    2182:	cf 91       	pop	r28
    2184:	08 95       	ret

00002186 <_Z11ReceiveBonev>:

/*************************************************************************************************************/
void ReceiveBone(){
    2186:	cf 93       	push	r28
    2188:	df 93       	push	r29
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	a7 97       	sbiw	r28, 0x27	; 39
    2190:	0f b6       	in	r0, 0x3f	; 63
    2192:	f8 94       	cli
    2194:	de bf       	out	0x3e, r29	; 62
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	cd bf       	out	0x3d, r28	; 61
	//Declare variables
	BOOL noCarriage = fTrue;
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	89 83       	std	Y+1, r24	; 0x01
	char recString[20];
	char recChar;
	volatile int strLoc = 0;
    219e:	19 8e       	std	Y+25, r1	; 0x19
    21a0:	18 8e       	std	Y+24, r1	; 0x18
	
	recChar = UDR0;
    21a2:	86 ec       	ldi	r24, 0xC6	; 198
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	fc 01       	movw	r30, r24
    21a8:	80 81       	ld	r24, Z
    21aa:	8a 83       	std	Y+2, r24	; 0x02
	if (recChar=='.'){
    21ac:	8a 81       	ldd	r24, Y+2	; 0x02
    21ae:	8e 32       	cpi	r24, 0x2E	; 46
    21b0:	29 f4       	brne	.+10     	; 0x21bc <_Z11ReceiveBonev+0x36>
		PutUartChBone(recChar);
    21b2:	8a 81       	ldd	r24, Y+2	; 0x02
    21b4:	0e 94 a2 08 	call	0x1144	; 0x1144 <_Z13PutUartChBonec>
		noCarriage=fFalse;
    21b8:	19 82       	std	Y+1, r1	; 0x01
	} else {
		recString[strLoc]=recChar;
		strLoc++;
	}
	while (noCarriage && flagUARTbone){ //flag goes down if a timeout occurs.
    21ba:	d0 c1       	rjmp	.+928    	; 0x255c <_Z11ReceiveBonev+0x3d6>
	recChar = UDR0;
	if (recChar=='.'){
		PutUartChBone(recChar);
		noCarriage=fFalse;
	} else {
		recString[strLoc]=recChar;
    21bc:	88 8d       	ldd	r24, Y+24	; 0x18
    21be:	99 8d       	ldd	r25, Y+25	; 0x19
    21c0:	9e 01       	movw	r18, r28
    21c2:	2c 5f       	subi	r18, 0xFC	; 252
    21c4:	3f 4f       	sbci	r19, 0xFF	; 255
    21c6:	82 0f       	add	r24, r18
    21c8:	93 1f       	adc	r25, r19
    21ca:	2a 81       	ldd	r18, Y+2	; 0x02
    21cc:	fc 01       	movw	r30, r24
    21ce:	20 83       	st	Z, r18
		strLoc++;
    21d0:	88 8d       	ldd	r24, Y+24	; 0x18
    21d2:	99 8d       	ldd	r25, Y+25	; 0x19
    21d4:	01 96       	adiw	r24, 0x01	; 1
    21d6:	99 8f       	std	Y+25, r25	; 0x19
    21d8:	88 8f       	std	Y+24, r24	; 0x18
	}
	while (noCarriage && flagUARTbone){ //flag goes down if a timeout occurs.
    21da:	c0 c1       	rjmp	.+896    	; 0x255c <_Z11ReceiveBonev+0x3d6>
		recChar=UDR0; //dump, don't needit. wait for nextone
    21dc:	86 ec       	ldi	r24, 0xC6	; 198
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	fc 01       	movw	r30, r24
    21e2:	80 81       	ld	r24, Z
    21e4:	8a 83       	std	Y+2, r24	; 0x02
		while (!(UCSR0A & (1 << RXC0)) && flagUARTbone);
    21e6:	00 00       	nop
    21e8:	80 ec       	ldi	r24, 0xC0	; 192
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	fc 01       	movw	r30, r24
    21ee:	80 81       	ld	r24, Z
    21f0:	88 23       	and	r24, r24
    21f2:	34 f0       	brlt	.+12     	; 0x2200 <_Z11ReceiveBonev+0x7a>
    21f4:	80 91 af 01 	lds	r24, 0x01AF
    21f8:	88 23       	and	r24, r24
    21fa:	11 f0       	breq	.+4      	; 0x2200 <_Z11ReceiveBonev+0x7a>
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	01 c0       	rjmp	.+2      	; 0x2202 <_Z11ReceiveBonev+0x7c>
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	88 23       	and	r24, r24
    2204:	89 f7       	brne	.-30     	; 0x21e8 <_Z11ReceiveBonev+0x62>
		recChar = UDR0;
    2206:	86 ec       	ldi	r24, 0xC6	; 198
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	fc 01       	movw	r30, r24
    220c:	80 81       	ld	r24, Z
    220e:	8a 83       	std	Y+2, r24	; 0x02
		//Put string together. Carriage return is dunzo.
		if (recChar == '.'){
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	8e 32       	cpi	r24, 0x2E	; 46
    2214:	09 f0       	breq	.+2      	; 0x2218 <_Z11ReceiveBonev+0x92>
    2216:	85 c1       	rjmp	.+778    	; 0x2522 <_Z11ReceiveBonev+0x39c>
			recString[strLoc] = '\0';
    2218:	88 8d       	ldd	r24, Y+24	; 0x18
    221a:	99 8d       	ldd	r25, Y+25	; 0x19
    221c:	9e 01       	movw	r18, r28
    221e:	2c 5f       	subi	r18, 0xFC	; 252
    2220:	3f 4f       	sbci	r19, 0xFF	; 255
    2222:	82 0f       	add	r24, r18
    2224:	93 1f       	adc	r25, r19
    2226:	fc 01       	movw	r30, r24
    2228:	10 82       	st	Z, r1
			//See what it's asking for
			if (!strcmp(recString,"date")){printTimeDate(fTrue,fFalse,fTrue);}
    222a:	ce 01       	movw	r24, r28
    222c:	04 96       	adiw	r24, 0x04	; 4
    222e:	26 e4       	ldi	r18, 0x46	; 70
    2230:	31 e0       	ldi	r19, 0x01	; 1
    2232:	b9 01       	movw	r22, r18
    2234:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <strcmp>
    2238:	00 97       	sbiw	r24, 0x00	; 0
    223a:	31 f4       	brne	.+12     	; 0x2248 <_Z11ReceiveBonev+0xc2>
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	60 e0       	ldi	r22, 0x00	; 0
    2240:	41 e0       	ldi	r20, 0x01	; 1
    2242:	0e 94 a1 0b 	call	0x1742	; 0x1742 <_Z13printTimeDatehhh>
    2246:	6b c1       	rjmp	.+726    	; 0x251e <_Z11ReceiveBonev+0x398>
			else if (!strcmp(recString,"time")){printTimeDate(fTrue,fTrue,fFalse);}
    2248:	ce 01       	movw	r24, r28
    224a:	04 96       	adiw	r24, 0x04	; 4
    224c:	2b e4       	ldi	r18, 0x4B	; 75
    224e:	31 e0       	ldi	r19, 0x01	; 1
    2250:	b9 01       	movw	r22, r18
    2252:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <strcmp>
    2256:	00 97       	sbiw	r24, 0x00	; 0
    2258:	31 f4       	brne	.+12     	; 0x2266 <_Z11ReceiveBonev+0xe0>
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	61 e0       	ldi	r22, 0x01	; 1
    225e:	40 e0       	ldi	r20, 0x00	; 0
    2260:	0e 94 a1 0b 	call	0x1742	; 0x1742 <_Z13printTimeDatehhh>
    2264:	5c c1       	rjmp	.+696    	; 0x251e <_Z11ReceiveBonev+0x398>
			else if (!strcmp(recString,"both")){printTimeDate(fTrue,fTrue,fTrue);}
    2266:	ce 01       	movw	r24, r28
    2268:	04 96       	adiw	r24, 0x04	; 4
    226a:	20 e5       	ldi	r18, 0x50	; 80
    226c:	31 e0       	ldi	r19, 0x01	; 1
    226e:	b9 01       	movw	r22, r18
    2270:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <strcmp>
    2274:	00 97       	sbiw	r24, 0x00	; 0
    2276:	31 f4       	brne	.+12     	; 0x2284 <_Z11ReceiveBonev+0xfe>
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	61 e0       	ldi	r22, 0x01	; 1
    227c:	41 e0       	ldi	r20, 0x01	; 1
    227e:	0e 94 a1 0b 	call	0x1742	; 0x1742 <_Z13printTimeDatehhh>
    2282:	4d c1       	rjmp	.+666    	; 0x251e <_Z11ReceiveBonev+0x398>
			else if (!strcmp(recString,"save")){saveDateTime_eeprom(fTrue,fFalse);PrintBone(recString);}
    2284:	ce 01       	movw	r24, r28
    2286:	04 96       	adiw	r24, 0x04	; 4
    2288:	25 e5       	ldi	r18, 0x55	; 85
    228a:	31 e0       	ldi	r19, 0x01	; 1
    228c:	b9 01       	movw	r22, r18
    228e:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <strcmp>
    2292:	00 97       	sbiw	r24, 0x00	; 0
    2294:	49 f4       	brne	.+18     	; 0x22a8 <_Z11ReceiveBonev+0x122>
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	60 e0       	ldi	r22, 0x00	; 0
    229a:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
    229e:	ce 01       	movw	r24, r28
    22a0:	04 96       	adiw	r24, 0x04	; 4
    22a2:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
    22a6:	3b c1       	rjmp	.+630    	; 0x251e <_Z11ReceiveBonev+0x398>
			else if (!strcmp(recString,"adc")){char tempChar[7]; itoa(globalADC,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);}
    22a8:	ce 01       	movw	r24, r28
    22aa:	04 96       	adiw	r24, 0x04	; 4
    22ac:	2a e5       	ldi	r18, 0x5A	; 90
    22ae:	31 e0       	ldi	r19, 0x01	; 1
    22b0:	b9 01       	movw	r22, r18
    22b2:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <strcmp>
    22b6:	00 97       	sbiw	r24, 0x00	; 0
    22b8:	91 f4       	brne	.+36     	; 0x22de <_Z11ReceiveBonev+0x158>
    22ba:	80 91 82 01 	lds	r24, 0x0182
    22be:	90 91 83 01 	lds	r25, 0x0183
    22c2:	9e 01       	movw	r18, r28
    22c4:	26 5e       	subi	r18, 0xE6	; 230
    22c6:	3f 4f       	sbci	r19, 0xFF	; 255
    22c8:	b9 01       	movw	r22, r18
    22ca:	4a e0       	ldi	r20, 0x0A	; 10
    22cc:	50 e0       	ldi	r21, 0x00	; 0
    22ce:	0e 94 09 15 	call	0x2a12	; 0x2a12 <itoa>
    22d2:	18 a2       	lds	r17, 0x98
    22d4:	ce 01       	movw	r24, r28
    22d6:	4a 96       	adiw	r24, 0x1a	; 26
    22d8:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
    22dc:	20 c1       	rjmp	.+576    	; 0x251e <_Z11ReceiveBonev+0x398>
			else if (!strcmp(recString,"temp")){char tempChar[7]; itoa(globalTemp,tempChar,10); tempChar[6]='\0'; PrintBone(tempChar);}
    22de:	ce 01       	movw	r24, r28
    22e0:	04 96       	adiw	r24, 0x04	; 4
    22e2:	2e e5       	ldi	r18, 0x5E	; 94
    22e4:	31 e0       	ldi	r19, 0x01	; 1
    22e6:	b9 01       	movw	r22, r18
    22e8:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <strcmp>
    22ec:	00 97       	sbiw	r24, 0x00	; 0
    22ee:	91 f4       	brne	.+36     	; 0x2314 <_Z11ReceiveBonev+0x18e>
    22f0:	80 91 84 01 	lds	r24, 0x0184
    22f4:	90 91 85 01 	lds	r25, 0x0185
    22f8:	9e 01       	movw	r18, r28
    22fa:	2f 5d       	subi	r18, 0xDF	; 223
    22fc:	3f 4f       	sbci	r19, 0xFF	; 255
    22fe:	b9 01       	movw	r22, r18
    2300:	4a e0       	ldi	r20, 0x0A	; 10
    2302:	50 e0       	ldi	r21, 0x00	; 0
    2304:	0e 94 09 15 	call	0x2a12	; 0x2a12 <itoa>
    2308:	1f a2       	lds	r17, 0x9f
    230a:	ce 01       	movw	r24, r28
    230c:	81 96       	adiw	r24, 0x21	; 33
    230e:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
    2312:	05 c1       	rjmp	.+522    	; 0x251e <_Z11ReceiveBonev+0x398>
			else if (!strcmp(recString,"NONE") && (restart || flagFreshStart)){ //If we are starting up again, we need to alert GAVR and clear the flags
    2314:	ce 01       	movw	r24, r28
    2316:	04 96       	adiw	r24, 0x04	; 4
    2318:	23 e6       	ldi	r18, 0x63	; 99
    231a:	31 e0       	ldi	r19, 0x01	; 1
    231c:	b9 01       	movw	r22, r18
    231e:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <strcmp>
    2322:	00 97       	sbiw	r24, 0x00	; 0
    2324:	51 f4       	brne	.+20     	; 0x233a <_Z11ReceiveBonev+0x1b4>
    2326:	80 91 bc 01 	lds	r24, 0x01BC
    232a:	88 23       	and	r24, r24
    232c:	21 f4       	brne	.+8      	; 0x2336 <_Z11ReceiveBonev+0x1b0>
    232e:	80 91 bd 01 	lds	r24, 0x01BD
    2332:	88 23       	and	r24, r24
    2334:	11 f0       	breq	.+4      	; 0x233a <_Z11ReceiveBonev+0x1b4>
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	01 c0       	rjmp	.+2      	; 0x233c <_Z11ReceiveBonev+0x1b6>
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	88 23       	and	r24, r24
    233e:	f9 f0       	breq	.+62     	; 0x237e <_Z11ReceiveBonev+0x1f8>
				PrintBone("ACKNONE");
    2340:	88 e6       	ldi	r24, 0x68	; 104
    2342:	91 e0       	ldi	r25, 0x01	; 1
    2344:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
				if (flagFreshStart){flagFreshStart=fFalse;}
    2348:	90 91 bd 01 	lds	r25, 0x01BD
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	99 23       	and	r25, r25
    2350:	09 f4       	brne	.+2      	; 0x2354 <_Z11ReceiveBonev+0x1ce>
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	88 23       	and	r24, r24
    2356:	11 f0       	breq	.+4      	; 0x235c <_Z11ReceiveBonev+0x1d6>
    2358:	10 92 bd 01 	sts	0x01BD, r1
				if (restart){restart=fFalse;}
    235c:	90 91 bc 01 	lds	r25, 0x01BC
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	99 23       	and	r25, r25
    2364:	09 f4       	brne	.+2      	; 0x2368 <_Z11ReceiveBonev+0x1e2>
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	88 23       	and	r24, r24
    236a:	11 f0       	breq	.+4      	; 0x2370 <_Z11ReceiveBonev+0x1ea>
    236c:	10 92 bc 01 	sts	0x01BC, r1
				flagUserTime=fTrue;
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	80 93 b5 01 	sts	0x01B5, r24
				flagUserDate=fTrue;
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	80 93 b4 01 	sts	0x01B4, r24
    237c:	d0 c0       	rjmp	.+416    	; 0x251e <_Z11ReceiveBonev+0x398>
			} else if (recString[2] == ':'){//valid string. Update the time anyways. Comes in every 20 minutes or so...
    237e:	8e 81       	ldd	r24, Y+6	; 0x06
    2380:	8a 33       	cpi	r24, 0x3A	; 58
    2382:	09 f0       	breq	.+2      	; 0x2386 <_Z11ReceiveBonev+0x200>
    2384:	c4 c0       	rjmp	.+392    	; 0x250e <_Z11ReceiveBonev+0x388>
				cli();
    2386:	f8 94       	cli
				BOOL success=currentTime.setTime(recString);
    2388:	86 e8       	ldi	r24, 0x86	; 134
    238a:	91 e0       	ldi	r25, 0x01	; 1
    238c:	9e 01       	movw	r18, r28
    238e:	2c 5f       	subi	r18, 0xFC	; 252
    2390:	3f 4f       	sbci	r19, 0xFF	; 255
    2392:	b9 01       	movw	r22, r18
    2394:	0e 94 cc 04 	call	0x998	; 0x998 <_ZN6myTime7setTimeEPc>
    2398:	8b 83       	std	Y+3, r24	; 0x03
				sei();
    239a:	78 94       	sei
				if (restart){restart=fFalse;} 
    239c:	90 91 bc 01 	lds	r25, 0x01BC
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	99 23       	and	r25, r25
    23a4:	09 f4       	brne	.+2      	; 0x23a8 <_Z11ReceiveBonev+0x222>
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	88 23       	and	r24, r24
    23aa:	11 f0       	breq	.+4      	; 0x23b0 <_Z11ReceiveBonev+0x22a>
    23ac:	10 92 bc 01 	sts	0x01BC, r1
				if (flagFreshStart){flagFreshStart=fFalse;}
    23b0:	90 91 bd 01 	lds	r25, 0x01BD
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	99 23       	and	r25, r25
    23b8:	09 f4       	brne	.+2      	; 0x23bc <_Z11ReceiveBonev+0x236>
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	88 23       	and	r24, r24
    23be:	11 f0       	breq	.+4      	; 0x23c4 <_Z11ReceiveBonev+0x23e>
    23c0:	10 92 bd 01 	sts	0x01BD, r1
				PrintBone("ACK");
    23c4:	80 e7       	ldi	r24, 0x70	; 112
    23c6:	91 e0       	ldi	r25, 0x01	; 1
    23c8:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
				if (success && !restart && !flagFreshStart){saveDateTime_eeprom(fTrue,fFalse); flagUpdateGAVRTime=fTrue; PrintBone(recString);}
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
    23ce:	88 23       	and	r24, r24
    23d0:	51 f0       	breq	.+20     	; 0x23e6 <_Z11ReceiveBonev+0x260>
    23d2:	80 91 bc 01 	lds	r24, 0x01BC
    23d6:	88 23       	and	r24, r24
    23d8:	31 f4       	brne	.+12     	; 0x23e6 <_Z11ReceiveBonev+0x260>
    23da:	80 91 bd 01 	lds	r24, 0x01BD
    23de:	88 23       	and	r24, r24
    23e0:	11 f4       	brne	.+4      	; 0x23e6 <_Z11ReceiveBonev+0x260>
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	01 c0       	rjmp	.+2      	; 0x23e8 <_Z11ReceiveBonev+0x262>
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	88 23       	and	r24, r24
    23ea:	61 f0       	breq	.+24     	; 0x2404 <_Z11ReceiveBonev+0x27e>
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	60 e0       	ldi	r22, 0x00	; 0
    23f0:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	80 93 b1 01 	sts	0x01B1, r24
    23fa:	ce 01       	movw	r24, r28
    23fc:	04 96       	adiw	r24, 0x04	; 4
    23fe:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
    2402:	70 c0       	rjmp	.+224    	; 0x24e4 <_Z11ReceiveBonev+0x35e>
				else if (success && !restart && flagFreshStart){saveDateTime_eeprom(fTrue,fFalse); flagUpdateGAVRTime=fTrue; flagUserDate=fTrue; PrintBone(recString);}
    2404:	8b 81       	ldd	r24, Y+3	; 0x03
    2406:	88 23       	and	r24, r24
    2408:	51 f0       	breq	.+20     	; 0x241e <_Z11ReceiveBonev+0x298>
    240a:	80 91 bc 01 	lds	r24, 0x01BC
    240e:	88 23       	and	r24, r24
    2410:	31 f4       	brne	.+12     	; 0x241e <_Z11ReceiveBonev+0x298>
    2412:	80 91 bd 01 	lds	r24, 0x01BD
    2416:	88 23       	and	r24, r24
    2418:	11 f0       	breq	.+4      	; 0x241e <_Z11ReceiveBonev+0x298>
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	01 c0       	rjmp	.+2      	; 0x2420 <_Z11ReceiveBonev+0x29a>
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	88 23       	and	r24, r24
    2422:	79 f0       	breq	.+30     	; 0x2442 <_Z11ReceiveBonev+0x2bc>
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	60 e0       	ldi	r22, 0x00	; 0
    2428:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	80 93 b1 01 	sts	0x01B1, r24
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	80 93 b4 01 	sts	0x01B4, r24
    2438:	ce 01       	movw	r24, r28
    243a:	04 96       	adiw	r24, 0x04	; 4
    243c:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
    2440:	51 c0       	rjmp	.+162    	; 0x24e4 <_Z11ReceiveBonev+0x35e>
				else if (success && restart && !flagFreshStart){saveDateTime_eeprom(fTrue,fFalse); flagUpdateGAVRDate=fTrue; flagUpdateGAVRTime=fTrue; PrintBone(recString);}
    2442:	8b 81       	ldd	r24, Y+3	; 0x03
    2444:	88 23       	and	r24, r24
    2446:	51 f0       	breq	.+20     	; 0x245c <_Z11ReceiveBonev+0x2d6>
    2448:	80 91 bc 01 	lds	r24, 0x01BC
    244c:	88 23       	and	r24, r24
    244e:	31 f0       	breq	.+12     	; 0x245c <_Z11ReceiveBonev+0x2d6>
    2450:	80 91 bd 01 	lds	r24, 0x01BD
    2454:	88 23       	and	r24, r24
    2456:	11 f4       	brne	.+4      	; 0x245c <_Z11ReceiveBonev+0x2d6>
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	01 c0       	rjmp	.+2      	; 0x245e <_Z11ReceiveBonev+0x2d8>
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	88 23       	and	r24, r24
    2460:	79 f0       	breq	.+30     	; 0x2480 <_Z11ReceiveBonev+0x2fa>
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	60 e0       	ldi	r22, 0x00	; 0
    2466:	0e 94 46 08 	call	0x108c	; 0x108c <_Z19saveDateTime_eepromhh>
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	80 93 b2 01 	sts	0x01B2, r24
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	80 93 b1 01 	sts	0x01B1, r24
    2476:	ce 01       	movw	r24, r28
    2478:	04 96       	adiw	r24, 0x04	; 4
    247a:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
    247e:	32 c0       	rjmp	.+100    	; 0x24e4 <_Z11ReceiveBonev+0x35e>
				else if (!success && restart){flagUpdateGAVRTime=fTrue; flagUpdateGAVRDate=fTrue; PrintBone("bad");}	//sends eeprom time and date
    2480:	8b 81       	ldd	r24, Y+3	; 0x03
    2482:	88 23       	and	r24, r24
    2484:	31 f4       	brne	.+12     	; 0x2492 <_Z11ReceiveBonev+0x30c>
    2486:	80 91 bc 01 	lds	r24, 0x01BC
    248a:	88 23       	and	r24, r24
    248c:	11 f0       	breq	.+4      	; 0x2492 <_Z11ReceiveBonev+0x30c>
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	01 c0       	rjmp	.+2      	; 0x2494 <_Z11ReceiveBonev+0x30e>
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	88 23       	and	r24, r24
    2496:	59 f0       	breq	.+22     	; 0x24ae <_Z11ReceiveBonev+0x328>
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	80 93 b1 01 	sts	0x01B1, r24
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	80 93 b2 01 	sts	0x01B2, r24
    24a4:	84 e7       	ldi	r24, 0x74	; 116
    24a6:	91 e0       	ldi	r25, 0x01	; 1
    24a8:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
    24ac:	1b c0       	rjmp	.+54     	; 0x24e4 <_Z11ReceiveBonev+0x35e>
				else if (!success && flagFreshStart){flagUserTime=fTrue; flagUserDate=fTrue; PrintBone("bad");} //need to get user time and date
    24ae:	8b 81       	ldd	r24, Y+3	; 0x03
    24b0:	88 23       	and	r24, r24
    24b2:	31 f4       	brne	.+12     	; 0x24c0 <_Z11ReceiveBonev+0x33a>
    24b4:	80 91 bd 01 	lds	r24, 0x01BD
    24b8:	88 23       	and	r24, r24
    24ba:	11 f0       	breq	.+4      	; 0x24c0 <_Z11ReceiveBonev+0x33a>
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	01 c0       	rjmp	.+2      	; 0x24c2 <_Z11ReceiveBonev+0x33c>
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	88 23       	and	r24, r24
    24c4:	59 f0       	breq	.+22     	; 0x24dc <_Z11ReceiveBonev+0x356>
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	80 93 b5 01 	sts	0x01B5, r24
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	80 93 b4 01 	sts	0x01B4, r24
    24d2:	84 e7       	ldi	r24, 0x74	; 116
    24d4:	91 e0       	ldi	r25, 0x01	; 1
    24d6:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
    24da:	04 c0       	rjmp	.+8      	; 0x24e4 <_Z11ReceiveBonev+0x35e>
				else {PrintBone("bad");}
    24dc:	84 e7       	ldi	r24, 0x74	; 116
    24de:	91 e0       	ldi	r25, 0x01	; 1
    24e0:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
				//Reset flags for startup
				if (restart){restart=fFalse;}
    24e4:	90 91 bc 01 	lds	r25, 0x01BC
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	99 23       	and	r25, r25
    24ec:	09 f4       	brne	.+2      	; 0x24f0 <_Z11ReceiveBonev+0x36a>
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	88 23       	and	r24, r24
    24f2:	11 f0       	breq	.+4      	; 0x24f8 <_Z11ReceiveBonev+0x372>
    24f4:	10 92 bc 01 	sts	0x01BC, r1
				if (flagFreshStart){flagFreshStart=fFalse;}		
    24f8:	90 91 bd 01 	lds	r25, 0x01BD
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	99 23       	and	r25, r25
    2500:	09 f4       	brne	.+2      	; 0x2504 <_Z11ReceiveBonev+0x37e>
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	88 23       	and	r24, r24
    2506:	59 f0       	breq	.+22     	; 0x251e <_Z11ReceiveBonev+0x398>
    2508:	10 92 bd 01 	sts	0x01BD, r1
    250c:	08 c0       	rjmp	.+16     	; 0x251e <_Z11ReceiveBonev+0x398>
			} else {
				PrintBone("ACK"); 
    250e:	80 e7       	ldi	r24, 0x70	; 112
    2510:	91 e0       	ldi	r25, 0x01	; 1
    2512:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
				PrintBone(recString);
    2516:	ce 01       	movw	r24, r28
    2518:	04 96       	adiw	r24, 0x04	; 4
    251a:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
			}
			noCarriage = fFalse;
    251e:	19 82       	std	Y+1, r1	; 0x01
    2520:	1d c0       	rjmp	.+58     	; 0x255c <_Z11ReceiveBonev+0x3d6>
		} else {
			recString[strLoc++] = recChar;
    2522:	88 8d       	ldd	r24, Y+24	; 0x18
    2524:	99 8d       	ldd	r25, Y+25	; 0x19
    2526:	9e 01       	movw	r18, r28
    2528:	2c 5f       	subi	r18, 0xFC	; 252
    252a:	3f 4f       	sbci	r19, 0xFF	; 255
    252c:	28 0f       	add	r18, r24
    252e:	39 1f       	adc	r19, r25
    2530:	4a 81       	ldd	r20, Y+2	; 0x02
    2532:	f9 01       	movw	r30, r18
    2534:	40 83       	st	Z, r20
    2536:	01 96       	adiw	r24, 0x01	; 1
    2538:	99 8f       	std	Y+25, r25	; 0x19
    253a:	88 8f       	std	Y+24, r24	; 0x18
			if (strLoc >= 19){strLoc = 0; noCarriage = fFalse; PrintBone("ACKERROR");}
    253c:	88 8d       	ldd	r24, Y+24	; 0x18
    253e:	99 8d       	ldd	r25, Y+25	; 0x19
    2540:	21 e0       	ldi	r18, 0x01	; 1
    2542:	83 31       	cpi	r24, 0x13	; 19
    2544:	91 05       	cpc	r25, r1
    2546:	0c f4       	brge	.+2      	; 0x254a <_Z11ReceiveBonev+0x3c4>
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	22 23       	and	r18, r18
    254c:	39 f0       	breq	.+14     	; 0x255c <_Z11ReceiveBonev+0x3d6>
    254e:	19 8e       	std	Y+25, r1	; 0x19
    2550:	18 8e       	std	Y+24, r1	; 0x18
    2552:	19 82       	std	Y+1, r1	; 0x01
    2554:	88 e7       	ldi	r24, 0x78	; 120
    2556:	91 e0       	ldi	r25, 0x01	; 1
    2558:	0e 94 c0 08 	call	0x1180	; 0x1180 <_Z9PrintBonePc>
		noCarriage=fFalse;
	} else {
		recString[strLoc]=recChar;
		strLoc++;
	}
	while (noCarriage && flagUARTbone){ //flag goes down if a timeout occurs.
    255c:	89 81       	ldd	r24, Y+1	; 0x01
    255e:	88 23       	and	r24, r24
    2560:	31 f0       	breq	.+12     	; 0x256e <_Z11ReceiveBonev+0x3e8>
    2562:	80 91 af 01 	lds	r24, 0x01AF
    2566:	88 23       	and	r24, r24
    2568:	11 f0       	breq	.+4      	; 0x256e <_Z11ReceiveBonev+0x3e8>
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	01 c0       	rjmp	.+2      	; 0x2570 <_Z11ReceiveBonev+0x3ea>
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	88 23       	and	r24, r24
    2572:	09 f0       	breq	.+2      	; 0x2576 <_Z11ReceiveBonev+0x3f0>
    2574:	33 ce       	rjmp	.-922    	; 0x21dc <_Z11ReceiveBonev+0x56>
		} else {
			recString[strLoc++] = recChar;
			if (strLoc >= 19){strLoc = 0; noCarriage = fFalse; PrintBone("ACKERROR");}
		}	
	}	
}
    2576:	a7 96       	adiw	r28, 0x27	; 39
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	f8 94       	cli
    257c:	de bf       	out	0x3e, r29	; 62
    257e:	0f be       	out	0x3f, r0	; 63
    2580:	cd bf       	out	0x3d, r28	; 61
    2582:	df 91       	pop	r29
    2584:	cf 91       	pop	r28
    2586:	08 95       	ret

00002588 <_Z9GoToSleeph>:

/*************************************************************************************************************/

/*************************************************************************************************************/

void GoToSleep(BOOL shortOrLong){
    2588:	cf 93       	push	r28
    258a:	df 93       	push	r29
    258c:	00 d0       	rcall	.+0      	; 0x258e <_Z9GoToSleeph+0x6>
    258e:	00 d0       	rcall	.+0      	; 0x2590 <_Z9GoToSleeph+0x8>
    2590:	0f 92       	push	r0
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
    2596:	8d 83       	std	Y+5, r24	; 0x05
		sei();
    2598:	78 94       	sei
		volatile int sleepTime, sleepTicks = 0;
    259a:	1c 82       	std	Y+4, r1	; 0x04
    259c:	1b 82       	std	Y+3, r1	; 0x03
		//If bool is true, we are in low power mode/backup, sleep for 60 seconds then check ADC again
		if (shortOrLong == fTrue){
    259e:	8d 81       	ldd	r24, Y+5	; 0x05
    25a0:	81 30       	cpi	r24, 0x01	; 1
    25a2:	49 f4       	brne	.+18     	; 0x25b6 <_Z9GoToSleeph+0x2e>
			sleepTime = SLEEP_TICKS_LOWV;
    25a4:	8c e0       	ldi	r24, 0x0C	; 12
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	9a 83       	std	Y+2, r25	; 0x02
    25aa:	89 83       	std	Y+1, r24	; 0x01
			EIMSK = 0;						//no int2
    25ac:	8d e3       	ldi	r24, 0x3D	; 61
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	fc 01       	movw	r30, r24
    25b2:	10 82       	st	Z, r1
    25b4:	0d c0       	rjmp	.+26     	; 0x25d0 <_Z9GoToSleeph+0x48>
		} else {
			sleepTime = SLEEP_TICKS_HIGHV;
    25b6:	8a e0       	ldi	r24, 0x0A	; 10
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	9a 83       	std	Y+2, r25	; 0x02
    25bc:	89 83       	std	Y+1, r24	; 0x01
			EIMSK |= (1 << INT2);			//int2 is allowed.
    25be:	8d e3       	ldi	r24, 0x3D	; 61
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	2d e3       	ldi	r18, 0x3D	; 61
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	f9 01       	movw	r30, r18
    25c8:	20 81       	ld	r18, Z
    25ca:	24 60       	ori	r18, 0x04	; 4
    25cc:	fc 01       	movw	r30, r24
    25ce:	20 83       	st	Z, r18
		}
		//Turn off status LED, put on TIM2 led
		prtSTATUSled &= ~(1 << bnSTATUSled);
    25d0:	88 e2       	ldi	r24, 0x28	; 40
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	28 e2       	ldi	r18, 0x28	; 40
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	f9 01       	movw	r30, r18
    25da:	20 81       	ld	r18, Z
    25dc:	2b 7f       	andi	r18, 0xFB	; 251
    25de:	fc 01       	movw	r30, r24
    25e0:	20 83       	st	Z, r18
		prtSLEEPled |= (1 << bnSLEEPled);
    25e2:	8b e2       	ldi	r24, 0x2B	; 43
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	2b e2       	ldi	r18, 0x2B	; 43
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	f9 01       	movw	r30, r18
    25ec:	20 81       	ld	r18, Z
    25ee:	20 68       	ori	r18, 0x80	; 128
    25f0:	fc 01       	movw	r30, r24
    25f2:	20 83       	st	Z, r18
		
		//Set to power save, then enable
		SMCR = (1 << SM1)|(1 << SM0);
    25f4:	83 e5       	ldi	r24, 0x53	; 83
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	26 e0       	ldi	r18, 0x06	; 6
    25fa:	fc 01       	movw	r30, r24
    25fc:	20 83       	st	Z, r18
		SMCR |= (1 << SE);
    25fe:	83 e5       	ldi	r24, 0x53	; 83
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	23 e5       	ldi	r18, 0x53	; 83
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	f9 01       	movw	r30, r18
    2608:	20 81       	ld	r18, Z
    260a:	21 60       	ori	r18, 0x01	; 1
    260c:	fc 01       	movw	r30, r24
    260e:	20 83       	st	Z, r18
		
		//Give time to registers
		Wait_ms(1);
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <_Z7Wait_msi>
		//Go to sleep
		while (sleepTicks < sleepTime && flagGoToSleep){
    2618:	06 c0       	rjmp	.+12     	; 0x2626 <_Z9GoToSleeph+0x9e>
			asm volatile("SLEEP");
    261a:	88 95       	sleep
			sleepTicks++;
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	9c 81       	ldd	r25, Y+4	; 0x04
    2620:	01 96       	adiw	r24, 0x01	; 1
    2622:	9c 83       	std	Y+4, r25	; 0x04
    2624:	8b 83       	std	Y+3, r24	; 0x03
		SMCR |= (1 << SE);
		
		//Give time to registers
		Wait_ms(1);
		//Go to sleep
		while (sleepTicks < sleepTime && flagGoToSleep){
    2626:	2b 81       	ldd	r18, Y+3	; 0x03
    2628:	3c 81       	ldd	r19, Y+4	; 0x04
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	9a 81       	ldd	r25, Y+2	; 0x02
    262e:	28 17       	cp	r18, r24
    2630:	39 07       	cpc	r19, r25
    2632:	34 f4       	brge	.+12     	; 0x2640 <_Z9GoToSleeph+0xb8>
    2634:	80 91 ae 01 	lds	r24, 0x01AE
    2638:	88 23       	and	r24, r24
    263a:	11 f0       	breq	.+4      	; 0x2640 <_Z9GoToSleeph+0xb8>
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	01 c0       	rjmp	.+2      	; 0x2642 <_Z9GoToSleeph+0xba>
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	88 23       	and	r24, r24
    2644:	51 f7       	brne	.-44     	; 0x261a <_Z9GoToSleeph+0x92>
			asm volatile("SLEEP");
			sleepTicks++;
		} //endwhile
		
		//Give it time to power back on
		Wait_ms(10);
    2646:	8a e0       	ldi	r24, 0x0A	; 10
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <_Z7Wait_msi>
		
		//Done sleeping, turn off sleeping led
		prtSLEEPled &= ~(1 << bnSLEEPled);
    264e:	8b e2       	ldi	r24, 0x2B	; 43
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	2b e2       	ldi	r18, 0x2B	; 43
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	f9 01       	movw	r30, r18
    2658:	20 81       	ld	r18, Z
    265a:	2f 77       	andi	r18, 0x7F	; 127
    265c:	fc 01       	movw	r30, r24
    265e:	20 83       	st	Z, r18
		prtSTATUSled |= (1 << bnSTATUSled);
    2660:	88 e2       	ldi	r24, 0x28	; 40
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	28 e2       	ldi	r18, 0x28	; 40
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	f9 01       	movw	r30, r18
    266a:	20 81       	ld	r18, Z
    266c:	24 60       	ori	r18, 0x04	; 4
    266e:	fc 01       	movw	r30, r24
    2670:	20 83       	st	Z, r18
}
    2672:	0f 90       	pop	r0
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	0f 90       	pop	r0
    267a:	0f 90       	pop	r0
    267c:	df 91       	pop	r29
    267e:	cf 91       	pop	r28
    2680:	08 95       	ret

00002682 <_Z7TakeADCv>:
/*************************************************************************************************************/

void TakeADC(){
    2682:	cf 93       	push	r28
    2684:	df 93       	push	r29
    2686:	00 d0       	rcall	.+0      	; 0x2688 <_Z7TakeADCv+0x6>
    2688:	00 d0       	rcall	.+0      	; 0x268a <_Z7TakeADCv+0x8>
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
	WORD adcReading = 0;
    268e:	1c 82       	std	Y+4, r1	; 0x04
    2690:	1b 82       	std	Y+3, r1	; 0x03
	
	cli();
    2692:	f8 94       	cli
	//Turn Power on to ADC
	PRR0 &= ~(1 << PRADC);	
    2694:	84 e6       	ldi	r24, 0x64	; 100
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	24 e6       	ldi	r18, 0x64	; 100
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	f9 01       	movw	r30, r18
    269e:	20 81       	ld	r18, Z
    26a0:	2e 7f       	andi	r18, 0xFE	; 254
    26a2:	fc 01       	movw	r30, r24
    26a4:	20 83       	st	Z, r18
	ADMUX |= (1 << REFS1);	//internal 1.1V reference
    26a6:	8c e7       	ldi	r24, 0x7C	; 124
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	2c e7       	ldi	r18, 0x7C	; 124
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	f9 01       	movw	r30, r18
    26b0:	20 81       	ld	r18, Z
    26b2:	20 68       	ori	r18, 0x80	; 128
    26b4:	fc 01       	movw	r30, r24
    26b6:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADEN)|(1 << ADPS2);			//clkIO/16
    26b8:	8a e7       	ldi	r24, 0x7A	; 122
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	2a e7       	ldi	r18, 0x7A	; 122
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	f9 01       	movw	r30, r18
    26c2:	20 81       	ld	r18, Z
    26c4:	24 68       	ori	r18, 0x84	; 132
    26c6:	fc 01       	movw	r30, r24
    26c8:	20 83       	st	Z, r18
	DIDR0 = 0xFE;								//disable all ADC's except ADC0
    26ca:	8e e7       	ldi	r24, 0x7E	; 126
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	2e ef       	ldi	r18, 0xFE	; 254
    26d0:	fc 01       	movw	r30, r24
    26d2:	20 83       	st	Z, r18
	Wait_ms(5);									//Tim for registers to setup
    26d4:	85 e0       	ldi	r24, 0x05	; 5
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <_Z7Wait_msi>
	
	//Run conversion twice, throw first one out
	for (int i = 0; i < 2; i++){ADCSRA |= (1 << ADSC); while (ADCSRA & (1 << ADSC));}	
    26dc:	1a 82       	std	Y+2, r1	; 0x02
    26de:	19 82       	std	Y+1, r1	; 0x01
    26e0:	1c c0       	rjmp	.+56     	; 0x271a <_Z7TakeADCv+0x98>
    26e2:	8a e7       	ldi	r24, 0x7A	; 122
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	2a e7       	ldi	r18, 0x7A	; 122
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	f9 01       	movw	r30, r18
    26ec:	20 81       	ld	r18, Z
    26ee:	20 64       	ori	r18, 0x40	; 64
    26f0:	fc 01       	movw	r30, r24
    26f2:	20 83       	st	Z, r18
    26f4:	8a e7       	ldi	r24, 0x7A	; 122
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	fc 01       	movw	r30, r24
    26fa:	80 81       	ld	r24, Z
    26fc:	88 2f       	mov	r24, r24
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	80 74       	andi	r24, 0x40	; 64
    2702:	90 70       	andi	r25, 0x00	; 0
    2704:	21 e0       	ldi	r18, 0x01	; 1
    2706:	00 97       	sbiw	r24, 0x00	; 0
    2708:	09 f4       	brne	.+2      	; 0x270c <_Z7TakeADCv+0x8a>
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	22 23       	and	r18, r18
    270e:	91 f7       	brne	.-28     	; 0x26f4 <_Z7TakeADCv+0x72>
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	9a 81       	ldd	r25, Y+2	; 0x02
    2714:	01 96       	adiw	r24, 0x01	; 1
    2716:	9a 83       	std	Y+2, r25	; 0x02
    2718:	89 83       	std	Y+1, r24	; 0x01
    271a:	21 e0       	ldi	r18, 0x01	; 1
    271c:	89 81       	ldd	r24, Y+1	; 0x01
    271e:	9a 81       	ldd	r25, Y+2	; 0x02
    2720:	82 30       	cpi	r24, 0x02	; 2
    2722:	91 05       	cpc	r25, r1
    2724:	0c f0       	brlt	.+2      	; 0x2728 <_Z7TakeADCv+0xa6>
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	22 23       	and	r18, r18
    272a:	d9 f6       	brne	.-74     	; 0x26e2 <_Z7TakeADCv+0x60>
	
	//Put conversion into buffer
	adcReading = ADCL;
    272c:	88 e7       	ldi	r24, 0x78	; 120
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	fc 01       	movw	r30, r24
    2732:	80 81       	ld	r24, Z
    2734:	88 2f       	mov	r24, r24
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	9c 83       	std	Y+4, r25	; 0x04
    273a:	8b 83       	std	Y+3, r24	; 0x03
	adcReading |= (ADCH << 8);
    273c:	89 e7       	ldi	r24, 0x79	; 121
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	fc 01       	movw	r30, r24
    2742:	80 81       	ld	r24, Z
    2744:	88 2f       	mov	r24, r24
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	98 2f       	mov	r25, r24
    274a:	88 27       	eor	r24, r24
    274c:	2b 81       	ldd	r18, Y+3	; 0x03
    274e:	3c 81       	ldd	r19, Y+4	; 0x04
    2750:	82 2b       	or	r24, r18
    2752:	93 2b       	or	r25, r19
    2754:	9c 83       	std	Y+4, r25	; 0x04
    2756:	8b 83       	std	Y+3, r24	; 0x03
	
	//Re-enable interrupts
	sei();
    2758:	78 94       	sei
	
	//Disable ADC hardware/registers
	ADCSRA = 0;
    275a:	8a e7       	ldi	r24, 0x7A	; 122
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	fc 01       	movw	r30, r24
    2760:	10 82       	st	Z, r1
	ADMUX = 0;
    2762:	8c e7       	ldi	r24, 0x7C	; 124
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	fc 01       	movw	r30, r24
    2768:	10 82       	st	Z, r1
	DIDR0 |= (1 << ADC0D);
    276a:	8e e7       	ldi	r24, 0x7E	; 126
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	2e e7       	ldi	r18, 0x7E	; 126
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	f9 01       	movw	r30, r18
    2774:	20 81       	ld	r18, Z
    2776:	21 60       	ori	r18, 0x01	; 1
    2778:	fc 01       	movw	r30, r24
    277a:	20 83       	st	Z, r18
	
	//Turn off power
	PRR0 |= (1 << PRADC);
    277c:	84 e6       	ldi	r24, 0x64	; 100
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	24 e6       	ldi	r18, 0x64	; 100
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	f9 01       	movw	r30, r18
    2786:	20 81       	ld	r18, Z
    2788:	21 60       	ori	r18, 0x01	; 1
    278a:	fc 01       	movw	r30, r24
    278c:	20 83       	st	Z, r18
	
	//Do work
	Wait_ms(5);
    278e:	85 e0       	ldi	r24, 0x05	; 5
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <_Z7Wait_msi>

	flagGoodVolts = (adcReading < LOW_BATT_ADC) ? fFalse : fTrue;
    2796:	21 e0       	ldi	r18, 0x01	; 1
    2798:	8b 81       	ldd	r24, Y+3	; 0x03
    279a:	9c 81       	ldd	r25, Y+4	; 0x04
    279c:	f1 e0       	ldi	r31, 0x01	; 1
    279e:	8c 32       	cpi	r24, 0x2C	; 44
    27a0:	9f 07       	cpc	r25, r31
    27a2:	08 f4       	brcc	.+2      	; 0x27a6 <_Z7TakeADCv+0x124>
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	20 93 bb 01 	sts	0x01BB, r18
	
	globalADC=adcReading;
    27aa:	8b 81       	ldd	r24, Y+3	; 0x03
    27ac:	9c 81       	ldd	r25, Y+4	; 0x04
    27ae:	90 93 83 01 	sts	0x0183, r25
    27b2:	80 93 82 01 	sts	0x0182, r24
}
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
    27bc:	0f 90       	pop	r0
    27be:	df 91       	pop	r29
    27c0:	cf 91       	pop	r28
    27c2:	08 95       	ret

000027c4 <_Z7GetTempv>:

/*************************************************************************************************************/

void GetTemp(){
    27c4:	cf 93       	push	r28
    27c6:	df 93       	push	r29
    27c8:	00 d0       	rcall	.+0      	; 0x27ca <_Z7GetTempv+0x6>
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
	WORD rawTemp = 0;
    27ce:	1a 82       	std	Y+2, r1	; 0x02
    27d0:	19 82       	std	Y+1, r1	; 0x01
	
	//Power on temp monitor, let it settle
	//prtTEMPen |= (1 << bnTEMPen);
	PRR0 &= ~(1 << PRSPI);	
    27d2:	84 e6       	ldi	r24, 0x64	; 100
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	24 e6       	ldi	r18, 0x64	; 100
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	f9 01       	movw	r30, r18
    27dc:	20 81       	ld	r18, Z
    27de:	2b 7f       	andi	r18, 0xFB	; 251
    27e0:	fc 01       	movw	r30, r24
    27e2:	20 83       	st	Z, r18
	SPCR0 |= (1 << MSTR0)|(1 << SPE0)|(1 << SPR00);			//enables SPI, master, fck/64
    27e4:	8c e4       	ldi	r24, 0x4C	; 76
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	2c e4       	ldi	r18, 0x4C	; 76
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	f9 01       	movw	r30, r18
    27ee:	20 81       	ld	r18, Z
    27f0:	21 65       	ori	r18, 0x51	; 81
    27f2:	fc 01       	movw	r30, r24
    27f4:	20 83       	st	Z, r18
	Wait_ms(200);
    27f6:	88 ec       	ldi	r24, 0xC8	; 200
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <_Z7Wait_msi>
	//Slave select goes low, sck goes low,  to signal start of transmission
	prtSpi0 &= ~((1 << bnSck0)|(1 << bnSS0));
    27fe:	85 e2       	ldi	r24, 0x25	; 37
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	25 e2       	ldi	r18, 0x25	; 37
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	f9 01       	movw	r30, r18
    2808:	20 81       	ld	r18, Z
    280a:	2f 76       	andi	r18, 0x6F	; 111
    280c:	fc 01       	movw	r30, r24
    280e:	20 83       	st	Z, r18
	
	cli();
    2810:	f8 94       	cli
	//Write to buffer to start transmission
	SPDR0 = 0x00;
    2812:	8e e4       	ldi	r24, 0x4E	; 78
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	fc 01       	movw	r30, r24
    2818:	10 82       	st	Z, r1
	//Wait for data to be receieved.
	while (!(SPSR0 & (1 << SPIF0)));
    281a:	00 00       	nop
    281c:	8d e4       	ldi	r24, 0x4D	; 77
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	fc 01       	movw	r30, r24
    2822:	80 81       	ld	r24, Z
    2824:	80 95       	com	r24
    2826:	88 1f       	adc	r24, r24
    2828:	88 27       	eor	r24, r24
    282a:	88 1f       	adc	r24, r24
    282c:	88 23       	and	r24, r24
    282e:	b1 f7       	brne	.-20     	; 0x281c <_Z7GetTempv+0x58>
	rawTemp = (SPDR0 << 8);
    2830:	8e e4       	ldi	r24, 0x4E	; 78
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	fc 01       	movw	r30, r24
    2836:	80 81       	ld	r24, Z
    2838:	88 2f       	mov	r24, r24
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	98 2f       	mov	r25, r24
    283e:	88 27       	eor	r24, r24
    2840:	9a 83       	std	Y+2, r25	; 0x02
    2842:	89 83       	std	Y+1, r24	; 0x01
	SPDR0 = 0x00;
    2844:	8e e4       	ldi	r24, 0x4E	; 78
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	fc 01       	movw	r30, r24
    284a:	10 82       	st	Z, r1
	while (!(SPSR0 & (1 << SPIF0)));
    284c:	00 00       	nop
    284e:	8d e4       	ldi	r24, 0x4D	; 77
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	fc 01       	movw	r30, r24
    2854:	80 81       	ld	r24, Z
    2856:	80 95       	com	r24
    2858:	88 1f       	adc	r24, r24
    285a:	88 27       	eor	r24, r24
    285c:	88 1f       	adc	r24, r24
    285e:	88 23       	and	r24, r24
    2860:	b1 f7       	brne	.-20     	; 0x284e <_Z7GetTempv+0x8a>
	rawTemp |= SPDR0;
    2862:	8e e4       	ldi	r24, 0x4E	; 78
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	fc 01       	movw	r30, r24
    2868:	80 81       	ld	r24, Z
    286a:	88 2f       	mov	r24, r24
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	29 81       	ldd	r18, Y+1	; 0x01
    2870:	3a 81       	ldd	r19, Y+2	; 0x02
    2872:	82 2b       	or	r24, r18
    2874:	93 2b       	or	r25, r19
    2876:	9a 83       	std	Y+2, r25	; 0x02
    2878:	89 83       	std	Y+1, r24	; 0x01
	//Set flag to correct value.
	flagGoodTemp = (rawTemp < HIGH_TEMP) ? fTrue : fFalse;
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	9a 81       	ldd	r25, Y+2	; 0x02
    287e:	f2 e3       	ldi	r31, 0x32	; 50
    2880:	84 36       	cpi	r24, 0x64	; 100
    2882:	9f 07       	cpc	r25, r31
    2884:	10 f4       	brcc	.+4      	; 0x288a <_Z7GetTempv+0xc6>
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	01 c0       	rjmp	.+2      	; 0x288c <_Z7GetTempv+0xc8>
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	80 93 ba 01 	sts	0x01BA, r24
	//re enable interrupts
	sei();
    2890:	78 94       	sei
	
	//Bring SS high, clear SPCR0 register and turn power off to SPI and device
	prtSpi0 |= (1 << bnSS0)|(1 << bnSck0);
    2892:	85 e2       	ldi	r24, 0x25	; 37
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	25 e2       	ldi	r18, 0x25	; 37
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	f9 01       	movw	r30, r18
    289c:	20 81       	ld	r18, Z
    289e:	20 69       	ori	r18, 0x90	; 144
    28a0:	fc 01       	movw	r30, r24
    28a2:	20 83       	st	Z, r18
	SPCR0=0x00;	
    28a4:	8c e4       	ldi	r24, 0x4C	; 76
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	fc 01       	movw	r30, r24
    28aa:	10 82       	st	Z, r1
	//prtTEMPen &= ~(1 << bnTEMPen);
	PRR0 |= (1 << PRSPI);
    28ac:	84 e6       	ldi	r24, 0x64	; 100
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	24 e6       	ldi	r18, 0x64	; 100
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	f9 01       	movw	r30, r18
    28b6:	20 81       	ld	r18, Z
    28b8:	24 60       	ori	r18, 0x04	; 4
    28ba:	fc 01       	movw	r30, r24
    28bc:	20 83       	st	Z, r18

	globalTemp=rawTemp;
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	9a 81       	ldd	r25, Y+2	; 0x02
    28c2:	90 93 85 01 	sts	0x0185, r25
    28c6:	80 93 84 01 	sts	0x0184, r24
}
    28ca:	0f 90       	pop	r0
    28cc:	0f 90       	pop	r0
    28ce:	df 91       	pop	r29
    28d0:	cf 91       	pop	r28
    28d2:	08 95       	ret

000028d4 <_Z41__static_initialization_and_destruction_0ii>:
    28d4:	cf 93       	push	r28
    28d6:	df 93       	push	r29
    28d8:	00 d0       	rcall	.+0      	; 0x28da <_Z41__static_initialization_and_destruction_0ii+0x6>
    28da:	00 d0       	rcall	.+0      	; 0x28dc <_Z41__static_initialization_and_destruction_0ii+0x8>
    28dc:	cd b7       	in	r28, 0x3d	; 61
    28de:	de b7       	in	r29, 0x3e	; 62
    28e0:	9a 83       	std	Y+2, r25	; 0x02
    28e2:	89 83       	std	Y+1, r24	; 0x01
    28e4:	7c 83       	std	Y+4, r23	; 0x04
    28e6:	6b 83       	std	Y+3, r22	; 0x03
    28e8:	89 81       	ldd	r24, Y+1	; 0x01
    28ea:	9a 81       	ldd	r25, Y+2	; 0x02
    28ec:	81 30       	cpi	r24, 0x01	; 1
    28ee:	91 05       	cpc	r25, r1
    28f0:	51 f4       	brne	.+20     	; 0x2906 <_Z41__static_initialization_and_destruction_0ii+0x32>
    28f2:	8b 81       	ldd	r24, Y+3	; 0x03
    28f4:	9c 81       	ldd	r25, Y+4	; 0x04
    28f6:	2f ef       	ldi	r18, 0xFF	; 255
    28f8:	8f 3f       	cpi	r24, 0xFF	; 255
    28fa:	92 07       	cpc	r25, r18
    28fc:	21 f4       	brne	.+8      	; 0x2906 <_Z41__static_initialization_and_destruction_0ii+0x32>

/*********************************************GLOBAL VARIABLES***************************************************/
/****************************************************************************************************************/
volatile WORD globalADC=0, globalTemp=0;
//volatile int timeOut=0;
myTime currentTime;  //The clock, MUST BE GLOBAL. In final program, will initiate with NOTHING, then GPS will update on the actual time into beaglebone, beaglebone pings us, then dunzo OR have UART into this as well, then get time and be done.
    28fe:	86 e8       	ldi	r24, 0x86	; 134
    2900:	91 e0       	ldi	r25, 0x01	; 1
    2902:	0e 94 15 04 	call	0x82a	; 0x82a <_ZN6myTimeC1Ev>
	SPCR0=0x00;	
	//prtTEMPen &= ~(1 << bnTEMPen);
	PRR0 |= (1 << PRSPI);

	globalTemp=rawTemp;
}
    2906:	0f 90       	pop	r0
    2908:	0f 90       	pop	r0
    290a:	0f 90       	pop	r0
    290c:	0f 90       	pop	r0
    290e:	df 91       	pop	r29
    2910:	cf 91       	pop	r28
    2912:	08 95       	ret

00002914 <_GLOBAL__sub_I__ZN6myDateC2Ev>:
    2914:	cf 93       	push	r28
    2916:	df 93       	push	r29
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	6f ef       	ldi	r22, 0xFF	; 255
    2922:	7f ef       	ldi	r23, 0xFF	; 255
    2924:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <_Z41__static_initialization_and_destruction_0ii>
    2928:	df 91       	pop	r29
    292a:	cf 91       	pop	r28
    292c:	08 95       	ret

0000292e <__udivmodqi4>:
    292e:	99 1b       	sub	r25, r25
    2930:	79 e0       	ldi	r23, 0x09	; 9
    2932:	04 c0       	rjmp	.+8      	; 0x293c <__udivmodqi4_ep>

00002934 <__udivmodqi4_loop>:
    2934:	99 1f       	adc	r25, r25
    2936:	96 17       	cp	r25, r22
    2938:	08 f0       	brcs	.+2      	; 0x293c <__udivmodqi4_ep>
    293a:	96 1b       	sub	r25, r22

0000293c <__udivmodqi4_ep>:
    293c:	88 1f       	adc	r24, r24
    293e:	7a 95       	dec	r23
    2940:	c9 f7       	brne	.-14     	; 0x2934 <__udivmodqi4_loop>
    2942:	80 95       	com	r24
    2944:	08 95       	ret

00002946 <__divmodhi4>:
    2946:	97 fb       	bst	r25, 7
    2948:	09 2e       	mov	r0, r25
    294a:	07 26       	eor	r0, r23
    294c:	0a d0       	rcall	.+20     	; 0x2962 <__divmodhi4_neg1>
    294e:	77 fd       	sbrc	r23, 7
    2950:	04 d0       	rcall	.+8      	; 0x295a <__divmodhi4_neg2>
    2952:	0c d0       	rcall	.+24     	; 0x296c <__udivmodhi4>
    2954:	06 d0       	rcall	.+12     	; 0x2962 <__divmodhi4_neg1>
    2956:	00 20       	and	r0, r0
    2958:	1a f4       	brpl	.+6      	; 0x2960 <__divmodhi4_exit>

0000295a <__divmodhi4_neg2>:
    295a:	70 95       	com	r23
    295c:	61 95       	neg	r22
    295e:	7f 4f       	sbci	r23, 0xFF	; 255

00002960 <__divmodhi4_exit>:
    2960:	08 95       	ret

00002962 <__divmodhi4_neg1>:
    2962:	f6 f7       	brtc	.-4      	; 0x2960 <__divmodhi4_exit>
    2964:	90 95       	com	r25
    2966:	81 95       	neg	r24
    2968:	9f 4f       	sbci	r25, 0xFF	; 255
    296a:	08 95       	ret

0000296c <__udivmodhi4>:
    296c:	aa 1b       	sub	r26, r26
    296e:	bb 1b       	sub	r27, r27
    2970:	51 e1       	ldi	r21, 0x11	; 17
    2972:	07 c0       	rjmp	.+14     	; 0x2982 <__udivmodhi4_ep>

00002974 <__udivmodhi4_loop>:
    2974:	aa 1f       	adc	r26, r26
    2976:	bb 1f       	adc	r27, r27
    2978:	a6 17       	cp	r26, r22
    297a:	b7 07       	cpc	r27, r23
    297c:	10 f0       	brcs	.+4      	; 0x2982 <__udivmodhi4_ep>
    297e:	a6 1b       	sub	r26, r22
    2980:	b7 0b       	sbc	r27, r23

00002982 <__udivmodhi4_ep>:
    2982:	88 1f       	adc	r24, r24
    2984:	99 1f       	adc	r25, r25
    2986:	5a 95       	dec	r21
    2988:	a9 f7       	brne	.-22     	; 0x2974 <__udivmodhi4_loop>
    298a:	80 95       	com	r24
    298c:	90 95       	com	r25
    298e:	bc 01       	movw	r22, r24
    2990:	cd 01       	movw	r24, r26
    2992:	08 95       	ret

00002994 <__tablejump2__>:
    2994:	ee 0f       	add	r30, r30
    2996:	ff 1f       	adc	r31, r31

00002998 <__tablejump__>:
    2998:	05 90       	lpm	r0, Z+
    299a:	f4 91       	lpm	r31, Z
    299c:	e0 2d       	mov	r30, r0
    299e:	09 94       	ijmp

000029a0 <atoi>:
    29a0:	fc 01       	movw	r30, r24
    29a2:	88 27       	eor	r24, r24
    29a4:	99 27       	eor	r25, r25
    29a6:	e8 94       	clt
    29a8:	21 91       	ld	r18, Z+
    29aa:	20 32       	cpi	r18, 0x20	; 32
    29ac:	e9 f3       	breq	.-6      	; 0x29a8 <atoi+0x8>
    29ae:	29 30       	cpi	r18, 0x09	; 9
    29b0:	10 f0       	brcs	.+4      	; 0x29b6 <atoi+0x16>
    29b2:	2e 30       	cpi	r18, 0x0E	; 14
    29b4:	c8 f3       	brcs	.-14     	; 0x29a8 <atoi+0x8>
    29b6:	2b 32       	cpi	r18, 0x2B	; 43
    29b8:	41 f0       	breq	.+16     	; 0x29ca <atoi+0x2a>
    29ba:	2d 32       	cpi	r18, 0x2D	; 45
    29bc:	39 f4       	brne	.+14     	; 0x29cc <atoi+0x2c>
    29be:	68 94       	set
    29c0:	04 c0       	rjmp	.+8      	; 0x29ca <atoi+0x2a>
    29c2:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <__mulhi_const_10>
    29c6:	82 0f       	add	r24, r18
    29c8:	91 1d       	adc	r25, r1
    29ca:	21 91       	ld	r18, Z+
    29cc:	20 53       	subi	r18, 0x30	; 48
    29ce:	2a 30       	cpi	r18, 0x0A	; 10
    29d0:	c0 f3       	brcs	.-16     	; 0x29c2 <atoi+0x22>
    29d2:	1e f4       	brtc	.+6      	; 0x29da <atoi+0x3a>
    29d4:	90 95       	com	r25
    29d6:	81 95       	neg	r24
    29d8:	9f 4f       	sbci	r25, 0xFF	; 255
    29da:	08 95       	ret

000029dc <strcat>:
    29dc:	fb 01       	movw	r30, r22
    29de:	dc 01       	movw	r26, r24
    29e0:	0d 90       	ld	r0, X+
    29e2:	00 20       	and	r0, r0
    29e4:	e9 f7       	brne	.-6      	; 0x29e0 <strcat+0x4>
    29e6:	11 97       	sbiw	r26, 0x01	; 1
    29e8:	01 90       	ld	r0, Z+
    29ea:	0d 92       	st	X+, r0
    29ec:	00 20       	and	r0, r0
    29ee:	e1 f7       	brne	.-8      	; 0x29e8 <strcat+0xc>
    29f0:	08 95       	ret

000029f2 <strcmp>:
    29f2:	fb 01       	movw	r30, r22
    29f4:	dc 01       	movw	r26, r24
    29f6:	8d 91       	ld	r24, X+
    29f8:	01 90       	ld	r0, Z+
    29fa:	80 19       	sub	r24, r0
    29fc:	01 10       	cpse	r0, r1
    29fe:	d9 f3       	breq	.-10     	; 0x29f6 <strcmp+0x4>
    2a00:	99 0b       	sbc	r25, r25
    2a02:	08 95       	ret

00002a04 <strcpy>:
    2a04:	fb 01       	movw	r30, r22
    2a06:	dc 01       	movw	r26, r24
    2a08:	01 90       	ld	r0, Z+
    2a0a:	0d 92       	st	X+, r0
    2a0c:	00 20       	and	r0, r0
    2a0e:	e1 f7       	brne	.-8      	; 0x2a08 <strcpy+0x4>
    2a10:	08 95       	ret

00002a12 <itoa>:
    2a12:	fb 01       	movw	r30, r22
    2a14:	9f 01       	movw	r18, r30
    2a16:	e8 94       	clt
    2a18:	42 30       	cpi	r20, 0x02	; 2
    2a1a:	c4 f0       	brlt	.+48     	; 0x2a4c <itoa+0x3a>
    2a1c:	45 32       	cpi	r20, 0x25	; 37
    2a1e:	b4 f4       	brge	.+44     	; 0x2a4c <itoa+0x3a>
    2a20:	4a 30       	cpi	r20, 0x0A	; 10
    2a22:	29 f4       	brne	.+10     	; 0x2a2e <itoa+0x1c>
    2a24:	97 fb       	bst	r25, 7
    2a26:	1e f4       	brtc	.+6      	; 0x2a2e <itoa+0x1c>
    2a28:	90 95       	com	r25
    2a2a:	81 95       	neg	r24
    2a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a2e:	64 2f       	mov	r22, r20
    2a30:	77 27       	eor	r23, r23
    2a32:	0e 94 b6 14 	call	0x296c	; 0x296c <__udivmodhi4>
    2a36:	80 5d       	subi	r24, 0xD0	; 208
    2a38:	8a 33       	cpi	r24, 0x3A	; 58
    2a3a:	0c f0       	brlt	.+2      	; 0x2a3e <itoa+0x2c>
    2a3c:	89 5d       	subi	r24, 0xD9	; 217
    2a3e:	81 93       	st	Z+, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	00 97       	sbiw	r24, 0x00	; 0
    2a44:	a1 f7       	brne	.-24     	; 0x2a2e <itoa+0x1c>
    2a46:	16 f4       	brtc	.+4      	; 0x2a4c <itoa+0x3a>
    2a48:	5d e2       	ldi	r21, 0x2D	; 45
    2a4a:	51 93       	st	Z+, r21
    2a4c:	10 82       	st	Z, r1
    2a4e:	c9 01       	movw	r24, r18
    2a50:	0c 94 53 15 	jmp	0x2aa6	; 0x2aa6 <strrev>

00002a54 <__mulhi_const_10>:
    2a54:	7a e0       	ldi	r23, 0x0A	; 10
    2a56:	97 9f       	mul	r25, r23
    2a58:	90 2d       	mov	r25, r0
    2a5a:	87 9f       	mul	r24, r23
    2a5c:	80 2d       	mov	r24, r0
    2a5e:	91 0d       	add	r25, r1
    2a60:	11 24       	eor	r1, r1
    2a62:	08 95       	ret

00002a64 <__eerd_byte_m324pa>:
    2a64:	f9 99       	sbic	0x1f, 1	; 31
    2a66:	fe cf       	rjmp	.-4      	; 0x2a64 <__eerd_byte_m324pa>
    2a68:	92 bd       	out	0x22, r25	; 34
    2a6a:	81 bd       	out	0x21, r24	; 33
    2a6c:	f8 9a       	sbi	0x1f, 0	; 31
    2a6e:	99 27       	eor	r25, r25
    2a70:	80 b5       	in	r24, 0x20	; 32
    2a72:	08 95       	ret

00002a74 <__eerd_word_m324pa>:
    2a74:	a8 e1       	ldi	r26, 0x18	; 24
    2a76:	b0 e0       	ldi	r27, 0x00	; 0
    2a78:	42 e0       	ldi	r20, 0x02	; 2
    2a7a:	50 e0       	ldi	r21, 0x00	; 0
    2a7c:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__eerd_blraw_m324pa>

00002a80 <__eewr_byte_m324pa>:
    2a80:	26 2f       	mov	r18, r22

00002a82 <__eewr_r18_m324pa>:
    2a82:	f9 99       	sbic	0x1f, 1	; 31
    2a84:	fe cf       	rjmp	.-4      	; 0x2a82 <__eewr_r18_m324pa>
    2a86:	1f ba       	out	0x1f, r1	; 31
    2a88:	92 bd       	out	0x22, r25	; 34
    2a8a:	81 bd       	out	0x21, r24	; 33
    2a8c:	20 bd       	out	0x20, r18	; 32
    2a8e:	0f b6       	in	r0, 0x3f	; 63
    2a90:	f8 94       	cli
    2a92:	fa 9a       	sbi	0x1f, 2	; 31
    2a94:	f9 9a       	sbi	0x1f, 1	; 31
    2a96:	0f be       	out	0x3f, r0	; 63
    2a98:	01 96       	adiw	r24, 0x01	; 1
    2a9a:	08 95       	ret

00002a9c <__eewr_word_m324pa>:
    2a9c:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__eewr_byte_m324pa>
    2aa0:	27 2f       	mov	r18, r23
    2aa2:	0c 94 41 15 	jmp	0x2a82	; 0x2a82 <__eewr_r18_m324pa>

00002aa6 <strrev>:
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	fc 01       	movw	r30, r24
    2aaa:	67 2f       	mov	r22, r23
    2aac:	71 91       	ld	r23, Z+
    2aae:	77 23       	and	r23, r23
    2ab0:	e1 f7       	brne	.-8      	; 0x2aaa <strrev+0x4>
    2ab2:	32 97       	sbiw	r30, 0x02	; 2
    2ab4:	04 c0       	rjmp	.+8      	; 0x2abe <strrev+0x18>
    2ab6:	7c 91       	ld	r23, X
    2ab8:	6d 93       	st	X+, r22
    2aba:	70 83       	st	Z, r23
    2abc:	62 91       	ld	r22, -Z
    2abe:	ae 17       	cp	r26, r30
    2ac0:	bf 07       	cpc	r27, r31
    2ac2:	c8 f3       	brcs	.-14     	; 0x2ab6 <strrev+0x10>
    2ac4:	08 95       	ret

00002ac6 <__eerd_block_m324pa>:
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22

00002aca <__eerd_blraw_m324pa>:
    2aca:	fc 01       	movw	r30, r24
    2acc:	f9 99       	sbic	0x1f, 1	; 31
    2ace:	fe cf       	rjmp	.-4      	; 0x2acc <__eerd_blraw_m324pa+0x2>
    2ad0:	06 c0       	rjmp	.+12     	; 0x2ade <__eerd_blraw_m324pa+0x14>
    2ad2:	f2 bd       	out	0x22, r31	; 34
    2ad4:	e1 bd       	out	0x21, r30	; 33
    2ad6:	f8 9a       	sbi	0x1f, 0	; 31
    2ad8:	31 96       	adiw	r30, 0x01	; 1
    2ada:	00 b4       	in	r0, 0x20	; 32
    2adc:	0d 92       	st	X+, r0
    2ade:	41 50       	subi	r20, 0x01	; 1
    2ae0:	50 40       	sbci	r21, 0x00	; 0
    2ae2:	b8 f7       	brcc	.-18     	; 0x2ad2 <__eerd_blraw_m324pa+0x8>
    2ae4:	08 95       	ret

00002ae6 <_exit>:
    2ae6:	f8 94       	cli

00002ae8 <__stop_program>:
    2ae8:	ff cf       	rjmp	.-2      	; 0x2ae8 <__stop_program>
