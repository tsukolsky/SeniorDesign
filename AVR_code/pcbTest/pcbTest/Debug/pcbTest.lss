
pcbTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  000004ce  00000562  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800200  00800200  00000562  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  00000564  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000047a  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000012f  00000000  00000000  000011ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030f  00000000  00000000  000012f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  00001608  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000191  00000000  00000000  00001750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000028e  00000000  00000000  000018e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_8>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_15>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee ec       	ldi	r30, 0xCE	; 206
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
 110:	12 e0       	ldi	r17, 0x02	; 2
 112:	a0 e0       	ldi	r26, 0x00	; 0
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	a5 30       	cpi	r26, 0x05	; 5
 11c:	b1 07       	cpc	r27, r17
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 de 00 	call	0x1bc	; 0x1bc <main>
 124:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <__vector_15>:
uint16_t currentSecond=0;
uint16_t globalADC=0;
uint8_t flagKill;

/*--------------------------Interrupt Service Routines------------------------------------------------------------------------------------*/
ISR(TIMER2_OVF_vect){
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	00 90 5b 00 	lds	r0, 0x005B
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	2f 93       	push	r18
 13e:	3f 93       	push	r19
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
/*	static unsigned int counter=4;	
	prtSLEEPled ^= (1 << bnSLEEPled);	//toggles sleep led at .5Hz
*/	
	prtDEBUGled2 ^= (1 << bnDBG10);		//toggles sleep LED
 150:	85 e2       	ldi	r24, 0x25	; 37
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	25 e2       	ldi	r18, 0x25	; 37
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	f9 01       	movw	r30, r18
 15a:	30 81       	ld	r19, Z
 15c:	20 e2       	ldi	r18, 0x20	; 32
 15e:	23 27       	eor	r18, r19
 160:	fc 01       	movw	r30, r24
 162:	20 83       	st	Z, r18
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	ff 91       	pop	r31
 16a:	ef 91       	pop	r30
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	00 92 5b 00 	sts	0x005B, r0
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <__vector_8>:

ISR(INT7_vect){
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	8f 93       	push	r24
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	cd b7       	in	r28, 0x3d	; 61
 196:	de b7       	in	r29, 0x3e	; 62
	if (flagKill){flagKill=0;}
 198:	80 91 04 02 	lds	r24, 0x0204
 19c:	88 23       	and	r24, r24
 19e:	19 f0       	breq	.+6      	; 0x1a6 <__vector_8+0x22>
 1a0:	10 92 04 02 	sts	0x0204, r1
 1a4:	03 c0       	rjmp	.+6      	; 0x1ac <__vector_8+0x28>
	else{flagKill=1;}
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	80 93 04 02 	sts	0x0204, r24
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	8f 91       	pop	r24
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <main>:

int main(void)
{
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	0f 92       	push	r0
 1c2:	0f 92       	push	r0
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
	DeviceInit();
 1c8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <_Z10DeviceInitv>
	AppInit(MYUBRR);
 1cc:	83 e3       	ldi	r24, 0x33	; 51
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Z7AppInitj>
	Wait_ms(200);
 1d4:	88 ec       	ldi	r24, 0xC8	; 200
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 34 02 	call	0x468	; 0x468 <_Z7Wait_msi>
	EnableRTCTimer();
 1dc:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z14EnableRTCTimerv>
	uint8_t flagNormalMode=0, flagLowPower=1;	//On startup, in low power mode
 1e0:	19 82       	std	Y+1, r1	; 0x01
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	8a 83       	std	Y+2, r24	; 0x02
	
    while(1)
    {
		//Do nothing. If an interrupt comes in on GAVR_INT, go to sleep/power down.
		if (flagKill){killPower();}
 1e6:	80 91 04 02 	lds	r24, 0x0204
 1ea:	88 23       	and	r24, r24
 1ec:	19 f0       	breq	.+6      	; 0x1f4 <main+0x38>
 1ee:	0e 94 b4 01 	call	0x368	; 0x368 <_Z9killPowerv>
	AppInit(MYUBRR);
	Wait_ms(200);
	EnableRTCTimer();
	uint8_t flagNormalMode=0, flagLowPower=1;	//On startup, in low power mode
	
    while(1)
 1f2:	f9 cf       	rjmp	.-14     	; 0x1e6 <main+0x2a>
    {
		//Do nothing. If an interrupt comes in on GAVR_INT, go to sleep/power down.
		if (flagKill){killPower();}
		else {asm volatile("nop");}
 1f4:	00 00       	nop
	AppInit(MYUBRR);
	Wait_ms(200);
	EnableRTCTimer();
	uint8_t flagNormalMode=0, flagLowPower=1;	//On startup, in low power mode
	
    while(1)
 1f6:	f7 cf       	rjmp	.-18     	; 0x1e6 <main+0x2a>

000001f8 <_Z10DeviceInitv>:
		else {asm volatile("nop");}
    }
}

/*************************************************************************************************************/
void DeviceInit(){
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
	//Set all ports to input with no pull
	DDRA = 0;
 200:	81 e2       	ldi	r24, 0x21	; 33
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	fc 01       	movw	r30, r24
 206:	10 82       	st	Z, r1
	DDRB = 0;
 208:	84 e2       	ldi	r24, 0x24	; 36
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	fc 01       	movw	r30, r24
 20e:	10 82       	st	Z, r1
	DDRC = 0;
 210:	87 e2       	ldi	r24, 0x27	; 39
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	fc 01       	movw	r30, r24
 216:	10 82       	st	Z, r1
	DDRD = 0;
 218:	8a e2       	ldi	r24, 0x2A	; 42
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	fc 01       	movw	r30, r24
 21e:	10 82       	st	Z, r1

	DDRE = 0;
 220:	8d e2       	ldi	r24, 0x2D	; 45
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	fc 01       	movw	r30, r24
 226:	10 82       	st	Z, r1
	DDRF = 0;
 228:	80 e3       	ldi	r24, 0x30	; 48
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	fc 01       	movw	r30, r24
 22e:	10 82       	st	Z, r1
	DDRG = 0;
 230:	83 e3       	ldi	r24, 0x33	; 51
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	fc 01       	movw	r30, r24
 236:	10 82       	st	Z, r1
	DDRH = 0;
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	fc 01       	movw	r30, r24
 23e:	10 82       	st	Z, r1
	DDRJ = 0;
 240:	84 e0       	ldi	r24, 0x04	; 4
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	fc 01       	movw	r30, r24
 246:	10 82       	st	Z, r1
	DDRK = 0;
 248:	87 e0       	ldi	r24, 0x07	; 7
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	fc 01       	movw	r30, r24
 24e:	10 82       	st	Z, r1
	DDRL = 0;
 250:	8a e0       	ldi	r24, 0x0A	; 10
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	fc 01       	movw	r30, r24
 256:	10 82       	st	Z, r1
	
	PORTE = 0;
 258:	8e e2       	ldi	r24, 0x2E	; 46
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	fc 01       	movw	r30, r24
 25e:	10 82       	st	Z, r1
	PORTF = 0;
 260:	81 e3       	ldi	r24, 0x31	; 49
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	fc 01       	movw	r30, r24
 266:	10 82       	st	Z, r1
	PORTG = 0;
 268:	84 e3       	ldi	r24, 0x34	; 52
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	fc 01       	movw	r30, r24
 26e:	10 82       	st	Z, r1
	PORTH = 0;
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	fc 01       	movw	r30, r24
 276:	10 82       	st	Z, r1
	PORTJ = 0;
 278:	85 e0       	ldi	r24, 0x05	; 5
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	fc 01       	movw	r30, r24
 27e:	10 82       	st	Z, r1
	PORTK = 0;
 280:	88 e0       	ldi	r24, 0x08	; 8
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	fc 01       	movw	r30, r24
 286:	10 82       	st	Z, r1
	PORTL = 0;
 288:	8b e0       	ldi	r24, 0x0B	; 11
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	fc 01       	movw	r30, r24
 28e:	10 82       	st	Z, r1
	
	PORTA = 0;
 290:	82 e2       	ldi	r24, 0x22	; 34
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	fc 01       	movw	r30, r24
 296:	10 82       	st	Z, r1
	PORTB = 0;
 298:	85 e2       	ldi	r24, 0x25	; 37
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	fc 01       	movw	r30, r24
 29e:	10 82       	st	Z, r1
	PORTC = 0;
 2a0:	88 e2       	ldi	r24, 0x28	; 40
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	fc 01       	movw	r30, r24
 2a6:	10 82       	st	Z, r1
	PORTD = 0;
 2a8:	8b e2       	ldi	r24, 0x2B	; 43
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	fc 01       	movw	r30, r24
 2ae:	10 82       	st	Z, r1

}
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <_Z7AppInitj>:

/*************************************************************************************************************/
void AppInit(unsigned int ubrr){
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	0f 92       	push	r0
 2bc:	0f 92       	push	r0
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
 2c2:	9a 83       	std	Y+2, r25	; 0x02
 2c4:	89 83       	std	Y+1, r24	; 0x01
	
	//Set BAUD rate of UART
	UBRR0L = ubrr;   												//set low byte of baud rate
 2c6:	84 ec       	ldi	r24, 0xC4	; 196
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	29 81       	ldd	r18, Y+1	; 0x01
 2cc:	fc 01       	movw	r30, r24
 2ce:	20 83       	st	Z, r18
	UBRR0H = (ubrr >> 8);											//set high byte of baud rate
 2d0:	85 ec       	ldi	r24, 0xC5	; 197
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	29 81       	ldd	r18, Y+1	; 0x01
 2d6:	3a 81       	ldd	r19, Y+2	; 0x02
 2d8:	23 2f       	mov	r18, r19
 2da:	33 27       	eor	r19, r19
 2dc:	fc 01       	movw	r30, r24
 2de:	20 83       	st	Z, r18
	//UCSR0A |= (1 << U2X0);										//set high speed baud clock, in ASYNC mode
	
	//Enable UART_TX0 and UART_RX0
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);
 2e0:	81 ec       	ldi	r24, 0xC1	; 193
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	28 e1       	ldi	r18, 0x18	; 24
 2e6:	fc 01       	movw	r30, r24
 2e8:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);							//Asynchronous; 8 data bits, no parity
 2ea:	82 ec       	ldi	r24, 0xC2	; 194
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	26 e0       	ldi	r18, 0x06	; 6
 2f0:	fc 01       	movw	r30, r24
 2f2:	20 83       	st	Z, r18
	//UCSR0B |= (1 << RXCIE0);
	
	//Disable power to all peripherals
	PRR0 |= (1 << PRTWI)|(1 << PRTIM2)|(1 << PRTIM0)|(1 << PRUSART1)|(1 << PRTIM1)|(1 << PRADC)|(1 << PRSPI);  //Turn EVERYTHING off initially except USART0(UART0)
 2f4:	84 e6       	ldi	r24, 0x64	; 100
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	24 e6       	ldi	r18, 0x64	; 100
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	f9 01       	movw	r30, r18
 2fe:	20 81       	ld	r18, Z
 300:	2d 6e       	ori	r18, 0xED	; 237
 302:	fc 01       	movw	r30, r24
 304:	20 83       	st	Z, r18

	//Enable LEDs
	ddrDEBUGled |= 0xFF;
 306:	8a e0       	ldi	r24, 0x0A	; 10
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	fc 01       	movw	r30, r24
 30c:	80 81       	ld	r24, Z
 30e:	8a e0       	ldi	r24, 0x0A	; 10
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	2f ef       	ldi	r18, 0xFF	; 255
 314:	fc 01       	movw	r30, r24
 316:	20 83       	st	Z, r18
	prtDEBUGled = 0x00;
 318:	8b e0       	ldi	r24, 0x0B	; 11
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	fc 01       	movw	r30, r24
 31e:	10 82       	st	Z, r1
	ddrDEBUGled2 |= (1 << bnDBG10)|(1 << bnDBG9)|(1 << bnDBG8);
 320:	84 e2       	ldi	r24, 0x24	; 36
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	24 e2       	ldi	r18, 0x24	; 36
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	f9 01       	movw	r30, r18
 32a:	20 81       	ld	r18, Z
 32c:	20 6e       	ori	r18, 0xE0	; 224
 32e:	fc 01       	movw	r30, r24
 330:	20 83       	st	Z, r18

	//Enable INT7
	EICRB = (1 << ISC71)|(1 << ISC70);
 332:	8a e6       	ldi	r24, 0x6A	; 106
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	20 ec       	ldi	r18, 0xC0	; 192
 338:	fc 01       	movw	r30, r24
 33a:	20 83       	st	Z, r18
	EIMSK = (1 << INT7);
 33c:	8d e3       	ldi	r24, 0x3D	; 61
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	20 e8       	ldi	r18, 0x80	; 128
 342:	fc 01       	movw	r30, r24
 344:	20 83       	st	Z, r18
	
	//Show the WAVR that I have power and am operating
	prtWAVRio |= (1 << bnG0W3);
 346:	88 e0       	ldi	r24, 0x08	; 8
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	28 e0       	ldi	r18, 0x08	; 8
 34c:	31 e0       	ldi	r19, 0x01	; 1
 34e:	f9 01       	movw	r30, r18
 350:	20 81       	ld	r18, Z
 352:	21 60       	ori	r18, 0x01	; 1
 354:	fc 01       	movw	r30, r24
 356:	20 83       	st	Z, r18
	
	flagKill=0;
 358:	10 92 04 02 	sts	0x0204, r1
	
	sei();
 35c:	78 94       	sei
}
 35e:	0f 90       	pop	r0
 360:	0f 90       	pop	r0
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	08 95       	ret

00000368 <_Z9killPowerv>:

/*************************************************************************************************************/
void killPower(){
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	cd b7       	in	r28, 0x3d	; 61
 36e:	de b7       	in	r29, 0x3e	; 62
	//Set to power down, then enable
	prtDEBUGled |= (1 << bnDBG0);
 370:	8b e0       	ldi	r24, 0x0B	; 11
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	2b e0       	ldi	r18, 0x0B	; 11
 376:	31 e0       	ldi	r19, 0x01	; 1
 378:	f9 01       	movw	r30, r18
 37a:	20 81       	ld	r18, Z
 37c:	20 68       	ori	r18, 0x80	; 128
 37e:	fc 01       	movw	r30, r24
 380:	20 83       	st	Z, r18
	Wait_ms(1000);
 382:	88 ee       	ldi	r24, 0xE8	; 232
 384:	93 e0       	ldi	r25, 0x03	; 3
 386:	0e 94 34 02 	call	0x468	; 0x468 <_Z7Wait_msi>
	prtDEBUGled &= ~(1 << bnDBG0);
 38a:	8b e0       	ldi	r24, 0x0B	; 11
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	2b e0       	ldi	r18, 0x0B	; 11
 390:	31 e0       	ldi	r19, 0x01	; 1
 392:	f9 01       	movw	r30, r18
 394:	20 81       	ld	r18, Z
 396:	2f 77       	andi	r18, 0x7F	; 127
 398:	fc 01       	movw	r30, r24
 39a:	20 83       	st	Z, r18
	prtDEBUGled2 &= ~(1 << bnDBG10);
 39c:	85 e2       	ldi	r24, 0x25	; 37
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	25 e2       	ldi	r18, 0x25	; 37
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	f9 01       	movw	r30, r18
 3a6:	20 81       	ld	r18, Z
 3a8:	2f 7d       	andi	r18, 0xDF	; 223
 3aa:	fc 01       	movw	r30, r24
 3ac:	20 83       	st	Z, r18
	prtWAVRio &= ~(1 << bnG0W3);
 3ae:	88 e0       	ldi	r24, 0x08	; 8
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	28 e0       	ldi	r18, 0x08	; 8
 3b4:	31 e0       	ldi	r19, 0x01	; 1
 3b6:	f9 01       	movw	r30, r18
 3b8:	20 81       	ld	r18, Z
 3ba:	2e 7f       	andi	r18, 0xFE	; 254
 3bc:	fc 01       	movw	r30, r24
 3be:	20 83       	st	Z, r18
	SMCR = (1 << SM1);
 3c0:	83 e5       	ldi	r24, 0x53	; 83
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	24 e0       	ldi	r18, 0x04	; 4
 3c6:	fc 01       	movw	r30, r24
 3c8:	20 83       	st	Z, r18
	SMCR |= (1 << SE);
 3ca:	83 e5       	ldi	r24, 0x53	; 83
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	23 e5       	ldi	r18, 0x53	; 83
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	f9 01       	movw	r30, r18
 3d4:	20 81       	ld	r18, Z
 3d6:	21 60       	ori	r18, 0x01	; 1
 3d8:	fc 01       	movw	r30, r24
 3da:	20 83       	st	Z, r18
	Wait_ms(1);
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 34 02 	call	0x468	; 0x468 <_Z7Wait_msi>
	asm volatile("SLEEP");		//go into a power save. POwer is about to be killed.
 3e4:	88 95       	sleep
}
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <_Z14EnableRTCTimerv>:
/*************************************************************************************************************/
void EnableRTCTimer(){
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 3f0:	cd b7       	in	r28, 0x3d	; 61
 3f2:	de b7       	in	r29, 0x3e	; 62
	//Asynchronous should be done based on TOSC1 and TOSC2
	//Give power back to Timer2
	PRR0 &= ~(1 << PRTIM2);
 3f4:	84 e6       	ldi	r24, 0x64	; 100
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	24 e6       	ldi	r18, 0x64	; 100
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	f9 01       	movw	r30, r18
 3fe:	20 81       	ld	r18, Z
 400:	2f 7b       	andi	r18, 0xBF	; 191
 402:	fc 01       	movw	r30, r24
 404:	20 83       	st	Z, r18
	Wait_ms(1);	//give it time to power on
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 34 02 	call	0x468	; 0x468 <_Z7Wait_msi>
	
	//Set to Asynchronous mode, uses TOSC1/TOSC2 pins
	ASSR |= (1 << AS2);
 40e:	86 eb       	ldi	r24, 0xB6	; 182
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	26 eb       	ldi	r18, 0xB6	; 182
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	f9 01       	movw	r30, r18
 418:	20 81       	ld	r18, Z
 41a:	20 62       	ori	r18, 0x20	; 32
 41c:	fc 01       	movw	r30, r24
 41e:	20 83       	st	Z, r18
	
	//Set prescaler, initialize registers
	TCCR2B |= (1 << CS22)|(1 << CS20);	//128 prescaler, should click into overflow every second
 420:	81 eb       	ldi	r24, 0xB1	; 177
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	21 eb       	ldi	r18, 0xB1	; 177
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	f9 01       	movw	r30, r18
 42a:	20 81       	ld	r18, Z
 42c:	25 60       	ori	r18, 0x05	; 5
 42e:	fc 01       	movw	r30, r24
 430:	20 83       	st	Z, r18
	while ((ASSR & ((1 << TCR2BUB)|(1 << TCN2UB))));	//wait for it not to be busy
 432:	86 eb       	ldi	r24, 0xB6	; 182
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	fc 01       	movw	r30, r24
 438:	80 81       	ld	r24, Z
 43a:	88 2f       	mov	r24, r24
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	81 71       	andi	r24, 0x11	; 17
 440:	90 70       	andi	r25, 0x00	; 0
 442:	21 e0       	ldi	r18, 0x01	; 1
 444:	00 97       	sbiw	r24, 0x00	; 0
 446:	09 f4       	brne	.+2      	; 0x44a <_Z14EnableRTCTimerv+0x5e>
 448:	20 e0       	ldi	r18, 0x00	; 0
 44a:	22 23       	and	r18, r18
 44c:	91 f7       	brne	.-28     	; 0x432 <_Z14EnableRTCTimerv+0x46>
	TIFR2 = (1 << TOV2);								//Clear any interrupts pending for the timer
 44e:	87 e3       	ldi	r24, 0x37	; 55
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	21 e0       	ldi	r18, 0x01	; 1
 454:	fc 01       	movw	r30, r24
 456:	20 83       	st	Z, r18
	TIMSK2 = (1 << TOIE2);								//Enable overflow on it
 458:	80 e7       	ldi	r24, 0x70	; 112
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	21 e0       	ldi	r18, 0x01	; 1
 45e:	fc 01       	movw	r30, r24
 460:	20 83       	st	Z, r18
	
	//Away we go
}
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <_Z7Wait_msi>:
/*************************************************************************************************************/
void Wait_ms(volatile int delay)
{
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	00 d0       	rcall	.+0      	; 0x46e <_Z7Wait_msi+0x6>
 46e:	0f 92       	push	r0
 470:	cd b7       	in	r28, 0x3d	; 61
 472:	de b7       	in	r29, 0x3e	; 62
 474:	9c 83       	std	Y+4, r25	; 0x04
 476:	8b 83       	std	Y+3, r24	; 0x03
	volatile int i;

	while(delay > 0){
 478:	18 c0       	rjmp	.+48     	; 0x4aa <_Z7Wait_msi+0x42>
		for(i = 0; i < 800; i++){
 47a:	1a 82       	std	Y+2, r1	; 0x02
 47c:	19 82       	std	Y+1, r1	; 0x01
 47e:	06 c0       	rjmp	.+12     	; 0x48c <_Z7Wait_msi+0x24>
			asm volatile("nop");
 480:	00 00       	nop
void Wait_ms(volatile int delay)
{
	volatile int i;

	while(delay > 0){
		for(i = 0; i < 800; i++){
 482:	89 81       	ldd	r24, Y+1	; 0x01
 484:	9a 81       	ldd	r25, Y+2	; 0x02
 486:	01 96       	adiw	r24, 0x01	; 1
 488:	9a 83       	std	Y+2, r25	; 0x02
 48a:	89 83       	std	Y+1, r24	; 0x01
 48c:	89 81       	ldd	r24, Y+1	; 0x01
 48e:	9a 81       	ldd	r25, Y+2	; 0x02
 490:	21 e0       	ldi	r18, 0x01	; 1
 492:	33 e0       	ldi	r19, 0x03	; 3
 494:	80 32       	cpi	r24, 0x20	; 32
 496:	93 07       	cpc	r25, r19
 498:	0c f0       	brlt	.+2      	; 0x49c <_Z7Wait_msi+0x34>
 49a:	20 e0       	ldi	r18, 0x00	; 0
 49c:	22 23       	and	r18, r18
 49e:	81 f7       	brne	.-32     	; 0x480 <_Z7Wait_msi+0x18>
			asm volatile("nop");
		}
		delay -= 1;
 4a0:	8b 81       	ldd	r24, Y+3	; 0x03
 4a2:	9c 81       	ldd	r25, Y+4	; 0x04
 4a4:	01 97       	sbiw	r24, 0x01	; 1
 4a6:	9c 83       	std	Y+4, r25	; 0x04
 4a8:	8b 83       	std	Y+3, r24	; 0x03
/*************************************************************************************************************/
void Wait_ms(volatile int delay)
{
	volatile int i;

	while(delay > 0){
 4aa:	8b 81       	ldd	r24, Y+3	; 0x03
 4ac:	9c 81       	ldd	r25, Y+4	; 0x04
 4ae:	21 e0       	ldi	r18, 0x01	; 1
 4b0:	18 16       	cp	r1, r24
 4b2:	19 06       	cpc	r1, r25
 4b4:	0c f0       	brlt	.+2      	; 0x4b8 <_Z7Wait_msi+0x50>
 4b6:	20 e0       	ldi	r18, 0x00	; 0
 4b8:	22 23       	and	r18, r18
 4ba:	f9 f6       	brne	.-66     	; 0x47a <_Z7Wait_msi+0x12>
		for(i = 0; i < 800; i++){
			asm volatile("nop");
		}
		delay -= 1;
	}
}
 4bc:	0f 90       	pop	r0
 4be:	0f 90       	pop	r0
 4c0:	0f 90       	pop	r0
 4c2:	0f 90       	pop	r0
 4c4:	df 91       	pop	r29
 4c6:	cf 91       	pop	r28
 4c8:	08 95       	ret

000004ca <_exit>:
 4ca:	f8 94       	cli

000004cc <__stop_program>:
 4cc:	ff cf       	rjmp	.-2      	; 0x4cc <__stop_program>
