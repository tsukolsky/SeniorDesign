
pcbTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000003ea  0000045e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000460  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000436  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000127  00000000  00000000  0000106e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026c  00000000  00000000  00001195  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  00001404  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000155  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000022c  00000000  00000000  00001675  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_11>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ea ee       	ldi	r30, 0xEA	; 234
  90:	f3 e0       	ldi	r31, 0x03	; 3
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	11 e0       	ldi	r17, 0x01	; 1
  a0:	a2 e0       	ldi	r26, 0x02	; 2
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a2 30       	cpi	r26, 0x02	; 2
  aa:	b1 07       	cpc	r27, r17
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 83 00 	call	0x106	; 0x106 <main>
  b2:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <__vector_11>:
void EnableRTCTimer();
void Wait_ms(volatile int delay);
void GoToSleep();

/*--------------------------Interrupt Service Routines------------------------------------------------------------------------------------*/
ISR(TIMER2_OVF_vect){
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	ef 93       	push	r30
  ce:	ff 93       	push	r31
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
	static unsigned int counter=4;	
	prtSLEEPled ^= (1 << bnSLEEPled);	//toggles sleep led at .5Hz
  d8:	8b e2       	ldi	r24, 0x2B	; 43
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	2b e2       	ldi	r18, 0x2B	; 43
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	f9 01       	movw	r30, r18
  e2:	30 81       	ld	r19, Z
  e4:	20 e8       	ldi	r18, 0x80	; 128
  e6:	23 27       	eor	r18, r19
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
	/*
	prtDEBUGled ^= (1 << counter);
	if (counter++ == 7){counter = 0;}
	*/

}
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	ff 91       	pop	r31
  f2:	ef 91       	pop	r30
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	3f 91       	pop	r19
  fa:	2f 91       	pop	r18
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <main>:

int main(void)
{
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
	DeviceInit();
 10e:	0e 94 ac 00 	call	0x158	; 0x158 <_Z10DeviceInitv>
	AppInit(MYUBRR);
 112:	81 e8       	ldi	r24, 0x81	; 129
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_Z7AppInitj>
	Wait_ms(200);
 11a:	88 ec       	ldi	r24, 0xC8	; 200
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 86 01 	call	0x30c	; 0x30c <_Z7Wait_msi>
	EnableRTCTimer();
 122:	0e 94 48 01 	call	0x290	; 0x290 <_Z14EnableRTCTimerv>
    while(1)
    {
		prtTEMPen |= (1 << bnTEMPen);
 126:	85 e2       	ldi	r24, 0x25	; 37
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	25 e2       	ldi	r18, 0x25	; 37
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	f9 01       	movw	r30, r18
 130:	20 81       	ld	r18, Z
 132:	21 60       	ori	r18, 0x01	; 1
 134:	fc 01       	movw	r30, r24
 136:	20 83       	st	Z, r18
		Wait_ms(2000);
 138:	80 ed       	ldi	r24, 0xD0	; 208
 13a:	97 e0       	ldi	r25, 0x07	; 7
 13c:	0e 94 86 01 	call	0x30c	; 0x30c <_Z7Wait_msi>
		prtTEMPen &= ~(1 << bnTEMPen);
 140:	85 e2       	ldi	r24, 0x25	; 37
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	25 e2       	ldi	r18, 0x25	; 37
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	f9 01       	movw	r30, r18
 14a:	20 81       	ld	r18, Z
 14c:	2e 7f       	andi	r18, 0xFE	; 254
 14e:	fc 01       	movw	r30, r24
 150:	20 83       	st	Z, r18
        GoToSleep(); 
 152:	0e 94 b7 01 	call	0x36e	; 0x36e <_Z9GoToSleepv>
{
	DeviceInit();
	AppInit(MYUBRR);
	Wait_ms(200);
	EnableRTCTimer();
    while(1)
 156:	e7 cf       	rjmp	.-50     	; 0x126 <main+0x20>

00000158 <_Z10DeviceInitv>:
        GoToSleep(); 
    }
}

/*************************************************************************************************************/
void DeviceInit(){
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	cd b7       	in	r28, 0x3d	; 61
 15e:	de b7       	in	r29, 0x3e	; 62
	//Set all ports to input with no pull
	DDRA = 0;
 160:	81 e2       	ldi	r24, 0x21	; 33
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	fc 01       	movw	r30, r24
 166:	10 82       	st	Z, r1
	DDRB = 0;
 168:	84 e2       	ldi	r24, 0x24	; 36
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	fc 01       	movw	r30, r24
 16e:	10 82       	st	Z, r1
	DDRC = 0;
 170:	87 e2       	ldi	r24, 0x27	; 39
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	fc 01       	movw	r30, r24
 176:	10 82       	st	Z, r1
	DDRD = 0;
 178:	8a e2       	ldi	r24, 0x2A	; 42
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	fc 01       	movw	r30, r24
 17e:	10 82       	st	Z, r1
	PORTH = 0;
	PORTJ = 0;
	PORTK = 0;
	PORTL = 0;
	*/
	PORTA = 0;
 180:	82 e2       	ldi	r24, 0x22	; 34
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	fc 01       	movw	r30, r24
 186:	10 82       	st	Z, r1
	PORTB = 0;
 188:	85 e2       	ldi	r24, 0x25	; 37
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	fc 01       	movw	r30, r24
 18e:	10 82       	st	Z, r1
	PORTC = 0;
 190:	88 e2       	ldi	r24, 0x28	; 40
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	fc 01       	movw	r30, r24
 196:	10 82       	st	Z, r1
	PORTD = 0;
 198:	8b e2       	ldi	r24, 0x2B	; 43
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	fc 01       	movw	r30, r24
 19e:	10 82       	st	Z, r1

}
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <_Z7AppInitj>:

/*************************************************************************************************************/
void AppInit(unsigned int ubrr){
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	00 d0       	rcall	.+0      	; 0x1ac <_Z7AppInitj+0x6>
 1ac:	cd b7       	in	r28, 0x3d	; 61
 1ae:	de b7       	in	r29, 0x3e	; 62
 1b0:	9a 83       	std	Y+2, r25	; 0x02
 1b2:	89 83       	std	Y+1, r24	; 0x01
	
	//Set BAUD rate of UART
	UBRR0L = ubrr;   												//set low byte of baud rate
 1b4:	84 ec       	ldi	r24, 0xC4	; 196
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	29 81       	ldd	r18, Y+1	; 0x01
 1ba:	fc 01       	movw	r30, r24
 1bc:	20 83       	st	Z, r18
	UBRR0H = (ubrr >> 8);											//set high byte of baud rate
 1be:	85 ec       	ldi	r24, 0xC5	; 197
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	29 81       	ldd	r18, Y+1	; 0x01
 1c4:	3a 81       	ldd	r19, Y+2	; 0x02
 1c6:	23 2f       	mov	r18, r19
 1c8:	33 27       	eor	r19, r19
 1ca:	fc 01       	movw	r30, r24
 1cc:	20 83       	st	Z, r18
	//UCSR0A |= (1 << U2X0);										//set high speed baud clock, in ASYNC mode
	
	//Enable UART_TX0 and UART_RX0
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);
 1ce:	81 ec       	ldi	r24, 0xC1	; 193
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	28 e1       	ldi	r18, 0x18	; 24
 1d4:	fc 01       	movw	r30, r24
 1d6:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);							//Asynchronous; 8 data bits, no parity
 1d8:	82 ec       	ldi	r24, 0xC2	; 194
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	26 e0       	ldi	r18, 0x06	; 6
 1de:	fc 01       	movw	r30, r24
 1e0:	20 83       	st	Z, r18
	//UCSR0B |= (1 << RXCIE0);
	
	//Disable power to all peripherals
	PRR0 |= (1 << PRTWI)|(1 << PRTIM2)|(1 << PRTIM0)|(1 << PRUSART1)|(1 << PRTIM1)|(1 << PRADC)|(1 << PRSPI);  //Turn EVERYTHING off initially except USART0(UART0)
 1e2:	84 e6       	ldi	r24, 0x64	; 100
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	24 e6       	ldi	r18, 0x64	; 100
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	f9 01       	movw	r30, r18
 1ec:	20 81       	ld	r18, Z
 1ee:	2d 6f       	ori	r18, 0xFD	; 253
 1f0:	fc 01       	movw	r30, r24
 1f2:	20 83       	st	Z, r18


		//Enable LEDs
		ddrSLEEPled |= (1 << bnSLEEPled);
 1f4:	8a e2       	ldi	r24, 0x2A	; 42
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	2a e2       	ldi	r18, 0x2A	; 42
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	f9 01       	movw	r30, r18
 1fe:	20 81       	ld	r18, Z
 200:	20 68       	ori	r18, 0x80	; 128
 202:	fc 01       	movw	r30, r24
 204:	20 83       	st	Z, r18
		ddrSTATUSled |= (1 << bnSTATUSled);
 206:	87 e2       	ldi	r24, 0x27	; 39
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	27 e2       	ldi	r18, 0x27	; 39
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	f9 01       	movw	r30, r18
 210:	20 81       	ld	r18, Z
 212:	24 60       	ori	r18, 0x04	; 4
 214:	fc 01       	movw	r30, r24
 216:	20 83       	st	Z, r18
		prtSLEEPled &= ~(1 << bnSLEEPled);		//turn on initially
 218:	8b e2       	ldi	r24, 0x2B	; 43
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	2b e2       	ldi	r18, 0x2B	; 43
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	f9 01       	movw	r30, r18
 222:	20 81       	ld	r18, Z
 224:	2f 77       	andi	r18, 0x7F	; 127
 226:	fc 01       	movw	r30, r24
 228:	20 83       	st	Z, r18
		prtSTATUSled |= (1 << bnSTATUSled);
 22a:	88 e2       	ldi	r24, 0x28	; 40
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	28 e2       	ldi	r18, 0x28	; 40
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	f9 01       	movw	r30, r18
 234:	20 81       	ld	r18, Z
 236:	24 60       	ori	r18, 0x04	; 4
 238:	fc 01       	movw	r30, r24
 23a:	20 83       	st	Z, r18
		
		//Enable all regulators!
		ddrENABLE |= (1 << bnGPSen)|(1 << bnBBen)|(1 << bnGAVRen)|(1 << bnGPSen);
 23c:	81 e2       	ldi	r24, 0x21	; 33
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	21 e2       	ldi	r18, 0x21	; 33
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	f9 01       	movw	r30, r18
 246:	20 81       	ld	r18, Z
 248:	20 6d       	ori	r18, 0xD0	; 208
 24a:	fc 01       	movw	r30, r24
 24c:	20 83       	st	Z, r18
		ddrTEMPen |= (1 << bnTEMPen);
 24e:	84 e2       	ldi	r24, 0x24	; 36
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	24 e2       	ldi	r18, 0x24	; 36
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	f9 01       	movw	r30, r18
 258:	20 81       	ld	r18, Z
 25a:	21 60       	ori	r18, 0x01	; 1
 25c:	fc 01       	movw	r30, r24
 25e:	20 83       	st	Z, r18
		ddrMAINen |= (1 << bnMAINen);
 260:	87 e2       	ldi	r24, 0x27	; 39
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	27 e2       	ldi	r18, 0x27	; 39
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	f9 01       	movw	r30, r18
 26a:	20 81       	ld	r18, Z
 26c:	21 60       	ori	r18, 0x01	; 1
 26e:	fc 01       	movw	r30, r24
 270:	20 83       	st	Z, r18
		prtENABLE |= (1 << bnGPSen)|(1 << bnBBen)|(1 << bnGAVRen)|(1 << bnLCDen);
 272:	82 e2       	ldi	r24, 0x22	; 34
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	22 e2       	ldi	r18, 0x22	; 34
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	f9 01       	movw	r30, r18
 27c:	20 81       	ld	r18, Z
 27e:	20 6f       	ori	r18, 0xF0	; 240
 280:	fc 01       	movw	r30, r24
 282:	20 83       	st	Z, r18
		ddrDEBUGled |= 0xFF;
		prtDEBUGled = 0x00;
		ddrDEBUGled2 |= (1 << bnDBG10)|(1 << bnDBG9)|(1 << bnDBG8);
		prtDEBUGled2 |= ((1 << bnDBG10)|(1 << bnDBG9)|(1 << bnDBG8));
*/
	sei();
 284:	78 94       	sei
}
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <_Z14EnableRTCTimerv>:


/*************************************************************************************************************/
void EnableRTCTimer(){
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
	//Asynchronous should be done based on TOSC1 and TOSC2
	//Give power back to Timer2
	PRR0 &= ~(1 << PRTIM2);
 298:	84 e6       	ldi	r24, 0x64	; 100
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	24 e6       	ldi	r18, 0x64	; 100
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	f9 01       	movw	r30, r18
 2a2:	20 81       	ld	r18, Z
 2a4:	2f 7b       	andi	r18, 0xBF	; 191
 2a6:	fc 01       	movw	r30, r24
 2a8:	20 83       	st	Z, r18
	Wait_ms(1);	//give it time to power on
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 86 01 	call	0x30c	; 0x30c <_Z7Wait_msi>
	
	//Set to Asynchronous mode, uses TOSC1/TOSC2 pins
	ASSR |= (1 << AS2);
 2b2:	86 eb       	ldi	r24, 0xB6	; 182
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	26 eb       	ldi	r18, 0xB6	; 182
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	f9 01       	movw	r30, r18
 2bc:	20 81       	ld	r18, Z
 2be:	20 62       	ori	r18, 0x20	; 32
 2c0:	fc 01       	movw	r30, r24
 2c2:	20 83       	st	Z, r18
	
	//Set prescaler, initialize registers
	TCCR2B |= (1 << CS22)|(1 << CS20);	//128 prescaler, should click into overflow every second
 2c4:	81 eb       	ldi	r24, 0xB1	; 177
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	21 eb       	ldi	r18, 0xB1	; 177
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	f9 01       	movw	r30, r18
 2ce:	20 81       	ld	r18, Z
 2d0:	25 60       	ori	r18, 0x05	; 5
 2d2:	fc 01       	movw	r30, r24
 2d4:	20 83       	st	Z, r18
	while ((ASSR & ((1 << TCR2BUB)|(1 << TCN2UB))));	//wait for it not to be busy
 2d6:	86 eb       	ldi	r24, 0xB6	; 182
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	fc 01       	movw	r30, r24
 2dc:	80 81       	ld	r24, Z
 2de:	88 2f       	mov	r24, r24
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	81 71       	andi	r24, 0x11	; 17
 2e4:	90 70       	andi	r25, 0x00	; 0
 2e6:	21 e0       	ldi	r18, 0x01	; 1
 2e8:	00 97       	sbiw	r24, 0x00	; 0
 2ea:	09 f4       	brne	.+2      	; 0x2ee <_Z14EnableRTCTimerv+0x5e>
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	22 23       	and	r18, r18
 2f0:	91 f7       	brne	.-28     	; 0x2d6 <_Z14EnableRTCTimerv+0x46>
	TIFR2 = (1 << TOV2);								//Clear any interrupts pending for the timer
 2f2:	87 e3       	ldi	r24, 0x37	; 55
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	21 e0       	ldi	r18, 0x01	; 1
 2f8:	fc 01       	movw	r30, r24
 2fa:	20 83       	st	Z, r18
	TIMSK2 = (1 << TOIE2);								//Enable overflow on it
 2fc:	80 e7       	ldi	r24, 0x70	; 112
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	21 e0       	ldi	r18, 0x01	; 1
 302:	fc 01       	movw	r30, r24
 304:	20 83       	st	Z, r18
	
	//Away we go
}
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	08 95       	ret

0000030c <_Z7Wait_msi>:
/*************************************************************************************************************/
void Wait_ms(volatile int delay)
{
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	00 d0       	rcall	.+0      	; 0x312 <_Z7Wait_msi+0x6>
 312:	00 d0       	rcall	.+0      	; 0x314 <_Z7Wait_msi+0x8>
 314:	cd b7       	in	r28, 0x3d	; 61
 316:	de b7       	in	r29, 0x3e	; 62
 318:	9c 83       	std	Y+4, r25	; 0x04
 31a:	8b 83       	std	Y+3, r24	; 0x03
	volatile int i;

	while(delay > 0){
 31c:	18 c0       	rjmp	.+48     	; 0x34e <_Z7Wait_msi+0x42>
		for(i = 0; i < 800; i++){
 31e:	1a 82       	std	Y+2, r1	; 0x02
 320:	19 82       	std	Y+1, r1	; 0x01
 322:	06 c0       	rjmp	.+12     	; 0x330 <_Z7Wait_msi+0x24>
			asm volatile("nop");
 324:	00 00       	nop
void Wait_ms(volatile int delay)
{
	volatile int i;

	while(delay > 0){
		for(i = 0; i < 800; i++){
 326:	89 81       	ldd	r24, Y+1	; 0x01
 328:	9a 81       	ldd	r25, Y+2	; 0x02
 32a:	01 96       	adiw	r24, 0x01	; 1
 32c:	9a 83       	std	Y+2, r25	; 0x02
 32e:	89 83       	std	Y+1, r24	; 0x01
 330:	89 81       	ldd	r24, Y+1	; 0x01
 332:	9a 81       	ldd	r25, Y+2	; 0x02
 334:	21 e0       	ldi	r18, 0x01	; 1
 336:	33 e0       	ldi	r19, 0x03	; 3
 338:	80 32       	cpi	r24, 0x20	; 32
 33a:	93 07       	cpc	r25, r19
 33c:	0c f0       	brlt	.+2      	; 0x340 <_Z7Wait_msi+0x34>
 33e:	20 e0       	ldi	r18, 0x00	; 0
 340:	22 23       	and	r18, r18
 342:	81 f7       	brne	.-32     	; 0x324 <_Z7Wait_msi+0x18>
			asm volatile("nop");
		}
		delay -= 1;
 344:	8b 81       	ldd	r24, Y+3	; 0x03
 346:	9c 81       	ldd	r25, Y+4	; 0x04
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	9c 83       	std	Y+4, r25	; 0x04
 34c:	8b 83       	std	Y+3, r24	; 0x03
/*************************************************************************************************************/
void Wait_ms(volatile int delay)
{
	volatile int i;

	while(delay > 0){
 34e:	8b 81       	ldd	r24, Y+3	; 0x03
 350:	9c 81       	ldd	r25, Y+4	; 0x04
 352:	21 e0       	ldi	r18, 0x01	; 1
 354:	18 16       	cp	r1, r24
 356:	19 06       	cpc	r1, r25
 358:	0c f0       	brlt	.+2      	; 0x35c <_Z7Wait_msi+0x50>
 35a:	20 e0       	ldi	r18, 0x00	; 0
 35c:	22 23       	and	r18, r18
 35e:	f9 f6       	brne	.-66     	; 0x31e <_Z7Wait_msi+0x12>
		for(i = 0; i < 800; i++){
			asm volatile("nop");
		}
		delay -= 1;
	}
}
 360:	0f 90       	pop	r0
 362:	0f 90       	pop	r0
 364:	0f 90       	pop	r0
 366:	0f 90       	pop	r0
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <_Z9GoToSleepv>:
/*************************************************************************************************************/
void GoToSleep(){
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	00 d0       	rcall	.+0      	; 0x374 <_Z9GoToSleepv+0x6>
 374:	00 d0       	rcall	.+0      	; 0x376 <_Z9GoToSleepv+0x8>
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
	sei();
 37a:	78 94       	sei
	volatile int sleepTime=5, sleepTicks = 0;
 37c:	85 e0       	ldi	r24, 0x05	; 5
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	9a 83       	std	Y+2, r25	; 0x02
 382:	89 83       	std	Y+1, r24	; 0x01
 384:	1c 82       	std	Y+4, r1	; 0x04
 386:	1b 82       	std	Y+3, r1	; 0x03
	//If bool is true, we are in low power mode/backup, sleep for 60 seconds then check ADC again
	
	//Set to power save, then enable
	SMCR = (1 << SM1)|(1 << SM0);
 388:	83 e5       	ldi	r24, 0x53	; 83
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	26 e0       	ldi	r18, 0x06	; 6
 38e:	fc 01       	movw	r30, r24
 390:	20 83       	st	Z, r18
	SMCR |= (1 << SE);
 392:	83 e5       	ldi	r24, 0x53	; 83
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	23 e5       	ldi	r18, 0x53	; 83
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	f9 01       	movw	r30, r18
 39c:	20 81       	ld	r18, Z
 39e:	21 60       	ori	r18, 0x01	; 1
 3a0:	fc 01       	movw	r30, r24
 3a2:	20 83       	st	Z, r18
	
	//Give time to registers
	Wait_ms(1);
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 86 01 	call	0x30c	; 0x30c <_Z7Wait_msi>
	//Go to sleep
	while (sleepTicks < sleepTime){
 3ac:	06 c0       	rjmp	.+12     	; 0x3ba <_Z9GoToSleepv+0x4c>
		asm volatile("SLEEP");
 3ae:	88 95       	sleep
		sleepTicks++;
 3b0:	8b 81       	ldd	r24, Y+3	; 0x03
 3b2:	9c 81       	ldd	r25, Y+4	; 0x04
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	9c 83       	std	Y+4, r25	; 0x04
 3b8:	8b 83       	std	Y+3, r24	; 0x03
	SMCR |= (1 << SE);
	
	//Give time to registers
	Wait_ms(1);
	//Go to sleep
	while (sleepTicks < sleepTime){
 3ba:	2b 81       	ldd	r18, Y+3	; 0x03
 3bc:	3c 81       	ldd	r19, Y+4	; 0x04
 3be:	89 81       	ldd	r24, Y+1	; 0x01
 3c0:	9a 81       	ldd	r25, Y+2	; 0x02
 3c2:	41 e0       	ldi	r20, 0x01	; 1
 3c4:	28 17       	cp	r18, r24
 3c6:	39 07       	cpc	r19, r25
 3c8:	0c f0       	brlt	.+2      	; 0x3cc <_Z9GoToSleepv+0x5e>
 3ca:	40 e0       	ldi	r20, 0x00	; 0
 3cc:	44 23       	and	r20, r20
 3ce:	79 f7       	brne	.-34     	; 0x3ae <_Z9GoToSleepv+0x40>
		asm volatile("SLEEP");
		sleepTicks++;
	} //endwhile
	
	//Give it time to power back on
	Wait_ms(10);
 3d0:	8a e0       	ldi	r24, 0x0A	; 10
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	0e 94 86 01 	call	0x30c	; 0x30c <_Z7Wait_msi>
	
}
 3d8:	0f 90       	pop	r0
 3da:	0f 90       	pop	r0
 3dc:	0f 90       	pop	r0
 3de:	0f 90       	pop	r0
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <_exit>:
 3e6:	f8 94       	cli

000003e8 <__stop_program>:
 3e8:	ff cf       	rjmp	.-2      	; 0x3e8 <__stop_program>
